{"project_id":3,"chunk_id":0,"content":{"main_file_path":"Airlines-Reservation-and-Management-System-main\\Admin.java","main_file_content":"import java.sql.*; import java.util.Scanner; public class Admin extends User { private static Plane flight = new Plane(); private static Scanner scanner = new Scanner(System.in); public static void showAppTitle() { clearScreen(); printCentered(\"\\n\"); printCentered(\"╔══════════════════════════════════════════════════════╗\"); printCentered(\"║ Welcome to Skypass Admin Portal ║\"); printCentered(\"╚══════════════════════════════════════════════════════╝\"); printCentered(\"\\tLogged in as: \" + yellow + userFirstName + \" \" + userLastName + reset); showDisplayMessage(); } private static boolean isAdmin(String username) throws Exception { ResultSet resultSet = Database.databaseQuery(\"select role from users where username = ?;\", username); if (resultSet.next()) { if (resultSet.getString(\"role\").equals(\"admin\")) { return true; } } return false; } private static void addAdmin() throws Exception { clearScreen(); showAppTitle(); String username; System.out.print(\"\\t\\t\\t\\tEnter the username of the new admin: \"); username = scanner.nextLine(); if (checkUsername(username)) { if (isAdmin(username)) { setDisplayMessage(red + \"\\t \" + username + \" is already an admin\" + reset); } else { System.out.print( \"\\t\\t\\t\" + username + \" is already a user. Do you want to make them an admin? (y/n): \"); String choice = scanner.nextLine(); if (choice.equals(\"y\")) { Database.databaseQuery(\"update users set role = 'admin' where username = ?;\", username); setDisplayMessage(green + \"\\t\" + username + \" is now an admin\" + reset); } } } else { registerUser(\"admin\"); } } private static void showUsers() throws Exception { ResultSet resultSet = Database.databaseQuery(\"select * from users;\"); String format = \"║ %s │ %-15s │ %-15s │ %-15s │ %-10s ║\"; System.out.print( ); while (resultSet.next()) { System.out.printf(format, resultSet.getString(\"id\"), resultSet.getString(\"username\"), resultSet.getString(\"firstname\") + \" \" + resultSet.getString(\"lastname\"), resultSet.getString(\"phone_no\"), resultSet.getString(\"role\")); if (!resultSet.isLast()) { System.out .print(); } } System.out.print( ); resultSet.close(); } private static void removeAdmin() throws Exception { clearScreen(); showAppTitle(); String username; System.out.print(\"\\t\\t\\t\\tEnter the username of the admin to remove: \"); username = scanner.nextLine(); if (isAdmin(username)) { Database.databaseQuery(\"update users set role = 'passenger' where username = ?;\", username); setDisplayMessage(green + \"\\t \" + username + \" is no longer an admin\" + reset); } else { setDisplayMessage(red + \"\\t \" + username + \" is not an admin\" + reset); } } public void adminMenu() throws Exception { int choice; do { showAppTitle(); showDisplayMessage(); System.out.println(); System.out.print(\"\\t\\t\\t\\tEnter your choice: \"); choice = scanner.nextInt(); scanner.nextLine(); switch (choice) { case 1: showAppTitle(); flight.showPlaneDetails(\"all\"); System.out.print(\"Press enter to continue...\"); scanner.nextLine(); break; case 2: showAppTitle(); flight.addPlane(); break; case 4: showAppTitle(); addAdmin(); break; case 3: showAppTitle(); System.out.print(\"\\t\\t\\t\\tEnter Plane ID to edit: \"); int id = scanner.nextInt(); showAppTitle(); flight.editPlaneDetails(id); break; case 5: showAppTitle(); removeAdmin(); break; case 6: showAppTitle(); showUsers(); System.out.print(\"Press enter to continue...\"); scanner.nextLine(); break; case 7: setDisplayMessage(green + \"\\t Logged out successfully\" + reset); return; default: setDisplayMessage(red + \"\\t Invalid choice. Please try again\" + reset); } } while (choice != 7); } }","dependencies":[{"file_path":"Airlines-Reservation-and-Management-System-main\\Database.java","file_content":"import java.sql.*; public class Database { private static String URL = \"jdbc:mysql: private static String USERNAME = \"root\"; private static String PASSWORD = \"\"; public static ResultSet databaseQuery(String query, Object... params) throws Exception { Connection connection = DriverManager.getConnection(URL, USERNAME, PASSWORD); PreparedStatement statement = connection.prepareStatement(query); for (int i = 0; i < params.length; i++) { statement.setObject(i + 1, params[i]); } if (query.trim().toLowerCase().startsWith(\"select\")) { ResultSet resultSet = statement.executeQuery(); if (!resultSet.isBeforeFirst()) { return null; } return resultSet; } else { statement.executeUpdate(); return null; } } }"},{"file_path":"Airlines-Reservation-and-Management-System-main\\Plane.java","file_content":"import java.sql.*; import java.time.*; import java.time.format.*; import java.util.*; public class Plane extends AirlinesReservationSystem { public int flightId; public String origin; public String destination; public String capacity; public String departureDate; public String departureTime; public String fare; public String available; public String name; private static DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"hh:mm a\"); private static Scanner scanner = new Scanner(System.in); public void showPlaneDetails(String condition, Object... params) throws Exception { ResultSet planes; StringBuilder query = new StringBuilder(\"SELECT * FROM planes\"); if (condition.equals(\"available\")) { query.append(\" WHERE available = 1 \"); } if (params.length > 1) { query.append(\" AND origin = '\" + params[0] + \"' AND destination = '\" + params[1] + \"' \"); } else if (params.length > 0) { if (condition.equals(\"all\")) { query.append(\" WHERE id = \" + params[0] + \" \"); } else { query.append(\" AND id = \" + params[0] + \" \"); } } planes = Database.databaseQuery(query + \";\"); if (planes == null) { setDisplayMessage(red + \"\\t!! Plane not found !!\" + reset); return; } String format = \"║ %s │ %10s │ %-10s │ %-10s │ %-12s │ %-13s│ %-10s│ %-10s ║\\n\"; System.out.print( ); while (planes.next()) { LocalTime departureTime = LocalTime.parse(planes.getString(\"departure_time\")); System.out.printf(format, planes.getString(\"id\"), planes.getString(\"name\"), planes.getString(\"origin\"), planes.getString(\"destination\"), planes.getString(\"departure_date\"), formatter.format(departureTime), \"Rs \" + planes.getString(\"fare\"), availableSeats(planes.getInt(\"id\"))); if (!planes.isLast()) { System.out.print( ); } } System.out.print( ); planes.close(); } public boolean checkFlights(String origin, String destination, Object... params) throws Exception { String query = \"SELECT * FROM planes WHERE origin = ? AND destination = ? AND available = 1\"; if (params.length > 0) { query += \" AND id = \" + params[0]; } if (Database.databaseQuery(query + \";\", origin, destination) != null) { return true; } else { return false; } } public boolean checkSeatCapacity(int flightId, int numberOfSeats) throws Exception { int availableSeats = availableSeats(flightId); if (availableSeats >= numberOfSeats) { return true; } return false; } public int availableSeats(int flightId) throws Exception { ResultSet planes = Database.databaseQuery( \"SELECT planes.capacity, COUNT(reservations.ticket_id) as reserved FROM planes LEFT JOIN reservations ON planes.id = reservations.plane_id WHERE planes.id = ? GROUP BY planes.id;\", flightId); if (planes.next()) { int capacity = planes.getInt(\"capacity\"); int reserved = planes.getInt(\"reserved\"); int availableSeats = capacity - reserved; planes.close(); return availableSeats; } planes.close(); return 0; } public Plane enterPlaneDetails() { Plane flight = new Plane(); System.out.print(\"\\n\\t\\t\\t\\tName: \"); flight.name = scanner.nextLine(); System.out.print(\"\\t\\t\\t\\tDeparture From: \"); flight.origin = scanner.nextLine(); System.out.print(\"\\t\\t\\t\\tDestination: \"); flight.destination = scanner.nextLine(); System.out.print(\"\\t\\t\\t\\tSeat Capacity: \"); flight.capacity = scanner.nextLine(); System.out.print(\"\\t\\t\\t\\tDeparture Date (yyyy-mm-dd): \"); flight.departureDate = scanner.nextLine(); System.out.print(\"\\t\\t\\t\\tDeparture Time (hh:mm AM/PM): \"); flight.departureTime = scanner.nextLine(); System.out.print(\"\\t\\t\\t\\tFare: \"); flight.fare = scanner.nextLine(); System.out.print(\"\\t\\t\\t\\tIs the plane available for booking? (y/n): \"); flight.available = scanner.nextLine(); flight.available = flight.available.equals(\"y\") ? \"1\" : \"0\"; return flight; } public void addPlane() throws Exception { System.out.println(\"\\n\"); printCentered(\"Enter Plane Details\"); printCentered(\"───────────────────\"); Plane flight = enterPlaneDetails(); flight.flightId = 1000 + (int) (Math.random() * ((99999 - 1000) + 1)); Database.databaseQuery( \"INSERT INTO planes (id,name, origin, destination, capacity, departure_date, departure_time, fare, available) VALUES (?,?,?,?,?,?,?,?,?);\", flight.flightId, flight.name, flight.origin, flight.destination, Integer.parseInt(flight.capacity), flight.departureDate, flight.departureTime, Integer.parseInt(flight.fare), Boolean.parseBoolean(flight.available)); setDisplayMessage(green + \"\\tFlight added successfully !\" + reset); } public void editPlaneDetails(int id) throws Exception { if (Database.databaseQuery(\"select * from planes where id = ?;\", id) == null) { setDisplayMessage(red + \"\\t!! Plane not found !!\" + reset); return; } else { showPlaneDetails(\"all\", id); printCentered(\"Enter new details (Press Enter to keep the old value)\"); printCentered(\"──────────────────────────────────────────────────────────\"); Plane flight = enterPlaneDetails(); String query = \"UPDATE planes SET \"; List<Object> params = new ArrayList<>(); String parameters[] = { flight.name, flight.origin, flight.destination, String.valueOf(flight.capacity), flight.departureDate, flight.departureTime, String.valueOf(flight.fare), String.valueOf(flight.available) }; String columns[] = { \"name\", \"origin\", \"destination\", \"capacity\", \"departure_date\", \"departure_time\", \"fare\", \"available\" }; for (int i = 0; i < parameters.length; i++) { if ((i == 3 || i == 6) && !parameters[i].isEmpty()) { params.add(Integer.parseInt(parameters[i])); query += columns[i] + \" = ?, \"; } else if (i == 7 && !parameters[i].isEmpty()) { params.add(Boolean.parseBoolean(parameters[i])); query += columns[i] + \" = ?, \"; } else if (!parameters[i].isEmpty()) { params.add(parameters[i]); query += columns[i] + \" = ?, \"; } } query = query.substring(0, query.length() - 2); query += \" WHERE id = ?;\"; params.add(id); Database.databaseQuery(query, params.toArray()); setDisplayMessage(green + \"\\t Flight details updated successfully !\" + reset); } } }"},{"file_path":"Airlines-Reservation-and-Management-System-main\\User.java","file_content":"import java.io.Console; import java.sql.*; import java.util.Scanner; public class User extends AirlinesReservationSystem { public static String username; public static String userFirstName; public static String userLastName; public static String userContactNumber; public static String password; public String role; public int numberOfSeats; public static int userId; private static Scanner scanner = new Scanner(System.in); public boolean userLogin(String role) throws Exception { Console console = System.console(); do { showAppTitle(); showDisplayMessage(); System.out.print(\"\\n\\t\\t\\t\\tEnter your username: \"); username = scanner.nextLine(); if (!checkUsername(username)) { setDisplayMessage(red + \"\\t!!OOPS! The username is not correct!!\" + reset); } } while (!checkUsername(username)); System.out.print(\"\\t\\t\\t\\tEnter your password: \"); char[] passwordArray = console.readPassword(); password = new String(passwordArray); java.util.Arrays.fill(passwordArray, ' '); if (authenticateUser(username, password, role)) { ResultSet user = Database.databaseQuery(\"select * from users where username = ?;\", username); user.next(); userId = user.getInt(\"id\"); userFirstName = user.getString(\"firstname\"); userLastName = user.getString(\"lastname\"); user.close(); return true; } else { setDisplayMessage(red + \"\\tERROR! The username or password is incorrect\" + reset); return false; } } public static void registerUser(String role) throws Exception { String username; do { showAppTitle(); showDisplayMessage(); System.out.print(\"\\n\\t\\t\\t\\tEnter a username: \"); username = scanner.nextLine(); if (checkUsername(username)) { setDisplayMessage(red + \"\\t!!OOPS! The username is already taken!!\" + reset); } } while (checkUsername(username)); System.out.print(\"\\t\\t\\t\\tEnter your password: \"); String password = scanner.nextLine(); System.out.print(\"\\t\\t\\t\\tEnter your first name: \"); String userFirstName = scanner.nextLine(); System.out.print(\"\\t\\t\\t\\tEnter your last name: \"); String userLastName = scanner.nextLine(); System.out.print(\"\\t\\t\\t\\tEnter your contact number: \"); String userContactNumber = scanner.nextLine(); String userId = String.valueOf((int) (Math.random() * 10000000)); Database.databaseQuery( \"insert into users ( id ,username, password, firstname, lastname, role,phone_no) values (?,?,?,?,?,?,?);\", userId, username, password, userFirstName, userLastName, role, userContactNumber); setDisplayMessage(green + \"\\tUser registered successfully\" + reset); } public boolean authenticateUser(String username, String password, String role) throws Exception { if (Database.databaseQuery(\"SELECT * FROM users WHERE username = ? AND password = ? AND role = ?;\", username, password, role) != null) { return true; } return false; } public static boolean checkUsername(String username) throws Exception { if (Database.databaseQuery(\"SELECT * FROM users WHERE username = ?;\", username) != null) { return true; } else { return false; } } }"}]}}
{"project_id":3,"chunk_id":0,"content":{"main_file_path":"Airlines-Reservation-and-Management-System-main\\AirlinesReservationSystem.java","main_file_content":"import java.util.Scanner; public class AirlinesReservationSystem { private static User user = new User(); private static Scanner scanner = new Scanner(System.in); private static Passenger passenger = new Passenger(); public static String red = \"\\033[0;31m\"; public static String cyan = \"\\033[0;36m\"; public static String reset = \"\\033[0m\"; public static String green = \"\\033[0;32m\"; public static String yellow = \"\\033[0;33m\"; private static String displayMessage = \"\"; public static void setDisplayMessage(String message) { displayMessage = message; } public static void showDisplayMessage() { if (displayMessage.equals(\"\")) { System.out.println(\"\\n\"); return; } System.out.println(\"\\n\"); printCentered(displayMessage); displayMessage = \"\"; } public static void printCentered(String message) { int width = 120; System.out.print(String.format(\"%\" + ((width + message.length()) / 2) + \"s\\n\", message)); } public static void clearScreen() { System.out.print(\"\\033[H\\033[2J\"); System.out.flush(); try { new ProcessBuilder(\"cmd\", \"/c\", \"cls\").inheritIO().start().waitFor(); } catch (Exception e) { System.out.println(e); } } public static void showAppTitle() { clearScreen(); System.out.println(cyan + + reset); printCentered(\"╠═════════════ Airlines Reservation System ════════════╣\"); } public static void showStartMenu() { showDisplayMessage(); printCentered(); } public static void main(String[] args) throws Exception { int choice; do { showAppTitle(); showStartMenu(); System.out.print(\"\\t\\t\\t\\tEnter your choice: \"); choice = scanner.nextInt(); switch (choice) { case 1: if (user.userLogin(\"admin\")) { Admin admin = new Admin(); admin.adminMenu(); } break; case 2: if (user.userLogin(\"passenger\")) { passenger.passengerMenu(); } break; case 3: User.registerUser(\"passenger\"); break; case 4: System.exit(0); break; default: setDisplayMessage(red + \"\\t ERROR ! Please enter valid option !\" + reset); } } while (choice != 4); scanner.close(); } }","dependencies":[{"file_path":"Airlines-Reservation-and-Management-System-main\\Admin.java","file_content":"import java.sql.*; import java.util.Scanner; public class Admin extends User { private static Plane flight = new Plane(); private static Scanner scanner = new Scanner(System.in); public static void showAppTitle() { clearScreen(); printCentered(\"\\n\"); printCentered(\"╔══════════════════════════════════════════════════════╗\"); printCentered(\"║ Welcome to Skypass Admin Portal ║\"); printCentered(\"╚══════════════════════════════════════════════════════╝\"); printCentered(\"\\tLogged in as: \" + yellow + userFirstName + \" \" + userLastName + reset); showDisplayMessage(); } private static boolean isAdmin(String username) throws Exception { ResultSet resultSet = Database.databaseQuery(\"select role from users where username = ?;\", username); if (resultSet.next()) { if (resultSet.getString(\"role\").equals(\"admin\")) { return true; } } return false; } private static void addAdmin() throws Exception { clearScreen(); showAppTitle(); String username; System.out.print(\"\\t\\t\\t\\tEnter the username of the new admin: \"); username = scanner.nextLine(); if (checkUsername(username)) { if (isAdmin(username)) { setDisplayMessage(red + \"\\t \" + username + \" is already an admin\" + reset); } else { System.out.print( \"\\t\\t\\t\" + username + \" is already a user. Do you want to make them an admin? (y/n): \"); String choice = scanner.nextLine(); if (choice.equals(\"y\")) { Database.databaseQuery(\"update users set role = 'admin' where username = ?;\", username); setDisplayMessage(green + \"\\t\" + username + \" is now an admin\" + reset); } } } else { registerUser(\"admin\"); } } private static void showUsers() throws Exception { ResultSet resultSet = Database.databaseQuery(\"select * from users;\"); String format = \"║ %s │ %-15s │ %-15s │ %-15s │ %-10s ║\"; System.out.print( ); while (resultSet.next()) { System.out.printf(format, resultSet.getString(\"id\"), resultSet.getString(\"username\"), resultSet.getString(\"firstname\") + \" \" + resultSet.getString(\"lastname\"), resultSet.getString(\"phone_no\"), resultSet.getString(\"role\")); if (!resultSet.isLast()) { System.out .print(); } } System.out.print( ); resultSet.close(); } private static void removeAdmin() throws Exception { clearScreen(); showAppTitle(); String username; System.out.print(\"\\t\\t\\t\\tEnter the username of the admin to remove: \"); username = scanner.nextLine(); if (isAdmin(username)) { Database.databaseQuery(\"update users set role = 'passenger' where username = ?;\", username); setDisplayMessage(green + \"\\t \" + username + \" is no longer an admin\" + reset); } else { setDisplayMessage(red + \"\\t \" + username + \" is not an admin\" + reset); } } public void adminMenu() throws Exception { int choice; do { showAppTitle(); showDisplayMessage(); System.out.println(); System.out.print(\"\\t\\t\\t\\tEnter your choice: \"); choice = scanner.nextInt(); scanner.nextLine(); switch (choice) { case 1: showAppTitle(); flight.showPlaneDetails(\"all\"); System.out.print(\"Press enter to continue...\"); scanner.nextLine(); break; case 2: showAppTitle(); flight.addPlane(); break; case 4: showAppTitle(); addAdmin(); break; case 3: showAppTitle(); System.out.print(\"\\t\\t\\t\\tEnter Plane ID to edit: \"); int id = scanner.nextInt(); showAppTitle(); flight.editPlaneDetails(id); break; case 5: showAppTitle(); removeAdmin(); break; case 6: showAppTitle(); showUsers(); System.out.print(\"Press enter to continue...\"); scanner.nextLine(); break; case 7: setDisplayMessage(green + \"\\t Logged out successfully\" + reset); return; default: setDisplayMessage(red + \"\\t Invalid choice. Please try again\" + reset); } } while (choice != 7); } }"},{"file_path":"Airlines-Reservation-and-Management-System-main\\Passenger.java","file_content":"import java.sql.ResultSet; import java.time.LocalDate; import java.time.LocalTime; import java.time.format.DateTimeFormatter; import java.util.Locale; import java.util.Scanner; public class Passenger extends User { private static Plane flight = new Plane(); private static Scanner scanner = new Scanner(System.in); private static DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern(\"HH:mm\"); private static DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern(\"dd MMM yyyy\") .withLocale(Locale.ENGLISH); public static void showAppTitle() { clearScreen(); printCentered(\"\\n\"); printCentered(\"╔══════════════════════════════════════════════════════╗\"); printCentered(\"║ Welcome to Skypass Passenger Portal ║\"); printCentered(\"╚══════════════════════════════════════════════════════╝\"); printCentered( \"\\t Logged in as: \" + yellow + userFirstName + \" \" + userLastName + \" (\" + username + \") \" + reset); showDisplayMessage(); } public void reserveSeat() throws Exception { System.out.print(\"\\t\\t\\t\\tEnter the destination: \"); flight.destination = scanner.nextLine(); System.out.print(\"\\t\\t\\t\\tEnter the origin: \"); flight.origin = scanner.nextLine(); if (flight.checkFlights(flight.origin, flight.destination)) { clearScreen(); showAppTitle(); flight.showPlaneDetails(\"available\", flight.origin, flight.destination); System.out.print(\"Enter the id of the flight to reserve: \"); flight.flightId = scanner.nextInt(); scanner.nextLine(); if (flight.checkFlights(flight.origin, flight.destination, flight.flightId)) { System.out.print(\"Enter the number of seats you want to reserve: \"); numberOfSeats = scanner.nextInt(); scanner.nextLine(); if (flight.checkSeatCapacity(flight.flightId, numberOfSeats)) { int reservationId = (int) (Math.random() * (999999 - 100000) + 100000); Database.databaseQuery( \"insert into reservations (ticket_id ,user_id, plane_id, number_of_seats) values (?,?,?,?);\", reservationId, userId, flight.flightId, numberOfSeats); setDisplayMessage( green + \"\\t Reservation successful. Your reservation id is \" + reservationId + reset); } else { setDisplayMessage(red + \"\\tSorry ! The requested number of seats are not available.\" + reset); } } else { setDisplayMessage(red + \"\\tSorry ! The selected flight is not valid.\" + reset); } } else { setDisplayMessage(red + \"\\tSorry ! No flights available for the given destination.\" + reset); } } public void showTickets(int userId) throws Exception { ResultSet reservation = Database.databaseQuery( \"select * from reservations inner join planes on reservations.plane_id = planes.id inner join users on reservations.user_id = users.id where user_id = ?;\", userId); if (reservation == null) { setDisplayMessage(red + \"\\t!! No reservations found !!\" + reset); return; } while (reservation.next()) { LocalTime departureTime = LocalTime.parse(reservation.getString(\"departure_time\")); LocalDate departureDate = LocalDate.parse(reservation.getString(\"departure_date\")); System.out.println( \"╔══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗\"); System.out.printf(\"║ %65s %50s\\n\", reservation.getString(\"name\"), \"║\"); System.out.printf(\"%s %119s\", \"║\", \"║\\n\"); System.out.printf(\"║ %s %109s ║\\n\", \"Ticket ID: \" + yellow + reservation.getString(\"ticket_id\") + reset, \"Flight ID: \" + yellow + reservation.getString(\"id\") + reset); System.out.printf(\"%s %119s\", \"║\", \"║\\n\"); System.out.printf(\"║ %s %50s %55s ║\\n\", \"Passenger Name: \" + yellow + reservation.getString(\"firstname\") + \" \" + reservation.getString(\"lastname\") + reset, \"Date: \" + yellow + dateFormatter.format(departureDate) + reset, \"Time: \" + yellow + timeFormatter.format(departureTime) + reset); System.out.printf(\"%s %119s\", \"║\", \"║\\n\"); System.out.printf(\"║ %-33s %-30s %75s\\n\", \"From: \" + yellow + reservation.getString(\"origin\") + reset, \"To: \" + yellow + reservation.getString(\"destination\") + reset, \"║\"); System.out.printf(\"%s %119s\", \"║\", \"║\\n\"); System.out.printf(\"║ %s %43s %74s\\n\", \"Seats: \" + yellow + reservation.getString(\"number_of_seats\") + reset, \"Total Fare: \" + yellow + \"Rs \" + reservation.getInt(\"fare\") * reservation.getInt(\"number_of_seats\") + reset, \"║\"); System.out.printf(\"%s %119s\", \"║\", \"║\\n\"); System.out.println( ); } reservation.close(); } public void cancelReservation() throws Exception { ResultSet reservation = Database.databaseQuery( \"select * from reservations inner join planes on reservations.plane_id = planes.id where user_id = ?;\", userId); if (reservation == null) { setDisplayMessage(red + \"\\t!! No reservations found !!\" + reset); } else { showTickets(userId); System.out.print(\"Enter the ticket id of the reservation you want to cancel: \"); int ticketId = scanner.nextInt(); scanner.nextLine(); System.out.print(\"Are you sure you want to cancel the reservation? (y/n): \"); String choice = scanner.nextLine(); if (choice.equals(\"y\")) { Database.databaseQuery(\"delete from reservations where ticket_id = ?;\", ticketId); setDisplayMessage(green + \"\\tReservation cancelled successfully\" + reset); } } reservation.close(); } public void passengerMenu() throws Exception { int choice; do { showAppTitle(); showDisplayMessage(); System.out.println(); System.out.print(\"\\t\\t\\t\\tEnter your choice: \"); choice = scanner.nextInt(); scanner.nextLine(); switch (choice) { case 1: showAppTitle(); flight.showPlaneDetails(\"available\"); System.out.print(\"Press enter to continue...\"); scanner.nextLine(); break; case 2: showAppTitle(); reserveSeat(); break; case 3: showAppTitle(); showTickets(userId); System.out.print(\"Press enter to continue...\"); scanner.nextLine(); break; case 4: showAppTitle(); cancelReservation(); break; case 5: setDisplayMessage(green + \"\\tLogged out successfully\" + reset); return; default: setDisplayMessage(red + \"\\t ERROR ! Please enter valid option !\" + reset); } } while (choice != 5); } }"},{"file_path":"Airlines-Reservation-and-Management-System-main\\User.java","file_content":"import java.io.Console; import java.sql.*; import java.util.Scanner; public class User extends AirlinesReservationSystem { public static String username; public static String userFirstName; public static String userLastName; public static String userContactNumber; public static String password; public String role; public int numberOfSeats; public static int userId; private static Scanner scanner = new Scanner(System.in); public boolean userLogin(String role) throws Exception { Console console = System.console(); do { showAppTitle(); showDisplayMessage(); System.out.print(\"\\n\\t\\t\\t\\tEnter your username: \"); username = scanner.nextLine(); if (!checkUsername(username)) { setDisplayMessage(red + \"\\t!!OOPS! The username is not correct!!\" + reset); } } while (!checkUsername(username)); System.out.print(\"\\t\\t\\t\\tEnter your password: \"); char[] passwordArray = console.readPassword(); password = new String(passwordArray); java.util.Arrays.fill(passwordArray, ' '); if (authenticateUser(username, password, role)) { ResultSet user = Database.databaseQuery(\"select * from users where username = ?;\", username); user.next(); userId = user.getInt(\"id\"); userFirstName = user.getString(\"firstname\"); userLastName = user.getString(\"lastname\"); user.close(); return true; } else { setDisplayMessage(red + \"\\tERROR! The username or password is incorrect\" + reset); return false; } } public static void registerUser(String role) throws Exception { String username; do { showAppTitle(); showDisplayMessage(); System.out.print(\"\\n\\t\\t\\t\\tEnter a username: \"); username = scanner.nextLine(); if (checkUsername(username)) { setDisplayMessage(red + \"\\t!!OOPS! The username is already taken!!\" + reset); } } while (checkUsername(username)); System.out.print(\"\\t\\t\\t\\tEnter your password: \"); String password = scanner.nextLine(); System.out.print(\"\\t\\t\\t\\tEnter your first name: \"); String userFirstName = scanner.nextLine(); System.out.print(\"\\t\\t\\t\\tEnter your last name: \"); String userLastName = scanner.nextLine(); System.out.print(\"\\t\\t\\t\\tEnter your contact number: \"); String userContactNumber = scanner.nextLine(); String userId = String.valueOf((int) (Math.random() * 10000000)); Database.databaseQuery( \"insert into users ( id ,username, password, firstname, lastname, role,phone_no) values (?,?,?,?,?,?,?);\", userId, username, password, userFirstName, userLastName, role, userContactNumber); setDisplayMessage(green + \"\\tUser registered successfully\" + reset); } public boolean authenticateUser(String username, String password, String role) throws Exception { if (Database.databaseQuery(\"SELECT * FROM users WHERE username = ? AND password = ? AND role = ?;\", username, password, role) != null) { return true; } return false; } public static boolean checkUsername(String username) throws Exception { if (Database.databaseQuery(\"SELECT * FROM users WHERE username = ?;\", username) != null) { return true; } else { return false; } } }"}]}}
{"project_id":3,"chunk_id":0,"content":{"main_file_path":"Airlines-Reservation-and-Management-System-main\\Database.java","main_file_content":"import java.sql.*; public class Database { private static String URL = \"jdbc:mysql: private static String USERNAME = \"root\"; private static String PASSWORD = \"\"; public static ResultSet databaseQuery(String query, Object... params) throws Exception { Connection connection = DriverManager.getConnection(URL, USERNAME, PASSWORD); PreparedStatement statement = connection.prepareStatement(query); for (int i = 0; i < params.length; i++) { statement.setObject(i + 1, params[i]); } if (query.trim().toLowerCase().startsWith(\"select\")) { ResultSet resultSet = statement.executeQuery(); if (!resultSet.isBeforeFirst()) { return null; } return resultSet; } else { statement.executeUpdate(); return null; } } }","dependencies":[]}}
{"project_id":3,"chunk_id":0,"content":{"main_file_path":"Airlines-Reservation-and-Management-System-main\\Passenger.java","main_file_content":"import java.sql.ResultSet; import java.time.LocalDate; import java.time.LocalTime; import java.time.format.DateTimeFormatter; import java.util.Locale; import java.util.Scanner; public class Passenger extends User { private static Plane flight = new Plane(); private static Scanner scanner = new Scanner(System.in); private static DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern(\"HH:mm\"); private static DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern(\"dd MMM yyyy\") .withLocale(Locale.ENGLISH); public static void showAppTitle() { clearScreen(); printCentered(\"\\n\"); printCentered(\"╔══════════════════════════════════════════════════════╗\"); printCentered(\"║ Welcome to Skypass Passenger Portal ║\"); printCentered(\"╚══════════════════════════════════════════════════════╝\"); printCentered( \"\\t Logged in as: \" + yellow + userFirstName + \" \" + userLastName + \" (\" + username + \") \" + reset); showDisplayMessage(); } public void reserveSeat() throws Exception { System.out.print(\"\\t\\t\\t\\tEnter the destination: \"); flight.destination = scanner.nextLine(); System.out.print(\"\\t\\t\\t\\tEnter the origin: \"); flight.origin = scanner.nextLine(); if (flight.checkFlights(flight.origin, flight.destination)) { clearScreen(); showAppTitle(); flight.showPlaneDetails(\"available\", flight.origin, flight.destination); System.out.print(\"Enter the id of the flight to reserve: \"); flight.flightId = scanner.nextInt(); scanner.nextLine(); if (flight.checkFlights(flight.origin, flight.destination, flight.flightId)) { System.out.print(\"Enter the number of seats you want to reserve: \"); numberOfSeats = scanner.nextInt(); scanner.nextLine(); if (flight.checkSeatCapacity(flight.flightId, numberOfSeats)) { int reservationId = (int) (Math.random() * (999999 - 100000) + 100000); Database.databaseQuery( \"insert into reservations (ticket_id ,user_id, plane_id, number_of_seats) values (?,?,?,?);\", reservationId, userId, flight.flightId, numberOfSeats); setDisplayMessage( green + \"\\t Reservation successful. Your reservation id is \" + reservationId + reset); } else { setDisplayMessage(red + \"\\tSorry ! The requested number of seats are not available.\" + reset); } } else { setDisplayMessage(red + \"\\tSorry ! The selected flight is not valid.\" + reset); } } else { setDisplayMessage(red + \"\\tSorry ! No flights available for the given destination.\" + reset); } } public void showTickets(int userId) throws Exception { ResultSet reservation = Database.databaseQuery( \"select * from reservations inner join planes on reservations.plane_id = planes.id inner join users on reservations.user_id = users.id where user_id = ?;\", userId); if (reservation == null) { setDisplayMessage(red + \"\\t!! No reservations found !!\" + reset); return; } while (reservation.next()) { LocalTime departureTime = LocalTime.parse(reservation.getString(\"departure_time\")); LocalDate departureDate = LocalDate.parse(reservation.getString(\"departure_date\")); System.out.println( \"╔══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗\"); System.out.printf(\"║ %65s %50s\\n\", reservation.getString(\"name\"), \"║\"); System.out.printf(\"%s %119s\", \"║\", \"║\\n\"); System.out.printf(\"║ %s %109s ║\\n\", \"Ticket ID: \" + yellow + reservation.getString(\"ticket_id\") + reset, \"Flight ID: \" + yellow + reservation.getString(\"id\") + reset); System.out.printf(\"%s %119s\", \"║\", \"║\\n\"); System.out.printf(\"║ %s %50s %55s ║\\n\", \"Passenger Name: \" + yellow + reservation.getString(\"firstname\") + \" \" + reservation.getString(\"lastname\") + reset, \"Date: \" + yellow + dateFormatter.format(departureDate) + reset, \"Time: \" + yellow + timeFormatter.format(departureTime) + reset); System.out.printf(\"%s %119s\", \"║\", \"║\\n\"); System.out.printf(\"║ %-33s %-30s %75s\\n\", \"From: \" + yellow + reservation.getString(\"origin\") + reset, \"To: \" + yellow + reservation.getString(\"destination\") + reset, \"║\"); System.out.printf(\"%s %119s\", \"║\", \"║\\n\"); System.out.printf(\"║ %s %43s %74s\\n\", \"Seats: \" + yellow + reservation.getString(\"number_of_seats\") + reset, \"Total Fare: \" + yellow + \"Rs \" + reservation.getInt(\"fare\") * reservation.getInt(\"number_of_seats\") + reset, \"║\"); System.out.printf(\"%s %119s\", \"║\", \"║\\n\"); System.out.println( ); } reservation.close(); } public void cancelReservation() throws Exception { ResultSet reservation = Database.databaseQuery( \"select * from reservations inner join planes on reservations.plane_id = planes.id where user_id = ?;\", userId); if (reservation == null) { setDisplayMessage(red + \"\\t!! No reservations found !!\" + reset); } else { showTickets(userId); System.out.print(\"Enter the ticket id of the reservation you want to cancel: \"); int ticketId = scanner.nextInt(); scanner.nextLine(); System.out.print(\"Are you sure you want to cancel the reservation? (y/n): \"); String choice = scanner.nextLine(); if (choice.equals(\"y\")) { Database.databaseQuery(\"delete from reservations where ticket_id = ?;\", ticketId); setDisplayMessage(green + \"\\tReservation cancelled successfully\" + reset); } } reservation.close(); } public void passengerMenu() throws Exception { int choice; do { showAppTitle(); showDisplayMessage(); System.out.println(); System.out.print(\"\\t\\t\\t\\tEnter your choice: \"); choice = scanner.nextInt(); scanner.nextLine(); switch (choice) { case 1: showAppTitle(); flight.showPlaneDetails(\"available\"); System.out.print(\"Press enter to continue...\"); scanner.nextLine(); break; case 2: showAppTitle(); reserveSeat(); break; case 3: showAppTitle(); showTickets(userId); System.out.print(\"Press enter to continue...\"); scanner.nextLine(); break; case 4: showAppTitle(); cancelReservation(); break; case 5: setDisplayMessage(green + \"\\tLogged out successfully\" + reset); return; default: setDisplayMessage(red + \"\\t ERROR ! Please enter valid option !\" + reset); } } while (choice != 5); } }","dependencies":[{"file_path":"Airlines-Reservation-and-Management-System-main\\Database.java","file_content":"import java.sql.*; public class Database { private static String URL = \"jdbc:mysql: private static String USERNAME = \"root\"; private static String PASSWORD = \"\"; public static ResultSet databaseQuery(String query, Object... params) throws Exception { Connection connection = DriverManager.getConnection(URL, USERNAME, PASSWORD); PreparedStatement statement = connection.prepareStatement(query); for (int i = 0; i < params.length; i++) { statement.setObject(i + 1, params[i]); } if (query.trim().toLowerCase().startsWith(\"select\")) { ResultSet resultSet = statement.executeQuery(); if (!resultSet.isBeforeFirst()) { return null; } return resultSet; } else { statement.executeUpdate(); return null; } } }"},{"file_path":"Airlines-Reservation-and-Management-System-main\\Plane.java","file_content":"import java.sql.*; import java.time.*; import java.time.format.*; import java.util.*; public class Plane extends AirlinesReservationSystem { public int flightId; public String origin; public String destination; public String capacity; public String departureDate; public String departureTime; public String fare; public String available; public String name; private static DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"hh:mm a\"); private static Scanner scanner = new Scanner(System.in); public void showPlaneDetails(String condition, Object... params) throws Exception { ResultSet planes; StringBuilder query = new StringBuilder(\"SELECT * FROM planes\"); if (condition.equals(\"available\")) { query.append(\" WHERE available = 1 \"); } if (params.length > 1) { query.append(\" AND origin = '\" + params[0] + \"' AND destination = '\" + params[1] + \"' \"); } else if (params.length > 0) { if (condition.equals(\"all\")) { query.append(\" WHERE id = \" + params[0] + \" \"); } else { query.append(\" AND id = \" + params[0] + \" \"); } } planes = Database.databaseQuery(query + \";\"); if (planes == null) { setDisplayMessage(red + \"\\t!! Plane not found !!\" + reset); return; } String format = \"║ %s │ %10s │ %-10s │ %-10s │ %-12s │ %-13s│ %-10s│ %-10s ║\\n\"; System.out.print( ); while (planes.next()) { LocalTime departureTime = LocalTime.parse(planes.getString(\"departure_time\")); System.out.printf(format, planes.getString(\"id\"), planes.getString(\"name\"), planes.getString(\"origin\"), planes.getString(\"destination\"), planes.getString(\"departure_date\"), formatter.format(departureTime), \"Rs \" + planes.getString(\"fare\"), availableSeats(planes.getInt(\"id\"))); if (!planes.isLast()) { System.out.print( ); } } System.out.print( ); planes.close(); } public boolean checkFlights(String origin, String destination, Object... params) throws Exception { String query = \"SELECT * FROM planes WHERE origin = ? AND destination = ? AND available = 1\"; if (params.length > 0) { query += \" AND id = \" + params[0]; } if (Database.databaseQuery(query + \";\", origin, destination) != null) { return true; } else { return false; } } public boolean checkSeatCapacity(int flightId, int numberOfSeats) throws Exception { int availableSeats = availableSeats(flightId); if (availableSeats >= numberOfSeats) { return true; } return false; } public int availableSeats(int flightId) throws Exception { ResultSet planes = Database.databaseQuery( \"SELECT planes.capacity, COUNT(reservations.ticket_id) as reserved FROM planes LEFT JOIN reservations ON planes.id = reservations.plane_id WHERE planes.id = ? GROUP BY planes.id;\", flightId); if (planes.next()) { int capacity = planes.getInt(\"capacity\"); int reserved = planes.getInt(\"reserved\"); int availableSeats = capacity - reserved; planes.close(); return availableSeats; } planes.close(); return 0; } public Plane enterPlaneDetails() { Plane flight = new Plane(); System.out.print(\"\\n\\t\\t\\t\\tName: \"); flight.name = scanner.nextLine(); System.out.print(\"\\t\\t\\t\\tDeparture From: \"); flight.origin = scanner.nextLine(); System.out.print(\"\\t\\t\\t\\tDestination: \"); flight.destination = scanner.nextLine(); System.out.print(\"\\t\\t\\t\\tSeat Capacity: \"); flight.capacity = scanner.nextLine(); System.out.print(\"\\t\\t\\t\\tDeparture Date (yyyy-mm-dd): \"); flight.departureDate = scanner.nextLine(); System.out.print(\"\\t\\t\\t\\tDeparture Time (hh:mm AM/PM): \"); flight.departureTime = scanner.nextLine(); System.out.print(\"\\t\\t\\t\\tFare: \"); flight.fare = scanner.nextLine(); System.out.print(\"\\t\\t\\t\\tIs the plane available for booking? (y/n): \"); flight.available = scanner.nextLine(); flight.available = flight.available.equals(\"y\") ? \"1\" : \"0\"; return flight; } public void addPlane() throws Exception { System.out.println(\"\\n\"); printCentered(\"Enter Plane Details\"); printCentered(\"───────────────────\"); Plane flight = enterPlaneDetails(); flight.flightId = 1000 + (int) (Math.random() * ((99999 - 1000) + 1)); Database.databaseQuery( \"INSERT INTO planes (id,name, origin, destination, capacity, departure_date, departure_time, fare, available) VALUES (?,?,?,?,?,?,?,?,?);\", flight.flightId, flight.name, flight.origin, flight.destination, Integer.parseInt(flight.capacity), flight.departureDate, flight.departureTime, Integer.parseInt(flight.fare), Boolean.parseBoolean(flight.available)); setDisplayMessage(green + \"\\tFlight added successfully !\" + reset); } public void editPlaneDetails(int id) throws Exception { if (Database.databaseQuery(\"select * from planes where id = ?;\", id) == null) { setDisplayMessage(red + \"\\t!! Plane not found !!\" + reset); return; } else { showPlaneDetails(\"all\", id); printCentered(\"Enter new details (Press Enter to keep the old value)\"); printCentered(\"──────────────────────────────────────────────────────────\"); Plane flight = enterPlaneDetails(); String query = \"UPDATE planes SET \"; List<Object> params = new ArrayList<>(); String parameters[] = { flight.name, flight.origin, flight.destination, String.valueOf(flight.capacity), flight.departureDate, flight.departureTime, String.valueOf(flight.fare), String.valueOf(flight.available) }; String columns[] = { \"name\", \"origin\", \"destination\", \"capacity\", \"departure_date\", \"departure_time\", \"fare\", \"available\" }; for (int i = 0; i < parameters.length; i++) { if ((i == 3 || i == 6) && !parameters[i].isEmpty()) { params.add(Integer.parseInt(parameters[i])); query += columns[i] + \" = ?, \"; } else if (i == 7 && !parameters[i].isEmpty()) { params.add(Boolean.parseBoolean(parameters[i])); query += columns[i] + \" = ?, \"; } else if (!parameters[i].isEmpty()) { params.add(parameters[i]); query += columns[i] + \" = ?, \"; } } query = query.substring(0, query.length() - 2); query += \" WHERE id = ?;\"; params.add(id); Database.databaseQuery(query, params.toArray()); setDisplayMessage(green + \"\\t Flight details updated successfully !\" + reset); } } }"},{"file_path":"Airlines-Reservation-and-Management-System-main\\User.java","file_content":"import java.io.Console; import java.sql.*; import java.util.Scanner; public class User extends AirlinesReservationSystem { public static String username; public static String userFirstName; public static String userLastName; public static String userContactNumber; public static String password; public String role; public int numberOfSeats; public static int userId; private static Scanner scanner = new Scanner(System.in); public boolean userLogin(String role) throws Exception { Console console = System.console(); do { showAppTitle(); showDisplayMessage(); System.out.print(\"\\n\\t\\t\\t\\tEnter your username: \"); username = scanner.nextLine(); if (!checkUsername(username)) { setDisplayMessage(red + \"\\t!!OOPS! The username is not correct!!\" + reset); } } while (!checkUsername(username)); System.out.print(\"\\t\\t\\t\\tEnter your password: \"); char[] passwordArray = console.readPassword(); password = new String(passwordArray); java.util.Arrays.fill(passwordArray, ' '); if (authenticateUser(username, password, role)) { ResultSet user = Database.databaseQuery(\"select * from users where username = ?;\", username); user.next(); userId = user.getInt(\"id\"); userFirstName = user.getString(\"firstname\"); userLastName = user.getString(\"lastname\"); user.close(); return true; } else { setDisplayMessage(red + \"\\tERROR! The username or password is incorrect\" + reset); return false; } } public static void registerUser(String role) throws Exception { String username; do { showAppTitle(); showDisplayMessage(); System.out.print(\"\\n\\t\\t\\t\\tEnter a username: \"); username = scanner.nextLine(); if (checkUsername(username)) { setDisplayMessage(red + \"\\t!!OOPS! The username is already taken!!\" + reset); } } while (checkUsername(username)); System.out.print(\"\\t\\t\\t\\tEnter your password: \"); String password = scanner.nextLine(); System.out.print(\"\\t\\t\\t\\tEnter your first name: \"); String userFirstName = scanner.nextLine(); System.out.print(\"\\t\\t\\t\\tEnter your last name: \"); String userLastName = scanner.nextLine(); System.out.print(\"\\t\\t\\t\\tEnter your contact number: \"); String userContactNumber = scanner.nextLine(); String userId = String.valueOf((int) (Math.random() * 10000000)); Database.databaseQuery( \"insert into users ( id ,username, password, firstname, lastname, role,phone_no) values (?,?,?,?,?,?,?);\", userId, username, password, userFirstName, userLastName, role, userContactNumber); setDisplayMessage(green + \"\\tUser registered successfully\" + reset); } public boolean authenticateUser(String username, String password, String role) throws Exception { if (Database.databaseQuery(\"SELECT * FROM users WHERE username = ? AND password = ? AND role = ?;\", username, password, role) != null) { return true; } return false; } public static boolean checkUsername(String username) throws Exception { if (Database.databaseQuery(\"SELECT * FROM users WHERE username = ?;\", username) != null) { return true; } else { return false; } } }"}]}}
{"project_id":3,"chunk_id":0,"content":{"main_file_path":"Airlines-Reservation-and-Management-System-main\\Plane.java","main_file_content":"import java.sql.*; import java.time.*; import java.time.format.*; import java.util.*; public class Plane extends AirlinesReservationSystem { public int flightId; public String origin; public String destination; public String capacity; public String departureDate; public String departureTime; public String fare; public String available; public String name; private static DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"hh:mm a\"); private static Scanner scanner = new Scanner(System.in); public void showPlaneDetails(String condition, Object... params) throws Exception { ResultSet planes; StringBuilder query = new StringBuilder(\"SELECT * FROM planes\"); if (condition.equals(\"available\")) { query.append(\" WHERE available = 1 \"); } if (params.length > 1) { query.append(\" AND origin = '\" + params[0] + \"' AND destination = '\" + params[1] + \"' \"); } else if (params.length > 0) { if (condition.equals(\"all\")) { query.append(\" WHERE id = \" + params[0] + \" \"); } else { query.append(\" AND id = \" + params[0] + \" \"); } } planes = Database.databaseQuery(query + \";\"); if (planes == null) { setDisplayMessage(red + \"\\t!! Plane not found !!\" + reset); return; } String format = \"║ %s │ %10s │ %-10s │ %-10s │ %-12s │ %-13s│ %-10s│ %-10s ║\\n\"; System.out.print( ); while (planes.next()) { LocalTime departureTime = LocalTime.parse(planes.getString(\"departure_time\")); System.out.printf(format, planes.getString(\"id\"), planes.getString(\"name\"), planes.getString(\"origin\"), planes.getString(\"destination\"), planes.getString(\"departure_date\"), formatter.format(departureTime), \"Rs \" + planes.getString(\"fare\"), availableSeats(planes.getInt(\"id\"))); if (!planes.isLast()) { System.out.print( ); } } System.out.print( ); planes.close(); } public boolean checkFlights(String origin, String destination, Object... params) throws Exception { String query = \"SELECT * FROM planes WHERE origin = ? AND destination = ? AND available = 1\"; if (params.length > 0) { query += \" AND id = \" + params[0]; } if (Database.databaseQuery(query + \";\", origin, destination) != null) { return true; } else { return false; } } public boolean checkSeatCapacity(int flightId, int numberOfSeats) throws Exception { int availableSeats = availableSeats(flightId); if (availableSeats >= numberOfSeats) { return true; } return false; } public int availableSeats(int flightId) throws Exception { ResultSet planes = Database.databaseQuery( \"SELECT planes.capacity, COUNT(reservations.ticket_id) as reserved FROM planes LEFT JOIN reservations ON planes.id = reservations.plane_id WHERE planes.id = ? GROUP BY planes.id;\", flightId); if (planes.next()) { int capacity = planes.getInt(\"capacity\"); int reserved = planes.getInt(\"reserved\"); int availableSeats = capacity - reserved; planes.close(); return availableSeats; } planes.close(); return 0; } public Plane enterPlaneDetails() { Plane flight = new Plane(); System.out.print(\"\\n\\t\\t\\t\\tName: \"); flight.name = scanner.nextLine(); System.out.print(\"\\t\\t\\t\\tDeparture From: \"); flight.origin = scanner.nextLine(); System.out.print(\"\\t\\t\\t\\tDestination: \"); flight.destination = scanner.nextLine(); System.out.print(\"\\t\\t\\t\\tSeat Capacity: \"); flight.capacity = scanner.nextLine(); System.out.print(\"\\t\\t\\t\\tDeparture Date (yyyy-mm-dd): \"); flight.departureDate = scanner.nextLine(); System.out.print(\"\\t\\t\\t\\tDeparture Time (hh:mm AM/PM): \"); flight.departureTime = scanner.nextLine(); System.out.print(\"\\t\\t\\t\\tFare: \"); flight.fare = scanner.nextLine(); System.out.print(\"\\t\\t\\t\\tIs the plane available for booking? (y/n): \"); flight.available = scanner.nextLine(); flight.available = flight.available.equals(\"y\") ? \"1\" : \"0\"; return flight; } public void addPlane() throws Exception { System.out.println(\"\\n\"); printCentered(\"Enter Plane Details\"); printCentered(\"───────────────────\"); Plane flight = enterPlaneDetails(); flight.flightId = 1000 + (int) (Math.random() * ((99999 - 1000) + 1)); Database.databaseQuery( \"INSERT INTO planes (id,name, origin, destination, capacity, departure_date, departure_time, fare, available) VALUES (?,?,?,?,?,?,?,?,?);\", flight.flightId, flight.name, flight.origin, flight.destination, Integer.parseInt(flight.capacity), flight.departureDate, flight.departureTime, Integer.parseInt(flight.fare), Boolean.parseBoolean(flight.available)); setDisplayMessage(green + \"\\tFlight added successfully !\" + reset); } public void editPlaneDetails(int id) throws Exception { if (Database.databaseQuery(\"select * from planes where id = ?;\", id) == null) { setDisplayMessage(red + \"\\t!! Plane not found !!\" + reset); return; } else { showPlaneDetails(\"all\", id); printCentered(\"Enter new details (Press Enter to keep the old value)\"); printCentered(\"──────────────────────────────────────────────────────────\"); Plane flight = enterPlaneDetails(); String query = \"UPDATE planes SET \"; List<Object> params = new ArrayList<>(); String parameters[] = { flight.name, flight.origin, flight.destination, String.valueOf(flight.capacity), flight.departureDate, flight.departureTime, String.valueOf(flight.fare), String.valueOf(flight.available) }; String columns[] = { \"name\", \"origin\", \"destination\", \"capacity\", \"departure_date\", \"departure_time\", \"fare\", \"available\" }; for (int i = 0; i < parameters.length; i++) { if ((i == 3 || i == 6) && !parameters[i].isEmpty()) { params.add(Integer.parseInt(parameters[i])); query += columns[i] + \" = ?, \"; } else if (i == 7 && !parameters[i].isEmpty()) { params.add(Boolean.parseBoolean(parameters[i])); query += columns[i] + \" = ?, \"; } else if (!parameters[i].isEmpty()) { params.add(parameters[i]); query += columns[i] + \" = ?, \"; } } query = query.substring(0, query.length() - 2); query += \" WHERE id = ?;\"; params.add(id); Database.databaseQuery(query, params.toArray()); setDisplayMessage(green + \"\\t Flight details updated successfully !\" + reset); } } }","dependencies":[{"file_path":"Airlines-Reservation-and-Management-System-main\\AirlinesReservationSystem.java","file_content":"import java.util.Scanner; public class AirlinesReservationSystem { private static User user = new User(); private static Scanner scanner = new Scanner(System.in); private static Passenger passenger = new Passenger(); public static String red = \"\\033[0;31m\"; public static String cyan = \"\\033[0;36m\"; public static String reset = \"\\033[0m\"; public static String green = \"\\033[0;32m\"; public static String yellow = \"\\033[0;33m\"; private static String displayMessage = \"\"; public static void setDisplayMessage(String message) { displayMessage = message; } public static void showDisplayMessage() { if (displayMessage.equals(\"\")) { System.out.println(\"\\n\"); return; } System.out.println(\"\\n\"); printCentered(displayMessage); displayMessage = \"\"; } public static void printCentered(String message) { int width = 120; System.out.print(String.format(\"%\" + ((width + message.length()) / 2) + \"s\\n\", message)); } public static void clearScreen() { System.out.print(\"\\033[H\\033[2J\"); System.out.flush(); try { new ProcessBuilder(\"cmd\", \"/c\", \"cls\").inheritIO().start().waitFor(); } catch (Exception e) { System.out.println(e); } } public static void showAppTitle() { clearScreen(); System.out.println(cyan + + reset); printCentered(\"╠═════════════ Airlines Reservation System ════════════╣\"); } public static void showStartMenu() { showDisplayMessage(); printCentered(); } public static void main(String[] args) throws Exception { int choice; do { showAppTitle(); showStartMenu(); System.out.print(\"\\t\\t\\t\\tEnter your choice: \"); choice = scanner.nextInt(); switch (choice) { case 1: if (user.userLogin(\"admin\")) { Admin admin = new Admin(); admin.adminMenu(); } break; case 2: if (user.userLogin(\"passenger\")) { passenger.passengerMenu(); } break; case 3: User.registerUser(\"passenger\"); break; case 4: System.exit(0); break; default: setDisplayMessage(red + \"\\t ERROR ! Please enter valid option !\" + reset); } } while (choice != 4); scanner.close(); } }"},{"file_path":"Airlines-Reservation-and-Management-System-main\\Database.java","file_content":"import java.sql.*; public class Database { private static String URL = \"jdbc:mysql: private static String USERNAME = \"root\"; private static String PASSWORD = \"\"; public static ResultSet databaseQuery(String query, Object... params) throws Exception { Connection connection = DriverManager.getConnection(URL, USERNAME, PASSWORD); PreparedStatement statement = connection.prepareStatement(query); for (int i = 0; i < params.length; i++) { statement.setObject(i + 1, params[i]); } if (query.trim().toLowerCase().startsWith(\"select\")) { ResultSet resultSet = statement.executeQuery(); if (!resultSet.isBeforeFirst()) { return null; } return resultSet; } else { statement.executeUpdate(); return null; } } }"}]}}
{"project_id":3,"chunk_id":0,"content":{"main_file_path":"Airlines-Reservation-and-Management-System-main\\User.java","main_file_content":"import java.io.Console; import java.sql.*; import java.util.Scanner; public class User extends AirlinesReservationSystem { public static String username; public static String userFirstName; public static String userLastName; public static String userContactNumber; public static String password; public String role; public int numberOfSeats; public static int userId; private static Scanner scanner = new Scanner(System.in); public boolean userLogin(String role) throws Exception { Console console = System.console(); do { showAppTitle(); showDisplayMessage(); System.out.print(\"\\n\\t\\t\\t\\tEnter your username: \"); username = scanner.nextLine(); if (!checkUsername(username)) { setDisplayMessage(red + \"\\t!!OOPS! The username is not correct!!\" + reset); } } while (!checkUsername(username)); System.out.print(\"\\t\\t\\t\\tEnter your password: \"); char[] passwordArray = console.readPassword(); password = new String(passwordArray); java.util.Arrays.fill(passwordArray, ' '); if (authenticateUser(username, password, role)) { ResultSet user = Database.databaseQuery(\"select * from users where username = ?;\", username); user.next(); userId = user.getInt(\"id\"); userFirstName = user.getString(\"firstname\"); userLastName = user.getString(\"lastname\"); user.close(); return true; } else { setDisplayMessage(red + \"\\tERROR! The username or password is incorrect\" + reset); return false; } } public static void registerUser(String role) throws Exception { String username; do { showAppTitle(); showDisplayMessage(); System.out.print(\"\\n\\t\\t\\t\\tEnter a username: \"); username = scanner.nextLine(); if (checkUsername(username)) { setDisplayMessage(red + \"\\t!!OOPS! The username is already taken!!\" + reset); } } while (checkUsername(username)); System.out.print(\"\\t\\t\\t\\tEnter your password: \"); String password = scanner.nextLine(); System.out.print(\"\\t\\t\\t\\tEnter your first name: \"); String userFirstName = scanner.nextLine(); System.out.print(\"\\t\\t\\t\\tEnter your last name: \"); String userLastName = scanner.nextLine(); System.out.print(\"\\t\\t\\t\\tEnter your contact number: \"); String userContactNumber = scanner.nextLine(); String userId = String.valueOf((int) (Math.random() * 10000000)); Database.databaseQuery( \"insert into users ( id ,username, password, firstname, lastname, role,phone_no) values (?,?,?,?,?,?,?);\", userId, username, password, userFirstName, userLastName, role, userContactNumber); setDisplayMessage(green + \"\\tUser registered successfully\" + reset); } public boolean authenticateUser(String username, String password, String role) throws Exception { if (Database.databaseQuery(\"SELECT * FROM users WHERE username = ? AND password = ? AND role = ?;\", username, password, role) != null) { return true; } return false; } public static boolean checkUsername(String username) throws Exception { if (Database.databaseQuery(\"SELECT * FROM users WHERE username = ?;\", username) != null) { return true; } else { return false; } } }","dependencies":[{"file_path":"Airlines-Reservation-and-Management-System-main\\AirlinesReservationSystem.java","file_content":"import java.util.Scanner; public class AirlinesReservationSystem { private static User user = new User(); private static Scanner scanner = new Scanner(System.in); private static Passenger passenger = new Passenger(); public static String red = \"\\033[0;31m\"; public static String cyan = \"\\033[0;36m\"; public static String reset = \"\\033[0m\"; public static String green = \"\\033[0;32m\"; public static String yellow = \"\\033[0;33m\"; private static String displayMessage = \"\"; public static void setDisplayMessage(String message) { displayMessage = message; } public static void showDisplayMessage() { if (displayMessage.equals(\"\")) { System.out.println(\"\\n\"); return; } System.out.println(\"\\n\"); printCentered(displayMessage); displayMessage = \"\"; } public static void printCentered(String message) { int width = 120; System.out.print(String.format(\"%\" + ((width + message.length()) / 2) + \"s\\n\", message)); } public static void clearScreen() { System.out.print(\"\\033[H\\033[2J\"); System.out.flush(); try { new ProcessBuilder(\"cmd\", \"/c\", \"cls\").inheritIO().start().waitFor(); } catch (Exception e) { System.out.println(e); } } public static void showAppTitle() { clearScreen(); System.out.println(cyan + + reset); printCentered(\"╠═════════════ Airlines Reservation System ════════════╣\"); } public static void showStartMenu() { showDisplayMessage(); printCentered(); } public static void main(String[] args) throws Exception { int choice; do { showAppTitle(); showStartMenu(); System.out.print(\"\\t\\t\\t\\tEnter your choice: \"); choice = scanner.nextInt(); switch (choice) { case 1: if (user.userLogin(\"admin\")) { Admin admin = new Admin(); admin.adminMenu(); } break; case 2: if (user.userLogin(\"passenger\")) { passenger.passengerMenu(); } break; case 3: User.registerUser(\"passenger\"); break; case 4: System.exit(0); break; default: setDisplayMessage(red + \"\\t ERROR ! Please enter valid option !\" + reset); } } while (choice != 4); scanner.close(); } }"},{"file_path":"Airlines-Reservation-and-Management-System-main\\Database.java","file_content":"import java.sql.*; public class Database { private static String URL = \"jdbc:mysql: private static String USERNAME = \"root\"; private static String PASSWORD = \"\"; public static ResultSet databaseQuery(String query, Object... params) throws Exception { Connection connection = DriverManager.getConnection(URL, USERNAME, PASSWORD); PreparedStatement statement = connection.prepareStatement(query); for (int i = 0; i < params.length; i++) { statement.setObject(i + 1, params[i]); } if (query.trim().toLowerCase().startsWith(\"select\")) { ResultSet resultSet = statement.executeQuery(); if (!resultSet.isBeforeFirst()) { return null; } return resultSet; } else { statement.executeUpdate(); return null; } } }"}]}}
{"project_id":4,"chunk_id":0,"content":{"main_file_path":"AlgoViz-main\\Visualizer\\SortingVisualizer.java","main_file_content":"package Visualizer; import java.util.ArrayList; import java.util.Collections; import Visualizer.Sorts.*; public class SortingVisualizer { private static Thread sortingThread; public static VisualizerFrame frame; public static Integer[] toBeSorted; public static boolean isSorting = false; public static int sortDataCount = 20; public static int sleep = 20; public static int blockWidth; public static boolean stepped = false; public static void main(String[] args) { frame = new VisualizerFrame(); resetArray(); frame.setLocationRelativeTo(null); } public static void resetArray(){ if (isSorting) return; toBeSorted = new Integer[sortDataCount]; blockWidth = (int) Math.max(Math.floor(500/sortDataCount), 1); for(int i = 0; i<toBeSorted.length; i++){ if (stepped) { toBeSorted[i] = i; } else { toBeSorted[i] = (int) (sortDataCount*Math.random()); } } if (stepped) { ArrayList<Integer> shuffleThis = new ArrayList<>(); for (int i = 0; i < toBeSorted.length; i++) { shuffleThis.add(toBeSorted[i]); } Collections.shuffle(shuffleThis); toBeSorted = shuffleThis.toArray(toBeSorted); } frame.preDrawArray(toBeSorted); } public static void startSort(String type){ if (sortingThread == null || !isSorting){ resetArray(); isSorting = true; switch(type){ case \"Bubble\": sortingThread = new Thread(new BubbleSort(toBeSorted, frame, false)); break; case \"Selection\": sortingThread = new Thread(new SelectionSort(toBeSorted, frame, false)); break; case \"Insertion\": sortingThread = new Thread(new InsertionSort(toBeSorted, frame, false)); break; case \"Gnome\": sortingThread = new Thread(new GnomeSort(toBeSorted, frame, false)); break; case \"Merge\": sortingThread = new Thread(new MergeSort()); break; case \"Radix LSD\": sortingThread = new Thread(new RadixSort(toBeSorted, frame, true)); break; case \"Radix MSD\": sortingThread = new Thread(new RadixSort(toBeSorted, frame, false)); break; case \"Shell\": sortingThread = new Thread(new ShellSort()); break; case \"Quandrix\": sortingThread = new Thread(new QuandrixSort()); break; case \"Bubble(fast)\": sortingThread = new Thread(new BubbleSort(toBeSorted, frame, true)); break; case \"Selection(fast)\": sortingThread = new Thread(new SelectionSort(toBeSorted, frame, true)); break; case \"Insertion(fast)\": sortingThread = new Thread(new InsertionSort(toBeSorted, frame, true)); break; case \"Gnome(fast)\": sortingThread = new Thread(new GnomeSort(toBeSorted, frame, true)); break; default: isSorting = false; return; } sortingThread.start(); } } }","dependencies":[{"file_path":"AlgoViz-main\\Visualizer\\Sorts\\BubbleSort.java","file_content":"package Visualizer.Sorts; import Visualizer.*; public class BubbleSort implements Runnable{ private Integer[] toBeSorted; private VisualizerFrame frame; private boolean fast; public BubbleSort(Integer[] toBeSorted, VisualizerFrame frame, boolean fast) { this.toBeSorted = toBeSorted; this.frame = frame; this.fast = fast; } public void run() { if (fast) { sortFast(); } else { sortSlow(); } SortingVisualizer.isSorting=false; } public void sortFast() { int temp = 0; boolean swapped = false; for(int i = 0; i<toBeSorted.length-1; i++){ swapped = false; for(int j = 1; j<toBeSorted.length-i; j++){ if (toBeSorted[j-1]> toBeSorted[j]){ temp = toBeSorted[j-1]; toBeSorted[j-1] = toBeSorted[j]; toBeSorted[j]= temp; swapped = true; } } frame.reDrawArray(toBeSorted); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } if (!swapped) break; } } public void sortSlow() { int temp = 0; boolean swapped = false; for(int i = 0; i<toBeSorted.length-1; i++){ swapped = false; for(int j = 1; j<toBeSorted.length-i; j++){ if (toBeSorted[j-1]> toBeSorted[j]){ temp = toBeSorted[j-1]; toBeSorted[j-1] = toBeSorted[j]; toBeSorted[j]= temp; swapped = true; } frame.reDrawArray(toBeSorted, j, j+1); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } } if (!swapped) break; } } }"},{"file_path":"AlgoViz-main\\Visualizer\\Sorts\\GnomeSort.java","file_content":"package Visualizer.Sorts; import Visualizer.*; public class GnomeSort implements Runnable{ private Integer[] toBeSorted; private VisualizerFrame frame; private boolean fast; public GnomeSort(Integer[] toBeSorted, VisualizerFrame frame, boolean fast) { this.toBeSorted = toBeSorted; this.frame = frame; this.fast = fast; } public void run() { if (fast) { sortFast(); } else { sortSlow(); } SortingVisualizer.isSorting=false; } public void sortFast() { int temp = 0; for(int i = 0; i<toBeSorted.length-1; i++){ for(int j = i+1; j>0; j--){ if (toBeSorted[j] < toBeSorted[j-1]){ temp = toBeSorted[j]; toBeSorted[j] = toBeSorted[j-1]; toBeSorted[j-1] = temp; }else{ break; } } frame.reDrawArray(toBeSorted); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } } } public void sortSlow() { int temp = 0; for(int i = 0; i<toBeSorted.length-1; i++){ for(int j = i+1; j>0; j--){ if (toBeSorted[j] < toBeSorted[j-1]){ temp = toBeSorted[j]; toBeSorted[j] = toBeSorted[j-1]; toBeSorted[j-1] = temp; frame.reDrawArray(toBeSorted, j, j-1); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } }else{ break; } } } } }"},{"file_path":"AlgoViz-main\\Visualizer\\Sorts\\InsertionSort.java","file_content":"package Visualizer.Sorts; import Visualizer.*; public class InsertionSort implements Runnable{ private Integer[] toBeSorted; private VisualizerFrame frame; private boolean fast; public InsertionSort(Integer[] toBeSorted, VisualizerFrame frame, boolean fast) { this.toBeSorted = toBeSorted; this.frame = frame; this.fast = fast; } public void run() { if (fast) { sortFast(); } else { sortSlow(); } SortingVisualizer.isSorting=false; } public void sortFast() { int temp = 0; int insert = 0; for(int i = 1; i<toBeSorted.length; i++){ insert = i; for(int j = i-1; j>=0; j--){ if (toBeSorted[i] < toBeSorted[j]){ insert = j; if (j == 0){ break; } }else{ break; } } temp = toBeSorted[i]; for (int j = i; j>insert; j--){ toBeSorted[j] = toBeSorted[j-1]; } toBeSorted[insert] = temp; frame.reDrawArray(toBeSorted, i); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } } } public void sortSlow() { int temp = 0; int insert = 0; for(int i = 1; i<toBeSorted.length; i++){ insert = i; for(int j = i-1; j>=0; j--){ if (toBeSorted[i] < toBeSorted[j]){ insert = j; if (j == 0){ break; } }else{ break; } frame.reDrawArray(toBeSorted, i, insert); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } } temp = toBeSorted[i]; for (int j = i; j>insert; j--){ toBeSorted[j] = toBeSorted[j-1]; } toBeSorted[insert] = temp; } frame.reDrawArray(toBeSorted); } }"},{"file_path":"AlgoViz-main\\Visualizer\\Sorts\\MergeSort.java","file_content":"package Visualizer.Sorts; import Visualizer.SortingVisualizer; public class MergeSort implements Runnable{ public void run() { Integer[] toBeSorted = SortingVisualizer.toBeSorted; inPlaceSort(toBeSorted); SortingVisualizer.isSorting=false; } public void inPlaceSort ( Integer[] x ) { inPlaceSort (x, 0, x.length-1); } private void inPlaceSort ( Integer[] x, int first, int last ) { int mid, lt, rt; int tmp; if ( first >= last ) return; mid = (first + last) / 2; inPlaceSort (x, first, mid); inPlaceSort (x, mid+1, last); lt = first; rt = mid+1; if ( x[mid] <= x[rt]) return; while (lt <= mid && rt <= last) { if ( x[lt] <= x[rt]) lt++; else { tmp = x[rt]; for (int i = rt-lt;i>0; i--){ x[lt+i] = x[lt+i-1]; } x[lt] = tmp; lt++; mid++; rt++; } SortingVisualizer.frame.reDrawArray(x, mid, rt, lt); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } } } }"},{"file_path":"AlgoViz-main\\Visualizer\\Sorts\\QuandrixSort.java","file_content":"package Visualizer.Sorts; import Visualizer.SortingVisualizer; public class QuandrixSort implements Runnable{ public void run() { int temp = 0; Integer[] toBeSorted = SortingVisualizer.toBeSorted; int i = 0; if (toBeSorted.length % 3 == 0) { SortingVisualizer.isSorting=false; return; } boolean swapped = false; int doubleCheck = 0; boolean end = false; while(doubleCheck < 3){ if (end) { swapped = false; end = false; } int j = i + 1; int k = j + 1; if (k < toBeSorted.length) { if (toBeSorted[k] < toBeSorted[j]) { temp = toBeSorted[j]; toBeSorted[j] = toBeSorted[k]; toBeSorted[k] = temp; swapped = true; } SortingVisualizer.frame.reDrawArray(toBeSorted, k, j); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } } if (j < toBeSorted.length) { if (toBeSorted[j] < toBeSorted[i]) { temp = toBeSorted[i]; toBeSorted[i] = toBeSorted[j]; toBeSorted[j] = temp; swapped = true; } SortingVisualizer.frame.reDrawArray(toBeSorted, j, i); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } if (k < toBeSorted.length) { if (toBeSorted[k] < toBeSorted[j]) { temp = toBeSorted[j]; toBeSorted[j] = toBeSorted[k]; toBeSorted[k] = temp; swapped = true; } SortingVisualizer.frame.reDrawArray(toBeSorted, k, j); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } } } i += 3; if (i >= toBeSorted.length) { i = i % toBeSorted.length; end = true; if (!swapped) { doubleCheck++; } else { doubleCheck = 0; } } } SortingVisualizer.isSorting=false; } }"},{"file_path":"AlgoViz-main\\Visualizer\\Sorts\\RadixSort.java","file_content":"package Visualizer.Sorts; import java.util.ArrayList; import Visualizer.SortingVisualizer; import Visualizer.VisualizerFrame; public class RadixSort implements Runnable{ private Integer[] toBeSorted; private VisualizerFrame frame; private boolean lsd; public RadixSort(Integer[] toBeSorted, VisualizerFrame frame, boolean lsd) { this.toBeSorted = toBeSorted; this.frame = frame; this.lsd = lsd; } public void run() { if (lsd) radixlsd(toBeSorted, 1); else radixmsd(toBeSorted, findDigit(toBeSorted)); SortingVisualizer.isSorting=false; } private void radixlsd(Integer[] x, int digit){ ArrayList<Integer>[] buckets = new ArrayList[10]; for(int i = 0; i<10; i++){ buckets[i] = new ArrayList<Integer>(); } int theDig = 0; int maxI = 0; for(int i = 0; i<x.length; i++){ theDig = (int) (x[i]%Math.pow(10, digit)); for(int t = 0; t<digit-1; t++){ theDig/=10; } if (x[i] > maxI) maxI = x[i]; frame.reDrawArray(x, -1, -1, i); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } buckets[theDig].add(x[i]); } ArrayList<Integer> finalList = new ArrayList<>(); for(int i = 0; i<10; i++){ finalList.addAll(buckets[i]); } Integer[] y = finalList.toArray(new Integer[0]); frame.reDrawArray(y); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } if (maxI < Math.pow(10, digit)) return; radixlsd(y, digit+1); } private void radixmsd(Integer[] x, int digit){ ArrayList<Integer>[] buckets = new ArrayList[10]; for(int i = 0; i<10; i++){ buckets[i] = new ArrayList<Integer>(); } int theDig = 0; for(int i = 0; i<x.length; i++){ theDig = (int) (x[i]%Math.pow(10, digit)); for(int t = 0; t<digit-1; t++){ theDig/=10; } frame.reDrawArray(x, -1, -1, i); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } buckets[theDig].add(x[i]); } ArrayList<Integer> finalList = new ArrayList<>(); for(int i = 0; i<10; i++){ finalList.addAll(buckets[i]); } Integer[] y = finalList.toArray(new Integer[0]); frame.reDrawArray(y); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } if (digit == 1) return; int beginning = 0; for (int i = 0; i < 10; i++) { y = radixmsd(y, digit-1, beginning, beginning + buckets[i].size()); beginning += buckets[i].size(); } } private Integer[] radixmsd(Integer[] x, int digit, int begin, int end){ ArrayList<Integer>[] buckets = new ArrayList[10]; for(int i = 0; i<10; i++){ buckets[i] = new ArrayList<Integer>(); } int theDig = 0; for(int i = begin; i<end; i++){ theDig = (int) (x[i]%Math.pow(10, digit)); for(int t = 0; t<digit-1; t++){ theDig/=10; } frame.reDrawArray(x, -1, -1, i); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } buckets[theDig].add(x[i]); } ArrayList<Integer> finalList = new ArrayList<>(); for (int i = 0; i < begin; i++) { finalList.add(x[i]); } for(int i = 0; i<10; i++){ finalList.addAll(buckets[i]); } for (int i = end; i < x.length; i++) { finalList.add(x[i]); } Integer[] y = finalList.toArray(new Integer[0]); frame.reDrawArray(y); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } if (digit == 1) return y; int beginning = begin; for (int i = 0; i < 10; i++) { y = radixmsd(y, digit-1, beginning, beginning + buckets[i].size()); beginning += buckets[i].size(); } return y; } private int findDigit(Integer[] x) { int max = Integer.MIN_VALUE; int digit = 1; for (int i : x) { if (i > max) max = i; } while (max > 10) { max = max/10; digit++; } return digit; } }"},{"file_path":"AlgoViz-main\\Visualizer\\Sorts\\SelectionSort.java","file_content":"package Visualizer.Sorts; import Visualizer.*; public class SelectionSort implements Runnable{ private Integer[] toBeSorted; private VisualizerFrame frame; private boolean fast; public SelectionSort(Integer[] toBeSorted, VisualizerFrame frame, boolean fast) { this.toBeSorted = toBeSorted; this.frame = frame; this.fast = fast; } public void run() { if (fast) { sortFast(); } else { sortSlow(); } SortingVisualizer.isSorting=false; } public void sortFast(){ int temp = 0; int selected = 0; for(int i = 0; i<toBeSorted.length; i++){ selected = i; for(int j = toBeSorted.length-1; j>i; j--){ if (toBeSorted[j] <= toBeSorted[selected]){ selected = j; } } frame.reDrawArray(toBeSorted); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } temp = toBeSorted[i]; toBeSorted[i] = toBeSorted[selected]; toBeSorted[selected]= temp; } } public void sortSlow() { int temp = 0; int selected = 0; for(int i = 0; i<toBeSorted.length; i++){ selected = i; for(int j = toBeSorted.length-1; j>i; j--){ if (toBeSorted[j] <= toBeSorted[selected]){ selected = j; } frame.reDrawArray(toBeSorted, selected, j-1); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } } temp = toBeSorted[i]; toBeSorted[i] = toBeSorted[selected]; toBeSorted[selected]= temp; } frame.reDrawArray(toBeSorted); } }"},{"file_path":"AlgoViz-main\\Visualizer\\Sorts\\ShellSort.java","file_content":"package Visualizer.Sorts; import Visualizer.SortingVisualizer; public class ShellSort implements Runnable{ public void run() { int temp = 0; Integer[] toBeSorted = SortingVisualizer.toBeSorted; int j = 0; for(int gap = toBeSorted.length/2; gap > 0; gap/=2){ for(int i = gap; i<toBeSorted.length; i++){ temp = toBeSorted[i]; for (j = i; j>=gap && temp<toBeSorted[j-gap]; j -= gap){ toBeSorted[j] = toBeSorted[j-gap]; SortingVisualizer.frame.reDrawArray(toBeSorted, i, j); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } } toBeSorted[j] = temp; } } SortingVisualizer.isSorting=false; } }"}]}}
{"project_id":4,"chunk_id":1,"content":{"main_file_path":"AlgoViz-main\\Visualizer\\SortingVisualizer.java","main_file_content":"package Visualizer; import java.util.ArrayList; import java.util.Collections; import Visualizer.Sorts.*; public class SortingVisualizer { private static Thread sortingThread; public static VisualizerFrame frame; public static Integer[] toBeSorted; public static boolean isSorting = false; public static int sortDataCount = 20; public static int sleep = 20; public static int blockWidth; public static boolean stepped = false; public static void main(String[] args) { frame = new VisualizerFrame(); resetArray(); frame.setLocationRelativeTo(null); } public static void resetArray(){ if (isSorting) return; toBeSorted = new Integer[sortDataCount]; blockWidth = (int) Math.max(Math.floor(500/sortDataCount), 1); for(int i = 0; i<toBeSorted.length; i++){ if (stepped) { toBeSorted[i] = i; } else { toBeSorted[i] = (int) (sortDataCount*Math.random()); } } if (stepped) { ArrayList<Integer> shuffleThis = new ArrayList<>(); for (int i = 0; i < toBeSorted.length; i++) { shuffleThis.add(toBeSorted[i]); } Collections.shuffle(shuffleThis); toBeSorted = shuffleThis.toArray(toBeSorted); } frame.preDrawArray(toBeSorted); } public static void startSort(String type){ if (sortingThread == null || !isSorting){ resetArray(); isSorting = true; switch(type){ case \"Bubble\": sortingThread = new Thread(new BubbleSort(toBeSorted, frame, false)); break; case \"Selection\": sortingThread = new Thread(new SelectionSort(toBeSorted, frame, false)); break; case \"Insertion\": sortingThread = new Thread(new InsertionSort(toBeSorted, frame, false)); break; case \"Gnome\": sortingThread = new Thread(new GnomeSort(toBeSorted, frame, false)); break; case \"Merge\": sortingThread = new Thread(new MergeSort()); break; case \"Radix LSD\": sortingThread = new Thread(new RadixSort(toBeSorted, frame, true)); break; case \"Radix MSD\": sortingThread = new Thread(new RadixSort(toBeSorted, frame, false)); break; case \"Shell\": sortingThread = new Thread(new ShellSort()); break; case \"Quandrix\": sortingThread = new Thread(new QuandrixSort()); break; case \"Bubble(fast)\": sortingThread = new Thread(new BubbleSort(toBeSorted, frame, true)); break; case \"Selection(fast)\": sortingThread = new Thread(new SelectionSort(toBeSorted, frame, true)); break; case \"Insertion(fast)\": sortingThread = new Thread(new InsertionSort(toBeSorted, frame, true)); break; case \"Gnome(fast)\": sortingThread = new Thread(new GnomeSort(toBeSorted, frame, true)); break; default: isSorting = false; return; } sortingThread.start(); } } }","dependencies":[{"file_path":"AlgoViz-main\\Visualizer\\VisualizerFrame.java","file_content":"package Visualizer; import java.awt.BorderLayout; import java.awt.Color; import java.awt.Dimension; import java.awt.GridBagConstraints; import java.awt.GridBagLayout; import java.awt.Insets; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.awt.event.ComponentEvent; import java.awt.event.ComponentListener; import javax.swing.JButton; import javax.swing.JCheckBox; import javax.swing.JComboBox; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JPanel; import javax.swing.JSlider; import javax.swing.event.ChangeEvent; import javax.swing.event.ChangeListener; @SuppressWarnings(\"serial\") public class VisualizerFrame extends JFrame { private final int MAX_SPEED = 1000; private final int MIN_SPEED = 1; private final int MAX_SIZE = 500; private final int MIN_SIZE = 5; private final int DEFAULT_SPEED = 20; private final int DEFAULT_SIZE = 20; private final String[] Sorts = {\"Bubble\", \"Selection\", \"Insertion\", \"Gnome\", \"Merge\", \"Radix LSD\", \"Radix MSD\", \"Shell\", \"Quandrix\", \"Bubble(fast)\", \"Selection(fast)\", \"Insertion(fast)\", \"Gnome(fast)\"}; private int sizeModifier; private JPanel wrapper; private JPanel arrayWrapper; private JPanel buttonWrapper; private JPanel[] squarePanels; private JButton start; private JComboBox<String> selection; private JSlider speed; private JSlider size; private JLabel speedVal; private JLabel sizeVal; private GridBagConstraints c; private JCheckBox stepped; public VisualizerFrame(){ super(\"Sorting Visualizer\"); start = new JButton(\"Start\"); buttonWrapper = new JPanel(); arrayWrapper = new JPanel(); wrapper = new JPanel(); selection = new JComboBox<String>(); speed = new JSlider(MIN_SPEED, MAX_SPEED, DEFAULT_SPEED); size = new JSlider(MIN_SIZE, MAX_SIZE, DEFAULT_SIZE); speedVal = new JLabel(\"Speed: 20 ms\"); sizeVal = new JLabel(\"Size: 20 values\"); stepped = new JCheckBox(\"Stepped Values\"); c = new GridBagConstraints(); for(String s : Sorts) selection.addItem(s); arrayWrapper.setLayout(new GridBagLayout()); wrapper.setLayout(new BorderLayout()); c.insets = new Insets(0,1,0,1); c.anchor = GridBagConstraints.SOUTH; start.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { SortingVisualizer.startSort((String) selection.getSelectedItem()); } }); stepped.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { SortingVisualizer.stepped = stepped.isSelected(); } }); speed.setMinorTickSpacing(10); speed.setMajorTickSpacing(100); speed.setPaintTicks(true); speed.addChangeListener(new ChangeListener() { public void stateChanged(ChangeEvent arg0) { speedVal.setText((\"Speed: \" + Integer.toString(speed.getValue()) + \"ms\")); validate(); SortingVisualizer.sleep = speed.getValue(); } }); size.setMinorTickSpacing(10); size.setMajorTickSpacing(100); size.setPaintTicks(true); size.addChangeListener(new ChangeListener() { public void stateChanged(ChangeEvent arg0) { sizeVal.setText((\"Size: \" + Integer.toString(size.getValue()) + \" values\")); validate(); SortingVisualizer.sortDataCount = size.getValue(); } }); buttonWrapper.add(stepped); buttonWrapper.add(speedVal); buttonWrapper.add(speed); buttonWrapper.add(sizeVal); buttonWrapper.add(size); buttonWrapper.add(start); buttonWrapper.add(selection); wrapper.add(buttonWrapper, BorderLayout.SOUTH); wrapper.add(arrayWrapper); add(wrapper); setExtendedState(JFrame.MAXIMIZED_BOTH ); addComponentListener(new ComponentListener() { @Override public void componentResized(ComponentEvent e) { sizeModifier = (int) ((getHeight()*0.9)/(squarePanels.length)); } @Override public void componentMoved(ComponentEvent e) { } @Override public void componentShown(ComponentEvent e) { } @Override public void componentHidden(ComponentEvent e) { } }); setVisible(true); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setLocationRelativeTo(null); } public void preDrawArray(Integer[] squares){ squarePanels = new JPanel[SortingVisualizer.sortDataCount]; arrayWrapper.removeAll(); sizeModifier = (int) ((getHeight()*0.9)/(squarePanels.length)); for(int i = 0; i<SortingVisualizer.sortDataCount; i++){ squarePanels[i] = new JPanel(); squarePanels[i].setPreferredSize(new Dimension(SortingVisualizer.blockWidth, squares[i]*sizeModifier)); squarePanels[i].setBackground(Color.blue); arrayWrapper.add(squarePanels[i], c); } repaint(); validate(); } public void reDrawArray(Integer[] x){ reDrawArray(x, -1); } public void reDrawArray(Integer[] x, int y){ reDrawArray(x, y, -1); } public void reDrawArray(Integer[] x, int y, int z){ reDrawArray(x, y, z, -1); } public void reDrawArray(Integer[] squares, int working, int comparing, int reading){ arrayWrapper.removeAll(); for(int i = 0; i<squarePanels.length; i++){ squarePanels[i] = new JPanel(); squarePanels[i].setPreferredSize(new Dimension(SortingVisualizer.blockWidth, squares[i]*sizeModifier)); if (i == working){ squarePanels[i].setBackground(Color.green); }else if(i == comparing){ squarePanels[i].setBackground(Color.red); }else if(i == reading){ squarePanels[i].setBackground(Color.yellow); }else{ squarePanels[i].setBackground(Color.blue); } arrayWrapper.add(squarePanels[i], c); } repaint(); validate(); } }"}]}}
{"project_id":4,"chunk_id":0,"content":{"main_file_path":"AlgoViz-main\\Visualizer\\VisualizerFrame.java","main_file_content":"package Visualizer; import java.awt.BorderLayout; import java.awt.Color; import java.awt.Dimension; import java.awt.GridBagConstraints; import java.awt.GridBagLayout; import java.awt.Insets; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.awt.event.ComponentEvent; import java.awt.event.ComponentListener; import javax.swing.JButton; import javax.swing.JCheckBox; import javax.swing.JComboBox; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JPanel; import javax.swing.JSlider; import javax.swing.event.ChangeEvent; import javax.swing.event.ChangeListener; @SuppressWarnings(\"serial\") public class VisualizerFrame extends JFrame { private final int MAX_SPEED = 1000; private final int MIN_SPEED = 1; private final int MAX_SIZE = 500; private final int MIN_SIZE = 5; private final int DEFAULT_SPEED = 20; private final int DEFAULT_SIZE = 20; private final String[] Sorts = {\"Bubble\", \"Selection\", \"Insertion\", \"Gnome\", \"Merge\", \"Radix LSD\", \"Radix MSD\", \"Shell\", \"Quandrix\", \"Bubble(fast)\", \"Selection(fast)\", \"Insertion(fast)\", \"Gnome(fast)\"}; private int sizeModifier; private JPanel wrapper; private JPanel arrayWrapper; private JPanel buttonWrapper; private JPanel[] squarePanels; private JButton start; private JComboBox<String> selection; private JSlider speed; private JSlider size; private JLabel speedVal; private JLabel sizeVal; private GridBagConstraints c; private JCheckBox stepped; public VisualizerFrame(){ super(\"Sorting Visualizer\"); start = new JButton(\"Start\"); buttonWrapper = new JPanel(); arrayWrapper = new JPanel(); wrapper = new JPanel(); selection = new JComboBox<String>(); speed = new JSlider(MIN_SPEED, MAX_SPEED, DEFAULT_SPEED); size = new JSlider(MIN_SIZE, MAX_SIZE, DEFAULT_SIZE); speedVal = new JLabel(\"Speed: 20 ms\"); sizeVal = new JLabel(\"Size: 20 values\"); stepped = new JCheckBox(\"Stepped Values\"); c = new GridBagConstraints(); for(String s : Sorts) selection.addItem(s); arrayWrapper.setLayout(new GridBagLayout()); wrapper.setLayout(new BorderLayout()); c.insets = new Insets(0,1,0,1); c.anchor = GridBagConstraints.SOUTH; start.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { SortingVisualizer.startSort((String) selection.getSelectedItem()); } }); stepped.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { SortingVisualizer.stepped = stepped.isSelected(); } }); speed.setMinorTickSpacing(10); speed.setMajorTickSpacing(100); speed.setPaintTicks(true); speed.addChangeListener(new ChangeListener() { public void stateChanged(ChangeEvent arg0) { speedVal.setText((\"Speed: \" + Integer.toString(speed.getValue()) + \"ms\")); validate(); SortingVisualizer.sleep = speed.getValue(); } }); size.setMinorTickSpacing(10); size.setMajorTickSpacing(100); size.setPaintTicks(true); size.addChangeListener(new ChangeListener() { public void stateChanged(ChangeEvent arg0) { sizeVal.setText((\"Size: \" + Integer.toString(size.getValue()) + \" values\")); validate(); SortingVisualizer.sortDataCount = size.getValue(); } }); buttonWrapper.add(stepped); buttonWrapper.add(speedVal); buttonWrapper.add(speed); buttonWrapper.add(sizeVal); buttonWrapper.add(size); buttonWrapper.add(start); buttonWrapper.add(selection); wrapper.add(buttonWrapper, BorderLayout.SOUTH); wrapper.add(arrayWrapper); add(wrapper); setExtendedState(JFrame.MAXIMIZED_BOTH ); addComponentListener(new ComponentListener() { @Override public void componentResized(ComponentEvent e) { sizeModifier = (int) ((getHeight()*0.9)/(squarePanels.length)); } @Override public void componentMoved(ComponentEvent e) { } @Override public void componentShown(ComponentEvent e) { } @Override public void componentHidden(ComponentEvent e) { } }); setVisible(true); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setLocationRelativeTo(null); } public void preDrawArray(Integer[] squares){ squarePanels = new JPanel[SortingVisualizer.sortDataCount]; arrayWrapper.removeAll(); sizeModifier = (int) ((getHeight()*0.9)/(squarePanels.length)); for(int i = 0; i<SortingVisualizer.sortDataCount; i++){ squarePanels[i] = new JPanel(); squarePanels[i].setPreferredSize(new Dimension(SortingVisualizer.blockWidth, squares[i]*sizeModifier)); squarePanels[i].setBackground(Color.blue); arrayWrapper.add(squarePanels[i], c); } repaint(); validate(); } public void reDrawArray(Integer[] x){ reDrawArray(x, -1); } public void reDrawArray(Integer[] x, int y){ reDrawArray(x, y, -1); } public void reDrawArray(Integer[] x, int y, int z){ reDrawArray(x, y, z, -1); } public void reDrawArray(Integer[] squares, int working, int comparing, int reading){ arrayWrapper.removeAll(); for(int i = 0; i<squarePanels.length; i++){ squarePanels[i] = new JPanel(); squarePanels[i].setPreferredSize(new Dimension(SortingVisualizer.blockWidth, squares[i]*sizeModifier)); if (i == working){ squarePanels[i].setBackground(Color.green); }else if(i == comparing){ squarePanels[i].setBackground(Color.red); }else if(i == reading){ squarePanels[i].setBackground(Color.yellow); }else{ squarePanels[i].setBackground(Color.blue); } arrayWrapper.add(squarePanels[i], c); } repaint(); validate(); } }","dependencies":[{"file_path":"AlgoViz-main\\Visualizer\\SortingVisualizer.java","file_content":"package Visualizer; import java.util.ArrayList; import java.util.Collections; import Visualizer.Sorts.*; public class SortingVisualizer { private static Thread sortingThread; public static VisualizerFrame frame; public static Integer[] toBeSorted; public static boolean isSorting = false; public static int sortDataCount = 20; public static int sleep = 20; public static int blockWidth; public static boolean stepped = false; public static void main(String[] args) { frame = new VisualizerFrame(); resetArray(); frame.setLocationRelativeTo(null); } public static void resetArray(){ if (isSorting) return; toBeSorted = new Integer[sortDataCount]; blockWidth = (int) Math.max(Math.floor(500/sortDataCount), 1); for(int i = 0; i<toBeSorted.length; i++){ if (stepped) { toBeSorted[i] = i; } else { toBeSorted[i] = (int) (sortDataCount*Math.random()); } } if (stepped) { ArrayList<Integer> shuffleThis = new ArrayList<>(); for (int i = 0; i < toBeSorted.length; i++) { shuffleThis.add(toBeSorted[i]); } Collections.shuffle(shuffleThis); toBeSorted = shuffleThis.toArray(toBeSorted); } frame.preDrawArray(toBeSorted); } public static void startSort(String type){ if (sortingThread == null || !isSorting){ resetArray(); isSorting = true; switch(type){ case \"Bubble\": sortingThread = new Thread(new BubbleSort(toBeSorted, frame, false)); break; case \"Selection\": sortingThread = new Thread(new SelectionSort(toBeSorted, frame, false)); break; case \"Insertion\": sortingThread = new Thread(new InsertionSort(toBeSorted, frame, false)); break; case \"Gnome\": sortingThread = new Thread(new GnomeSort(toBeSorted, frame, false)); break; case \"Merge\": sortingThread = new Thread(new MergeSort()); break; case \"Radix LSD\": sortingThread = new Thread(new RadixSort(toBeSorted, frame, true)); break; case \"Radix MSD\": sortingThread = new Thread(new RadixSort(toBeSorted, frame, false)); break; case \"Shell\": sortingThread = new Thread(new ShellSort()); break; case \"Quandrix\": sortingThread = new Thread(new QuandrixSort()); break; case \"Bubble(fast)\": sortingThread = new Thread(new BubbleSort(toBeSorted, frame, true)); break; case \"Selection(fast)\": sortingThread = new Thread(new SelectionSort(toBeSorted, frame, true)); break; case \"Insertion(fast)\": sortingThread = new Thread(new InsertionSort(toBeSorted, frame, true)); break; case \"Gnome(fast)\": sortingThread = new Thread(new GnomeSort(toBeSorted, frame, true)); break; default: isSorting = false; return; } sortingThread.start(); } } }"}]}}
{"project_id":4,"chunk_id":0,"content":{"main_file_path":"AlgoViz-main\\Visualizer\\Sorts\\BubbleSort.java","main_file_content":"package Visualizer.Sorts; import Visualizer.*; public class BubbleSort implements Runnable{ private Integer[] toBeSorted; private VisualizerFrame frame; private boolean fast; public BubbleSort(Integer[] toBeSorted, VisualizerFrame frame, boolean fast) { this.toBeSorted = toBeSorted; this.frame = frame; this.fast = fast; } public void run() { if (fast) { sortFast(); } else { sortSlow(); } SortingVisualizer.isSorting=false; } public void sortFast() { int temp = 0; boolean swapped = false; for(int i = 0; i<toBeSorted.length-1; i++){ swapped = false; for(int j = 1; j<toBeSorted.length-i; j++){ if (toBeSorted[j-1]> toBeSorted[j]){ temp = toBeSorted[j-1]; toBeSorted[j-1] = toBeSorted[j]; toBeSorted[j]= temp; swapped = true; } } frame.reDrawArray(toBeSorted); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } if (!swapped) break; } } public void sortSlow() { int temp = 0; boolean swapped = false; for(int i = 0; i<toBeSorted.length-1; i++){ swapped = false; for(int j = 1; j<toBeSorted.length-i; j++){ if (toBeSorted[j-1]> toBeSorted[j]){ temp = toBeSorted[j-1]; toBeSorted[j-1] = toBeSorted[j]; toBeSorted[j]= temp; swapped = true; } frame.reDrawArray(toBeSorted, j, j+1); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } } if (!swapped) break; } } }","dependencies":[{"file_path":"AlgoViz-main\\Visualizer\\VisualizerFrame.java","file_content":"package Visualizer; import java.awt.BorderLayout; import java.awt.Color; import java.awt.Dimension; import java.awt.GridBagConstraints; import java.awt.GridBagLayout; import java.awt.Insets; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.awt.event.ComponentEvent; import java.awt.event.ComponentListener; import javax.swing.JButton; import javax.swing.JCheckBox; import javax.swing.JComboBox; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JPanel; import javax.swing.JSlider; import javax.swing.event.ChangeEvent; import javax.swing.event.ChangeListener; @SuppressWarnings(\"serial\") public class VisualizerFrame extends JFrame { private final int MAX_SPEED = 1000; private final int MIN_SPEED = 1; private final int MAX_SIZE = 500; private final int MIN_SIZE = 5; private final int DEFAULT_SPEED = 20; private final int DEFAULT_SIZE = 20; private final String[] Sorts = {\"Bubble\", \"Selection\", \"Insertion\", \"Gnome\", \"Merge\", \"Radix LSD\", \"Radix MSD\", \"Shell\", \"Quandrix\", \"Bubble(fast)\", \"Selection(fast)\", \"Insertion(fast)\", \"Gnome(fast)\"}; private int sizeModifier; private JPanel wrapper; private JPanel arrayWrapper; private JPanel buttonWrapper; private JPanel[] squarePanels; private JButton start; private JComboBox<String> selection; private JSlider speed; private JSlider size; private JLabel speedVal; private JLabel sizeVal; private GridBagConstraints c; private JCheckBox stepped; public VisualizerFrame(){ super(\"Sorting Visualizer\"); start = new JButton(\"Start\"); buttonWrapper = new JPanel(); arrayWrapper = new JPanel(); wrapper = new JPanel(); selection = new JComboBox<String>(); speed = new JSlider(MIN_SPEED, MAX_SPEED, DEFAULT_SPEED); size = new JSlider(MIN_SIZE, MAX_SIZE, DEFAULT_SIZE); speedVal = new JLabel(\"Speed: 20 ms\"); sizeVal = new JLabel(\"Size: 20 values\"); stepped = new JCheckBox(\"Stepped Values\"); c = new GridBagConstraints(); for(String s : Sorts) selection.addItem(s); arrayWrapper.setLayout(new GridBagLayout()); wrapper.setLayout(new BorderLayout()); c.insets = new Insets(0,1,0,1); c.anchor = GridBagConstraints.SOUTH; start.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { SortingVisualizer.startSort((String) selection.getSelectedItem()); } }); stepped.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { SortingVisualizer.stepped = stepped.isSelected(); } }); speed.setMinorTickSpacing(10); speed.setMajorTickSpacing(100); speed.setPaintTicks(true); speed.addChangeListener(new ChangeListener() { public void stateChanged(ChangeEvent arg0) { speedVal.setText((\"Speed: \" + Integer.toString(speed.getValue()) + \"ms\")); validate(); SortingVisualizer.sleep = speed.getValue(); } }); size.setMinorTickSpacing(10); size.setMajorTickSpacing(100); size.setPaintTicks(true); size.addChangeListener(new ChangeListener() { public void stateChanged(ChangeEvent arg0) { sizeVal.setText((\"Size: \" + Integer.toString(size.getValue()) + \" values\")); validate(); SortingVisualizer.sortDataCount = size.getValue(); } }); buttonWrapper.add(stepped); buttonWrapper.add(speedVal); buttonWrapper.add(speed); buttonWrapper.add(sizeVal); buttonWrapper.add(size); buttonWrapper.add(start); buttonWrapper.add(selection); wrapper.add(buttonWrapper, BorderLayout.SOUTH); wrapper.add(arrayWrapper); add(wrapper); setExtendedState(JFrame.MAXIMIZED_BOTH ); addComponentListener(new ComponentListener() { @Override public void componentResized(ComponentEvent e) { sizeModifier = (int) ((getHeight()*0.9)/(squarePanels.length)); } @Override public void componentMoved(ComponentEvent e) { } @Override public void componentShown(ComponentEvent e) { } @Override public void componentHidden(ComponentEvent e) { } }); setVisible(true); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setLocationRelativeTo(null); } public void preDrawArray(Integer[] squares){ squarePanels = new JPanel[SortingVisualizer.sortDataCount]; arrayWrapper.removeAll(); sizeModifier = (int) ((getHeight()*0.9)/(squarePanels.length)); for(int i = 0; i<SortingVisualizer.sortDataCount; i++){ squarePanels[i] = new JPanel(); squarePanels[i].setPreferredSize(new Dimension(SortingVisualizer.blockWidth, squares[i]*sizeModifier)); squarePanels[i].setBackground(Color.blue); arrayWrapper.add(squarePanels[i], c); } repaint(); validate(); } public void reDrawArray(Integer[] x){ reDrawArray(x, -1); } public void reDrawArray(Integer[] x, int y){ reDrawArray(x, y, -1); } public void reDrawArray(Integer[] x, int y, int z){ reDrawArray(x, y, z, -1); } public void reDrawArray(Integer[] squares, int working, int comparing, int reading){ arrayWrapper.removeAll(); for(int i = 0; i<squarePanels.length; i++){ squarePanels[i] = new JPanel(); squarePanels[i].setPreferredSize(new Dimension(SortingVisualizer.blockWidth, squares[i]*sizeModifier)); if (i == working){ squarePanels[i].setBackground(Color.green); }else if(i == comparing){ squarePanels[i].setBackground(Color.red); }else if(i == reading){ squarePanels[i].setBackground(Color.yellow); }else{ squarePanels[i].setBackground(Color.blue); } arrayWrapper.add(squarePanels[i], c); } repaint(); validate(); } }"}]}}
{"project_id":4,"chunk_id":0,"content":{"main_file_path":"AlgoViz-main\\Visualizer\\Sorts\\GnomeSort.java","main_file_content":"package Visualizer.Sorts; import Visualizer.*; public class GnomeSort implements Runnable{ private Integer[] toBeSorted; private VisualizerFrame frame; private boolean fast; public GnomeSort(Integer[] toBeSorted, VisualizerFrame frame, boolean fast) { this.toBeSorted = toBeSorted; this.frame = frame; this.fast = fast; } public void run() { if (fast) { sortFast(); } else { sortSlow(); } SortingVisualizer.isSorting=false; } public void sortFast() { int temp = 0; for(int i = 0; i<toBeSorted.length-1; i++){ for(int j = i+1; j>0; j--){ if (toBeSorted[j] < toBeSorted[j-1]){ temp = toBeSorted[j]; toBeSorted[j] = toBeSorted[j-1]; toBeSorted[j-1] = temp; }else{ break; } } frame.reDrawArray(toBeSorted); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } } } public void sortSlow() { int temp = 0; for(int i = 0; i<toBeSorted.length-1; i++){ for(int j = i+1; j>0; j--){ if (toBeSorted[j] < toBeSorted[j-1]){ temp = toBeSorted[j]; toBeSorted[j] = toBeSorted[j-1]; toBeSorted[j-1] = temp; frame.reDrawArray(toBeSorted, j, j-1); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } }else{ break; } } } } }","dependencies":[{"file_path":"AlgoViz-main\\Visualizer\\VisualizerFrame.java","file_content":"package Visualizer; import java.awt.BorderLayout; import java.awt.Color; import java.awt.Dimension; import java.awt.GridBagConstraints; import java.awt.GridBagLayout; import java.awt.Insets; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.awt.event.ComponentEvent; import java.awt.event.ComponentListener; import javax.swing.JButton; import javax.swing.JCheckBox; import javax.swing.JComboBox; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JPanel; import javax.swing.JSlider; import javax.swing.event.ChangeEvent; import javax.swing.event.ChangeListener; @SuppressWarnings(\"serial\") public class VisualizerFrame extends JFrame { private final int MAX_SPEED = 1000; private final int MIN_SPEED = 1; private final int MAX_SIZE = 500; private final int MIN_SIZE = 5; private final int DEFAULT_SPEED = 20; private final int DEFAULT_SIZE = 20; private final String[] Sorts = {\"Bubble\", \"Selection\", \"Insertion\", \"Gnome\", \"Merge\", \"Radix LSD\", \"Radix MSD\", \"Shell\", \"Quandrix\", \"Bubble(fast)\", \"Selection(fast)\", \"Insertion(fast)\", \"Gnome(fast)\"}; private int sizeModifier; private JPanel wrapper; private JPanel arrayWrapper; private JPanel buttonWrapper; private JPanel[] squarePanels; private JButton start; private JComboBox<String> selection; private JSlider speed; private JSlider size; private JLabel speedVal; private JLabel sizeVal; private GridBagConstraints c; private JCheckBox stepped; public VisualizerFrame(){ super(\"Sorting Visualizer\"); start = new JButton(\"Start\"); buttonWrapper = new JPanel(); arrayWrapper = new JPanel(); wrapper = new JPanel(); selection = new JComboBox<String>(); speed = new JSlider(MIN_SPEED, MAX_SPEED, DEFAULT_SPEED); size = new JSlider(MIN_SIZE, MAX_SIZE, DEFAULT_SIZE); speedVal = new JLabel(\"Speed: 20 ms\"); sizeVal = new JLabel(\"Size: 20 values\"); stepped = new JCheckBox(\"Stepped Values\"); c = new GridBagConstraints(); for(String s : Sorts) selection.addItem(s); arrayWrapper.setLayout(new GridBagLayout()); wrapper.setLayout(new BorderLayout()); c.insets = new Insets(0,1,0,1); c.anchor = GridBagConstraints.SOUTH; start.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { SortingVisualizer.startSort((String) selection.getSelectedItem()); } }); stepped.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { SortingVisualizer.stepped = stepped.isSelected(); } }); speed.setMinorTickSpacing(10); speed.setMajorTickSpacing(100); speed.setPaintTicks(true); speed.addChangeListener(new ChangeListener() { public void stateChanged(ChangeEvent arg0) { speedVal.setText((\"Speed: \" + Integer.toString(speed.getValue()) + \"ms\")); validate(); SortingVisualizer.sleep = speed.getValue(); } }); size.setMinorTickSpacing(10); size.setMajorTickSpacing(100); size.setPaintTicks(true); size.addChangeListener(new ChangeListener() { public void stateChanged(ChangeEvent arg0) { sizeVal.setText((\"Size: \" + Integer.toString(size.getValue()) + \" values\")); validate(); SortingVisualizer.sortDataCount = size.getValue(); } }); buttonWrapper.add(stepped); buttonWrapper.add(speedVal); buttonWrapper.add(speed); buttonWrapper.add(sizeVal); buttonWrapper.add(size); buttonWrapper.add(start); buttonWrapper.add(selection); wrapper.add(buttonWrapper, BorderLayout.SOUTH); wrapper.add(arrayWrapper); add(wrapper); setExtendedState(JFrame.MAXIMIZED_BOTH ); addComponentListener(new ComponentListener() { @Override public void componentResized(ComponentEvent e) { sizeModifier = (int) ((getHeight()*0.9)/(squarePanels.length)); } @Override public void componentMoved(ComponentEvent e) { } @Override public void componentShown(ComponentEvent e) { } @Override public void componentHidden(ComponentEvent e) { } }); setVisible(true); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setLocationRelativeTo(null); } public void preDrawArray(Integer[] squares){ squarePanels = new JPanel[SortingVisualizer.sortDataCount]; arrayWrapper.removeAll(); sizeModifier = (int) ((getHeight()*0.9)/(squarePanels.length)); for(int i = 0; i<SortingVisualizer.sortDataCount; i++){ squarePanels[i] = new JPanel(); squarePanels[i].setPreferredSize(new Dimension(SortingVisualizer.blockWidth, squares[i]*sizeModifier)); squarePanels[i].setBackground(Color.blue); arrayWrapper.add(squarePanels[i], c); } repaint(); validate(); } public void reDrawArray(Integer[] x){ reDrawArray(x, -1); } public void reDrawArray(Integer[] x, int y){ reDrawArray(x, y, -1); } public void reDrawArray(Integer[] x, int y, int z){ reDrawArray(x, y, z, -1); } public void reDrawArray(Integer[] squares, int working, int comparing, int reading){ arrayWrapper.removeAll(); for(int i = 0; i<squarePanels.length; i++){ squarePanels[i] = new JPanel(); squarePanels[i].setPreferredSize(new Dimension(SortingVisualizer.blockWidth, squares[i]*sizeModifier)); if (i == working){ squarePanels[i].setBackground(Color.green); }else if(i == comparing){ squarePanels[i].setBackground(Color.red); }else if(i == reading){ squarePanels[i].setBackground(Color.yellow); }else{ squarePanels[i].setBackground(Color.blue); } arrayWrapper.add(squarePanels[i], c); } repaint(); validate(); } }"}]}}
{"project_id":4,"chunk_id":0,"content":{"main_file_path":"AlgoViz-main\\Visualizer\\Sorts\\InsertionSort.java","main_file_content":"package Visualizer.Sorts; import Visualizer.*; public class InsertionSort implements Runnable{ private Integer[] toBeSorted; private VisualizerFrame frame; private boolean fast; public InsertionSort(Integer[] toBeSorted, VisualizerFrame frame, boolean fast) { this.toBeSorted = toBeSorted; this.frame = frame; this.fast = fast; } public void run() { if (fast) { sortFast(); } else { sortSlow(); } SortingVisualizer.isSorting=false; } public void sortFast() { int temp = 0; int insert = 0; for(int i = 1; i<toBeSorted.length; i++){ insert = i; for(int j = i-1; j>=0; j--){ if (toBeSorted[i] < toBeSorted[j]){ insert = j; if (j == 0){ break; } }else{ break; } } temp = toBeSorted[i]; for (int j = i; j>insert; j--){ toBeSorted[j] = toBeSorted[j-1]; } toBeSorted[insert] = temp; frame.reDrawArray(toBeSorted, i); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } } } public void sortSlow() { int temp = 0; int insert = 0; for(int i = 1; i<toBeSorted.length; i++){ insert = i; for(int j = i-1; j>=0; j--){ if (toBeSorted[i] < toBeSorted[j]){ insert = j; if (j == 0){ break; } }else{ break; } frame.reDrawArray(toBeSorted, i, insert); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } } temp = toBeSorted[i]; for (int j = i; j>insert; j--){ toBeSorted[j] = toBeSorted[j-1]; } toBeSorted[insert] = temp; } frame.reDrawArray(toBeSorted); } }","dependencies":[{"file_path":"AlgoViz-main\\Visualizer\\VisualizerFrame.java","file_content":"package Visualizer; import java.awt.BorderLayout; import java.awt.Color; import java.awt.Dimension; import java.awt.GridBagConstraints; import java.awt.GridBagLayout; import java.awt.Insets; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.awt.event.ComponentEvent; import java.awt.event.ComponentListener; import javax.swing.JButton; import javax.swing.JCheckBox; import javax.swing.JComboBox; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JPanel; import javax.swing.JSlider; import javax.swing.event.ChangeEvent; import javax.swing.event.ChangeListener; @SuppressWarnings(\"serial\") public class VisualizerFrame extends JFrame { private final int MAX_SPEED = 1000; private final int MIN_SPEED = 1; private final int MAX_SIZE = 500; private final int MIN_SIZE = 5; private final int DEFAULT_SPEED = 20; private final int DEFAULT_SIZE = 20; private final String[] Sorts = {\"Bubble\", \"Selection\", \"Insertion\", \"Gnome\", \"Merge\", \"Radix LSD\", \"Radix MSD\", \"Shell\", \"Quandrix\", \"Bubble(fast)\", \"Selection(fast)\", \"Insertion(fast)\", \"Gnome(fast)\"}; private int sizeModifier; private JPanel wrapper; private JPanel arrayWrapper; private JPanel buttonWrapper; private JPanel[] squarePanels; private JButton start; private JComboBox<String> selection; private JSlider speed; private JSlider size; private JLabel speedVal; private JLabel sizeVal; private GridBagConstraints c; private JCheckBox stepped; public VisualizerFrame(){ super(\"Sorting Visualizer\"); start = new JButton(\"Start\"); buttonWrapper = new JPanel(); arrayWrapper = new JPanel(); wrapper = new JPanel(); selection = new JComboBox<String>(); speed = new JSlider(MIN_SPEED, MAX_SPEED, DEFAULT_SPEED); size = new JSlider(MIN_SIZE, MAX_SIZE, DEFAULT_SIZE); speedVal = new JLabel(\"Speed: 20 ms\"); sizeVal = new JLabel(\"Size: 20 values\"); stepped = new JCheckBox(\"Stepped Values\"); c = new GridBagConstraints(); for(String s : Sorts) selection.addItem(s); arrayWrapper.setLayout(new GridBagLayout()); wrapper.setLayout(new BorderLayout()); c.insets = new Insets(0,1,0,1); c.anchor = GridBagConstraints.SOUTH; start.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { SortingVisualizer.startSort((String) selection.getSelectedItem()); } }); stepped.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { SortingVisualizer.stepped = stepped.isSelected(); } }); speed.setMinorTickSpacing(10); speed.setMajorTickSpacing(100); speed.setPaintTicks(true); speed.addChangeListener(new ChangeListener() { public void stateChanged(ChangeEvent arg0) { speedVal.setText((\"Speed: \" + Integer.toString(speed.getValue()) + \"ms\")); validate(); SortingVisualizer.sleep = speed.getValue(); } }); size.setMinorTickSpacing(10); size.setMajorTickSpacing(100); size.setPaintTicks(true); size.addChangeListener(new ChangeListener() { public void stateChanged(ChangeEvent arg0) { sizeVal.setText((\"Size: \" + Integer.toString(size.getValue()) + \" values\")); validate(); SortingVisualizer.sortDataCount = size.getValue(); } }); buttonWrapper.add(stepped); buttonWrapper.add(speedVal); buttonWrapper.add(speed); buttonWrapper.add(sizeVal); buttonWrapper.add(size); buttonWrapper.add(start); buttonWrapper.add(selection); wrapper.add(buttonWrapper, BorderLayout.SOUTH); wrapper.add(arrayWrapper); add(wrapper); setExtendedState(JFrame.MAXIMIZED_BOTH ); addComponentListener(new ComponentListener() { @Override public void componentResized(ComponentEvent e) { sizeModifier = (int) ((getHeight()*0.9)/(squarePanels.length)); } @Override public void componentMoved(ComponentEvent e) { } @Override public void componentShown(ComponentEvent e) { } @Override public void componentHidden(ComponentEvent e) { } }); setVisible(true); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setLocationRelativeTo(null); } public void preDrawArray(Integer[] squares){ squarePanels = new JPanel[SortingVisualizer.sortDataCount]; arrayWrapper.removeAll(); sizeModifier = (int) ((getHeight()*0.9)/(squarePanels.length)); for(int i = 0; i<SortingVisualizer.sortDataCount; i++){ squarePanels[i] = new JPanel(); squarePanels[i].setPreferredSize(new Dimension(SortingVisualizer.blockWidth, squares[i]*sizeModifier)); squarePanels[i].setBackground(Color.blue); arrayWrapper.add(squarePanels[i], c); } repaint(); validate(); } public void reDrawArray(Integer[] x){ reDrawArray(x, -1); } public void reDrawArray(Integer[] x, int y){ reDrawArray(x, y, -1); } public void reDrawArray(Integer[] x, int y, int z){ reDrawArray(x, y, z, -1); } public void reDrawArray(Integer[] squares, int working, int comparing, int reading){ arrayWrapper.removeAll(); for(int i = 0; i<squarePanels.length; i++){ squarePanels[i] = new JPanel(); squarePanels[i].setPreferredSize(new Dimension(SortingVisualizer.blockWidth, squares[i]*sizeModifier)); if (i == working){ squarePanels[i].setBackground(Color.green); }else if(i == comparing){ squarePanels[i].setBackground(Color.red); }else if(i == reading){ squarePanels[i].setBackground(Color.yellow); }else{ squarePanels[i].setBackground(Color.blue); } arrayWrapper.add(squarePanels[i], c); } repaint(); validate(); } }"}]}}
{"project_id":4,"chunk_id":0,"content":{"main_file_path":"AlgoViz-main\\Visualizer\\Sorts\\MergeSort.java","main_file_content":"package Visualizer.Sorts; import Visualizer.SortingVisualizer; public class MergeSort implements Runnable{ public void run() { Integer[] toBeSorted = SortingVisualizer.toBeSorted; inPlaceSort(toBeSorted); SortingVisualizer.isSorting=false; } public void inPlaceSort ( Integer[] x ) { inPlaceSort (x, 0, x.length-1); } private void inPlaceSort ( Integer[] x, int first, int last ) { int mid, lt, rt; int tmp; if ( first >= last ) return; mid = (first + last) / 2; inPlaceSort (x, first, mid); inPlaceSort (x, mid+1, last); lt = first; rt = mid+1; if ( x[mid] <= x[rt]) return; while (lt <= mid && rt <= last) { if ( x[lt] <= x[rt]) lt++; else { tmp = x[rt]; for (int i = rt-lt;i>0; i--){ x[lt+i] = x[lt+i-1]; } x[lt] = tmp; lt++; mid++; rt++; } SortingVisualizer.frame.reDrawArray(x, mid, rt, lt); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } } } }","dependencies":[]}}
{"project_id":4,"chunk_id":0,"content":{"main_file_path":"AlgoViz-main\\Visualizer\\Sorts\\QuandrixSort.java","main_file_content":"package Visualizer.Sorts; import Visualizer.SortingVisualizer; public class QuandrixSort implements Runnable{ public void run() { int temp = 0; Integer[] toBeSorted = SortingVisualizer.toBeSorted; int i = 0; if (toBeSorted.length % 3 == 0) { SortingVisualizer.isSorting=false; return; } boolean swapped = false; int doubleCheck = 0; boolean end = false; while(doubleCheck < 3){ if (end) { swapped = false; end = false; } int j = i + 1; int k = j + 1; if (k < toBeSorted.length) { if (toBeSorted[k] < toBeSorted[j]) { temp = toBeSorted[j]; toBeSorted[j] = toBeSorted[k]; toBeSorted[k] = temp; swapped = true; } SortingVisualizer.frame.reDrawArray(toBeSorted, k, j); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } } if (j < toBeSorted.length) { if (toBeSorted[j] < toBeSorted[i]) { temp = toBeSorted[i]; toBeSorted[i] = toBeSorted[j]; toBeSorted[j] = temp; swapped = true; } SortingVisualizer.frame.reDrawArray(toBeSorted, j, i); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } if (k < toBeSorted.length) { if (toBeSorted[k] < toBeSorted[j]) { temp = toBeSorted[j]; toBeSorted[j] = toBeSorted[k]; toBeSorted[k] = temp; swapped = true; } SortingVisualizer.frame.reDrawArray(toBeSorted, k, j); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } } } i += 3; if (i >= toBeSorted.length) { i = i % toBeSorted.length; end = true; if (!swapped) { doubleCheck++; } else { doubleCheck = 0; } } } SortingVisualizer.isSorting=false; } }","dependencies":[]}}
{"project_id":4,"chunk_id":0,"content":{"main_file_path":"AlgoViz-main\\Visualizer\\Sorts\\RadixSort.java","main_file_content":"package Visualizer.Sorts; import java.util.ArrayList; import Visualizer.SortingVisualizer; import Visualizer.VisualizerFrame; public class RadixSort implements Runnable{ private Integer[] toBeSorted; private VisualizerFrame frame; private boolean lsd; public RadixSort(Integer[] toBeSorted, VisualizerFrame frame, boolean lsd) { this.toBeSorted = toBeSorted; this.frame = frame; this.lsd = lsd; } public void run() { if (lsd) radixlsd(toBeSorted, 1); else radixmsd(toBeSorted, findDigit(toBeSorted)); SortingVisualizer.isSorting=false; } private void radixlsd(Integer[] x, int digit){ ArrayList<Integer>[] buckets = new ArrayList[10]; for(int i = 0; i<10; i++){ buckets[i] = new ArrayList<Integer>(); } int theDig = 0; int maxI = 0; for(int i = 0; i<x.length; i++){ theDig = (int) (x[i]%Math.pow(10, digit)); for(int t = 0; t<digit-1; t++){ theDig/=10; } if (x[i] > maxI) maxI = x[i]; frame.reDrawArray(x, -1, -1, i); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } buckets[theDig].add(x[i]); } ArrayList<Integer> finalList = new ArrayList<>(); for(int i = 0; i<10; i++){ finalList.addAll(buckets[i]); } Integer[] y = finalList.toArray(new Integer[0]); frame.reDrawArray(y); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } if (maxI < Math.pow(10, digit)) return; radixlsd(y, digit+1); } private void radixmsd(Integer[] x, int digit){ ArrayList<Integer>[] buckets = new ArrayList[10]; for(int i = 0; i<10; i++){ buckets[i] = new ArrayList<Integer>(); } int theDig = 0; for(int i = 0; i<x.length; i++){ theDig = (int) (x[i]%Math.pow(10, digit)); for(int t = 0; t<digit-1; t++){ theDig/=10; } frame.reDrawArray(x, -1, -1, i); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } buckets[theDig].add(x[i]); } ArrayList<Integer> finalList = new ArrayList<>(); for(int i = 0; i<10; i++){ finalList.addAll(buckets[i]); } Integer[] y = finalList.toArray(new Integer[0]); frame.reDrawArray(y); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } if (digit == 1) return; int beginning = 0; for (int i = 0; i < 10; i++) { y = radixmsd(y, digit-1, beginning, beginning + buckets[i].size()); beginning += buckets[i].size(); } } private Integer[] radixmsd(Integer[] x, int digit, int begin, int end){ ArrayList<Integer>[] buckets = new ArrayList[10]; for(int i = 0; i<10; i++){ buckets[i] = new ArrayList<Integer>(); } int theDig = 0; for(int i = begin; i<end; i++){ theDig = (int) (x[i]%Math.pow(10, digit)); for(int t = 0; t<digit-1; t++){ theDig/=10; } frame.reDrawArray(x, -1, -1, i); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } buckets[theDig].add(x[i]); } ArrayList<Integer> finalList = new ArrayList<>(); for (int i = 0; i < begin; i++) { finalList.add(x[i]); } for(int i = 0; i<10; i++){ finalList.addAll(buckets[i]); } for (int i = end; i < x.length; i++) { finalList.add(x[i]); } Integer[] y = finalList.toArray(new Integer[0]); frame.reDrawArray(y); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } if (digit == 1) return y; int beginning = begin; for (int i = 0; i < 10; i++) { y = radixmsd(y, digit-1, beginning, beginning + buckets[i].size()); beginning += buckets[i].size(); } return y; } private int findDigit(Integer[] x) { int max = Integer.MIN_VALUE; int digit = 1; for (int i : x) { if (i > max) max = i; } while (max > 10) { max = max/10; digit++; } return digit; } }","dependencies":[{"file_path":"AlgoViz-main\\Visualizer\\VisualizerFrame.java","file_content":"package Visualizer; import java.awt.BorderLayout; import java.awt.Color; import java.awt.Dimension; import java.awt.GridBagConstraints; import java.awt.GridBagLayout; import java.awt.Insets; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.awt.event.ComponentEvent; import java.awt.event.ComponentListener; import javax.swing.JButton; import javax.swing.JCheckBox; import javax.swing.JComboBox; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JPanel; import javax.swing.JSlider; import javax.swing.event.ChangeEvent; import javax.swing.event.ChangeListener; @SuppressWarnings(\"serial\") public class VisualizerFrame extends JFrame { private final int MAX_SPEED = 1000; private final int MIN_SPEED = 1; private final int MAX_SIZE = 500; private final int MIN_SIZE = 5; private final int DEFAULT_SPEED = 20; private final int DEFAULT_SIZE = 20; private final String[] Sorts = {\"Bubble\", \"Selection\", \"Insertion\", \"Gnome\", \"Merge\", \"Radix LSD\", \"Radix MSD\", \"Shell\", \"Quandrix\", \"Bubble(fast)\", \"Selection(fast)\", \"Insertion(fast)\", \"Gnome(fast)\"}; private int sizeModifier; private JPanel wrapper; private JPanel arrayWrapper; private JPanel buttonWrapper; private JPanel[] squarePanels; private JButton start; private JComboBox<String> selection; private JSlider speed; private JSlider size; private JLabel speedVal; private JLabel sizeVal; private GridBagConstraints c; private JCheckBox stepped; public VisualizerFrame(){ super(\"Sorting Visualizer\"); start = new JButton(\"Start\"); buttonWrapper = new JPanel(); arrayWrapper = new JPanel(); wrapper = new JPanel(); selection = new JComboBox<String>(); speed = new JSlider(MIN_SPEED, MAX_SPEED, DEFAULT_SPEED); size = new JSlider(MIN_SIZE, MAX_SIZE, DEFAULT_SIZE); speedVal = new JLabel(\"Speed: 20 ms\"); sizeVal = new JLabel(\"Size: 20 values\"); stepped = new JCheckBox(\"Stepped Values\"); c = new GridBagConstraints(); for(String s : Sorts) selection.addItem(s); arrayWrapper.setLayout(new GridBagLayout()); wrapper.setLayout(new BorderLayout()); c.insets = new Insets(0,1,0,1); c.anchor = GridBagConstraints.SOUTH; start.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { SortingVisualizer.startSort((String) selection.getSelectedItem()); } }); stepped.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { SortingVisualizer.stepped = stepped.isSelected(); } }); speed.setMinorTickSpacing(10); speed.setMajorTickSpacing(100); speed.setPaintTicks(true); speed.addChangeListener(new ChangeListener() { public void stateChanged(ChangeEvent arg0) { speedVal.setText((\"Speed: \" + Integer.toString(speed.getValue()) + \"ms\")); validate(); SortingVisualizer.sleep = speed.getValue(); } }); size.setMinorTickSpacing(10); size.setMajorTickSpacing(100); size.setPaintTicks(true); size.addChangeListener(new ChangeListener() { public void stateChanged(ChangeEvent arg0) { sizeVal.setText((\"Size: \" + Integer.toString(size.getValue()) + \" values\")); validate(); SortingVisualizer.sortDataCount = size.getValue(); } }); buttonWrapper.add(stepped); buttonWrapper.add(speedVal); buttonWrapper.add(speed); buttonWrapper.add(sizeVal); buttonWrapper.add(size); buttonWrapper.add(start); buttonWrapper.add(selection); wrapper.add(buttonWrapper, BorderLayout.SOUTH); wrapper.add(arrayWrapper); add(wrapper); setExtendedState(JFrame.MAXIMIZED_BOTH ); addComponentListener(new ComponentListener() { @Override public void componentResized(ComponentEvent e) { sizeModifier = (int) ((getHeight()*0.9)/(squarePanels.length)); } @Override public void componentMoved(ComponentEvent e) { } @Override public void componentShown(ComponentEvent e) { } @Override public void componentHidden(ComponentEvent e) { } }); setVisible(true); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setLocationRelativeTo(null); } public void preDrawArray(Integer[] squares){ squarePanels = new JPanel[SortingVisualizer.sortDataCount]; arrayWrapper.removeAll(); sizeModifier = (int) ((getHeight()*0.9)/(squarePanels.length)); for(int i = 0; i<SortingVisualizer.sortDataCount; i++){ squarePanels[i] = new JPanel(); squarePanels[i].setPreferredSize(new Dimension(SortingVisualizer.blockWidth, squares[i]*sizeModifier)); squarePanels[i].setBackground(Color.blue); arrayWrapper.add(squarePanels[i], c); } repaint(); validate(); } public void reDrawArray(Integer[] x){ reDrawArray(x, -1); } public void reDrawArray(Integer[] x, int y){ reDrawArray(x, y, -1); } public void reDrawArray(Integer[] x, int y, int z){ reDrawArray(x, y, z, -1); } public void reDrawArray(Integer[] squares, int working, int comparing, int reading){ arrayWrapper.removeAll(); for(int i = 0; i<squarePanels.length; i++){ squarePanels[i] = new JPanel(); squarePanels[i].setPreferredSize(new Dimension(SortingVisualizer.blockWidth, squares[i]*sizeModifier)); if (i == working){ squarePanels[i].setBackground(Color.green); }else if(i == comparing){ squarePanels[i].setBackground(Color.red); }else if(i == reading){ squarePanels[i].setBackground(Color.yellow); }else{ squarePanels[i].setBackground(Color.blue); } arrayWrapper.add(squarePanels[i], c); } repaint(); validate(); } }"}]}}
{"project_id":4,"chunk_id":0,"content":{"main_file_path":"AlgoViz-main\\Visualizer\\Sorts\\SelectionSort.java","main_file_content":"package Visualizer.Sorts; import Visualizer.*; public class SelectionSort implements Runnable{ private Integer[] toBeSorted; private VisualizerFrame frame; private boolean fast; public SelectionSort(Integer[] toBeSorted, VisualizerFrame frame, boolean fast) { this.toBeSorted = toBeSorted; this.frame = frame; this.fast = fast; } public void run() { if (fast) { sortFast(); } else { sortSlow(); } SortingVisualizer.isSorting=false; } public void sortFast(){ int temp = 0; int selected = 0; for(int i = 0; i<toBeSorted.length; i++){ selected = i; for(int j = toBeSorted.length-1; j>i; j--){ if (toBeSorted[j] <= toBeSorted[selected]){ selected = j; } } frame.reDrawArray(toBeSorted); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } temp = toBeSorted[i]; toBeSorted[i] = toBeSorted[selected]; toBeSorted[selected]= temp; } } public void sortSlow() { int temp = 0; int selected = 0; for(int i = 0; i<toBeSorted.length; i++){ selected = i; for(int j = toBeSorted.length-1; j>i; j--){ if (toBeSorted[j] <= toBeSorted[selected]){ selected = j; } frame.reDrawArray(toBeSorted, selected, j-1); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } } temp = toBeSorted[i]; toBeSorted[i] = toBeSorted[selected]; toBeSorted[selected]= temp; } frame.reDrawArray(toBeSorted); } }","dependencies":[{"file_path":"AlgoViz-main\\Visualizer\\VisualizerFrame.java","file_content":"package Visualizer; import java.awt.BorderLayout; import java.awt.Color; import java.awt.Dimension; import java.awt.GridBagConstraints; import java.awt.GridBagLayout; import java.awt.Insets; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.awt.event.ComponentEvent; import java.awt.event.ComponentListener; import javax.swing.JButton; import javax.swing.JCheckBox; import javax.swing.JComboBox; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JPanel; import javax.swing.JSlider; import javax.swing.event.ChangeEvent; import javax.swing.event.ChangeListener; @SuppressWarnings(\"serial\") public class VisualizerFrame extends JFrame { private final int MAX_SPEED = 1000; private final int MIN_SPEED = 1; private final int MAX_SIZE = 500; private final int MIN_SIZE = 5; private final int DEFAULT_SPEED = 20; private final int DEFAULT_SIZE = 20; private final String[] Sorts = {\"Bubble\", \"Selection\", \"Insertion\", \"Gnome\", \"Merge\", \"Radix LSD\", \"Radix MSD\", \"Shell\", \"Quandrix\", \"Bubble(fast)\", \"Selection(fast)\", \"Insertion(fast)\", \"Gnome(fast)\"}; private int sizeModifier; private JPanel wrapper; private JPanel arrayWrapper; private JPanel buttonWrapper; private JPanel[] squarePanels; private JButton start; private JComboBox<String> selection; private JSlider speed; private JSlider size; private JLabel speedVal; private JLabel sizeVal; private GridBagConstraints c; private JCheckBox stepped; public VisualizerFrame(){ super(\"Sorting Visualizer\"); start = new JButton(\"Start\"); buttonWrapper = new JPanel(); arrayWrapper = new JPanel(); wrapper = new JPanel(); selection = new JComboBox<String>(); speed = new JSlider(MIN_SPEED, MAX_SPEED, DEFAULT_SPEED); size = new JSlider(MIN_SIZE, MAX_SIZE, DEFAULT_SIZE); speedVal = new JLabel(\"Speed: 20 ms\"); sizeVal = new JLabel(\"Size: 20 values\"); stepped = new JCheckBox(\"Stepped Values\"); c = new GridBagConstraints(); for(String s : Sorts) selection.addItem(s); arrayWrapper.setLayout(new GridBagLayout()); wrapper.setLayout(new BorderLayout()); c.insets = new Insets(0,1,0,1); c.anchor = GridBagConstraints.SOUTH; start.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { SortingVisualizer.startSort((String) selection.getSelectedItem()); } }); stepped.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { SortingVisualizer.stepped = stepped.isSelected(); } }); speed.setMinorTickSpacing(10); speed.setMajorTickSpacing(100); speed.setPaintTicks(true); speed.addChangeListener(new ChangeListener() { public void stateChanged(ChangeEvent arg0) { speedVal.setText((\"Speed: \" + Integer.toString(speed.getValue()) + \"ms\")); validate(); SortingVisualizer.sleep = speed.getValue(); } }); size.setMinorTickSpacing(10); size.setMajorTickSpacing(100); size.setPaintTicks(true); size.addChangeListener(new ChangeListener() { public void stateChanged(ChangeEvent arg0) { sizeVal.setText((\"Size: \" + Integer.toString(size.getValue()) + \" values\")); validate(); SortingVisualizer.sortDataCount = size.getValue(); } }); buttonWrapper.add(stepped); buttonWrapper.add(speedVal); buttonWrapper.add(speed); buttonWrapper.add(sizeVal); buttonWrapper.add(size); buttonWrapper.add(start); buttonWrapper.add(selection); wrapper.add(buttonWrapper, BorderLayout.SOUTH); wrapper.add(arrayWrapper); add(wrapper); setExtendedState(JFrame.MAXIMIZED_BOTH ); addComponentListener(new ComponentListener() { @Override public void componentResized(ComponentEvent e) { sizeModifier = (int) ((getHeight()*0.9)/(squarePanels.length)); } @Override public void componentMoved(ComponentEvent e) { } @Override public void componentShown(ComponentEvent e) { } @Override public void componentHidden(ComponentEvent e) { } }); setVisible(true); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setLocationRelativeTo(null); } public void preDrawArray(Integer[] squares){ squarePanels = new JPanel[SortingVisualizer.sortDataCount]; arrayWrapper.removeAll(); sizeModifier = (int) ((getHeight()*0.9)/(squarePanels.length)); for(int i = 0; i<SortingVisualizer.sortDataCount; i++){ squarePanels[i] = new JPanel(); squarePanels[i].setPreferredSize(new Dimension(SortingVisualizer.blockWidth, squares[i]*sizeModifier)); squarePanels[i].setBackground(Color.blue); arrayWrapper.add(squarePanels[i], c); } repaint(); validate(); } public void reDrawArray(Integer[] x){ reDrawArray(x, -1); } public void reDrawArray(Integer[] x, int y){ reDrawArray(x, y, -1); } public void reDrawArray(Integer[] x, int y, int z){ reDrawArray(x, y, z, -1); } public void reDrawArray(Integer[] squares, int working, int comparing, int reading){ arrayWrapper.removeAll(); for(int i = 0; i<squarePanels.length; i++){ squarePanels[i] = new JPanel(); squarePanels[i].setPreferredSize(new Dimension(SortingVisualizer.blockWidth, squares[i]*sizeModifier)); if (i == working){ squarePanels[i].setBackground(Color.green); }else if(i == comparing){ squarePanels[i].setBackground(Color.red); }else if(i == reading){ squarePanels[i].setBackground(Color.yellow); }else{ squarePanels[i].setBackground(Color.blue); } arrayWrapper.add(squarePanels[i], c); } repaint(); validate(); } }"}]}}
{"project_id":4,"chunk_id":0,"content":{"main_file_path":"AlgoViz-main\\Visualizer\\Sorts\\ShellSort.java","main_file_content":"package Visualizer.Sorts; import Visualizer.SortingVisualizer; public class ShellSort implements Runnable{ public void run() { int temp = 0; Integer[] toBeSorted = SortingVisualizer.toBeSorted; int j = 0; for(int gap = toBeSorted.length/2; gap > 0; gap/=2){ for(int i = gap; i<toBeSorted.length; i++){ temp = toBeSorted[i]; for (j = i; j>=gap && temp<toBeSorted[j-gap]; j -= gap){ toBeSorted[j] = toBeSorted[j-gap]; SortingVisualizer.frame.reDrawArray(toBeSorted, i, j); try { Thread.sleep(SortingVisualizer.sleep); } catch (InterruptedException e) { e.printStackTrace(); } } toBeSorted[j] = temp; } } SortingVisualizer.isSorting=false; } }","dependencies":[]}}
{"project_id":7,"chunk_id":0,"content":{"main_file_path":"ATM-Machine-master\\ATM\\Account.java","main_file_content":"import java.text.DecimalFormat; import java.util.InputMismatchException; import java.util.Scanner; public class Account { private int customerNumber; private int pinNumber; private double checkingBalance = 0; private double savingBalance = 0; Scanner input = new Scanner(System.in); DecimalFormat moneyFormat = new DecimalFormat(\"'$'###,##0.00\"); public Account() { } public Account(int customerNumber, int pinNumber) { this.customerNumber = customerNumber; this.pinNumber = pinNumber; } public Account(int customerNumber, int pinNumber, double checkingBalance, double savingBalance) { this.customerNumber = customerNumber; this.pinNumber = pinNumber; this.checkingBalance = checkingBalance; this.savingBalance = savingBalance; } public int setCustomerNumber(int customerNumber) { this.customerNumber = customerNumber; return customerNumber; } public int getCustomerNumber() { return customerNumber; } public int setPinNumber(int pinNumber) { this.pinNumber = pinNumber; return pinNumber; } public int getPinNumber() { return pinNumber; } public double getCheckingBalance() { return checkingBalance; } public double getSavingBalance() { return savingBalance; } public double calcCheckingWithdraw(double amount) { checkingBalance = (checkingBalance - amount); return checkingBalance; } public double calcSavingWithdraw(double amount) { savingBalance = (savingBalance - amount); return savingBalance; } public double calcCheckingDeposit(double amount) { checkingBalance = (checkingBalance + amount); return checkingBalance; } public double calcSavingDeposit(double amount) { savingBalance = (savingBalance + amount); return savingBalance; } public void calcCheckTransfer(double amount) { checkingBalance = checkingBalance - amount; savingBalance = savingBalance + amount; } public void calcSavingTransfer(double amount) { savingBalance = savingBalance - amount; checkingBalance = checkingBalance + amount; } public void getCheckingWithdrawInput() { boolean end = false; while (!end) { try { System.out.println(\"\\nCurrent Checkings Account Balance: \" + moneyFormat.format(checkingBalance)); System.out.print(\"\\nAmount you want to withdraw from Checkings Account: \"); double amount = input.nextDouble(); if ((checkingBalance - amount) >= 0 && amount >= 0) { calcCheckingWithdraw(amount); System.out.println(\"\\nCurrent Checkings Account Balance: \" + moneyFormat.format(checkingBalance)); end = true; } else { System.out.println(\"\\nBalance Cannot be Negative.\"); } } catch (InputMismatchException e) { System.out.println(\"\\nInvalid Choice.\"); input.next(); } } } public void getsavingWithdrawInput() { boolean end = false; while (!end) { try { System.out.println(\"\\nCurrent Savings Account Balance: \" + moneyFormat.format(savingBalance)); System.out.print(\"\\nAmount you want to withdraw from Savings Account: \"); double amount = input.nextDouble(); if ((savingBalance - amount) >= 0 && amount >= 0) { calcSavingWithdraw(amount); System.out.println(\"\\nCurrent Savings Account Balance: \" + moneyFormat.format(savingBalance)); end = true; } else { System.out.println(\"\\nBalance Cannot Be Negative.\"); } } catch (InputMismatchException e) { System.out.println(\"\\nInvalid Choice.\"); input.next(); } } } public void getCheckingDepositInput() { boolean end = false; while (!end) { try { System.out.println(\"\\nCurrent Checkings Account Balance: \" + moneyFormat.format(checkingBalance)); System.out.print(\"\\nAmount you want to deposit from Checkings Account: \"); double amount = input.nextDouble(); if ((checkingBalance + amount) >= 0 && amount >= 0) { calcCheckingDeposit(amount); System.out.println(\"\\nCurrent Checkings Account Balance: \" + moneyFormat.format(checkingBalance)); end = true; } else { System.out.println(\"\\nBalance Cannot Be Negative.\"); } } catch (InputMismatchException e) { System.out.println(\"\\nInvalid Choice.\"); input.next(); } } } public void getSavingDepositInput() { boolean end = false; while (!end) { try { System.out.println(\"\\nCurrent Savings Account Balance: \" + moneyFormat.format(savingBalance)); System.out.print(\"\\nAmount you want to deposit into your Savings Account: \"); double amount = input.nextDouble(); if ((savingBalance + amount) >= 0 && amount >= 0) { calcSavingDeposit(amount); System.out.println(\"\\nCurrent Savings Account Balance: \" + moneyFormat.format(savingBalance)); end = true; } else { System.out.println(\"\\nBalance Cannot Be Negative.\"); } } catch (InputMismatchException e) { System.out.println(\"\\nInvalid Choice.\"); input.next(); } } } public void getTransferInput(String accType) { boolean end = false; while (!end) { try { if (accType.equals(\"Checkings\")) { System.out.println(\"\\nSelect an account you wish to tranfers funds to:\"); System.out.println(\"1. Savings\"); System.out.println(\"2. Exit\"); System.out.print(\"\\nChoice: \"); int choice = input.nextInt(); switch (choice) { case 1: System.out.println(\"\\nCurrent Checkings Account Balance: \" + moneyFormat.format(checkingBalance)); System.out.print(\"\\nAmount you want to deposit into your Savings Account: \"); double amount = input.nextDouble(); if ((savingBalance + amount) >= 0 && (checkingBalance - amount) >= 0 && amount >= 0) { calcCheckTransfer(amount); System.out.println(\"\\nCurrent Savings Account Balance: \" + moneyFormat.format(savingBalance)); System.out.println( \"\\nCurrent Checkings Account Balance: \" + moneyFormat.format(checkingBalance)); end = true; } else { System.out.println(\"\\nBalance Cannot Be Negative.\"); } break; case 2: return; default: System.out.println(\"\\nInvalid Choice.\"); break; } } else if (accType.equals(\"Savings\")) { System.out.println(\"\\nSelect an account you wish to tranfers funds to: \"); System.out.println(\"1. Checkings\"); System.out.println(\"2. Exit\"); System.out.print(\"\\nChoice: \"); int choice = input.nextInt(); switch (choice) { case 1: System.out.println(\"\\nCurrent Savings Account Balance: \" + moneyFormat.format(savingBalance)); System.out.print(\"\\nAmount you want to deposit into your savings account: \"); double amount = input.nextDouble(); if ((checkingBalance + amount) >= 0 && (savingBalance - amount) >= 0 && amount >= 0) { calcSavingTransfer(amount); System.out.println(\"\\nCurrent checkings account balance: \" + moneyFormat.format(checkingBalance)); System.out.println(\"\\nCurrent savings account balance: \" + moneyFormat.format(savingBalance)); end = true; } else { System.out.println(\"\\nBalance Cannot Be Negative.\"); } break; case 2: return; default: System.out.println(\"\\nInvalid Choice.\"); break; } } } catch (InputMismatchException e) { System.out.println(\"\\nInvalid Choice.\"); input.next(); } } } }","dependencies":[]}}
{"project_id":7,"chunk_id":0,"content":{"main_file_path":"ATM-Machine-master\\ATM\\ATM.java","main_file_content":"import java.io.IOException; public class ATM { public static void main(String[] args) throws IOException { OptionMenu optionMenu = new OptionMenu(); introduction(); optionMenu.mainMenu(); } public static void introduction() { System.out.println(\"Welcome to the ATM Project!\"); } }","dependencies":[{"file_path":"ATM-Machine-master\\ATM\\OptionMenu.java","file_content":"import java.io.IOException; import java.text.DecimalFormat; import java.util.HashMap; import java.util.InputMismatchException; import java.util.Iterator; import java.util.Map; import java.util.Scanner; public class OptionMenu { Scanner menuInput = new Scanner(System.in); DecimalFormat moneyFormat = new DecimalFormat(\"'$'###,##0.00\"); HashMap<Integer, Account> data = new HashMap<Integer, Account>(); public void getLogin() throws IOException { boolean end = false; int customerNumber = 0; int pinNumber = 0; while (!end) { try { System.out.print(\"\\nEnter your customer number: \"); customerNumber = menuInput.nextInt(); System.out.print(\"\\nEnter your PIN number: \"); pinNumber = menuInput.nextInt(); Iterator it = data.entrySet().iterator(); while (it.hasNext()) { Map.Entry pair = (Map.Entry) it.next(); Account acc = (Account) pair.getValue(); if (data.containsKey(customerNumber) && pinNumber == acc.getPinNumber()) { getAccountType(acc); end = true; break; } } if (!end) { System.out.println(\"\\nWrong Customer Number or Pin Number\"); } } catch (InputMismatchException e) { System.out.println(\"\\nInvalid Character(s). Only Numbers.\"); } } } public void getAccountType(Account acc) { boolean end = false; while (!end) { try { System.out.println(\"\\nSelect the account you want to access: \"); System.out.println(\" Type 1 - Checkings Account\"); System.out.println(\" Type 2 - Savings Account\"); System.out.println(\" Type 3 - Exit\"); System.out.print(\"\\nChoice: \"); int selection = menuInput.nextInt(); switch (selection) { case 1: getChecking(acc); break; case 2: getSaving(acc); break; case 3: end = true; break; default: System.out.println(\"\\nInvalid Choice.\"); } } catch (InputMismatchException e) { System.out.println(\"\\nInvalid Choice.\"); menuInput.next(); } } } public void getChecking(Account acc) { boolean end = false; while (!end) { try { System.out.println(\"\\nCheckings Account: \"); System.out.println(\" Type 1 - View Balance\"); System.out.println(\" Type 2 - Withdraw Funds\"); System.out.println(\" Type 3 - Deposit Funds\"); System.out.println(\" Type 4 - Transfer Funds\"); System.out.println(\" Type 5 - Exit\"); System.out.print(\"\\nChoice: \"); int selection = menuInput.nextInt(); switch (selection) { case 1: System.out.println(\"\\nCheckings Account Balance: \" + moneyFormat.format(acc.getCheckingBalance())); break; case 2: acc.getCheckingWithdrawInput(); break; case 3: acc.getCheckingDepositInput(); break; case 4: acc.getTransferInput(\"Checkings\"); break; case 5: end = true; break; default: System.out.println(\"\\nInvalid Choice.\"); } } catch (InputMismatchException e) { System.out.println(\"\\nInvalid Choice.\"); menuInput.next(); } } } public void getSaving(Account acc) { boolean end = false; while (!end) { try { System.out.println(\"\\nSavings Account: \"); System.out.println(\" Type 1 - View Balance\"); System.out.println(\" Type 2 - Withdraw Funds\"); System.out.println(\" Type 3 - Deposit Funds\"); System.out.println(\" Type 4 - Transfer Funds\"); System.out.println(\" Type 5 - Exit\"); System.out.print(\"Choice: \"); int selection = menuInput.nextInt(); switch (selection) { case 1: System.out.println(\"\\nSavings Account Balance: \" + moneyFormat.format(acc.getSavingBalance())); break; case 2: acc.getsavingWithdrawInput(); break; case 3: acc.getSavingDepositInput(); break; case 4: acc.getTransferInput(\"Savings\"); break; case 5: end = true; break; default: System.out.println(\"\\nInvalid Choice.\"); } } catch (InputMismatchException e) { System.out.println(\"\\nInvalid Choice.\"); menuInput.next(); } } } public void createAccount() throws IOException { int cst_no = 0; boolean end = false; while (!end) { try { System.out.println(\"\\nEnter your customer number \"); cst_no = menuInput.nextInt(); Iterator it = data.entrySet().iterator(); while (it.hasNext()) { Map.Entry pair = (Map.Entry) it.next(); if (!data.containsKey(cst_no)) { end = true; } } if (!end) { System.out.println(\"\\nThis customer number is already registered\"); } } catch (InputMismatchException e) { System.out.println(\"\\nInvalid Choice.\"); menuInput.next(); } } System.out.println(\"\\nEnter PIN to be registered\"); int pin = menuInput.nextInt(); data.put(cst_no, new Account(cst_no, pin)); System.out.println(\"\\nYour new account has been successfuly registered!\"); System.out.println(\"\\nRedirecting to login.............\"); getLogin(); } public void mainMenu() throws IOException { data.put(952141, new Account(952141, 191904, 1000, 5000)); data.put(123, new Account(123, 123, 20000, 50000)); boolean end = false; while (!end) { try { System.out.println(\"\\n Type 1 - Login\"); System.out.println(\" Type 2 - Create Account\"); System.out.print(\"\\nChoice: \"); int choice = menuInput.nextInt(); switch (choice) { case 1: getLogin(); end = true; break; case 2: createAccount(); end = true; break; default: System.out.println(\"\\nInvalid Choice.\"); } } catch (InputMismatchException e) { System.out.println(\"\\nInvalid Choice.\"); menuInput.next(); } } System.out.println(\"\\nThank You for using this ATM.\\n\"); menuInput.close(); System.exit(0); } }"}]}}
{"project_id":7,"chunk_id":0,"content":{"main_file_path":"ATM-Machine-master\\ATM\\OptionMenu.java","main_file_content":"import java.io.IOException; import java.text.DecimalFormat; import java.util.HashMap; import java.util.InputMismatchException; import java.util.Iterator; import java.util.Map; import java.util.Scanner; public class OptionMenu { Scanner menuInput = new Scanner(System.in); DecimalFormat moneyFormat = new DecimalFormat(\"'$'###,##0.00\"); HashMap<Integer, Account> data = new HashMap<Integer, Account>(); public void getLogin() throws IOException { boolean end = false; int customerNumber = 0; int pinNumber = 0; while (!end) { try { System.out.print(\"\\nEnter your customer number: \"); customerNumber = menuInput.nextInt(); System.out.print(\"\\nEnter your PIN number: \"); pinNumber = menuInput.nextInt(); Iterator it = data.entrySet().iterator(); while (it.hasNext()) { Map.Entry pair = (Map.Entry) it.next(); Account acc = (Account) pair.getValue(); if (data.containsKey(customerNumber) && pinNumber == acc.getPinNumber()) { getAccountType(acc); end = true; break; } } if (!end) { System.out.println(\"\\nWrong Customer Number or Pin Number\"); } } catch (InputMismatchException e) { System.out.println(\"\\nInvalid Character(s). Only Numbers.\"); } } } public void getAccountType(Account acc) { boolean end = false; while (!end) { try { System.out.println(\"\\nSelect the account you want to access: \"); System.out.println(\" Type 1 - Checkings Account\"); System.out.println(\" Type 2 - Savings Account\"); System.out.println(\" Type 3 - Exit\"); System.out.print(\"\\nChoice: \"); int selection = menuInput.nextInt(); switch (selection) { case 1: getChecking(acc); break; case 2: getSaving(acc); break; case 3: end = true; break; default: System.out.println(\"\\nInvalid Choice.\"); } } catch (InputMismatchException e) { System.out.println(\"\\nInvalid Choice.\"); menuInput.next(); } } } public void getChecking(Account acc) { boolean end = false; while (!end) { try { System.out.println(\"\\nCheckings Account: \"); System.out.println(\" Type 1 - View Balance\"); System.out.println(\" Type 2 - Withdraw Funds\"); System.out.println(\" Type 3 - Deposit Funds\"); System.out.println(\" Type 4 - Transfer Funds\"); System.out.println(\" Type 5 - Exit\"); System.out.print(\"\\nChoice: \"); int selection = menuInput.nextInt(); switch (selection) { case 1: System.out.println(\"\\nCheckings Account Balance: \" + moneyFormat.format(acc.getCheckingBalance())); break; case 2: acc.getCheckingWithdrawInput(); break; case 3: acc.getCheckingDepositInput(); break; case 4: acc.getTransferInput(\"Checkings\"); break; case 5: end = true; break; default: System.out.println(\"\\nInvalid Choice.\"); } } catch (InputMismatchException e) { System.out.println(\"\\nInvalid Choice.\"); menuInput.next(); } } } public void getSaving(Account acc) { boolean end = false; while (!end) { try { System.out.println(\"\\nSavings Account: \"); System.out.println(\" Type 1 - View Balance\"); System.out.println(\" Type 2 - Withdraw Funds\"); System.out.println(\" Type 3 - Deposit Funds\"); System.out.println(\" Type 4 - Transfer Funds\"); System.out.println(\" Type 5 - Exit\"); System.out.print(\"Choice: \"); int selection = menuInput.nextInt(); switch (selection) { case 1: System.out.println(\"\\nSavings Account Balance: \" + moneyFormat.format(acc.getSavingBalance())); break; case 2: acc.getsavingWithdrawInput(); break; case 3: acc.getSavingDepositInput(); break; case 4: acc.getTransferInput(\"Savings\"); break; case 5: end = true; break; default: System.out.println(\"\\nInvalid Choice.\"); } } catch (InputMismatchException e) { System.out.println(\"\\nInvalid Choice.\"); menuInput.next(); } } } public void createAccount() throws IOException { int cst_no = 0; boolean end = false; while (!end) { try { System.out.println(\"\\nEnter your customer number \"); cst_no = menuInput.nextInt(); Iterator it = data.entrySet().iterator(); while (it.hasNext()) { Map.Entry pair = (Map.Entry) it.next(); if (!data.containsKey(cst_no)) { end = true; } } if (!end) { System.out.println(\"\\nThis customer number is already registered\"); } } catch (InputMismatchException e) { System.out.println(\"\\nInvalid Choice.\"); menuInput.next(); } } System.out.println(\"\\nEnter PIN to be registered\"); int pin = menuInput.nextInt(); data.put(cst_no, new Account(cst_no, pin)); System.out.println(\"\\nYour new account has been successfuly registered!\"); System.out.println(\"\\nRedirecting to login.............\"); getLogin(); } public void mainMenu() throws IOException { data.put(952141, new Account(952141, 191904, 1000, 5000)); data.put(123, new Account(123, 123, 20000, 50000)); boolean end = false; while (!end) { try { System.out.println(\"\\n Type 1 - Login\"); System.out.println(\" Type 2 - Create Account\"); System.out.print(\"\\nChoice: \"); int choice = menuInput.nextInt(); switch (choice) { case 1: getLogin(); end = true; break; case 2: createAccount(); end = true; break; default: System.out.println(\"\\nInvalid Choice.\"); } } catch (InputMismatchException e) { System.out.println(\"\\nInvalid Choice.\"); menuInput.next(); } } System.out.println(\"\\nThank You for using this ATM.\\n\"); menuInput.close(); System.exit(0); } }","dependencies":[{"file_path":"ATM-Machine-master\\ATM\\Account.java","file_content":"import java.text.DecimalFormat; import java.util.InputMismatchException; import java.util.Scanner; public class Account { private int customerNumber; private int pinNumber; private double checkingBalance = 0; private double savingBalance = 0; Scanner input = new Scanner(System.in); DecimalFormat moneyFormat = new DecimalFormat(\"'$'###,##0.00\"); public Account() { } public Account(int customerNumber, int pinNumber) { this.customerNumber = customerNumber; this.pinNumber = pinNumber; } public Account(int customerNumber, int pinNumber, double checkingBalance, double savingBalance) { this.customerNumber = customerNumber; this.pinNumber = pinNumber; this.checkingBalance = checkingBalance; this.savingBalance = savingBalance; } public int setCustomerNumber(int customerNumber) { this.customerNumber = customerNumber; return customerNumber; } public int getCustomerNumber() { return customerNumber; } public int setPinNumber(int pinNumber) { this.pinNumber = pinNumber; return pinNumber; } public int getPinNumber() { return pinNumber; } public double getCheckingBalance() { return checkingBalance; } public double getSavingBalance() { return savingBalance; } public double calcCheckingWithdraw(double amount) { checkingBalance = (checkingBalance - amount); return checkingBalance; } public double calcSavingWithdraw(double amount) { savingBalance = (savingBalance - amount); return savingBalance; } public double calcCheckingDeposit(double amount) { checkingBalance = (checkingBalance + amount); return checkingBalance; } public double calcSavingDeposit(double amount) { savingBalance = (savingBalance + amount); return savingBalance; } public void calcCheckTransfer(double amount) { checkingBalance = checkingBalance - amount; savingBalance = savingBalance + amount; } public void calcSavingTransfer(double amount) { savingBalance = savingBalance - amount; checkingBalance = checkingBalance + amount; } public void getCheckingWithdrawInput() { boolean end = false; while (!end) { try { System.out.println(\"\\nCurrent Checkings Account Balance: \" + moneyFormat.format(checkingBalance)); System.out.print(\"\\nAmount you want to withdraw from Checkings Account: \"); double amount = input.nextDouble(); if ((checkingBalance - amount) >= 0 && amount >= 0) { calcCheckingWithdraw(amount); System.out.println(\"\\nCurrent Checkings Account Balance: \" + moneyFormat.format(checkingBalance)); end = true; } else { System.out.println(\"\\nBalance Cannot be Negative.\"); } } catch (InputMismatchException e) { System.out.println(\"\\nInvalid Choice.\"); input.next(); } } } public void getsavingWithdrawInput() { boolean end = false; while (!end) { try { System.out.println(\"\\nCurrent Savings Account Balance: \" + moneyFormat.format(savingBalance)); System.out.print(\"\\nAmount you want to withdraw from Savings Account: \"); double amount = input.nextDouble(); if ((savingBalance - amount) >= 0 && amount >= 0) { calcSavingWithdraw(amount); System.out.println(\"\\nCurrent Savings Account Balance: \" + moneyFormat.format(savingBalance)); end = true; } else { System.out.println(\"\\nBalance Cannot Be Negative.\"); } } catch (InputMismatchException e) { System.out.println(\"\\nInvalid Choice.\"); input.next(); } } } public void getCheckingDepositInput() { boolean end = false; while (!end) { try { System.out.println(\"\\nCurrent Checkings Account Balance: \" + moneyFormat.format(checkingBalance)); System.out.print(\"\\nAmount you want to deposit from Checkings Account: \"); double amount = input.nextDouble(); if ((checkingBalance + amount) >= 0 && amount >= 0) { calcCheckingDeposit(amount); System.out.println(\"\\nCurrent Checkings Account Balance: \" + moneyFormat.format(checkingBalance)); end = true; } else { System.out.println(\"\\nBalance Cannot Be Negative.\"); } } catch (InputMismatchException e) { System.out.println(\"\\nInvalid Choice.\"); input.next(); } } } public void getSavingDepositInput() { boolean end = false; while (!end) { try { System.out.println(\"\\nCurrent Savings Account Balance: \" + moneyFormat.format(savingBalance)); System.out.print(\"\\nAmount you want to deposit into your Savings Account: \"); double amount = input.nextDouble(); if ((savingBalance + amount) >= 0 && amount >= 0) { calcSavingDeposit(amount); System.out.println(\"\\nCurrent Savings Account Balance: \" + moneyFormat.format(savingBalance)); end = true; } else { System.out.println(\"\\nBalance Cannot Be Negative.\"); } } catch (InputMismatchException e) { System.out.println(\"\\nInvalid Choice.\"); input.next(); } } } public void getTransferInput(String accType) { boolean end = false; while (!end) { try { if (accType.equals(\"Checkings\")) { System.out.println(\"\\nSelect an account you wish to tranfers funds to:\"); System.out.println(\"1. Savings\"); System.out.println(\"2. Exit\"); System.out.print(\"\\nChoice: \"); int choice = input.nextInt(); switch (choice) { case 1: System.out.println(\"\\nCurrent Checkings Account Balance: \" + moneyFormat.format(checkingBalance)); System.out.print(\"\\nAmount you want to deposit into your Savings Account: \"); double amount = input.nextDouble(); if ((savingBalance + amount) >= 0 && (checkingBalance - amount) >= 0 && amount >= 0) { calcCheckTransfer(amount); System.out.println(\"\\nCurrent Savings Account Balance: \" + moneyFormat.format(savingBalance)); System.out.println( \"\\nCurrent Checkings Account Balance: \" + moneyFormat.format(checkingBalance)); end = true; } else { System.out.println(\"\\nBalance Cannot Be Negative.\"); } break; case 2: return; default: System.out.println(\"\\nInvalid Choice.\"); break; } } else if (accType.equals(\"Savings\")) { System.out.println(\"\\nSelect an account you wish to tranfers funds to: \"); System.out.println(\"1. Checkings\"); System.out.println(\"2. Exit\"); System.out.print(\"\\nChoice: \"); int choice = input.nextInt(); switch (choice) { case 1: System.out.println(\"\\nCurrent Savings Account Balance: \" + moneyFormat.format(savingBalance)); System.out.print(\"\\nAmount you want to deposit into your savings account: \"); double amount = input.nextDouble(); if ((checkingBalance + amount) >= 0 && (savingBalance - amount) >= 0 && amount >= 0) { calcSavingTransfer(amount); System.out.println(\"\\nCurrent checkings account balance: \" + moneyFormat.format(checkingBalance)); System.out.println(\"\\nCurrent savings account balance: \" + moneyFormat.format(savingBalance)); end = true; } else { System.out.println(\"\\nBalance Cannot Be Negative.\"); } break; case 2: return; default: System.out.println(\"\\nInvalid Choice.\"); break; } } } catch (InputMismatchException e) { System.out.println(\"\\nInvalid Choice.\"); input.next(); } } } }"}]}}
{"project_id":8,"chunk_id":0,"content":{"main_file_path":"ATM-Management-System-master\\atm\\src\\atm\\AccountData.java","main_file_content":"package atm; import javax.swing.*; public class AccountData { String pincode; String customername; String accounttype; String accountnumber; String startbalance; public AccountData(String p,String c,String a,String an,String s) { pincode=p; customername=c; accounttype=a; accountnumber=an; startbalance=s; } public void print() { JOptionPane.showMessageDialog(null,\"PINCODE : \"+pincode+\"\\n\\tCustomer Name : \"+customername+\"\\n\\tAccount Type : \"+accounttype+ \"Account Number : \"+accountnumber+\"\\nStarting Balance : \"+startbalance,\"Account Information \",JOptionPane.INFORMATION_MESSAGE); } }","dependencies":[]}}
{"project_id":8,"chunk_id":0,"content":{"main_file_path":"ATM-Management-System-master\\atm\\src\\atm\\Admin.java","main_file_content":"package atm; import java.awt.Color; import java.awt.Container; import java.awt.event.*; import java.util.*; import javax.swing.*; import java.io.*; public class Admin extends JFrame implements ActionListener { JButton addAccount,deleteAccount,editAccount,saveToFile,logOut; JLabel atmLab; Container con; ArrayList customerlist; String s1,s2,s3; Admin() { super(\"ADMIN\"); customerlist=new ArrayList(); con = this.getContentPane(); con.setLayout(null); con.setBackground(Color.black); atmLab = new JLabel(new ImageIcon(\"admin2.png\")); atmLab.setBounds(10,10,500,100); addAccount = new JButton(\"Add Account\"); addAccount.setBounds(20,120,150,30); deleteAccount = new JButton(\"Delete Account\"); deleteAccount.setBounds(350,120,150,30); editAccount = new JButton(\"Edit Account\"); editAccount.setBounds(20,200,150,30); saveToFile = new JButton(\"Save to File\"); saveToFile.setBounds(350,200,150,30); logOut = new JButton(\"Logout\"); logOut.setBounds(190,250,150,30); con.add(atmLab); con.add(addAccount); con.add(deleteAccount); con.add(editAccount); con.add(saveToFile); con.add(logOut); addAccount.addActionListener(this); deleteAccount.addActionListener(this); editAccount.addActionListener(this); saveToFile.addActionListener(this); logOut.addActionListener(this); } public void addPersons() { String pincode=JOptionPane.showInputDialog(null,\"please enter PINCODE NO\",\"PINCODE ENTRY\",JOptionPane.QUESTION_MESSAGE); for(int i=0;i<customerlist.size();i++) { AccountData atm=(AccountData)customerlist.get(i); if(pincode.equals(atm.pincode)) { pincode=JOptionPane.showInputDialog(null,\"SORRY!This pincode is already in used for one customer\\nEnter another pincode\",\"PINCODE ENTRY\",JOptionPane.QUESTION_MESSAGE); } } String customername=JOptionPane.showInputDialog(null,\"Please Enter Customer Name\",\"CUSTOMER NAME\",JOptionPane.QUESTION_MESSAGE); String accounttype=JOptionPane.showInputDialog(null,\"Please Enter Account Type\\n(Saving or Current)\",\"ACCOUNT TYPE ENTRY FOR CUSTOMER\",JOptionPane.QUESTION_MESSAGE); String accountnumber=JOptionPane.showInputDialog(null,\"Enter Account Number\",\"ACCOUNT NUMBER ENTRY OF CUSTOMER\",JOptionPane.QUESTION_MESSAGE); String startbalance=JOptionPane.showInputDialog(null,\"Enter Starting Balance\",\"STARTING BALANCE ENTRY OF CUSTOMER\",JOptionPane.QUESTION_MESSAGE); AccountData atm=new AccountData(pincode,customername,accounttype,accountnumber,startbalance); customerlist.add(atm); } public void savePerson() { try { AccountData atm; String line,line1; FileWriter fr=new FileWriter(\"Customer Record.txt\"); PrintWriter pw=new PrintWriter(fr); FileWriter fr1=new FileWriter(\"Customers Record.txt\"); PrintWriter pw1=new PrintWriter(fr1); pw1.print(\"PINCODE\\t\\t\\tCUSTOMER NAME\\t\\t ACCOUNT TYPE\\t\\tACCOUNT NUMBER\\t\\tSTARTING BALANCE\\n\"); for (int i=0;i<customerlist.size(); i++) { atm=(AccountData)customerlist.get(i); line=atm.pincode+\",\"+atm.customername+\",\"+atm.accounttype+\",\"+atm.accountnumber+\",\"+atm.startbalance+\"\\n\"; line1=atm.pincode+\"\\t\\t\\t\"+atm.customername+\"\\t\\t\\t\"+atm.accounttype+\"\\t\\t\\t\"+atm.accountnumber+\"\\t\\t\\t\"+atm.startbalance; pw1.println(line1); pw.print(line); } pw.flush(); pw1.flush(); pw.close(); pw1.close(); fr.close(); fr1.close(); } catch(IOException ioEX) { System.out.println(ioEX); } } public void delete(String n) { int aa; for(int i=0;i<customerlist.size();i++) { AccountData atm=(AccountData)customerlist.get(i); if(n.equals(atm.pincode)) { aa=JOptionPane.showConfirmDialog(null,\"Do you really want to delete The Following Record\"+\"\\n\\nPINCODE : \"+atm.pincode+\"\\nCustomer name : \"+atm.customername+\"\\nAccount Type : \"+atm.accounttype+ \"\\nAccount Number : \"+atm.accountnumber+\"\\nTotal Balance : \"+atm.startbalance,\"CONFIRMATION ABOUT DELETION\",JOptionPane.YES_NO_OPTION); if(aa==JOptionPane.YES_OPTION) { customerlist.remove(i); } else { break; } } } } public void edit(String n) { String aa; int ch; for(int i=0;i<customerlist.size();i++) { int bb; AccountData atm=(AccountData)customerlist.get(i); if(n.equals(atm.pincode)) { bb=JOptionPane.showConfirmDialog(null,\"Do You Want To Edit The Following Record\"+\"\\n\\nPINCODE : \"+atm.pincode+\"\\nCustomer name : \"+atm.customername+\"\\nAccount Type : \"+atm.accounttype+ \"\\nAccount Number : \"+atm.accountnumber+\"\\nTotal Balance : \"+atm.startbalance,\"CONFIRMATION BOX\",JOptionPane.YES_NO_OPTION); if(bb==JOptionPane.YES_OPTION) { aa=JOptionPane.showInputDialog(null,\"Enter 1 To Edit PinCode\\nEnter 2 To Edit Customer Name \\nEnter 3 To Edit Account Type\\nEnter 4 Account Number\\nEnter 5 To Edit Starting Balance\\n\\n \",\"EDITING MENU\",JOptionPane.INFORMATION_MESSAGE); ch=Integer.parseInt(aa); switch(ch) { case 1: atm.pincode=JOptionPane.showInputDialog(null,\"Enter new PinCode to Replace old one\",\"EDIT PINCODE\",JOptionPane.QUESTION_MESSAGE); savePerson(); break; case 2: atm.customername=JOptionPane.showInputDialog(null,\"Enter New Customer Name to Replace Old One\",\"EDIT CUSTOMER NAME\",JOptionPane.QUESTION_MESSAGE); savePerson(); break; case 3: atm.accounttype=JOptionPane.showInputDialog(null,\"Enter Account Type\\n(Saving or Current)\",\"EDIT ACCOUNT TYPE\",JOptionPane.QUESTION_MESSAGE); savePerson(); break; case 4: atm.accountnumber=JOptionPane.showInputDialog(null,\"Enter Account Number\",\"ACCOUNT NUMBER\",JOptionPane.QUESTION_MESSAGE); savePerson(); break; case 5: atm.startbalance=JOptionPane.showInputDialog(null,\"Enter new Starting Balance to Replace the Old One\",\"EDIT STARTING BALANCE\",JOptionPane.QUESTION_MESSAGE); savePerson(); break; default: JOptionPane.showMessageDialog(null,\"Oh No! You have entered the Wrong Pin Code \\nPlease Enter Valid Pincode\",\"SORRY\",JOptionPane.WARNING_MESSAGE); } } else { break; } } } } public void actionPerformed(ActionEvent e) { JButton b = (JButton)e.getSource(); if(b==addAccount) { addPersons(); } if(b==deleteAccount) { s1=JOptionPane.showInputDialog(null,\"Enter PinCode To Delete Account\",\"DELETION MENU\",JOptionPane.QUESTION_MESSAGE); delete(s1); } if(b==editAccount) { s1=JOptionPane.showInputDialog(null,\"Enter PinCode To Edit Account\",\"EDITING MENU\",JOptionPane.QUESTION_MESSAGE); edit(s1); } if(b==saveToFile) { savePerson(); } if(b == logOut) { int n=JOptionPane.showConfirmDialog(null,\"Are you sure you want to exit?\",\"Exit\",JOptionPane.YES_NO_OPTION); if(n==JOptionPane.YES_OPTION) { JOptionPane.showMessageDialog(null,\"Good Bye\",\"ATM\",JOptionPane.INFORMATION_MESSAGE); System.exit(0); dispose(); } } } }","dependencies":[{"file_path":"ATM-Management-System-master\\atm\\src\\atm\\AccountData.java","file_content":"package atm; import javax.swing.*; public class AccountData { String pincode; String customername; String accounttype; String accountnumber; String startbalance; public AccountData(String p,String c,String a,String an,String s) { pincode=p; customername=c; accounttype=a; accountnumber=an; startbalance=s; } public void print() { JOptionPane.showMessageDialog(null,\"PINCODE : \"+pincode+\"\\n\\tCustomer Name : \"+customername+\"\\n\\tAccount Type : \"+accounttype+ \"Account Number : \"+accountnumber+\"\\nStarting Balance : \"+startbalance,\"Account Information \",JOptionPane.INFORMATION_MESSAGE); } }"}]}}
{"project_id":8,"chunk_id":0,"content":{"main_file_path":"ATM-Management-System-master\\atm\\src\\atm\\AfterLogin.java","main_file_content":"package atm; import java.awt.*; import java.awt.event.*; import java.util.*; import javax.swing.*; import java.io.*; public class AfterLogin extends JFrame implements ActionListener { JButton equiryBtn,withdrawBtn,logoutBtn,transferBtn; JLabel atmLab; Container con; ArrayList customerlist; Admin adm = new Admin(); String s1; AfterLogin() { super(\"Transaction\"); customerlist=new ArrayList(); con = this.getContentPane(); con.setLayout(null); con.setBackground(Color.BLACK); atmLab = new JLabel(new ImageIcon(\"atm.png\")); atmLab.setBounds(60,10,300,100); equiryBtn = new JButton(\"Balance Enquiry\"); equiryBtn.setBounds(10,130,150,40); transferBtn = new JButton(\"Transfer Money\"); transferBtn.setBounds(260,130,150,40); withdrawBtn = new JButton(\"WithDraw Money\"); withdrawBtn.setBounds(260,230,150,40); logoutBtn = new JButton(\"Logout\"); logoutBtn.setBounds(10,230,150,40); con.add(atmLab); con.add(equiryBtn); con.add(withdrawBtn); con.add(transferBtn); con.add(logoutBtn); equiryBtn.addActionListener(this); transferBtn.addActionListener(this); withdrawBtn.addActionListener(this); logoutBtn.addActionListener(this); loadPersons(); } public void loadPersons() { String ss[]=null; String pincode,customername,accounttype,accountnumber,startbalance; try { FileReader fr=new FileReader(\"Customer Record.txt\"); BufferedReader br=new BufferedReader(fr); String line=br.readLine(); while(line != null) { ss=line.split(\",\"); pincode=ss[0]; customername=ss[1]; accounttype=ss[2]; accountnumber=ss[3]; startbalance=ss[4]; AccountData atm=new AccountData(pincode,customername,accounttype,accountnumber,startbalance); customerlist.add(atm); line=br.readLine(); } br.close(); fr.close(); } catch(IOException ioEX) { System.out.println(ioEX); } } public void inquiry(String n) { for(int i=0;i<customerlist.size();i++) { AccountData atm=(AccountData)customerlist.get(i); if(n.equals(atm.pincode)) { JOptionPane.showMessageDialog(null,\"Welcome to your atm data Mr .\"+atm.customername+\"\\nYour Total Cash Is : \"+atm.startbalance,\"WELCOME WELCOME MR \"+atm.customername,JOptionPane.INFORMATION_MESSAGE); } } } public void transfer(String k) { String a,b,c; int d,e,f; for(int i=0;i<customerlist.size();i++) { AccountData atm=(AccountData)customerlist.get(i); if(k.equals(atm.pincode)); { a=atm.startbalance; d=Integer.parseInt(a); c=JOptionPane.showInputDialog(null,\"Enter The Account Number To whom you Transfer Amount\",\"MONEY TRANSACTION MENU\",JOptionPane.QUESTION_MESSAGE); b=JOptionPane.showInputDialog(null,\"Enter The Amount To Transfer\",\"MONEYTRANSACTION MENU\",JOptionPane.QUESTION_MESSAGE); e=Integer.parseInt(b); f=d-e; while(f < 0) { a=atm.startbalance; d=Integer.parseInt(a); b=JOptionPane.showInputDialog(null,\"Invalid Amount\\nPlease Enter The Suffecient Amount To Transfer\",\"MONEYTRANSACTION MENU\",JOptionPane.WARNING_MESSAGE); e=Integer.parseInt(b); f=d-e; } String u=String.valueOf(f); atm.startbalance=u; JOptionPane.showMessageDialog(null,\"Transaction is done succesfully\\n\\nAmount of \"+b+\"is transferd To \"+c+\"\\n\\nYour Total Cash Is : \"+atm.startbalance,\"MONEY TRANSACTION PROCESSED\",JOptionPane.INFORMATION_MESSAGE); Admin as = new Admin(); as.savePerson(); } } } public void withdraw(String o) { String a,b,c; int d,e,f; for(int i=0;i<customerlist.size();i++) { AccountData atm=(AccountData)customerlist.get(i); if(o.equals(atm.pincode)) { a=atm.startbalance; d=Integer.parseInt(a); b=JOptionPane.showInputDialog(null,\"Enter The Amout To Withdarw\",\"WITHDARW MENU\",JOptionPane.QUESTION_MESSAGE); e=Integer.parseInt(b); f=d-e; while(f <0) { a=atm.startbalance; d=Integer.parseInt(a); b=JOptionPane.showInputDialog(null,\"Invalid Amount\\nPlease Enter The Suffecient Amount To WithDraw\",\"WITHDRAW MENU\",JOptionPane.WARNING_MESSAGE); e=Integer.parseInt(b); f=d-e; } c=String.valueOf(f); atm.startbalance=c; JOptionPane.showMessageDialog(null,\"Withdarw proccesed\\nYou have Withdarwed Amount of\"+b+\"\\nYour Total Cash Is now: \"+atm.startbalance,\"Information\",JOptionPane.INFORMATION_MESSAGE); Admin ad = new Admin(); ad.savePerson(); } } } public void actionPerformed(ActionEvent e) { JButton b = (JButton)e.getSource(); if(b == equiryBtn) { s1= JOptionPane.showInputDialog(null,\"Enter PinCode To Check Account Balance \",\"Check Balance\",JOptionPane.QUESTION_MESSAGE); for(int i=0;i<customerlist.size();i++) { AccountData atm=(AccountData)customerlist.get(i); if(!s1.equals(atm.pincode)) { JOptionPane.showMessageDialog(null,\"You have entered Wrong Pincode \\nPlease Enter Valid Pincode!!!!\",\"Warning\",JOptionPane.WARNING_MESSAGE); } else if(s1.equals(atm.pincode)) { inquiry(s1); } } } if(b == withdrawBtn) { s1=JOptionPane.showInputDialog(null,\"Enter PinCode To withDraw Balance \",\"Withdraw Balance\",JOptionPane.QUESTION_MESSAGE); for(int i=0;i<customerlist.size();i++) { AccountData atm=(AccountData)customerlist.get(i); if(s1.equals(atm.pincode)) { withdraw(s1); } else if(!s1.equals(atm.pincode)) { JOptionPane.showMessageDialog(null,\"You have entered Wrong Pincode \\nPlease Enter Valid Pincode!!!!\",\"Warning\",JOptionPane.WARNING_MESSAGE); } } } if(b == transferBtn) { s1=JOptionPane.showInputDialog(null,\"Enter PinCode To Transfer Balance \",\"Share balance\",JOptionPane.QUESTION_MESSAGE); for(int i=0;i<customerlist.size();i++) { AccountData atm=(AccountData)customerlist.get(i); if(!s1.equals(atm.pincode)) { JOptionPane.showMessageDialog(null,\"You have entered Wrong Pincode \\nPlease Enter Valid Pincode!!!!\",\"Warning\",JOptionPane.WARNING_MESSAGE); } else if(s1.equals(atm.pincode)) { transfer(s1); } } } if(b == logoutBtn) { int n=JOptionPane.showConfirmDialog(null,\"Are you sure you want to exit?\",\"Exit\",JOptionPane.YES_NO_OPTION); if(n==JOptionPane.YES_OPTION) { JOptionPane.showMessageDialog(null,\"Good Bye\",\"ATM\",JOptionPane.INFORMATION_MESSAGE); System.exit(0); } } } }","dependencies":[{"file_path":"ATM-Management-System-master\\atm\\src\\atm\\AccountData.java","file_content":"package atm; import javax.swing.*; public class AccountData { String pincode; String customername; String accounttype; String accountnumber; String startbalance; public AccountData(String p,String c,String a,String an,String s) { pincode=p; customername=c; accounttype=a; accountnumber=an; startbalance=s; } public void print() { JOptionPane.showMessageDialog(null,\"PINCODE : \"+pincode+\"\\n\\tCustomer Name : \"+customername+\"\\n\\tAccount Type : \"+accounttype+ \"Account Number : \"+accountnumber+\"\\nStarting Balance : \"+startbalance,\"Account Information \",JOptionPane.INFORMATION_MESSAGE); } }"},{"file_path":"ATM-Management-System-master\\atm\\src\\atm\\Admin.java","file_content":"package atm; import java.awt.Color; import java.awt.Container; import java.awt.event.*; import java.util.*; import javax.swing.*; import java.io.*; public class Admin extends JFrame implements ActionListener { JButton addAccount,deleteAccount,editAccount,saveToFile,logOut; JLabel atmLab; Container con; ArrayList customerlist; String s1,s2,s3; Admin() { super(\"ADMIN\"); customerlist=new ArrayList(); con = this.getContentPane(); con.setLayout(null); con.setBackground(Color.black); atmLab = new JLabel(new ImageIcon(\"admin2.png\")); atmLab.setBounds(10,10,500,100); addAccount = new JButton(\"Add Account\"); addAccount.setBounds(20,120,150,30); deleteAccount = new JButton(\"Delete Account\"); deleteAccount.setBounds(350,120,150,30); editAccount = new JButton(\"Edit Account\"); editAccount.setBounds(20,200,150,30); saveToFile = new JButton(\"Save to File\"); saveToFile.setBounds(350,200,150,30); logOut = new JButton(\"Logout\"); logOut.setBounds(190,250,150,30); con.add(atmLab); con.add(addAccount); con.add(deleteAccount); con.add(editAccount); con.add(saveToFile); con.add(logOut); addAccount.addActionListener(this); deleteAccount.addActionListener(this); editAccount.addActionListener(this); saveToFile.addActionListener(this); logOut.addActionListener(this); } public void addPersons() { String pincode=JOptionPane.showInputDialog(null,\"please enter PINCODE NO\",\"PINCODE ENTRY\",JOptionPane.QUESTION_MESSAGE); for(int i=0;i<customerlist.size();i++) { AccountData atm=(AccountData)customerlist.get(i); if(pincode.equals(atm.pincode)) { pincode=JOptionPane.showInputDialog(null,\"SORRY!This pincode is already in used for one customer\\nEnter another pincode\",\"PINCODE ENTRY\",JOptionPane.QUESTION_MESSAGE); } } String customername=JOptionPane.showInputDialog(null,\"Please Enter Customer Name\",\"CUSTOMER NAME\",JOptionPane.QUESTION_MESSAGE); String accounttype=JOptionPane.showInputDialog(null,\"Please Enter Account Type\\n(Saving or Current)\",\"ACCOUNT TYPE ENTRY FOR CUSTOMER\",JOptionPane.QUESTION_MESSAGE); String accountnumber=JOptionPane.showInputDialog(null,\"Enter Account Number\",\"ACCOUNT NUMBER ENTRY OF CUSTOMER\",JOptionPane.QUESTION_MESSAGE); String startbalance=JOptionPane.showInputDialog(null,\"Enter Starting Balance\",\"STARTING BALANCE ENTRY OF CUSTOMER\",JOptionPane.QUESTION_MESSAGE); AccountData atm=new AccountData(pincode,customername,accounttype,accountnumber,startbalance); customerlist.add(atm); } public void savePerson() { try { AccountData atm; String line,line1; FileWriter fr=new FileWriter(\"Customer Record.txt\"); PrintWriter pw=new PrintWriter(fr); FileWriter fr1=new FileWriter(\"Customers Record.txt\"); PrintWriter pw1=new PrintWriter(fr1); pw1.print(\"PINCODE\\t\\t\\tCUSTOMER NAME\\t\\t ACCOUNT TYPE\\t\\tACCOUNT NUMBER\\t\\tSTARTING BALANCE\\n\"); for (int i=0;i<customerlist.size(); i++) { atm=(AccountData)customerlist.get(i); line=atm.pincode+\",\"+atm.customername+\",\"+atm.accounttype+\",\"+atm.accountnumber+\",\"+atm.startbalance+\"\\n\"; line1=atm.pincode+\"\\t\\t\\t\"+atm.customername+\"\\t\\t\\t\"+atm.accounttype+\"\\t\\t\\t\"+atm.accountnumber+\"\\t\\t\\t\"+atm.startbalance; pw1.println(line1); pw.print(line); } pw.flush(); pw1.flush(); pw.close(); pw1.close(); fr.close(); fr1.close(); } catch(IOException ioEX) { System.out.println(ioEX); } } public void delete(String n) { int aa; for(int i=0;i<customerlist.size();i++) { AccountData atm=(AccountData)customerlist.get(i); if(n.equals(atm.pincode)) { aa=JOptionPane.showConfirmDialog(null,\"Do you really want to delete The Following Record\"+\"\\n\\nPINCODE : \"+atm.pincode+\"\\nCustomer name : \"+atm.customername+\"\\nAccount Type : \"+atm.accounttype+ \"\\nAccount Number : \"+atm.accountnumber+\"\\nTotal Balance : \"+atm.startbalance,\"CONFIRMATION ABOUT DELETION\",JOptionPane.YES_NO_OPTION); if(aa==JOptionPane.YES_OPTION) { customerlist.remove(i); } else { break; } } } } public void edit(String n) { String aa; int ch; for(int i=0;i<customerlist.size();i++) { int bb; AccountData atm=(AccountData)customerlist.get(i); if(n.equals(atm.pincode)) { bb=JOptionPane.showConfirmDialog(null,\"Do You Want To Edit The Following Record\"+\"\\n\\nPINCODE : \"+atm.pincode+\"\\nCustomer name : \"+atm.customername+\"\\nAccount Type : \"+atm.accounttype+ \"\\nAccount Number : \"+atm.accountnumber+\"\\nTotal Balance : \"+atm.startbalance,\"CONFIRMATION BOX\",JOptionPane.YES_NO_OPTION); if(bb==JOptionPane.YES_OPTION) { aa=JOptionPane.showInputDialog(null,\"Enter 1 To Edit PinCode\\nEnter 2 To Edit Customer Name \\nEnter 3 To Edit Account Type\\nEnter 4 Account Number\\nEnter 5 To Edit Starting Balance\\n\\n \",\"EDITING MENU\",JOptionPane.INFORMATION_MESSAGE); ch=Integer.parseInt(aa); switch(ch) { case 1: atm.pincode=JOptionPane.showInputDialog(null,\"Enter new PinCode to Replace old one\",\"EDIT PINCODE\",JOptionPane.QUESTION_MESSAGE); savePerson(); break; case 2: atm.customername=JOptionPane.showInputDialog(null,\"Enter New Customer Name to Replace Old One\",\"EDIT CUSTOMER NAME\",JOptionPane.QUESTION_MESSAGE); savePerson(); break; case 3: atm.accounttype=JOptionPane.showInputDialog(null,\"Enter Account Type\\n(Saving or Current)\",\"EDIT ACCOUNT TYPE\",JOptionPane.QUESTION_MESSAGE); savePerson(); break; case 4: atm.accountnumber=JOptionPane.showInputDialog(null,\"Enter Account Number\",\"ACCOUNT NUMBER\",JOptionPane.QUESTION_MESSAGE); savePerson(); break; case 5: atm.startbalance=JOptionPane.showInputDialog(null,\"Enter new Starting Balance to Replace the Old One\",\"EDIT STARTING BALANCE\",JOptionPane.QUESTION_MESSAGE); savePerson(); break; default: JOptionPane.showMessageDialog(null,\"Oh No! You have entered the Wrong Pin Code \\nPlease Enter Valid Pincode\",\"SORRY\",JOptionPane.WARNING_MESSAGE); } } else { break; } } } } public void actionPerformed(ActionEvent e) { JButton b = (JButton)e.getSource(); if(b==addAccount) { addPersons(); } if(b==deleteAccount) { s1=JOptionPane.showInputDialog(null,\"Enter PinCode To Delete Account\",\"DELETION MENU\",JOptionPane.QUESTION_MESSAGE); delete(s1); } if(b==editAccount) { s1=JOptionPane.showInputDialog(null,\"Enter PinCode To Edit Account\",\"EDITING MENU\",JOptionPane.QUESTION_MESSAGE); edit(s1); } if(b==saveToFile) { savePerson(); } if(b == logOut) { int n=JOptionPane.showConfirmDialog(null,\"Are you sure you want to exit?\",\"Exit\",JOptionPane.YES_NO_OPTION); if(n==JOptionPane.YES_OPTION) { JOptionPane.showMessageDialog(null,\"Good Bye\",\"ATM\",JOptionPane.INFORMATION_MESSAGE); System.exit(0); dispose(); } } } }"}]}}
{"project_id":8,"chunk_id":0,"content":{"main_file_path":"ATM-Management-System-master\\atm\\src\\atm\\AtmMainDriver.java","main_file_content":"package atm; import java.awt.Color; import java.awt.event.*; import java.util.*; import javax.swing.*; public class AtmMainDriver { public static void main(String[] args) { LoginForm f = new LoginForm (); f.setVisible(true); f.setSize(540,350); f.setLocation(450,220); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); } }","dependencies":[{"file_path":"ATM-Management-System-master\\atm\\src\\atm\\LoginForm.java","file_content":"package atm; import java.awt.event.*; import javax.swing.*; import java.io.*; import java.awt.*; public class LoginForm extends JFrame implements ActionListener { JPanel panel; JLabel lab1,lab2,picLab,userLab,adminLab; JCheckBox box; JButton btn1,btn2; JTextField Tfield; JPasswordField Pfield; String s1,s2,s3,s4; String password; char pa[]; ImageIcon img; JRadioButton user,admin; LoginForm() { super(\"Login Forum\"); this.setLocationRelativeTo(null); panel = new JPanel(); lab1 = new JLabel(\"User Name :\"); lab2 = new JLabel(\"Password :\"); userLab = new JLabel(\"User\"); adminLab = new JLabel(\"Admin\"); box = new JCheckBox(); btn1 = new JButton(\"Login\"); btn2 = new JButton(\"Reset\"); img = new ImageIcon(\"ims.jpg\"); picLab = new JLabel(img); user = new JRadioButton(); admin = new JRadioButton(); Tfield = new JTextField(); Tfield.setColumns(5); Pfield = new JPasswordField(); Pfield.setColumns(6); this.add(panel); panel.add(picLab); panel.add(lab1); panel.add(Tfield); panel.add(lab2); panel.add(Pfield); panel.add(box); panel.add(btn1); panel.add(btn2); panel.add(user); panel.add(userLab); panel.add(admin); panel.add(adminLab); ButtonGroup group = new ButtonGroup(); group.add(user); group.add(admin); this.setVisible(true); this.setSize(590,300); this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); this.setResizable(false); panel.setBorder(BorderFactory.createStrokeBorder(new BasicStroke(5.0f))); panel.setBackground(Color.white); panel.setForeground(Color.gray); box.addActionListener(this); btn1.addActionListener(this); btn2.addActionListener(this); } public void actionPerformed(ActionEvent ae) { if(ae.getSource()==btn1) { FileReader fr = null; BufferedReader br = null; try { fr = new FileReader(\"loginInfo.txt\"); br = new BufferedReader(fr); s1 = br.readLine(); s4 = br.readLine(); char [] p = Pfield.getPassword(); password = new String(p); String text = Tfield.getText(); if(text.isEmpty() && password.isEmpty()) { JOptionPane.showMessageDialog(null,\"ENTER YOUR USER NAME and Password\"); } else if(text.isEmpty() ) { JOptionPane.showMessageDialog(null,\"ENTER YOUR USER NAME \"); } else if( password.isEmpty()) { JOptionPane.showMessageDialog(null,\"ENTER YOUR Password\"); } else if(!Tfield.getText().equals(s1) && !password.equals(s4)) { JOptionPane.showMessageDialog(null,\"WRONG USERNAME AND PASSWORD\"); } else if (!user.isSelected() && !admin.isSelected()) { JOptionPane.showMessageDialog(null,\"Please Select on Option admin or user\"); } else if (Tfield.getText().equals(s1) && password.equals(s4) ) { JOptionPane.showMessageDialog(null, \"Login Successfully\"); if(user.isSelected()) { AfterLogin t = new AfterLogin (); t.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); t.setSize(460,400); t.setVisible(true); t.setLocationRelativeTo(null); } else if(admin.isSelected()) { Admin t2 = new Admin (); t2.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE); t2.setSize(540,350); t2.setVisible(true); t2.setLocationRelativeTo(null); } } fr.close(); br.close(); } catch(IOException i) { i.printStackTrace(); } } else if(ae.getSource()==btn2) { Tfield.setText(\"\"); Pfield.setText(\"\"); } if (box.isSelected()) { Pfield.setEchoChar((char) 0); } else { Pfield.setEchoChar('*'); } } public static void main(String args[]) { new LoginForm().setVisible(true); } }"}]}}
{"project_id":8,"chunk_id":0,"content":{"main_file_path":"ATM-Management-System-master\\atm\\src\\atm\\LoginForm.java","main_file_content":"package atm; import java.awt.event.*; import javax.swing.*; import java.io.*; import java.awt.*; public class LoginForm extends JFrame implements ActionListener { JPanel panel; JLabel lab1,lab2,picLab,userLab,adminLab; JCheckBox box; JButton btn1,btn2; JTextField Tfield; JPasswordField Pfield; String s1,s2,s3,s4; String password; char pa[]; ImageIcon img; JRadioButton user,admin; LoginForm() { super(\"Login Forum\"); this.setLocationRelativeTo(null); panel = new JPanel(); lab1 = new JLabel(\"User Name :\"); lab2 = new JLabel(\"Password :\"); userLab = new JLabel(\"User\"); adminLab = new JLabel(\"Admin\"); box = new JCheckBox(); btn1 = new JButton(\"Login\"); btn2 = new JButton(\"Reset\"); img = new ImageIcon(\"ims.jpg\"); picLab = new JLabel(img); user = new JRadioButton(); admin = new JRadioButton(); Tfield = new JTextField(); Tfield.setColumns(5); Pfield = new JPasswordField(); Pfield.setColumns(6); this.add(panel); panel.add(picLab); panel.add(lab1); panel.add(Tfield); panel.add(lab2); panel.add(Pfield); panel.add(box); panel.add(btn1); panel.add(btn2); panel.add(user); panel.add(userLab); panel.add(admin); panel.add(adminLab); ButtonGroup group = new ButtonGroup(); group.add(user); group.add(admin); this.setVisible(true); this.setSize(590,300); this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); this.setResizable(false); panel.setBorder(BorderFactory.createStrokeBorder(new BasicStroke(5.0f))); panel.setBackground(Color.white); panel.setForeground(Color.gray); box.addActionListener(this); btn1.addActionListener(this); btn2.addActionListener(this); } public void actionPerformed(ActionEvent ae) { if(ae.getSource()==btn1) { FileReader fr = null; BufferedReader br = null; try { fr = new FileReader(\"loginInfo.txt\"); br = new BufferedReader(fr); s1 = br.readLine(); s4 = br.readLine(); char [] p = Pfield.getPassword(); password = new String(p); String text = Tfield.getText(); if(text.isEmpty() && password.isEmpty()) { JOptionPane.showMessageDialog(null,\"ENTER YOUR USER NAME and Password\"); } else if(text.isEmpty() ) { JOptionPane.showMessageDialog(null,\"ENTER YOUR USER NAME \"); } else if( password.isEmpty()) { JOptionPane.showMessageDialog(null,\"ENTER YOUR Password\"); } else if(!Tfield.getText().equals(s1) && !password.equals(s4)) { JOptionPane.showMessageDialog(null,\"WRONG USERNAME AND PASSWORD\"); } else if (!user.isSelected() && !admin.isSelected()) { JOptionPane.showMessageDialog(null,\"Please Select on Option admin or user\"); } else if (Tfield.getText().equals(s1) && password.equals(s4) ) { JOptionPane.showMessageDialog(null, \"Login Successfully\"); if(user.isSelected()) { AfterLogin t = new AfterLogin (); t.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); t.setSize(460,400); t.setVisible(true); t.setLocationRelativeTo(null); } else if(admin.isSelected()) { Admin t2 = new Admin (); t2.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE); t2.setSize(540,350); t2.setVisible(true); t2.setLocationRelativeTo(null); } } fr.close(); br.close(); } catch(IOException i) { i.printStackTrace(); } } else if(ae.getSource()==btn2) { Tfield.setText(\"\"); Pfield.setText(\"\"); } if (box.isSelected()) { Pfield.setEchoChar((char) 0); } else { Pfield.setEchoChar('*'); } } public static void main(String args[]) { new LoginForm().setVisible(true); } }","dependencies":[{"file_path":"ATM-Management-System-master\\atm\\src\\atm\\Admin.java","file_content":"package atm; import java.awt.Color; import java.awt.Container; import java.awt.event.*; import java.util.*; import javax.swing.*; import java.io.*; public class Admin extends JFrame implements ActionListener { JButton addAccount,deleteAccount,editAccount,saveToFile,logOut; JLabel atmLab; Container con; ArrayList customerlist; String s1,s2,s3; Admin() { super(\"ADMIN\"); customerlist=new ArrayList(); con = this.getContentPane(); con.setLayout(null); con.setBackground(Color.black); atmLab = new JLabel(new ImageIcon(\"admin2.png\")); atmLab.setBounds(10,10,500,100); addAccount = new JButton(\"Add Account\"); addAccount.setBounds(20,120,150,30); deleteAccount = new JButton(\"Delete Account\"); deleteAccount.setBounds(350,120,150,30); editAccount = new JButton(\"Edit Account\"); editAccount.setBounds(20,200,150,30); saveToFile = new JButton(\"Save to File\"); saveToFile.setBounds(350,200,150,30); logOut = new JButton(\"Logout\"); logOut.setBounds(190,250,150,30); con.add(atmLab); con.add(addAccount); con.add(deleteAccount); con.add(editAccount); con.add(saveToFile); con.add(logOut); addAccount.addActionListener(this); deleteAccount.addActionListener(this); editAccount.addActionListener(this); saveToFile.addActionListener(this); logOut.addActionListener(this); } public void addPersons() { String pincode=JOptionPane.showInputDialog(null,\"please enter PINCODE NO\",\"PINCODE ENTRY\",JOptionPane.QUESTION_MESSAGE); for(int i=0;i<customerlist.size();i++) { AccountData atm=(AccountData)customerlist.get(i); if(pincode.equals(atm.pincode)) { pincode=JOptionPane.showInputDialog(null,\"SORRY!This pincode is already in used for one customer\\nEnter another pincode\",\"PINCODE ENTRY\",JOptionPane.QUESTION_MESSAGE); } } String customername=JOptionPane.showInputDialog(null,\"Please Enter Customer Name\",\"CUSTOMER NAME\",JOptionPane.QUESTION_MESSAGE); String accounttype=JOptionPane.showInputDialog(null,\"Please Enter Account Type\\n(Saving or Current)\",\"ACCOUNT TYPE ENTRY FOR CUSTOMER\",JOptionPane.QUESTION_MESSAGE); String accountnumber=JOptionPane.showInputDialog(null,\"Enter Account Number\",\"ACCOUNT NUMBER ENTRY OF CUSTOMER\",JOptionPane.QUESTION_MESSAGE); String startbalance=JOptionPane.showInputDialog(null,\"Enter Starting Balance\",\"STARTING BALANCE ENTRY OF CUSTOMER\",JOptionPane.QUESTION_MESSAGE); AccountData atm=new AccountData(pincode,customername,accounttype,accountnumber,startbalance); customerlist.add(atm); } public void savePerson() { try { AccountData atm; String line,line1; FileWriter fr=new FileWriter(\"Customer Record.txt\"); PrintWriter pw=new PrintWriter(fr); FileWriter fr1=new FileWriter(\"Customers Record.txt\"); PrintWriter pw1=new PrintWriter(fr1); pw1.print(\"PINCODE\\t\\t\\tCUSTOMER NAME\\t\\t ACCOUNT TYPE\\t\\tACCOUNT NUMBER\\t\\tSTARTING BALANCE\\n\"); for (int i=0;i<customerlist.size(); i++) { atm=(AccountData)customerlist.get(i); line=atm.pincode+\",\"+atm.customername+\",\"+atm.accounttype+\",\"+atm.accountnumber+\",\"+atm.startbalance+\"\\n\"; line1=atm.pincode+\"\\t\\t\\t\"+atm.customername+\"\\t\\t\\t\"+atm.accounttype+\"\\t\\t\\t\"+atm.accountnumber+\"\\t\\t\\t\"+atm.startbalance; pw1.println(line1); pw.print(line); } pw.flush(); pw1.flush(); pw.close(); pw1.close(); fr.close(); fr1.close(); } catch(IOException ioEX) { System.out.println(ioEX); } } public void delete(String n) { int aa; for(int i=0;i<customerlist.size();i++) { AccountData atm=(AccountData)customerlist.get(i); if(n.equals(atm.pincode)) { aa=JOptionPane.showConfirmDialog(null,\"Do you really want to delete The Following Record\"+\"\\n\\nPINCODE : \"+atm.pincode+\"\\nCustomer name : \"+atm.customername+\"\\nAccount Type : \"+atm.accounttype+ \"\\nAccount Number : \"+atm.accountnumber+\"\\nTotal Balance : \"+atm.startbalance,\"CONFIRMATION ABOUT DELETION\",JOptionPane.YES_NO_OPTION); if(aa==JOptionPane.YES_OPTION) { customerlist.remove(i); } else { break; } } } } public void edit(String n) { String aa; int ch; for(int i=0;i<customerlist.size();i++) { int bb; AccountData atm=(AccountData)customerlist.get(i); if(n.equals(atm.pincode)) { bb=JOptionPane.showConfirmDialog(null,\"Do You Want To Edit The Following Record\"+\"\\n\\nPINCODE : \"+atm.pincode+\"\\nCustomer name : \"+atm.customername+\"\\nAccount Type : \"+atm.accounttype+ \"\\nAccount Number : \"+atm.accountnumber+\"\\nTotal Balance : \"+atm.startbalance,\"CONFIRMATION BOX\",JOptionPane.YES_NO_OPTION); if(bb==JOptionPane.YES_OPTION) { aa=JOptionPane.showInputDialog(null,\"Enter 1 To Edit PinCode\\nEnter 2 To Edit Customer Name \\nEnter 3 To Edit Account Type\\nEnter 4 Account Number\\nEnter 5 To Edit Starting Balance\\n\\n \",\"EDITING MENU\",JOptionPane.INFORMATION_MESSAGE); ch=Integer.parseInt(aa); switch(ch) { case 1: atm.pincode=JOptionPane.showInputDialog(null,\"Enter new PinCode to Replace old one\",\"EDIT PINCODE\",JOptionPane.QUESTION_MESSAGE); savePerson(); break; case 2: atm.customername=JOptionPane.showInputDialog(null,\"Enter New Customer Name to Replace Old One\",\"EDIT CUSTOMER NAME\",JOptionPane.QUESTION_MESSAGE); savePerson(); break; case 3: atm.accounttype=JOptionPane.showInputDialog(null,\"Enter Account Type\\n(Saving or Current)\",\"EDIT ACCOUNT TYPE\",JOptionPane.QUESTION_MESSAGE); savePerson(); break; case 4: atm.accountnumber=JOptionPane.showInputDialog(null,\"Enter Account Number\",\"ACCOUNT NUMBER\",JOptionPane.QUESTION_MESSAGE); savePerson(); break; case 5: atm.startbalance=JOptionPane.showInputDialog(null,\"Enter new Starting Balance to Replace the Old One\",\"EDIT STARTING BALANCE\",JOptionPane.QUESTION_MESSAGE); savePerson(); break; default: JOptionPane.showMessageDialog(null,\"Oh No! You have entered the Wrong Pin Code \\nPlease Enter Valid Pincode\",\"SORRY\",JOptionPane.WARNING_MESSAGE); } } else { break; } } } } public void actionPerformed(ActionEvent e) { JButton b = (JButton)e.getSource(); if(b==addAccount) { addPersons(); } if(b==deleteAccount) { s1=JOptionPane.showInputDialog(null,\"Enter PinCode To Delete Account\",\"DELETION MENU\",JOptionPane.QUESTION_MESSAGE); delete(s1); } if(b==editAccount) { s1=JOptionPane.showInputDialog(null,\"Enter PinCode To Edit Account\",\"EDITING MENU\",JOptionPane.QUESTION_MESSAGE); edit(s1); } if(b==saveToFile) { savePerson(); } if(b == logOut) { int n=JOptionPane.showConfirmDialog(null,\"Are you sure you want to exit?\",\"Exit\",JOptionPane.YES_NO_OPTION); if(n==JOptionPane.YES_OPTION) { JOptionPane.showMessageDialog(null,\"Good Bye\",\"ATM\",JOptionPane.INFORMATION_MESSAGE); System.exit(0); dispose(); } } } }"},{"file_path":"ATM-Management-System-master\\atm\\src\\atm\\AfterLogin.java","file_content":"package atm; import java.awt.*; import java.awt.event.*; import java.util.*; import javax.swing.*; import java.io.*; public class AfterLogin extends JFrame implements ActionListener { JButton equiryBtn,withdrawBtn,logoutBtn,transferBtn; JLabel atmLab; Container con; ArrayList customerlist; Admin adm = new Admin(); String s1; AfterLogin() { super(\"Transaction\"); customerlist=new ArrayList(); con = this.getContentPane(); con.setLayout(null); con.setBackground(Color.BLACK); atmLab = new JLabel(new ImageIcon(\"atm.png\")); atmLab.setBounds(60,10,300,100); equiryBtn = new JButton(\"Balance Enquiry\"); equiryBtn.setBounds(10,130,150,40); transferBtn = new JButton(\"Transfer Money\"); transferBtn.setBounds(260,130,150,40); withdrawBtn = new JButton(\"WithDraw Money\"); withdrawBtn.setBounds(260,230,150,40); logoutBtn = new JButton(\"Logout\"); logoutBtn.setBounds(10,230,150,40); con.add(atmLab); con.add(equiryBtn); con.add(withdrawBtn); con.add(transferBtn); con.add(logoutBtn); equiryBtn.addActionListener(this); transferBtn.addActionListener(this); withdrawBtn.addActionListener(this); logoutBtn.addActionListener(this); loadPersons(); } public void loadPersons() { String ss[]=null; String pincode,customername,accounttype,accountnumber,startbalance; try { FileReader fr=new FileReader(\"Customer Record.txt\"); BufferedReader br=new BufferedReader(fr); String line=br.readLine(); while(line != null) { ss=line.split(\",\"); pincode=ss[0]; customername=ss[1]; accounttype=ss[2]; accountnumber=ss[3]; startbalance=ss[4]; AccountData atm=new AccountData(pincode,customername,accounttype,accountnumber,startbalance); customerlist.add(atm); line=br.readLine(); } br.close(); fr.close(); } catch(IOException ioEX) { System.out.println(ioEX); } } public void inquiry(String n) { for(int i=0;i<customerlist.size();i++) { AccountData atm=(AccountData)customerlist.get(i); if(n.equals(atm.pincode)) { JOptionPane.showMessageDialog(null,\"Welcome to your atm data Mr .\"+atm.customername+\"\\nYour Total Cash Is : \"+atm.startbalance,\"WELCOME WELCOME MR \"+atm.customername,JOptionPane.INFORMATION_MESSAGE); } } } public void transfer(String k) { String a,b,c; int d,e,f; for(int i=0;i<customerlist.size();i++) { AccountData atm=(AccountData)customerlist.get(i); if(k.equals(atm.pincode)); { a=atm.startbalance; d=Integer.parseInt(a); c=JOptionPane.showInputDialog(null,\"Enter The Account Number To whom you Transfer Amount\",\"MONEY TRANSACTION MENU\",JOptionPane.QUESTION_MESSAGE); b=JOptionPane.showInputDialog(null,\"Enter The Amount To Transfer\",\"MONEYTRANSACTION MENU\",JOptionPane.QUESTION_MESSAGE); e=Integer.parseInt(b); f=d-e; while(f < 0) { a=atm.startbalance; d=Integer.parseInt(a); b=JOptionPane.showInputDialog(null,\"Invalid Amount\\nPlease Enter The Suffecient Amount To Transfer\",\"MONEYTRANSACTION MENU\",JOptionPane.WARNING_MESSAGE); e=Integer.parseInt(b); f=d-e; } String u=String.valueOf(f); atm.startbalance=u; JOptionPane.showMessageDialog(null,\"Transaction is done succesfully\\n\\nAmount of \"+b+\"is transferd To \"+c+\"\\n\\nYour Total Cash Is : \"+atm.startbalance,\"MONEY TRANSACTION PROCESSED\",JOptionPane.INFORMATION_MESSAGE); Admin as = new Admin(); as.savePerson(); } } } public void withdraw(String o) { String a,b,c; int d,e,f; for(int i=0;i<customerlist.size();i++) { AccountData atm=(AccountData)customerlist.get(i); if(o.equals(atm.pincode)) { a=atm.startbalance; d=Integer.parseInt(a); b=JOptionPane.showInputDialog(null,\"Enter The Amout To Withdarw\",\"WITHDARW MENU\",JOptionPane.QUESTION_MESSAGE); e=Integer.parseInt(b); f=d-e; while(f <0) { a=atm.startbalance; d=Integer.parseInt(a); b=JOptionPane.showInputDialog(null,\"Invalid Amount\\nPlease Enter The Suffecient Amount To WithDraw\",\"WITHDRAW MENU\",JOptionPane.WARNING_MESSAGE); e=Integer.parseInt(b); f=d-e; } c=String.valueOf(f); atm.startbalance=c; JOptionPane.showMessageDialog(null,\"Withdarw proccesed\\nYou have Withdarwed Amount of\"+b+\"\\nYour Total Cash Is now: \"+atm.startbalance,\"Information\",JOptionPane.INFORMATION_MESSAGE); Admin ad = new Admin(); ad.savePerson(); } } } public void actionPerformed(ActionEvent e) { JButton b = (JButton)e.getSource(); if(b == equiryBtn) { s1= JOptionPane.showInputDialog(null,\"Enter PinCode To Check Account Balance \",\"Check Balance\",JOptionPane.QUESTION_MESSAGE); for(int i=0;i<customerlist.size();i++) { AccountData atm=(AccountData)customerlist.get(i); if(!s1.equals(atm.pincode)) { JOptionPane.showMessageDialog(null,\"You have entered Wrong Pincode \\nPlease Enter Valid Pincode!!!!\",\"Warning\",JOptionPane.WARNING_MESSAGE); } else if(s1.equals(atm.pincode)) { inquiry(s1); } } } if(b == withdrawBtn) { s1=JOptionPane.showInputDialog(null,\"Enter PinCode To withDraw Balance \",\"Withdraw Balance\",JOptionPane.QUESTION_MESSAGE); for(int i=0;i<customerlist.size();i++) { AccountData atm=(AccountData)customerlist.get(i); if(s1.equals(atm.pincode)) { withdraw(s1); } else if(!s1.equals(atm.pincode)) { JOptionPane.showMessageDialog(null,\"You have entered Wrong Pincode \\nPlease Enter Valid Pincode!!!!\",\"Warning\",JOptionPane.WARNING_MESSAGE); } } } if(b == transferBtn) { s1=JOptionPane.showInputDialog(null,\"Enter PinCode To Transfer Balance \",\"Share balance\",JOptionPane.QUESTION_MESSAGE); for(int i=0;i<customerlist.size();i++) { AccountData atm=(AccountData)customerlist.get(i); if(!s1.equals(atm.pincode)) { JOptionPane.showMessageDialog(null,\"You have entered Wrong Pincode \\nPlease Enter Valid Pincode!!!!\",\"Warning\",JOptionPane.WARNING_MESSAGE); } else if(s1.equals(atm.pincode)) { transfer(s1); } } } if(b == logoutBtn) { int n=JOptionPane.showConfirmDialog(null,\"Are you sure you want to exit?\",\"Exit\",JOptionPane.YES_NO_OPTION); if(n==JOptionPane.YES_OPTION) { JOptionPane.showMessageDialog(null,\"Good Bye\",\"ATM\",JOptionPane.INFORMATION_MESSAGE); System.exit(0); } } } }"}]}}
{"project_id":11,"chunk_id":0,"content":{"main_file_path":"BankingSystem-master\\src\\Application.java","main_file_content":"import java.awt.EventQueue; import GUI.GUIForm; public class Application { public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { GUIForm.login.frame.setVisible(true); } catch (Exception e) { } } }); } }","dependencies":[]}}
{"project_id":11,"chunk_id":0,"content":{"main_file_path":"BankingSystem-master\\src\\Bank\\Bank.java","main_file_content":"package Bank; import java.io.Serializable; import javax.swing.DefaultListModel; import Exceptions.AccNotFound; import Exceptions.InvalidAmount; import Exceptions.MaxBalance; import Exceptions.MaxWithdraw; public class Bank implements Serializable { private static final long serialVersionUID = 1L; private BankAccount[] accounts= new BankAccount[100]; public int addAccount(BankAccount acc) { int i=0; for(i=0;i<100;i++) { if(getAccounts()[i]==null) { break; } } getAccounts()[i]=acc; return i; } public int addAccount(String name, double balance, double maxWithLimit ) { SavingsAccount acc=new SavingsAccount(name, balance, maxWithLimit); return this.addAccount(acc); } public int addAccount(String name, double balance, String tradeLicense) throws Exception { CurrentAccount acc = new CurrentAccount(name, balance,tradeLicense); return this.addAccount(acc); } public int addAccount(String name, String institutionName, double balance, double min_balance) { StudentAccount acc= new StudentAccount(name,balance,institutionName); return this.addAccount(acc); } public BankAccount findAccount(String aacountNum) { int i; for(i=0;i<100;i++) { if(getAccounts()[i]==null) { break; } if(getAccounts()[i].acc_num.equals(aacountNum)) { return getAccounts()[i]; } } return null; } public void deposit(String aacountNum, double amt) throws InvalidAmount,AccNotFound { if(amt<0) { throw new InvalidAmount(\"Invalid Deposit amount\"); } BankAccount temp=findAccount(aacountNum); if(temp==null) { throw new AccNotFound(\"Account Not Found\"); } if(temp!=null) { temp.deposit(amt); } } public void withdraw(String aacountNum, double amt) throws MaxBalance,AccNotFound, MaxWithdraw, InvalidAmount { BankAccount temp=findAccount(aacountNum); if(temp==null) { throw new AccNotFound(\"Account Not Found\"); } if(amt<=0) { throw new InvalidAmount(\"Invalid Amount\"); } if(amt>temp.getbalance()) { throw new MaxBalance(\"Insufficient Balance\"); } if(temp!=null) { temp.withdraw(amt); } } public DefaultListModel<String> display() { DefaultListModel<String> list=new DefaultListModel<String>(); int i; for(i=0;i<100;i++) { if(getAccounts()[i]==null) { break; } list.addElement(getAccounts()[i].toString()); } return list; } public BankAccount[] getAccounts() { return accounts; } public void setAccounts(BankAccount[] accounts) { this.accounts = accounts; } }","dependencies":[{"file_path":"BankingSystem-master\\src\\Bank\\BankAccount.java","file_content":"package Bank; import java.io.Serializable; import Exceptions.MaxBalance; import Exceptions.MaxWithdraw; public class BankAccount implements Serializable { private static final long serialVersionUID = 1L; private String name; private double balance; private double min_balance; private String acc_num; public BankAccount(String name, double balance, double min_balance) throws Exception { if (balance < min_balance) { throw new Exception(\"Initial balance cannot be less than the minimum required balance: \" + min_balance); } this.name = name; this.balance = balance; this.min_balance = min_balance; this.acc_num = 10000 + (int) (Math.random() * 89999) + \"\"; } public void deposit(double amount) throws InvalidAmount { if (amount <= 0){ throw new InvalidAmount(\"Deposit amount must be greater than zero.\"); } balance+=amount; } public void withdraw(double amount) throws MaxWithdraw, MaxBalance { if((balance-amount)>=min_balance && amount<balance) { balance-=amount; } else { throw new MaxBalance(\"Insufficient Balance\"); } } public double getbalance() { return balance; } @Override public String toString() { return \"Name: \" + name + \", Id: \" + acc_num + \", Balance: \" + balance +\"Type:\"+this.getClass(); } }"},{"file_path":"BankingSystem-master\\src\\Bank\\CurrentAccount.java","file_content":"package Bank; public class CurrentAccount extends BankAccount { private static final long serialVersionUID = 1L; String tradeLicenseNumber; public CurrentAccount(String name, double balance,String tradeLicenseNumber) throws Exception { super(name, balance, 5000); this.tradeLicenseNumber= tradeLicenseNumber; } }"},{"file_path":"BankingSystem-master\\src\\Bank\\SavingsAccount.java","file_content":"package Bank; import Exceptions.MaxBalance; import Exceptions.MaxWithdraw; public class SavingsAccount extends BankAccount { private static final long serialVersionUID = 1L; float rate= .05f; double maxWithLimit; public SavingsAccount(String name, double balance,double maxWithLimit) { super(name, balance, 2000); this.maxWithLimit= maxWithLimit; } public double getNetBalance() { double NetBalance= getbalance()+(getbalance()*rate); return NetBalance; } public void withdraw(double amount) throws MaxWithdraw, MaxBalance { if(amount<maxWithLimit) { super.withdraw(amount); } else { throw new MaxWithdraw(\"Maximum Withdraw Limit Exceed\"); } } }"},{"file_path":"BankingSystem-master\\src\\Bank\\StudentAccount.java","file_content":"package Bank; public class StudentAccount extends SavingsAccount { private static final long serialVersionUID = 1L; String institutionName; public StudentAccount(String name, double balance ,String institutionName) { super(name, balance, 20000); min_balance=100; this.institutionName=institutionName; } }"},{"file_path":"BankingSystem-master\\src\\Exceptions\\AccNotFound.java","file_content":"package Exceptions; public class AccNotFound extends Exception { private static final long serialVersionUID = 1L; public AccNotFound(String s) { super(s); } }"},{"file_path":"BankingSystem-master\\src\\Exceptions\\InvalidAmount.java","file_content":"package Exceptions; public class InvalidAmount extends Exception { private static final long serialVersionUID = 1L; public InvalidAmount(String s) { super(s); } }"},{"file_path":"BankingSystem-master\\src\\Exceptions\\MaxBalance.java","file_content":"package Exceptions; public class MaxBalance extends Exception { private static final long serialVersionUID = 1L; public MaxBalance(String s) { super(s); } }"},{"file_path":"BankingSystem-master\\src\\Exceptions\\MaxWithdraw.java","file_content":"package Exceptions; public class MaxWithdraw extends Exception { private static final long serialVersionUID = 1L; public MaxWithdraw(String s) { super(s); } }"}]}}
{"project_id":11,"chunk_id":0,"content":{"main_file_path":"BankingSystem-master\\src\\Bank\\BankAccount.java","main_file_content":"package Bank; import java.io.Serializable; import Exceptions.MaxBalance; import Exceptions.MaxWithdraw; public class BankAccount implements Serializable { private static final long serialVersionUID = 1L; private String name; private double balance; private double min_balance; private String acc_num; public BankAccount(String name, double balance, double min_balance) throws Exception { if (balance < min_balance) { throw new Exception(\"Initial balance cannot be less than the minimum required balance: \" + min_balance); } this.name = name; this.balance = balance; this.min_balance = min_balance; this.acc_num = 10000 + (int) (Math.random() * 89999) + \"\"; } public void deposit(double amount) throws InvalidAmount { if (amount <= 0){ throw new InvalidAmount(\"Deposit amount must be greater than zero.\"); } balance+=amount; } public void withdraw(double amount) throws MaxWithdraw, MaxBalance { if((balance-amount)>=min_balance && amount<balance) { balance-=amount; } else { throw new MaxBalance(\"Insufficient Balance\"); } } public double getbalance() { return balance; } @Override public String toString() { return \"Name: \" + name + \", Id: \" + acc_num + \", Balance: \" + balance +\"Type:\"+this.getClass(); } }","dependencies":[{"file_path":"BankingSystem-master\\src\\Exceptions\\InvalidAmount.java","file_content":"package Exceptions; public class InvalidAmount extends Exception { private static final long serialVersionUID = 1L; public InvalidAmount(String s) { super(s); } }"},{"file_path":"BankingSystem-master\\src\\Exceptions\\MaxBalance.java","file_content":"package Exceptions; public class MaxBalance extends Exception { private static final long serialVersionUID = 1L; public MaxBalance(String s) { super(s); } }"},{"file_path":"BankingSystem-master\\src\\Exceptions\\MaxWithdraw.java","file_content":"package Exceptions; public class MaxWithdraw extends Exception { private static final long serialVersionUID = 1L; public MaxWithdraw(String s) { super(s); } }"}]}}
{"project_id":11,"chunk_id":0,"content":{"main_file_path":"BankingSystem-master\\src\\Bank\\CurrentAccount.java","main_file_content":"package Bank; public class CurrentAccount extends BankAccount { private static final long serialVersionUID = 1L; String tradeLicenseNumber; public CurrentAccount(String name, double balance,String tradeLicenseNumber) throws Exception { super(name, balance, 5000); this.tradeLicenseNumber= tradeLicenseNumber; } }","dependencies":[{"file_path":"BankingSystem-master\\src\\Bank\\BankAccount.java","file_content":"package Bank; import java.io.Serializable; import Exceptions.MaxBalance; import Exceptions.MaxWithdraw; public class BankAccount implements Serializable { private static final long serialVersionUID = 1L; private String name; private double balance; private double min_balance; private String acc_num; public BankAccount(String name, double balance, double min_balance) throws Exception { if (balance < min_balance) { throw new Exception(\"Initial balance cannot be less than the minimum required balance: \" + min_balance); } this.name = name; this.balance = balance; this.min_balance = min_balance; this.acc_num = 10000 + (int) (Math.random() * 89999) + \"\"; } public void deposit(double amount) throws InvalidAmount { if (amount <= 0){ throw new InvalidAmount(\"Deposit amount must be greater than zero.\"); } balance+=amount; } public void withdraw(double amount) throws MaxWithdraw, MaxBalance { if((balance-amount)>=min_balance && amount<balance) { balance-=amount; } else { throw new MaxBalance(\"Insufficient Balance\"); } } public double getbalance() { return balance; } @Override public String toString() { return \"Name: \" + name + \", Id: \" + acc_num + \", Balance: \" + balance +\"Type:\"+this.getClass(); } }"}]}}
{"project_id":11,"chunk_id":0,"content":{"main_file_path":"BankingSystem-master\\src\\Bank\\SavingsAccount.java","main_file_content":"package Bank; import Exceptions.MaxBalance; import Exceptions.MaxWithdraw; public class SavingsAccount extends BankAccount { private static final long serialVersionUID = 1L; float rate= .05f; double maxWithLimit; public SavingsAccount(String name, double balance,double maxWithLimit) { super(name, balance, 2000); this.maxWithLimit= maxWithLimit; } public double getNetBalance() { double NetBalance= getbalance()+(getbalance()*rate); return NetBalance; } public void withdraw(double amount) throws MaxWithdraw, MaxBalance { if(amount<maxWithLimit) { super.withdraw(amount); } else { throw new MaxWithdraw(\"Maximum Withdraw Limit Exceed\"); } } }","dependencies":[{"file_path":"BankingSystem-master\\src\\Bank\\BankAccount.java","file_content":"package Bank; import java.io.Serializable; import Exceptions.MaxBalance; import Exceptions.MaxWithdraw; public class BankAccount implements Serializable { private static final long serialVersionUID = 1L; private String name; private double balance; private double min_balance; private String acc_num; public BankAccount(String name, double balance, double min_balance) throws Exception { if (balance < min_balance) { throw new Exception(\"Initial balance cannot be less than the minimum required balance: \" + min_balance); } this.name = name; this.balance = balance; this.min_balance = min_balance; this.acc_num = 10000 + (int) (Math.random() * 89999) + \"\"; } public void deposit(double amount) throws InvalidAmount { if (amount <= 0){ throw new InvalidAmount(\"Deposit amount must be greater than zero.\"); } balance+=amount; } public void withdraw(double amount) throws MaxWithdraw, MaxBalance { if((balance-amount)>=min_balance && amount<balance) { balance-=amount; } else { throw new MaxBalance(\"Insufficient Balance\"); } } public double getbalance() { return balance; } @Override public String toString() { return \"Name: \" + name + \", Id: \" + acc_num + \", Balance: \" + balance +\"Type:\"+this.getClass(); } }"},{"file_path":"BankingSystem-master\\src\\Exceptions\\MaxBalance.java","file_content":"package Exceptions; public class MaxBalance extends Exception { private static final long serialVersionUID = 1L; public MaxBalance(String s) { super(s); } }"},{"file_path":"BankingSystem-master\\src\\Exceptions\\MaxWithdraw.java","file_content":"package Exceptions; public class MaxWithdraw extends Exception { private static final long serialVersionUID = 1L; public MaxWithdraw(String s) { super(s); } }"}]}}
{"project_id":11,"chunk_id":0,"content":{"main_file_path":"BankingSystem-master\\src\\Bank\\StudentAccount.java","main_file_content":"package Bank; public class StudentAccount extends SavingsAccount { private static final long serialVersionUID = 1L; String institutionName; public StudentAccount(String name, double balance ,String institutionName) { super(name, balance, 20000); min_balance=100; this.institutionName=institutionName; } }","dependencies":[{"file_path":"BankingSystem-master\\src\\Bank\\SavingsAccount.java","file_content":"package Bank; import Exceptions.MaxBalance; import Exceptions.MaxWithdraw; public class SavingsAccount extends BankAccount { private static final long serialVersionUID = 1L; float rate= .05f; double maxWithLimit; public SavingsAccount(String name, double balance,double maxWithLimit) { super(name, balance, 2000); this.maxWithLimit= maxWithLimit; } public double getNetBalance() { double NetBalance= getbalance()+(getbalance()*rate); return NetBalance; } public void withdraw(double amount) throws MaxWithdraw, MaxBalance { if(amount<maxWithLimit) { super.withdraw(amount); } else { throw new MaxWithdraw(\"Maximum Withdraw Limit Exceed\"); } } }"}]}}
{"project_id":11,"chunk_id":0,"content":{"main_file_path":"BankingSystem-master\\src\\Data\\FileIO.java","main_file_content":"package Data; import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import Bank.*; public class FileIO { public static Bank bank=null; public static void Read() { FileInputStream fis =null; ObjectInputStream oin=null; try { fis =new FileInputStream(\"data\"); oin=new ObjectInputStream(fis); FileIO.bank=(Bank)oin.readObject(); } catch (Exception en) { FileIO.bank=new Bank(); } finally{ try{ if(oin!=null) oin.close(); if(fis!=null) fis.close(); } catch (IOException en) { } } } public static void Write() { try { FileOutputStream fout=new FileOutputStream(\"data\"); ObjectOutputStream out=new ObjectOutputStream(fout); out.writeObject(FileIO.bank); out.flush(); fout.close(); } catch(Exception en) { } } }","dependencies":[{"file_path":"BankingSystem-master\\src\\Bank\\Bank.java","file_content":"package Bank; import java.io.Serializable; import javax.swing.DefaultListModel; import Exceptions.AccNotFound; import Exceptions.InvalidAmount; import Exceptions.MaxBalance; import Exceptions.MaxWithdraw; public class Bank implements Serializable { private static final long serialVersionUID = 1L; private BankAccount[] accounts= new BankAccount[100]; public int addAccount(BankAccount acc) { int i=0; for(i=0;i<100;i++) { if(getAccounts()[i]==null) { break; } } getAccounts()[i]=acc; return i; } public int addAccount(String name, double balance, double maxWithLimit ) { SavingsAccount acc=new SavingsAccount(name, balance, maxWithLimit); return this.addAccount(acc); } public int addAccount(String name, double balance, String tradeLicense) throws Exception { CurrentAccount acc = new CurrentAccount(name, balance,tradeLicense); return this.addAccount(acc); } public int addAccount(String name, String institutionName, double balance, double min_balance) { StudentAccount acc= new StudentAccount(name,balance,institutionName); return this.addAccount(acc); } public BankAccount findAccount(String aacountNum) { int i; for(i=0;i<100;i++) { if(getAccounts()[i]==null) { break; } if(getAccounts()[i].acc_num.equals(aacountNum)) { return getAccounts()[i]; } } return null; } public void deposit(String aacountNum, double amt) throws InvalidAmount,AccNotFound { if(amt<0) { throw new InvalidAmount(\"Invalid Deposit amount\"); } BankAccount temp=findAccount(aacountNum); if(temp==null) { throw new AccNotFound(\"Account Not Found\"); } if(temp!=null) { temp.deposit(amt); } } public void withdraw(String aacountNum, double amt) throws MaxBalance,AccNotFound, MaxWithdraw, InvalidAmount { BankAccount temp=findAccount(aacountNum); if(temp==null) { throw new AccNotFound(\"Account Not Found\"); } if(amt<=0) { throw new InvalidAmount(\"Invalid Amount\"); } if(amt>temp.getbalance()) { throw new MaxBalance(\"Insufficient Balance\"); } if(temp!=null) { temp.withdraw(amt); } } public DefaultListModel<String> display() { DefaultListModel<String> list=new DefaultListModel<String>(); int i; for(i=0;i<100;i++) { if(getAccounts()[i]==null) { break; } list.addElement(getAccounts()[i].toString()); } return list; } public BankAccount[] getAccounts() { return accounts; } public void setAccounts(BankAccount[] accounts) { this.accounts = accounts; } }"}]}}
{"project_id":11,"chunk_id":0,"content":{"main_file_path":"BankingSystem-master\\src\\Exceptions\\AccNotFound.java","main_file_content":"package Exceptions; public class AccNotFound extends Exception { private static final long serialVersionUID = 1L; public AccNotFound(String s) { super(s); } }","dependencies":[]}}
{"project_id":11,"chunk_id":0,"content":{"main_file_path":"BankingSystem-master\\src\\Exceptions\\InvalidAmount.java","main_file_content":"package Exceptions; public class InvalidAmount extends Exception { private static final long serialVersionUID = 1L; public InvalidAmount(String s) { super(s); } }","dependencies":[]}}
{"project_id":11,"chunk_id":0,"content":{"main_file_path":"BankingSystem-master\\src\\Exceptions\\MaxBalance.java","main_file_content":"package Exceptions; public class MaxBalance extends Exception { private static final long serialVersionUID = 1L; public MaxBalance(String s) { super(s); } }","dependencies":[]}}
{"project_id":11,"chunk_id":0,"content":{"main_file_path":"BankingSystem-master\\src\\Exceptions\\MaxWithdraw.java","main_file_content":"package Exceptions; public class MaxWithdraw extends Exception { private static final long serialVersionUID = 1L; public MaxWithdraw(String s) { super(s); } }","dependencies":[]}}
{"project_id":11,"chunk_id":0,"content":{"main_file_path":"BankingSystem-master\\src\\GUI\\AddAccount.java","main_file_content":"package GUI; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import javax.swing.JButton; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.SwingConstants; import java.awt.Font; import java.awt.event.ActionListener; import java.awt.event.ActionEvent; import java.awt.SystemColor; public class AddAccount extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; public AddAccount() { setTitle(\"Add Account\"); setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(SystemColor.activeCaption); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JButton btnAddCurrentAccount = new JButton(\"Add Saving Account\"); btnAddCurrentAccount.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { if(!GUIForm.addsavingsaccount.isVisible()) { GUIForm.addsavingsaccount.setVisible(true); } else { JOptionPane.showMessageDialog(getComponent(0), \"Already Opened\", \"Warning\", 0); } dispose(); } }); btnAddCurrentAccount.setBounds(118, 56, 193, 38); contentPane.add(btnAddCurrentAccount); JButton button = new JButton(\"Add Current Account\"); button.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { if(!GUIForm.addcurrentacc.isVisible()) { GUIForm.addcurrentacc.setVisible(true); dispose(); } else { JOptionPane.showMessageDialog(getComponent(0), \"Already Opened\", \"Warning\", 0); } } }); button.setBounds(118, 124, 193, 38); contentPane.add(button); JButton btnAddStudentAccount = new JButton(\"Add Student Account\"); btnAddStudentAccount.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { if(!GUIForm.addstudentaccount.isVisible()) { GUIForm.addstudentaccount.setVisible(true); dispose(); } else { JOptionPane.showMessageDialog(getComponent(0), \"Already Opened\", \"Warning\", 0); } } }); btnAddStudentAccount.setBounds(118, 190, 193, 38); contentPane.add(btnAddStudentAccount); JLabel lblAddAccount = new JLabel(\"Add Account\"); lblAddAccount.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); lblAddAccount.setHorizontalAlignment(SwingConstants.CENTER); lblAddAccount.setBounds(108, 11, 210, 34); contentPane.add(lblAddAccount); } }","dependencies":[]}}
{"project_id":11,"chunk_id":0,"content":{"main_file_path":"BankingSystem-master\\src\\GUI\\AddCurrentAccount.java","main_file_content":"package GUI; import javax.swing.JFrame; import Data.FileIO; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.SwingConstants; import java.awt.Font; import javax.swing.JTextField; import javax.swing.JButton; import java.awt.event.ActionListener; import java.awt.event.ActionEvent; import java.awt.SystemColor; public class AddCurrentAccount extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; private JTextField textField_1; private JTextField textField_2; public AddCurrentAccount() { setTitle(\"Add Current Account\"); setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(SystemColor.activeCaption); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JLabel lblAddCurrentAccount = new JLabel(\"Add Current Account \"); lblAddCurrentAccount.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); lblAddCurrentAccount.setHorizontalAlignment(SwingConstants.CENTER); lblAddCurrentAccount.setBounds(10, 11, 414, 34); contentPane.add(lblAddCurrentAccount); JLabel lblName = new JLabel(\"Name:\"); lblName.setFont(new Font(\"Tahoma\", Font.PLAIN, 11)); lblName.setBounds(10, 72, 124, 14); contentPane.add(lblName); textField = new JTextField(); textField.setBounds(144, 69, 254, 20); contentPane.add(textField); textField.setColumns(10); JLabel lblBalance = new JLabel(\"Balance:\"); lblBalance.setFont(new Font(\"Tahoma\", Font.PLAIN, 11)); lblBalance.setBounds(10, 118, 124, 14); contentPane.add(lblBalance); textField_1 = new JTextField(); textField_1.setColumns(10); textField_1.setBounds(144, 115, 254, 20); contentPane.add(textField_1); JLabel lblMaximumWithdrawLimit = new JLabel(\"Trade Licence Number:\"); lblMaximumWithdrawLimit.setFont(new Font(\"Tahoma\", Font.PLAIN, 11)); lblMaximumWithdrawLimit.setBounds(10, 163, 135, 14); contentPane.add(lblMaximumWithdrawLimit); textField_2 = new JTextField(); textField_2.setColumns(10); textField_2.setBounds(144, 160, 254, 20); contentPane.add(textField_2); JButton btnAdd = new JButton(\"Add\"); btnAdd.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { String name=textField.getText(); double bal=Double.parseDouble(textField_1.getText()); String trlic=textField_2.getText(); if(bal<5000) { JOptionPane.showMessageDialog(getComponent(0), \"Minimum Limit 5000\", \"Warning\", 0); textField.setText(null); textField_1.setText(null); textField_2.setText(null); } else { if(name==null||bal<=0||trlic==null) { JOptionPane.showMessageDialog(getComponent(0),\"Typing Mismatch!! Try Again\"); textField.setText(null); textField_1.setText(null); textField_2.setText(null); } else { int ch=JOptionPane.showConfirmDialog(getComponent(0), \"Confirm?\"); if(ch==0) { int index = 0; try { index = FileIO.bank.addAccount(name, bal, trlic); } catch (Exception e1) { e1.printStackTrace(); } DisplayList.arr.addElement(FileIO.bank.getAccounts()[index].toString()); JOptionPane.showMessageDialog(getComponent(0),\"Success\"); dispose(); } else { JOptionPane.showMessageDialog(getComponent(0),\"Failed\"); textField.setText(null); textField_1.setText(null); textField_2.setText(null); } } } } }); btnAdd.setBounds(86, 209, 89, 23); contentPane.add(btnAdd); JButton btnReset = new JButton(\"Reset\"); btnReset.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { textField.setText(null); textField_1.setText(null); textField_2.setText(null); } }); btnReset.setBounds(309, 209, 89, 23); contentPane.add(btnReset); } }","dependencies":[]}}
{"project_id":11,"chunk_id":0,"content":{"main_file_path":"BankingSystem-master\\src\\GUI\\AddSavingsAccount.java","main_file_content":"package GUI; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.SwingConstants; import java.awt.Font; import javax.swing.JTextField; import javax.swing.JButton; import java.awt.event.ActionListener; import java.awt.event.ActionEvent; import Data.FileIO; public class AddSavingsAccount extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; private JTextField textField_1; private JTextField textField_2; public AddSavingsAccount() { setTitle(\"Add Savings Account \"); setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JLabel lblAddCurrentAccount = new JLabel(\"Add Savings Account \"); lblAddCurrentAccount.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); lblAddCurrentAccount.setHorizontalAlignment(SwingConstants.CENTER); lblAddCurrentAccount.setBounds(10, 11, 414, 34); contentPane.add(lblAddCurrentAccount); JLabel lblName = new JLabel(\"Name:\"); lblName.setFont(new Font(\"Tahoma\", Font.PLAIN, 11)); lblName.setBounds(10, 72, 124, 14); contentPane.add(lblName); textField = new JTextField(); textField.setBounds(144, 69, 254, 20); contentPane.add(textField); textField.setColumns(10); JLabel lblBalance = new JLabel(\"Balance:\"); lblBalance.setFont(new Font(\"Tahoma\", Font.PLAIN, 11)); lblBalance.setBounds(10, 118, 124, 14); contentPane.add(lblBalance); textField_1 = new JTextField(); textField_1.setColumns(10); textField_1.setBounds(144, 115, 254, 20); contentPane.add(textField_1); JLabel lblMaximumWithdrawLimit = new JLabel(\"Maximum Withdraw Limit:\"); lblMaximumWithdrawLimit.setFont(new Font(\"Tahoma\", Font.PLAIN, 11)); lblMaximumWithdrawLimit.setBounds(10, 163, 135, 14); contentPane.add(lblMaximumWithdrawLimit); textField_2 = new JTextField(); textField_2.setColumns(10); textField_2.setBounds(144, 160, 254, 20); contentPane.add(textField_2); JButton btnAdd = new JButton(\"Add\"); btnAdd.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { String name=textField.getText(); double bal=Double.parseDouble(textField_1.getText()); double maxw=Double.parseDouble(textField_2.getText()); if(bal<2000) { JOptionPane.showMessageDialog(getComponent(0), \"Minimum Limit 5000\", \"Warning\", 0); textField.setText(null); textField_1.setText(null); textField_2.setText(null); } else { if(name==null||bal<=0||maxw<=0) { JOptionPane.showMessageDialog(getComponent(0),\"Typing Mismatch!! Try Again\"); textField.setText(null); textField_1.setText(null); textField_2.setText(null); } else { int ch=JOptionPane.showConfirmDialog(getComponent(0), \"Confirm?\"); if(ch==0) { int index = FileIO.bank.addAccount(name, bal, maxw); DisplayList.arr.addElement(FileIO.bank.getAccounts()[index].toString()); JOptionPane.showMessageDialog(getComponent(0),\"Added Successfully\"); dispose(); } else { JOptionPane.showMessageDialog(getComponent(0),\"Failed\"); textField.setText(null); textField_1.setText(null); textField_2.setText(null); } textField.setText(null); textField_1.setText(null); textField_2.setText(null); } } } }); btnAdd.setBounds(86, 209, 89, 23); contentPane.add(btnAdd); JButton btnReset = new JButton(\"Reset\"); btnReset.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { textField.setText(null); textField_1.setText(null); textField_2.setText(null); } }); btnReset.setBounds(309, 209, 89, 23); contentPane.add(btnReset); } }","dependencies":[]}}
{"project_id":11,"chunk_id":0,"content":{"main_file_path":"BankingSystem-master\\src\\GUI\\AddStudentAccount.java","main_file_content":"package GUI; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.SwingConstants; import java.awt.Font; import javax.swing.JTextField; import javax.swing.JButton; import java.awt.event.ActionListener; import java.awt.event.ActionEvent; import Data.FileIO; public class AddStudentAccount extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; private JTextField textField_1; private JTextField textField_2; public AddStudentAccount() { setTitle(\"Add Student Account\"); setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JLabel lblAddCurrentAccount = new JLabel(\"Add Student Account \"); lblAddCurrentAccount.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); lblAddCurrentAccount.setHorizontalAlignment(SwingConstants.CENTER); lblAddCurrentAccount.setBounds(10, 11, 414, 34); contentPane.add(lblAddCurrentAccount); JLabel lblName = new JLabel(\"Name:\"); lblName.setFont(new Font(\"Tahoma\", Font.PLAIN, 11)); lblName.setBounds(10, 72, 124, 14); contentPane.add(lblName); textField = new JTextField(); textField.setBounds(144, 69, 254, 20); contentPane.add(textField); textField.setColumns(10); JLabel lblBalance = new JLabel(\"Balance:\"); lblBalance.setFont(new Font(\"Tahoma\", Font.PLAIN, 11)); lblBalance.setBounds(10, 118, 124, 14); contentPane.add(lblBalance); textField_1 = new JTextField(); textField_1.setColumns(10); textField_1.setBounds(144, 115, 254, 20); contentPane.add(textField_1); JLabel lblMaximumWithdrawLimit = new JLabel(\"Institution Name:\"); lblMaximumWithdrawLimit.setFont(new Font(\"Tahoma\", Font.PLAIN, 11)); lblMaximumWithdrawLimit.setBounds(10, 163, 135, 14); contentPane.add(lblMaximumWithdrawLimit); textField_2 = new JTextField(); textField_2.setColumns(10); textField_2.setBounds(144, 160, 254, 20); contentPane.add(textField_2); JButton btnAdd = new JButton(\"Add\"); btnAdd.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { String name=textField.getText(); double bal=Double.parseDouble(textField_1.getText()); String insname=textField_2.getText(); if(bal<100) { JOptionPane.showMessageDialog(getComponent(0), \"Minimum Limit 5000\", \"Warning\", 0); textField.setText(null); textField_1.setText(null); textField_2.setText(null); } else { if(name==null||bal<=0||insname==null) { JOptionPane.showMessageDialog(getComponent(0),\"Typing Mismatch!! Try Again\"); textField.setText(null); textField_1.setText(null); textField_2.setText(null); } else { try { FileIO.bank.addAccount(name, bal, insname); } catch (Exception e1) { } int ch=JOptionPane.showConfirmDialog(getComponent(0), \"Confirm?\"); if(ch==0) { int index = 0; try { index = FileIO.bank.addAccount(name, bal, insname); } catch (Exception e1) { } DisplayList.arr.addElement(FileIO.bank.getAccounts()[index].toString()); JOptionPane.showMessageDialog(getComponent(0),\"Added Successfully\"); dispose(); } else { JOptionPane.showMessageDialog(getComponent(0),\"Failed\"); textField.setText(null); textField_1.setText(null); textField_2.setText(null); } } } } }); btnAdd.setBounds(86, 209, 89, 23); contentPane.add(btnAdd); JButton btnReset = new JButton(\"Reset\"); btnReset.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { textField.setText(null); textField_1.setText(null); textField_2.setText(null); } }); btnReset.setBounds(309, 209, 89, 23); contentPane.add(btnReset); } }","dependencies":[]}}
{"project_id":11,"chunk_id":0,"content":{"main_file_path":"BankingSystem-master\\src\\GUI\\DepositAcc.java","main_file_content":"package GUI; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import Exceptions.AccNotFound; import Exceptions.InvalidAmount; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.SwingConstants; import java.awt.Font; import javax.swing.JTextField; import javax.swing.JButton; import java.awt.event.ActionListener; import java.io.Serializable; import java.awt.event.ActionEvent; import Data.FileIO; import java.awt.SystemColor; public class DepositAcc extends JFrame implements Serializable { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; private JTextField textField_1; public DepositAcc() { setTitle(\"Deposit To Account\"); setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(SystemColor.activeCaption); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JLabel lblDepositToAccount = new JLabel(\"Deposit To Account\"); lblDepositToAccount.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); lblDepositToAccount.setHorizontalAlignment(SwingConstants.CENTER); lblDepositToAccount.setBounds(10, 11, 414, 36); contentPane.add(lblDepositToAccount); JLabel lblName = new JLabel(\"Account Number:\"); lblName.setHorizontalAlignment(SwingConstants.RIGHT); lblName.setBounds(0, 86, 111, 14); contentPane.add(lblName); textField = new JTextField(); textField.setBounds(121, 83, 211, 20); contentPane.add(textField); textField.setColumns(10); textField_1 = new JTextField(); textField_1.setColumns(10); textField_1.setBounds(121, 147, 211, 20); contentPane.add(textField_1); JLabel lblAmount = new JLabel(\"Amount:\"); lblAmount.setHorizontalAlignment(SwingConstants.RIGHT); lblAmount.setBounds(0, 150, 111, 14); contentPane.add(lblAmount); JButton btnDeposit = new JButton(\"Deposit\"); btnDeposit.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { String aacountNum; double amt; aacountNum=textField.getText(); amt=Double.parseDouble(textField_1.getText()); int a=JOptionPane.showConfirmDialog(getComponent(0), \"Confirm?\"); if(a==0) { try { FileIO.bank.deposit(aacountNum, amt); JOptionPane.showMessageDialog(getComponent(0),\"Deposit Successful\"); dispose(); textField.setText(null); textField_1.setText(null); } catch (InvalidAmount e1) { JOptionPane.showMessageDialog(getComponent(0), \"Sorry! Deposit Amount is Invalid\"); } catch (AccNotFound e1) { JOptionPane.showMessageDialog(getComponent(0), \"Sorry! Account is Not Found\"); } finally { textField.setText(null); textField_1.setText(null); } } else { textField.setText(null); textField_1.setText(null); } } }); btnDeposit.setBounds(73, 212, 89, 23); contentPane.add(btnDeposit); JButton btnReset = new JButton(\"Reset\"); btnReset.setBounds(243, 212, 89, 23); contentPane.add(btnReset); btnReset.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { textField.setText(null); textField_1.setText(null); } }); } }","dependencies":[{"file_path":"BankingSystem-master\\src\\Exceptions\\AccNotFound.java","file_content":"package Exceptions; public class AccNotFound extends Exception { private static final long serialVersionUID = 1L; public AccNotFound(String s) { super(s); } }"},{"file_path":"BankingSystem-master\\src\\Exceptions\\InvalidAmount.java","file_content":"package Exceptions; public class InvalidAmount extends Exception { private static final long serialVersionUID = 1L; public InvalidAmount(String s) { super(s); } }"}]}}
{"project_id":11,"chunk_id":0,"content":{"main_file_path":"BankingSystem-master\\src\\GUI\\DisplayList.java","main_file_content":"package GUI; import javax.swing.DefaultListModel; import Data.FileIO; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import javax.swing.JLabel; import javax.swing.SwingConstants; import java.awt.Font; import javax.swing.JScrollPane; import javax.swing.ScrollPaneConstants; import javax.swing.JList; import java.awt.SystemColor; public class DisplayList extends JFrame { private static final long serialVersionUID = 1L; static DefaultListModel<String> arr = new DefaultListModel<String>(); private JPanel contentPane; @SuppressWarnings({ }) public DisplayList() { setTitle(\"Account List\"); setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); setBounds(100, 100, 649, 474); contentPane = new JPanel(); contentPane.setBackground(SystemColor.activeCaption); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JLabel lblAccountList = new JLabel(\"Account List\"); lblAccountList.setFont(new Font(\"Tahoma\", Font.BOLD, 18)); lblAccountList.setHorizontalAlignment(SwingConstants.CENTER); lblAccountList.setBounds(0, 11, 623, 31); contentPane.add(lblAccountList); JScrollPane scrollPane = new JScrollPane(); scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS); scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS); scrollPane.setBounds(10, 66, 613, 358); contentPane.add(scrollPane); arr=FileIO.bank.display(); JList<String> list = new JList<String>(arr); scrollPane.setViewportView(list); } }","dependencies":[]}}
{"project_id":11,"chunk_id":0,"content":{"main_file_path":"BankingSystem-master\\src\\GUI\\GUIForm.java","main_file_content":"package GUI; import java.awt.Point; public class GUIForm { public static Login login= new Login(); public static Menu menu= new Menu(); public static AddAccount addaccount= new AddAccount(); public static AddCurrentAccount addcurrentacc= new AddCurrentAccount(); public static AddSavingsAccount addsavingsaccount = new AddSavingsAccount(); public static AddStudentAccount addstudentaccount = new AddStudentAccount(); public static DisplayList displaylist= new DisplayList(); public static DepositAcc depositacc= new DepositAcc(); public static WithdrawAcc withdraw = new WithdrawAcc(); public static void UpdateDisplay() { if(displaylist.isVisible()) { Point O= displaylist.getLocation(); displaylist.dispose(); displaylist = new DisplayList(); displaylist.setVisible(true); displaylist.setLocation(O);; } else { displaylist = new DisplayList(); } } }","dependencies":[{"file_path":"BankingSystem-master\\src\\GUI\\AddAccount.java","file_content":"package GUI; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import javax.swing.JButton; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.SwingConstants; import java.awt.Font; import java.awt.event.ActionListener; import java.awt.event.ActionEvent; import java.awt.SystemColor; public class AddAccount extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; public AddAccount() { setTitle(\"Add Account\"); setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(SystemColor.activeCaption); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JButton btnAddCurrentAccount = new JButton(\"Add Saving Account\"); btnAddCurrentAccount.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { if(!GUIForm.addsavingsaccount.isVisible()) { GUIForm.addsavingsaccount.setVisible(true); } else { JOptionPane.showMessageDialog(getComponent(0), \"Already Opened\", \"Warning\", 0); } dispose(); } }); btnAddCurrentAccount.setBounds(118, 56, 193, 38); contentPane.add(btnAddCurrentAccount); JButton button = new JButton(\"Add Current Account\"); button.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { if(!GUIForm.addcurrentacc.isVisible()) { GUIForm.addcurrentacc.setVisible(true); dispose(); } else { JOptionPane.showMessageDialog(getComponent(0), \"Already Opened\", \"Warning\", 0); } } }); button.setBounds(118, 124, 193, 38); contentPane.add(button); JButton btnAddStudentAccount = new JButton(\"Add Student Account\"); btnAddStudentAccount.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { if(!GUIForm.addstudentaccount.isVisible()) { GUIForm.addstudentaccount.setVisible(true); dispose(); } else { JOptionPane.showMessageDialog(getComponent(0), \"Already Opened\", \"Warning\", 0); } } }); btnAddStudentAccount.setBounds(118, 190, 193, 38); contentPane.add(btnAddStudentAccount); JLabel lblAddAccount = new JLabel(\"Add Account\"); lblAddAccount.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); lblAddAccount.setHorizontalAlignment(SwingConstants.CENTER); lblAddAccount.setBounds(108, 11, 210, 34); contentPane.add(lblAddAccount); } }"},{"file_path":"BankingSystem-master\\src\\GUI\\AddCurrentAccount.java","file_content":"package GUI; import javax.swing.JFrame; import Data.FileIO; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.SwingConstants; import java.awt.Font; import javax.swing.JTextField; import javax.swing.JButton; import java.awt.event.ActionListener; import java.awt.event.ActionEvent; import java.awt.SystemColor; public class AddCurrentAccount extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; private JTextField textField_1; private JTextField textField_2; public AddCurrentAccount() { setTitle(\"Add Current Account\"); setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(SystemColor.activeCaption); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JLabel lblAddCurrentAccount = new JLabel(\"Add Current Account \"); lblAddCurrentAccount.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); lblAddCurrentAccount.setHorizontalAlignment(SwingConstants.CENTER); lblAddCurrentAccount.setBounds(10, 11, 414, 34); contentPane.add(lblAddCurrentAccount); JLabel lblName = new JLabel(\"Name:\"); lblName.setFont(new Font(\"Tahoma\", Font.PLAIN, 11)); lblName.setBounds(10, 72, 124, 14); contentPane.add(lblName); textField = new JTextField(); textField.setBounds(144, 69, 254, 20); contentPane.add(textField); textField.setColumns(10); JLabel lblBalance = new JLabel(\"Balance:\"); lblBalance.setFont(new Font(\"Tahoma\", Font.PLAIN, 11)); lblBalance.setBounds(10, 118, 124, 14); contentPane.add(lblBalance); textField_1 = new JTextField(); textField_1.setColumns(10); textField_1.setBounds(144, 115, 254, 20); contentPane.add(textField_1); JLabel lblMaximumWithdrawLimit = new JLabel(\"Trade Licence Number:\"); lblMaximumWithdrawLimit.setFont(new Font(\"Tahoma\", Font.PLAIN, 11)); lblMaximumWithdrawLimit.setBounds(10, 163, 135, 14); contentPane.add(lblMaximumWithdrawLimit); textField_2 = new JTextField(); textField_2.setColumns(10); textField_2.setBounds(144, 160, 254, 20); contentPane.add(textField_2); JButton btnAdd = new JButton(\"Add\"); btnAdd.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { String name=textField.getText(); double bal=Double.parseDouble(textField_1.getText()); String trlic=textField_2.getText(); if(bal<5000) { JOptionPane.showMessageDialog(getComponent(0), \"Minimum Limit 5000\", \"Warning\", 0); textField.setText(null); textField_1.setText(null); textField_2.setText(null); } else { if(name==null||bal<=0||trlic==null) { JOptionPane.showMessageDialog(getComponent(0),\"Typing Mismatch!! Try Again\"); textField.setText(null); textField_1.setText(null); textField_2.setText(null); } else { int ch=JOptionPane.showConfirmDialog(getComponent(0), \"Confirm?\"); if(ch==0) { int index = 0; try { index = FileIO.bank.addAccount(name, bal, trlic); } catch (Exception e1) { e1.printStackTrace(); } DisplayList.arr.addElement(FileIO.bank.getAccounts()[index].toString()); JOptionPane.showMessageDialog(getComponent(0),\"Success\"); dispose(); } else { JOptionPane.showMessageDialog(getComponent(0),\"Failed\"); textField.setText(null); textField_1.setText(null); textField_2.setText(null); } } } } }); btnAdd.setBounds(86, 209, 89, 23); contentPane.add(btnAdd); JButton btnReset = new JButton(\"Reset\"); btnReset.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { textField.setText(null); textField_1.setText(null); textField_2.setText(null); } }); btnReset.setBounds(309, 209, 89, 23); contentPane.add(btnReset); } }"},{"file_path":"BankingSystem-master\\src\\GUI\\AddSavingsAccount.java","file_content":"package GUI; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.SwingConstants; import java.awt.Font; import javax.swing.JTextField; import javax.swing.JButton; import java.awt.event.ActionListener; import java.awt.event.ActionEvent; import Data.FileIO; public class AddSavingsAccount extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; private JTextField textField_1; private JTextField textField_2; public AddSavingsAccount() { setTitle(\"Add Savings Account \"); setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JLabel lblAddCurrentAccount = new JLabel(\"Add Savings Account \"); lblAddCurrentAccount.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); lblAddCurrentAccount.setHorizontalAlignment(SwingConstants.CENTER); lblAddCurrentAccount.setBounds(10, 11, 414, 34); contentPane.add(lblAddCurrentAccount); JLabel lblName = new JLabel(\"Name:\"); lblName.setFont(new Font(\"Tahoma\", Font.PLAIN, 11)); lblName.setBounds(10, 72, 124, 14); contentPane.add(lblName); textField = new JTextField(); textField.setBounds(144, 69, 254, 20); contentPane.add(textField); textField.setColumns(10); JLabel lblBalance = new JLabel(\"Balance:\"); lblBalance.setFont(new Font(\"Tahoma\", Font.PLAIN, 11)); lblBalance.setBounds(10, 118, 124, 14); contentPane.add(lblBalance); textField_1 = new JTextField(); textField_1.setColumns(10); textField_1.setBounds(144, 115, 254, 20); contentPane.add(textField_1); JLabel lblMaximumWithdrawLimit = new JLabel(\"Maximum Withdraw Limit:\"); lblMaximumWithdrawLimit.setFont(new Font(\"Tahoma\", Font.PLAIN, 11)); lblMaximumWithdrawLimit.setBounds(10, 163, 135, 14); contentPane.add(lblMaximumWithdrawLimit); textField_2 = new JTextField(); textField_2.setColumns(10); textField_2.setBounds(144, 160, 254, 20); contentPane.add(textField_2); JButton btnAdd = new JButton(\"Add\"); btnAdd.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { String name=textField.getText(); double bal=Double.parseDouble(textField_1.getText()); double maxw=Double.parseDouble(textField_2.getText()); if(bal<2000) { JOptionPane.showMessageDialog(getComponent(0), \"Minimum Limit 5000\", \"Warning\", 0); textField.setText(null); textField_1.setText(null); textField_2.setText(null); } else { if(name==null||bal<=0||maxw<=0) { JOptionPane.showMessageDialog(getComponent(0),\"Typing Mismatch!! Try Again\"); textField.setText(null); textField_1.setText(null); textField_2.setText(null); } else { int ch=JOptionPane.showConfirmDialog(getComponent(0), \"Confirm?\"); if(ch==0) { int index = FileIO.bank.addAccount(name, bal, maxw); DisplayList.arr.addElement(FileIO.bank.getAccounts()[index].toString()); JOptionPane.showMessageDialog(getComponent(0),\"Added Successfully\"); dispose(); } else { JOptionPane.showMessageDialog(getComponent(0),\"Failed\"); textField.setText(null); textField_1.setText(null); textField_2.setText(null); } textField.setText(null); textField_1.setText(null); textField_2.setText(null); } } } }); btnAdd.setBounds(86, 209, 89, 23); contentPane.add(btnAdd); JButton btnReset = new JButton(\"Reset\"); btnReset.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { textField.setText(null); textField_1.setText(null); textField_2.setText(null); } }); btnReset.setBounds(309, 209, 89, 23); contentPane.add(btnReset); } }"},{"file_path":"BankingSystem-master\\src\\GUI\\AddStudentAccount.java","file_content":"package GUI; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.SwingConstants; import java.awt.Font; import javax.swing.JTextField; import javax.swing.JButton; import java.awt.event.ActionListener; import java.awt.event.ActionEvent; import Data.FileIO; public class AddStudentAccount extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; private JTextField textField_1; private JTextField textField_2; public AddStudentAccount() { setTitle(\"Add Student Account\"); setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JLabel lblAddCurrentAccount = new JLabel(\"Add Student Account \"); lblAddCurrentAccount.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); lblAddCurrentAccount.setHorizontalAlignment(SwingConstants.CENTER); lblAddCurrentAccount.setBounds(10, 11, 414, 34); contentPane.add(lblAddCurrentAccount); JLabel lblName = new JLabel(\"Name:\"); lblName.setFont(new Font(\"Tahoma\", Font.PLAIN, 11)); lblName.setBounds(10, 72, 124, 14); contentPane.add(lblName); textField = new JTextField(); textField.setBounds(144, 69, 254, 20); contentPane.add(textField); textField.setColumns(10); JLabel lblBalance = new JLabel(\"Balance:\"); lblBalance.setFont(new Font(\"Tahoma\", Font.PLAIN, 11)); lblBalance.setBounds(10, 118, 124, 14); contentPane.add(lblBalance); textField_1 = new JTextField(); textField_1.setColumns(10); textField_1.setBounds(144, 115, 254, 20); contentPane.add(textField_1); JLabel lblMaximumWithdrawLimit = new JLabel(\"Institution Name:\"); lblMaximumWithdrawLimit.setFont(new Font(\"Tahoma\", Font.PLAIN, 11)); lblMaximumWithdrawLimit.setBounds(10, 163, 135, 14); contentPane.add(lblMaximumWithdrawLimit); textField_2 = new JTextField(); textField_2.setColumns(10); textField_2.setBounds(144, 160, 254, 20); contentPane.add(textField_2); JButton btnAdd = new JButton(\"Add\"); btnAdd.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { String name=textField.getText(); double bal=Double.parseDouble(textField_1.getText()); String insname=textField_2.getText(); if(bal<100) { JOptionPane.showMessageDialog(getComponent(0), \"Minimum Limit 5000\", \"Warning\", 0); textField.setText(null); textField_1.setText(null); textField_2.setText(null); } else { if(name==null||bal<=0||insname==null) { JOptionPane.showMessageDialog(getComponent(0),\"Typing Mismatch!! Try Again\"); textField.setText(null); textField_1.setText(null); textField_2.setText(null); } else { try { FileIO.bank.addAccount(name, bal, insname); } catch (Exception e1) { } int ch=JOptionPane.showConfirmDialog(getComponent(0), \"Confirm?\"); if(ch==0) { int index = 0; try { index = FileIO.bank.addAccount(name, bal, insname); } catch (Exception e1) { } DisplayList.arr.addElement(FileIO.bank.getAccounts()[index].toString()); JOptionPane.showMessageDialog(getComponent(0),\"Added Successfully\"); dispose(); } else { JOptionPane.showMessageDialog(getComponent(0),\"Failed\"); textField.setText(null); textField_1.setText(null); textField_2.setText(null); } } } } }); btnAdd.setBounds(86, 209, 89, 23); contentPane.add(btnAdd); JButton btnReset = new JButton(\"Reset\"); btnReset.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { textField.setText(null); textField_1.setText(null); textField_2.setText(null); } }); btnReset.setBounds(309, 209, 89, 23); contentPane.add(btnReset); } }"},{"file_path":"BankingSystem-master\\src\\GUI\\DepositAcc.java","file_content":"package GUI; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import Exceptions.AccNotFound; import Exceptions.InvalidAmount; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.SwingConstants; import java.awt.Font; import javax.swing.JTextField; import javax.swing.JButton; import java.awt.event.ActionListener; import java.io.Serializable; import java.awt.event.ActionEvent; import Data.FileIO; import java.awt.SystemColor; public class DepositAcc extends JFrame implements Serializable { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; private JTextField textField_1; public DepositAcc() { setTitle(\"Deposit To Account\"); setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(SystemColor.activeCaption); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JLabel lblDepositToAccount = new JLabel(\"Deposit To Account\"); lblDepositToAccount.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); lblDepositToAccount.setHorizontalAlignment(SwingConstants.CENTER); lblDepositToAccount.setBounds(10, 11, 414, 36); contentPane.add(lblDepositToAccount); JLabel lblName = new JLabel(\"Account Number:\"); lblName.setHorizontalAlignment(SwingConstants.RIGHT); lblName.setBounds(0, 86, 111, 14); contentPane.add(lblName); textField = new JTextField(); textField.setBounds(121, 83, 211, 20); contentPane.add(textField); textField.setColumns(10); textField_1 = new JTextField(); textField_1.setColumns(10); textField_1.setBounds(121, 147, 211, 20); contentPane.add(textField_1); JLabel lblAmount = new JLabel(\"Amount:\"); lblAmount.setHorizontalAlignment(SwingConstants.RIGHT); lblAmount.setBounds(0, 150, 111, 14); contentPane.add(lblAmount); JButton btnDeposit = new JButton(\"Deposit\"); btnDeposit.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { String aacountNum; double amt; aacountNum=textField.getText(); amt=Double.parseDouble(textField_1.getText()); int a=JOptionPane.showConfirmDialog(getComponent(0), \"Confirm?\"); if(a==0) { try { FileIO.bank.deposit(aacountNum, amt); JOptionPane.showMessageDialog(getComponent(0),\"Deposit Successful\"); dispose(); textField.setText(null); textField_1.setText(null); } catch (InvalidAmount e1) { JOptionPane.showMessageDialog(getComponent(0), \"Sorry! Deposit Amount is Invalid\"); } catch (AccNotFound e1) { JOptionPane.showMessageDialog(getComponent(0), \"Sorry! Account is Not Found\"); } finally { textField.setText(null); textField_1.setText(null); } } else { textField.setText(null); textField_1.setText(null); } } }); btnDeposit.setBounds(73, 212, 89, 23); contentPane.add(btnDeposit); JButton btnReset = new JButton(\"Reset\"); btnReset.setBounds(243, 212, 89, 23); contentPane.add(btnReset); btnReset.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { textField.setText(null); textField_1.setText(null); } }); } }"},{"file_path":"BankingSystem-master\\src\\GUI\\DisplayList.java","file_content":"package GUI; import javax.swing.DefaultListModel; import Data.FileIO; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import javax.swing.JLabel; import javax.swing.SwingConstants; import java.awt.Font; import javax.swing.JScrollPane; import javax.swing.ScrollPaneConstants; import javax.swing.JList; import java.awt.SystemColor; public class DisplayList extends JFrame { private static final long serialVersionUID = 1L; static DefaultListModel<String> arr = new DefaultListModel<String>(); private JPanel contentPane; @SuppressWarnings({ }) public DisplayList() { setTitle(\"Account List\"); setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); setBounds(100, 100, 649, 474); contentPane = new JPanel(); contentPane.setBackground(SystemColor.activeCaption); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JLabel lblAccountList = new JLabel(\"Account List\"); lblAccountList.setFont(new Font(\"Tahoma\", Font.BOLD, 18)); lblAccountList.setHorizontalAlignment(SwingConstants.CENTER); lblAccountList.setBounds(0, 11, 623, 31); contentPane.add(lblAccountList); JScrollPane scrollPane = new JScrollPane(); scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS); scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS); scrollPane.setBounds(10, 66, 613, 358); contentPane.add(scrollPane); arr=FileIO.bank.display(); JList<String> list = new JList<String>(arr); scrollPane.setViewportView(list); } }"},{"file_path":"BankingSystem-master\\src\\GUI\\Login.java","file_content":"package GUI; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JPasswordField; import java.awt.Font; import javax.swing.JTextField; import javax.swing.JButton; import java.awt.event.ActionListener; import java.awt.event.ActionEvent; public class Login { public JFrame frame; private JTextField textField; private JPasswordField textField_1; public Login() { initialize(); } private void initialize() { frame = new JFrame(); frame.setBounds(100, 100, 450, 300); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setTitle(\"Banking System\"); frame.getContentPane().setLayout(null); JLabel label = new JLabel(\"Banking System\"); label.setFont(new Font(\"Tahoma\", Font.BOLD, 17)); label.setBounds(147, 11, 151, 41); frame.getContentPane().add(label); JLabel lblLoginScreen = new JLabel(\"Login Screen\"); lblLoginScreen.setFont(new Font(\"Tahoma\", Font.PLAIN, 13)); lblLoginScreen.setBounds(170, 63, 101, 23); frame.getContentPane().add(lblLoginScreen); JLabel lblUsername = new JLabel(\"Username:\"); lblUsername.setFont(new Font(\"Tahoma\", Font.PLAIN, 12)); lblUsername.setBounds(55, 119, 64, 23); frame.getContentPane().add(lblUsername); JLabel lblPassword = new JLabel(\"Password:\"); lblPassword.setFont(new Font(\"Tahoma\", Font.PLAIN, 12)); lblPassword.setBounds(55, 159, 64, 23); frame.getContentPane().add(lblPassword); textField = new JTextField(); textField.setBounds(130, 121, 86, 20); frame.getContentPane().add(textField); textField.setColumns(10); textField.setText(\"admin\"); textField_1 = new JPasswordField(); textField_1.setBounds(130, 161, 86, 20); frame.getContentPane().add(textField_1); textField_1.setColumns(10); JButton btnLogin = new JButton(\"Login\"); btnLogin.addActionListener(new ActionListener() { @SuppressWarnings(\"deprecation\") public void actionPerformed(ActionEvent e) { String user,pass; textField.setText(\"admin\"); user=\"admin\"; pass=textField_1.getText(); if((user.equals(\"admin\")&&(pass.equals(\"admin\")))) { JOptionPane.showMessageDialog(frame.getComponent(0), \"Login Successfully\"); frame.setVisible(false); GUIForm.menu.setVisible(true); } else { JOptionPane.showMessageDialog(frame.getComponent(0), \"Login Failed\"); } } }); btnLogin.setBounds(260, 138, 89, 23); frame.getContentPane().add(btnLogin); } }"}]}}
{"project_id":11,"chunk_id":1,"content":{"main_file_path":"BankingSystem-master\\src\\GUI\\GUIForm.java","main_file_content":"package GUI; import java.awt.Point; public class GUIForm { public static Login login= new Login(); public static Menu menu= new Menu(); public static AddAccount addaccount= new AddAccount(); public static AddCurrentAccount addcurrentacc= new AddCurrentAccount(); public static AddSavingsAccount addsavingsaccount = new AddSavingsAccount(); public static AddStudentAccount addstudentaccount = new AddStudentAccount(); public static DisplayList displaylist= new DisplayList(); public static DepositAcc depositacc= new DepositAcc(); public static WithdrawAcc withdraw = new WithdrawAcc(); public static void UpdateDisplay() { if(displaylist.isVisible()) { Point O= displaylist.getLocation(); displaylist.dispose(); displaylist = new DisplayList(); displaylist.setVisible(true); displaylist.setLocation(O);; } else { displaylist = new DisplayList(); } } }","dependencies":[{"file_path":"BankingSystem-master\\src\\GUI\\Menu.java","file_content":"package GUI; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import Data.FileIO; import javax.swing.JLabel; import javax.swing.JOptionPane; import java.awt.Font; import java.awt.Image; import javax.swing.JButton; import javax.swing.SwingConstants; import java.awt.event.ActionListener; import java.awt.event.ActionEvent; import java.awt.SystemColor; import javax.swing.ImageIcon; import javax.swing.Icon; public class Menu extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; public Menu() { setTitle(\"Banking System\"); setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE); setBounds(100, 100, 649, 474); contentPane = new JPanel(); contentPane.setBackground(SystemColor.activeCaption); contentPane.setForeground(SystemColor.activeCaption); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JLabel lblBankingSystem = new JLabel(\"Banking System\"); lblBankingSystem.setHorizontalAlignment(SwingConstants.CENTER); lblBankingSystem.setFont(new Font(\"Tahoma\", Font.BOLD, 24)); lblBankingSystem.setBounds(0, 69, 613, 59); contentPane.add(lblBankingSystem); FileIO.Read(); JButton btnDepositToAccount = new JButton(\"Deposit To Account\"); btnDepositToAccount.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { if(!GUIForm.depositacc.isVisible()) { GUIForm.depositacc.setVisible(true); } else { JOptionPane.showMessageDialog(getComponent(0), \"Already Opened\", \"Warning\", 0); } } }); btnDepositToAccount.setBounds(217, 213, 194, 33); contentPane.add(btnDepositToAccount); JButton btnWithdrawFromAccount = new JButton(\"Withdraw From Account\"); btnWithdrawFromAccount.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { if(!GUIForm.withdraw.isVisible()) { GUIForm.withdraw.setVisible(true); } else { JOptionPane.showMessageDialog(getComponent(0), \"Already Opened\", \"Warning\", 0); } } }); btnWithdrawFromAccount.setBounds(217, 256, 194, 33); contentPane.add(btnWithdrawFromAccount); JButton btnDisplayAccountList = new JButton(\"Display Account List\"); btnDisplayAccountList.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { if(!GUIForm.displaylist.isVisible()) { GUIForm.displaylist.setVisible(true); } else { JOptionPane.showMessageDialog(getComponent(0), \"Already Opened\", \"Warning\", 0); } } }); btnDisplayAccountList.setBounds(217, 300, 194, 32); contentPane.add(btnDisplayAccountList); JButton btnExit = new JButton(\"Exit\"); btnExit.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent arg0) { JOptionPane.showMessageDialog(getComponent(0), \"Thanks For Using\") ; FileIO.Write(); System.exit(0); } }); btnExit.setBounds(217, 343, 194, 33); contentPane.add(btnExit); JButton btnNewButton = new JButton(\"Add Account\"); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { if(!GUIForm.addaccount.isVisible()) { GUIForm.addaccount.setVisible(true); } else { JOptionPane.showMessageDialog(getComponent(0), \"Already Opened\", \"Warning\", 0); } } }); btnNewButton.setBounds(217, 166, 194, 36); contentPane.add(btnNewButton); JLabel lblNewLabel = new JLabel(\"New label\"); lblNewLabel.setIcon(new ImageIcon(Menu.class.getResource(\"/img/1.png\"))); lblNewLabel.setBounds(397, 166, 216, 213); contentPane.add(lblNewLabel); ImageIcon icon = new ImageIcon(\"1.png\"); } }"},{"file_path":"BankingSystem-master\\src\\GUI\\WithdrawAcc.java","file_content":"package GUI; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import Exceptions.AccNotFound; import Exceptions.InvalidAmount; import Exceptions.MaxBalance; import Exceptions.MaxWithdraw; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.SwingConstants; import java.awt.Font; import javax.swing.JTextField; import javax.swing.JButton; import java.awt.event.ActionListener; import java.io.Serializable; import java.awt.event.ActionEvent; import Data.FileIO; import java.awt.SystemColor; public class WithdrawAcc extends JFrame implements Serializable { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; private JTextField textField_1; public WithdrawAcc() { setTitle(\"Withdraw From Account\"); setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(SystemColor.activeCaption); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JLabel lblDepositToAccount = new JLabel(\"Withdraw From Account\"); lblDepositToAccount.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); lblDepositToAccount.setHorizontalAlignment(SwingConstants.CENTER); lblDepositToAccount.setBounds(10, 11, 414, 36); contentPane.add(lblDepositToAccount); JLabel lblName = new JLabel(\"Account Number:\"); lblName.setHorizontalAlignment(SwingConstants.RIGHT); lblName.setBounds(0, 86, 106, 14); contentPane.add(lblName); textField = new JTextField(); textField.setBounds(116, 83, 216, 20); contentPane.add(textField); textField.setColumns(10); textField_1 = new JTextField(); textField_1.setColumns(10); textField_1.setBounds(116, 147, 216, 20); contentPane.add(textField_1); JLabel lblAmount = new JLabel(\"Amount:\"); lblAmount.setHorizontalAlignment(SwingConstants.RIGHT); lblAmount.setBounds(10, 150, 96, 14); contentPane.add(lblAmount); JButton btnDeposit = new JButton(\"Withdraw\"); btnDeposit.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { String aacountNum; double amt; aacountNum=textField.getText(); amt=Double.parseDouble(textField_1.getText()); try { int a=JOptionPane.showConfirmDialog(getComponent(0), \"Confirm?\"); if(a==0) { FileIO.bank.withdraw(aacountNum, amt); JOptionPane.showMessageDialog(getComponent(0),\"Withdraw Successful\"); dispose(); } else { textField.setText(null); textField_1.setText(null); } } catch (MaxBalance e1) { JOptionPane.showMessageDialog(getComponent(0), \"Insufficient Balance\"); JOptionPane.showMessageDialog(getComponent(0),\"Failed\"); textField.setText(null); textField_1.setText(null); } catch (AccNotFound e1) { JOptionPane.showMessageDialog(getComponent(0), \"Sorry! Account Not Found\"); JOptionPane.showMessageDialog(getComponent(0),\"Failed\"); textField.setText(null); textField_1.setText(null); } catch (MaxWithdraw e1) { JOptionPane.showMessageDialog(getComponent(0), \"Maximum Withdraw Limit Exceed\"); JOptionPane.showMessageDialog(getComponent(0),\"Failed\"); textField.setText(null); textField_1.setText(null); } catch (InvalidAmount e1) { JOptionPane.showMessageDialog(getComponent(0), \"Invalid Amount\"); JOptionPane.showMessageDialog(getComponent(0),\"Failed\"); textField.setText(null); textField_1.setText(null); } textField.setText(null); textField_1.setText(null); } }); btnDeposit.setBounds(73, 212, 89, 23); contentPane.add(btnDeposit); JButton btnReset = new JButton(\"Reset\"); btnReset.setBounds(243, 212, 89, 23); contentPane.add(btnReset); btnReset.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { textField.setText(null); textField_1.setText(null); } }); } }"}]}}
{"project_id":11,"chunk_id":0,"content":{"main_file_path":"BankingSystem-master\\src\\GUI\\Login.java","main_file_content":"package GUI; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JPasswordField; import java.awt.Font; import javax.swing.JTextField; import javax.swing.JButton; import java.awt.event.ActionListener; import java.awt.event.ActionEvent; public class Login { public JFrame frame; private JTextField textField; private JPasswordField textField_1; public Login() { initialize(); } private void initialize() { frame = new JFrame(); frame.setBounds(100, 100, 450, 300); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setTitle(\"Banking System\"); frame.getContentPane().setLayout(null); JLabel label = new JLabel(\"Banking System\"); label.setFont(new Font(\"Tahoma\", Font.BOLD, 17)); label.setBounds(147, 11, 151, 41); frame.getContentPane().add(label); JLabel lblLoginScreen = new JLabel(\"Login Screen\"); lblLoginScreen.setFont(new Font(\"Tahoma\", Font.PLAIN, 13)); lblLoginScreen.setBounds(170, 63, 101, 23); frame.getContentPane().add(lblLoginScreen); JLabel lblUsername = new JLabel(\"Username:\"); lblUsername.setFont(new Font(\"Tahoma\", Font.PLAIN, 12)); lblUsername.setBounds(55, 119, 64, 23); frame.getContentPane().add(lblUsername); JLabel lblPassword = new JLabel(\"Password:\"); lblPassword.setFont(new Font(\"Tahoma\", Font.PLAIN, 12)); lblPassword.setBounds(55, 159, 64, 23); frame.getContentPane().add(lblPassword); textField = new JTextField(); textField.setBounds(130, 121, 86, 20); frame.getContentPane().add(textField); textField.setColumns(10); textField.setText(\"admin\"); textField_1 = new JPasswordField(); textField_1.setBounds(130, 161, 86, 20); frame.getContentPane().add(textField_1); textField_1.setColumns(10); JButton btnLogin = new JButton(\"Login\"); btnLogin.addActionListener(new ActionListener() { @SuppressWarnings(\"deprecation\") public void actionPerformed(ActionEvent e) { String user,pass; textField.setText(\"admin\"); user=\"admin\"; pass=textField_1.getText(); if((user.equals(\"admin\")&&(pass.equals(\"admin\")))) { JOptionPane.showMessageDialog(frame.getComponent(0), \"Login Successfully\"); frame.setVisible(false); GUIForm.menu.setVisible(true); } else { JOptionPane.showMessageDialog(frame.getComponent(0), \"Login Failed\"); } } }); btnLogin.setBounds(260, 138, 89, 23); frame.getContentPane().add(btnLogin); } }","dependencies":[]}}
{"project_id":11,"chunk_id":0,"content":{"main_file_path":"BankingSystem-master\\src\\GUI\\Menu.java","main_file_content":"package GUI; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import Data.FileIO; import javax.swing.JLabel; import javax.swing.JOptionPane; import java.awt.Font; import java.awt.Image; import javax.swing.JButton; import javax.swing.SwingConstants; import java.awt.event.ActionListener; import java.awt.event.ActionEvent; import java.awt.SystemColor; import javax.swing.ImageIcon; import javax.swing.Icon; public class Menu extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; public Menu() { setTitle(\"Banking System\"); setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE); setBounds(100, 100, 649, 474); contentPane = new JPanel(); contentPane.setBackground(SystemColor.activeCaption); contentPane.setForeground(SystemColor.activeCaption); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JLabel lblBankingSystem = new JLabel(\"Banking System\"); lblBankingSystem.setHorizontalAlignment(SwingConstants.CENTER); lblBankingSystem.setFont(new Font(\"Tahoma\", Font.BOLD, 24)); lblBankingSystem.setBounds(0, 69, 613, 59); contentPane.add(lblBankingSystem); FileIO.Read(); JButton btnDepositToAccount = new JButton(\"Deposit To Account\"); btnDepositToAccount.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { if(!GUIForm.depositacc.isVisible()) { GUIForm.depositacc.setVisible(true); } else { JOptionPane.showMessageDialog(getComponent(0), \"Already Opened\", \"Warning\", 0); } } }); btnDepositToAccount.setBounds(217, 213, 194, 33); contentPane.add(btnDepositToAccount); JButton btnWithdrawFromAccount = new JButton(\"Withdraw From Account\"); btnWithdrawFromAccount.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { if(!GUIForm.withdraw.isVisible()) { GUIForm.withdraw.setVisible(true); } else { JOptionPane.showMessageDialog(getComponent(0), \"Already Opened\", \"Warning\", 0); } } }); btnWithdrawFromAccount.setBounds(217, 256, 194, 33); contentPane.add(btnWithdrawFromAccount); JButton btnDisplayAccountList = new JButton(\"Display Account List\"); btnDisplayAccountList.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { if(!GUIForm.displaylist.isVisible()) { GUIForm.displaylist.setVisible(true); } else { JOptionPane.showMessageDialog(getComponent(0), \"Already Opened\", \"Warning\", 0); } } }); btnDisplayAccountList.setBounds(217, 300, 194, 32); contentPane.add(btnDisplayAccountList); JButton btnExit = new JButton(\"Exit\"); btnExit.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent arg0) { JOptionPane.showMessageDialog(getComponent(0), \"Thanks For Using\") ; FileIO.Write(); System.exit(0); } }); btnExit.setBounds(217, 343, 194, 33); contentPane.add(btnExit); JButton btnNewButton = new JButton(\"Add Account\"); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { if(!GUIForm.addaccount.isVisible()) { GUIForm.addaccount.setVisible(true); } else { JOptionPane.showMessageDialog(getComponent(0), \"Already Opened\", \"Warning\", 0); } } }); btnNewButton.setBounds(217, 166, 194, 36); contentPane.add(btnNewButton); JLabel lblNewLabel = new JLabel(\"New label\"); lblNewLabel.setIcon(new ImageIcon(Menu.class.getResource(\"/img/1.png\"))); lblNewLabel.setBounds(397, 166, 216, 213); contentPane.add(lblNewLabel); ImageIcon icon = new ImageIcon(\"1.png\"); } }","dependencies":[{"file_path":"BankingSystem-master\\src\\Data\\FileIO.java","file_content":"package Data; import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import Bank.*; public class FileIO { public static Bank bank=null; public static void Read() { FileInputStream fis =null; ObjectInputStream oin=null; try { fis =new FileInputStream(\"data\"); oin=new ObjectInputStream(fis); FileIO.bank=(Bank)oin.readObject(); } catch (Exception en) { FileIO.bank=new Bank(); } finally{ try{ if(oin!=null) oin.close(); if(fis!=null) fis.close(); } catch (IOException en) { } } } public static void Write() { try { FileOutputStream fout=new FileOutputStream(\"data\"); ObjectOutputStream out=new ObjectOutputStream(fout); out.writeObject(FileIO.bank); out.flush(); fout.close(); } catch(Exception en) { } } }"}]}}
{"project_id":11,"chunk_id":0,"content":{"main_file_path":"BankingSystem-master\\src\\GUI\\WithdrawAcc.java","main_file_content":"package GUI; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import Exceptions.AccNotFound; import Exceptions.InvalidAmount; import Exceptions.MaxBalance; import Exceptions.MaxWithdraw; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.SwingConstants; import java.awt.Font; import javax.swing.JTextField; import javax.swing.JButton; import java.awt.event.ActionListener; import java.io.Serializable; import java.awt.event.ActionEvent; import Data.FileIO; import java.awt.SystemColor; public class WithdrawAcc extends JFrame implements Serializable { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; private JTextField textField_1; public WithdrawAcc() { setTitle(\"Withdraw From Account\"); setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(SystemColor.activeCaption); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JLabel lblDepositToAccount = new JLabel(\"Withdraw From Account\"); lblDepositToAccount.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); lblDepositToAccount.setHorizontalAlignment(SwingConstants.CENTER); lblDepositToAccount.setBounds(10, 11, 414, 36); contentPane.add(lblDepositToAccount); JLabel lblName = new JLabel(\"Account Number:\"); lblName.setHorizontalAlignment(SwingConstants.RIGHT); lblName.setBounds(0, 86, 106, 14); contentPane.add(lblName); textField = new JTextField(); textField.setBounds(116, 83, 216, 20); contentPane.add(textField); textField.setColumns(10); textField_1 = new JTextField(); textField_1.setColumns(10); textField_1.setBounds(116, 147, 216, 20); contentPane.add(textField_1); JLabel lblAmount = new JLabel(\"Amount:\"); lblAmount.setHorizontalAlignment(SwingConstants.RIGHT); lblAmount.setBounds(10, 150, 96, 14); contentPane.add(lblAmount); JButton btnDeposit = new JButton(\"Withdraw\"); btnDeposit.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { String aacountNum; double amt; aacountNum=textField.getText(); amt=Double.parseDouble(textField_1.getText()); try { int a=JOptionPane.showConfirmDialog(getComponent(0), \"Confirm?\"); if(a==0) { FileIO.bank.withdraw(aacountNum, amt); JOptionPane.showMessageDialog(getComponent(0),\"Withdraw Successful\"); dispose(); } else { textField.setText(null); textField_1.setText(null); } } catch (MaxBalance e1) { JOptionPane.showMessageDialog(getComponent(0), \"Insufficient Balance\"); JOptionPane.showMessageDialog(getComponent(0),\"Failed\"); textField.setText(null); textField_1.setText(null); } catch (AccNotFound e1) { JOptionPane.showMessageDialog(getComponent(0), \"Sorry! Account Not Found\"); JOptionPane.showMessageDialog(getComponent(0),\"Failed\"); textField.setText(null); textField_1.setText(null); } catch (MaxWithdraw e1) { JOptionPane.showMessageDialog(getComponent(0), \"Maximum Withdraw Limit Exceed\"); JOptionPane.showMessageDialog(getComponent(0),\"Failed\"); textField.setText(null); textField_1.setText(null); } catch (InvalidAmount e1) { JOptionPane.showMessageDialog(getComponent(0), \"Invalid Amount\"); JOptionPane.showMessageDialog(getComponent(0),\"Failed\"); textField.setText(null); textField_1.setText(null); } textField.setText(null); textField_1.setText(null); } }); btnDeposit.setBounds(73, 212, 89, 23); contentPane.add(btnDeposit); JButton btnReset = new JButton(\"Reset\"); btnReset.setBounds(243, 212, 89, 23); contentPane.add(btnReset); btnReset.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { textField.setText(null); textField_1.setText(null); } }); } }","dependencies":[{"file_path":"BankingSystem-master\\src\\Exceptions\\AccNotFound.java","file_content":"package Exceptions; public class AccNotFound extends Exception { private static final long serialVersionUID = 1L; public AccNotFound(String s) { super(s); } }"},{"file_path":"BankingSystem-master\\src\\Exceptions\\InvalidAmount.java","file_content":"package Exceptions; public class InvalidAmount extends Exception { private static final long serialVersionUID = 1L; public InvalidAmount(String s) { super(s); } }"},{"file_path":"BankingSystem-master\\src\\Exceptions\\MaxBalance.java","file_content":"package Exceptions; public class MaxBalance extends Exception { private static final long serialVersionUID = 1L; public MaxBalance(String s) { super(s); } }"},{"file_path":"BankingSystem-master\\src\\Exceptions\\MaxWithdraw.java","file_content":"package Exceptions; public class MaxWithdraw extends Exception { private static final long serialVersionUID = 1L; public MaxWithdraw(String s) { super(s); } }"}]}}
{"project_id":12,"chunk_id":0,"content":{"main_file_path":"Basic_Bank_System\\Basic_Bank_System.java","main_file_content":"import java.util.HashMap; import java.util.Map; import java.util.Scanner; class Bank { private Map<String, Account> accounts; public Bank() { this.accounts = new HashMap<>(); } public void addAccount(String accountNumber, String customerName, double balance) { Account account = new Account(accountNumber, customerName, balance); accounts.put(accountNumber, account); } public void displayAccountInfo(String accountNumber) { if (accounts.containsKey(accountNumber)) { Account account = accounts.get(accountNumber); System.out.println(\"Account Number: \" + account.getAccountNumber()); System.out.println(\"Customer Name: \" + account.getCustomerName()); System.out.println(\"Balance: $\" + account.getBalance()); } else { System.out.println(\"Account not found!\"); } } public void performTransaction(String accountNumber, double amount) { if (accounts.containsKey(accountNumber)) { Account account = accounts.get(accountNumber); account.deposit(amount); System.out.println(\"Transaction successful. Updated balance: $\" + account.getBalance()); } else { System.out.println(\"Account not found!\"); } } } class Account { private String accountNumber; private String customerName; private double balance; public Account(String accountNumber, String customerName, double balance) { this.accountNumber = accountNumber; this.customerName = customerName; this.balance = balance; } public String getAccountNumber() { return accountNumber; } public String getCustomerName() { return customerName; } public double getBalance() { return balance; } public void deposit(double amount) { balance += amount; } } public class BankingSystem { public static void main(String[] args) { Bank bank = new Bank(); bank.addAccount(\"101\", \"John Doe\", 1000.0); bank.addAccount(\"102\", \"Jane Smith\", 1500.0); bank.performTransaction(\"101\", 500.0); bank.performTransaction(\"103\", 200.0); bank.displayAccountInfo(\"101\"); bank.displayAccountInfo(\"102\"); } }","dependencies":[]}}
{"project_id":13,"chunk_id":0,"content":{"main_file_path":"battleship-style-game-master\\DotCom.java","main_file_content":"import java.util.ArrayList; public class DotCom { public ArrayList<String> locationCells; private String name; public String checkYourself(String userInput) { String result = \"miss\"; int index = locationCells.indexOf(userInput); if (index >= 0) { locationCells.remove(index); if (locationCells.isEmpty()) { result = \"kill\"; } else { result = \"hit\"; } } return result; } public void setLocationCells(ArrayList<String> locationCells) { this.locationCells = locationCells; } public void setName(String name) { this.name = name; } public String getName() { return name; } }","dependencies":[]}}
{"project_id":13,"chunk_id":0,"content":{"main_file_path":"battleship-style-game-master\\DotComBust.java","main_file_content":"import java.util.ArrayList; public class DotComBust { private GameHelper helper = new GameHelper(); private ArrayList<DotCom> dotComList = new ArrayList<DotCom>(); private int numOfGuesses; public void setUpGame() { DotCom one = new DotCom(); one.setName(\"Pets.com\"); DotCom two = new DotCom(); two.setName(\"eToys.com\"); DotCom three = new DotCom(); three.setName(\"Go2.com\"); dotComList.add(one); dotComList.add(two); dotComList.add(three); System.out.println(\"Your goal is to sink three dot coms.\"); System.out.println(\"Pets.com, eToys.com, Go2.com\"); System.out.println(\"Try to sink them all in the fewest number of guesses\"); for (DotCom dotCom : dotComList) { ArrayList<String> newLoacation = helper.placeDotCom(3); dotCom.setLocationCells(newLoacation); } } public void startPlaying() { ArrayList<String> locationCells = new ArrayList<String>(); for (DotCom dotCom : dotComList) { locationCells.addAll(dotCom.locationCells); } ArrayList<String> wrongUserGuesses = new ArrayList<String>(); ArrayList<String> correctUserGuesses = new ArrayList<String>(); while (!dotComList.isEmpty()) { helper.gridDisplay(correctUserGuesses, wrongUserGuesses); String userGuess = helper.getUserInput(\"enter a guess\"); if (locationCells.contains(userGuess)) { correctUserGuesses.add(userGuess); } else { wrongUserGuesses.add(userGuess); } checkUserGuess(userGuess); } finishGame(); } public void checkUserGuess(String userGuess) { numOfGuesses += 1; String result = \"miss\"; for (DotCom dotCom : dotComList) { result = dotCom.checkYourself(userGuess); if (result.equals(\"hit\")) { break; } if (result == \"kill\") { result += \" \" + dotCom.getName(); dotComList.remove(dotCom); break; } } System.out.println(\"Result: \" + result); } public void finishGame() { System.out.println(\"All Dot Coms are dead! Your stock is now worthless.\"); if (numOfGuesses <= 18) { System.out.println(\"It only took you \" + numOfGuesses + \" guesses.\"); System.out.println(\"You got out before your options sank.\"); } else { System.out.println(\"Took you long enough. \" + numOfGuesses + \" guesses.\"); System.out.println(\"Fish are dancing with your options.\"); } } public static void main(String[] args) { DotComBust game = new DotComBust(); game.setUpGame(); game.startPlaying(); } }","dependencies":[{"file_path":"battleship-style-game-master\\DotCom.java","file_content":"import java.util.ArrayList; public class DotCom { public ArrayList<String> locationCells; private String name; public String checkYourself(String userInput) { String result = \"miss\"; int index = locationCells.indexOf(userInput); if (index >= 0) { locationCells.remove(index); if (locationCells.isEmpty()) { result = \"kill\"; } else { result = \"hit\"; } } return result; } public void setLocationCells(ArrayList<String> locationCells) { this.locationCells = locationCells; } public void setName(String name) { this.name = name; } public String getName() { return name; } }"},{"file_path":"battleship-style-game-master\\GameHelper.java","file_content":"import java.io.*; import java.util.*; public class GameHelper { private static final String alphabet = \"abcdefg\"; private int gridLength = 7; private int gridSize = 49; private int[] grid = new int[gridSize]; private int comCount = 0; public void gridDisplay(ArrayList<String> correctUserGuesses, ArrayList<String> wrongUserGuesses) { ArrayList<String> aList = new ArrayList<String>(); aList.add(\"a\"); aList.add(\"b\"); aList.add(\"c\"); aList.add(\"d\"); aList.add(\"e\"); aList.add(\"f\"); aList.add(\"g\"); System.out.println(\" + - + - + - + - + - + - + - +\"); for (String s : aList) { System.out.print(s + \" |\"); for (int i = 0; i < gridSize / aList.size(); i++) { if (correctUserGuesses.contains(s + i)) { System.out.print(\" 1 \"); } else if (wrongUserGuesses.contains(s + i)) { System.out.print(\" X \"); } else { System.out.print(\" \"); } System.out.print(\"|\"); } System.out.println(\"\\n + - + - + - + - + - + - + - +\"); } System.out.println(\" 0 1 2 3 4 5 6\"); } public String getUserInput(String prompt) { String inputLine = null; System.out.print(prompt + \" \"); try { BufferedReader is = new BufferedReader(new InputStreamReader(System.in)); inputLine = is.readLine(); if (inputLine.length() == 0) return null; } catch (IOException e) { System.out.println(\"IOException: \" + e); } return inputLine.toLowerCase(); } public ArrayList<String> placeDotCom(int comSize) { ArrayList<String> alphaCells = new ArrayList<String>(); String[] alphacoords = new String[comSize]; String temp = null; int[] coords = new int[comSize]; int attempts = 0; boolean success = false; int location = 0; comCount++; int incr = 1; if ((comCount % 2) == 1) { incr = gridLength; } while (!success & attempts++ < 200) { location = (int) (Math.random() * gridSize); int x = 0; success = true; while (success && x < comSize) { if (grid[location] == 0) { coords[x++] = location; location += incr; if (location >= gridSize) { success = false; } if (x > 0 && (location % gridLength == 0)) { success = false; } } else { success = false; } } } int x = 0; int row = 0; int column = 0; while (x < comSize) { grid[coords[x]] = 1; row = (int) (coords[x] / gridLength); column = coords[x] % gridLength; temp = String.valueOf(alphabet.charAt(column)); alphaCells.add(temp.concat(Integer.toString(row))); x++; } return alphaCells; } }"}]}}
{"project_id":13,"chunk_id":0,"content":{"main_file_path":"battleship-style-game-master\\GameHelper.java","main_file_content":"import java.io.*; import java.util.*; public class GameHelper { private static final String alphabet = \"abcdefg\"; private int gridLength = 7; private int gridSize = 49; private int[] grid = new int[gridSize]; private int comCount = 0; public void gridDisplay(ArrayList<String> correctUserGuesses, ArrayList<String> wrongUserGuesses) { ArrayList<String> aList = new ArrayList<String>(); aList.add(\"a\"); aList.add(\"b\"); aList.add(\"c\"); aList.add(\"d\"); aList.add(\"e\"); aList.add(\"f\"); aList.add(\"g\"); System.out.println(\" + - + - + - + - + - + - + - +\"); for (String s : aList) { System.out.print(s + \" |\"); for (int i = 0; i < gridSize / aList.size(); i++) { if (correctUserGuesses.contains(s + i)) { System.out.print(\" 1 \"); } else if (wrongUserGuesses.contains(s + i)) { System.out.print(\" X \"); } else { System.out.print(\" \"); } System.out.print(\"|\"); } System.out.println(\"\\n + - + - + - + - + - + - + - +\"); } System.out.println(\" 0 1 2 3 4 5 6\"); } public String getUserInput(String prompt) { String inputLine = null; System.out.print(prompt + \" \"); try { BufferedReader is = new BufferedReader(new InputStreamReader(System.in)); inputLine = is.readLine(); if (inputLine.length() == 0) return null; } catch (IOException e) { System.out.println(\"IOException: \" + e); } return inputLine.toLowerCase(); } public ArrayList<String> placeDotCom(int comSize) { ArrayList<String> alphaCells = new ArrayList<String>(); String[] alphacoords = new String[comSize]; String temp = null; int[] coords = new int[comSize]; int attempts = 0; boolean success = false; int location = 0; comCount++; int incr = 1; if ((comCount % 2) == 1) { incr = gridLength; } while (!success & attempts++ < 200) { location = (int) (Math.random() * gridSize); int x = 0; success = true; while (success && x < comSize) { if (grid[location] == 0) { coords[x++] = location; location += incr; if (location >= gridSize) { success = false; } if (x > 0 && (location % gridLength == 0)) { success = false; } } else { success = false; } } } int x = 0; int row = 0; int column = 0; while (x < comSize) { grid[coords[x]] = 1; row = (int) (coords[x] / gridLength); column = coords[x] % gridLength; temp = String.valueOf(alphabet.charAt(column)); alphaCells.add(temp.concat(Integer.toString(row))); x++; } return alphaCells; } }","dependencies":[]}}
{"project_id":14,"chunk_id":0,"content":{"main_file_path":"bFit-A-Cognitive-Game-master\\app\\src\\androidTest\\java\\com\\example\\dk\\bfit1\\ExampleInstrumentedTest.java","main_file_content":"package com.example.dk.bfit1; import android.content.Context; import android.support.test.InstrumentationRegistry; import android.support.test.runner.AndroidJUnit4; import org.junit.Test; import org.junit.runner.RunWith; import static org.junit.Assert.*; @RunWith(AndroidJUnit4.class) public class ExampleInstrumentedTest { @Test public void useAppContext() throws Exception { Context appContext = InstrumentationRegistry.getTargetContext(); assertEquals(\"com.example.dk.bfit1\", appContext.getPackageName()); } }","dependencies":[]}}
{"project_id":14,"chunk_id":0,"content":{"main_file_path":"bFit-A-Cognitive-Game-master\\app\\src\\main\\java\\com\\example\\dk\\bfit1\\About.java","main_file_content":"package com.example.dk.bfit1; public class About { }","dependencies":[]}}
{"project_id":14,"chunk_id":0,"content":{"main_file_path":"bFit-A-Cognitive-Game-master\\app\\src\\main\\java\\com\\example\\dk\\bfit1\\Help.java","main_file_content":"package com.example.dk.bfit1; public class Help { }","dependencies":[]}}
{"project_id":14,"chunk_id":0,"content":{"main_file_path":"bFit-A-Cognitive-Game-master\\app\\src\\main\\java\\com\\example\\dk\\bfit1\\MainActivity.java","main_file_content":"package com.example.dk.bfit1; import android.content.Intent; import android.graphics.Color; import android.graphics.drawable.ColorDrawable; import android.os.Build; import android.support.annotation.RequiresApi; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.util.Log; import android.view.Menu; import android.view.MenuInflater; import android.view.MenuItem; import android.view.View; import android.widget.Button; import android.widget.TextView; import java.util.Timer; import java.util.TimerTask; import java.util.concurrent.ThreadLocalRandom; public class MainActivity extends AppCompatActivity { int n=0; int k=0; TextView tw; Button[] buttons = new Button[48]; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); tw=(TextView)findViewById(R.id.twview); for(int j=0; j<48; j++) { String buttonID = \"a\"+j; int resID = getResources().getIdentifier(buttonID, \"id\", getPackageName()); buttons[j] = ((Button) findViewById(resID)); } } void check(View view){ Log.d(\"dka\",\"the button clicked \"+((Button)view).getId()); Log.d(\"dka\",\"the value of n \"+n); if(buttons[n].getId()==((Button)view).getId()){ k++; Log.d(\"dka\",\"the value of k\"+k); } else view.setBackgroundColor(Color.RED); tw.setText(\"0\"+k); } private class Runthe implements Runnable{ @Override public void run() { int i = 0; for(i=0;i<80;i++){ n = (int) (Math.random() * 47 + 1); final int finalN = n; try { runOnUiThread(new Runnable() { @Override public void run() { runOnUiThread(new Runnable() { @Override public void run() { buttons[finalN].setBackgroundColor(Color.GREEN); Log.d(\"dka\",\"main\"+finalN); Log.d(\"dka\",\"main id\"+buttons[finalN].getId()); } }); } }); Thread.sleep(600); runOnUiThread(new Runnable() { @Override public void run() { buttons[finalN].setBackgroundColor(Color.WHITE); Log.d(\"dka\",\"main after\"+finalN); } }); Log.d(\"dk\", \"BUtton icon is\" + n); } catch (InterruptedException ex) { Log.d(\"dk\", \"error at \" + ex); } } } } public void runme(View vie){ Thread myThread=new Thread(new Runthe()); myThread.start(); } public boolean onCreateOptionsMenu(Menu menu) { MenuInflater inflater = getMenuInflater(); inflater.inflate(R.menu.menu_main, menu); return true; } public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()) { case R.id.about: startActivity(new Intent(this, About.class)); return true; case R.id.help: startActivity(new Intent(this, Help.class)); return true; default: return super.onOptionsItemSelected(item); } } }","dependencies":[{"file_path":"bFit-A-Cognitive-Game-master\\app\\src\\main\\java\\com\\example\\dk\\bfit1\\About.java","file_content":"package com.example.dk.bfit1; public class About { }"},{"file_path":"bFit-A-Cognitive-Game-master\\app\\src\\main\\java\\com\\example\\dk\\bfit1\\Help.java","file_content":"package com.example.dk.bfit1; public class Help { }"}]}}
{"project_id":14,"chunk_id":0,"content":{"main_file_path":"bFit-A-Cognitive-Game-master\\app\\src\\main\\java\\com\\example\\dk\\bfit1\\Main_splash.java","main_file_content":"package com.example.dk.bfit1; import android.content.Intent; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; public class Main_splash extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Intent intent = new Intent(this, Splashscreen.class); startActivity(intent); finish(); } }","dependencies":[{"file_path":"bFit-A-Cognitive-Game-master\\app\\src\\main\\java\\com\\example\\dk\\bfit1\\Splashscreen.java","file_content":"package com.example.dk.bfit1; import android.content.Intent; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; public class Splashscreen extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_splashscreen); Thread myThread = new Thread(){ @Override public void run() { try { sleep(3000); Intent intent = new Intent(getApplicationContext(),MainActivity.class); startActivity(intent); finish(); } catch (InterruptedException e) { e.printStackTrace(); } } }; myThread.start(); } }"}]}}
{"project_id":14,"chunk_id":0,"content":{"main_file_path":"bFit-A-Cognitive-Game-master\\app\\src\\main\\java\\com\\example\\dk\\bfit1\\Splashscreen.java","main_file_content":"package com.example.dk.bfit1; import android.content.Intent; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; public class Splashscreen extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_splashscreen); Thread myThread = new Thread(){ @Override public void run() { try { sleep(3000); Intent intent = new Intent(getApplicationContext(),MainActivity.class); startActivity(intent); finish(); } catch (InterruptedException e) { e.printStackTrace(); } } }; myThread.start(); } }","dependencies":[{"file_path":"bFit-A-Cognitive-Game-master\\app\\src\\main\\java\\com\\example\\dk\\bfit1\\MainActivity.java","file_content":"package com.example.dk.bfit1; import android.content.Intent; import android.graphics.Color; import android.graphics.drawable.ColorDrawable; import android.os.Build; import android.support.annotation.RequiresApi; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.util.Log; import android.view.Menu; import android.view.MenuInflater; import android.view.MenuItem; import android.view.View; import android.widget.Button; import android.widget.TextView; import java.util.Timer; import java.util.TimerTask; import java.util.concurrent.ThreadLocalRandom; public class MainActivity extends AppCompatActivity { int n=0; int k=0; TextView tw; Button[] buttons = new Button[48]; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); tw=(TextView)findViewById(R.id.twview); for(int j=0; j<48; j++) { String buttonID = \"a\"+j; int resID = getResources().getIdentifier(buttonID, \"id\", getPackageName()); buttons[j] = ((Button) findViewById(resID)); } } void check(View view){ Log.d(\"dka\",\"the button clicked \"+((Button)view).getId()); Log.d(\"dka\",\"the value of n \"+n); if(buttons[n].getId()==((Button)view).getId()){ k++; Log.d(\"dka\",\"the value of k\"+k); } else view.setBackgroundColor(Color.RED); tw.setText(\"0\"+k); } private class Runthe implements Runnable{ @Override public void run() { int i = 0; for(i=0;i<80;i++){ n = (int) (Math.random() * 47 + 1); final int finalN = n; try { runOnUiThread(new Runnable() { @Override public void run() { runOnUiThread(new Runnable() { @Override public void run() { buttons[finalN].setBackgroundColor(Color.GREEN); Log.d(\"dka\",\"main\"+finalN); Log.d(\"dka\",\"main id\"+buttons[finalN].getId()); } }); } }); Thread.sleep(600); runOnUiThread(new Runnable() { @Override public void run() { buttons[finalN].setBackgroundColor(Color.WHITE); Log.d(\"dka\",\"main after\"+finalN); } }); Log.d(\"dk\", \"BUtton icon is\" + n); } catch (InterruptedException ex) { Log.d(\"dk\", \"error at \" + ex); } } } } public void runme(View vie){ Thread myThread=new Thread(new Runthe()); myThread.start(); } public boolean onCreateOptionsMenu(Menu menu) { MenuInflater inflater = getMenuInflater(); inflater.inflate(R.menu.menu_main, menu); return true; } public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()) { case R.id.about: startActivity(new Intent(this, About.class)); return true; case R.id.help: startActivity(new Intent(this, Help.class)); return true; default: return super.onOptionsItemSelected(item); } } }"}]}}
{"project_id":14,"chunk_id":0,"content":{"main_file_path":"bFit-A-Cognitive-Game-master\\app\\src\\test\\java\\com\\example\\dk\\bfit1\\ExampleUnitTest.java","main_file_content":"package com.example.dk.bfit1; import org.junit.Test; import static org.junit.Assert.*; public class ExampleUnitTest { @Test public void addition_isCorrect() throws Exception { assertEquals(4, 2 + 2); } }","dependencies":[]}}
{"project_id":17,"chunk_id":0,"content":{"main_file_path":"BinaryDecimalConverto\\convertor.java","main_file_content":"import java.util.Scanner; public class BinaryDecimalConverter { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); System.out.println(\"Binary to Decimal and Decimal to Binary Converter\"); System.out.print(\"Enter 1 to convert Binary to Decimal or 2 to convert Decimal to Binary: \"); int choice = scanner.nextInt(); if (choice == 1) { System.out.print(\"Enter a binary number: \"); String binaryInput = scanner.next(); int decimalResult = binaryToDecimal(binaryInput); System.out.println(\"Decimal result: \" + decimalResult); } else if (choice == 2) { System.out.print(\"Enter a decimal number: \"); int decimalInput = scanner.nextInt(); String binaryResult = decimalToBinary(decimalInput); System.out.println(\"Binary result: \" + binaryResult); } else { System.out.println(\"Invalid choice. Please enter 1 for Binary to Decimal or 2 for Decimal to Binary.\"); } } public static int binaryToDecimal(String binary) { return Integer.parseInt(binary, 2); } public static String decimalToBinary(int decimal) { return Integer.toBinaryString(decimal); } }","dependencies":[]}}
{"project_id":18,"chunk_id":0,"content":{"main_file_path":"BioProfiler-main\\src\\BioProfilerUI.java","main_file_content":"import javax.swing.*; import java.awt.*; public class BioProfilerUI extends javax.swing.JFrame { private javax.swing.JTextField nameTextField; private javax.swing.JTextField ageTextField; private javax.swing.JTextArea profileTextArea; private javax.swing.ButtonGroup genGroup; private javax.swing.JRadioButton genMaleRadio; private javax.swing.JRadioButton genFemaleRadio; public BioProfilerUI() { initComponents(); } private void initComponents() { JPanel jPanel1 = new JPanel (); JPanel jPanel2 = new JPanel (); JPanel jPanel3 = new JPanel (); JLabel jLabel1 = new JLabel (); JLabel jLabel2 = new JLabel (); JLabel jLabel3 = new JLabel (); JLabel jLabel4 = new JLabel (); nameTextField = new JTextField (); ageTextField = new JTextField (); genMaleRadio = new JRadioButton (); genFemaleRadio = new JRadioButton (); genGroup = new ButtonGroup (); JButton instaButton = new JButton (); JButton linkedButton = new JButton (); JButton twitterButton = new JButton (); JScrollPane jScrollPane1 = new JScrollPane (); profileTextArea = new JTextArea (); JButton exitButton = new JButton (); JButton resetButton = new JButton (); setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE); setTitle(\"Personal Bio Profiler\"); jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(\"1. Enter Your Personal Information\")); jLabel2.setText(\"Name\"); jLabel3.setText(\"Age\"); jLabel4.setText(\"Gender\"); nameTextField.setToolTipText (\"Enter the name you want in the profile.\"); ageTextField.setToolTipText(\"Enter your age.\"); genFemaleRadio.setText(\"Female\"); genMaleRadio.setText(\"Male\"); genGroup.add (genFemaleRadio); genGroup.add (genMaleRadio); javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1); jPanel1.setLayout(jPanel1Layout); jPanel1Layout.setHorizontalGroup( jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup() .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE) .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING) .addComponent(jLabel4) .addComponent(jLabel3) .addComponent(jLabel2)) .addGap(20, 20, 20) .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false) .addComponent(nameTextField) .addComponent(ageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE) .addComponent (genMaleRadio) .addComponent (genFemaleRadio)) .addGap(51, 51, 51)) ); jPanel1Layout.setVerticalGroup( jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(jPanel1Layout.createSequentialGroup() .addGap(13, 13, 13) .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE) .addComponent(jLabel2) .addComponent(nameTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)) .addGap(18, 18, 18) .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE) .addComponent(jLabel3) .addComponent(ageTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)) .addGap(18, 18, 18) .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE) .addComponent(jLabel4) .addComponent(genMaleRadio)) .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE) .addComponent(genFemaleRadio)) .addContainerGap(18, Short.MAX_VALUE)) ); jLabel1.setFont(new java.awt.Font(\"Arial Black\", Font.BOLD, 36)); jLabel1.setForeground(new java.awt.Color(153, 102, 0)); jLabel1.setText(\"Bio Profiler \"); jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(\"2. Choose What Kind of Profile\")); instaButton.setText(\"Instagram\"); instaButton.addActionListener(this::instaButtonActionPerformed); linkedButton.setText(\"LinkedIn\"); linkedButton.addActionListener(this::linkedButtonActionPerformed); twitterButton.setText(\"Twitter\"); twitterButton.addActionListener(this::twitterButtonActionPerformed); javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2); jPanel2.setLayout(jPanel2Layout); jPanel2Layout.setHorizontalGroup( jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(jPanel2Layout.createSequentialGroup() .addGap(15, 15, 15) .addComponent(instaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE) .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE) .addComponent(linkedButton, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE) .addGap(26, 26, 26) .addComponent(twitterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE) .addGap(14, 14, 14)) ); jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, instaButton, linkedButton, twitterButton); jPanel2Layout.setVerticalGroup( jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(jPanel2Layout.createSequentialGroup() .addGap(17, 17, 17) .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE) .addComponent(instaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE) .addComponent(linkedButton) .addComponent(twitterButton)) .addContainerGap(21, Short.MAX_VALUE)) ); jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, instaButton, linkedButton, twitterButton); jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(\"Generated Profile Bio\")); profileTextArea.setColumns(20); profileTextArea.setLineWrap(true); profileTextArea.setRows(5); profileTextArea.setWrapStyleWord(true); jScrollPane1.setViewportView(profileTextArea); javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3); jPanel3.setLayout(jPanel3Layout); jPanel3Layout.setHorizontalGroup( jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(jPanel3Layout.createSequentialGroup() .addGap(14, 14, 14) .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE) .addContainerGap(15, Short.MAX_VALUE)) ); jPanel3Layout.setVerticalGroup( jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(jPanel3Layout.createSequentialGroup() .addGap(14, 14, 14) .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE) .addContainerGap(15, Short.MAX_VALUE)) ); exitButton.setText(\"Exit\"); exitButton.addActionListener(this::exitButtonActionPerformed); resetButton.setText(\"Reset\"); resetButton.addActionListener(this::resetButtonActionPerformed); javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane()); getContentPane().setLayout(layout); layout.setHorizontalGroup( layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(layout.createSequentialGroup() .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(layout.createSequentialGroup() .addGap(33, 33, 33) .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false) .addGroup(layout.createSequentialGroup() .addComponent(resetButton) .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE) .addComponent(exitButton)) .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE) .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE) .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))) .addGroup(layout.createSequentialGroup() .addGap(144, 144, 144) .addComponent(jLabel1))) .addContainerGap(18, Short.MAX_VALUE)) ); layout.setVerticalGroup( layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(layout.createSequentialGroup() .addGap(13, 13, 13) .addComponent(jLabel1) .addGap(18, 18, 18) .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE) .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED) .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE) .addGap(18, 18, 18) .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE) .addGap(18, 18, 18) .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE) .addComponent(exitButton) .addComponent(resetButton)) .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)) ); pack(); } private String getNameEntered() { String name = nameTextField.getText().trim(); if (name.length() == 0) { name = \"Unknown\"; } return name; } private int getYearsEntered() { int years; try { years = Integer.parseInt(ageTextField.getText().trim()); } catch (NumberFormatException e) { years = 0; } return years; } private String getGenderEntered() { if (genMaleRadio.isSelected()) { return \"Male\"; } else if (genFemaleRadio.isSelected()) { return \"Female\"; } return \"Unknown\"; } public void exitButtonActionPerformed(java.awt.event.ActionEvent evt) { System.exit(0); } public void resetButtonActionPerformed(java.awt.event.ActionEvent evt) { nameTextField.setText (\"\"); ageTextField.setText (\"\"); genGroup.clearSelection (); profileTextArea.setText (\"\"); } public void instaButtonActionPerformed(java.awt.event.ActionEvent evt) { User myUser = new Instagram(getNameEntered(), getYearsEntered(), getGenderEntered()); String description = myUser.selfDescribe(); profileTextArea.setText(description); } public void linkedButtonActionPerformed(java.awt.event.ActionEvent evt) { User myUser = new LinkedIn(getNameEntered(), getYearsEntered(), getGenderEntered()); String description = myUser.selfDescribe(); profileTextArea.setText(description); } private void twitterButtonActionPerformed(java.awt.event.ActionEvent evt) { User myUser = new Twitter(getNameEntered(), getYearsEntered(), getGenderEntered()); String description = myUser.selfDescribe(); profileTextArea.setText(description); } public static void main(String[] args) { java.awt.EventQueue.invokeLater(() -> new BioProfilerUI().setVisible(true)); } }","dependencies":[{"file_path":"BioProfiler-main\\src\\Instagram.java","file_content":"public class Instagram extends User implements genderDescribe { public Instagram(String name, int age, String gender) { super(name, age, gender); } @Override public String selfDescribe() { return super.selfDescribe() + platformGenDescribe (super.getGender ()) + \"My life is better than my daydreams!\"; } public String platformGenDescribe(String gender) { if(gender.equals (\"Male\")) { return \"Mr. Perfect describes me best. \"; } else if(gender.equals (\"Female\")) { return \"Beauty and simplicity defines me. \"; } else return \"\"; } }"},{"file_path":"BioProfiler-main\\src\\LinkedIn.java","file_content":"public class LinkedIn extends User { public LinkedIn(String name, int age, String gender) { super(name, age, gender); } @Override public String selfDescribe() { return super.selfDescribe() + \"Focused on improving my skills. Looking forward to connect with everyone!\"; } }"},{"file_path":"BioProfiler-main\\src\\Twitter.java","file_content":"public class Twitter extends User implements genderDescribe { public Twitter(String name, int age, String gender) { super(name, age, gender); } @Override public String selfDescribe() { return super.selfDescribe() + platformGenDescribe (super.getGender ()) + \"Coffee and Music are my lifeline!\"; } public String platformGenDescribe(String gender) { if(gender.equals (\"Male\")) { return \"Not your usual guy, love to innovate and inspire. \"; } else if(gender.equals (\"Female\")) { return \"Here to inspire that every woman out there can do it if they try. \"; } else return \"\"; } }"},{"file_path":"BioProfiler-main\\src\\User.java","file_content":"interface genderDescribe { String platformGenDescribe(String gender); } public class User { private final String name; private final int age; private final String gender; public User(String name, int age, String gender) { this.name = name; this.age = age; this.gender = gender; } public String getGender () { return gender; } public String selfDescribe() { return \"Hello my name is \" + name + \". I am \" + findAgeGroup(); } public String findAgeGroup() { if (age < 13) { return \"a kid with the brightest future ahead. \"; } else if (age >= 13 && age < 20) { return \"a teenager who is learning a whole lot of new things. \"; } else if (age >= 20 && age < 30) { return \"a cheerful youth exploring the ways of the world. \"; } else if (age >= 30 && age < 60) { return \"a responsible citizen of the society who wants to do something Big and Appreciative! \"; } return \"a retired senior citizen of the society. Grateful to share my life experiences and flaws. \"; } }"}]}}
{"project_id":18,"chunk_id":0,"content":{"main_file_path":"BioProfiler-main\\src\\Instagram.java","main_file_content":"public class Instagram extends User implements genderDescribe { public Instagram(String name, int age, String gender) { super(name, age, gender); } @Override public String selfDescribe() { return super.selfDescribe() + platformGenDescribe (super.getGender ()) + \"My life is better than my daydreams!\"; } public String platformGenDescribe(String gender) { if(gender.equals (\"Male\")) { return \"Mr. Perfect describes me best. \"; } else if(gender.equals (\"Female\")) { return \"Beauty and simplicity defines me. \"; } else return \"\"; } }","dependencies":[{"file_path":"BioProfiler-main\\src\\User.java","file_content":"interface genderDescribe { String platformGenDescribe(String gender); } public class User { private final String name; private final int age; private final String gender; public User(String name, int age, String gender) { this.name = name; this.age = age; this.gender = gender; } public String getGender () { return gender; } public String selfDescribe() { return \"Hello my name is \" + name + \". I am \" + findAgeGroup(); } public String findAgeGroup() { if (age < 13) { return \"a kid with the brightest future ahead. \"; } else if (age >= 13 && age < 20) { return \"a teenager who is learning a whole lot of new things. \"; } else if (age >= 20 && age < 30) { return \"a cheerful youth exploring the ways of the world. \"; } else if (age >= 30 && age < 60) { return \"a responsible citizen of the society who wants to do something Big and Appreciative! \"; } return \"a retired senior citizen of the society. Grateful to share my life experiences and flaws. \"; } }"}]}}
{"project_id":18,"chunk_id":0,"content":{"main_file_path":"BioProfiler-main\\src\\LinkedIn.java","main_file_content":"public class LinkedIn extends User { public LinkedIn(String name, int age, String gender) { super(name, age, gender); } @Override public String selfDescribe() { return super.selfDescribe() + \"Focused on improving my skills. Looking forward to connect with everyone!\"; } }","dependencies":[{"file_path":"BioProfiler-main\\src\\User.java","file_content":"interface genderDescribe { String platformGenDescribe(String gender); } public class User { private final String name; private final int age; private final String gender; public User(String name, int age, String gender) { this.name = name; this.age = age; this.gender = gender; } public String getGender () { return gender; } public String selfDescribe() { return \"Hello my name is \" + name + \". I am \" + findAgeGroup(); } public String findAgeGroup() { if (age < 13) { return \"a kid with the brightest future ahead. \"; } else if (age >= 13 && age < 20) { return \"a teenager who is learning a whole lot of new things. \"; } else if (age >= 20 && age < 30) { return \"a cheerful youth exploring the ways of the world. \"; } else if (age >= 30 && age < 60) { return \"a responsible citizen of the society who wants to do something Big and Appreciative! \"; } return \"a retired senior citizen of the society. Grateful to share my life experiences and flaws. \"; } }"}]}}
{"project_id":18,"chunk_id":0,"content":{"main_file_path":"BioProfiler-main\\src\\Twitter.java","main_file_content":"public class Twitter extends User implements genderDescribe { public Twitter(String name, int age, String gender) { super(name, age, gender); } @Override public String selfDescribe() { return super.selfDescribe() + platformGenDescribe (super.getGender ()) + \"Coffee and Music are my lifeline!\"; } public String platformGenDescribe(String gender) { if(gender.equals (\"Male\")) { return \"Not your usual guy, love to innovate and inspire. \"; } else if(gender.equals (\"Female\")) { return \"Here to inspire that every woman out there can do it if they try. \"; } else return \"\"; } }","dependencies":[{"file_path":"BioProfiler-main\\src\\User.java","file_content":"interface genderDescribe { String platformGenDescribe(String gender); } public class User { private final String name; private final int age; private final String gender; public User(String name, int age, String gender) { this.name = name; this.age = age; this.gender = gender; } public String getGender () { return gender; } public String selfDescribe() { return \"Hello my name is \" + name + \". I am \" + findAgeGroup(); } public String findAgeGroup() { if (age < 13) { return \"a kid with the brightest future ahead. \"; } else if (age >= 13 && age < 20) { return \"a teenager who is learning a whole lot of new things. \"; } else if (age >= 20 && age < 30) { return \"a cheerful youth exploring the ways of the world. \"; } else if (age >= 30 && age < 60) { return \"a responsible citizen of the society who wants to do something Big and Appreciative! \"; } return \"a retired senior citizen of the society. Grateful to share my life experiences and flaws. \"; } }"}]}}
{"project_id":18,"chunk_id":0,"content":{"main_file_path":"BioProfiler-main\\src\\User.java","main_file_content":"interface genderDescribe { String platformGenDescribe(String gender); } public class User { private final String name; private final int age; private final String gender; public User(String name, int age, String gender) { this.name = name; this.age = age; this.gender = gender; } public String getGender () { return gender; } public String selfDescribe() { return \"Hello my name is \" + name + \". I am \" + findAgeGroup(); } public String findAgeGroup() { if (age < 13) { return \"a kid with the brightest future ahead. \"; } else if (age >= 13 && age < 20) { return \"a teenager who is learning a whole lot of new things. \"; } else if (age >= 20 && age < 30) { return \"a cheerful youth exploring the ways of the world. \"; } else if (age >= 30 && age < 60) { return \"a responsible citizen of the society who wants to do something Big and Appreciative! \"; } return \"a retired senior citizen of the society. Grateful to share my life experiences and flaws. \"; } }","dependencies":[]}}
{"project_id":20,"chunk_id":0,"content":{"main_file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\BlogApplication.java","main_file_content":"package com.suraj.blog; import org.modelmapper.ModelMapper; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.context.annotation.Bean; @SpringBootApplication public class BlogApplication { public static void main(String[] args) { SpringApplication.run(BlogApplication.class, args); } @Bean public ModelMapper modelMapper() { return new ModelMapper(); } }","dependencies":[]}}
{"project_id":20,"chunk_id":0,"content":{"main_file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\config\\AppConstant.java","main_file_content":"package com.suraj.blog.config; public class AppConstant { public static final String PAGE_NUMBER = \"0\"; public static final String PAGE_SIZE = \"5\"; public static final String SORT_BY = \"postId\"; public static final String SORT_DIR = \"A\"; }","dependencies":[]}}
{"project_id":20,"chunk_id":0,"content":{"main_file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\config\\RestURIConstant.java","main_file_content":"package com.suraj.blog.config; public class RestURIConstant { }","dependencies":[]}}
{"project_id":20,"chunk_id":0,"content":{"main_file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\controller\\CategoryController.java","main_file_content":"package com.suraj.blog.controller; import java.util.List; import javax.validation.Valid; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.DeleteMapping; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.PutMapping; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; import com.suraj.blog.payload.ApiResponse; import com.suraj.blog.payload.CategoryDTO; import com.suraj.blog.service.CategoryService; @RestController @RequestMapping(\"/api/categories/\") public class CategoryController { @Autowired private CategoryService categoryService; @PostMapping(\"/\") public ResponseEntity<CategoryDTO> createCategory(@Valid @RequestBody CategoryDTO categoryDTO) { CategoryDTO newCategory = this.categoryService.createCategory(categoryDTO); return new ResponseEntity<CategoryDTO>(newCategory, HttpStatus.CREATED); } @PutMapping(\"/{catId}\") public ResponseEntity<CategoryDTO> updateCategory(@Valid @RequestBody CategoryDTO categoryDTO, @PathVariable Integer catId) { CategoryDTO newCategory = this.categoryService.updateCategory(categoryDTO, catId); return new ResponseEntity<CategoryDTO>(newCategory, HttpStatus.OK); } @DeleteMapping(\"/{catId}\") public ResponseEntity<ApiResponse> deleteCategory(@PathVariable Integer catId) { this.categoryService.delterCategory(catId); return new ResponseEntity<ApiResponse>(new ApiResponse(\"Category Deleted Successfully !!\", true), HttpStatus.OK); } @GetMapping(\"/{catId}\") public ResponseEntity<CategoryDTO> getCategory(@PathVariable Integer catId) { CategoryDTO category = this.categoryService.getCategory(catId); return new ResponseEntity<CategoryDTO>(category, HttpStatus.OK); } @GetMapping(\"/\") public ResponseEntity<List<CategoryDTO>> getAllCategory(){ List<CategoryDTO> dtos = this.categoryService.getAllCategory(); return new ResponseEntity<List<CategoryDTO>>(dtos, HttpStatus.OK); } }","dependencies":[{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\payload\\ApiResponse.java","file_content":"package com.suraj.blog.payload; import lombok.AllArgsConstructor; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @Getter @Setter @NoArgsConstructor @AllArgsConstructor public class ApiResponse { private String message; private boolean success; }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\payload\\CategoryDTO.java","file_content":"package com.suraj.blog.payload; import javax.validation.constraints.NotBlank; import javax.validation.constraints.Size; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @NoArgsConstructor @Getter @Setter public class CategoryDTO { private Integer categoryId; @NotBlank @Size(min=4, message = \"Title cannot be less than 4!!\") private String categoryTitle; @NotBlank @Size(min = 10, message = \"Description cannot be less than 10 characters !!!\") private String categoryDescription; }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\service\\CategoryService.java","file_content":"package com.suraj.blog.service; import java.util.List; import com.suraj.blog.payload.CategoryDTO; public interface CategoryService { CategoryDTO createCategory(CategoryDTO categoryDTO); CategoryDTO updateCategory(CategoryDTO categoryDTO, Integer catId); void delterCategory(Integer categoryId); CategoryDTO getCategory(Integer categoryId); List<CategoryDTO> getAllCategory(); }"}]}}
{"project_id":20,"chunk_id":0,"content":{"main_file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\controller\\CommentController.java","main_file_content":"package com.suraj.blog.controller; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.DeleteMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; import com.suraj.blog.payload.ApiResponse; import com.suraj.blog.payload.CommentDto; import com.suraj.blog.service.CommentService; @RestController @RequestMapping(\"/api\") public class CommentController { @Autowired private CommentService commentService ; @PostMapping(\"/post/{postId}/comments\") public ResponseEntity<CommentDto> createComment(@RequestBody CommentDto comment, @PathVariable Integer postId){ CommentDto createdComment = this.commentService.createComment(comment, postId); return new ResponseEntity<CommentDto>(createdComment, HttpStatus.CREATED); } @DeleteMapping(\"/comments/{commentId}\") public ResponseEntity<ApiResponse> deleteComment(@PathVariable Integer commentId){ this.commentService.deleteComment(commentId); return new ResponseEntity<ApiResponse>(new ApiResponse(\"Comment Deleted Succesfully!\", true), HttpStatus.OK); } }","dependencies":[{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\payload\\ApiResponse.java","file_content":"package com.suraj.blog.payload; import lombok.AllArgsConstructor; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @Getter @Setter @NoArgsConstructor @AllArgsConstructor public class ApiResponse { private String message; private boolean success; }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\payload\\CommentDto.java","file_content":"package com.suraj.blog.payload; import lombok.Getter; import lombok.Setter; @Getter @Setter public class CommentDto { private int id; private String content; }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\service\\CommentService.java","file_content":"package com.suraj.blog.service; import com.suraj.blog.payload.CommentDto; public interface CommentService { CommentDto createComment(CommentDto commentDto, Integer postId); void deleteComment(Integer commentId); }"}]}}
{"project_id":20,"chunk_id":0,"content":{"main_file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\controller\\PostContoller.java","main_file_content":"package com.suraj.blog.controller; import java.io.IOException; import java.io.InputStream; import java.util.List; import javax.servlet.http.HttpServletResponse; import org.hibernate.engine.jdbc.StreamUtils; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.http.HttpStatus; import org.springframework.http.MediaType; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.DeleteMapping; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.PutMapping; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; import org.springframework.web.multipart.MultipartFile; import com.suraj.blog.config.AppConstant; import com.suraj.blog.payload.ApiResponse; import com.suraj.blog.payload.PostDto; import com.suraj.blog.service.FileService; import com.suraj.blog.service.PostService; @RestController @RequestMapping(\"/api/\") public class PostContoller { @Autowired private PostService postService; @Autowired private FileService fileService; @Value(\"${project.image}\") private String path; @PostMapping(\"/user/{userId}/category/{categoryId}/posts\") public ResponseEntity<PostDto> createPost(@RequestBody PostDto postDto, @PathVariable Integer userId, @PathVariable Integer categoryId) { PostDto createPost = this.postService.createPost(postDto, userId, categoryId); return new ResponseEntity<PostDto>(createPost, HttpStatus.CREATED); } @PutMapping(\"/user/{userId}/category/{categoryId}/posts\") public ResponseEntity<PostDto> updatePost(@RequestBody PostDto postDto, @PathVariable Integer postId) { PostDto updatePost = this.postService.updatePost(postDto, postId); return new ResponseEntity<PostDto>(updatePost, HttpStatus.CREATED); } @GetMapping(\"/user/{userId}/posts\") public ResponseEntity<List<PostDto>> getPostByUser(@PathVariable Integer userId) { List<PostDto> posts = this.postService.getPostByUser(userId); return new ResponseEntity<List<PostDto>>(posts, HttpStatus.OK); } @GetMapping(\"/category/{categoryId}/posts\") public ResponseEntity<List<PostDto>> getPostByCategory(@PathVariable Integer categoryId) { List<PostDto> posts = this.postService.getPostByCategory(categoryId); return new ResponseEntity<List<PostDto>>(posts, HttpStatus.OK); } @GetMapping(\"/posts/{postId}\") public ResponseEntity<PostDto> getPostById(@PathVariable Integer postId) { PostDto post = this.postService.getPostById(postId); return new ResponseEntity<PostDto>(post, HttpStatus.OK); } @GetMapping(\"/posts\") public ResponseEntity<List<PostDto>> getAllPosts( @RequestParam(value = \"pageNumber\", defaultValue = AppConstant.PAGE_NUMBER, required = false) Integer pageNumber, @RequestParam(value = \"pageSize\", defaultValue = AppConstant.PAGE_SIZE, required = false ) Integer pageSize, @RequestParam(value = \"sortBy\", defaultValue = AppConstant.SORT_BY , required = false)String sortBy, @RequestParam(value = \"sortDir\", defaultValue = AppConstant.SORT_DIR, required = false) String sortDir) { List<PostDto> posts = this.postService.getAllPost(pageNumber, pageSize, sortBy, sortDir); return new ResponseEntity<>(posts, HttpStatus.OK); } @DeleteMapping(\"/posts/{postId}\") public ResponseEntity<ApiResponse> deletePost(@PathVariable Integer postId) { this.postService.deletePost(postId); return new ResponseEntity<ApiResponse>(new ApiResponse(\"Post Deleted Successfully\", true), HttpStatus.OK); } @GetMapping(\"/posts/search/{keyword}\") public ResponseEntity<List<PostDto>> searchPostByTitle(@PathVariable(\"keyword\") String keyword){ List<PostDto> posts = this.postService.searchPosts(keyword); return new ResponseEntity<List<PostDto>>(posts, HttpStatus.OK); } @PostMapping(\"/post/image/upload/{postId}\") public ResponseEntity<PostDto> uploadPostImage( @RequestParam(\"image\" )MultipartFile image , @PathVariable Integer postId ) throws IOException{ PostDto postDto = this.postService.getPostById(postId); String fileName = this.fileService.uploadImage(path, image); postDto.setImageName(fileName); PostDto updatedPost = this.postService.updatePost(postDto, postId); return new ResponseEntity<PostDto>(updatedPost, HttpStatus.OK); } @GetMapping(value = \"post/image/{imageName}\", produces = MediaType.IMAGE_JPEG_VALUE) public void downloadImage( @PathVariable(\"imageName\")String imageName, HttpServletResponse response) throws IOException{ InputStream resourse = this.fileService.getResource(path, imageName); response.setContentType(MediaType.IMAGE_JPEG_VALUE); StreamUtils.copy(resourse, response.getOutputStream()); } }","dependencies":[{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\payload\\ApiResponse.java","file_content":"package com.suraj.blog.payload; import lombok.AllArgsConstructor; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @Getter @Setter @NoArgsConstructor @AllArgsConstructor public class ApiResponse { private String message; private boolean success; }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\payload\\PostDto.java","file_content":"package com.suraj.blog.payload; import java.util.HashSet; import java.util.Set; import com.suraj.blog.entity.Comment; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @Getter @Setter @NoArgsConstructor public class PostDto { private Integer postId; private String title; private String content; private String imageName; private String addedDate; private CategoryDTO category; private UserDTO user; private Set<CommentDto> comments=new HashSet<>(); }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\service\\FileService.java","file_content":"package com.suraj.blog.service; import java.io.FileNotFoundException; import java.io.IOException; import java.io.InputStream; import org.springframework.web.multipart.MultipartFile; public interface FileService { String uploadImage(String path, MultipartFile file) throws IOException; InputStream getResource(String path, String fileName) throws FileNotFoundException; }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\service\\PostService.java","file_content":"package com.suraj.blog.service; import java.util.List; import com.suraj.blog.entity.Post; import com.suraj.blog.payload.PostDto; public interface PostService { PostDto createPost(PostDto postDto, Integer userId, Integer categoryId); PostDto updatePost(PostDto postDto, Integer postId); void deletePost(Integer postId); List<PostDto> getAllPost(Integer pageNumber, Integer pageSize, String sortBy, String sortDir); PostDto getPostById(Integer postId); List<PostDto> getPostByCategory(Integer categoryId); List<PostDto> getPostByUser(Integer userId); List<PostDto> searchPosts(String Keyword); }"}]}}
{"project_id":20,"chunk_id":0,"content":{"main_file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\controller\\UserController.java","main_file_content":"package com.suraj.blog.controller; import java.util.List; import javax.validation.Valid; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.DeleteMapping; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.PutMapping; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; import com.suraj.blog.payload.ApiResponse; import com.suraj.blog.payload.UserDTO; import com.suraj.blog.service.UserService; @RestController @RequestMapping(\"/api/users\") public class UserController { @Autowired private UserService userService; @GetMapping(\"/\") public ResponseEntity<List<UserDTO>> getAllUsers(){ return ResponseEntity.ok(this.userService.getAllUsers()); } @GetMapping(\"/{userId}\") public ResponseEntity<UserDTO> getUser(@PathVariable Integer userId){ return ResponseEntity.ok(this.userService.getUserById(userId)); } @PostMapping(\"/\") public ResponseEntity<UserDTO> createUser(@Valid @RequestBody UserDTO userDto){ UserDTO createdUser = this.userService.createUser(userDto); return new ResponseEntity<>(createdUser, HttpStatus.CREATED); } @PutMapping(\"/{userId}\") public ResponseEntity<UserDTO> updateUser(@Valid @RequestBody UserDTO userDTO, @PathVariable Integer userId){ UserDTO updatedUser = this.userService.updateUser(userDTO, userId); return ResponseEntity.ok(updatedUser); } @DeleteMapping(\"/{userId}\") public ResponseEntity<ApiResponse> deleteUser(@PathVariable Integer userId){ this.userService.deleteUser(userId); return new ResponseEntity(new ApiResponse(\"User Deleted Successfully\", true) , HttpStatus.OK); } }","dependencies":[{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\payload\\ApiResponse.java","file_content":"package com.suraj.blog.payload; import lombok.AllArgsConstructor; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @Getter @Setter @NoArgsConstructor @AllArgsConstructor public class ApiResponse { private String message; private boolean success; }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\payload\\UserDTO.java","file_content":"package com.suraj.blog.payload; import javax.validation.constraints.Email; import javax.validation.constraints.NotEmpty; import javax.validation.constraints.NotNull; import javax.validation.constraints.Size; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @NoArgsConstructor @Getter @Setter public class UserDTO { private int id; @NotEmpty @Size(min=4, message = \"User name should be min of 4 characters !!\") private String name; @Email(message = \"Please enter valid Email address !!\") private String email; @NotEmpty @Size(min=8, max=20, message = \"Please Enter password between 8 to 20 chracters !!\") private String password; @NotEmpty private String about; }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\service\\UserService.java","file_content":"package com.suraj.blog.service; import java.util.List; import com.suraj.blog.payload.UserDTO; public interface UserService { UserDTO createUser(UserDTO userDTO); UserDTO updateUser(UserDTO userDTO, Integer userID); UserDTO getUserById(Integer userId); List<UserDTO> getAllUsers(); void deleteUser(Integer userId); }"}]}}
{"project_id":20,"chunk_id":0,"content":{"main_file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\dao\\CategoryRepo.java","main_file_content":"package com.suraj.blog.dao; import org.springframework.data.jpa.repository.JpaRepository; import com.suraj.blog.entity.Category; public interface CategoryRepo extends JpaRepository<Category, Integer> { }","dependencies":[{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\entity\\Category.java","file_content":"package com.suraj.blog.entity; import java.util.ArrayList; import java.util.List; import javax.persistence.CascadeType; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.FetchType; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.OneToMany; import lombok.AllArgsConstructor; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @Entity @Getter @Setter @NoArgsConstructor @AllArgsConstructor public class Category { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Integer categoryId; @Column(name = \"title\", length = 100, nullable =false) private String categoryTitle; @Column(name = \"description\") private String categoryDescription; @OneToMany(mappedBy = \"category\" , cascade = CascadeType.ALL, fetch = FetchType.LAZY) private List<Post> posts = new ArrayList<>(); }"}]}}
{"project_id":20,"chunk_id":0,"content":{"main_file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\dao\\CommentRepo.java","main_file_content":"package com.suraj.blog.dao; import org.springframework.data.jpa.repository.JpaRepository; import com.suraj.blog.entity.Comment; public interface CommentRepo extends JpaRepository<Comment, Integer>{ }","dependencies":[{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\entity\\Comment.java","file_content":"package com.suraj.blog.entity; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.ManyToOne; import javax.persistence.Table; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @Entity @Table(name = \"comments\") @Getter @Setter @NoArgsConstructor public class Comment { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private int id; private String content; @ManyToOne private Post post; }"}]}}
{"project_id":20,"chunk_id":0,"content":{"main_file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\dao\\PostRepo.java","main_file_content":"package com.suraj.blog.dao; import java.util.List; import org.springframework.data.jpa.repository.JpaRepository; import com.suraj.blog.entity.Category; import com.suraj.blog.entity.Post; import com.suraj.blog.entity.User; public interface PostRepo extends JpaRepository<Post, Integer> { List<Post> findByUser(User user); List<Post> findByCategory(Category category); List<Post> findByTitleContaining(String title); }","dependencies":[{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\entity\\Category.java","file_content":"package com.suraj.blog.entity; import java.util.ArrayList; import java.util.List; import javax.persistence.CascadeType; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.FetchType; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.OneToMany; import lombok.AllArgsConstructor; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @Entity @Getter @Setter @NoArgsConstructor @AllArgsConstructor public class Category { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Integer categoryId; @Column(name = \"title\", length = 100, nullable =false) private String categoryTitle; @Column(name = \"description\") private String categoryDescription; @OneToMany(mappedBy = \"category\" , cascade = CascadeType.ALL, fetch = FetchType.LAZY) private List<Post> posts = new ArrayList<>(); }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\entity\\Post.java","file_content":"package com.suraj.blog.entity; import java.util.Date; import java.util.HashSet; import java.util.Set; import javax.persistence.CascadeType; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.JoinColumn; import javax.persistence.ManyToOne; import javax.persistence.OneToMany; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @Entity @Getter @Setter @NoArgsConstructor public class Post { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Integer postId; @Column(name=\"post_title\", nullable = false, length = 100) private String title; @Column(length = 10000) private String content; private String imageName; private Date addedDate; @ManyToOne @JoinColumn(name = \"categoryId\") private Category category; @ManyToOne private User user; @OneToMany(mappedBy = \"post\", cascade = CascadeType.ALL) private Set<Comment> comments = new HashSet<Comment>(); }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\entity\\User.java","file_content":"package com.suraj.blog.entity; import java.util.ArrayList; import java.util.List; import javax.persistence.CascadeType; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.FetchType; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.OneToMany; import javax.persistence.Table; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @Entity @Table(name = \"users\") @Getter @Setter @NoArgsConstructor public class User { @Id @GeneratedValue(strategy = GenerationType.AUTO) private int id; @Column(nullable = false, length =100) private String name; private String email; private String password; private String about; @OneToMany(mappedBy = \"user\" , cascade = CascadeType.ALL, fetch = FetchType.LAZY) private List<Post> posts = new ArrayList<>(); }"}]}}
{"project_id":20,"chunk_id":0,"content":{"main_file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\dao\\UserRepo.java","main_file_content":"package com.suraj.blog.dao; import org.springframework.data.jpa.repository.JpaRepository; import com.suraj.blog.entity.User; public interface UserRepo extends JpaRepository<User, Integer> { }","dependencies":[{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\entity\\User.java","file_content":"package com.suraj.blog.entity; import java.util.ArrayList; import java.util.List; import javax.persistence.CascadeType; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.FetchType; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.OneToMany; import javax.persistence.Table; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @Entity @Table(name = \"users\") @Getter @Setter @NoArgsConstructor public class User { @Id @GeneratedValue(strategy = GenerationType.AUTO) private int id; @Column(nullable = false, length =100) private String name; private String email; private String password; private String about; @OneToMany(mappedBy = \"user\" , cascade = CascadeType.ALL, fetch = FetchType.LAZY) private List<Post> posts = new ArrayList<>(); }"}]}}
{"project_id":20,"chunk_id":0,"content":{"main_file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\entity\\Category.java","main_file_content":"package com.suraj.blog.entity; import java.util.ArrayList; import java.util.List; import javax.persistence.CascadeType; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.FetchType; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.OneToMany; import lombok.AllArgsConstructor; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @Entity @Getter @Setter @NoArgsConstructor @AllArgsConstructor public class Category { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Integer categoryId; @Column(name = \"title\", length = 100, nullable =false) private String categoryTitle; @Column(name = \"description\") private String categoryDescription; @OneToMany(mappedBy = \"category\" , cascade = CascadeType.ALL, fetch = FetchType.LAZY) private List<Post> posts = new ArrayList<>(); }","dependencies":[{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\entity\\Post.java","file_content":"package com.suraj.blog.entity; import java.util.Date; import java.util.HashSet; import java.util.Set; import javax.persistence.CascadeType; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.JoinColumn; import javax.persistence.ManyToOne; import javax.persistence.OneToMany; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @Entity @Getter @Setter @NoArgsConstructor public class Post { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Integer postId; @Column(name=\"post_title\", nullable = false, length = 100) private String title; @Column(length = 10000) private String content; private String imageName; private Date addedDate; @ManyToOne @JoinColumn(name = \"categoryId\") private Category category; @ManyToOne private User user; @OneToMany(mappedBy = \"post\", cascade = CascadeType.ALL) private Set<Comment> comments = new HashSet<Comment>(); }"}]}}
{"project_id":20,"chunk_id":0,"content":{"main_file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\entity\\Comment.java","main_file_content":"package com.suraj.blog.entity; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.ManyToOne; import javax.persistence.Table; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @Entity @Table(name = \"comments\") @Getter @Setter @NoArgsConstructor public class Comment { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private int id; private String content; @ManyToOne private Post post; }","dependencies":[{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\entity\\Post.java","file_content":"package com.suraj.blog.entity; import java.util.Date; import java.util.HashSet; import java.util.Set; import javax.persistence.CascadeType; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.JoinColumn; import javax.persistence.ManyToOne; import javax.persistence.OneToMany; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @Entity @Getter @Setter @NoArgsConstructor public class Post { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Integer postId; @Column(name=\"post_title\", nullable = false, length = 100) private String title; @Column(length = 10000) private String content; private String imageName; private Date addedDate; @ManyToOne @JoinColumn(name = \"categoryId\") private Category category; @ManyToOne private User user; @OneToMany(mappedBy = \"post\", cascade = CascadeType.ALL) private Set<Comment> comments = new HashSet<Comment>(); }"}]}}
{"project_id":20,"chunk_id":0,"content":{"main_file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\entity\\Post.java","main_file_content":"package com.suraj.blog.entity; import java.util.Date; import java.util.HashSet; import java.util.Set; import javax.persistence.CascadeType; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.JoinColumn; import javax.persistence.ManyToOne; import javax.persistence.OneToMany; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @Entity @Getter @Setter @NoArgsConstructor public class Post { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Integer postId; @Column(name=\"post_title\", nullable = false, length = 100) private String title; @Column(length = 10000) private String content; private String imageName; private Date addedDate; @ManyToOne @JoinColumn(name = \"categoryId\") private Category category; @ManyToOne private User user; @OneToMany(mappedBy = \"post\", cascade = CascadeType.ALL) private Set<Comment> comments = new HashSet<Comment>(); }","dependencies":[{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\entity\\Category.java","file_content":"package com.suraj.blog.entity; import java.util.ArrayList; import java.util.List; import javax.persistence.CascadeType; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.FetchType; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.OneToMany; import lombok.AllArgsConstructor; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @Entity @Getter @Setter @NoArgsConstructor @AllArgsConstructor public class Category { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Integer categoryId; @Column(name = \"title\", length = 100, nullable =false) private String categoryTitle; @Column(name = \"description\") private String categoryDescription; @OneToMany(mappedBy = \"category\" , cascade = CascadeType.ALL, fetch = FetchType.LAZY) private List<Post> posts = new ArrayList<>(); }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\entity\\Comment.java","file_content":"package com.suraj.blog.entity; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.ManyToOne; import javax.persistence.Table; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @Entity @Table(name = \"comments\") @Getter @Setter @NoArgsConstructor public class Comment { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private int id; private String content; @ManyToOne private Post post; }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\entity\\User.java","file_content":"package com.suraj.blog.entity; import java.util.ArrayList; import java.util.List; import javax.persistence.CascadeType; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.FetchType; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.OneToMany; import javax.persistence.Table; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @Entity @Table(name = \"users\") @Getter @Setter @NoArgsConstructor public class User { @Id @GeneratedValue(strategy = GenerationType.AUTO) private int id; @Column(nullable = false, length =100) private String name; private String email; private String password; private String about; @OneToMany(mappedBy = \"user\" , cascade = CascadeType.ALL, fetch = FetchType.LAZY) private List<Post> posts = new ArrayList<>(); }"}]}}
{"project_id":20,"chunk_id":0,"content":{"main_file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\entity\\User.java","main_file_content":"package com.suraj.blog.entity; import java.util.ArrayList; import java.util.List; import javax.persistence.CascadeType; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.FetchType; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.OneToMany; import javax.persistence.Table; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @Entity @Table(name = \"users\") @Getter @Setter @NoArgsConstructor public class User { @Id @GeneratedValue(strategy = GenerationType.AUTO) private int id; @Column(nullable = false, length =100) private String name; private String email; private String password; private String about; @OneToMany(mappedBy = \"user\" , cascade = CascadeType.ALL, fetch = FetchType.LAZY) private List<Post> posts = new ArrayList<>(); }","dependencies":[{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\entity\\Post.java","file_content":"package com.suraj.blog.entity; import java.util.Date; import java.util.HashSet; import java.util.Set; import javax.persistence.CascadeType; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.JoinColumn; import javax.persistence.ManyToOne; import javax.persistence.OneToMany; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @Entity @Getter @Setter @NoArgsConstructor public class Post { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Integer postId; @Column(name=\"post_title\", nullable = false, length = 100) private String title; @Column(length = 10000) private String content; private String imageName; private Date addedDate; @ManyToOne @JoinColumn(name = \"categoryId\") private Category category; @ManyToOne private User user; @OneToMany(mappedBy = \"post\", cascade = CascadeType.ALL) private Set<Comment> comments = new HashSet<Comment>(); }"}]}}
{"project_id":20,"chunk_id":0,"content":{"main_file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\exceptions\\GlobalExceptionHandler.java","main_file_content":"package com.suraj.blog.exceptions; import java.util.HashMap; import java.util.Map; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.validation.FieldError; import org.springframework.web.bind.MethodArgumentNotValidException; import org.springframework.web.bind.annotation.ExceptionHandler; import org.springframework.web.bind.annotation.RestControllerAdvice; import com.suraj.blog.payload.ApiResponse; @RestControllerAdvice public class GlobalExceptionHandler { @ExceptionHandler(ResourceNotFoundException.class) public ResponseEntity<ApiResponse> resourceNotFoundExHandler(ResourceNotFoundException ex){ String message = ex.getMessage(); ApiResponse apiResponse = new ApiResponse(message, false); return new ResponseEntity<ApiResponse>(apiResponse, HttpStatus.NOT_FOUND); } @ExceptionHandler(MethodArgumentNotValidException.class) public ResponseEntity<Map<String, String>> methodArgsNotValidExHandler(MethodArgumentNotValidException ex){ Map<String, String> response = new HashMap<>(); ex.getBindingResult().getAllErrors().forEach((error)-> { String fieldName=((FieldError)error).getField(); String message = error.getDefaultMessage(); response.put(fieldName, message); }); return new ResponseEntity<Map<String,String>>(response, HttpStatus.BAD_REQUEST); } }","dependencies":[{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\exceptions\\ResourceNotFoundException.java","file_content":"package com.suraj.blog.exceptions; import lombok.Getter; import lombok.Setter; @Getter @Setter public class ResourceNotFoundException extends RuntimeException{ String resourceName; String fieldName; long fieldValue; public ResourceNotFoundException(String resourceName, String fieldName, long fieldValue) { super(String.format(\"%s not found with %s : %s\", resourceName, fieldName, fieldValue)); this.resourceName = resourceName; this.fieldName = fieldName; this.fieldValue = fieldValue; } }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\payload\\ApiResponse.java","file_content":"package com.suraj.blog.payload; import lombok.AllArgsConstructor; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @Getter @Setter @NoArgsConstructor @AllArgsConstructor public class ApiResponse { private String message; private boolean success; }"}]}}
{"project_id":20,"chunk_id":0,"content":{"main_file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\exceptions\\ResourceNotFoundException.java","main_file_content":"package com.suraj.blog.exceptions; import lombok.Getter; import lombok.Setter; @Getter @Setter public class ResourceNotFoundException extends RuntimeException{ String resourceName; String fieldName; long fieldValue; public ResourceNotFoundException(String resourceName, String fieldName, long fieldValue) { super(String.format(\"%s not found with %s : %s\", resourceName, fieldName, fieldValue)); this.resourceName = resourceName; this.fieldName = fieldName; this.fieldValue = fieldValue; } }","dependencies":[]}}
{"project_id":20,"chunk_id":0,"content":{"main_file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\payload\\ApiResponse.java","main_file_content":"package com.suraj.blog.payload; import lombok.AllArgsConstructor; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @Getter @Setter @NoArgsConstructor @AllArgsConstructor public class ApiResponse { private String message; private boolean success; }","dependencies":[]}}
{"project_id":20,"chunk_id":0,"content":{"main_file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\payload\\CategoryDTO.java","main_file_content":"package com.suraj.blog.payload; import javax.validation.constraints.NotBlank; import javax.validation.constraints.Size; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @NoArgsConstructor @Getter @Setter public class CategoryDTO { private Integer categoryId; @NotBlank @Size(min=4, message = \"Title cannot be less than 4!!\") private String categoryTitle; @NotBlank @Size(min = 10, message = \"Description cannot be less than 10 characters !!!\") private String categoryDescription; }","dependencies":[]}}
{"project_id":20,"chunk_id":0,"content":{"main_file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\payload\\CommentDto.java","main_file_content":"package com.suraj.blog.payload; import lombok.Getter; import lombok.Setter; @Getter @Setter public class CommentDto { private int id; private String content; }","dependencies":[]}}
{"project_id":20,"chunk_id":0,"content":{"main_file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\payload\\PostDto.java","main_file_content":"package com.suraj.blog.payload; import java.util.HashSet; import java.util.Set; import com.suraj.blog.entity.Comment; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @Getter @Setter @NoArgsConstructor public class PostDto { private Integer postId; private String title; private String content; private String imageName; private String addedDate; private CategoryDTO category; private UserDTO user; private Set<CommentDto> comments=new HashSet<>(); }","dependencies":[{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\payload\\CategoryDTO.java","file_content":"package com.suraj.blog.payload; import javax.validation.constraints.NotBlank; import javax.validation.constraints.Size; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @NoArgsConstructor @Getter @Setter public class CategoryDTO { private Integer categoryId; @NotBlank @Size(min=4, message = \"Title cannot be less than 4!!\") private String categoryTitle; @NotBlank @Size(min = 10, message = \"Description cannot be less than 10 characters !!!\") private String categoryDescription; }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\payload\\CommentDto.java","file_content":"package com.suraj.blog.payload; import lombok.Getter; import lombok.Setter; @Getter @Setter public class CommentDto { private int id; private String content; }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\payload\\UserDTO.java","file_content":"package com.suraj.blog.payload; import javax.validation.constraints.Email; import javax.validation.constraints.NotEmpty; import javax.validation.constraints.NotNull; import javax.validation.constraints.Size; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @NoArgsConstructor @Getter @Setter public class UserDTO { private int id; @NotEmpty @Size(min=4, message = \"User name should be min of 4 characters !!\") private String name; @Email(message = \"Please enter valid Email address !!\") private String email; @NotEmpty @Size(min=8, max=20, message = \"Please Enter password between 8 to 20 chracters !!\") private String password; @NotEmpty private String about; }"}]}}
{"project_id":20,"chunk_id":0,"content":{"main_file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\payload\\UserDTO.java","main_file_content":"package com.suraj.blog.payload; import javax.validation.constraints.Email; import javax.validation.constraints.NotEmpty; import javax.validation.constraints.NotNull; import javax.validation.constraints.Size; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @NoArgsConstructor @Getter @Setter public class UserDTO { private int id; @NotEmpty @Size(min=4, message = \"User name should be min of 4 characters !!\") private String name; @Email(message = \"Please enter valid Email address !!\") private String email; @NotEmpty @Size(min=8, max=20, message = \"Please Enter password between 8 to 20 chracters !!\") private String password; @NotEmpty private String about; }","dependencies":[]}}
{"project_id":20,"chunk_id":0,"content":{"main_file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\service\\CategoryService.java","main_file_content":"package com.suraj.blog.service; import java.util.List; import com.suraj.blog.payload.CategoryDTO; public interface CategoryService { CategoryDTO createCategory(CategoryDTO categoryDTO); CategoryDTO updateCategory(CategoryDTO categoryDTO, Integer catId); void delterCategory(Integer categoryId); CategoryDTO getCategory(Integer categoryId); List<CategoryDTO> getAllCategory(); }","dependencies":[{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\payload\\CategoryDTO.java","file_content":"package com.suraj.blog.payload; import javax.validation.constraints.NotBlank; import javax.validation.constraints.Size; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @NoArgsConstructor @Getter @Setter public class CategoryDTO { private Integer categoryId; @NotBlank @Size(min=4, message = \"Title cannot be less than 4!!\") private String categoryTitle; @NotBlank @Size(min = 10, message = \"Description cannot be less than 10 characters !!!\") private String categoryDescription; }"}]}}
{"project_id":20,"chunk_id":0,"content":{"main_file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\service\\CommentService.java","main_file_content":"package com.suraj.blog.service; import com.suraj.blog.payload.CommentDto; public interface CommentService { CommentDto createComment(CommentDto commentDto, Integer postId); void deleteComment(Integer commentId); }","dependencies":[{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\payload\\CommentDto.java","file_content":"package com.suraj.blog.payload; import lombok.Getter; import lombok.Setter; @Getter @Setter public class CommentDto { private int id; private String content; }"}]}}
{"project_id":20,"chunk_id":0,"content":{"main_file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\service\\FileService.java","main_file_content":"package com.suraj.blog.service; import java.io.FileNotFoundException; import java.io.IOException; import java.io.InputStream; import org.springframework.web.multipart.MultipartFile; public interface FileService { String uploadImage(String path, MultipartFile file) throws IOException; InputStream getResource(String path, String fileName) throws FileNotFoundException; }","dependencies":[]}}
{"project_id":20,"chunk_id":0,"content":{"main_file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\service\\PostService.java","main_file_content":"package com.suraj.blog.service; import java.util.List; import com.suraj.blog.entity.Post; import com.suraj.blog.payload.PostDto; public interface PostService { PostDto createPost(PostDto postDto, Integer userId, Integer categoryId); PostDto updatePost(PostDto postDto, Integer postId); void deletePost(Integer postId); List<PostDto> getAllPost(Integer pageNumber, Integer pageSize, String sortBy, String sortDir); PostDto getPostById(Integer postId); List<PostDto> getPostByCategory(Integer categoryId); List<PostDto> getPostByUser(Integer userId); List<PostDto> searchPosts(String Keyword); }","dependencies":[{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\payload\\PostDto.java","file_content":"package com.suraj.blog.payload; import java.util.HashSet; import java.util.Set; import com.suraj.blog.entity.Comment; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @Getter @Setter @NoArgsConstructor public class PostDto { private Integer postId; private String title; private String content; private String imageName; private String addedDate; private CategoryDTO category; private UserDTO user; private Set<CommentDto> comments=new HashSet<>(); }"}]}}
{"project_id":20,"chunk_id":0,"content":{"main_file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\service\\UserService.java","main_file_content":"package com.suraj.blog.service; import java.util.List; import com.suraj.blog.payload.UserDTO; public interface UserService { UserDTO createUser(UserDTO userDTO); UserDTO updateUser(UserDTO userDTO, Integer userID); UserDTO getUserById(Integer userId); List<UserDTO> getAllUsers(); void deleteUser(Integer userId); }","dependencies":[{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\payload\\UserDTO.java","file_content":"package com.suraj.blog.payload; import javax.validation.constraints.Email; import javax.validation.constraints.NotEmpty; import javax.validation.constraints.NotNull; import javax.validation.constraints.Size; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @NoArgsConstructor @Getter @Setter public class UserDTO { private int id; @NotEmpty @Size(min=4, message = \"User name should be min of 4 characters !!\") private String name; @Email(message = \"Please enter valid Email address !!\") private String email; @NotEmpty @Size(min=8, max=20, message = \"Please Enter password between 8 to 20 chracters !!\") private String password; @NotEmpty private String about; }"}]}}
{"project_id":20,"chunk_id":0,"content":{"main_file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\service\\impl\\CategoryServiceImpl.java","main_file_content":"package com.suraj.blog.service.impl; import java.util.List; import java.util.stream.Collectors; import org.modelmapper.ModelMapper; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import com.suraj.blog.dao.CategoryRepo; import com.suraj.blog.entity.Category; import com.suraj.blog.exceptions.ResourceNotFoundException; import com.suraj.blog.payload.CategoryDTO; import com.suraj.blog.service.CategoryService; @Service public class CategoryServiceImpl implements CategoryService { @Autowired private CategoryRepo categoryRepo; @Autowired private ModelMapper modelMapper; @Override public CategoryDTO createCategory(CategoryDTO categoryDTO) { Category category = categoryDtoToEntityt(categoryDTO); this.categoryRepo.save(category); CategoryDTO newCategoryDTO = categoryEntityToDto(category); return newCategoryDTO; } @Override public CategoryDTO updateCategory(CategoryDTO categoryDTO, Integer catId) { Category category = this.categoryRepo.findById(catId).orElseThrow(()->new ResourceNotFoundException(\"Category\", \"categoryId\", catId)); category.setCategoryTitle(categoryDTO.getCategoryTitle()); category.setCategoryDescription(categoryDTO.getCategoryDescription()); Category updatedCategory = this.categoryRepo.save(category); return this.categoryEntityToDto(updatedCategory); } @Override public void delterCategory(Integer catId) { Category category = this.categoryRepo.findById(catId).orElseThrow(()->new ResourceNotFoundException(\"Category\", \"categoryId\", catId)); this.categoryRepo.delete(category); } @Override public CategoryDTO getCategory(Integer catId) { Category category = this.categoryRepo.findById(catId).orElseThrow(()->new ResourceNotFoundException(\"Category\", \"categoryId\", catId)); return this.categoryEntityToDto(category); } @Override public List<CategoryDTO> getAllCategory() { List<Category> categories = this.categoryRepo.findAll(); List<CategoryDTO> categoryDTOs = categories.stream().map(cat -> this.categoryEntityToDto(cat)).collect(Collectors.toList()); return categoryDTOs; } public Category categoryDtoToEntityt(CategoryDTO categoryDTO) { return this.modelMapper.map(categoryDTO, Category.class); } public CategoryDTO categoryEntityToDto(Category category) { return this.modelMapper.map(category, CategoryDTO.class); } }","dependencies":[{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\dao\\CategoryRepo.java","file_content":"package com.suraj.blog.dao; import org.springframework.data.jpa.repository.JpaRepository; import com.suraj.blog.entity.Category; public interface CategoryRepo extends JpaRepository<Category, Integer> { }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\entity\\Category.java","file_content":"package com.suraj.blog.entity; import java.util.ArrayList; import java.util.List; import javax.persistence.CascadeType; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.FetchType; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.OneToMany; import lombok.AllArgsConstructor; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @Entity @Getter @Setter @NoArgsConstructor @AllArgsConstructor public class Category { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Integer categoryId; @Column(name = \"title\", length = 100, nullable =false) private String categoryTitle; @Column(name = \"description\") private String categoryDescription; @OneToMany(mappedBy = \"category\" , cascade = CascadeType.ALL, fetch = FetchType.LAZY) private List<Post> posts = new ArrayList<>(); }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\exceptions\\ResourceNotFoundException.java","file_content":"package com.suraj.blog.exceptions; import lombok.Getter; import lombok.Setter; @Getter @Setter public class ResourceNotFoundException extends RuntimeException{ String resourceName; String fieldName; long fieldValue; public ResourceNotFoundException(String resourceName, String fieldName, long fieldValue) { super(String.format(\"%s not found with %s : %s\", resourceName, fieldName, fieldValue)); this.resourceName = resourceName; this.fieldName = fieldName; this.fieldValue = fieldValue; } }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\payload\\CategoryDTO.java","file_content":"package com.suraj.blog.payload; import javax.validation.constraints.NotBlank; import javax.validation.constraints.Size; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @NoArgsConstructor @Getter @Setter public class CategoryDTO { private Integer categoryId; @NotBlank @Size(min=4, message = \"Title cannot be less than 4!!\") private String categoryTitle; @NotBlank @Size(min = 10, message = \"Description cannot be less than 10 characters !!!\") private String categoryDescription; }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\service\\CategoryService.java","file_content":"package com.suraj.blog.service; import java.util.List; import com.suraj.blog.payload.CategoryDTO; public interface CategoryService { CategoryDTO createCategory(CategoryDTO categoryDTO); CategoryDTO updateCategory(CategoryDTO categoryDTO, Integer catId); void delterCategory(Integer categoryId); CategoryDTO getCategory(Integer categoryId); List<CategoryDTO> getAllCategory(); }"}]}}
{"project_id":20,"chunk_id":0,"content":{"main_file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\service\\impl\\CommentServiceImpl.java","main_file_content":"package com.suraj.blog.service.impl; import org.modelmapper.ModelMapper; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import com.suraj.blog.dao.CommentRepo; import com.suraj.blog.dao.PostRepo; import com.suraj.blog.entity.Comment; import com.suraj.blog.entity.Post; import com.suraj.blog.exceptions.ResourceNotFoundException; import com.suraj.blog.payload.CommentDto; import com.suraj.blog.payload.PostDto; import com.suraj.blog.service.CommentService; @Service public class CommentServiceImpl implements CommentService{ @Autowired private PostRepo postRepo; @Autowired private CommentRepo commentRepo; @Autowired private ModelMapper modelMapper; @Override public CommentDto createComment(CommentDto commentDto, Integer postId) { Post post = this.postRepo.findById(postId).orElseThrow(()->new ResourceNotFoundException(\"Post\", \"post Id\", postId)); Comment comment = this.modelMapper.map(commentDto, Comment.class); comment.setPost(post); Comment savedComment = this.commentRepo.save(comment); return this.modelMapper.map(savedComment, CommentDto.class); } @Override public void deleteComment(Integer commentId) { Comment comment = this.commentRepo.findById(commentId).orElseThrow(()-> new ResourceNotFoundException(\"comment\", \"comment Id\", commentId)); this.commentRepo.delete(comment); } }","dependencies":[{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\dao\\CommentRepo.java","file_content":"package com.suraj.blog.dao; import org.springframework.data.jpa.repository.JpaRepository; import com.suraj.blog.entity.Comment; public interface CommentRepo extends JpaRepository<Comment, Integer>{ }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\dao\\PostRepo.java","file_content":"package com.suraj.blog.dao; import java.util.List; import org.springframework.data.jpa.repository.JpaRepository; import com.suraj.blog.entity.Category; import com.suraj.blog.entity.Post; import com.suraj.blog.entity.User; public interface PostRepo extends JpaRepository<Post, Integer> { List<Post> findByUser(User user); List<Post> findByCategory(Category category); List<Post> findByTitleContaining(String title); }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\entity\\Comment.java","file_content":"package com.suraj.blog.entity; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.ManyToOne; import javax.persistence.Table; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @Entity @Table(name = \"comments\") @Getter @Setter @NoArgsConstructor public class Comment { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private int id; private String content; @ManyToOne private Post post; }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\entity\\Post.java","file_content":"package com.suraj.blog.entity; import java.util.Date; import java.util.HashSet; import java.util.Set; import javax.persistence.CascadeType; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.JoinColumn; import javax.persistence.ManyToOne; import javax.persistence.OneToMany; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @Entity @Getter @Setter @NoArgsConstructor public class Post { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Integer postId; @Column(name=\"post_title\", nullable = false, length = 100) private String title; @Column(length = 10000) private String content; private String imageName; private Date addedDate; @ManyToOne @JoinColumn(name = \"categoryId\") private Category category; @ManyToOne private User user; @OneToMany(mappedBy = \"post\", cascade = CascadeType.ALL) private Set<Comment> comments = new HashSet<Comment>(); }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\exceptions\\ResourceNotFoundException.java","file_content":"package com.suraj.blog.exceptions; import lombok.Getter; import lombok.Setter; @Getter @Setter public class ResourceNotFoundException extends RuntimeException{ String resourceName; String fieldName; long fieldValue; public ResourceNotFoundException(String resourceName, String fieldName, long fieldValue) { super(String.format(\"%s not found with %s : %s\", resourceName, fieldName, fieldValue)); this.resourceName = resourceName; this.fieldName = fieldName; this.fieldValue = fieldValue; } }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\payload\\CommentDto.java","file_content":"package com.suraj.blog.payload; import lombok.Getter; import lombok.Setter; @Getter @Setter public class CommentDto { private int id; private String content; }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\service\\CommentService.java","file_content":"package com.suraj.blog.service; import com.suraj.blog.payload.CommentDto; public interface CommentService { CommentDto createComment(CommentDto commentDto, Integer postId); void deleteComment(Integer commentId); }"}]}}
{"project_id":20,"chunk_id":0,"content":{"main_file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\service\\impl\\FileServiceImpl.java","main_file_content":"package com.suraj.blog.service.impl; import java.io.File; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.IOException; import java.io.InputStream; import java.nio.file.Files; import java.nio.file.Paths; import java.util.UUID; import org.springframework.stereotype.Service; import org.springframework.web.multipart.MultipartFile; import com.suraj.blog.service.FileService; @Service public class FileServiceImpl implements FileService{ @Override public String uploadImage(String path, MultipartFile file) throws IOException { String name = file.getOriginalFilename(); String randomId = UUID.randomUUID().toString(); String fileName1= randomId.concat(name.substring(name.lastIndexOf(\".\"))); String filePath = path + File.separator + fileName1; File f = new File(path); if(!f.exists()) { f.mkdir(); } Files.copy(file.getInputStream(), Paths.get(filePath)); return fileName1; } @Override public InputStream getResource(String path, String fileName) throws FileNotFoundException { String fullPath = path + File.separator + fileName; InputStream is = new FileInputStream(fullPath); return is; } }","dependencies":[{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\service\\FileService.java","file_content":"package com.suraj.blog.service; import java.io.FileNotFoundException; import java.io.IOException; import java.io.InputStream; import org.springframework.web.multipart.MultipartFile; public interface FileService { String uploadImage(String path, MultipartFile file) throws IOException; InputStream getResource(String path, String fileName) throws FileNotFoundException; }"}]}}
{"project_id":20,"chunk_id":0,"content":{"main_file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\service\\impl\\PostServiceImpl.java","main_file_content":"package com.suraj.blog.service.impl; import java.util.Date; import java.util.List; import java.util.stream.Collectors; import org.modelmapper.ModelMapper; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.data.domain.Page; import org.springframework.data.domain.PageRequest; import org.springframework.data.domain.Pageable; import org.springframework.data.domain.Sort; import org.springframework.stereotype.Service; import com.suraj.blog.dao.CategoryRepo; import com.suraj.blog.dao.PostRepo; import com.suraj.blog.dao.UserRepo; import com.suraj.blog.entity.Category; import com.suraj.blog.entity.Post; import com.suraj.blog.entity.User; import com.suraj.blog.exceptions.ResourceNotFoundException; import com.suraj.blog.payload.PostDto; import com.suraj.blog.service.PostService; @Service public class PostServiceImpl implements PostService { @Autowired private PostRepo postRepo; @Autowired private UserRepo userRepo; @Autowired private CategoryRepo categoryRepo; @Autowired private ModelMapper modelMapper; @Override public PostDto createPost(PostDto postDto, Integer userId, Integer categoryId) { User user = this.userRepo.findById(userId) .orElseThrow(() -> new ResourceNotFoundException(\"User\", \"userId\", userId)); Category category = this.categoryRepo.findById(categoryId) .orElseThrow(() -> new ResourceNotFoundException(\"Category\", \"categoryId\", categoryId)); Post post = postDtoToEntity(postDto); post.setImageName(\"default.png\"); post.setAddedDate(new Date()); post.setUser(user); post.setCategory(category); Post newPost = this.postRepo.save(post); return postEntityToDto(newPost); } @Override public PostDto updatePost(PostDto postDto, Integer postId) { Post post = this.postRepo.findById(postId) .orElseThrow(() -> new ResourceNotFoundException(\"Post\", \"post id\", postId)); post.setTitle(postDto.getTitle()); post.setContent(postDto.getContent()); post.setImageName(postDto.getImageName()); Post updatedPost = this.postRepo.save(post); return postEntityToDto(updatedPost); } @Override public void deletePost(Integer postId) { Post post = this.postRepo.findById(postId) .orElseThrow(() -> new ResourceNotFoundException(\"Post\", \"post id\", postId)); this.postRepo.delete(post); } @Override public List<PostDto> getAllPost(Integer pageNumber, Integer pageSize, String sortBy, String sortDir) { Sort sort = null; if(sortDir.equalsIgnoreCase(\"a\")) { sort = Sort.by(sortBy).ascending(); }else { sort = Sort.by(sortBy).descending(); } Pageable p = PageRequest.of(pageNumber, pageSize, sort); Page<Post> page = this.postRepo.findAll(p); List<Post> posts = page.getContent(); List<PostDto> postDtos = posts.stream().map(post -> this.modelMapper.map(post, PostDto.class)) .collect(Collectors.toList()); return postDtos; } @Override public PostDto getPostById(Integer postId) { Post post = this.postRepo.findById(postId) .orElseThrow(() -> new ResourceNotFoundException(\"Post\", \"post id\", postId)); PostDto postDto = postEntityToDto(post); return postDto; } @Override public List<PostDto> getPostByCategory(Integer categoryId) { Category category = this.categoryRepo.findById(categoryId) .orElseThrow(() -> new ResourceNotFoundException(\"Category\", \"categoryId\", categoryId)); List<Post> posts = this.postRepo.findByCategory(category); List<PostDto> postDtos = posts.stream().map(post -> this.modelMapper.map(post, PostDto.class)) .collect(Collectors.toList()); return postDtos; } @Override public List<PostDto> getPostByUser(Integer userId) { User user = this.userRepo.findById(userId) .orElseThrow(() -> new ResourceNotFoundException(\"User\", \"userId\", userId)); List<Post> posts = this.postRepo.findByUser(user); List<PostDto> postDtos = posts.stream().map(post -> this.modelMapper.map(post, PostDto.class)) .collect(Collectors.toList()); return postDtos; } @Override public List<PostDto> searchPosts(String Keyword) { List<Post> posts = this.postRepo.findByTitleContaining(Keyword); List<PostDto> postDtos = posts.stream().map(post->postEntityToDto(post)).collect(Collectors.toList()); return postDtos; } public Post postDtoToEntity(PostDto postDto) { Post post = this.modelMapper.map(postDto, Post.class); return post; } public PostDto postEntityToDto(Post post) { PostDto postDto = this.modelMapper.map(post, PostDto.class); return postDto; } }","dependencies":[{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\dao\\CategoryRepo.java","file_content":"package com.suraj.blog.dao; import org.springframework.data.jpa.repository.JpaRepository; import com.suraj.blog.entity.Category; public interface CategoryRepo extends JpaRepository<Category, Integer> { }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\dao\\PostRepo.java","file_content":"package com.suraj.blog.dao; import java.util.List; import org.springframework.data.jpa.repository.JpaRepository; import com.suraj.blog.entity.Category; import com.suraj.blog.entity.Post; import com.suraj.blog.entity.User; public interface PostRepo extends JpaRepository<Post, Integer> { List<Post> findByUser(User user); List<Post> findByCategory(Category category); List<Post> findByTitleContaining(String title); }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\dao\\UserRepo.java","file_content":"package com.suraj.blog.dao; import org.springframework.data.jpa.repository.JpaRepository; import com.suraj.blog.entity.User; public interface UserRepo extends JpaRepository<User, Integer> { }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\entity\\Category.java","file_content":"package com.suraj.blog.entity; import java.util.ArrayList; import java.util.List; import javax.persistence.CascadeType; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.FetchType; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.OneToMany; import lombok.AllArgsConstructor; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @Entity @Getter @Setter @NoArgsConstructor @AllArgsConstructor public class Category { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Integer categoryId; @Column(name = \"title\", length = 100, nullable =false) private String categoryTitle; @Column(name = \"description\") private String categoryDescription; @OneToMany(mappedBy = \"category\" , cascade = CascadeType.ALL, fetch = FetchType.LAZY) private List<Post> posts = new ArrayList<>(); }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\entity\\Post.java","file_content":"package com.suraj.blog.entity; import java.util.Date; import java.util.HashSet; import java.util.Set; import javax.persistence.CascadeType; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.JoinColumn; import javax.persistence.ManyToOne; import javax.persistence.OneToMany; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @Entity @Getter @Setter @NoArgsConstructor public class Post { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Integer postId; @Column(name=\"post_title\", nullable = false, length = 100) private String title; @Column(length = 10000) private String content; private String imageName; private Date addedDate; @ManyToOne @JoinColumn(name = \"categoryId\") private Category category; @ManyToOne private User user; @OneToMany(mappedBy = \"post\", cascade = CascadeType.ALL) private Set<Comment> comments = new HashSet<Comment>(); }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\entity\\User.java","file_content":"package com.suraj.blog.entity; import java.util.ArrayList; import java.util.List; import javax.persistence.CascadeType; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.FetchType; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.OneToMany; import javax.persistence.Table; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @Entity @Table(name = \"users\") @Getter @Setter @NoArgsConstructor public class User { @Id @GeneratedValue(strategy = GenerationType.AUTO) private int id; @Column(nullable = false, length =100) private String name; private String email; private String password; private String about; @OneToMany(mappedBy = \"user\" , cascade = CascadeType.ALL, fetch = FetchType.LAZY) private List<Post> posts = new ArrayList<>(); }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\exceptions\\ResourceNotFoundException.java","file_content":"package com.suraj.blog.exceptions; import lombok.Getter; import lombok.Setter; @Getter @Setter public class ResourceNotFoundException extends RuntimeException{ String resourceName; String fieldName; long fieldValue; public ResourceNotFoundException(String resourceName, String fieldName, long fieldValue) { super(String.format(\"%s not found with %s : %s\", resourceName, fieldName, fieldValue)); this.resourceName = resourceName; this.fieldName = fieldName; this.fieldValue = fieldValue; } }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\payload\\PostDto.java","file_content":"package com.suraj.blog.payload; import java.util.HashSet; import java.util.Set; import com.suraj.blog.entity.Comment; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @Getter @Setter @NoArgsConstructor public class PostDto { private Integer postId; private String title; private String content; private String imageName; private String addedDate; private CategoryDTO category; private UserDTO user; private Set<CommentDto> comments=new HashSet<>(); }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\service\\PostService.java","file_content":"package com.suraj.blog.service; import java.util.List; import com.suraj.blog.entity.Post; import com.suraj.blog.payload.PostDto; public interface PostService { PostDto createPost(PostDto postDto, Integer userId, Integer categoryId); PostDto updatePost(PostDto postDto, Integer postId); void deletePost(Integer postId); List<PostDto> getAllPost(Integer pageNumber, Integer pageSize, String sortBy, String sortDir); PostDto getPostById(Integer postId); List<PostDto> getPostByCategory(Integer categoryId); List<PostDto> getPostByUser(Integer userId); List<PostDto> searchPosts(String Keyword); }"}]}}
{"project_id":20,"chunk_id":0,"content":{"main_file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\service\\impl\\UserServiceImpl.java","main_file_content":"package com.suraj.blog.service.impl; import java.util.List; import java.util.stream.Collectors; import org.modelmapper.ModelMapper; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import com.suraj.blog.payload.UserDTO; import com.suraj.blog.service.UserService; import com.suraj.blog.dao.UserRepo; import com.suraj.blog.entity.User; import com.suraj.blog.exceptions.ResourceNotFoundException; @Service public class UserServiceImpl implements UserService { @Autowired private UserRepo userRepo; @Autowired ModelMapper modelMapper; @Override public UserDTO createUser(UserDTO userDTO) { User user = this.dtoToUser(userDTO); User savedUser = this.userRepo.save(user); return this.usertoUserDTO(savedUser); } @Override public UserDTO updateUser(UserDTO userDTO, Integer userId) { User user = this.userRepo.findById(userId) .orElseThrow(() -> new ResourceNotFoundException(\"User\", \"id\", userId)); user.setEmail(userDTO.getEmail()); user.setName(userDTO.getName()); user.setAbout(userDTO.getAbout()); user.setPassword(userDTO.getPassword()); User updatedUser = this.userRepo.save(user); UserDTO userDTO1 = this.usertoUserDTO(updatedUser); return userDTO1; } @Override public UserDTO getUserById(Integer userId) { User user = this.userRepo.findById(userId) .orElseThrow(() -> new ResourceNotFoundException(\"User\", \"ID\", userId)); return this.usertoUserDTO(user); } @Override public List<UserDTO> getAllUsers() { List<User> users = this.userRepo.findAll(); List<UserDTO> userDTOs = users.stream().map(user -> this.usertoUserDTO(user)).collect(Collectors.toList()); return userDTOs; } @Override public void deleteUser(Integer userId) { User user = this.userRepo.findById(userId) .orElseThrow(() -> new ResourceNotFoundException(\"User\", \"id\", userId)); this.userRepo.delete(user); } private User dtoToUser(UserDTO userDTO) { User user = this.modelMapper.map(userDTO, User.class); return user; } private UserDTO usertoUserDTO(User user) { UserDTO userDTO = this.modelMapper.map(user, UserDTO.class); return userDTO; } }","dependencies":[{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\dao\\UserRepo.java","file_content":"package com.suraj.blog.dao; import org.springframework.data.jpa.repository.JpaRepository; import com.suraj.blog.entity.User; public interface UserRepo extends JpaRepository<User, Integer> { }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\entity\\User.java","file_content":"package com.suraj.blog.entity; import java.util.ArrayList; import java.util.List; import javax.persistence.CascadeType; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.FetchType; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.OneToMany; import javax.persistence.Table; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @Entity @Table(name = \"users\") @Getter @Setter @NoArgsConstructor public class User { @Id @GeneratedValue(strategy = GenerationType.AUTO) private int id; @Column(nullable = false, length =100) private String name; private String email; private String password; private String about; @OneToMany(mappedBy = \"user\" , cascade = CascadeType.ALL, fetch = FetchType.LAZY) private List<Post> posts = new ArrayList<>(); }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\exceptions\\ResourceNotFoundException.java","file_content":"package com.suraj.blog.exceptions; import lombok.Getter; import lombok.Setter; @Getter @Setter public class ResourceNotFoundException extends RuntimeException{ String resourceName; String fieldName; long fieldValue; public ResourceNotFoundException(String resourceName, String fieldName, long fieldValue) { super(String.format(\"%s not found with %s : %s\", resourceName, fieldName, fieldValue)); this.resourceName = resourceName; this.fieldName = fieldName; this.fieldValue = fieldValue; } }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\payload\\UserDTO.java","file_content":"package com.suraj.blog.payload; import javax.validation.constraints.Email; import javax.validation.constraints.NotEmpty; import javax.validation.constraints.NotNull; import javax.validation.constraints.Size; import lombok.Getter; import lombok.NoArgsConstructor; import lombok.Setter; @NoArgsConstructor @Getter @Setter public class UserDTO { private int id; @NotEmpty @Size(min=4, message = \"User name should be min of 4 characters !!\") private String name; @Email(message = \"Please enter valid Email address !!\") private String email; @NotEmpty @Size(min=8, max=20, message = \"Please Enter password between 8 to 20 chracters !!\") private String password; @NotEmpty private String about; }"},{"file_path":"BlogBackend-main\\blog-api-com\\src\\main\\java\\com\\suraj\\blog\\service\\UserService.java","file_content":"package com.suraj.blog.service; import java.util.List; import com.suraj.blog.payload.UserDTO; public interface UserService { UserDTO createUser(UserDTO userDTO); UserDTO updateUser(UserDTO userDTO, Integer userID); UserDTO getUserById(Integer userId); List<UserDTO> getAllUsers(); void deleteUser(Integer userId); }"}]}}
{"project_id":20,"chunk_id":0,"content":{"main_file_path":"BlogBackend-main\\blog-api-com\\src\\test\\java\\com\\suraj\\blog\\DemoApplicationTests.java","main_file_content":"package com.suraj.blog; import org.junit.jupiter.api.Test; import org.springframework.boot.test.context.SpringBootTest; @SpringBootTest class DemoApplicationTests { @Test void contextLoads() { } }","dependencies":[]}}
{"project_id":23,"chunk_id":0,"content":{"main_file_path":"Brick-Breaker-Game\\src\\main\\java\\com\\mycompany\\brick\\GamePlay.java","main_file_content":"package com.mycompany.brick; import javax.swing.JPanel; import javax.swing.Timer; import java.awt.Graphics2D; import java.awt.Rectangle; import java.awt.Graphics; import java.awt.Color; import java.awt.Font; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.awt.event.KeyEvent; import java.awt.event.KeyListener; public class GamePlay extends JPanel implements KeyListener, ActionListener { private boolean play = false; private int score = 0; private int totalbricks = 21; private Timer Timer; private int delay = 8; private int playerX = 310; private int ballposX = 120; private int ballposY = 350; private int ballXdir = -1; private int ballYdir = -2; private MapGenerator map; public GamePlay() { map = new MapGenerator(3, 7); addKeyListener(this); setFocusable(true); setFocusTraversalKeysEnabled(false); Timer = new Timer(delay, this); Timer.start(); } public void paint(Graphics g) { g.setColor(Color.black); g.fillRect(1, 1, 692, 592); map.draw((Graphics2D) g); g.setColor(Color.yellow); g.fillRect(0, 0, 3, 592); g.fillRect(0, 0, 692, 3); g.fillRect(691, 0, 3, 592); g.setColor(Color.white); g.setFont(new Font(\"serif\", Font.BOLD, 25)); g.drawString(\"\" + score, 590, 30); g.setColor(Color.yellow); g.fillRect(playerX, 550, 100, 8); g.setColor(Color.GREEN); g.fillOval(ballposX, ballposY, 20, 20); if (ballposY > 570) { play = false; ballXdir = 0; ballYdir = 0; g.setColor(Color.red); g.setFont(new Font(\"serif\", Font.BOLD, 30)); g.drawString(\" Game Over Score: \" + score, 190, 300); g.setFont(new Font(\"serif\", Font.BOLD, 30)); g.drawString(\" Press Enter to Restart\", 190, 340); } if(totalbricks == 0){ play = false; ballYdir = -2; ballXdir = -1; g.setColor(Color.red); g.setFont(new Font(\"serif\",Font.BOLD,30)); g.drawString(\" Game Over: \"+score,190,300); g.setFont(new Font(\"serif\", Font.BOLD, 30)); g.drawString(\" Press Enter to Restart\", 190, 340); } g.dispose(); } @Override public void actionPerformed(ActionEvent e) { Timer.start(); if (play) { if (new Rectangle(ballposX, ballposY, 20, 20).intersects(new Rectangle(playerX, 550, 100, 8))) { ballYdir = -ballYdir; } A: for (int i = 0; i < map.map.length; i++) { for (int j = 0; j < map.map[0].length; j++) { if (map.map[i][j] > 0) { int brickX = j * map.bricksWidth + 80; int brickY = i * map.bricksHeight + 50; int bricksWidth = map.bricksWidth; int bricksHeight = map.bricksHeight; Rectangle rect = new Rectangle(brickX, brickY, bricksWidth, bricksHeight); Rectangle ballrect = new Rectangle(ballposX, ballposY, 20, 20); Rectangle brickrect = rect; if (ballrect.intersects(brickrect)) { map.setBricksValue(0, i, j); totalbricks--; score += 5; if (ballposX + 19 <= brickrect.x || ballposX + 1 >= brickrect.x + bricksWidth) { ballXdir = -ballXdir; } else { ballYdir = -ballYdir; } break A; } } } } ballposX += ballXdir; ballposY += ballYdir; if (ballposX < 0) { ballXdir = -ballXdir; } if (ballposY < 0) { ballYdir = -ballYdir; } if (ballposX > 670) { ballXdir = -ballXdir; } } repaint(); } @Override public void keyTyped(KeyEvent e) { } @Override public void keyReleased(KeyEvent e) { } @Override public void keyPressed(KeyEvent e) { if (e.getKeyCode() == KeyEvent.VK_RIGHT) { if (playerX >= 600) { playerX = 600; } else { moveRight(); } } if (e.getKeyCode() == KeyEvent.VK_LEFT) { if (playerX < 10) { playerX = 10; } else { moveLeft(); } } if (e.getKeyCode() == KeyEvent.VK_ENTER) { if (!play) { ballposX = 120; ballposY = 350; ballXdir = -1; ballYdir = -2; score = 0; playerX = 310; totalbricks = 21; map = new MapGenerator(3, 7); repaint(); } } } public void moveRight () { play = true; playerX += 20; } public void moveLeft () { play = true; playerX -= 20; } }","dependencies":[{"file_path":"Brick-Breaker-Game\\src\\main\\java\\com\\mycompany\\brick\\MapGenerator.java","file_content":"package com.mycompany.brick; import java.awt.BasicStroke; import java.awt.Color; import java.awt.Graphics2D; public class MapGenerator { public int map[][]; public int bricksWidth; public int bricksHeight; public MapGenerator(int row , int col){ map = new int[row][col]; for (int[] map1 : map) { for (int j = 0; j < map[0].length; j++) { map1[j] = 1; } } bricksWidth = 540/col; bricksHeight = 150/row; } public void draw(Graphics2D g) { for (int i = 0; i < map.length; i++) { for (int j = 0; j < map[0].length; j++) { if (map[i][j] > 0) { g.setColor(Color.red); g.fillRect(j * bricksWidth + 80, i * bricksHeight + 50, bricksWidth, bricksHeight); g.setStroke(new BasicStroke(3)); g.setColor(Color.black); g.drawRect(j * bricksWidth + 80, i * bricksHeight + 50, bricksWidth, bricksHeight); } } } } public void setBricksValue(int value,int row,int col) { map[row][col] = value; } }"}]}}
{"project_id":23,"chunk_id":0,"content":{"main_file_path":"Brick-Breaker-Game\\src\\main\\java\\com\\mycompany\\brick\\MapGenerator.java","main_file_content":"package com.mycompany.brick; import java.awt.BasicStroke; import java.awt.Color; import java.awt.Graphics2D; public class MapGenerator { public int map[][]; public int bricksWidth; public int bricksHeight; public MapGenerator(int row , int col){ map = new int[row][col]; for (int[] map1 : map) { for (int j = 0; j < map[0].length; j++) { map1[j] = 1; } } bricksWidth = 540/col; bricksHeight = 150/row; } public void draw(Graphics2D g) { for (int i = 0; i < map.length; i++) { for (int j = 0; j < map[0].length; j++) { if (map[i][j] > 0) { g.setColor(Color.red); g.fillRect(j * bricksWidth + 80, i * bricksHeight + 50, bricksWidth, bricksHeight); g.setStroke(new BasicStroke(3)); g.setColor(Color.black); g.drawRect(j * bricksWidth + 80, i * bricksHeight + 50, bricksWidth, bricksHeight); } } } } public void setBricksValue(int value,int row,int col) { map[row][col] = value; } }","dependencies":[]}}
{"project_id":23,"chunk_id":0,"content":{"main_file_path":"Brick-Breaker-Game\\src\\main\\java\\com\\mycompany\\brick\\MyApp.java","main_file_content":"package com.mycompany.brick; import javax.swing.JFrame; public class MyApp { public static void main(String[] args) { JFrame obj = new JFrame(); GamePlay gameplay = new GamePlay(); obj.setBounds(10,10,700,600); obj.setTitle(\"BrickBreaker\"); obj.setResizable(false); obj.setVisible(true); obj.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); obj.add(gameplay); } }","dependencies":[{"file_path":"Brick-Breaker-Game\\src\\main\\java\\com\\mycompany\\brick\\GamePlay.java","file_content":"package com.mycompany.brick; import javax.swing.JPanel; import javax.swing.Timer; import java.awt.Graphics2D; import java.awt.Rectangle; import java.awt.Graphics; import java.awt.Color; import java.awt.Font; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.awt.event.KeyEvent; import java.awt.event.KeyListener; public class GamePlay extends JPanel implements KeyListener, ActionListener { private boolean play = false; private int score = 0; private int totalbricks = 21; private Timer Timer; private int delay = 8; private int playerX = 310; private int ballposX = 120; private int ballposY = 350; private int ballXdir = -1; private int ballYdir = -2; private MapGenerator map; public GamePlay() { map = new MapGenerator(3, 7); addKeyListener(this); setFocusable(true); setFocusTraversalKeysEnabled(false); Timer = new Timer(delay, this); Timer.start(); } public void paint(Graphics g) { g.setColor(Color.black); g.fillRect(1, 1, 692, 592); map.draw((Graphics2D) g); g.setColor(Color.yellow); g.fillRect(0, 0, 3, 592); g.fillRect(0, 0, 692, 3); g.fillRect(691, 0, 3, 592); g.setColor(Color.white); g.setFont(new Font(\"serif\", Font.BOLD, 25)); g.drawString(\"\" + score, 590, 30); g.setColor(Color.yellow); g.fillRect(playerX, 550, 100, 8); g.setColor(Color.GREEN); g.fillOval(ballposX, ballposY, 20, 20); if (ballposY > 570) { play = false; ballXdir = 0; ballYdir = 0; g.setColor(Color.red); g.setFont(new Font(\"serif\", Font.BOLD, 30)); g.drawString(\" Game Over Score: \" + score, 190, 300); g.setFont(new Font(\"serif\", Font.BOLD, 30)); g.drawString(\" Press Enter to Restart\", 190, 340); } if(totalbricks == 0){ play = false; ballYdir = -2; ballXdir = -1; g.setColor(Color.red); g.setFont(new Font(\"serif\",Font.BOLD,30)); g.drawString(\" Game Over: \"+score,190,300); g.setFont(new Font(\"serif\", Font.BOLD, 30)); g.drawString(\" Press Enter to Restart\", 190, 340); } g.dispose(); } @Override public void actionPerformed(ActionEvent e) { Timer.start(); if (play) { if (new Rectangle(ballposX, ballposY, 20, 20).intersects(new Rectangle(playerX, 550, 100, 8))) { ballYdir = -ballYdir; } A: for (int i = 0; i < map.map.length; i++) { for (int j = 0; j < map.map[0].length; j++) { if (map.map[i][j] > 0) { int brickX = j * map.bricksWidth + 80; int brickY = i * map.bricksHeight + 50; int bricksWidth = map.bricksWidth; int bricksHeight = map.bricksHeight; Rectangle rect = new Rectangle(brickX, brickY, bricksWidth, bricksHeight); Rectangle ballrect = new Rectangle(ballposX, ballposY, 20, 20); Rectangle brickrect = rect; if (ballrect.intersects(brickrect)) { map.setBricksValue(0, i, j); totalbricks--; score += 5; if (ballposX + 19 <= brickrect.x || ballposX + 1 >= brickrect.x + bricksWidth) { ballXdir = -ballXdir; } else { ballYdir = -ballYdir; } break A; } } } } ballposX += ballXdir; ballposY += ballYdir; if (ballposX < 0) { ballXdir = -ballXdir; } if (ballposY < 0) { ballYdir = -ballYdir; } if (ballposX > 670) { ballXdir = -ballXdir; } } repaint(); } @Override public void keyTyped(KeyEvent e) { } @Override public void keyReleased(KeyEvent e) { } @Override public void keyPressed(KeyEvent e) { if (e.getKeyCode() == KeyEvent.VK_RIGHT) { if (playerX >= 600) { playerX = 600; } else { moveRight(); } } if (e.getKeyCode() == KeyEvent.VK_LEFT) { if (playerX < 10) { playerX = 10; } else { moveLeft(); } } if (e.getKeyCode() == KeyEvent.VK_ENTER) { if (!play) { ballposX = 120; ballposY = 350; ballXdir = -1; ballYdir = -2; score = 0; playerX = 310; totalbricks = 21; map = new MapGenerator(3, 7); repaint(); } } } public void moveRight () { play = true; playerX += 20; } public void moveLeft () { play = true; playerX -= 20; } }"}]}}
{"project_id":24,"chunk_id":0,"content":{"main_file_path":"Budget Tracker project\\BudgetTracker.java","main_file_content":"import java.util.Scanner; public class BudgetTracker { private double balance; public BudgetTracker() { balance = 0.0; } public void addIncome(double amount) { balance += amount; } public void addExpense(double amount) { balance -= amount; } public double getBalance() { return balance; } public static void main(String[] args) { Scanner scanner = new Scanner(System.in); BudgetTracker tracker = new BudgetTracker(); while (true) { System.out.println(\"1. Add Income\"); System.out.println(\"2. Add Expense\"); System.out.println(\"3. View Balance\"); System.out.println(\"4. Exit\"); System.out.print(\"Enter your choice: \"); int choice = scanner.nextInt(); switch (choice) { case 1: System.out.print(\"Enter income amount: \"); double income = scanner.nextDouble(); tracker.addIncome(income); break; case 2: System.out.print(\"Enter expense amount: \"); double expense = scanner.nextDouble(); tracker.addExpense(expense); break; case 3: System.out.println(\"Current Balance: Rs\" + tracker.getBalance()); break; case 4: System.out.println(\"Exiting... Thank you!\"); return; default: System.out.println(\"Invalid choice. Please try again.\"); } } } }","dependencies":[]}}
{"project_id":26,"chunk_id":0,"content":{"main_file_path":"Calorie Calculator\\CalorieCalculator.java","main_file_content":"import java.util.Scanner; public class CalorieCalculator { private static final double MALE_BMR_CONSTANT = 88.362; private static final double FEMALE_BMR_CONSTANT = 447.593; private static final double MALE_WEIGHT_COEFFICIENT = 13.397; private static final double FEMALE_WEIGHT_COEFFICIENT = 9.247; private static final double MALE_HEIGHT_COEFFICIENT = 4.799; private static final double FEMALE_HEIGHT_COEFFICIENT = 3.098; private static final double MALE_AGE_COEFFICIENT = 5.677; private static final double FEMALE_AGE_COEFFICIENT = 4.330; private static final double SEDENTARY_MULTIPLIER = 1.2; private static final double MODERATE_MULTIPLIER = 1.55; private static final double ACTIVE_MULTIPLIER = 1.725; public static void main(String[] args) { Scanner scanner = new Scanner(System.in); System.out.println(\"Calorie Calculator\"); System.out.print(\"Enter your gender (M/F): \"); String gender = scanner.nextLine().trim().toUpperCase(); if (!gender.equals(\"M\") && !gender.equals(\"F\")) { System.out.println(\"Invalid gender input. Please enter 'M' or 'F'.\"); return; } System.out.print(\"Enter your age (in years): \"); int age = getValidIntInput(scanner); System.out.print(\"Enter your weight (in kilograms): \"); double weight = getValidDoubleInput(scanner); System.out.print(\"Enter your height (in centimeters): \"); double height = getValidDoubleInput(scanner); System.out.print(\"Enter your activity level (sedentary/moderate/active): \"); String activityLevel = scanner.nextLine().trim().toLowerCase(); if (!isValidActivityLevel(activityLevel)) { System.out.println(\"Invalid activity level input. Please choose 'sedentary', 'moderate', or 'active'.\"); return; } double bmr = calculateBMR(gender, age, weight, height); double calorieNeeds = calculateCalorieNeeds(bmr, activityLevel); System.out.printf(\"Your Basal Metabolic Rate (BMR) is: %.0f calories per day.\\n\", bmr); System.out.printf(\"Your estimated daily calorie needs are: %.0f calories per day.\\n\", calorieNeeds); scanner.close(); } private static int getValidIntInput(Scanner scanner) { while (!scanner.hasNextInt()) { System.out.println(\"Invalid input. Please enter a valid integer.\"); scanner.next(); } return scanner.nextInt(); } private static double getValidDoubleInput(Scanner scanner) { while (!scanner.hasNextDouble()) { System.out.println(\"Invalid input. Please enter a valid number.\"); scanner.next(); } return scanner.nextDouble(); } private static boolean isValidActivityLevel(String activityLevel) { return activityLevel.equals(\"sedentary\") || activityLevel.equals(\"moderate\") || activityLevel.equals(\"active\"); } private static double calculateBMR(String gender, int age, double weight, double height) { double bmr; if (gender.equals(\"M\")) { bmr = MALE_BMR_CONSTANT + (MALE_WEIGHT_COEFFICIENT * weight) + (MALE_HEIGHT_COEFFICIENT * height) - (MALE_AGE_COEFFICIENT * age); } else { bmr = FEMALE_BMR_CONSTANT + (FEMALE_WEIGHT_COEFFICIENT * weight) + (FEMALE_HEIGHT_COEFFICIENT * height) - (FEMALE_AGE_COEFFICIENT * age); } return bmr; } private static double calculateCalorieNeeds(double bmr, String activityLevel) { double calorieNeeds; switch (activityLevel) { case \"sedentary\": calorieNeeds = bmr * SEDENTARY_MULTIPLIER; break; case \"moderate\": calorieNeeds = bmr * MODERATE_MULTIPLIER; break; case \"active\": calorieNeeds = bmr * ACTIVE_MULTIPLIER; break; default: throw new IllegalArgumentException(\"Invalid activity level\"); } return calorieNeeds; } }","dependencies":[]}}
{"project_id":27,"chunk_id":0,"content":{"main_file_path":"Career Information Management System Java Project\\CIFS\\CIFS\\src\\EditResumeServlet.java","main_file_content":"import javax.servlet.*; import javax.servlet.http.*; import java.io.*; import java.sql.*; public class EditResumeServlet extends HttpServlet { Connection con; Statement st; ResultSet rs; PrintWriter out; public void init(ServletConfig conf) { String d=conf.getInitParameter(\"driver\"); String ur=conf.getInitParameter(\"url\"); String us=conf.getInitParameter(\"user\"); String p=conf.getInitParameter(\"pass\"); try{ Class.forName(d); con=DriverManager.getConnection(ur,us,p); }catch(Exception e) { System.out.println(\"\"+e); } } public void service(HttpServletRequest req,HttpServletResponse res) throws ServletException,IOException { try{ PreparedStatement ps; res.setContentType(\"text/html\"); out=res.getWriter(); HttpSession session=req.getSession(true); String user=\"\"+session.getAttribute(\"user\"); System.out.println(\"\"+user); ps=con.prepareStatement(\"update Resume set restitle=?,resowner=?,address=?,email=?,phone=?,mobile=?,degree=?,othersdeg=?,degper=?,pg=?,otherpg=?,pgper=?,skills=?,workexp=?,projone=?,projtwo=?,refference=? where username=?\"); ps.setString(1,\"\"+req.getParameter(\"title\")); ps.setString(2,\"\"+req.getParameter(\"name\")); ps.setString(3,\"\"+req.getParameter(\"address\")); ps.setString(4,\"\"+req.getParameter(\"email\")); ps.setString(5,\"\"+req.getParameter(\"phone\")); ps.setString(6,\"\"+req.getParameter(\"mobile\")); ps.setString(7,\"\"+req.getParameter(\"degree\")); ps.setString(8,\"\"+req.getParameter(\"otherdeg\")); ps.setString(9,\"\"+req.getParameter(\"degper\")); ps.setString(10,\"\"+req.getParameter(\"pg\")); ps.setString(11,\"\"+req.getParameter(\"otherpg\")); ps.setString(12,\"\"+req.getParameter(\"pgper\")); ps.setString(13,\"\"+req.getParameter(\"skill\")); ps.setString(14,\"\"+req.getParameter(\"workexp\")); ps.setString(15,\"\"+req.getParameter(\"pro1\")); ps.setString(16,\"\"+req.getParameter(\"pro2\")); ps.setString(17,\"\"+req.getParameter(\"ref\")); ps.setString(18,\"\"+user); ps.execute(); res.sendRedirect(\"./ResEditSuccess.jsp\"); }catch(Exception e) { System.out.println(\"\"+e); res.sendRedirect(\"./ResEditFailed.jsp\"); } } }","dependencies":[]}}
{"project_id":27,"chunk_id":0,"content":{"main_file_path":"Career Information Management System Java Project\\CIFS\\CIFS\\src\\LoginServlet.java","main_file_content":"import javax.servlet.*; import javax.servlet.http.*; import java.io.*; import java.sql.*; public class LoginServlet extends HttpServlet { Connection con; Statement st; ResultSet rs; PrintWriter out; RequestDispatcher rd; public void init(ServletConfig conf) { String d=conf.getInitParameter(\"driver\"); String ur=conf.getInitParameter(\"url\"); String us=conf.getInitParameter(\"user\"); String p=conf.getInitParameter(\"pass\"); try{ Class.forName(d); con=DriverManager.getConnection(ur,us,p); }catch(Exception e) { System.out.println(\"\"+e); } } public void service(HttpServletRequest req,HttpServletResponse res) throws ServletException,IOException { try{ res.setContentType(\"text/html\"); out=res.getWriter(); st=con.createStatement(); rs=st.executeQuery(\"select * from Register where username='\"+req.getParameter(\"user\")+\"' and password='\"+req.getParameter(\"pass\")+\"'\"); if(rs.next()) { String us=\"\"+rs.getString(1); String pa=\"\"+rs.getString(2); req.setAttribute(\"user\",us); req.setAttribute(\"pass\",pa); rd=req.getRequestDispatcher(\"./LoginSucess.jsp\"); rd.forward(req,res); } else res.sendRedirect(\"./LoginFailed.jsp\"); }catch(Exception e) { System.out.println(\"\"+e); res.sendRedirect(\"./LoginFailed.jsp\"); } } }","dependencies":[]}}
{"project_id":27,"chunk_id":0,"content":{"main_file_path":"Career Information Management System Java Project\\CIFS\\CIFS\\src\\RegisterServlet.java","main_file_content":"import javax.servlet.*; import javax.servlet.http.*; import java.io.*; import java.sql.*; public class RegisterServlet extends HttpServlet { Connection con; Statement st; ResultSet rs; PrintWriter out; public void init(ServletConfig conf) { String d=conf.getInitParameter(\"driver\"); String ur=conf.getInitParameter(\"url\"); String us=conf.getInitParameter(\"user\"); String p=conf.getInitParameter(\"pass\"); try{ Class.forName(d); con=DriverManager.getConnection(ur,us,p); }catch(Exception e) { System.out.println(\"\"+e); } } public void service(HttpServletRequest req,HttpServletResponse res) throws ServletException,IOException { try{ PreparedStatement ps; res.setContentType(\"text/html\"); out=res.getWriter(); ps=con.prepareStatement(\"insert into Register(username,password,fname,lname,email,mobile,degree,spcl) values(?,?,?,?,?,?,?,?)\"); ps.setString(1,\"\"+req.getParameter(\"user\")); ps.setString(2,\"\"+req.getParameter(\"pass\")); ps.setString(3,\"\"+req.getParameter(\"first\")); ps.setString(4,\"\"+req.getParameter(\"last\")); ps.setString(5,\"\"+req.getParameter(\"email\")); ps.setString(6,\"\"+req.getParameter(\"mobile\")); ps.setString(7,\"\"+req.getParameter(\"degree\")); ps.setString(8,\"\"+req.getParameter(\"spcl\")); ps.execute(); res.sendRedirect(\"./RegSuccess.jsp\"); }catch(Exception e) { System.out.println(\"\"+e); res.sendRedirect(\"./RegFailed.jsp\"); } } }","dependencies":[]}}
{"project_id":27,"chunk_id":0,"content":{"main_file_path":"Career Information Management System Java Project\\CIFS\\CIFS\\src\\ResumeServlet.java","main_file_content":"import javax.servlet.*; import javax.servlet.http.*; import java.io.*; import java.sql.*; import java.lang.*; public class ResumeServlet extends HttpServlet { Connection con; Statement st; ResultSet rs; PrintWriter out; public void init(ServletConfig conf) { String d=conf.getInitParameter(\"driver\"); String ur=conf.getInitParameter(\"url\"); String us=conf.getInitParameter(\"user\"); String p=conf.getInitParameter(\"pass\"); try{ Class.forName(d); con=DriverManager.getConnection(ur,us,p); }catch(Exception e) { System.out.println(\"\"+e); } } public void service(HttpServletRequest req,HttpServletResponse res) throws ServletException,IOException { try{ PreparedStatement ps; res.setContentType(\"text/html\"); out=res.getWriter(); HttpSession session=req.getSession(true); String user=\"\"+session.getAttribute(\"user\"); System.out.println(\"\"+user); ps=con.prepareStatement(\"insert into Resume(username,restitle,resowner,address,email,phone,mobile,degree,othersdeg,degper,pg,otherpg,pgper,skills,workexp,projone,projtwo,refference) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\"); ps.setString(1,\"\"+user); ps.setString(2,\"\"+req.getParameter(\"title\")); ps.setString(3,\"\"+req.getParameter(\"name\")); ps.setString(4,\"\"+req.getParameter(\"address\")); ps.setString(5,\"\"+req.getParameter(\"email\")); ps.setString(6,\"\"+req.getParameter(\"phone\")); ps.setString(7,\"\"+req.getParameter(\"mobile\")); ps.setString(8,\"\"+req.getParameter(\"degree\")); ps.setString(9,\"\"+req.getParameter(\"otherdeg\")); ps.setString(10,\"\"+req.getParameter(\"degper\")); ps.setString(11,\"\"+req.getParameter(\"pg\")); ps.setString(12,\"\"+req.getParameter(\"otherpg\")); ps.setString(13,\"\"+req.getParameter(\"pgper\")); ps.setString(14,\"\"+(req.getParameter(\"skill\")).toLowerCase()); ps.setString(15,\"\"+req.getParameter(\"workexp\")); ps.setString(16,\"\"+req.getParameter(\"pro1\")); ps.setString(17,\"\"+req.getParameter(\"pro2\")); ps.setString(18,\"\"+req.getParameter(\"ref\")); ps.execute(); res.sendRedirect(\"./ResSuccess.jsp\"); }catch(Exception e) { System.out.println(\"\"+e); res.sendRedirect(\"./ResFailed.jsp\"); } } }","dependencies":[]}}
{"project_id":27,"chunk_id":0,"content":{"main_file_path":"Career Information Management System Java Project\\CIFS\\EmployeeAdmin\\src\\AddQuestionServlet.java","main_file_content":"import javax.servlet.*; import javax.servlet.http.*; import java.io.*; import java.sql.*; public class AddQuestionServlet extends HttpServlet { Connection con; Statement st; ResultSet rs; PrintWriter out; public void init(ServletConfig conf) { String d=conf.getInitParameter(\"driver\"); String ur=conf.getInitParameter(\"url\"); String us=conf.getInitParameter(\"user\"); String p=conf.getInitParameter(\"pass\"); try{ Class.forName(d); con=DriverManager.getConnection(ur,us,p); }catch(Exception e) { System.out.println(\"\"+e); } } public void service(HttpServletRequest req,HttpServletResponse res) throws ServletException,IOException { try{ PreparedStatement ps = null; PreparedStatement countStatement = null; ResultSet countResultSet = null; res.setContentType(\"text/html\"); out=res.getWriter(); countStatement = con.prepareStatement(\"SELECT MAX(QNO) FROM QUESTIONS WHERE LANGUAGE = ? AND TESTLEVEL = ?\"); countStatement.setString(1, req.getParameter(\"language\")); countStatement.setString(2, req.getParameter(\"level\")); countResultSet = countStatement.executeQuery(); int questionNo = 0; if(countResultSet.next()) { questionNo = countResultSet.getInt(1) + 1; } else { questionNo = 1; } ps=con.prepareStatement(\"INSERT INTO QUESTIONS(QNO, QUESTION, OPTION1, OPTION2, OPTION3, OPTION4, ANSWER, LANGUAGE, TESTLEVEL) values(?,?,?,?,?,?,?,?,?)\"); ps.setInt(1, questionNo); ps.setString(2,\"\"+req.getParameter(\"question\")); ps.setString(3,\"\"+req.getParameter(\"option1\")); ps.setString(4,\"\"+req.getParameter(\"option2\")); ps.setString(5,\"\"+req.getParameter(\"option3\")); ps.setString(6,\"\"+req.getParameter(\"option4\")); ps.setString(7,\"\"+req.getParameter(\"answer\")); ps.setString(8,\"\"+req.getParameter(\"language\")); ps.setString(9,\"\"+req.getParameter(\"level\")); ps.execute(); res.sendRedirect(\"./AddQuestionSuccess.jsp\"); }catch(Exception e) { System.out.println(\"\"+e); res.sendRedirect(\"./AddQuestionFailed.jsp\"); } } }","dependencies":[]}}
{"project_id":27,"chunk_id":0,"content":{"main_file_path":"Career Information Management System Java Project\\CIFS\\EmployeeAdmin\\src\\DeleteQuestionServlet.java","main_file_content":"import javax.servlet.*; import javax.servlet.http.*; import java.io.*; import java.sql.*; import java.util.*; public class DeleteQuestionServlet extends HttpServlet { Connection connection; PrintWriter out; public void init(ServletConfig config) { String driver = config.getInitParameter(\"driver\"); String url = config.getInitParameter(\"url\"); String user = config.getInitParameter(\"user\"); String pass = config.getInitParameter(\"pass\"); try { Class.forName(driver); connection = DriverManager.getConnection(url, user, pass); } catch(Exception e) {System.out.println(\"Exception in init():\" + e); } } public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { PreparedStatement ps = null; try { System.out.println(\"in service\"); response.setContentType(\"text/html\"); out = response.getWriter(); int i=0; ps= connection.prepareStatement(\"DELETE FROM QUESTIONS where question=?\"); ps.setString(1,request.getParameter(\"question\")); i= ps.executeUpdate(); response.sendRedirect(\"./DeleteQuestionSuccess.jsp\"); } catch(Exception e) { System.out.println(\"servlet failed::\" + e); response.sendRedirect(\"./DeleteQuestionFailed.jsp\"); } } }","dependencies":[]}}
{"project_id":27,"chunk_id":0,"content":{"main_file_path":"Career Information Management System Java Project\\CIFS\\EmployeeAdmin\\src\\LoginServlet.java","main_file_content":"import javax.servlet.*; import javax.servlet.http.*; import java.io.*; import java.sql.*; import java.util.*; public class LoginServlet extends HttpServlet { Connection connection; Statement statement; ResultSet resultset; PrintWriter out; public void init(ServletConfig config) { String driver = config.getInitParameter(\"driver\"); String url = config.getInitParameter(\"url\"); String user = config.getInitParameter(\"user\"); String pass = config.getInitParameter(\"pass\"); try { Class.forName(driver); connection = DriverManager.getConnection(url, user, pass); } catch(Exception e) {System.out.println(\"Exception in init():\" + e); } } public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { try { System.out.println(\"in service\"); HttpSession session = request.getSession(true); response.setContentType(\"text/html\"); out = response.getWriter(); statement = connection.createStatement(); resultset = statement.executeQuery(\"SELECT USERNAME, PASSWORD FROM LOGIN WHERE USERNAME='\"+request.getParameter(\"userName\")+\"' AND PASSWORD='\"+request.getParameter(\"password\")+\"'\"); if(resultset.next()) { System.out.println(\"in if\"); ResultSet languageResultSet = statement.executeQuery(\"SELECT LANGUAGE FROM LANGUAGES\"); ArrayList languages = new ArrayList(); while (languageResultSet.next()) { languages.add(languageResultSet.getString(\"LANGUAGE\")); } session.setAttribute(\"languages\", languages); System.out.println(\"in lang\"); ResultSet levelResultSet = statement.executeQuery(\"SELECT TESTLEVEL FROM LEVELS\"); System.out.println(\"rs\"+levelResultSet ); ArrayList levels = new ArrayList(); while (levelResultSet.next()) { levels.add(levelResultSet.getString(\"TESTLEVEL\")); } session.setAttribute(\"levels\", levels); System.out.println(\"in level\"); System.out.println(\"size::\" + levels.size() + \"::\" + languages.size()); response.sendRedirect(\"./LoginSuccess.jsp\"); } else { response.sendRedirect(\"./index.jsp\"); } } catch(Exception e) { System.out.println(\"login failed::\" + e); } } }","dependencies":[]}}
{"project_id":29,"chunk_id":0,"content":{"main_file_path":"Clue Simulator\\AssistantJack.java","main_file_content":"import java.util.ArrayList; import java.util.Random; public class AssistantJack { private int timesAsked; private Theory correctTheory; private AssistantJack() { this.timesAsked = 0; this.correctTheory = null; } public AssistantJack(int answerSet) { this(); if (answerSet == 1) { this.correctTheory = new Theory(1, 1, 1); } else if (answerSet == 2) { this.correctTheory = new Theory(6, 10, 6); } else { Random random = new Random(); int weapon = random.nextInt(6) + 1; int location = random.nextInt(10) + 1; int person = random.nextInt(6) + 1; this.correctTheory = new Theory(weapon, location, person); } } public AssistantJack(Theory theory) { this(); this.correctTheory = new Theory(theory); } public int checkAnswer(int weapon, int location, int person) { ArrayList<Integer> wrongItems = new ArrayList<Integer>(); this.timesAsked++; if (this.correctTheory.getWeapon() != weapon) { wrongItems.add(1); } if (this.correctTheory.getLocation() != location) { wrongItems.add(2); } if (this.correctTheory.getPerson() != person) { wrongItems.add(3); } if (wrongItems.size() == 0) { return 0; } else if (wrongItems.size() == 1) { return wrongItems.get(0); } else { Random random = new Random(); int randomSelected = random.nextInt(wrongItems.size()); return wrongItems.get(randomSelected); } } public int checkAnswer(Theory theory) { return this.checkAnswer(theory.getWeapon(), theory.getLocation(), theory.getPerson()); } public int getTimesAsked() { return this.timesAsked; } }","dependencies":[{"file_path":"Clue Simulator\\Theory.java","file_content":"public class Theory { private int weapon; private int location; private int person; public Theory(int weapon, int location, int person) { this.weapon = weapon; this.location = location; this.person = person; } public Theory(Theory other) { this.weapon = other.weapon; this.location = other.location; this.person = other.person; } public int getWeapon() { return weapon; } public void setWeapon(int weapon) { this.weapon = weapon; } public int getLocation() { return location; } public void setLocation(int location) { this.location = location; } public int getPerson() { return person; } public void setPerson(int person) { this.person = person; } @Override public boolean equals(Object obj) { if (obj == null || this.getClass() != obj.getClass()) { return false; } Theory other = (Theory) obj; return (this.weapon != other.weapon || this.person != other.person || this.location != other.location); } @Override public String toString() { return String.format(\"Theory is: Weapon = %s (%d), Person = %s (%d), Location = %s (%d)\", TheoryItem.getWeaponName(this.weapon), this.weapon, TheoryItem.getPersonName(this.person), this.person, TheoryItem.getLocationName(this.location), this.location); } }"}]}}
{"project_id":29,"chunk_id":0,"content":{"main_file_path":"Clue Simulator\\DetectiveJill.java","main_file_content":"import java.util.Random; import java.util.Scanner; public class DetectiveJill { public static void main() { int answerSet, solution, murder, weapon, location; Theory answer; AssistantJack jack; Scanner keyboard = new Scanner(System.in); Random random = new Random(); System.out.print(\"Which theory would like you like to test? (1, 2, 3[random]): \"); answerSet = keyboard.nextInt(); keyboard.close(); jack = new AssistantJack(answerSet); int weapont = 1, locationt = 1, murdert = 1, total1 = 0; solution = jack.checkAnswer(weapont, locationt, murdert); while(solution != 0){ switch(solution){ case 1: weapont++; break; case 2: locationt++; break; case 3: murdert++; break; } solution = jack.checkAnswer(weapont, locationt, murdert); } answer = new Theory(weapont, locationt, murdert); System.out.println(\"Total Checks = \" + jack.getTimesAsked() + \", Solution \" + answer); if (jack.getTimesAsked() > 20) { System.out.println(\"FAILED!! You're a horrible Detective...¯\\\\_(ツ)_/¯\"); } else { System.out.println(\"WOW! You might as well be called Batman\"); } } }","dependencies":[{"file_path":"Clue Simulator\\AssistantJack.java","file_content":"import java.util.ArrayList; import java.util.Random; public class AssistantJack { private int timesAsked; private Theory correctTheory; private AssistantJack() { this.timesAsked = 0; this.correctTheory = null; } public AssistantJack(int answerSet) { this(); if (answerSet == 1) { this.correctTheory = new Theory(1, 1, 1); } else if (answerSet == 2) { this.correctTheory = new Theory(6, 10, 6); } else { Random random = new Random(); int weapon = random.nextInt(6) + 1; int location = random.nextInt(10) + 1; int person = random.nextInt(6) + 1; this.correctTheory = new Theory(weapon, location, person); } } public AssistantJack(Theory theory) { this(); this.correctTheory = new Theory(theory); } public int checkAnswer(int weapon, int location, int person) { ArrayList<Integer> wrongItems = new ArrayList<Integer>(); this.timesAsked++; if (this.correctTheory.getWeapon() != weapon) { wrongItems.add(1); } if (this.correctTheory.getLocation() != location) { wrongItems.add(2); } if (this.correctTheory.getPerson() != person) { wrongItems.add(3); } if (wrongItems.size() == 0) { return 0; } else if (wrongItems.size() == 1) { return wrongItems.get(0); } else { Random random = new Random(); int randomSelected = random.nextInt(wrongItems.size()); return wrongItems.get(randomSelected); } } public int checkAnswer(Theory theory) { return this.checkAnswer(theory.getWeapon(), theory.getLocation(), theory.getPerson()); } public int getTimesAsked() { return this.timesAsked; } }"},{"file_path":"Clue Simulator\\Theory.java","file_content":"public class Theory { private int weapon; private int location; private int person; public Theory(int weapon, int location, int person) { this.weapon = weapon; this.location = location; this.person = person; } public Theory(Theory other) { this.weapon = other.weapon; this.location = other.location; this.person = other.person; } public int getWeapon() { return weapon; } public void setWeapon(int weapon) { this.weapon = weapon; } public int getLocation() { return location; } public void setLocation(int location) { this.location = location; } public int getPerson() { return person; } public void setPerson(int person) { this.person = person; } @Override public boolean equals(Object obj) { if (obj == null || this.getClass() != obj.getClass()) { return false; } Theory other = (Theory) obj; return (this.weapon != other.weapon || this.person != other.person || this.location != other.location); } @Override public String toString() { return String.format(\"Theory is: Weapon = %s (%d), Person = %s (%d), Location = %s (%d)\", TheoryItem.getWeaponName(this.weapon), this.weapon, TheoryItem.getPersonName(this.person), this.person, TheoryItem.getLocationName(this.location), this.location); } }"}]}}
{"project_id":29,"chunk_id":0,"content":{"main_file_path":"Clue Simulator\\Main.java","main_file_content":"import java.util.Random; import java.util.Scanner; public class Main { public static void main(String[] args) { DetectiveJill.main(); } }","dependencies":[{"file_path":"Clue Simulator\\DetectiveJill.java","file_content":"import java.util.Random; import java.util.Scanner; public class DetectiveJill { public static void main() { int answerSet, solution, murder, weapon, location; Theory answer; AssistantJack jack; Scanner keyboard = new Scanner(System.in); Random random = new Random(); System.out.print(\"Which theory would like you like to test? (1, 2, 3[random]): \"); answerSet = keyboard.nextInt(); keyboard.close(); jack = new AssistantJack(answerSet); int weapont = 1, locationt = 1, murdert = 1, total1 = 0; solution = jack.checkAnswer(weapont, locationt, murdert); while(solution != 0){ switch(solution){ case 1: weapont++; break; case 2: locationt++; break; case 3: murdert++; break; } solution = jack.checkAnswer(weapont, locationt, murdert); } answer = new Theory(weapont, locationt, murdert); System.out.println(\"Total Checks = \" + jack.getTimesAsked() + \", Solution \" + answer); if (jack.getTimesAsked() > 20) { System.out.println(\"FAILED!! You're a horrible Detective...¯\\\\_(ツ)_/¯\"); } else { System.out.println(\"WOW! You might as well be called Batman\"); } } }"}]}}
{"project_id":29,"chunk_id":0,"content":{"main_file_path":"Clue Simulator\\RandomClue.java","main_file_content":"import java.util.Random; import java.util.Scanner; public class RandomClue { public static void main() { int answerSet, solution, murder, weapon, location; Theory answer; AssistantJack jack; Scanner keyboard = new Scanner(System.in); Random random = new Random(); System.out.print(\"Which theory would like you like to test? (1, 2, 3[random]): \"); answerSet = keyboard.nextInt(); keyboard.close(); jack = new AssistantJack(answerSet); int weapont = 1, locationt = 1, murdert = 1, total1 = 0; solution = jack.checkAnswer(weapont, locationt, murdert); while(solution != 0){ switch(solution){ case 1: weapont++; break; case 2: locationt++; break; case 3: murdert++; break; } solution = jack.checkAnswer(weapont, locationt, murdert); } answer = new Theory(weapont, locationt, murdert); System.out.println(\"Total Checks = \" + jack.getTimesAsked() + \", Solution \" + answer); if (jack.getTimesAsked() > 20) { System.out.println(\"FAILED!! You're a horrible Detective...¯\\\\_(ツ)_/¯\"); } else { System.out.println(\"WOW! You might as well be called Batman\"); } } }","dependencies":[{"file_path":"Clue Simulator\\AssistantJack.java","file_content":"import java.util.ArrayList; import java.util.Random; public class AssistantJack { private int timesAsked; private Theory correctTheory; private AssistantJack() { this.timesAsked = 0; this.correctTheory = null; } public AssistantJack(int answerSet) { this(); if (answerSet == 1) { this.correctTheory = new Theory(1, 1, 1); } else if (answerSet == 2) { this.correctTheory = new Theory(6, 10, 6); } else { Random random = new Random(); int weapon = random.nextInt(6) + 1; int location = random.nextInt(10) + 1; int person = random.nextInt(6) + 1; this.correctTheory = new Theory(weapon, location, person); } } public AssistantJack(Theory theory) { this(); this.correctTheory = new Theory(theory); } public int checkAnswer(int weapon, int location, int person) { ArrayList<Integer> wrongItems = new ArrayList<Integer>(); this.timesAsked++; if (this.correctTheory.getWeapon() != weapon) { wrongItems.add(1); } if (this.correctTheory.getLocation() != location) { wrongItems.add(2); } if (this.correctTheory.getPerson() != person) { wrongItems.add(3); } if (wrongItems.size() == 0) { return 0; } else if (wrongItems.size() == 1) { return wrongItems.get(0); } else { Random random = new Random(); int randomSelected = random.nextInt(wrongItems.size()); return wrongItems.get(randomSelected); } } public int checkAnswer(Theory theory) { return this.checkAnswer(theory.getWeapon(), theory.getLocation(), theory.getPerson()); } public int getTimesAsked() { return this.timesAsked; } }"},{"file_path":"Clue Simulator\\Theory.java","file_content":"public class Theory { private int weapon; private int location; private int person; public Theory(int weapon, int location, int person) { this.weapon = weapon; this.location = location; this.person = person; } public Theory(Theory other) { this.weapon = other.weapon; this.location = other.location; this.person = other.person; } public int getWeapon() { return weapon; } public void setWeapon(int weapon) { this.weapon = weapon; } public int getLocation() { return location; } public void setLocation(int location) { this.location = location; } public int getPerson() { return person; } public void setPerson(int person) { this.person = person; } @Override public boolean equals(Object obj) { if (obj == null || this.getClass() != obj.getClass()) { return false; } Theory other = (Theory) obj; return (this.weapon != other.weapon || this.person != other.person || this.location != other.location); } @Override public String toString() { return String.format(\"Theory is: Weapon = %s (%d), Person = %s (%d), Location = %s (%d)\", TheoryItem.getWeaponName(this.weapon), this.weapon, TheoryItem.getPersonName(this.person), this.person, TheoryItem.getLocationName(this.location), this.location); } }"}]}}
{"project_id":29,"chunk_id":0,"content":{"main_file_path":"Clue Simulator\\Theory.java","main_file_content":"public class Theory { private int weapon; private int location; private int person; public Theory(int weapon, int location, int person) { this.weapon = weapon; this.location = location; this.person = person; } public Theory(Theory other) { this.weapon = other.weapon; this.location = other.location; this.person = other.person; } public int getWeapon() { return weapon; } public void setWeapon(int weapon) { this.weapon = weapon; } public int getLocation() { return location; } public void setLocation(int location) { this.location = location; } public int getPerson() { return person; } public void setPerson(int person) { this.person = person; } @Override public boolean equals(Object obj) { if (obj == null || this.getClass() != obj.getClass()) { return false; } Theory other = (Theory) obj; return (this.weapon != other.weapon || this.person != other.person || this.location != other.location); } @Override public String toString() { return String.format(\"Theory is: Weapon = %s (%d), Person = %s (%d), Location = %s (%d)\", TheoryItem.getWeaponName(this.weapon), this.weapon, TheoryItem.getPersonName(this.person), this.person, TheoryItem.getLocationName(this.location), this.location); } }","dependencies":[{"file_path":"Clue Simulator\\TheoryItem.java","file_content":"public final class TheoryItem { public static final int TOTAL_MURDERS = 6; public static final int TOTAL_LOCATIONS = 10; public static final int TOTAL_WEAPONS = 6; public static String getLocationName(int location) { String locationName = null; switch (location) { case 1: locationName = \"Kitchen\"; break; case 2: locationName = \"Ballroom\"; break; case 3: locationName = \"Conservatory\"; break; case 4: locationName = \"Billiard\"; break; case 5: locationName = \"Library\"; break; case 6: locationName = \"Study\"; break; case 7: locationName = \"Hall\"; break; case 8: locationName = \"Lounge\"; break; case 9: locationName = \"Dining\"; break; case 10: locationName = \"Cellar\"; break; } return locationName; } public static int getLocationNumber(String location) { int locationNumber = 0; switch (location.toLowerCase()) { case \"kitchen\": locationNumber = 1; break; case \"ballroom\": locationNumber = 2; break; case \"conservatory\": locationNumber = 3; break; case \"billiard\": locationNumber = 4; break; case \"library\": locationNumber = 5; break; case \"study\": locationNumber = 6; break; case \"hall\": locationNumber = 7; break; case \"lounge\": locationNumber = 8; break; case \"dining\": locationNumber = 9; break; case \"cellar\": locationNumber = 10; break; } return locationNumber; } public static boolean validateLocationNumber(int location) { return (location >= 1 && location <= 10); } public static String getPersonName(int person) { String personString = null; switch (person) { case 1: personString = \"Ms. Scarlet\"; break; case 2: personString = \"Colonial Mustard\"; break; case 3: personString = \"Mrs. White\"; break; case 4: personString = \"Reverend Green\"; break; case 5: personString = \"Mrs. Peacock\"; break; case 6: personString = \"Professor Plum\"; break; } return personString; } public static int getPersonNumber(String person) { int personNumber = 0; switch (person.toLowerCase()) { case \"ms. scarlet\": personNumber = 1; break; case \"colonial mustard\": personNumber = 2; break; case \"mrs. white\": personNumber = 3; break; case \"reverend green\": personNumber = 4; break; case \"mrs. peacock\": personNumber = 5; break; case \"professor plum\": personNumber = 6; break; } return personNumber; } public static boolean validatePersonNumber(int person) { return (person >= 1 && person <= 6); } public static String getWeaponName(int weapon) { String weaponString = null; switch (weapon) { case 1: weaponString = \"rope\"; break; case 2: weaponString = \"wrench\"; break; case 3: weaponString = \"candlestick\"; break; case 4: weaponString = \"revolver\"; break; case 5: weaponString = \"knife\"; break; case 6: weaponString = \"pipe\"; break; } return weaponString; } public static int getWeaponNumber(String weapon) { int weaponNumber = 0; switch (weapon.toLowerCase()) { case \"rope\": weaponNumber = 1; break; case \"wrench\": weaponNumber = 2; break; case \"candlestick\": weaponNumber = 3; break; case \"revolver\": weaponNumber = 4; break; case \"knife\": weaponNumber = 5; break; case \"pipe\": weaponNumber = 6; break; } return weaponNumber; } public static boolean validateWeaponNumber(int weapon) { return (weapon >= 1 && weapon <= 6); } }"}]}}
{"project_id":29,"chunk_id":0,"content":{"main_file_path":"Clue Simulator\\TheoryItem.java","main_file_content":"public final class TheoryItem { public static final int TOTAL_MURDERS = 6; public static final int TOTAL_LOCATIONS = 10; public static final int TOTAL_WEAPONS = 6; public static String getLocationName(int location) { String locationName = null; switch (location) { case 1: locationName = \"Kitchen\"; break; case 2: locationName = \"Ballroom\"; break; case 3: locationName = \"Conservatory\"; break; case 4: locationName = \"Billiard\"; break; case 5: locationName = \"Library\"; break; case 6: locationName = \"Study\"; break; case 7: locationName = \"Hall\"; break; case 8: locationName = \"Lounge\"; break; case 9: locationName = \"Dining\"; break; case 10: locationName = \"Cellar\"; break; } return locationName; } public static int getLocationNumber(String location) { int locationNumber = 0; switch (location.toLowerCase()) { case \"kitchen\": locationNumber = 1; break; case \"ballroom\": locationNumber = 2; break; case \"conservatory\": locationNumber = 3; break; case \"billiard\": locationNumber = 4; break; case \"library\": locationNumber = 5; break; case \"study\": locationNumber = 6; break; case \"hall\": locationNumber = 7; break; case \"lounge\": locationNumber = 8; break; case \"dining\": locationNumber = 9; break; case \"cellar\": locationNumber = 10; break; } return locationNumber; } public static boolean validateLocationNumber(int location) { return (location >= 1 && location <= 10); } public static String getPersonName(int person) { String personString = null; switch (person) { case 1: personString = \"Ms. Scarlet\"; break; case 2: personString = \"Colonial Mustard\"; break; case 3: personString = \"Mrs. White\"; break; case 4: personString = \"Reverend Green\"; break; case 5: personString = \"Mrs. Peacock\"; break; case 6: personString = \"Professor Plum\"; break; } return personString; } public static int getPersonNumber(String person) { int personNumber = 0; switch (person.toLowerCase()) { case \"ms. scarlet\": personNumber = 1; break; case \"colonial mustard\": personNumber = 2; break; case \"mrs. white\": personNumber = 3; break; case \"reverend green\": personNumber = 4; break; case \"mrs. peacock\": personNumber = 5; break; case \"professor plum\": personNumber = 6; break; } return personNumber; } public static boolean validatePersonNumber(int person) { return (person >= 1 && person <= 6); } public static String getWeaponName(int weapon) { String weaponString = null; switch (weapon) { case 1: weaponString = \"rope\"; break; case 2: weaponString = \"wrench\"; break; case 3: weaponString = \"candlestick\"; break; case 4: weaponString = \"revolver\"; break; case 5: weaponString = \"knife\"; break; case 6: weaponString = \"pipe\"; break; } return weaponString; } public static int getWeaponNumber(String weapon) { int weaponNumber = 0; switch (weapon.toLowerCase()) { case \"rope\": weaponNumber = 1; break; case \"wrench\": weaponNumber = 2; break; case \"candlestick\": weaponNumber = 3; break; case \"revolver\": weaponNumber = 4; break; case \"knife\": weaponNumber = 5; break; case \"pipe\": weaponNumber = 6; break; } return weaponNumber; } public static boolean validateWeaponNumber(int weapon) { return (weapon >= 1 && weapon <= 6); } }","dependencies":[]}}
{"project_id":31,"chunk_id":0,"content":{"main_file_path":"Crypto-Image and Text Encryption Decryption\\src\\crypto\\Crypto.java","main_file_content":"package crypto; public class Crypto { public static void main(String[] args) { } }","dependencies":[]}}
{"project_id":31,"chunk_id":0,"content":{"main_file_path":"Crypto-Image and Text Encryption Decryption\\src\\crypto\\f.java","main_file_content":"package crypto; class f { }","dependencies":[]}}
{"project_id":31,"chunk_id":0,"content":{"main_file_path":"Crypto-Image and Text Encryption Decryption\\src\\crypto\\Home.java","main_file_content":"package crypto; import java.awt.Frame; import java.awt.Image; import java.awt.Toolkit; import javax.swing.JOptionPane; public class Home extends javax.swing.JFrame { public Home() { initComponents(); Frame f=new Frame(); setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource(\"icon.png\"))); this.setLocationRelativeTo(null); } @SuppressWarnings(\"unchecked\") private void initComponents() { jButton1 = new javax.swing.JButton(); jButton3 = new javax.swing.JButton(); jButton2 = new javax.swing.JButton(); jLabel1 = new javax.swing.JLabel(); setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE); setTitle(\"Crypto\"); setResizable(false); getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout()); jButton1.setFont(new java.awt.Font(\"Tahoma\", 1, 14)); jButton1.setText(\"Text Encryption & Decryption\"); jButton1.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jButton1ActionPerformed(evt); } }); getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 340, 240, 60)); jButton3.setFont(new java.awt.Font(\"Tahoma\", 1, 14)); jButton3.setText(\"Image Encryption & Decryption\"); jButton3.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jButton3ActionPerformed(evt); } }); getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 340, 260, 60)); jButton2.setBackground(new java.awt.Color(5, 116, 232)); jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/Images/icons8_help_40px.png\"))); jButton2.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jButton2ActionPerformed(evt); } }); getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 0, -1, -1)); jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/Images/Home UI.jpg\"))); getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1)); pack(); } private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) { new Textencryption().setVisible(true); } private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) { new imagencryption().setVisible(true); } private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) { JOptionPane.showMessageDialog(null, \"This project, Crypto (Text Encryption and Decryption Software) is developed using NetBeans.\\n This project is written in java language. \\n The aim of this system was to create a Graphical User Interface program which can \\n help user to Encrypt or Decrypt message or Image.\"); } public static void main(String args[]) { try { for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) { if (\"Nimbus\".equals(info.getName())) { javax.swing.UIManager.setLookAndFeel(info.getClassName()); break; } } } catch (ClassNotFoundException ex) { java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } catch (InstantiationException ex) { java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } catch (IllegalAccessException ex) { java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } catch (javax.swing.UnsupportedLookAndFeelException ex) { java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } java.awt.EventQueue.invokeLater(new Runnable() { public void run() { new Home().setVisible(true); } }); } private javax.swing.JButton jButton1; private javax.swing.JButton jButton2; private javax.swing.JButton jButton3; private javax.swing.JLabel jLabel1; }","dependencies":[{"file_path":"Crypto-Image and Text Encryption Decryption\\src\\crypto\\Textencryption.java","file_content":"package crypto; import java.awt.Component; import java.awt.Toolkit; import java.awt.datatransfer.Clipboard; import java.awt.datatransfer.StringSelection; import javax.swing.JOptionPane; public class Textencryption extends javax.swing.JFrame { private Component JFrame; public Textencryption() { initComponents(); this.setLocationRelativeTo(null); setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource(\"icon.png\"))); } @SuppressWarnings(\"unchecked\") private void initComponents() { inp = new javax.swing.JTextArea(); jScrollPane1 = new javax.swing.JScrollPane(); jButton1 = new javax.swing.JButton(); jButton2 = new javax.swing.JButton(); jButton3 = new javax.swing.JButton(); jButton4 = new javax.swing.JButton(); jButton5 = new javax.swing.JButton(); jButton6 = new javax.swing.JButton(); jLabel1 = new javax.swing.JLabel(); setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE); setTitle(\"Crypto\"); setResizable(false); getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout()); inp.setColumns(20); inp.setRows(5); getContentPane().add(inp, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 100, 500, 230)); getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 220, -1, -1)); jButton1.setText(\"Encrypt\"); jButton1.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jButton1ActionPerformed(evt); } }); getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 360, 110, 40)); jButton2.setText(\"Decrypt\"); jButton2.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jButton2ActionPerformed(evt); } }); getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 360, 110, 40)); jButton3.setText(\"Clear\"); jButton3.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jButton3ActionPerformed(evt); } }); getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 360, 110, 40)); jButton4.setText(\"Copy to Clipboard\"); jButton4.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jButton4ActionPerformed(evt); } }); getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 360, 190, 40)); jButton5.setBackground(new java.awt.Color(5, 116, 232)); jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/Images/icons8_back_arrow_64px_1.png\"))); jButton5.setOpaque(false); jButton5.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jButton5ActionPerformed(evt); } }); getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 70, 70)); jButton6.setBackground(new java.awt.Color(5, 116, 232)); jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/Images/icons8_help_40px.png\"))); jButton6.setOpaque(false); jButton6.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jButton6ActionPerformed(evt); } }); getContentPane().add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, 70, 60)); jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/Images/textecy.jpg\"))); getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1)); pack(); } private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) { String s=inp.getText(); inp.setText(encryptkey(s)); Component frame = null; } private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) { String s=inp.getText(); inp.setText(decryptkey(s)); Component frame = null; } private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) { inp.setText(\" \"); } private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) { StringSelection stringSelection = new StringSelection (inp.getText()); Clipboard clpbrd = Toolkit.getDefaultToolkit ().getSystemClipboard (); clpbrd.setContents (stringSelection, null); JOptionPane.showMessageDialog(JFrame,\"Your Message is copied\"); } private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) { this.toBack(); } private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) { JOptionPane.showMessageDialog(null, \"This project, Crypto (Text Encryption and Decryption Software) is developed using NetBeans.\\n This project is written in java language. \\n The aim of this system was to create a Graphical User Interface program which can \\n help user to Encrypt or Decrypt message or Image.\"); } int count=0; public static String encryptkey(String s1) { StringBuffer sb=new StringBuffer(); for(int i=0;i<s1.length();i++){ char c=s1.charAt(i); if(i%2==0){ if(c==122) { c=(char) (c-25); } else{ c=(char) (c+1);} sb.append(c);} else sb.append(c);} return sb.toString(); } public static String decryptkey(String s1) { StringBuffer sb=new StringBuffer(); for(int i=0;i<s1.length();i++){ char c=s1.charAt(i); if(i%2==0){ if(c==122) c=(char) (c-25); else{ c=(char) (c-1);} sb.append(c);} else sb.append(c);} return sb.toString(); } public static void main(String args[]) { try { for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) { if (\"Nimbus\".equals(info.getName())) { javax.swing.UIManager.setLookAndFeel(info.getClassName()); break; } } } catch (ClassNotFoundException ex) { java.util.logging.Logger.getLogger(Textencryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } catch (InstantiationException ex) { java.util.logging.Logger.getLogger(Textencryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } catch (IllegalAccessException ex) { java.util.logging.Logger.getLogger(Textencryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } catch (javax.swing.UnsupportedLookAndFeelException ex) { java.util.logging.Logger.getLogger(Textencryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } java.awt.EventQueue.invokeLater(new Runnable() { public void run() { new Textencryption().setVisible(true); } }); } private javax.swing.JTextArea inp; private javax.swing.JButton jButton1; private javax.swing.JButton jButton2; private javax.swing.JButton jButton3; private javax.swing.JButton jButton4; private javax.swing.JButton jButton5; private javax.swing.JButton jButton6; private javax.swing.JLabel jLabel1; private javax.swing.JScrollPane jScrollPane1; }"},{"file_path":"Crypto-Image and Text Encryption Decryption\\src\\crypto\\imagencryption.java","file_content":"package crypto; import java.awt.Toolkit; import java.io.File; import java.io.FileInputStream; import java.io.FileOutputStream; import javax.swing.JFileChooser; import javax.swing.JOptionPane; public class imagencryption extends javax.swing.JFrame { public imagencryption() { initComponents(); this.setLocationRelativeTo(null); setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource(\"icon.png\"))); } @SuppressWarnings(\"unchecked\") private void initComponents() { inp = new javax.swing.JTextField(); jButton1 = new javax.swing.JButton(); jButton2 = new javax.swing.JButton(); jLabel2 = new javax.swing.JLabel(); jButton5 = new javax.swing.JButton(); jButton3 = new javax.swing.JButton(); jLabel1 = new javax.swing.JLabel(); setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE); setTitle(\"Crypto\"); setResizable(false); getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout()); inp.setFont(new java.awt.Font(\"Arial\", 0, 36)); getContentPane().add(inp, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 270, 180, 50)); jButton1.setText(\"Encrypt\"); jButton1.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jButton1ActionPerformed(evt); } }); getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 370, 160, 50)); jButton2.setText(\"Decrypt\"); jButton2.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jButton2ActionPerformed(evt); } }); getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 370, 160, 50)); jLabel2.setFont(new java.awt.Font(\"Arial\", 0, 36)); jLabel2.setForeground(new java.awt.Color(255, 255, 255)); jLabel2.setText(\"Enter Key\"); getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 260, 160, 60)); jButton5.setBackground(new java.awt.Color(5, 116, 232)); jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/Images/icons8_back_arrow_64px_1.png\"))); jButton5.setOpaque(false); jButton5.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jButton5ActionPerformed(evt); } }); getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 70, 70)); jButton3.setBackground(new java.awt.Color(5, 116, 232)); jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/Images/icons8_help_40px.png\"))); jButton3.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jButton3ActionPerformed(evt); } }); getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 0, -1, -1)); jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/Images/imgencryptions.jpg\"))); getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1)); pack(); } private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) { String text=inp.getText(); int temp=Integer.parseInt(text); operate(temp); } private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) { String text=inp.getText(); int temp=Integer.parseInt(text); operate(temp); } private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) { this.toBack(); } private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) { JOptionPane.showMessageDialog(null, \"This project, Crypto (Text Encryption and Decryption Software) is developed using NetBeans.\\n This project is written in java language. \\n The aim of this system was to create a Graphical User Interface program which can \\n help user to Encrypt or Decrypt message or Image.\"); } public static void operate(int key) { JFileChooser fileChooser=new JFileChooser(); fileChooser.showOpenDialog(null); File file=fileChooser.getSelectedFile(); try { FileInputStream fis=new FileInputStream(file); byte []data=new byte[fis.available()]; fis.read(data); int i=0; for(byte b:data) { System.out.println(b); data[i]=(byte)(b^key); i++; } FileOutputStream fos=new FileOutputStream(file); fos.write(data); fos.close(); fis.close(); JOptionPane.showMessageDialog(null, \"Done\"); }catch(Exception e) { e.printStackTrace(); } } public static void main(String args[]) { try { for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) { if (\"Nimbus\".equals(info.getName())) { javax.swing.UIManager.setLookAndFeel(info.getClassName()); break; } } } catch (ClassNotFoundException ex) { java.util.logging.Logger.getLogger(imagencryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } catch (InstantiationException ex) { java.util.logging.Logger.getLogger(imagencryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } catch (IllegalAccessException ex) { java.util.logging.Logger.getLogger(imagencryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } catch (javax.swing.UnsupportedLookAndFeelException ex) { java.util.logging.Logger.getLogger(imagencryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } java.awt.EventQueue.invokeLater(new Runnable() { public void run() { new imagencryption().setVisible(true); } }); } private javax.swing.JTextField inp; private javax.swing.JButton jButton1; private javax.swing.JButton jButton2; private javax.swing.JButton jButton3; private javax.swing.JButton jButton5; private javax.swing.JLabel jLabel1; private javax.swing.JLabel jLabel2; }"}]}}
{"project_id":31,"chunk_id":0,"content":{"main_file_path":"Crypto-Image and Text Encryption Decryption\\src\\crypto\\imagencryption.java","main_file_content":"package crypto; import java.awt.Toolkit; import java.io.File; import java.io.FileInputStream; import java.io.FileOutputStream; import javax.swing.JFileChooser; import javax.swing.JOptionPane; public class imagencryption extends javax.swing.JFrame { public imagencryption() { initComponents(); this.setLocationRelativeTo(null); setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource(\"icon.png\"))); } @SuppressWarnings(\"unchecked\") private void initComponents() { inp = new javax.swing.JTextField(); jButton1 = new javax.swing.JButton(); jButton2 = new javax.swing.JButton(); jLabel2 = new javax.swing.JLabel(); jButton5 = new javax.swing.JButton(); jButton3 = new javax.swing.JButton(); jLabel1 = new javax.swing.JLabel(); setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE); setTitle(\"Crypto\"); setResizable(false); getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout()); inp.setFont(new java.awt.Font(\"Arial\", 0, 36)); getContentPane().add(inp, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 270, 180, 50)); jButton1.setText(\"Encrypt\"); jButton1.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jButton1ActionPerformed(evt); } }); getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 370, 160, 50)); jButton2.setText(\"Decrypt\"); jButton2.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jButton2ActionPerformed(evt); } }); getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 370, 160, 50)); jLabel2.setFont(new java.awt.Font(\"Arial\", 0, 36)); jLabel2.setForeground(new java.awt.Color(255, 255, 255)); jLabel2.setText(\"Enter Key\"); getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 260, 160, 60)); jButton5.setBackground(new java.awt.Color(5, 116, 232)); jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/Images/icons8_back_arrow_64px_1.png\"))); jButton5.setOpaque(false); jButton5.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jButton5ActionPerformed(evt); } }); getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 70, 70)); jButton3.setBackground(new java.awt.Color(5, 116, 232)); jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/Images/icons8_help_40px.png\"))); jButton3.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jButton3ActionPerformed(evt); } }); getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 0, -1, -1)); jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/Images/imgencryptions.jpg\"))); getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1)); pack(); } private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) { String text=inp.getText(); int temp=Integer.parseInt(text); operate(temp); } private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) { String text=inp.getText(); int temp=Integer.parseInt(text); operate(temp); } private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) { this.toBack(); } private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) { JOptionPane.showMessageDialog(null, \"This project, Crypto (Text Encryption and Decryption Software) is developed using NetBeans.\\n This project is written in java language. \\n The aim of this system was to create a Graphical User Interface program which can \\n help user to Encrypt or Decrypt message or Image.\"); } public static void operate(int key) { JFileChooser fileChooser=new JFileChooser(); fileChooser.showOpenDialog(null); File file=fileChooser.getSelectedFile(); try { FileInputStream fis=new FileInputStream(file); byte []data=new byte[fis.available()]; fis.read(data); int i=0; for(byte b:data) { System.out.println(b); data[i]=(byte)(b^key); i++; } FileOutputStream fos=new FileOutputStream(file); fos.write(data); fos.close(); fis.close(); JOptionPane.showMessageDialog(null, \"Done\"); }catch(Exception e) { e.printStackTrace(); } } public static void main(String args[]) { try { for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) { if (\"Nimbus\".equals(info.getName())) { javax.swing.UIManager.setLookAndFeel(info.getClassName()); break; } } } catch (ClassNotFoundException ex) { java.util.logging.Logger.getLogger(imagencryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } catch (InstantiationException ex) { java.util.logging.Logger.getLogger(imagencryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } catch (IllegalAccessException ex) { java.util.logging.Logger.getLogger(imagencryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } catch (javax.swing.UnsupportedLookAndFeelException ex) { java.util.logging.Logger.getLogger(imagencryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } java.awt.EventQueue.invokeLater(new Runnable() { public void run() { new imagencryption().setVisible(true); } }); } private javax.swing.JTextField inp; private javax.swing.JButton jButton1; private javax.swing.JButton jButton2; private javax.swing.JButton jButton3; private javax.swing.JButton jButton5; private javax.swing.JLabel jLabel1; private javax.swing.JLabel jLabel2; }","dependencies":[]}}
{"project_id":31,"chunk_id":0,"content":{"main_file_path":"Crypto-Image and Text Encryption Decryption\\src\\crypto\\Textencryption.java","main_file_content":"package crypto; import java.awt.Component; import java.awt.Toolkit; import java.awt.datatransfer.Clipboard; import java.awt.datatransfer.StringSelection; import javax.swing.JOptionPane; public class Textencryption extends javax.swing.JFrame { private Component JFrame; public Textencryption() { initComponents(); this.setLocationRelativeTo(null); setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource(\"icon.png\"))); } @SuppressWarnings(\"unchecked\") private void initComponents() { inp = new javax.swing.JTextArea(); jScrollPane1 = new javax.swing.JScrollPane(); jButton1 = new javax.swing.JButton(); jButton2 = new javax.swing.JButton(); jButton3 = new javax.swing.JButton(); jButton4 = new javax.swing.JButton(); jButton5 = new javax.swing.JButton(); jButton6 = new javax.swing.JButton(); jLabel1 = new javax.swing.JLabel(); setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE); setTitle(\"Crypto\"); setResizable(false); getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout()); inp.setColumns(20); inp.setRows(5); getContentPane().add(inp, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 100, 500, 230)); getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 220, -1, -1)); jButton1.setText(\"Encrypt\"); jButton1.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jButton1ActionPerformed(evt); } }); getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 360, 110, 40)); jButton2.setText(\"Decrypt\"); jButton2.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jButton2ActionPerformed(evt); } }); getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 360, 110, 40)); jButton3.setText(\"Clear\"); jButton3.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jButton3ActionPerformed(evt); } }); getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 360, 110, 40)); jButton4.setText(\"Copy to Clipboard\"); jButton4.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jButton4ActionPerformed(evt); } }); getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 360, 190, 40)); jButton5.setBackground(new java.awt.Color(5, 116, 232)); jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/Images/icons8_back_arrow_64px_1.png\"))); jButton5.setOpaque(false); jButton5.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jButton5ActionPerformed(evt); } }); getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 70, 70)); jButton6.setBackground(new java.awt.Color(5, 116, 232)); jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/Images/icons8_help_40px.png\"))); jButton6.setOpaque(false); jButton6.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jButton6ActionPerformed(evt); } }); getContentPane().add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, 70, 60)); jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/Images/textecy.jpg\"))); getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1)); pack(); } private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) { String s=inp.getText(); inp.setText(encryptkey(s)); Component frame = null; } private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) { String s=inp.getText(); inp.setText(decryptkey(s)); Component frame = null; } private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) { inp.setText(\" \"); } private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) { StringSelection stringSelection = new StringSelection (inp.getText()); Clipboard clpbrd = Toolkit.getDefaultToolkit ().getSystemClipboard (); clpbrd.setContents (stringSelection, null); JOptionPane.showMessageDialog(JFrame,\"Your Message is copied\"); } private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) { this.toBack(); } private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) { JOptionPane.showMessageDialog(null, \"This project, Crypto (Text Encryption and Decryption Software) is developed using NetBeans.\\n This project is written in java language. \\n The aim of this system was to create a Graphical User Interface program which can \\n help user to Encrypt or Decrypt message or Image.\"); } int count=0; public static String encryptkey(String s1) { StringBuffer sb=new StringBuffer(); for(int i=0;i<s1.length();i++){ char c=s1.charAt(i); if(i%2==0){ if(c==122) { c=(char) (c-25); } else{ c=(char) (c+1);} sb.append(c);} else sb.append(c);} return sb.toString(); } public static String decryptkey(String s1) { StringBuffer sb=new StringBuffer(); for(int i=0;i<s1.length();i++){ char c=s1.charAt(i); if(i%2==0){ if(c==122) c=(char) (c-25); else{ c=(char) (c-1);} sb.append(c);} else sb.append(c);} return sb.toString(); } public static void main(String args[]) { try { for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) { if (\"Nimbus\".equals(info.getName())) { javax.swing.UIManager.setLookAndFeel(info.getClassName()); break; } } } catch (ClassNotFoundException ex) { java.util.logging.Logger.getLogger(Textencryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } catch (InstantiationException ex) { java.util.logging.Logger.getLogger(Textencryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } catch (IllegalAccessException ex) { java.util.logging.Logger.getLogger(Textencryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } catch (javax.swing.UnsupportedLookAndFeelException ex) { java.util.logging.Logger.getLogger(Textencryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } java.awt.EventQueue.invokeLater(new Runnable() { public void run() { new Textencryption().setVisible(true); } }); } private javax.swing.JTextArea inp; private javax.swing.JButton jButton1; private javax.swing.JButton jButton2; private javax.swing.JButton jButton3; private javax.swing.JButton jButton4; private javax.swing.JButton jButton5; private javax.swing.JButton jButton6; private javax.swing.JLabel jLabel1; private javax.swing.JScrollPane jScrollPane1; }","dependencies":[]}}
{"project_id":32,"chunk_id":0,"content":{"main_file_path":"CurrencyConverter-master\\src\\application\\main\\Controller.java","main_file_content":"package application.main; import com.google.gson.Gson; import com.jfoenix.controls.*; import com.jfoenix.validation.DoubleValidator; import com.jfoenix.validation.NumberValidator; import com.jfoenix.validation.RequiredFieldValidator; import com.jfoenix.validation.base.ValidatorBase; import javafx.application.Platform; import javafx.beans.InvalidationListener; import javafx.beans.Observable; import javafx.beans.value.ChangeListener; import javafx.beans.value.ObservableValue; import javafx.collections.FXCollections; import javafx.collections.ListChangeListener; import javafx.collections.ObservableList; import javafx.event.ActionEvent; import javafx.event.EventHandler; import javafx.fxml.FXML; import javafx.fxml.Initializable; import javafx.scene.control.Label; import javafx.scene.control.SingleSelectionModel; import javafx.scene.control.Tooltip; import javafx.scene.image.Image; import javafx.scene.image.ImageView; import javafx.scene.input.KeyCode; import javafx.scene.input.KeyEvent; import javafx.scene.input.MouseEvent; import javafx.scene.layout.*; import javafx.scene.text.Text; import jdk.nashorn.internal.parser.JSONParser; import java.net.URL; import java.util.*; public class Controller implements Initializable{ private String s=\"\"; @FXML private Label autoFill; @FXML private JFXTextField inputField; @FXML private Label error; @FXML private JFXComboBox<Label> from; @FXML private JFXComboBox<Label> to; @FXML private JFXButton sync; @FXML private JFXButton convertBtn; @FXML private StackPane pane; private ObservableList<Label> list = FXCollections.observableArrayList(); @Override public void initialize(URL location, ResourceBundle resources) { CurrencyConvert convert = new CurrencyConvert(this); Map<String, String> countries = new HashMap<>(); for (String iso : Locale.getISOCountries()) { Locale l = new Locale(\"\", iso); countries.put(l.getDisplayCountry(), iso); } autoFill.setVisible(false); autoFill.getStyleClass().add(\"auto-fill\"); list=getCountries(); from.setItems(list); to.setItems(list); from.getStyleClass().add(\"combo-box\"); to.getStyleClass().add(\"combo-box\"); inputField.getStyleClass().add(\"input-field\"); sync.setTooltip(new Tooltip(\"Fetch latest data from fixer.io\")); RequiredFieldValidator validator = new RequiredFieldValidator(); DoubleValidator doubleValidator = new DoubleValidator(); validator.setMessage(\"Enter numeric value. Field is empty\"); doubleValidator.setMessage(\"Enter Numeric value\"); inputField.getValidators().addAll(validator,doubleValidator); from.addEventHandler(KeyEvent.KEY_PRESSED, e ->{ autoFill.setVisible(true); if( e.getCode() == KeyCode.BACK_SPACE) { if (s.length() > 0) { s = s.substring( 0, s.length() - 1 ); } } else s += e.getText(); autoFill.setText(s); System.out.println(s); for( Label item: list ) { if( item.getText().startsWith(s) ) from.getSelectionModel().select( item ); } }); to.addEventHandler(KeyEvent.KEY_PRESSED, e ->{ autoFill.setVisible(true); if( e.getCode() == KeyCode.BACK_SPACE){ if (s.length()>0) s = s.substring( 0, s.length() - 1 ); } else s += e.getText(); autoFill.setText(s); for( Label item: list ) { if( item.getText().startsWith(s) ) to.getSelectionModel().select( item ); } }); to.addEventHandler(MouseEvent.MOUSE_CLICKED , event -> { s=\"\"; }); from.addEventHandler(MouseEvent.MOUSE_CLICKED,event -> { s=\"\"; }); sync.addEventHandler(javafx.scene.input.MouseEvent.MOUSE_CLICKED, e->{ error.setText(\"\"); autoFill.setVisible(false); System.out.println(\"Here goes the data fetch code.\"); if (from.getSelectionModel().getSelectedIndex()!=-1){ String fromCurrency=Currency.getInstance(new Locale(\"\",countries.get(from.getSelectionModel().getSelectedItem().getText()))).getCurrencyCode(); convert.refresh(fromCurrency); }else { error.setText(\"Please select the from country.\"); } }); convertBtn.addEventHandler(javafx.scene.input.MouseEvent.MOUSE_CLICKED , e->{ error.setText(\"\"); autoFill.setVisible(false); if (validateInput()){ String fromCountry = from.getSelectionModel().getSelectedItem().getText(); String toCountry = to.getSelectionModel().getSelectedItem().getText(); String fromCurrency = Currency.getInstance(new Locale(\"\",countries.get(fromCountry))).getCurrencyCode(); String toCurrency = Currency.getInstance(new Locale(\"\",countries.get(toCountry))).getCurrencyCode(); Platform.runLater( new Runnable() { @Override public void run() { double rate = convert.convert(fromCurrency,toCurrency); rate = rate * Double.parseDouble(inputField.getText()); showDialog(\"Currency Conversion Information \\n\",\"Converted Amount from \"+from.getSelectionModel().getSelectedItem().getText()+ \"\\n to \"+to.getSelectionModel().getSelectedItem().getText()+\" \\n amount \"+rate,pane); } }); } else { error.setText(\"Something went wrong fill the input correctly.\"); } }); } public ObservableList<Label> getCountries(){ String[] locales = Locale.getISOCountries(); ObservableList<Label> countries = FXCollections.observableArrayList(); for (String countryCode : locales) { Locale obj = new Locale(\"EN\", countryCode); Label country = new Label(obj.getDisplayCountry()); if (!obj.getCountry().toLowerCase().equals(\"an\")){ Image icon = new Image(\"application/resources/icons/flags/4x3/\"+obj.getCountry().toLowerCase()+\".png\"); country.setGraphic(new ImageView(icon)); countries.add(country); } } return countries; } public void showDialog(String heading,String body,StackPane stackPane){ JFXButton cancel = new JFXButton(\"Cancel\"); cancel.setPrefSize(112,35); cancel.getStyleClass().add(\"cancel-btn\"); JFXDialogLayout content = new JFXDialogLayout(); content.setHeading(new Text(heading)); content.setBody(new Text(body)); content.setActions(cancel); JFXDialog dialog= new JFXDialog(stackPane,content, JFXDialog.DialogTransition.CENTER); dialog.show(); cancel.setOnAction(new EventHandler<ActionEvent>() { @Override public void handle(ActionEvent event) { dialog.close(); } }); } private boolean validateInput(){ if (inputField.validate()){ if (from.getSelectionModel().getSelectedIndex()!=-1 && to.getSelectionModel().getSelectedIndex()!=-1){ return true; } } return false; } public Label getError() { return error; } public void setError(Label error) { this.error = error; } }","dependencies":[{"file_path":"CurrencyConverter-master\\src\\application\\main\\CurrencyConvert.java","file_content":"package application.main; import com.google.gson.Gson; import java.io.IOException; import java.io.InputStream; import java.net.HttpURLConnection; import java.net.MalformedURLException; import java.net.URL; import java.net.UnknownHostException; import java.util.ArrayList; import java.util.Currency; import java.util.Locale; public class CurrencyConvert { private Controller controller; public CurrencyConvert(Controller controller){ this.controller = controller; } private static final String API_PROVIDER = \"http: private HandleCache handleCache = new HandleCache(); public double convert(String fromCurrencyCode, String toCurrencyCode) { FixerResponse cached = handleCache.findInArray(fromCurrencyCode); if (cached != null) { String rate = cached.getRates().get(toCurrencyCode); double conversionRate = Double.valueOf((rate != null) ? rate : \"0.0\"); System.out.println(\"Got from cache !!!!\"); return conversionRate; }else { FixerResponse response = getResponse(API_PROVIDER + \"/latest?base=\" + fromCurrencyCode); if (response != null) { handleCache.getCachedList().add(response); String rate = response.getRates().get(toCurrencyCode); double conversionRate = Double.valueOf((rate != null) ? rate : \"0.0\"); return conversionRate; } } return 0.0; } public void refresh(String fromCurrencyCode){ FixerResponse response = getResponse(API_PROVIDER + \"/latest?base=\" + fromCurrencyCode); if (response != null) { FixerResponse cached = handleCache.findInArray(fromCurrencyCode); if (cached!=null){ cached.setBase(response.getBase()); cached.setDate(response.getDate()); cached.setRates(response.getRates()); }else { handleCache.getCachedList().add(response); } } } private FixerResponse getResponse(String strUrl) { FixerResponse response = null; Gson gson = new Gson(); StringBuffer sb = new StringBuffer(); if(strUrl == null || strUrl.isEmpty()) { System.out.println(\"Application Error\"); return null; } URL url; try { url = new URL(strUrl); HttpURLConnection connection = (HttpURLConnection) url.openConnection(); InputStream stream = connection.getInputStream(); int data = stream.read(); while (data != -1) { sb.append((char) data); data = stream.read(); } stream.close(); response = gson.fromJson(sb.toString(), FixerResponse.class); } catch (MalformedURLException e) { System.out.println(e.getMessage()); e.printStackTrace(); }catch (UnknownHostException ex){ controller.getError().setText(\"unable to fetch data check your internet connection.\"); } catch (IOException e) { System.out.println(\"Unavailable data for this country's currency\"); controller.getError().setText(\"Unavailable data for this country's currency\"); } return response; } }"}]}}
{"project_id":32,"chunk_id":0,"content":{"main_file_path":"CurrencyConverter-master\\src\\application\\main\\CurrencyConvert.java","main_file_content":"package application.main; import com.google.gson.Gson; import java.io.IOException; import java.io.InputStream; import java.net.HttpURLConnection; import java.net.MalformedURLException; import java.net.URL; import java.net.UnknownHostException; import java.util.ArrayList; import java.util.Currency; import java.util.Locale; public class CurrencyConvert { private Controller controller; public CurrencyConvert(Controller controller){ this.controller = controller; } private static final String API_PROVIDER = \"http: private HandleCache handleCache = new HandleCache(); public double convert(String fromCurrencyCode, String toCurrencyCode) { FixerResponse cached = handleCache.findInArray(fromCurrencyCode); if (cached != null) { String rate = cached.getRates().get(toCurrencyCode); double conversionRate = Double.valueOf((rate != null) ? rate : \"0.0\"); System.out.println(\"Got from cache !!!!\"); return conversionRate; }else { FixerResponse response = getResponse(API_PROVIDER + \"/latest?base=\" + fromCurrencyCode); if (response != null) { handleCache.getCachedList().add(response); String rate = response.getRates().get(toCurrencyCode); double conversionRate = Double.valueOf((rate != null) ? rate : \"0.0\"); return conversionRate; } } return 0.0; } public void refresh(String fromCurrencyCode){ FixerResponse response = getResponse(API_PROVIDER + \"/latest?base=\" + fromCurrencyCode); if (response != null) { FixerResponse cached = handleCache.findInArray(fromCurrencyCode); if (cached!=null){ cached.setBase(response.getBase()); cached.setDate(response.getDate()); cached.setRates(response.getRates()); }else { handleCache.getCachedList().add(response); } } } private FixerResponse getResponse(String strUrl) { FixerResponse response = null; Gson gson = new Gson(); StringBuffer sb = new StringBuffer(); if(strUrl == null || strUrl.isEmpty()) { System.out.println(\"Application Error\"); return null; } URL url; try { url = new URL(strUrl); HttpURLConnection connection = (HttpURLConnection) url.openConnection(); InputStream stream = connection.getInputStream(); int data = stream.read(); while (data != -1) { sb.append((char) data); data = stream.read(); } stream.close(); response = gson.fromJson(sb.toString(), FixerResponse.class); } catch (MalformedURLException e) { System.out.println(e.getMessage()); e.printStackTrace(); }catch (UnknownHostException ex){ controller.getError().setText(\"unable to fetch data check your internet connection.\"); } catch (IOException e) { System.out.println(\"Unavailable data for this country's currency\"); controller.getError().setText(\"Unavailable data for this country's currency\"); } return response; } }","dependencies":[{"file_path":"CurrencyConverter-master\\src\\application\\main\\Controller.java","file_content":"package application.main; import com.google.gson.Gson; import com.jfoenix.controls.*; import com.jfoenix.validation.DoubleValidator; import com.jfoenix.validation.NumberValidator; import com.jfoenix.validation.RequiredFieldValidator; import com.jfoenix.validation.base.ValidatorBase; import javafx.application.Platform; import javafx.beans.InvalidationListener; import javafx.beans.Observable; import javafx.beans.value.ChangeListener; import javafx.beans.value.ObservableValue; import javafx.collections.FXCollections; import javafx.collections.ListChangeListener; import javafx.collections.ObservableList; import javafx.event.ActionEvent; import javafx.event.EventHandler; import javafx.fxml.FXML; import javafx.fxml.Initializable; import javafx.scene.control.Label; import javafx.scene.control.SingleSelectionModel; import javafx.scene.control.Tooltip; import javafx.scene.image.Image; import javafx.scene.image.ImageView; import javafx.scene.input.KeyCode; import javafx.scene.input.KeyEvent; import javafx.scene.input.MouseEvent; import javafx.scene.layout.*; import javafx.scene.text.Text; import jdk.nashorn.internal.parser.JSONParser; import java.net.URL; import java.util.*; public class Controller implements Initializable{ private String s=\"\"; @FXML private Label autoFill; @FXML private JFXTextField inputField; @FXML private Label error; @FXML private JFXComboBox<Label> from; @FXML private JFXComboBox<Label> to; @FXML private JFXButton sync; @FXML private JFXButton convertBtn; @FXML private StackPane pane; private ObservableList<Label> list = FXCollections.observableArrayList(); @Override public void initialize(URL location, ResourceBundle resources) { CurrencyConvert convert = new CurrencyConvert(this); Map<String, String> countries = new HashMap<>(); for (String iso : Locale.getISOCountries()) { Locale l = new Locale(\"\", iso); countries.put(l.getDisplayCountry(), iso); } autoFill.setVisible(false); autoFill.getStyleClass().add(\"auto-fill\"); list=getCountries(); from.setItems(list); to.setItems(list); from.getStyleClass().add(\"combo-box\"); to.getStyleClass().add(\"combo-box\"); inputField.getStyleClass().add(\"input-field\"); sync.setTooltip(new Tooltip(\"Fetch latest data from fixer.io\")); RequiredFieldValidator validator = new RequiredFieldValidator(); DoubleValidator doubleValidator = new DoubleValidator(); validator.setMessage(\"Enter numeric value. Field is empty\"); doubleValidator.setMessage(\"Enter Numeric value\"); inputField.getValidators().addAll(validator,doubleValidator); from.addEventHandler(KeyEvent.KEY_PRESSED, e ->{ autoFill.setVisible(true); if( e.getCode() == KeyCode.BACK_SPACE) { if (s.length() > 0) { s = s.substring( 0, s.length() - 1 ); } } else s += e.getText(); autoFill.setText(s); System.out.println(s); for( Label item: list ) { if( item.getText().startsWith(s) ) from.getSelectionModel().select( item ); } }); to.addEventHandler(KeyEvent.KEY_PRESSED, e ->{ autoFill.setVisible(true); if( e.getCode() == KeyCode.BACK_SPACE){ if (s.length()>0) s = s.substring( 0, s.length() - 1 ); } else s += e.getText(); autoFill.setText(s); for( Label item: list ) { if( item.getText().startsWith(s) ) to.getSelectionModel().select( item ); } }); to.addEventHandler(MouseEvent.MOUSE_CLICKED , event -> { s=\"\"; }); from.addEventHandler(MouseEvent.MOUSE_CLICKED,event -> { s=\"\"; }); sync.addEventHandler(javafx.scene.input.MouseEvent.MOUSE_CLICKED, e->{ error.setText(\"\"); autoFill.setVisible(false); System.out.println(\"Here goes the data fetch code.\"); if (from.getSelectionModel().getSelectedIndex()!=-1){ String fromCurrency=Currency.getInstance(new Locale(\"\",countries.get(from.getSelectionModel().getSelectedItem().getText()))).getCurrencyCode(); convert.refresh(fromCurrency); }else { error.setText(\"Please select the from country.\"); } }); convertBtn.addEventHandler(javafx.scene.input.MouseEvent.MOUSE_CLICKED , e->{ error.setText(\"\"); autoFill.setVisible(false); if (validateInput()){ String fromCountry = from.getSelectionModel().getSelectedItem().getText(); String toCountry = to.getSelectionModel().getSelectedItem().getText(); String fromCurrency = Currency.getInstance(new Locale(\"\",countries.get(fromCountry))).getCurrencyCode(); String toCurrency = Currency.getInstance(new Locale(\"\",countries.get(toCountry))).getCurrencyCode(); Platform.runLater( new Runnable() { @Override public void run() { double rate = convert.convert(fromCurrency,toCurrency); rate = rate * Double.parseDouble(inputField.getText()); showDialog(\"Currency Conversion Information \\n\",\"Converted Amount from \"+from.getSelectionModel().getSelectedItem().getText()+ \"\\n to \"+to.getSelectionModel().getSelectedItem().getText()+\" \\n amount \"+rate,pane); } }); } else { error.setText(\"Something went wrong fill the input correctly.\"); } }); } public ObservableList<Label> getCountries(){ String[] locales = Locale.getISOCountries(); ObservableList<Label> countries = FXCollections.observableArrayList(); for (String countryCode : locales) { Locale obj = new Locale(\"EN\", countryCode); Label country = new Label(obj.getDisplayCountry()); if (!obj.getCountry().toLowerCase().equals(\"an\")){ Image icon = new Image(\"application/resources/icons/flags/4x3/\"+obj.getCountry().toLowerCase()+\".png\"); country.setGraphic(new ImageView(icon)); countries.add(country); } } return countries; } public void showDialog(String heading,String body,StackPane stackPane){ JFXButton cancel = new JFXButton(\"Cancel\"); cancel.setPrefSize(112,35); cancel.getStyleClass().add(\"cancel-btn\"); JFXDialogLayout content = new JFXDialogLayout(); content.setHeading(new Text(heading)); content.setBody(new Text(body)); content.setActions(cancel); JFXDialog dialog= new JFXDialog(stackPane,content, JFXDialog.DialogTransition.CENTER); dialog.show(); cancel.setOnAction(new EventHandler<ActionEvent>() { @Override public void handle(ActionEvent event) { dialog.close(); } }); } private boolean validateInput(){ if (inputField.validate()){ if (from.getSelectionModel().getSelectedIndex()!=-1 && to.getSelectionModel().getSelectedIndex()!=-1){ return true; } } return false; } public Label getError() { return error; } public void setError(Label error) { this.error = error; } }"},{"file_path":"CurrencyConverter-master\\src\\application\\main\\FixerResponse.java","file_content":"package application.main; import java.io.Serializable; import java.util.Map; import java.util.TreeMap; public class FixerResponse implements Serializable{ private String base; private String date; private Map<String, String> rates = new TreeMap<String, String>(); public Map<String, String> getRates() { return rates; } public void setRates(Map<String, String> rates) { this.rates = rates; } public String getBase() { return base; } public void setBase(String base) { this.base = base; } public String getDate() { return date; } public void setDate(String date) { this.date = date; } }"},{"file_path":"CurrencyConverter-master\\src\\application\\main\\HandleCache.java","file_content":"package application.main; import java.io.*; import java.util.ArrayList; public class HandleCache { private ArrayList<FixerResponse> cachedList ; public HandleCache(){ cachedList = new ArrayList<>(); } public ArrayList<FixerResponse> getCachedList() { return cachedList; } public void setCachedList(ArrayList<FixerResponse> cachedList) { this.cachedList = cachedList; } public FixerResponse findInArray(String base){ for (FixerResponse item : cachedList){ if (item.getBase().equals(base)){ return item; } } return null; } public void writeObj(FixerResponse obj) throws FileNotFoundException , IOException{ File file = new File(\"recent.cache\"); if (!file.exists()){ file.createNewFile(); } ObjectOutputStream oos= new ObjectOutputStream(new FileOutputStream(file)); oos.writeObject(obj); oos.close(); } public FixerResponse readObject(String base)throws FileNotFoundException , IOException,ClassNotFoundException{ File file = new File(\"recent.cache\"); if (!file.exists()){ file.createNewFile(); } ObjectInputStream ois = new ObjectInputStream(new FileInputStream(file)); FixerResponse obj = (FixerResponse) ois.readObject(); ois.close(); if(obj.getBase().equals(base)){ return obj; } return null; } }"}]}}
{"project_id":32,"chunk_id":0,"content":{"main_file_path":"CurrencyConverter-master\\src\\application\\main\\FixerResponse.java","main_file_content":"package application.main; import java.io.Serializable; import java.util.Map; import java.util.TreeMap; public class FixerResponse implements Serializable{ private String base; private String date; private Map<String, String> rates = new TreeMap<String, String>(); public Map<String, String> getRates() { return rates; } public void setRates(Map<String, String> rates) { this.rates = rates; } public String getBase() { return base; } public void setBase(String base) { this.base = base; } public String getDate() { return date; } public void setDate(String date) { this.date = date; } }","dependencies":[]}}
{"project_id":32,"chunk_id":0,"content":{"main_file_path":"CurrencyConverter-master\\src\\application\\main\\HandleCache.java","main_file_content":"package application.main; import java.io.*; import java.util.ArrayList; public class HandleCache { private ArrayList<FixerResponse> cachedList ; public HandleCache(){ cachedList = new ArrayList<>(); } public ArrayList<FixerResponse> getCachedList() { return cachedList; } public void setCachedList(ArrayList<FixerResponse> cachedList) { this.cachedList = cachedList; } public FixerResponse findInArray(String base){ for (FixerResponse item : cachedList){ if (item.getBase().equals(base)){ return item; } } return null; } public void writeObj(FixerResponse obj) throws FileNotFoundException , IOException{ File file = new File(\"recent.cache\"); if (!file.exists()){ file.createNewFile(); } ObjectOutputStream oos= new ObjectOutputStream(new FileOutputStream(file)); oos.writeObject(obj); oos.close(); } public FixerResponse readObject(String base)throws FileNotFoundException , IOException,ClassNotFoundException{ File file = new File(\"recent.cache\"); if (!file.exists()){ file.createNewFile(); } ObjectInputStream ois = new ObjectInputStream(new FileInputStream(file)); FixerResponse obj = (FixerResponse) ois.readObject(); ois.close(); if(obj.getBase().equals(base)){ return obj; } return null; } }","dependencies":[{"file_path":"CurrencyConverter-master\\src\\application\\main\\FixerResponse.java","file_content":"package application.main; import java.io.Serializable; import java.util.Map; import java.util.TreeMap; public class FixerResponse implements Serializable{ private String base; private String date; private Map<String, String> rates = new TreeMap<String, String>(); public Map<String, String> getRates() { return rates; } public void setRates(Map<String, String> rates) { this.rates = rates; } public String getBase() { return base; } public void setBase(String base) { this.base = base; } public String getDate() { return date; } public void setDate(String date) { this.date = date; } }"}]}}
{"project_id":32,"chunk_id":0,"content":{"main_file_path":"CurrencyConverter-master\\src\\application\\main\\Main.java","main_file_content":"package application.main; import javafx.application.Application; import javafx.fxml.FXMLLoader; import javafx.scene.Parent; import javafx.scene.Scene; import javafx.stage.Stage; public class Main extends Application { @Override public void start(Stage primaryStage) throws Exception{ Parent root = FXMLLoader.load(getClass().getResource(\"sample.fxml\")); primaryStage.setTitle(\"Currency Converter\"); Scene scene = new Scene(root); scene.getStylesheets().add(getClass().getResource(\"styles.css\").toExternalForm()); primaryStage.setScene(scene); primaryStage.setResizable(false); primaryStage.show(); } public static void main(String[] args) { launch(args); } }","dependencies":[]}}
{"project_id":33,"chunk_id":0,"content":{"main_file_path":"Curved-Fab-Reveal-Example-master\\app\\src\\main\\java\\saulmm\\test\\MainActivity.java","main_file_content":"package saulmm.test; import android.os.Bundle; import android.support.v7.app.AppCompatActivity; import saulmm.test.media.MediaFragment; public class MainActivity extends AppCompatActivity { @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); initMediaFragment(); } private void initMediaFragment() { getSupportFragmentManager().beginTransaction() .add(android.R.id.content, MediaFragment.newInstance()) .commit(); } }","dependencies":[{"file_path":"Curved-Fab-Reveal-Example-master\\app\\src\\main\\java\\saulmm\\test\\media\\MediaFragment.java","file_content":"package saulmm.test.media; import android.animation.Animator; import android.animation.AnimatorListenerAdapter; import android.animation.ObjectAnimator; import android.animation.ValueAnimator; import android.os.Bundle; import android.support.annotation.Nullable; import android.support.v4.app.Fragment; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.view.ViewPropertyAnimator; import android.view.animation.AccelerateInterpolator; import android.widget.FrameLayout; import android.widget.LinearLayout; import saulmm.test.R; public class MediaFragment extends Fragment { private View mFab; private FrameLayout mFabContainer; private LinearLayout mControlsContainer; public final static float SCALE_FACTOR = 13f; public final static int ANIMATION_DURATION = 300; public final static int MINIMUN_X_DISTANCE = 200; private boolean mRevealFlag; private float mFabSize; private View mRootView; @Nullable @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { mRootView = inflater.inflate(R.layout.activity_media, container, false); return mRootView; } @Override public void onActivityCreated(@Nullable Bundle savedInstanceState) { super.onActivityCreated(savedInstanceState); mFabSize = getResources().getDimensionPixelSize(R.dimen.fab_size); bindViews(); } private void bindViews() { mFab = mRootView.findViewById(R.id.fab); mFab.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { onFabPressed(v); } }); mFabContainer = (FrameLayout) mRootView.findViewById(R.id.fab_container); mControlsContainer = (LinearLayout) mRootView.findViewById(R.id.media_controls_container); } public void onFabPressed(View view) { final float startX = mFab.getX(); AnimatorPath path = new AnimatorPath(); path.moveTo(0, 0); path.curveTo(-200, 200, -400, 100, -600, 50); final ObjectAnimator anim = ObjectAnimator.ofObject(this, \"fabLoc\", new PathEvaluator(), path.getPoints().toArray()); anim.setInterpolator(new AccelerateInterpolator()); anim.setDuration(ANIMATION_DURATION); anim.start(); anim.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { @Override public void onAnimationUpdate(ValueAnimator animation) { if (Math.abs(startX - mFab.getX()) > MINIMUN_X_DISTANCE) { if (!mRevealFlag) { mFabContainer.setY(mFabContainer.getY() + mFabSize / 2); mFab.animate() .scaleXBy(SCALE_FACTOR) .scaleYBy(SCALE_FACTOR) .setListener(mEndRevealListener) .setDuration(ANIMATION_DURATION); mRevealFlag = true; } } } }); } private AnimatorListenerAdapter mEndRevealListener = new AnimatorListenerAdapter() { @Override public void onAnimationEnd(Animator animation) { super.onAnimationEnd(animation); mFab.setVisibility(View.INVISIBLE); mFabContainer.setBackgroundColor(getResources() .getColor(R.color.brand_accent)); for (int i = 0; i < mControlsContainer.getChildCount(); i++) { View v = mControlsContainer.getChildAt(i); ViewPropertyAnimator animator = v.animate() .scaleX(1).scaleY(1) .setDuration(ANIMATION_DURATION); animator.setStartDelay(i * 50); animator.start(); } } }; public void setFabLoc(PathPoint newLoc) { mFab.setTranslationX(newLoc.mX); if (mRevealFlag) mFab.setTranslationY(newLoc.mY - (mFabSize / 2)); else mFab.setTranslationY(newLoc.mY); } public static MediaFragment newInstance () { return new MediaFragment(); } }"}]}}
{"project_id":33,"chunk_id":0,"content":{"main_file_path":"Curved-Fab-Reveal-Example-master\\app\\src\\main\\java\\saulmm\\test\\media\\AnimatorPath.java","main_file_content":"package saulmm.test.media; import java.util.ArrayList; import java.util.Collection; public class AnimatorPath { ArrayList<PathPoint> mPoints = new ArrayList<PathPoint>(); public void moveTo(float x, float y) { mPoints.add(PathPoint.moveTo(x, y)); } public void lineTo(float x, float y) { mPoints.add(PathPoint.lineTo(x, y)); } public void curveTo(float c0X, float c0Y, float c1X, float c1Y, float x, float y) { mPoints.add(PathPoint.curveTo(c0X, c0Y, c1X, c1Y, x, y)); } public Collection<PathPoint> getPoints() { return mPoints; } }","dependencies":[{"file_path":"Curved-Fab-Reveal-Example-master\\app\\src\\main\\java\\saulmm\\test\\media\\PathPoint.java","file_content":"package saulmm.test.media; public class PathPoint { public static final int MOVE = 0; public static final int LINE = 1; public static final int CURVE = 2; float mX, mY; float mControl0X, mControl0Y; float mControl1X, mControl1Y; int mOperation; private PathPoint(int operation, float x, float y) { mOperation = operation; mX = x; mY = y; } private PathPoint(float c0X, float c0Y, float c1X, float c1Y, float x, float y) { mControl0X = c0X; mControl0Y = c0Y; mControl1X = c1X; mControl1Y = c1Y; mX = x; mY = y; mOperation = CURVE; } public static PathPoint lineTo(float x, float y) { return new PathPoint(LINE, x, y); } public static PathPoint curveTo(float c0X, float c0Y, float c1X, float c1Y, float x, float y) { return new PathPoint(c0X, c0Y, c1X, c1Y, x, y); } public static PathPoint moveTo(float x, float y) { return new PathPoint(MOVE, x, y); } }"}]}}
{"project_id":33,"chunk_id":0,"content":{"main_file_path":"Curved-Fab-Reveal-Example-master\\app\\src\\main\\java\\saulmm\\test\\media\\MediaFragment.java","main_file_content":"package saulmm.test.media; import android.animation.Animator; import android.animation.AnimatorListenerAdapter; import android.animation.ObjectAnimator; import android.animation.ValueAnimator; import android.os.Bundle; import android.support.annotation.Nullable; import android.support.v4.app.Fragment; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.view.ViewPropertyAnimator; import android.view.animation.AccelerateInterpolator; import android.widget.FrameLayout; import android.widget.LinearLayout; import saulmm.test.R; public class MediaFragment extends Fragment { private View mFab; private FrameLayout mFabContainer; private LinearLayout mControlsContainer; public final static float SCALE_FACTOR = 13f; public final static int ANIMATION_DURATION = 300; public final static int MINIMUN_X_DISTANCE = 200; private boolean mRevealFlag; private float mFabSize; private View mRootView; @Nullable @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { mRootView = inflater.inflate(R.layout.activity_media, container, false); return mRootView; } @Override public void onActivityCreated(@Nullable Bundle savedInstanceState) { super.onActivityCreated(savedInstanceState); mFabSize = getResources().getDimensionPixelSize(R.dimen.fab_size); bindViews(); } private void bindViews() { mFab = mRootView.findViewById(R.id.fab); mFab.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { onFabPressed(v); } }); mFabContainer = (FrameLayout) mRootView.findViewById(R.id.fab_container); mControlsContainer = (LinearLayout) mRootView.findViewById(R.id.media_controls_container); } public void onFabPressed(View view) { final float startX = mFab.getX(); AnimatorPath path = new AnimatorPath(); path.moveTo(0, 0); path.curveTo(-200, 200, -400, 100, -600, 50); final ObjectAnimator anim = ObjectAnimator.ofObject(this, \"fabLoc\", new PathEvaluator(), path.getPoints().toArray()); anim.setInterpolator(new AccelerateInterpolator()); anim.setDuration(ANIMATION_DURATION); anim.start(); anim.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { @Override public void onAnimationUpdate(ValueAnimator animation) { if (Math.abs(startX - mFab.getX()) > MINIMUN_X_DISTANCE) { if (!mRevealFlag) { mFabContainer.setY(mFabContainer.getY() + mFabSize / 2); mFab.animate() .scaleXBy(SCALE_FACTOR) .scaleYBy(SCALE_FACTOR) .setListener(mEndRevealListener) .setDuration(ANIMATION_DURATION); mRevealFlag = true; } } } }); } private AnimatorListenerAdapter mEndRevealListener = new AnimatorListenerAdapter() { @Override public void onAnimationEnd(Animator animation) { super.onAnimationEnd(animation); mFab.setVisibility(View.INVISIBLE); mFabContainer.setBackgroundColor(getResources() .getColor(R.color.brand_accent)); for (int i = 0; i < mControlsContainer.getChildCount(); i++) { View v = mControlsContainer.getChildAt(i); ViewPropertyAnimator animator = v.animate() .scaleX(1).scaleY(1) .setDuration(ANIMATION_DURATION); animator.setStartDelay(i * 50); animator.start(); } } }; public void setFabLoc(PathPoint newLoc) { mFab.setTranslationX(newLoc.mX); if (mRevealFlag) mFab.setTranslationY(newLoc.mY - (mFabSize / 2)); else mFab.setTranslationY(newLoc.mY); } public static MediaFragment newInstance () { return new MediaFragment(); } }","dependencies":[{"file_path":"Curved-Fab-Reveal-Example-master\\app\\src\\main\\java\\saulmm\\test\\media\\AnimatorPath.java","file_content":"package saulmm.test.media; import java.util.ArrayList; import java.util.Collection; public class AnimatorPath { ArrayList<PathPoint> mPoints = new ArrayList<PathPoint>(); public void moveTo(float x, float y) { mPoints.add(PathPoint.moveTo(x, y)); } public void lineTo(float x, float y) { mPoints.add(PathPoint.lineTo(x, y)); } public void curveTo(float c0X, float c0Y, float c1X, float c1Y, float x, float y) { mPoints.add(PathPoint.curveTo(c0X, c0Y, c1X, c1Y, x, y)); } public Collection<PathPoint> getPoints() { return mPoints; } }"},{"file_path":"Curved-Fab-Reveal-Example-master\\app\\src\\main\\java\\saulmm\\test\\media\\PathEvaluator.java","file_content":"package saulmm.test.media; import android.animation.TypeEvaluator; public class PathEvaluator implements TypeEvaluator<PathPoint> { @Override public PathPoint evaluate(float t, PathPoint startValue, PathPoint endValue) { float x, y; if (endValue.mOperation == PathPoint.CURVE) { float oneMinusT = 1 - t; x = oneMinusT * oneMinusT * oneMinusT * startValue.mX + 3 * oneMinusT * oneMinusT * t * endValue.mControl0X + 3 * oneMinusT * t * t * endValue.mControl1X + t * t * t * endValue.mX; y = oneMinusT * oneMinusT * oneMinusT * startValue.mY + 3 * oneMinusT * oneMinusT * t * endValue.mControl0Y + 3 * oneMinusT * t * t * endValue.mControl1Y + t * t * t * endValue.mY; } else if (endValue.mOperation == PathPoint.LINE) { x = startValue.mX + t * (endValue.mX - startValue.mX); y = startValue.mY + t * (endValue.mY - startValue.mY); } else { x = endValue.mX; y = endValue.mY; } return PathPoint.moveTo(x, y); } }"},{"file_path":"Curved-Fab-Reveal-Example-master\\app\\src\\main\\java\\saulmm\\test\\media\\PathPoint.java","file_content":"package saulmm.test.media; public class PathPoint { public static final int MOVE = 0; public static final int LINE = 1; public static final int CURVE = 2; float mX, mY; float mControl0X, mControl0Y; float mControl1X, mControl1Y; int mOperation; private PathPoint(int operation, float x, float y) { mOperation = operation; mX = x; mY = y; } private PathPoint(float c0X, float c0Y, float c1X, float c1Y, float x, float y) { mControl0X = c0X; mControl0Y = c0Y; mControl1X = c1X; mControl1Y = c1Y; mX = x; mY = y; mOperation = CURVE; } public static PathPoint lineTo(float x, float y) { return new PathPoint(LINE, x, y); } public static PathPoint curveTo(float c0X, float c0Y, float c1X, float c1Y, float x, float y) { return new PathPoint(c0X, c0Y, c1X, c1Y, x, y); } public static PathPoint moveTo(float x, float y) { return new PathPoint(MOVE, x, y); } }"}]}}
{"project_id":33,"chunk_id":0,"content":{"main_file_path":"Curved-Fab-Reveal-Example-master\\app\\src\\main\\java\\saulmm\\test\\media\\PathEvaluator.java","main_file_content":"package saulmm.test.media; import android.animation.TypeEvaluator; public class PathEvaluator implements TypeEvaluator<PathPoint> { @Override public PathPoint evaluate(float t, PathPoint startValue, PathPoint endValue) { float x, y; if (endValue.mOperation == PathPoint.CURVE) { float oneMinusT = 1 - t; x = oneMinusT * oneMinusT * oneMinusT * startValue.mX + 3 * oneMinusT * oneMinusT * t * endValue.mControl0X + 3 * oneMinusT * t * t * endValue.mControl1X + t * t * t * endValue.mX; y = oneMinusT * oneMinusT * oneMinusT * startValue.mY + 3 * oneMinusT * oneMinusT * t * endValue.mControl0Y + 3 * oneMinusT * t * t * endValue.mControl1Y + t * t * t * endValue.mY; } else if (endValue.mOperation == PathPoint.LINE) { x = startValue.mX + t * (endValue.mX - startValue.mX); y = startValue.mY + t * (endValue.mY - startValue.mY); } else { x = endValue.mX; y = endValue.mY; } return PathPoint.moveTo(x, y); } }","dependencies":[{"file_path":"Curved-Fab-Reveal-Example-master\\app\\src\\main\\java\\saulmm\\test\\media\\PathPoint.java","file_content":"package saulmm.test.media; public class PathPoint { public static final int MOVE = 0; public static final int LINE = 1; public static final int CURVE = 2; float mX, mY; float mControl0X, mControl0Y; float mControl1X, mControl1Y; int mOperation; private PathPoint(int operation, float x, float y) { mOperation = operation; mX = x; mY = y; } private PathPoint(float c0X, float c0Y, float c1X, float c1Y, float x, float y) { mControl0X = c0X; mControl0Y = c0Y; mControl1X = c1X; mControl1Y = c1Y; mX = x; mY = y; mOperation = CURVE; } public static PathPoint lineTo(float x, float y) { return new PathPoint(LINE, x, y); } public static PathPoint curveTo(float c0X, float c0Y, float c1X, float c1Y, float x, float y) { return new PathPoint(c0X, c0Y, c1X, c1Y, x, y); } public static PathPoint moveTo(float x, float y) { return new PathPoint(MOVE, x, y); } }"}]}}
{"project_id":33,"chunk_id":0,"content":{"main_file_path":"Curved-Fab-Reveal-Example-master\\app\\src\\main\\java\\saulmm\\test\\media\\PathPoint.java","main_file_content":"package saulmm.test.media; public class PathPoint { public static final int MOVE = 0; public static final int LINE = 1; public static final int CURVE = 2; float mX, mY; float mControl0X, mControl0Y; float mControl1X, mControl1Y; int mOperation; private PathPoint(int operation, float x, float y) { mOperation = operation; mX = x; mY = y; } private PathPoint(float c0X, float c0Y, float c1X, float c1Y, float x, float y) { mControl0X = c0X; mControl0Y = c0Y; mControl1X = c1X; mControl1Y = c1Y; mX = x; mY = y; mOperation = CURVE; } public static PathPoint lineTo(float x, float y) { return new PathPoint(LINE, x, y); } public static PathPoint curveTo(float c0X, float c0Y, float c1X, float c1Y, float x, float y) { return new PathPoint(c0X, c0Y, c1X, c1Y, x, y); } public static PathPoint moveTo(float x, float y) { return new PathPoint(MOVE, x, y); } }","dependencies":[]}}
{"project_id":34,"chunk_id":0,"content":{"main_file_path":"Department-Wise Salary Calculation\\src\\main\\java\\assessment\\Department_salary.java","main_file_content":"package assessment;public class Department_salary { }","dependencies":[]}}
{"project_id":34,"chunk_id":0,"content":{"main_file_path":"Department-Wise Salary Calculation\\src\\main\\java\\assessment\\salary.java","main_file_content":"package assessment; import java.io.FileWriter; import java.io.IOException; import java.util.HashMap; import javax.xml.parsers.DocumentBuilder; import javax.xml.parsers.DocumentBuilderFactory; import javax.xml.parsers.ParserConfigurationException; import org.w3c.dom.Document; import org.w3c.dom.Element; import org.w3c.dom.Node; import org.w3c.dom.NodeList; import org.xml.sax.SAXException; import com.google.gson.Gson; import com.google.gson.GsonBuilder; public class salary { public static void main( String [] args) throws Exception { DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); HashMap<String,Integer> map=new HashMap<String,Integer>(); String jsonString; FileWriter myWriter = new FileWriter(\"App.json\"); try { DocumentBuilder builder = factory.newDocumentBuilder(); Document doc = builder.parse(\"assessment.xml\"); NodeList departmentList =doc.getElementsByTagName(\"Department\"); String dep,s; int sal,depsal=0; for(int k=0; k<departmentList.getLength();k++) { Node d = departmentList.item(k); if(d.getNodeType()==Node.ELEMENT_NODE) { Element department = (Element) d; dep = department.getAttribute(\"name\"); NodeList employeeList = department.getChildNodes(); for(int i=0; i<employeeList.getLength();i++) { Node e = employeeList.item(i); if(e.getNodeType()==Node.ELEMENT_NODE) { Element employee = (Element) e; NodeList salaryList = employee.getChildNodes(); Node n = salaryList.item(1); if(n.getNodeType()==Node.ELEMENT_NODE) { Element salary = (Element) n; s = salary.getAttribute(\"value\"); sal = Integer.parseInt(s); depsal += sal; } } } map.put(dep,depsal); depsal=0; } } Gson gson = new GsonBuilder().disableHtmlEscaping().create(); jsonString= gson.toJson(map); System.out.println(jsonString); myWriter.write(jsonString); myWriter.close(); } catch (ParserConfigurationException | SAXException | IOException e) { e.printStackTrace(); } } }","dependencies":[]}}
{"project_id":35,"chunk_id":0,"content":{"main_file_path":"Digital Steganography Java Project\\coding\\BreakPage.java","main_file_content":"import java.awt.*; import javax.swing.*; import java.awt.event.*; import java.io.*; import java.awt.image.*; public class BreakPage extends JFrame implements ActionListener { private JLabel code_label,picture_label; private JTextField code_text,picture_text; private JButton picture_load_button,break_button,home_button; String filepath=\"\",secret_code=\"\",secret_info=\"\"; Container con=null; JLabel jl; byte img_byte[]=new byte[6000]; FileDialog fd; Image img; Dimension d; int iw,ih; int w=10,h=10; int pix[]; int hist[]=new int[256]; int t[]; int max_hist=0; boolean ok; Image newimg; int key,k; String user_key=\"\"; BreakPage() { super(\"Break\"); con=getContentPane(); con.setLayout(null); code_label=new JLabel(\"Security Code\"); code_label.setBounds(230,200,150,50); code_text=new JTextField(200); code_text.setBounds(400,200,250,40); picture_label=new JLabel(\"Picture\"); picture_label.setBounds(230,300,250,40); picture_text=new JTextField(200); picture_text.setBounds(400,300,250,50); picture_load_button=new JButton(\"Load\"); picture_load_button.setBounds(700,300,150,30); picture_load_button.addActionListener(this); break_button=new JButton(\"Break\"); break_button.setBounds(400,400,150,30); break_button.addActionListener(this); home_button=new JButton(\"Home\"); home_button.setBounds(700,400,150,30); home_button.addActionListener(this); jl=new JLabel(); jl.setBounds(700,500,150,30); fd=new FileDialog(new JFrame()); con.add(code_label); con.add(code_text); con.add(picture_label); con.add(picture_text); con.add(picture_load_button); con.add(break_button); con.add(home_button); con.add(jl); } public void actionPerformed(ActionEvent ae) { if(ae.getSource()==picture_load_button) { fd.setVisible(true); filepath=fd.getDirectory()+fd.getFile(); picture_text.setText(filepath); }else if(ae.getSource()==break_button) { String sc=code_text.getText(); int star_flag=0; String star_value=\"\"; for(int i=0;i<sc.length();i++) { if(sc.charAt(i)=='*') star_flag=1; if(star_flag==1&& star_flag!=2) { i=++i; star_value=sc.substring(i); star_flag=2; } } System.out.println(\"star value er:\"+Integer.parseInt(star_value)); k=sc.length()+1+Integer.parseInt(star_value); try{ img=ComposePage.newimg; key=k; System.out.println(\"key ckeck in temp:\"+key); user_key=sc; Container con=getContentPane(); iw=img.getWidth(null); ih=img.getHeight(null); pix=new int[iw*ih]; t=new int[iw*ih]; PixelGrabber pg=new PixelGrabber(img,0,0,iw,ih,pix,0,iw); ColorModel cm=pg.getColorModel(); int ww=pg.getWidth(); int hh=pg.getHeight(); pg.grabPixels(); int secret_check[]=new int[sc.length()]; byte sc_byte[]=sc.getBytes(); for(int i=0;i<sc.length();i++) secret_check[i]=sc_byte[i]; int secret_info[]=new int[key]; byte b[]=new byte[key]; int j=0,loop=0,flag=0,star2_flag=0; System.out.println(\"hi welcome\"); for(int i=0;i<pix.length;i++) { if((i%20)==0 && k>0 && flag==0) { System.out.println(\"one\"); if(loop<user_key.length() && secret_check[loop]==pix[i] && star2_flag<2) { System.out.println(\"two\"); if((char)secret_check[loop]=='*') { star2_flag++; } k--; loop++; }else if(star2_flag>=1) { System.out.println(\"else if\"); secret_info[j]=pix[i]; b[j]=(byte)pix[i]; System.out.println(\"secrect pix :\"+new String(\"\"+(char)b[j])+\"\"); j++; k--; } else { System.out.println(\"star flag :\"+star2_flag); System.out.println(\"else\"); flag=1; } } } if(flag==0) { String s=new String(b); s=new String(s.substring(1)); System.out.println(\"secret information :\"+s); System.out.println(\"key :\"+key); JOptionPane.showMessageDialog(null,\"Secret Information is : \"+s); } else JOptionPane.showMessageDialog(null,\"code you entered is not valid\"); newimg =con.createImage(new MemoryImageSource(ww,hh,cm,pix, 0, ww)); }catch(Exception e) { System.out.println(e); } }else { this.dispose(); Home h=new Home(); h.setSize(1035,790); h.setVisible(true); } } public static void main(String args[]) { BreakPage bp=new BreakPage(); bp.setSize(1035,740); bp.setVisible(true); } }","dependencies":[{"file_path":"Digital Steganography Java Project\\coding\\Home.java","file_content":"import java.awt.*; import javax.swing.*; import java.awt.event.*; public class Home extends JFrame implements ActionListener { private JButton compose,breakmsg; Home() { super(\"Steganography\"); Container con=getContentPane(); con.setLayout(null); compose=new JButton(\"Compose\"); compose.addActionListener(this); compose.setBounds(300,350,150,50); breakmsg=new JButton(\"Break\"); breakmsg.addActionListener(this); breakmsg.setBounds(550,350,150,50); con.add(compose); con.add(breakmsg); } public void actionPerformed(ActionEvent ae) { if(ae.getSource()==compose) { this.dispose(); ComposePage cp=new ComposePage(); cp.setSize(1035,790); cp.setVisible(true); } if(ae.getSource()==breakmsg) { this.dispose(); BreakPage bp=new BreakPage(); bp.setSize(1035,790); bp.setVisible(true); } } public static void main(String args[]) { Home h=new Home(); h.setSize(1035,790); h.setVisible(true); } }"}]}}
{"project_id":35,"chunk_id":0,"content":{"main_file_path":"Digital Steganography Java Project\\coding\\ComposePage.java","main_file_content":"import java.awt.*; import javax.swing.*; import java.awt.event.*; import java.io.*; import java.awt.image.*; import com.sun.image.codec.jpeg.*; public class ComposePage extends JFrame implements ActionListener { private JLabel code_label,secret_label,picture_label; private JTextField code_text,secret_text,picture_text; private JButton picture_load_button,hide_button,home_button; String filepath=\"\",secret_code=\"\",secret_info=\"\",user_key=\"\"; Container con=null; JLabel jl; byte img_byte[]=new byte[6000]; FileDialog fd; Image img; Dimension d; int iw,ih; int w=10,h=10; int pix[]; int hist[]=new int[256]; int t[]; int max_hist=0; boolean ok; static Image newimg; int key,k; ComposePage() { super(\"Compose\"); con=getContentPane(); con.setLayout(null); code_label=new JLabel(\"Security Code\"); code_label.setBounds(230,100,150,50); code_text=new JTextField(200); code_text.setBounds(400,100,250,40); secret_label=new JLabel(\"Secret Information\"); secret_label.setBounds(230,200,150,50); secret_text=new JTextField(200); secret_text.setBounds(400,200,250,40); picture_label=new JLabel(\"Picture\"); picture_label.setBounds(230,300,250,40); picture_text=new JTextField(200); picture_text.setBounds(400,300,250,50); picture_load_button=new JButton(\"Load\"); picture_load_button.setBounds(700,300,150,30); picture_load_button.addActionListener(this); hide_button=new JButton(\"Hide\"); hide_button.setBounds(400,400,150,30); hide_button.addActionListener(this); home_button=new JButton(\"Home\"); home_button.setBounds(700,400,150,30); home_button.addActionListener(this); jl=new JLabel(); jl.setBounds(700,500,150,30); fd=new FileDialog(new JFrame()); con.add(code_label); con.add(code_text); con.add(secret_label); con.add(secret_text); con.add(picture_label); con.add(picture_text); con.add(picture_load_button); con.add(hide_button); con.add(home_button); } public void actionPerformed(ActionEvent ae) { if(ae.getSource()==picture_load_button) { fd.setVisible(true); filepath=fd.getDirectory()+fd.getFile(); picture_text.setText(filepath); }else if(ae.getSource()==hide_button) { int starflag=0; secret_code=code_text.getText(); for(int i=0;i<secret_code.length();i++) { if(secret_code.charAt(i)=='*') { starflag=1; } } if(starflag==0) { secret_info=secret_text.getText(); user_key=secret_code+\"*\"+new String(\"\"+secret_info.length()); System.out.println(\"user key :\"+user_key); String secret_code_info=user_key+\"*\"+secret_info+\"*\"; byte secret_byte_array[]=secret_code_info.getBytes(); int secret_int_array[]=new int[secret_byte_array.length]; try{ if(filepath.equals(\"\") && (secret_text.getText()).equals(\"\")) JOptionPane.showMessageDialog(null,\"image and secret info are empty. enter them\"); else if(secret_info.length()==0 && filepath.length()>0) JOptionPane.showMessageDialog(null,\"enter secret info\"); else if(filepath.length()==0 && (secret_text.getText()).length()>0) JOptionPane.showMessageDialog(null,\"load an image\"); else { ImageIcon ic=new ImageIcon(filepath); img=ic.getImage(); iw=img.getWidth(null); ih=img.getHeight(null); pix=new int[iw*ih]; t=new int[iw*ih]; PixelGrabber pg=new PixelGrabber(img,0,0,iw,ih,pix,0,iw); ColorModel cm=pg.getColorModel(); int ww=pg.getWidth(); int hh=pg.getHeight(); pg.grabPixels(); key=secret_byte_array.length; int k=key; int j=0; for(int i=0;i<pix.length;i++) { if((i%20)==0 && k>0) { secret_int_array[j]=(int)secret_byte_array[j]; System.out.println(\"user key :\"+secret_int_array[j]); pix[i]=secret_int_array[j]; j++; k--; } } newimg =con.createImage(new MemoryImageSource(ww,hh,cm,pix, 0, ww)); jl.setIcon(new ImageIcon(newimg)); JOptionPane.showMessageDialog(null,\"your secret code: \"+user_key+\"\"); MediaTracker mediaTracker = new MediaTracker(new Container()); mediaTracker.addImage(newimg, 0); mediaTracker.waitForID(0); int thumbWidth = 400; int thumbHeight = 400; double thumbRatio = (double)thumbWidth / (double)thumbHeight; int imageWidth = newimg.getWidth(null); int imageHeight = newimg.getHeight(null); double imageRatio = (double)imageWidth / (double)imageHeight; if (thumbRatio < imageRatio) { thumbHeight = (int)(thumbWidth / imageRatio); } else { thumbWidth = (int)(thumbHeight * imageRatio); } BufferedImage thumbImage = new BufferedImage(newimg.getWidth(null), newimg.getHeight(null), BufferedImage.TYPE_INT_RGB); Graphics2D graphics2D = thumbImage.createGraphics(); graphics2D.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR); graphics2D.drawImage(newimg, 0, 0, newimg.getWidth(null), newimg.getHeight(null), null); File f=new File(\"secpic.jpg\"); BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(f)); JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder(out); JPEGEncodeParam param = encoder. getDefaultJPEGEncodeParam(thumbImage); int quality = 80; quality = Math.max(0, Math.min(quality, 100)); param.setQuality((float)quality / 100.0f, false); encoder.setJPEGEncodeParam(param); encoder.encode(thumbImage); out.close(); System.out.println(\"Done.\"); test t=new test(newimg); t.setSize(1035,790); t.setVisible(true); } }catch(Exception e) { System.out.println(e); } }else JOptionPane.showMessageDialog(null,\"Do not enter '*' in secrect code\"); }else { this.dispose(); Home h=new Home(); h.setSize(1035,790); h.setVisible(true); } } public static void main(String args[]) { ComposePage cp=new ComposePage(); cp.setSize(1035,740); cp.setVisible(true); } }","dependencies":[{"file_path":"Digital Steganography Java Project\\coding\\Home.java","file_content":"import java.awt.*; import javax.swing.*; import java.awt.event.*; public class Home extends JFrame implements ActionListener { private JButton compose,breakmsg; Home() { super(\"Steganography\"); Container con=getContentPane(); con.setLayout(null); compose=new JButton(\"Compose\"); compose.addActionListener(this); compose.setBounds(300,350,150,50); breakmsg=new JButton(\"Break\"); breakmsg.addActionListener(this); breakmsg.setBounds(550,350,150,50); con.add(compose); con.add(breakmsg); } public void actionPerformed(ActionEvent ae) { if(ae.getSource()==compose) { this.dispose(); ComposePage cp=new ComposePage(); cp.setSize(1035,790); cp.setVisible(true); } if(ae.getSource()==breakmsg) { this.dispose(); BreakPage bp=new BreakPage(); bp.setSize(1035,790); bp.setVisible(true); } } public static void main(String args[]) { Home h=new Home(); h.setSize(1035,790); h.setVisible(true); } }"},{"file_path":"Digital Steganography Java Project\\coding\\test.java","file_content":"import java.awt.*; import javax.swing.*; import java.awt.event.*; import java.io.*; import java.awt.image.*; public class test extends JFrame { Image newimg; test() { } test(Image m) { newimg=m; } public void paint(Graphics g) { g.drawImage(newimg,100,100,null); } public static void main(String args[]) { test bp=new test(); bp.setSize(1035,740); bp.setVisible(true); } }"}]}}
{"project_id":35,"chunk_id":0,"content":{"main_file_path":"Digital Steganography Java Project\\coding\\Home.java","main_file_content":"import java.awt.*; import javax.swing.*; import java.awt.event.*; public class Home extends JFrame implements ActionListener { private JButton compose,breakmsg; Home() { super(\"Steganography\"); Container con=getContentPane(); con.setLayout(null); compose=new JButton(\"Compose\"); compose.addActionListener(this); compose.setBounds(300,350,150,50); breakmsg=new JButton(\"Break\"); breakmsg.addActionListener(this); breakmsg.setBounds(550,350,150,50); con.add(compose); con.add(breakmsg); } public void actionPerformed(ActionEvent ae) { if(ae.getSource()==compose) { this.dispose(); ComposePage cp=new ComposePage(); cp.setSize(1035,790); cp.setVisible(true); } if(ae.getSource()==breakmsg) { this.dispose(); BreakPage bp=new BreakPage(); bp.setSize(1035,790); bp.setVisible(true); } } public static void main(String args[]) { Home h=new Home(); h.setSize(1035,790); h.setVisible(true); } }","dependencies":[{"file_path":"Digital Steganography Java Project\\coding\\BreakPage.java","file_content":"import java.awt.*; import javax.swing.*; import java.awt.event.*; import java.io.*; import java.awt.image.*; public class BreakPage extends JFrame implements ActionListener { private JLabel code_label,picture_label; private JTextField code_text,picture_text; private JButton picture_load_button,break_button,home_button; String filepath=\"\",secret_code=\"\",secret_info=\"\"; Container con=null; JLabel jl; byte img_byte[]=new byte[6000]; FileDialog fd; Image img; Dimension d; int iw,ih; int w=10,h=10; int pix[]; int hist[]=new int[256]; int t[]; int max_hist=0; boolean ok; Image newimg; int key,k; String user_key=\"\"; BreakPage() { super(\"Break\"); con=getContentPane(); con.setLayout(null); code_label=new JLabel(\"Security Code\"); code_label.setBounds(230,200,150,50); code_text=new JTextField(200); code_text.setBounds(400,200,250,40); picture_label=new JLabel(\"Picture\"); picture_label.setBounds(230,300,250,40); picture_text=new JTextField(200); picture_text.setBounds(400,300,250,50); picture_load_button=new JButton(\"Load\"); picture_load_button.setBounds(700,300,150,30); picture_load_button.addActionListener(this); break_button=new JButton(\"Break\"); break_button.setBounds(400,400,150,30); break_button.addActionListener(this); home_button=new JButton(\"Home\"); home_button.setBounds(700,400,150,30); home_button.addActionListener(this); jl=new JLabel(); jl.setBounds(700,500,150,30); fd=new FileDialog(new JFrame()); con.add(code_label); con.add(code_text); con.add(picture_label); con.add(picture_text); con.add(picture_load_button); con.add(break_button); con.add(home_button); con.add(jl); } public void actionPerformed(ActionEvent ae) { if(ae.getSource()==picture_load_button) { fd.setVisible(true); filepath=fd.getDirectory()+fd.getFile(); picture_text.setText(filepath); }else if(ae.getSource()==break_button) { String sc=code_text.getText(); int star_flag=0; String star_value=\"\"; for(int i=0;i<sc.length();i++) { if(sc.charAt(i)=='*') star_flag=1; if(star_flag==1&& star_flag!=2) { i=++i; star_value=sc.substring(i); star_flag=2; } } System.out.println(\"star value er:\"+Integer.parseInt(star_value)); k=sc.length()+1+Integer.parseInt(star_value); try{ img=ComposePage.newimg; key=k; System.out.println(\"key ckeck in temp:\"+key); user_key=sc; Container con=getContentPane(); iw=img.getWidth(null); ih=img.getHeight(null); pix=new int[iw*ih]; t=new int[iw*ih]; PixelGrabber pg=new PixelGrabber(img,0,0,iw,ih,pix,0,iw); ColorModel cm=pg.getColorModel(); int ww=pg.getWidth(); int hh=pg.getHeight(); pg.grabPixels(); int secret_check[]=new int[sc.length()]; byte sc_byte[]=sc.getBytes(); for(int i=0;i<sc.length();i++) secret_check[i]=sc_byte[i]; int secret_info[]=new int[key]; byte b[]=new byte[key]; int j=0,loop=0,flag=0,star2_flag=0; System.out.println(\"hi welcome\"); for(int i=0;i<pix.length;i++) { if((i%20)==0 && k>0 && flag==0) { System.out.println(\"one\"); if(loop<user_key.length() && secret_check[loop]==pix[i] && star2_flag<2) { System.out.println(\"two\"); if((char)secret_check[loop]=='*') { star2_flag++; } k--; loop++; }else if(star2_flag>=1) { System.out.println(\"else if\"); secret_info[j]=pix[i]; b[j]=(byte)pix[i]; System.out.println(\"secrect pix :\"+new String(\"\"+(char)b[j])+\"\"); j++; k--; } else { System.out.println(\"star flag :\"+star2_flag); System.out.println(\"else\"); flag=1; } } } if(flag==0) { String s=new String(b); s=new String(s.substring(1)); System.out.println(\"secret information :\"+s); System.out.println(\"key :\"+key); JOptionPane.showMessageDialog(null,\"Secret Information is : \"+s); } else JOptionPane.showMessageDialog(null,\"code you entered is not valid\"); newimg =con.createImage(new MemoryImageSource(ww,hh,cm,pix, 0, ww)); }catch(Exception e) { System.out.println(e); } }else { this.dispose(); Home h=new Home(); h.setSize(1035,790); h.setVisible(true); } } public static void main(String args[]) { BreakPage bp=new BreakPage(); bp.setSize(1035,740); bp.setVisible(true); } }"},{"file_path":"Digital Steganography Java Project\\coding\\ComposePage.java","file_content":"import java.awt.*; import javax.swing.*; import java.awt.event.*; import java.io.*; import java.awt.image.*; import com.sun.image.codec.jpeg.*; public class ComposePage extends JFrame implements ActionListener { private JLabel code_label,secret_label,picture_label; private JTextField code_text,secret_text,picture_text; private JButton picture_load_button,hide_button,home_button; String filepath=\"\",secret_code=\"\",secret_info=\"\",user_key=\"\"; Container con=null; JLabel jl; byte img_byte[]=new byte[6000]; FileDialog fd; Image img; Dimension d; int iw,ih; int w=10,h=10; int pix[]; int hist[]=new int[256]; int t[]; int max_hist=0; boolean ok; static Image newimg; int key,k; ComposePage() { super(\"Compose\"); con=getContentPane(); con.setLayout(null); code_label=new JLabel(\"Security Code\"); code_label.setBounds(230,100,150,50); code_text=new JTextField(200); code_text.setBounds(400,100,250,40); secret_label=new JLabel(\"Secret Information\"); secret_label.setBounds(230,200,150,50); secret_text=new JTextField(200); secret_text.setBounds(400,200,250,40); picture_label=new JLabel(\"Picture\"); picture_label.setBounds(230,300,250,40); picture_text=new JTextField(200); picture_text.setBounds(400,300,250,50); picture_load_button=new JButton(\"Load\"); picture_load_button.setBounds(700,300,150,30); picture_load_button.addActionListener(this); hide_button=new JButton(\"Hide\"); hide_button.setBounds(400,400,150,30); hide_button.addActionListener(this); home_button=new JButton(\"Home\"); home_button.setBounds(700,400,150,30); home_button.addActionListener(this); jl=new JLabel(); jl.setBounds(700,500,150,30); fd=new FileDialog(new JFrame()); con.add(code_label); con.add(code_text); con.add(secret_label); con.add(secret_text); con.add(picture_label); con.add(picture_text); con.add(picture_load_button); con.add(hide_button); con.add(home_button); } public void actionPerformed(ActionEvent ae) { if(ae.getSource()==picture_load_button) { fd.setVisible(true); filepath=fd.getDirectory()+fd.getFile(); picture_text.setText(filepath); }else if(ae.getSource()==hide_button) { int starflag=0; secret_code=code_text.getText(); for(int i=0;i<secret_code.length();i++) { if(secret_code.charAt(i)=='*') { starflag=1; } } if(starflag==0) { secret_info=secret_text.getText(); user_key=secret_code+\"*\"+new String(\"\"+secret_info.length()); System.out.println(\"user key :\"+user_key); String secret_code_info=user_key+\"*\"+secret_info+\"*\"; byte secret_byte_array[]=secret_code_info.getBytes(); int secret_int_array[]=new int[secret_byte_array.length]; try{ if(filepath.equals(\"\") && (secret_text.getText()).equals(\"\")) JOptionPane.showMessageDialog(null,\"image and secret info are empty. enter them\"); else if(secret_info.length()==0 && filepath.length()>0) JOptionPane.showMessageDialog(null,\"enter secret info\"); else if(filepath.length()==0 && (secret_text.getText()).length()>0) JOptionPane.showMessageDialog(null,\"load an image\"); else { ImageIcon ic=new ImageIcon(filepath); img=ic.getImage(); iw=img.getWidth(null); ih=img.getHeight(null); pix=new int[iw*ih]; t=new int[iw*ih]; PixelGrabber pg=new PixelGrabber(img,0,0,iw,ih,pix,0,iw); ColorModel cm=pg.getColorModel(); int ww=pg.getWidth(); int hh=pg.getHeight(); pg.grabPixels(); key=secret_byte_array.length; int k=key; int j=0; for(int i=0;i<pix.length;i++) { if((i%20)==0 && k>0) { secret_int_array[j]=(int)secret_byte_array[j]; System.out.println(\"user key :\"+secret_int_array[j]); pix[i]=secret_int_array[j]; j++; k--; } } newimg =con.createImage(new MemoryImageSource(ww,hh,cm,pix, 0, ww)); jl.setIcon(new ImageIcon(newimg)); JOptionPane.showMessageDialog(null,\"your secret code: \"+user_key+\"\"); MediaTracker mediaTracker = new MediaTracker(new Container()); mediaTracker.addImage(newimg, 0); mediaTracker.waitForID(0); int thumbWidth = 400; int thumbHeight = 400; double thumbRatio = (double)thumbWidth / (double)thumbHeight; int imageWidth = newimg.getWidth(null); int imageHeight = newimg.getHeight(null); double imageRatio = (double)imageWidth / (double)imageHeight; if (thumbRatio < imageRatio) { thumbHeight = (int)(thumbWidth / imageRatio); } else { thumbWidth = (int)(thumbHeight * imageRatio); } BufferedImage thumbImage = new BufferedImage(newimg.getWidth(null), newimg.getHeight(null), BufferedImage.TYPE_INT_RGB); Graphics2D graphics2D = thumbImage.createGraphics(); graphics2D.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR); graphics2D.drawImage(newimg, 0, 0, newimg.getWidth(null), newimg.getHeight(null), null); File f=new File(\"secpic.jpg\"); BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(f)); JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder(out); JPEGEncodeParam param = encoder. getDefaultJPEGEncodeParam(thumbImage); int quality = 80; quality = Math.max(0, Math.min(quality, 100)); param.setQuality((float)quality / 100.0f, false); encoder.setJPEGEncodeParam(param); encoder.encode(thumbImage); out.close(); System.out.println(\"Done.\"); test t=new test(newimg); t.setSize(1035,790); t.setVisible(true); } }catch(Exception e) { System.out.println(e); } }else JOptionPane.showMessageDialog(null,\"Do not enter '*' in secrect code\"); }else { this.dispose(); Home h=new Home(); h.setSize(1035,790); h.setVisible(true); } } public static void main(String args[]) { ComposePage cp=new ComposePage(); cp.setSize(1035,740); cp.setVisible(true); } }"}]}}
{"project_id":35,"chunk_id":0,"content":{"main_file_path":"Digital Steganography Java Project\\coding\\test.java","main_file_content":"import java.awt.*; import javax.swing.*; import java.awt.event.*; import java.io.*; import java.awt.image.*; public class test extends JFrame { Image newimg; test() { } test(Image m) { newimg=m; } public void paint(Graphics g) { g.drawImage(newimg,100,100,null); } public static void main(String args[]) { test bp=new test(); bp.setSize(1035,740); bp.setVisible(true); } }","dependencies":[]}}
{"project_id":36,"chunk_id":0,"content":{"main_file_path":"Dino_Game_java\\dino.java","main_file_content":"package Dino_Game_java; import java.awt.Color; import java.awt.Dimension; import java.awt.Font; import java.awt.Frame; import java.awt.Graphics; import java.awt.Graphics2D; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.awt.event.KeyEvent; import java.awt.event.WindowAdapter; import java.awt.event.WindowEvent; import java.util.ArrayList; import java.util.List; import java.util.Random; import javax.swing.AbstractAction; import javax.swing.ActionMap; import javax.swing.InputMap; import javax.swing.JPanel; import javax.swing.KeyStroke; import javax.swing.Timer; import java.awt.event.KeyListener; class Game extends Frame implements KeyListener{ final int D_W = 1200; final int D_H = 550; static int unit = 10; Color colorDinosaur = Color.GRAY; Color colorGameOver1 = Color.black; Color colorGameOver2 = Color.yellow; Color colorCactus1 = Color.gray; Color colorCactus2 = Color.gray; int jump = 0; int jumpY = 0; int y = 0; boolean onEnterPresses = false; boolean down = false; List<MyGraph> myGraphs = new ArrayList<>(); int currentDinosaurX = 0; int currentDinosaurY = 0; boolean gameOver = false; DrawPanel drawPanel = new DrawPanel(); public static void main(String args[]) { new Game(); } public Game() { super(\"Run Dino Run\"); setSize(1200, 550); setVisible(true); addWindowListener(new WindowAdapter() { public void windowClosing(WindowEvent e) { dispose(); System.exit(0); } }); addKeyListener(this); initCactusG(); ActionListener listener = new ActionListener() { public void actionPerformed(ActionEvent e) { if (!gameOver) { if (jump >= D_W) { jump = 0; initCactusG(); drawPanel.repaint(); } else { jump += 10; drawPanel.repaint(); } } } }; Timer timer = new javax.swing.Timer(40, listener); timer.start(); ActionListener listenerD = new ActionListener() { public void actionPerformed(ActionEvent e) { if (!gameOver) { if (onEnterPresses) { if (down) { jumpY -= 20; } else { jumpY += 20; } } if (jumpY >= 280) { down = true; } if (jumpY <= 0) { onEnterPresses = false; down = false; jumpY = 0; } } } }; Timer timerD = new javax.swing.Timer(80, listenerD); timerD.start(); add(drawPanel); pack(); setLocationRelativeTo(null); setVisible(true); } private void initCactusG() { Random rr = new Random(); int nbr = 2; int x_ = 10; int y_ = 100; int h_ = 60; int p_ = 10; myGraphs = new ArrayList<Game.MyGraph>(); for (int it = 0; it < nbr; it++) { Random r = new Random(); int step = r.nextInt(10) + 1; MyGraph myGraph = new MyGraph(); myGraph.x_ = x_ * 30 + step * 10 + 600; myGraph.h_ = 10 + (6 * step) + 2; myGraph.y_ = 300 - h_; myGraph.p_ = 8 + step / 2; myGraphs.add(myGraph); } } private void drawCactus(Graphics g) { int x = 0; int y = 0; int h = 0; int p = 0; for (MyGraph myGraph : myGraphs) { x = myGraph.x_; h = myGraph.h_; y = myGraph.y_; p = myGraph.p_; int maxH = 180; int i = p * 2 + 40; int j = p * 2 + 40; int y1 = y + 40; int y2 = y + 60; if (x + j - jump < 0) { jump = 0; } draw(g, x - i - jump, y1, h, p); draw(g, x - jump, y, maxH, p * 2); draw(g, x + j - jump, y2, h, p); drow2(g, x - jump, h, p, i, j, y1, y2); } } private void gameOver(Graphics g) { Graphics2D graph = (Graphics2D) g; graph.setPaint(colorGameOver1); graph.setFont(new Font(\"MV Boli\", 20, 50)); graph.drawString(\"Game Over\", 550, 150); Graphics2D graph1 = (Graphics2D) g; graph1.setPaint(colorGameOver1); graph1.setFont(new Font(\"MV Boli\", 20, 50)); graph1.drawString(\"Press Space key to restart!!\", 350, 250); } private void restartGame(Graphics g) { new Game(); } private void drawSun(Graphics g) { Graphics2D sun1 = (Graphics2D) g; sun1.setPaint(new Color(255, 255, 0)); sun1.fillArc(900, 70, 80, 80, 90, 180); Graphics2D sun2 = (Graphics2D) g; sun2.setPaint(new Color(255, 255, 153)); sun2.fillArc(900, 70, 80, 80, 270, 180); } private void drow2(Graphics g, int x, int h, int p, int i, int j, int y1, int y2) { Graphics2D gsds = (Graphics2D) g; gsds.setPaint(colorCactus1); gsds.fillRect(x - i + p, y1 + h, i, p); Graphics2D gsdds = (Graphics2D) g; gsdds.setPaint(colorCactus2); gsdds.fillRect(x - i + 2 * p, y1 + h - p, i - 2 * p, p); Graphics2D gsd2 = (Graphics2D) g; gsd2.setPaint(colorCactus2); gsd2.fillRect(x + p * 2, y2 + h, j - p, p); Graphics2D gsd3 = (Graphics2D) g; gsd3.setPaint(colorCactus1); gsd3.fillRect(x + p * 4, y2 + h - p, j - 4 * p, p); } private void drawSol(Graphics g, int x, int y, int maxH) { Graphics2D sol = (Graphics2D) g; sol.setPaint(Color.orange); sol.fillRect(0, y + maxH - 20, 1700, 100); } private void drawDinausor(Graphics g, int y) { int xDinausor = 180; int step = 1; g.setColor(colorDinosaur); currentDinosaurX = xDinausor; currentDinosaurY = y; drawRaw(g, xDinausor, y, 2, 1); drawRaw(g, xDinausor + 4 * unit, y, 2, 1); drawRaw(g, xDinausor, y - step * unit, 1, 1); drawRaw(g, xDinausor + 4 * unit, y - step * unit, 1, 1); step++; drawRaw(g, xDinausor, y - step * unit, 2, 1); drawRaw(g, xDinausor + 3 * unit, y - step * unit, 2, 1); step++; drawRaw(g, xDinausor, y - step * unit, 5, 1); step++; drawRaw(g, xDinausor - unit, y - step * unit, 6, 1); step++; drawRaw(g, xDinausor - 2 * unit, y - step * unit, 8, 1); step++; drawRaw(g, xDinausor - 3 * unit, y - step * unit, 10, 1); step++; drawRaw(g, xDinausor - 4 * unit, y - step * unit, 11, 1); drawRaw(g, xDinausor + (11 + 1 - 4) * unit, y - step * unit, 1, 1); step++; drawRaw(g, xDinausor - 4 * unit, y - step * unit, 3, 1); drawRaw(g, xDinausor + (5 - 4) * unit, y - step * unit, 8, 1); step++; drawRaw(g, xDinausor - 4 * unit, y - step * unit, 2, 1); drawRaw(g, xDinausor + (6 - 4) * unit, y - step * unit, 5, 1); step++; drawRaw(g, xDinausor - 4 * unit, y - step * unit, 1, 1); drawRaw(g, xDinausor + (7 - 4) * unit, y - step * unit, 4, 1); step++; drawRaw(g, xDinausor - 4 * unit, y - step * unit, 1, 1); drawRaw(g, xDinausor + (8 - 4) * unit, y - step * unit, 7, 1); step++; drawRaw(g, xDinausor + (8 - 4) * unit, y - step * unit, 4, 1); step++; drawRaw(g, xDinausor + (8 - 4) * unit, y - step * unit, 8, 1); step++; drawRaw(g, xDinausor + (8 - 4) * unit, y - step * unit, 2, 1); drawRaw(g, xDinausor + (11 - 4) * unit, y - step * unit, 5, 1); step++; drawRaw(g, xDinausor + (8 - 4) * unit, y - step * unit, 8, 1); step++; drawRaw(g, xDinausor + (9 - 4) * unit, y - step * unit, 6, 1); step++; } private void drawRaw(Graphics g, int Dinausor, int y, int w, int h) { Graphics2D sun16 = (Graphics2D) g; sun16.fillRect(Dinausor, y, w * unit, h * unit); } private void draw(Graphics g, int x, int y, int h, int p) { if (x <= currentDinosaurX && x + p >= currentDinosaurX && y <= currentDinosaurY) { gameOver(g); gameOver = true; return; } Graphics2D gcd = (Graphics2D) g; gcd.setPaint(colorCactus1); gcd.fillRect(x, y, p, h); Graphics2D gsd = (Graphics2D) g; gsd.setPaint(colorCactus2); gsd.fillRect(x + p, y, p, h); Graphics2D gssd = (Graphics2D) g; gssd.setPaint(colorCactus2); gssd.fillArc(x, y - p, p * 2, p * 2, 1, 90); Graphics2D gzssd = (Graphics2D) g; gzssd.setPaint(colorCactus1); gzssd.fillArc(x, y - p, p * 2, p * 2, 90, 90); Graphics2D ghssd = (Graphics2D) g; ghssd.setPaint(colorCactus1); ghssd.fillArc(x, y + h - p, p * 2, p * 2, 180, 90); Graphics2D ghzssd = (Graphics2D) g; ghzssd.setPaint(colorCactus2); ghzssd.fillArc(x, y + h - p, p * 2, p * 2, 270, 90); } private class DrawPanel extends JPanel { public DrawPanel() { MoveAction action = new MoveAction(\"onEnter\"); String ACTION_KEY = \"onEnter\"; KeyStroke W = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0); InputMap inputMap = getInputMap(WHEN_IN_FOCUSED_WINDOW); inputMap.put(W, ACTION_KEY); ActionMap actionMap = getActionMap(); actionMap.put(ACTION_KEY, action); } protected void paintComponent(Graphics g) { super.paintComponent(g); drawCactus(g); drawSun(g); drawSol(g, 100, 250, 180); drawDinausor(g, 400 - jumpY); if (gameOver) { gameOver(g); } } public Dimension getPreferredSize() { return new Dimension(D_W, D_H); } } private class MyGraph { int x_ = 10; int y_ = 100; int h_ = 60; int p_ = 10; } class MoveAction extends AbstractAction { public MoveAction(String name) { putValue(NAME, name); } public void actionPerformed(ActionEvent actionEvent) { onEnterPresses = true; drawPanel.repaint(); } } @Override public void keyTyped(KeyEvent e) { } @Override public void keyPressed(KeyEvent e) { if(e.getKeyCode() == KeyEvent.VK_SPACE) { if(gameOver){ gameOver = false; restartGame(getGraphics()); } } } @Override public void keyReleased(KeyEvent e) { } }","dependencies":[]}}
{"project_id":37,"chunk_id":0,"content":{"main_file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\HibernateConfiguration.java","main_file_content":"package com.jtspringproject.JtSpringProject; import java.util.Properties; import javax.sql.DataSource; import org.springframework.beans.factory.annotation.Value; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.jdbc.datasource.DriverManagerDataSource; import org.springframework.orm.hibernate5.HibernateTransactionManager; import org.springframework.orm.hibernate5.LocalSessionFactoryBean; import org.springframework.transaction.annotation.EnableTransactionManagement; @Configuration @EnableTransactionManagement public class HibernateConfiguration { @Value(\"${db.driver}\") private String DRIVER; @Value(\"${db.password}\") private String PASSWORD; @Value(\"${db.url}\") private String URL; @Value(\"${db.username}\") private String USERNAME; @Value(\"${hibernate.dialect}\") private String DIALECT; @Value(\"${hibernate.show_sql}\") private String SHOW_SQL; @Value(\"${hibernate.hbm2ddl.auto}\") private String HBM2DDL_AUTO; @Value(\"${entitymanager.packagesToScan}\") private String PACKAGES_TO_SCAN; @Bean public DataSource dataSource() { DriverManagerDataSource dataSource = new DriverManagerDataSource(); dataSource.setDriverClassName(DRIVER); dataSource.setUrl(URL); dataSource.setUsername(USERNAME); dataSource.setPassword(PASSWORD); return dataSource; } @Bean public LocalSessionFactoryBean sessionFactory() { LocalSessionFactoryBean sessionFactory = new LocalSessionFactoryBean(); sessionFactory.setDataSource(dataSource()); sessionFactory.setPackagesToScan(PACKAGES_TO_SCAN); Properties hibernateProperties = new Properties(); hibernateProperties.put(\"hibernate.dialect\", DIALECT); hibernateProperties.put(\"hibernate.show_sql\", SHOW_SQL); hibernateProperties.put(\"hibernate.hbm2ddl.auto\", HBM2DDL_AUTO); sessionFactory.setHibernateProperties(hibernateProperties); return sessionFactory; } @Bean public HibernateTransactionManager transactionManager() { HibernateTransactionManager transactionManager = new HibernateTransactionManager(); transactionManager.setSessionFactory(sessionFactory().getObject()); return transactionManager; } }","dependencies":[]}}
{"project_id":37,"chunk_id":0,"content":{"main_file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\JtSpringProjectApplication.java","main_file_content":"package com.jtspringproject.JtSpringProject; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration; @SpringBootApplication(exclude = HibernateJpaAutoConfiguration.class) public class JtSpringProjectApplication { public static void main(String[] args) { SpringApplication.run(JtSpringProjectApplication.class, args); } }","dependencies":[]}}
{"project_id":37,"chunk_id":0,"content":{"main_file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\configuration\\SecurityConfiguration.java","main_file_content":"package com.jtspringproject.JtSpringProject.configuration; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.core.annotation.Order; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.core.userdetails.UserDetailsService; import org.springframework.security.core.userdetails.UsernameNotFoundException; import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; import org.springframework.security.crypto.password.PasswordEncoder; import org.springframework.security.web.SecurityFilterChain; import org.springframework.security.web.util.matcher.AntPathRequestMatcher; import com.jtspringproject.JtSpringProject.models.User; import com.jtspringproject.JtSpringProject.services.userService; @Configuration public class SecurityConfiguration { userService UserService; public SecurityConfiguration(userService UserService) { this.UserService = UserService; } @Configuration @Order(1) public static class AdminConfigurationAdapter{ @Bean SecurityFilterChain adminFilterChain(HttpSecurity http) throws Exception { http.antMatcher(\"/admin/**\") .authorizeHttpRequests(requests -> requests .requestMatchers(new AntPathRequestMatcher(\"/admin/login\")).permitAll() .requestMatchers(new AntPathRequestMatcher(\"/admin/**\")).hasRole(\"ADMIN\") ) .formLogin(login -> login .loginPage(\"/admin/login\") .loginProcessingUrl(\"/admin/loginvalidate\") .successHandler((request, response, authentication) -> { response.sendRedirect(\"/admin/\"); }) .failureHandler((request, response, exception) -> { response.sendRedirect(\"/admin/login?error=true\"); })) .logout(logout -> logout.logoutUrl(\"/admin/logout\") .logoutSuccessUrl(\"/admin/login\") .deleteCookies(\"JSESSIONID\")) .exceptionHandling(exception -> exception .accessDeniedPage(\"/403\") ); http.csrf(csrf -> csrf.disable()); return http.build(); } } @Configuration @Order(2) public static class UserConfigurationAdapter{ @Bean SecurityFilterChain userFilterChain(HttpSecurity http) throws Exception { http.authorizeHttpRequests(requests -> requests .antMatchers(\"/login\", \"/register\", \"/newuserregister\" ,\"/test\", \"/test2\").permitAll() .antMatchers(\"/**\").hasRole(\"USER\")) .formLogin(login -> login .loginPage(\"/login\") .loginProcessingUrl(\"/userloginvalidate\") .successHandler((request, response, authentication) -> { response.sendRedirect(\"/\"); }) .failureHandler((request, response, exception) -> { response.sendRedirect(\"/login?error=true\"); })) .logout(logout -> logout.logoutUrl(\"/logout\") .logoutSuccessUrl(\"/login\") .deleteCookies(\"JSESSIONID\")) .exceptionHandling(exception -> exception .accessDeniedPage(\"/403\") ); http.csrf(csrf -> csrf.disable()); return http.build(); } } @Bean UserDetailsService userDetailsService() { return username -> { User user = UserService.getUserByUsername(username); if(user == null) { throw new UsernameNotFoundException(\"User with username \" + username + \" not found.\"); } String role = user.getRole().equals(\"ROLE_ADMIN\") ? \"ADMIN\":\"USER\"; return org.springframework.security.core.userdetails.User .withUsername(username) .passwordEncoder(input->passwordEncoder().encode(input)) .password(user.getPassword()) .roles(role) .build(); }; } @Bean PasswordEncoder passwordEncoder() { return new BCryptPasswordEncoder(); } }","dependencies":[{"file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\models\\User.java","file_content":"package com.jtspringproject.JtSpringProject.models; import java.util.List; import javax.persistence.CascadeType; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.OneToMany; import javax.persistence.Table; @Entity(name=\"CUSTOMER\") @Table public class User { @Id @GeneratedValue(strategy=GenerationType.IDENTITY) private int id; @Column(unique = true) private String username; private String email; private String password; private String role; private String address; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public String getRole() { return role; } public void setRole(String role) { this.role = role; } public String getAddress() { return address; } public void setAddress(String address) { this.address = address; } }"},{"file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\services\\userService.java","file_content":"package com.jtspringproject.JtSpringProject.services; import com.jtspringproject.JtSpringProject.models.*; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.dao.DataIntegrityViolationException; import org.springframework.stereotype.Service; import com.jtspringproject.JtSpringProject.dao.userDao; import com.jtspringproject.JtSpringProject.models.User; @Service public class userService { @Autowired private userDao userDao; public List<User> getUsers(){ return this.userDao.getAllUser(); } public User addUser(User user) { try { return this.userDao.saveUser(user); } catch (DataIntegrityViolationException e) { throw new RuntimeException(\"Add user error\"); } } public User checkLogin(String username,String password) { return this.userDao.getUser(username, password); } public boolean checkUserExists(String username) { return this.userDao.userExists(username); } public User getUserByUsername(String username) { return userDao.getUserByUsername(username); } }"}]}}
{"project_id":37,"chunk_id":0,"content":{"main_file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\controller\\AdminController.java","main_file_content":"package com.jtspringproject.JtSpringProject.controller; import java.sql.Connection; import java.sql.DriverManager; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.security.authentication.UsernamePasswordAuthenticationToken; import org.springframework.security.core.Authentication; import org.springframework.security.core.context.SecurityContextHolder; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.servlet.ModelAndView; import com.jtspringproject.JtSpringProject.models.Category; import com.jtspringproject.JtSpringProject.models.Product; import com.jtspringproject.JtSpringProject.models.User; import com.jtspringproject.JtSpringProject.services.categoryService; import com.jtspringproject.JtSpringProject.services.productService; import com.jtspringproject.JtSpringProject.services.userService; @Controller @RequestMapping(\"/admin\") public class AdminController { private final userService userService; private final categoryService categoryService; private final productService productService; @Autowired public AdminController(userService userService, categoryService categoryService, productService productService) { this.userService = userService; this.categoryService = categoryService; this.productService = productService; } @GetMapping(\"/index\") public String index(Model model) { String username = SecurityContextHolder.getContext().getAuthentication().getName(); model.addAttribute(\"username\", username); return \"index\"; } @GetMapping(\"login\") public ModelAndView adminlogin(@RequestParam(required = false) String error) { ModelAndView mv = new ModelAndView(\"adminlogin\"); if (\"true\".equals(error)) { mv.addObject(\"msg\", \"Invalid username or password. Please try again.\"); } return mv; } @GetMapping( value={\"/\",\"Dashboard\"}) public ModelAndView adminHome(Model model) { Authentication authentication = SecurityContextHolder.getContext().getAuthentication(); ModelAndView mv = new ModelAndView(\"adminHome\"); mv.addObject(\"admin\", authentication.getName()); return mv; } @GetMapping(\"categories\") public ModelAndView getcategory() { ModelAndView mView = new ModelAndView(\"categories\"); List<Category> categories = this.categoryService.getCategories(); mView.addObject(\"categories\", categories); return mView; } @PostMapping(\"/categories\") public String addCategory(@RequestParam(\"categoryname\") String category_name) { System.out.println(category_name); Category category = this.categoryService.addCategory(category_name); if(category.getName().equals(category_name)) { return \"redirect:categories\"; }else { return \"redirect:categories\"; } } @GetMapping(\"categories/delete\") public String removeCategoryDb(@RequestParam(\"id\") int id) { this.categoryService.deleteCategory(id); return \"redirect:/admin/categories\"; } @GetMapping(\"categories/update\") public String updateCategory(@RequestParam(\"categoryid\") int id, @RequestParam(\"categoryname\") String categoryname) { Category category = this.categoryService.updateCategory(id, categoryname); return \"redirect:/admin/categories\"; } @GetMapping(\"products\") public ModelAndView getproduct() { ModelAndView mView = new ModelAndView(\"products\"); List<Product> products = this.productService.getProducts(); if (products.isEmpty()) { mView.addObject(\"msg\", \"No products are available\"); } else { mView.addObject(\"products\", products); } return mView; } @GetMapping(\"products/add\") public ModelAndView addProduct() { ModelAndView mView = new ModelAndView(\"productsAdd\"); List<Category> categories = this.categoryService.getCategories(); mView.addObject(\"categories\",categories); return mView; } @RequestMapping(value = \"products/add\",method=RequestMethod.POST) public String addProduct(@RequestParam(\"name\") String name,@RequestParam(\"categoryid\") int categoryId ,@RequestParam(\"price\") int price,@RequestParam(\"weight\") int weight, @RequestParam(\"quantity\")int quantity,@RequestParam(\"description\") String description,@RequestParam(\"productImage\") String productImage) { System.out.println(categoryId); Category category = this.categoryService.getCategory(categoryId); Product product = new Product(); product.setId(categoryId); product.setName(name); product.setCategory(category); product.setDescription(description); product.setPrice(price); product.setImage(productImage); product.setWeight(weight); product.setQuantity(quantity); this.productService.addProduct(product); return \"redirect:/admin/products\"; } @GetMapping(\"products/update/{id}\") public ModelAndView updateproduct(@PathVariable(\"id\") int id) { ModelAndView mView = new ModelAndView(\"productsUpdate\"); Product product = this.productService.getProduct(id); List<Category> categories = this.categoryService.getCategories(); mView.addObject(\"categories\",categories); mView.addObject(\"product\", product); return mView; } @RequestMapping(value = \"products/update/{id}\",method=RequestMethod.POST) public String updateProduct(@PathVariable(\"id\") int id ,@RequestParam(\"name\") String name,@RequestParam(\"categoryid\") int categoryId ,@RequestParam(\"price\") int price,@RequestParam(\"weight\") int weight, @RequestParam(\"quantity\")int quantity,@RequestParam(\"description\") String description,@RequestParam(\"productImage\") String productImage) { return \"redirect:/admin/products\"; } @GetMapping(\"products/delete\") public String removeProduct(@RequestParam(\"id\") int id) { this.productService.deleteProduct(id); return \"redirect:/admin/products\"; } @PostMapping(\"products\") public String postproduct() { return \"redirect:/admin/categories\"; } @GetMapping(\"customers\") public ModelAndView getCustomerDetail() { ModelAndView mView = new ModelAndView(\"displayCustomers\"); List<User> users = this.userService.getUsers(); mView.addObject(\"customers\", users); return mView; } @GetMapping(\"profileDisplay\") public String profileDisplay(Model model) { String displayusername,displaypassword,displayemail,displayaddress; try { Class.forName(\"com.mysql.jdbc.Driver\"); Connection con = DriverManager.getConnection(\"jdbc:mysql: PreparedStatement stmt = con.prepareStatement(\"select * from users where username = ?\"+\";\"); String username = SecurityContextHolder.getContext().getAuthentication().getName(); stmt.setString(1, username); ResultSet rst = stmt.executeQuery(); if(rst.next()) { int userid = rst.getInt(1); displayusername = rst.getString(2); displayemail = rst.getString(3); displaypassword = rst.getString(4); displayaddress = rst.getString(5); model.addAttribute(\"userid\",userid); model.addAttribute(\"username\",displayusername); model.addAttribute(\"email\",displayemail); model.addAttribute(\"password\",displaypassword); model.addAttribute(\"address\",displayaddress); } } catch(Exception e) { System.out.println(\"Exception:\"+e); } System.out.println(\"Hello\"); return \"updateProfile\"; } @RequestMapping(value = \"updateuser\",method=RequestMethod.POST) public String updateUserProfile(@RequestParam(\"userid\") int userid,@RequestParam(\"username\") String username, @RequestParam(\"email\") String email, @RequestParam(\"password\") String password, @RequestParam(\"address\") String address) { try { Class.forName(\"com.mysql.jdbc.Driver\"); Connection con = DriverManager.getConnection(\"jdbc:mysql: PreparedStatement pst = con.prepareStatement(\"update users set username= ?,email = ?,password= ?, address= ? where uid = ?;\"); pst.setString(1, username); pst.setString(2, email); pst.setString(3, password); pst.setString(4, address); pst.setInt(5, userid); int i = pst.executeUpdate(); Authentication newAuthentication = new UsernamePasswordAuthenticationToken( username, password, SecurityContextHolder.getContext().getAuthentication().getAuthorities()); SecurityContextHolder.getContext().setAuthentication(newAuthentication); } catch(Exception e) { System.out.println(\"Exception:\"+e); } return \"redirect:index\"; } }","dependencies":[{"file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\models\\Category.java","file_content":"package com.jtspringproject.JtSpringProject.models; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; @Entity(name=\"CATEGORY\") public class Category { @Id @Column(name = \"category_id\") @GeneratedValue(strategy=GenerationType.AUTO) private int id; private String name; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } }"},{"file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\models\\Product.java","file_content":"package com.jtspringproject.JtSpringProject.models; import javax.persistence.CascadeType; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.JoinColumn; import javax.persistence.ManyToOne; import javax.persistence.OneToOne; @Entity(name=\"PRODUCT\") public class Product { @Id @Column(name = \"product_id\") @GeneratedValue(strategy=GenerationType.AUTO) private int id; private String name; private String image; @OneToOne(cascade = CascadeType.ALL) @JoinColumn(name = \"category_id\",referencedColumnName = \"category_id\") private Category category; private int quantity; private int price; private int weight; private String description; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getImage() { return image; } public void setImage(String image) { this.image = image; } public Category getCategory() { return category; } public void setCategory(Category category) { this.category = category; } public int getQuantity() { return quantity; } public void setQuantity(int quantity) { this.quantity = quantity; } public int getPrice() { return price; } public void setPrice(int price) { this.price = price; } public int getWeight() { return weight; } public void setWeight(int weight) { this.weight = weight; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } @ManyToOne @JoinColumn(name = \"customer_id\") private User customer; }"},{"file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\models\\User.java","file_content":"package com.jtspringproject.JtSpringProject.models; import java.util.List; import javax.persistence.CascadeType; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.OneToMany; import javax.persistence.Table; @Entity(name=\"CUSTOMER\") @Table public class User { @Id @GeneratedValue(strategy=GenerationType.IDENTITY) private int id; @Column(unique = true) private String username; private String email; private String password; private String role; private String address; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public String getRole() { return role; } public void setRole(String role) { this.role = role; } public String getAddress() { return address; } public void setAddress(String address) { this.address = address; } }"},{"file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\services\\categoryService.java","file_content":"package com.jtspringproject.JtSpringProject.services; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import com.jtspringproject.JtSpringProject.dao.categoryDao; import com.jtspringproject.JtSpringProject.models.Category; import net.bytebuddy.dynamic.DynamicType.Builder.InnerTypeDefinition; @Service public class categoryService { @Autowired private categoryDao categoryDao; public Category addCategory(String name) { return this.categoryDao.addCategory(name); } public List<Category> getCategories(){ return this.categoryDao.getCategories(); } public Boolean deleteCategory(int id) { return this.categoryDao.deletCategory(id); } public Category updateCategory(int id,String name) { return this.categoryDao.updateCategory(id, name); } public Category getCategory(int id) { return this.categoryDao.getCategory(id); } }"},{"file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\services\\productService.java","file_content":"package com.jtspringproject.JtSpringProject.services; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import com.jtspringproject.JtSpringProject.dao.productDao; import com.jtspringproject.JtSpringProject.models.Product; @Service public class productService { @Autowired private productDao productDao; public List<Product> getProducts(){ return this.productDao.getProducts(); } public Product addProduct(Product product) { return this.productDao.addProduct(product); } public Product getProduct(int id) { return this.productDao.getProduct(id); } public Product updateProduct(int id,Product product){ product.setId(id); return this.productDao.updateProduct(product); } public boolean deleteProduct(int id) { return this.productDao.deletProduct(id); } }"},{"file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\services\\userService.java","file_content":"package com.jtspringproject.JtSpringProject.services; import com.jtspringproject.JtSpringProject.models.*; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.dao.DataIntegrityViolationException; import org.springframework.stereotype.Service; import com.jtspringproject.JtSpringProject.dao.userDao; import com.jtspringproject.JtSpringProject.models.User; @Service public class userService { @Autowired private userDao userDao; public List<User> getUsers(){ return this.userDao.getAllUser(); } public User addUser(User user) { try { return this.userDao.saveUser(user); } catch (DataIntegrityViolationException e) { throw new RuntimeException(\"Add user error\"); } } public User checkLogin(String username,String password) { return this.userDao.getUser(username, password); } public boolean checkUserExists(String username) { return this.userDao.userExists(username); } public User getUserByUsername(String username) { return userDao.getUserByUsername(username); } }"}]}}
{"project_id":37,"chunk_id":0,"content":{"main_file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\controller\\ErrorController.java","main_file_content":"package com.jtspringproject.JtSpringProject.controller; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; @Controller public class ErrorController { @GetMapping(\"/403\") public String accessDenied() { return \"403\"; } }","dependencies":[]}}
{"project_id":37,"chunk_id":0,"content":{"main_file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\controller\\UserController.java","main_file_content":"package com.jtspringproject.JtSpringProject.controller; import com.jtspringproject.JtSpringProject.models.Cart; import com.jtspringproject.JtSpringProject.models.Product; import com.jtspringproject.JtSpringProject.models.User; import java.io.Console; import java.sql.Connection; import java.sql.DriverManager; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.Statement; import java.util.ArrayList; import java.util.List; import javax.servlet.http.HttpServletRequest; import com.jtspringproject.JtSpringProject.services.cartService; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.security.core.context.SecurityContextHolder; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.*; import org.springframework.web.servlet.ModelAndView; import com.jtspringproject.JtSpringProject.services.userService; import com.jtspringproject.JtSpringProject.services.productService; import com.jtspringproject.JtSpringProject.services.cartService; @Controller public class UserController{ private final userService userService; private final productService productService; @Autowired public UserController(userService userService, productService productService) { this.userService = userService; this.productService = productService; } @GetMapping(\"/register\") public String registerUser() { return \"register\"; } @GetMapping(\"/buy\") public String buy() { return \"buy\"; } @GetMapping(\"/login\") public ModelAndView userlogin(@RequestParam(required = false) String error) { ModelAndView mv = new ModelAndView(\"userLogin\"); if (\"true\".equals(error)) { mv.addObject(\"msg\", \"Please enter correct email and password\"); } return mv; } @GetMapping(\"/\") public ModelAndView indexPage() { ModelAndView mView = new ModelAndView(\"index\"); String username = SecurityContextHolder.getContext().getAuthentication().getName(); mView.addObject(\"username\", username); List<Product> products = this.productService.getProducts(); if (products.isEmpty()) { mView.addObject(\"msg\", \"No products are available\"); } else { mView.addObject(\"products\", products); } return mView; } @GetMapping(\"/user/products\") public ModelAndView getproduct() { ModelAndView mView = new ModelAndView(\"uproduct\"); List<Product> products = this.productService.getProducts(); if(products.isEmpty()) { mView.addObject(\"msg\",\"No products are available\"); }else { mView.addObject(\"products\",products); } return mView; } @RequestMapping(value = \"newuserregister\", method = RequestMethod.POST) public ModelAndView newUseRegister(@ModelAttribute User user) { boolean exists = this.userService.checkUserExists(user.getUsername()); if(!exists) { System.out.println(user.getEmail()); user.setRole(\"ROLE_NORMAL\"); this.userService.addUser(user); System.out.println(\"New user created: \" + user.getUsername()); ModelAndView mView = new ModelAndView(\"userLogin\"); return mView; } else { System.out.println(\"New user not created - username taken: \" + user.getUsername()); ModelAndView mView = new ModelAndView(\"register\"); mView.addObject(\"msg\", user.getUsername() + \" is taken. Please choose a different username.\"); return mView; } } @GetMapping(\"/profileDisplay\") public String profileDisplay(Model model, HttpServletRequest request) { String username = SecurityContextHolder.getContext().getAuthentication().getName(); User user = userService.getUserByUsername(username); if (user != null) { model.addAttribute(\"userid\", user.getId()); model.addAttribute(\"username\", user.getUsername()); model.addAttribute(\"email\", user.getEmail()); model.addAttribute(\"password\", user.getPassword()); model.addAttribute(\"address\", user.getAddress()); } else { model.addAttribute(\"msg\", \"User not found\"); } return \"updateProfile\"; } @GetMapping(\"/test\") public String Test(Model model) { System.out.println(\"test page\"); model.addAttribute(\"author\",\"jay gajera\"); model.addAttribute(\"id\",40); List<String> friends = new ArrayList<String>(); model.addAttribute(\"f\",friends); friends.add(\"xyz\"); friends.add(\"abc\"); return \"test\"; } @GetMapping(\"/test2\") public ModelAndView Test2() { System.out.println(\"test page\"); ModelAndView mv=new ModelAndView(); mv.addObject(\"name\",\"jay gajera 17\"); mv.addObject(\"id\",40); mv.setViewName(\"test2\"); List<Integer> list=new ArrayList<Integer>(); list.add(10); list.add(25); mv.addObject(\"marks\",list); return mv; } }","dependencies":[{"file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\models\\Product.java","file_content":"package com.jtspringproject.JtSpringProject.models; import javax.persistence.CascadeType; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.JoinColumn; import javax.persistence.ManyToOne; import javax.persistence.OneToOne; @Entity(name=\"PRODUCT\") public class Product { @Id @Column(name = \"product_id\") @GeneratedValue(strategy=GenerationType.AUTO) private int id; private String name; private String image; @OneToOne(cascade = CascadeType.ALL) @JoinColumn(name = \"category_id\",referencedColumnName = \"category_id\") private Category category; private int quantity; private int price; private int weight; private String description; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getImage() { return image; } public void setImage(String image) { this.image = image; } public Category getCategory() { return category; } public void setCategory(Category category) { this.category = category; } public int getQuantity() { return quantity; } public void setQuantity(int quantity) { this.quantity = quantity; } public int getPrice() { return price; } public void setPrice(int price) { this.price = price; } public int getWeight() { return weight; } public void setWeight(int weight) { this.weight = weight; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } @ManyToOne @JoinColumn(name = \"customer_id\") private User customer; }"},{"file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\models\\User.java","file_content":"package com.jtspringproject.JtSpringProject.models; import java.util.List; import javax.persistence.CascadeType; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.OneToMany; import javax.persistence.Table; @Entity(name=\"CUSTOMER\") @Table public class User { @Id @GeneratedValue(strategy=GenerationType.IDENTITY) private int id; @Column(unique = true) private String username; private String email; private String password; private String role; private String address; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public String getRole() { return role; } public void setRole(String role) { this.role = role; } public String getAddress() { return address; } public void setAddress(String address) { this.address = address; } }"},{"file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\services\\productService.java","file_content":"package com.jtspringproject.JtSpringProject.services; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import com.jtspringproject.JtSpringProject.dao.productDao; import com.jtspringproject.JtSpringProject.models.Product; @Service public class productService { @Autowired private productDao productDao; public List<Product> getProducts(){ return this.productDao.getProducts(); } public Product addProduct(Product product) { return this.productDao.addProduct(product); } public Product getProduct(int id) { return this.productDao.getProduct(id); } public Product updateProduct(int id,Product product){ product.setId(id); return this.productDao.updateProduct(product); } public boolean deleteProduct(int id) { return this.productDao.deletProduct(id); } }"},{"file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\services\\userService.java","file_content":"package com.jtspringproject.JtSpringProject.services; import com.jtspringproject.JtSpringProject.models.*; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.dao.DataIntegrityViolationException; import org.springframework.stereotype.Service; import com.jtspringproject.JtSpringProject.dao.userDao; import com.jtspringproject.JtSpringProject.models.User; @Service public class userService { @Autowired private userDao userDao; public List<User> getUsers(){ return this.userDao.getAllUser(); } public User addUser(User user) { try { return this.userDao.saveUser(user); } catch (DataIntegrityViolationException e) { throw new RuntimeException(\"Add user error\"); } } public User checkLogin(String username,String password) { return this.userDao.getUser(username, password); } public boolean checkUserExists(String username) { return this.userDao.userExists(username); } public User getUserByUsername(String username) { return userDao.getUserByUsername(username); } }"}]}}
{"project_id":37,"chunk_id":0,"content":{"main_file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\dao\\cartDao.java","main_file_content":"package com.jtspringproject.JtSpringProject.dao; import java.util.List; import com.jtspringproject.JtSpringProject.models.Cart; import com.jtspringproject.JtSpringProject.models.Category; import org.hibernate.SessionFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Repository; import org.springframework.transaction.annotation.Transactional; @Repository public class cartDao { @Autowired private SessionFactory sessionFactory; public void setSessionFactory(SessionFactory sf) { this.sessionFactory = sf; } @Transactional public Cart addCart(Cart cart) { this.sessionFactory.getCurrentSession().save(cart); return cart; } @Transactional public List<Cart> getCarts() { return this.sessionFactory.getCurrentSession().createQuery(\"from CART\").list(); } @Transactional public void updateCart(Cart cart) { this.sessionFactory.getCurrentSession().update(cart); } @Transactional public void deleteCart(Cart cart) { this.sessionFactory.getCurrentSession().delete(cart); } }","dependencies":[{"file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\models\\Cart.java","file_content":"package com.jtspringproject.JtSpringProject.models; import javax.persistence.*; import java.util.ArrayList; import java.util.List; @Entity(name=\"CART\") public class Cart { @Id @GeneratedValue(strategy = GenerationType.AUTO) private int id; @ManyToOne @JoinColumn(name=\"customer_id\") private User customer; public Cart() { } public int getId() { return id; } public void setId(int id) { this.id = id; } public User getCustomer() { return customer; } public void setCustomer(User customer) { this.customer = customer; } }"}]}}
{"project_id":37,"chunk_id":0,"content":{"main_file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\dao\\cartProductDao.java","main_file_content":"package com.jtspringproject.JtSpringProject.dao; import com.jtspringproject.JtSpringProject.models.Cart; import com.jtspringproject.JtSpringProject.models.CartProduct; import com.jtspringproject.JtSpringProject.models.Product; import org.hibernate.SessionFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Repository; import org.springframework.transaction.annotation.Transactional; import java.util.List; @Repository public class cartProductDao { @Autowired private SessionFactory sessionFactory; public void setSessionFactory(SessionFactory sf) { this.sessionFactory = sf; } @Transactional public CartProduct addCartProduct(CartProduct cartProduct) { this.sessionFactory.getCurrentSession().save(cartProduct); return cartProduct; } @Transactional public List<CartProduct> getCartProducts() { return this.sessionFactory.getCurrentSession().createQuery(\"from CART_PRODUCT \").list(); } @Transactional public List<Product> getProductByCartID(Integer cart_id) { String sql = \"SELECT product_id FROM cart_product WHERE cart_id = :cart_id\"; List<Integer> productIds = this.sessionFactory.getCurrentSession() .createNativeQuery(sql) .setParameter(\"cart_id\", cart_id) .list(); sql = \"SELECT * FROM product WHERE id IN (:product_ids)\"; return this.sessionFactory.getCurrentSession() .createNativeQuery(sql, Product.class) .setParameterList(\"product_ids\", productIds) .list(); } @Transactional public void updateCartProduct(CartProduct cartProduct) { this.sessionFactory.getCurrentSession().update(cartProduct); } @Transactional public void deleteCartProduct(CartProduct cartProduct) { this.sessionFactory.getCurrentSession().delete(cartProduct); } }","dependencies":[{"file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\models\\CartProduct.java","file_content":"package com.jtspringproject.JtSpringProject.models; import javax.persistence.*; import java.util.ArrayList; import java.util.List; @Entity(name=\"CART_PRODUCT\") public class CartProduct { @Id @GeneratedValue(strategy = GenerationType.AUTO) private int id; @ManyToOne @JoinColumn(name=\"cart_id\") private Cart cart; @ManyToOne @JoinTable(name=\"product_id\") private Product product; public CartProduct() { product = null; } public CartProduct(Cart cart, Product product) { this.cart=cart; this.product = product; } public int getId() { return id; } public void setId(int id) { this.id = id; } public Cart getCart() { return cart; } public void setCart(Cart cart) { this.cart = cart; } public Product getProduct() { return product; } public void setProduct(Product product) { this.product = product; } }"},{"file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\models\\Product.java","file_content":"package com.jtspringproject.JtSpringProject.models; import javax.persistence.CascadeType; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.JoinColumn; import javax.persistence.ManyToOne; import javax.persistence.OneToOne; @Entity(name=\"PRODUCT\") public class Product { @Id @Column(name = \"product_id\") @GeneratedValue(strategy=GenerationType.AUTO) private int id; private String name; private String image; @OneToOne(cascade = CascadeType.ALL) @JoinColumn(name = \"category_id\",referencedColumnName = \"category_id\") private Category category; private int quantity; private int price; private int weight; private String description; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getImage() { return image; } public void setImage(String image) { this.image = image; } public Category getCategory() { return category; } public void setCategory(Category category) { this.category = category; } public int getQuantity() { return quantity; } public void setQuantity(int quantity) { this.quantity = quantity; } public int getPrice() { return price; } public void setPrice(int price) { this.price = price; } public int getWeight() { return weight; } public void setWeight(int weight) { this.weight = weight; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } @ManyToOne @JoinColumn(name = \"customer_id\") private User customer; }"}]}}
{"project_id":37,"chunk_id":0,"content":{"main_file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\dao\\categoryDao.java","main_file_content":"package com.jtspringproject.JtSpringProject.dao; import java.util.List; import org.hibernate.Session; import org.hibernate.SessionFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Repository; import org.springframework.transaction.annotation.Transactional; import com.jtspringproject.JtSpringProject.models.Category; @Repository public class categoryDao { @Autowired private SessionFactory sessionFactory; public void setSessionFactory(SessionFactory sf) { this.sessionFactory = sf; } @Transactional public Category addCategory(String name) { Category category = new Category(); category.setName(name); this.sessionFactory.getCurrentSession().saveOrUpdate(category); return category; } @Transactional public List<Category> getCategories() { return this.sessionFactory.getCurrentSession().createQuery(\"from CATEGORY\").list(); } @Transactional public Boolean deletCategory(int id) { Session session = this.sessionFactory.getCurrentSession(); Object persistanceInstance = session.load(Category.class, id); if (persistanceInstance != null) { session.delete(persistanceInstance); return true; } return false; } @Transactional public Category updateCategory(int id, String name) { Category category = this.sessionFactory.getCurrentSession().get(Category.class, id); category.setName(name); this.sessionFactory.getCurrentSession().update(category); return category; } @Transactional public Category getCategory(int id) { return this.sessionFactory.getCurrentSession().get(Category.class,id); } }","dependencies":[{"file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\models\\Category.java","file_content":"package com.jtspringproject.JtSpringProject.models; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; @Entity(name=\"CATEGORY\") public class Category { @Id @Column(name = \"category_id\") @GeneratedValue(strategy=GenerationType.AUTO) private int id; private String name; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } }"}]}}
{"project_id":37,"chunk_id":0,"content":{"main_file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\dao\\productDao.java","main_file_content":"package com.jtspringproject.JtSpringProject.dao; import java.util.List; import org.hibernate.Session; import org.hibernate.SessionFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Repository; import org.springframework.transaction.annotation.Transactional; import com.jtspringproject.JtSpringProject.models.Category; import com.jtspringproject.JtSpringProject.models.Product; @Repository public class productDao { @Autowired private SessionFactory sessionFactory; public void setSessionFactory(SessionFactory sf) { this.sessionFactory = sf; } @Transactional public List<Product> getProducts(){ return this.sessionFactory.getCurrentSession().createQuery(\"from PRODUCT\").list(); } @Transactional public Product addProduct(Product product) { this.sessionFactory.getCurrentSession().save(product); return product; } @Transactional public Product getProduct(int id) { return this.sessionFactory.getCurrentSession().get(Product.class, id); } public Product updateProduct(Product product){ this.sessionFactory.getCurrentSession().update(String.valueOf(Product.class),product); return product; } @Transactional public Boolean deletProduct(int id) { Session session = this.sessionFactory.getCurrentSession(); Object persistanceInstance = session.load(Product.class, id); if (persistanceInstance != null) { session.delete(persistanceInstance); return true; } return false; } }","dependencies":[{"file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\models\\Product.java","file_content":"package com.jtspringproject.JtSpringProject.models; import javax.persistence.CascadeType; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.JoinColumn; import javax.persistence.ManyToOne; import javax.persistence.OneToOne; @Entity(name=\"PRODUCT\") public class Product { @Id @Column(name = \"product_id\") @GeneratedValue(strategy=GenerationType.AUTO) private int id; private String name; private String image; @OneToOne(cascade = CascadeType.ALL) @JoinColumn(name = \"category_id\",referencedColumnName = \"category_id\") private Category category; private int quantity; private int price; private int weight; private String description; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getImage() { return image; } public void setImage(String image) { this.image = image; } public Category getCategory() { return category; } public void setCategory(Category category) { this.category = category; } public int getQuantity() { return quantity; } public void setQuantity(int quantity) { this.quantity = quantity; } public int getPrice() { return price; } public void setPrice(int price) { this.price = price; } public int getWeight() { return weight; } public void setWeight(int weight) { this.weight = weight; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } @ManyToOne @JoinColumn(name = \"customer_id\") private User customer; }"}]}}
{"project_id":37,"chunk_id":0,"content":{"main_file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\dao\\userDao.java","main_file_content":"package com.jtspringproject.JtSpringProject.dao; import java.util.List; import javax.persistence.NoResultException; import javax.sound.midi.Soundbank; import org.hibernate.Session; import org.hibernate.SessionFactory; import org.hibernate.query.Query; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Repository; import org.springframework.transaction.annotation.Transactional; import com.jtspringproject.JtSpringProject.models.User; @Repository public class userDao { @Autowired private SessionFactory sessionFactory; public void setSessionFactory(SessionFactory sf) { this.sessionFactory = sf; } @Transactional public List<User> getAllUser() { Session session = this.sessionFactory.getCurrentSession(); List<User> userList = session.createQuery(\"from CUSTOMER\").list(); return userList; } @Transactional public User saveUser(User user) { this.sessionFactory.getCurrentSession().saveOrUpdate(user); System.out.println(\"User added\" + user.getId()); return user; } @Transactional public User getUser(String username,String password) { Query query = sessionFactory.getCurrentSession().createQuery(\"from CUSTOMER where username = :username\"); query.setParameter(\"username\",username); try { User user = (User) query.getSingleResult(); System.out.println(user.getPassword()); if(password.equals(user.getPassword())) { return user; }else { return new User(); } }catch(Exception e){ System.out.println(e.getMessage()); User user = new User(); return user; } } @Transactional public boolean userExists(String username) { Query query = sessionFactory.getCurrentSession().createQuery(\"from CUSTOMER where username = :username\"); query.setParameter(\"username\",username); return !query.getResultList().isEmpty(); } @Transactional public User getUserByUsername(String username) { Query<User> query = sessionFactory.getCurrentSession().createQuery(\"from User where username = :username\", User.class); query.setParameter(\"username\", username); try { return query.getSingleResult(); } catch (Exception e) { System.out.println(e.getMessage()); return null; } } }","dependencies":[{"file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\models\\User.java","file_content":"package com.jtspringproject.JtSpringProject.models; import java.util.List; import javax.persistence.CascadeType; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.OneToMany; import javax.persistence.Table; @Entity(name=\"CUSTOMER\") @Table public class User { @Id @GeneratedValue(strategy=GenerationType.IDENTITY) private int id; @Column(unique = true) private String username; private String email; private String password; private String role; private String address; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public String getRole() { return role; } public void setRole(String role) { this.role = role; } public String getAddress() { return address; } public void setAddress(String address) { this.address = address; } }"}]}}
{"project_id":37,"chunk_id":0,"content":{"main_file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\models\\Cart.java","main_file_content":"package com.jtspringproject.JtSpringProject.models; import javax.persistence.*; import java.util.ArrayList; import java.util.List; @Entity(name=\"CART\") public class Cart { @Id @GeneratedValue(strategy = GenerationType.AUTO) private int id; @ManyToOne @JoinColumn(name=\"customer_id\") private User customer; public Cart() { } public int getId() { return id; } public void setId(int id) { this.id = id; } public User getCustomer() { return customer; } public void setCustomer(User customer) { this.customer = customer; } }","dependencies":[{"file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\models\\User.java","file_content":"package com.jtspringproject.JtSpringProject.models; import java.util.List; import javax.persistence.CascadeType; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.OneToMany; import javax.persistence.Table; @Entity(name=\"CUSTOMER\") @Table public class User { @Id @GeneratedValue(strategy=GenerationType.IDENTITY) private int id; @Column(unique = true) private String username; private String email; private String password; private String role; private String address; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public String getRole() { return role; } public void setRole(String role) { this.role = role; } public String getAddress() { return address; } public void setAddress(String address) { this.address = address; } }"}]}}
{"project_id":37,"chunk_id":0,"content":{"main_file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\models\\CartProduct.java","main_file_content":"package com.jtspringproject.JtSpringProject.models; import javax.persistence.*; import java.util.ArrayList; import java.util.List; @Entity(name=\"CART_PRODUCT\") public class CartProduct { @Id @GeneratedValue(strategy = GenerationType.AUTO) private int id; @ManyToOne @JoinColumn(name=\"cart_id\") private Cart cart; @ManyToOne @JoinTable(name=\"product_id\") private Product product; public CartProduct() { product = null; } public CartProduct(Cart cart, Product product) { this.cart=cart; this.product = product; } public int getId() { return id; } public void setId(int id) { this.id = id; } public Cart getCart() { return cart; } public void setCart(Cart cart) { this.cart = cart; } public Product getProduct() { return product; } public void setProduct(Product product) { this.product = product; } }","dependencies":[{"file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\models\\Cart.java","file_content":"package com.jtspringproject.JtSpringProject.models; import javax.persistence.*; import java.util.ArrayList; import java.util.List; @Entity(name=\"CART\") public class Cart { @Id @GeneratedValue(strategy = GenerationType.AUTO) private int id; @ManyToOne @JoinColumn(name=\"customer_id\") private User customer; public Cart() { } public int getId() { return id; } public void setId(int id) { this.id = id; } public User getCustomer() { return customer; } public void setCustomer(User customer) { this.customer = customer; } }"},{"file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\models\\Product.java","file_content":"package com.jtspringproject.JtSpringProject.models; import javax.persistence.CascadeType; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.JoinColumn; import javax.persistence.ManyToOne; import javax.persistence.OneToOne; @Entity(name=\"PRODUCT\") public class Product { @Id @Column(name = \"product_id\") @GeneratedValue(strategy=GenerationType.AUTO) private int id; private String name; private String image; @OneToOne(cascade = CascadeType.ALL) @JoinColumn(name = \"category_id\",referencedColumnName = \"category_id\") private Category category; private int quantity; private int price; private int weight; private String description; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getImage() { return image; } public void setImage(String image) { this.image = image; } public Category getCategory() { return category; } public void setCategory(Category category) { this.category = category; } public int getQuantity() { return quantity; } public void setQuantity(int quantity) { this.quantity = quantity; } public int getPrice() { return price; } public void setPrice(int price) { this.price = price; } public int getWeight() { return weight; } public void setWeight(int weight) { this.weight = weight; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } @ManyToOne @JoinColumn(name = \"customer_id\") private User customer; }"}]}}
{"project_id":37,"chunk_id":0,"content":{"main_file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\models\\Category.java","main_file_content":"package com.jtspringproject.JtSpringProject.models; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; @Entity(name=\"CATEGORY\") public class Category { @Id @Column(name = \"category_id\") @GeneratedValue(strategy=GenerationType.AUTO) private int id; private String name; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } }","dependencies":[]}}
{"project_id":37,"chunk_id":0,"content":{"main_file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\models\\Product.java","main_file_content":"package com.jtspringproject.JtSpringProject.models; import javax.persistence.CascadeType; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.JoinColumn; import javax.persistence.ManyToOne; import javax.persistence.OneToOne; @Entity(name=\"PRODUCT\") public class Product { @Id @Column(name = \"product_id\") @GeneratedValue(strategy=GenerationType.AUTO) private int id; private String name; private String image; @OneToOne(cascade = CascadeType.ALL) @JoinColumn(name = \"category_id\",referencedColumnName = \"category_id\") private Category category; private int quantity; private int price; private int weight; private String description; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getImage() { return image; } public void setImage(String image) { this.image = image; } public Category getCategory() { return category; } public void setCategory(Category category) { this.category = category; } public int getQuantity() { return quantity; } public void setQuantity(int quantity) { this.quantity = quantity; } public int getPrice() { return price; } public void setPrice(int price) { this.price = price; } public int getWeight() { return weight; } public void setWeight(int weight) { this.weight = weight; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } @ManyToOne @JoinColumn(name = \"customer_id\") private User customer; }","dependencies":[{"file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\models\\Category.java","file_content":"package com.jtspringproject.JtSpringProject.models; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; @Entity(name=\"CATEGORY\") public class Category { @Id @Column(name = \"category_id\") @GeneratedValue(strategy=GenerationType.AUTO) private int id; private String name; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } }"},{"file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\models\\User.java","file_content":"package com.jtspringproject.JtSpringProject.models; import java.util.List; import javax.persistence.CascadeType; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.OneToMany; import javax.persistence.Table; @Entity(name=\"CUSTOMER\") @Table public class User { @Id @GeneratedValue(strategy=GenerationType.IDENTITY) private int id; @Column(unique = true) private String username; private String email; private String password; private String role; private String address; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public String getRole() { return role; } public void setRole(String role) { this.role = role; } public String getAddress() { return address; } public void setAddress(String address) { this.address = address; } }"}]}}
{"project_id":37,"chunk_id":0,"content":{"main_file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\models\\User.java","main_file_content":"package com.jtspringproject.JtSpringProject.models; import java.util.List; import javax.persistence.CascadeType; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.OneToMany; import javax.persistence.Table; @Entity(name=\"CUSTOMER\") @Table public class User { @Id @GeneratedValue(strategy=GenerationType.IDENTITY) private int id; @Column(unique = true) private String username; private String email; private String password; private String role; private String address; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public String getRole() { return role; } public void setRole(String role) { this.role = role; } public String getAddress() { return address; } public void setAddress(String address) { this.address = address; } }","dependencies":[]}}
{"project_id":37,"chunk_id":0,"content":{"main_file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\services\\cartService.java","main_file_content":"package com.jtspringproject.JtSpringProject.services; import com.jtspringproject.JtSpringProject.dao.cartDao; import com.jtspringproject.JtSpringProject.models.Cart; import com.jtspringproject.JtSpringProject.models.Category; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import java.util.List; @Service public class cartService { @Autowired private cartDao cartDao; public Cart addCart(Cart cart) { return cartDao.addCart(cart); } public List<Cart> getCarts() { return this.cartDao.getCarts(); } public void updateCart(Cart cart) { cartDao.updateCart(cart); } public void deleteCart(Cart cart) { cartDao.deleteCart(cart); } }","dependencies":[{"file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\dao\\cartDao.java","file_content":"package com.jtspringproject.JtSpringProject.dao; import java.util.List; import com.jtspringproject.JtSpringProject.models.Cart; import com.jtspringproject.JtSpringProject.models.Category; import org.hibernate.SessionFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Repository; import org.springframework.transaction.annotation.Transactional; @Repository public class cartDao { @Autowired private SessionFactory sessionFactory; public void setSessionFactory(SessionFactory sf) { this.sessionFactory = sf; } @Transactional public Cart addCart(Cart cart) { this.sessionFactory.getCurrentSession().save(cart); return cart; } @Transactional public List<Cart> getCarts() { return this.sessionFactory.getCurrentSession().createQuery(\"from CART\").list(); } @Transactional public void updateCart(Cart cart) { this.sessionFactory.getCurrentSession().update(cart); } @Transactional public void deleteCart(Cart cart) { this.sessionFactory.getCurrentSession().delete(cart); } }"},{"file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\models\\Cart.java","file_content":"package com.jtspringproject.JtSpringProject.models; import javax.persistence.*; import java.util.ArrayList; import java.util.List; @Entity(name=\"CART\") public class Cart { @Id @GeneratedValue(strategy = GenerationType.AUTO) private int id; @ManyToOne @JoinColumn(name=\"customer_id\") private User customer; public Cart() { } public int getId() { return id; } public void setId(int id) { this.id = id; } public User getCustomer() { return customer; } public void setCustomer(User customer) { this.customer = customer; } }"}]}}
{"project_id":37,"chunk_id":0,"content":{"main_file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\services\\categoryService.java","main_file_content":"package com.jtspringproject.JtSpringProject.services; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import com.jtspringproject.JtSpringProject.dao.categoryDao; import com.jtspringproject.JtSpringProject.models.Category; import net.bytebuddy.dynamic.DynamicType.Builder.InnerTypeDefinition; @Service public class categoryService { @Autowired private categoryDao categoryDao; public Category addCategory(String name) { return this.categoryDao.addCategory(name); } public List<Category> getCategories(){ return this.categoryDao.getCategories(); } public Boolean deleteCategory(int id) { return this.categoryDao.deletCategory(id); } public Category updateCategory(int id,String name) { return this.categoryDao.updateCategory(id, name); } public Category getCategory(int id) { return this.categoryDao.getCategory(id); } }","dependencies":[{"file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\dao\\categoryDao.java","file_content":"package com.jtspringproject.JtSpringProject.dao; import java.util.List; import org.hibernate.Session; import org.hibernate.SessionFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Repository; import org.springframework.transaction.annotation.Transactional; import com.jtspringproject.JtSpringProject.models.Category; @Repository public class categoryDao { @Autowired private SessionFactory sessionFactory; public void setSessionFactory(SessionFactory sf) { this.sessionFactory = sf; } @Transactional public Category addCategory(String name) { Category category = new Category(); category.setName(name); this.sessionFactory.getCurrentSession().saveOrUpdate(category); return category; } @Transactional public List<Category> getCategories() { return this.sessionFactory.getCurrentSession().createQuery(\"from CATEGORY\").list(); } @Transactional public Boolean deletCategory(int id) { Session session = this.sessionFactory.getCurrentSession(); Object persistanceInstance = session.load(Category.class, id); if (persistanceInstance != null) { session.delete(persistanceInstance); return true; } return false; } @Transactional public Category updateCategory(int id, String name) { Category category = this.sessionFactory.getCurrentSession().get(Category.class, id); category.setName(name); this.sessionFactory.getCurrentSession().update(category); return category; } @Transactional public Category getCategory(int id) { return this.sessionFactory.getCurrentSession().get(Category.class,id); } }"},{"file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\models\\Category.java","file_content":"package com.jtspringproject.JtSpringProject.models; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; @Entity(name=\"CATEGORY\") public class Category { @Id @Column(name = \"category_id\") @GeneratedValue(strategy=GenerationType.AUTO) private int id; private String name; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } }"}]}}
{"project_id":37,"chunk_id":0,"content":{"main_file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\services\\productService.java","main_file_content":"package com.jtspringproject.JtSpringProject.services; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import com.jtspringproject.JtSpringProject.dao.productDao; import com.jtspringproject.JtSpringProject.models.Product; @Service public class productService { @Autowired private productDao productDao; public List<Product> getProducts(){ return this.productDao.getProducts(); } public Product addProduct(Product product) { return this.productDao.addProduct(product); } public Product getProduct(int id) { return this.productDao.getProduct(id); } public Product updateProduct(int id,Product product){ product.setId(id); return this.productDao.updateProduct(product); } public boolean deleteProduct(int id) { return this.productDao.deletProduct(id); } }","dependencies":[{"file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\dao\\productDao.java","file_content":"package com.jtspringproject.JtSpringProject.dao; import java.util.List; import org.hibernate.Session; import org.hibernate.SessionFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Repository; import org.springframework.transaction.annotation.Transactional; import com.jtspringproject.JtSpringProject.models.Category; import com.jtspringproject.JtSpringProject.models.Product; @Repository public class productDao { @Autowired private SessionFactory sessionFactory; public void setSessionFactory(SessionFactory sf) { this.sessionFactory = sf; } @Transactional public List<Product> getProducts(){ return this.sessionFactory.getCurrentSession().createQuery(\"from PRODUCT\").list(); } @Transactional public Product addProduct(Product product) { this.sessionFactory.getCurrentSession().save(product); return product; } @Transactional public Product getProduct(int id) { return this.sessionFactory.getCurrentSession().get(Product.class, id); } public Product updateProduct(Product product){ this.sessionFactory.getCurrentSession().update(String.valueOf(Product.class),product); return product; } @Transactional public Boolean deletProduct(int id) { Session session = this.sessionFactory.getCurrentSession(); Object persistanceInstance = session.load(Product.class, id); if (persistanceInstance != null) { session.delete(persistanceInstance); return true; } return false; } }"},{"file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\models\\Product.java","file_content":"package com.jtspringproject.JtSpringProject.models; import javax.persistence.CascadeType; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.JoinColumn; import javax.persistence.ManyToOne; import javax.persistence.OneToOne; @Entity(name=\"PRODUCT\") public class Product { @Id @Column(name = \"product_id\") @GeneratedValue(strategy=GenerationType.AUTO) private int id; private String name; private String image; @OneToOne(cascade = CascadeType.ALL) @JoinColumn(name = \"category_id\",referencedColumnName = \"category_id\") private Category category; private int quantity; private int price; private int weight; private String description; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getImage() { return image; } public void setImage(String image) { this.image = image; } public Category getCategory() { return category; } public void setCategory(Category category) { this.category = category; } public int getQuantity() { return quantity; } public void setQuantity(int quantity) { this.quantity = quantity; } public int getPrice() { return price; } public void setPrice(int price) { this.price = price; } public int getWeight() { return weight; } public void setWeight(int weight) { this.weight = weight; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } @ManyToOne @JoinColumn(name = \"customer_id\") private User customer; }"}]}}
{"project_id":37,"chunk_id":0,"content":{"main_file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\services\\userService.java","main_file_content":"package com.jtspringproject.JtSpringProject.services; import com.jtspringproject.JtSpringProject.models.*; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.dao.DataIntegrityViolationException; import org.springframework.stereotype.Service; import com.jtspringproject.JtSpringProject.dao.userDao; import com.jtspringproject.JtSpringProject.models.User; @Service public class userService { @Autowired private userDao userDao; public List<User> getUsers(){ return this.userDao.getAllUser(); } public User addUser(User user) { try { return this.userDao.saveUser(user); } catch (DataIntegrityViolationException e) { throw new RuntimeException(\"Add user error\"); } } public User checkLogin(String username,String password) { return this.userDao.getUser(username, password); } public boolean checkUserExists(String username) { return this.userDao.userExists(username); } public User getUserByUsername(String username) { return userDao.getUserByUsername(username); } }","dependencies":[{"file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\dao\\userDao.java","file_content":"package com.jtspringproject.JtSpringProject.dao; import java.util.List; import javax.persistence.NoResultException; import javax.sound.midi.Soundbank; import org.hibernate.Session; import org.hibernate.SessionFactory; import org.hibernate.query.Query; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Repository; import org.springframework.transaction.annotation.Transactional; import com.jtspringproject.JtSpringProject.models.User; @Repository public class userDao { @Autowired private SessionFactory sessionFactory; public void setSessionFactory(SessionFactory sf) { this.sessionFactory = sf; } @Transactional public List<User> getAllUser() { Session session = this.sessionFactory.getCurrentSession(); List<User> userList = session.createQuery(\"from CUSTOMER\").list(); return userList; } @Transactional public User saveUser(User user) { this.sessionFactory.getCurrentSession().saveOrUpdate(user); System.out.println(\"User added\" + user.getId()); return user; } @Transactional public User getUser(String username,String password) { Query query = sessionFactory.getCurrentSession().createQuery(\"from CUSTOMER where username = :username\"); query.setParameter(\"username\",username); try { User user = (User) query.getSingleResult(); System.out.println(user.getPassword()); if(password.equals(user.getPassword())) { return user; }else { return new User(); } }catch(Exception e){ System.out.println(e.getMessage()); User user = new User(); return user; } } @Transactional public boolean userExists(String username) { Query query = sessionFactory.getCurrentSession().createQuery(\"from CUSTOMER where username = :username\"); query.setParameter(\"username\",username); return !query.getResultList().isEmpty(); } @Transactional public User getUserByUsername(String username) { Query<User> query = sessionFactory.getCurrentSession().createQuery(\"from User where username = :username\", User.class); query.setParameter(\"username\", username); try { return query.getSingleResult(); } catch (Exception e) { System.out.println(e.getMessage()); return null; } } }"},{"file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\main\\java\\com\\jtspringproject\\JtSpringProject\\models\\User.java","file_content":"package com.jtspringproject.JtSpringProject.models; import java.util.List; import javax.persistence.CascadeType; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.OneToMany; import javax.persistence.Table; @Entity(name=\"CUSTOMER\") @Table public class User { @Id @GeneratedValue(strategy=GenerationType.IDENTITY) private int id; @Column(unique = true) private String username; private String email; private String password; private String role; private String address; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public String getRole() { return role; } public void setRole(String role) { this.role = role; } public String getAddress() { return address; } public void setAddress(String address) { this.address = address; } }"}]}}
{"project_id":37,"chunk_id":0,"content":{"main_file_path":"E-commerce-project-springBoot-master2\\JtProject\\src\\test\\java\\com\\jtspringproject\\JtSpringProject\\JtSpringProjectApplicationTests.java","main_file_content":"package com.jtspringproject.JtSpringProject; import org.junit.jupiter.api.Test; import org.springframework.boot.test.context.SpringBootTest; @SpringBootTest class JtSpringProjectApplicationTests { @Test void contextLoads() { } }","dependencies":[]}}
{"project_id":38,"chunk_id":0,"content":{"main_file_path":"E-Health Care Management\\Ehospital.java","main_file_content":"import java.util.*; import java.lang.String; import java.io.*; import java.time.format.DateTimeFormatter; import java.time.LocalDateTime; class Info { Info() { System.out.print(\"\\t\\t\\t\\t\\t \\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| WELCOME TO E-HEALTH CARE MANAGEMENT SYSTEM |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| -Brought To You by |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| Md Fahad,Omer Mohiuddin and Yaseen Hussain |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t||\\n\"); } Scanner scan=new Scanner(System.in); String name; String address; long contact; int age; String bg; String sex; String disease; long id; String dadm; private void pressAnyKeyToContinue() { System.out.println(\"Press Enter key to continue...\"); try { System.in.read(); } catch(Exception e) { System.out.println(\"Press 'Enter' key to continue!\"); } } String readString() { Scanner scanner = new Scanner(System.in); return scanner.nextLine(); } void login() { int a; String pass; System.out.print(\"\\t\\t\\t\\t\\t \\n\"); System.out.print(\"\\n\\t\\t\\t\\t\\t\\t\\t\\tE-HEALTH CARE MANAGEMENT SYSTEM \\n\"); System.out.print(\"\\t\\t\\t\\t\\t \\n\"); System.out.println(\"\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\"); System.out.print(\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t LOGIN \\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\n\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t\\t\\tEnter the Password: \"); pass=scan.next(); if(pass.equals(\"deccan\")) { System.out.print(\"\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tAccess Granted!\\n\"); pressAnyKeyToContinue(); } else { System.out.print( \"\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tAccess Aborted...\\n\\t\\t\\t\\t\\t\\t\\t\\t1.Try Again\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t2.Exit\"); System.out.print(\"\\n\\n\\t\\t\\t\\t\\t\\t\\tEnter the option: \"); try{ a=scan.nextInt(); if(a==1) login(); else if(a==2) System.exit(0); else { System.out.print(\"\\n\\n\\t\\t\\t\\t\\t\\tInvalid Choice\\n\"); } } catch(InputMismatchException e){ System.out.println(\"\\n\\n\\t\\t\\t\\t\\t\\t\\t*Enter the correct option!*\\n\\n\"); login(); } } } public void getCurrentTimeUsingDate() { DateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm:ss\"); LocalDateTime now = LocalDateTime.now(); dadm=dtf.format(now); } void menu() { char k; System.out.print(\"\\t\\t\\t\\t\\t \\n\"); System.out.print(\"\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t E-HEALTH CARE MANAGEMENT SYSTEM \\n\\n\"); System.out.print(\"\\t\\t\\t\\t\\t \\n\"); System.out.print(\"\\n\\n\\t\\t\\t\\t\\t\\tPlease, Choose from the following Options: \\n\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t \\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t| 1 >> Add New Patient Record |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t| 2 >> Add Diagnosis Information |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t| 3 >> History of the Patient |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t| 4 >> Bill of the patient |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t| 5 >> Help |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t| 6 >> Exit |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t||\\n\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\tEnter your choice: \"); k=scan.next().charAt(0); switch(k) { case '1': patient(); break; case '2': diagnos(); break; case '3': history(); break; case '4': bill(); break; case '5': info(); break; case '6': exit(); break; default: System.out.print(\"\\n\\n\\t\\t\\t\\t\\t\\tInvalid Choice\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\tTry again...........\\n\\n\"); menu(); } menu(); } void patient() { System.out.print(\"Enter the patient's file name: \"); String fileName =scan.next(); getCurrentTimeUsingDate(); try { FileWriter fileWriter = new FileWriter(fileName+\".txt\"); BufferedWriter bufferedWriter = new BufferedWriter(fileWriter); System.out.print(\"\\n********************************************************************\\n\"); bufferedWriter.write(\"Date of admission: \"+dadm); bufferedWriter.newLine(); System.out.print(\"\\nName : \");name=readString();bufferedWriter.write(\"Name : \"+name); bufferedWriter.newLine(); System.out.print(\"\\nAddress : \");address=readString();bufferedWriter.write(\"Address : \"+address); bufferedWriter.newLine(); System.out.print(\"\\nContact Number : \");contact=scan.nextLong();bufferedWriter.write(\"Contact Number : \"+contact); bufferedWriter.newLine(); System.out.print(\"\\nAge : \");age=scan.nextInt();bufferedWriter.write(\"Age : \"+age); bufferedWriter.newLine(); System.out.print(\"\\nSex : \");sex=scan.next();bufferedWriter.write(\"Sex : \"+sex); bufferedWriter.newLine(); System.out.print(\"\\nBlood Group : \");bg=scan.next();bufferedWriter.write(\"Blood Group : \"+bg); bufferedWriter.newLine(); System.out.print(\"\\nAny Major disease suffered earlier : \");disease=readString();bufferedWriter.write(\"Any Major disease suffered earlier : \"+disease); bufferedWriter.newLine(); System.out.print(\"\\nPatient ID : \");id=scan.nextLong();bufferedWriter.write(\"Patient ID : \"+id); bufferedWriter.newLine(); System.out.print(\"\\n********************************************************************\\n\"); bufferedWriter.write(\"\\n********************************************************************\\n\\n\"); bufferedWriter.newLine();System.out.print(\"\\nInformation Saved Successfully\\n\"); bufferedWriter.close(); } catch(IOException ex) { System.out.println(\"Error writing to file '\"+ fileName +\"'\"); } pressAnyKeyToContinue(); } void diagnos() { String symptom; String diagnosis; String medicine; String addmission; String ward; String doctor; getCurrentTimeUsingDate(); System.out.print(\"\\n\\nEnter the patient's file name to be opened : \"); String fileName=scan.next(); String line = null; try { FileReader fileReader = new FileReader(fileName+\".txt\"); BufferedReader bufferedReader = new BufferedReader(fileReader); System.out.println(\"\\n\\n\\n\\n\\t\\t\\t\\t........................................ Information about '\"+fileName+\"' ........................................\\n\\n\\n\\n\"); while((line = bufferedReader.readLine()) != null) { System.out.println(line); } bufferedReader.close(); PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(fileName+\".txt\", true))); System.out.print(\"Adding more information in patient's file................on : \"+dadm); out.println(\"Description of the day:\"+dadm); System.out.print(\"\\nDoctor appointed:\");doctor=readString();out.println(\"Doctor appointed: \"+doctor); System.out.print(\"\\nSymptoms : \");symptom=readString();out.println(\"Symptoms : \"+symptom); System.out.print(\"\\nDiagnosis : \"); diagnosis=readString();out.println(\"Diagnosis : \"+diagnosis); System.out.print(\"\\nMedicines : \");medicine=readString(); out.println(\"Medicines : \"+medicine); System.out.print(\"\\nAddmission Required? : \"); addmission=readString();out.println(\"Addmission Required? : \"+addmission); if(addmission.equals(\"Yes\")||addmission.equals(\"Y\")) { System.out.print(\"\\nType of ward : \");ward=readString(); out.println(\"Type of ward : \"+ward); out.println(\"\\n*************************************************************************\\n\"); System.out.print(ward+\" ward is alloted Successfully\\n\"); } else {out.println(\"*************************************************************************\\n\");} out.close(); pressAnyKeyToContinue(); } catch(FileNotFoundException ex) { System.out.println( \"Unable to open file '\" + fileName + \"'\"); } catch (IOException e) { System.out.println(\"Error writing or Reading to file '\"+ fileName +\"'\"); } } void history() { System.out.print(\"\\n\\nEnter the patient's file name to be opened : \"); String fileName=scan.next(); String line = null; try { FileReader fileReader = new FileReader(fileName+\".txt\"); BufferedReader bufferedReader = new BufferedReader(fileReader); System.out.print(\"\\n\\n\\n\\n\\t\\t\\t\\t........................................ Full Medical History of '\"+fileName+\"' ........................................\\n\\n\\n\\n\"); while((line = bufferedReader.readLine()) != null) { System.out.println(line); } pressAnyKeyToContinue(); bufferedReader.close(); } catch(FileNotFoundException ex) { System.out.println( \"Unable to open file '\" + fileName + \"'\"); } catch(IOException ex) { System.out.println( \"Error reading file '\" + fileName + \"'\"); } } void bill() { getCurrentTimeUsingDate(); int days; double wcharge; double doc; double ser; System.out.println(\"\\t\\t\\t\\t\\t\\t \"); System.out.print(\"\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t E-HEALTH CARE MANAGEMENT SYSTEM \\n\\n\"); System.out.println(\"\\t\\t\\t\\t\\t\\t \"); System.out.print(\"Enter the patient's file name to get the Bill: \"); String fileName=scan.next(); String line = null; try { FileReader fileReader = new FileReader(fileName+\".txt\"); PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(fileName+\".txt\", true))); BufferedReader bufferedReader = new BufferedReader(fileReader); System.out.print(\"Date: \"+dadm); System.out.println(\"\\n\\n\\n\\n\\t\\t\\t\\tDetails of the patient:\\n\\n\\n\\n\"); while((line = bufferedReader.readLine()) != null) { System.out.println(line); } System.out.print(\"\\t\\t\\t\\t\\t\\t \"); System.out.println(\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tBill of the patient:\"); System.out.print(\"\\t\\t\\t\\t\\t\\t \\n\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\tNo.of days patient stayed:\");days=scan.nextInt(); System.out.print(\"\\t\\t\\t\\t\\t\\tWard charges/day:\");wcharge=scan.nextDouble(); System.out.print(\"\\n\\t\\t\\t\\t\\t\\tTotal ward charges:\"+(wcharge*days)); System.out.print(\"\\n\\t\\t\\t\\t\\t\\tDoctor's fee:\");doc=scan.nextDouble(); System.out.print(\"\\n\\t\\t\\t\\t\\t\\tService charges:\");ser=scan.nextDouble(); System.out.print(\"\\n\\t\\t\\t\\t\\t\\tTOTAL AMOUNT:\"+((wcharge*days)+doc+ser)); out.println(\"Total Bill:\"+((wcharge*days)+doc+ser)); System.out.print(\"\\n\\t\\t\\t\\t\\t\\t \\n\"); out.close(); bufferedReader.close(); } catch(FileNotFoundException ex) { System.out.println( \"Unable to open file '\" + fileName + \"'\"); } catch(IOException ex) { System.out.println( \"Error reading file '\" + fileName + \"'\"); } pressAnyKeyToContinue(); } void exit() { System.out.print(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\t\\t\\t\\t\\t\\n\"); System.out.print(\"\\t\\t\\t\\t\\t \\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| THANK YOU FOR USING |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| E-HEALTH CARE MANAGEMENT SYSTEM |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| -Brought To You by Fahad,Omer and Yaseen |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t||\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\n\\n\\n\\n\\t\\t\\t\\t\\t\"); System.exit(0); } void info() { System.out.println(\"\\n\\nE-Health care management system is command-driven application that helps to manage the record of the patient's as well as generate their hospital bills.\"); System.out.print(\"\\t\\t\\t\\t\\n\"); System.out.print(\"\\t\\t\\t\\t\\tOptions | Description\\n\"); System.out.print(\"\\t\\t\\t\\t\\n\"); System.out.println(\"\\t\\t\\t\\t 1 >> Add New Patient Record | A new patient file can be created by using this module.\"); System.out.println(\"\\t\\t\\t\\t 2 >> Add Diagnosis Information | Adding day-to-day evaluation of the patient or the diagnosis report in the existing file.\"); System.out.println(\"\\t\\t\\t\\t 3 >> History of the Patient | Check the previous or existing details of particular patient by using their file name.\"); System.out.println(\"\\t\\t\\t\\t 4 >> Bill of the patient | Generates the bill of the patient with displaying the details.\"); System.out.println(\"\\t\\t\\t\\t 5 >> Help | Provide the help documentation.\"); System.out.println(\"\\t\\t\\t\\t 6 >> Exit | Exits the application.\"); pressAnyKeyToContinue(); } } public class Ehospital { public static void main (String args[]) { Info i=new Info(); i.login(); i.menu(); } }","dependencies":[]}}
{"project_id":38,"chunk_id":1,"content":{"main_file_path":"E-Health Care Management\\Ehospital.java","main_file_content":"import java.util.*; import java.lang.String; import java.io.*; import java.time.format.DateTimeFormatter; import java.time.LocalDateTime; class Info { Info() { System.out.print(\"\\t\\t\\t\\t\\t \\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| WELCOME TO E-HEALTH CARE MANAGEMENT SYSTEM |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| -Brought To You by |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| Md Fahad,Omer Mohiuddin and Yaseen Hussain |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t||\\n\"); } Scanner scan=new Scanner(System.in); String name; String address; long contact; int age; String bg; String sex; String disease; long id; String dadm; private void pressAnyKeyToContinue() { System.out.println(\"Press Enter key to continue...\"); try { System.in.read(); } catch(Exception e) { System.out.println(\"Press 'Enter' key to continue!\"); } } String readString() { Scanner scanner = new Scanner(System.in); return scanner.nextLine(); } void login() { int a; String pass; System.out.print(\"\\t\\t\\t\\t\\t \\n\"); System.out.print(\"\\n\\t\\t\\t\\t\\t\\t\\t\\tE-HEALTH CARE MANAGEMENT SYSTEM \\n\"); System.out.print(\"\\t\\t\\t\\t\\t \\n\"); System.out.println(\"\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\"); System.out.print(\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t LOGIN \\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\n\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t\\t\\tEnter the Password: \"); pass=scan.next(); if(pass.equals(\"deccan\")) { System.out.print(\"\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tAccess Granted!\\n\"); pressAnyKeyToContinue(); } else { System.out.print( \"\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tAccess Aborted...\\n\\t\\t\\t\\t\\t\\t\\t\\t1.Try Again\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t2.Exit\"); System.out.print(\"\\n\\n\\t\\t\\t\\t\\t\\t\\tEnter the option: \"); try{ a=scan.nextInt(); if(a==1) login(); else if(a==2) System.exit(0); else { System.out.print(\"\\n\\n\\t\\t\\t\\t\\t\\tInvalid Choice\\n\"); } } catch(InputMismatchException e){ System.out.println(\"\\n\\n\\t\\t\\t\\t\\t\\t\\t*Enter the correct option!*\\n\\n\"); login(); } } } public void getCurrentTimeUsingDate() { DateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm:ss\"); LocalDateTime now = LocalDateTime.now(); dadm=dtf.format(now); } void menu() { char k; System.out.print(\"\\t\\t\\t\\t\\t \\n\"); System.out.print(\"\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t E-HEALTH CARE MANAGEMENT SYSTEM \\n\\n\"); System.out.print(\"\\t\\t\\t\\t\\t \\n\"); System.out.print(\"\\n\\n\\t\\t\\t\\t\\t\\tPlease, Choose from the following Options: \\n\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t \\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t| 1 >> Add New Patient Record |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t| 2 >> Add Diagnosis Information |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t| 3 >> History of the Patient |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t| 4 >> Bill of the patient |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t| 5 >> Help |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t| 6 >> Exit |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t||\\n\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\tEnter your choice: \"); k=scan.next().charAt(0); switch(k) { case '1': patient(); break; case '2': diagnos(); break; case '3': history(); break; case '4': bill(); break; case '5': info(); break; case '6': exit(); break; default: System.out.print(\"\\n\\n\\t\\t\\t\\t\\t\\tInvalid Choice\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\tTry again...........\\n\\n\"); menu(); } menu(); } void patient() { System.out.print(\"Enter the patient's file name: \"); String fileName =scan.next(); getCurrentTimeUsingDate(); try { FileWriter fileWriter = new FileWriter(fileName+\".txt\"); BufferedWriter bufferedWriter = new BufferedWriter(fileWriter); System.out.print(\"\\n********************************************************************\\n\"); bufferedWriter.write(\"Date of admission: \"+dadm); bufferedWriter.newLine(); System.out.print(\"\\nName : \");name=readString();bufferedWriter.write(\"Name : \"+name); bufferedWriter.newLine(); System.out.print(\"\\nAddress : \");address=readString();bufferedWriter.write(\"Address : \"+address); bufferedWriter.newLine(); System.out.print(\"\\nContact Number : \");contact=scan.nextLong();bufferedWriter.write(\"Contact Number : \"+contact); bufferedWriter.newLine(); System.out.print(\"\\nAge : \");age=scan.nextInt();bufferedWriter.write(\"Age : \"+age); bufferedWriter.newLine(); System.out.print(\"\\nSex : \");sex=scan.next();bufferedWriter.write(\"Sex : \"+sex); bufferedWriter.newLine(); System.out.print(\"\\nBlood Group : \");bg=scan.next();bufferedWriter.write(\"Blood Group : \"+bg); bufferedWriter.newLine(); System.out.print(\"\\nAny Major disease suffered earlier : \");disease=readString();bufferedWriter.write(\"Any Major disease suffered earlier : \"+disease); bufferedWriter.newLine(); System.out.print(\"\\nPatient ID : \");id=scan.nextLong();bufferedWriter.write(\"Patient ID : \"+id); bufferedWriter.newLine(); System.out.print(\"\\n********************************************************************\\n\"); bufferedWriter.write(\"\\n********************************************************************\\n\\n\"); bufferedWriter.newLine();System.out.print(\"\\nInformation Saved Successfully\\n\"); bufferedWriter.close(); } catch(IOException ex) { System.out.println(\"Error writing to file '\"+ fileName +\"'\"); } pressAnyKeyToContinue(); } void diagnos() { String symptom; String diagnosis; String medicine; String addmission; String ward; String doctor; getCurrentTimeUsingDate(); System.out.print(\"\\n\\nEnter the patient's file name to be opened : \"); String fileName=scan.next(); String line = null; try { FileReader fileReader = new FileReader(fileName+\".txt\"); BufferedReader bufferedReader = new BufferedReader(fileReader); System.out.println(\"\\n\\n\\n\\n\\t\\t\\t\\t........................................ Information about '\"+fileName+\"' ........................................\\n\\n\\n\\n\"); while((line = bufferedReader.readLine()) != null) { System.out.println(line); } bufferedReader.close(); PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(fileName+\".txt\", true))); System.out.print(\"Adding more information in patient's file................on : \"+dadm); out.println(\"Description of the day:\"+dadm); System.out.print(\"\\nDoctor appointed:\");doctor=readString();out.println(\"Doctor appointed: \"+doctor); System.out.print(\"\\nSymptoms : \");symptom=readString();out.println(\"Symptoms : \"+symptom); System.out.print(\"\\nDiagnosis : \"); diagnosis=readString();out.println(\"Diagnosis : \"+diagnosis); System.out.print(\"\\nMedicines : \");medicine=readString(); out.println(\"Medicines : \"+medicine); System.out.print(\"\\nAddmission Required? : \"); addmission=readString();out.println(\"Addmission Required? : \"+addmission); if(addmission.equals(\"Yes\")||addmission.equals(\"Y\")) { System.out.print(\"\\nType of ward : \");ward=readString(); out.println(\"Type of ward : \"+ward); out.println(\"\\n*************************************************************************\\n\"); System.out.print(ward+\" ward is alloted Successfully\\n\"); } else {out.println(\"*************************************************************************\\n\");} out.close(); pressAnyKeyToContinue(); } catch(FileNotFoundException ex) { System.out.println( \"Unable to open file '\" + fileName + \"'\"); } catch (IOException e) { System.out.println(\"Error writing or Reading to file '\"+ fileName +\"'\"); } } void history() { System.out.print(\"\\n\\nEnter the patient's file name to be opened : \"); String fileName=scan.next(); String line = null; try { FileReader fileReader = new FileReader(fileName+\".txt\"); BufferedReader bufferedReader = new BufferedReader(fileReader); System.out.print(\"\\n\\n\\n\\n\\t\\t\\t\\t........................................ Full Medical History of '\"+fileName+\"' ........................................\\n\\n\\n\\n\"); while((line = bufferedReader.readLine()) != null) { System.out.println(line); } pressAnyKeyToContinue(); bufferedReader.close(); } catch(FileNotFoundException ex) { System.out.println( \"Unable to open file '\" + fileName + \"'\"); } catch(IOException ex) { System.out.println( \"Error reading file '\" + fileName + \"'\"); } } void bill() { getCurrentTimeUsingDate(); int days; double wcharge; double doc; double ser; System.out.println(\"\\t\\t\\t\\t\\t\\t \"); System.out.print(\"\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t E-HEALTH CARE MANAGEMENT SYSTEM \\n\\n\"); System.out.println(\"\\t\\t\\t\\t\\t\\t \"); System.out.print(\"Enter the patient's file name to get the Bill: \"); String fileName=scan.next(); String line = null; try { FileReader fileReader = new FileReader(fileName+\".txt\"); PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(fileName+\".txt\", true))); BufferedReader bufferedReader = new BufferedReader(fileReader); System.out.print(\"Date: \"+dadm); System.out.println(\"\\n\\n\\n\\n\\t\\t\\t\\tDetails of the patient:\\n\\n\\n\\n\"); while((line = bufferedReader.readLine()) != null) { System.out.println(line); } System.out.print(\"\\t\\t\\t\\t\\t\\t \"); System.out.println(\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tBill of the patient:\"); System.out.print(\"\\t\\t\\t\\t\\t\\t \\n\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\tNo.of days patient stayed:\");days=scan.nextInt(); System.out.print(\"\\t\\t\\t\\t\\t\\tWard charges/day:\");wcharge=scan.nextDouble(); System.out.print(\"\\n\\t\\t\\t\\t\\t\\tTotal ward charges:\"+(wcharge*days)); System.out.print(\"\\n\\t\\t\\t\\t\\t\\tDoctor's fee:\");doc=scan.nextDouble(); System.out.print(\"\\n\\t\\t\\t\\t\\t\\tService charges:\");ser=scan.nextDouble(); System.out.print(\"\\n\\t\\t\\t\\t\\t\\tTOTAL AMOUNT:\"+((wcharge*days)+doc+ser)); out.println(\"Total Bill:\"+((wcharge*days)+doc+ser)); System.out.print(\"\\n\\t\\t\\t\\t\\t\\t \\n\"); out.close(); bufferedReader.close(); } catch(FileNotFoundException ex) { System.out.println( \"Unable to open file '\" + fileName + \"'\"); } catch(IOException ex) { System.out.println( \"Error reading file '\" + fileName + \"'\"); } pressAnyKeyToContinue(); } void exit() { System.out.print(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\t\\t\\t\\t\\t\\n\"); System.out.print(\"\\t\\t\\t\\t\\t \\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| THANK YOU FOR USING |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| E-HEALTH CARE MANAGEMENT SYSTEM |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| -Brought To You by Fahad,Omer and Yaseen |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t||\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\n\\n\\n\\n\\t\\t\\t\\t\\t\"); System.exit(0); } void info() { System.out.println(\"\\n\\nE-Health care management system is command-driven application that helps to manage the record of the patient's as well as generate their hospital bills.\"); System.out.print(\"\\t\\t\\t\\t\\n\"); System.out.print(\"\\t\\t\\t\\t\\tOptions | Description\\n\"); System.out.print(\"\\t\\t\\t\\t\\n\"); System.out.println(\"\\t\\t\\t\\t 1 >> Add New Patient Record | A new patient file can be created by using this module.\"); System.out.println(\"\\t\\t\\t\\t 2 >> Add Diagnosis Information | Adding day-to-day evaluation of the patient or the diagnosis report in the existing file.\"); System.out.println(\"\\t\\t\\t\\t 3 >> History of the Patient | Check the previous or existing details of particular patient by using their file name.\"); System.out.println(\"\\t\\t\\t\\t 4 >> Bill of the patient | Generates the bill of the patient with displaying the details.\"); System.out.println(\"\\t\\t\\t\\t 5 >> Help | Provide the help documentation.\"); System.out.println(\"\\t\\t\\t\\t 6 >> Exit | Exits the application.\"); pressAnyKeyToContinue(); } } public class Ehospital { public static void main (String args[]) { Info i=new Info(); i.login(); i.menu(); } }","dependencies":[{"file_path":"E-Health Care Management\\E-Health Care Management\\Ehospital.java","file_content":"import java.util.*; import java.lang.String; import java.io.*; import java.time.format.DateTimeFormatter; import java.time.LocalDateTime; class Info { Info() { System.out.print(\"\\t\\t\\t\\t\\t \\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| WELCOME TO E-HEALTH CARE MANAGEMENT SYSTEM |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| -Brought To You by |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| Md Fahad,Omer Mohiuddin and Yaseen Hussain |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t||\\n\"); } Scanner scan=new Scanner(System.in); String name; String address; long contact; int age; String bg; String sex; String disease; long id; String dadm; private void pressAnyKeyToContinue() { System.out.println(\"Press Enter key to continue...\"); try { System.in.read(); } catch(Exception e) { System.out.println(\"Press 'Enter' key to continue!\"); } } String readString() { Scanner scanner = new Scanner(System.in); return scanner.nextLine(); } void login() { int a; String pass; System.out.print(\"\\t\\t\\t\\t\\t \\n\"); System.out.print(\"\\n\\t\\t\\t\\t\\t\\t\\t\\tE-HEALTH CARE MANAGEMENT SYSTEM \\n\"); System.out.print(\"\\t\\t\\t\\t\\t \\n\"); System.out.println(\"\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\"); System.out.print(\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t LOGIN \\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\n\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t\\t\\tEnter the Password: \"); pass=scan.next(); if(pass.equals(\"deccan\")) { System.out.print(\"\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tAccess Granted!\\n\"); pressAnyKeyToContinue(); } else { System.out.print( \"\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tAccess Aborted...\\n\\t\\t\\t\\t\\t\\t\\t\\t1.Try Again\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t2.Exit\"); System.out.print(\"\\n\\n\\t\\t\\t\\t\\t\\t\\tEnter the option: \"); try{ a=scan.nextInt(); if(a==1) login(); else if(a==2) System.exit(0); else { System.out.print(\"\\n\\n\\t\\t\\t\\t\\t\\tInvalid Choice\\n\"); } } catch(InputMismatchException e){ System.out.println(\"\\n\\n\\t\\t\\t\\t\\t\\t\\t*Enter the correct option!*\\n\\n\"); login(); } } } public void getCurrentTimeUsingDate() { DateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm:ss\"); LocalDateTime now = LocalDateTime.now(); dadm=dtf.format(now); } void menu() { char k; System.out.print(\"\\t\\t\\t\\t\\t \\n\"); System.out.print(\"\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t E-HEALTH CARE MANAGEMENT SYSTEM \\n\\n\"); System.out.print(\"\\t\\t\\t\\t\\t \\n\"); System.out.print(\"\\n\\n\\t\\t\\t\\t\\t\\tPlease, Choose from the following Options: \\n\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t \\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t| 1 >> Add New Patient Record |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t| 2 >> Add Diagnosis Information |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t| 3 >> History of the Patient |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t| 4 >> Bill of the patient |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t| 5 >> Help |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t| 6 >> Exit |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t||\\n\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\tEnter your choice: \"); k=scan.next().charAt(0); switch(k) { case '1': patient(); break; case '2': diagnos(); break; case '3': history(); break; case '4': bill(); break; case '5': info(); break; case '6': exit(); break; default: System.out.print(\"\\n\\n\\t\\t\\t\\t\\t\\tInvalid Choice\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\tTry again...........\\n\\n\"); menu(); } menu(); } void patient() { System.out.print(\"Enter the patient's file name: \"); String fileName =scan.next(); getCurrentTimeUsingDate(); try { FileWriter fileWriter = new FileWriter(fileName+\".txt\"); BufferedWriter bufferedWriter = new BufferedWriter(fileWriter); System.out.print(\"\\n********************************************************************\\n\"); bufferedWriter.write(\"Date of admission: \"+dadm); bufferedWriter.newLine(); System.out.print(\"\\nName : \");name=readString();bufferedWriter.write(\"Name : \"+name); bufferedWriter.newLine(); System.out.print(\"\\nAddress : \");address=readString();bufferedWriter.write(\"Address : \"+address); bufferedWriter.newLine(); System.out.print(\"\\nContact Number : \");contact=scan.nextLong();bufferedWriter.write(\"Contact Number : \"+contact); bufferedWriter.newLine(); System.out.print(\"\\nAge : \");age=scan.nextInt();bufferedWriter.write(\"Age : \"+age); bufferedWriter.newLine(); System.out.print(\"\\nSex : \");sex=scan.next();bufferedWriter.write(\"Sex : \"+sex); bufferedWriter.newLine(); System.out.print(\"\\nBlood Group : \");bg=scan.next();bufferedWriter.write(\"Blood Group : \"+bg); bufferedWriter.newLine(); System.out.print(\"\\nAny Major disease suffered earlier : \");disease=readString();bufferedWriter.write(\"Any Major disease suffered earlier : \"+disease); bufferedWriter.newLine(); System.out.print(\"\\nPatient ID : \");id=scan.nextLong();bufferedWriter.write(\"Patient ID : \"+id); bufferedWriter.newLine(); System.out.print(\"\\n********************************************************************\\n\"); bufferedWriter.write(\"\\n********************************************************************\\n\\n\"); bufferedWriter.newLine();System.out.print(\"\\nInformation Saved Successfully\\n\"); bufferedWriter.close(); } catch(IOException ex) { System.out.println(\"Error writing to file '\"+ fileName +\"'\"); } pressAnyKeyToContinue(); } void diagnos() { String symptom; String diagnosis; String medicine; String addmission; String ward; String doctor; getCurrentTimeUsingDate(); System.out.print(\"\\n\\nEnter the patient's file name to be opened : \"); String fileName=scan.next(); String line = null; try { FileReader fileReader = new FileReader(fileName+\".txt\"); BufferedReader bufferedReader = new BufferedReader(fileReader); System.out.println(\"\\n\\n\\n\\n\\t\\t\\t\\t........................................ Information about '\"+fileName+\"' ........................................\\n\\n\\n\\n\"); while((line = bufferedReader.readLine()) != null) { System.out.println(line); } bufferedReader.close(); PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(fileName+\".txt\", true))); System.out.print(\"Adding more information in patient's file................on : \"+dadm); out.println(\"Description of the day:\"+dadm); System.out.print(\"\\nDoctor appointed:\");doctor=readString();out.println(\"Doctor appointed: \"+doctor); System.out.print(\"\\nSymptoms : \");symptom=readString();out.println(\"Symptoms : \"+symptom); System.out.print(\"\\nDiagnosis : \"); diagnosis=readString();out.println(\"Diagnosis : \"+diagnosis); System.out.print(\"\\nMedicines : \");medicine=readString(); out.println(\"Medicines : \"+medicine); System.out.print(\"\\nAddmission Required? : \"); addmission=readString();out.println(\"Addmission Required? : \"+addmission); if(addmission.equals(\"Yes\")||addmission.equals(\"Y\")) { System.out.print(\"\\nType of ward : \");ward=readString(); out.println(\"Type of ward : \"+ward); out.println(\"\\n*************************************************************************\\n\"); System.out.print(ward+\" ward is alloted Successfully\\n\"); } else {out.println(\"*************************************************************************\\n\");} out.close(); pressAnyKeyToContinue(); } catch(FileNotFoundException ex) { System.out.println( \"Unable to open file '\" + fileName + \"'\"); } catch (IOException e) { System.out.println(\"Error writing or Reading to file '\"+ fileName +\"'\"); } } void history() { System.out.print(\"\\n\\nEnter the patient's file name to be opened : \"); String fileName=scan.next(); String line = null; try { FileReader fileReader = new FileReader(fileName+\".txt\"); BufferedReader bufferedReader = new BufferedReader(fileReader); System.out.print(\"\\n\\n\\n\\n\\t\\t\\t\\t........................................ Full Medical History of '\"+fileName+\"' ........................................\\n\\n\\n\\n\"); while((line = bufferedReader.readLine()) != null) { System.out.println(line); } pressAnyKeyToContinue(); bufferedReader.close(); } catch(FileNotFoundException ex) { System.out.println( \"Unable to open file '\" + fileName + \"'\"); } catch(IOException ex) { System.out.println( \"Error reading file '\" + fileName + \"'\"); } } void bill() { getCurrentTimeUsingDate(); int days; double wcharge; double doc; double ser; System.out.println(\"\\t\\t\\t\\t\\t\\t \"); System.out.print(\"\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t E-HEALTH CARE MANAGEMENT SYSTEM \\n\\n\"); System.out.println(\"\\t\\t\\t\\t\\t\\t \"); System.out.print(\"Enter the patient's file name to get the Bill: \"); String fileName=scan.next(); String line = null; try { FileReader fileReader = new FileReader(fileName+\".txt\"); PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(fileName+\".txt\", true))); BufferedReader bufferedReader = new BufferedReader(fileReader); System.out.print(\"Date: \"+dadm); System.out.println(\"\\n\\n\\n\\n\\t\\t\\t\\tDetails of the patient:\\n\\n\\n\\n\"); while((line = bufferedReader.readLine()) != null) { System.out.println(line); } System.out.print(\"\\t\\t\\t\\t\\t\\t \"); System.out.println(\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tBill of the patient:\"); System.out.print(\"\\t\\t\\t\\t\\t\\t \\n\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\tNo.of days patient stayed:\");days=scan.nextInt(); System.out.print(\"\\t\\t\\t\\t\\t\\tWard charges/day:\");wcharge=scan.nextDouble(); System.out.print(\"\\n\\t\\t\\t\\t\\t\\tTotal ward charges:\"+(wcharge*days)); System.out.print(\"\\n\\t\\t\\t\\t\\t\\tDoctor's fee:\");doc=scan.nextDouble(); System.out.print(\"\\n\\t\\t\\t\\t\\t\\tService charges:\");ser=scan.nextDouble(); System.out.print(\"\\n\\t\\t\\t\\t\\t\\tTOTAL AMOUNT:\"+((wcharge*days)+doc+ser)); out.println(\"Total Bill:\"+((wcharge*days)+doc+ser)); System.out.print(\"\\n\\t\\t\\t\\t\\t\\t \\n\"); out.close(); bufferedReader.close(); } catch(FileNotFoundException ex) { System.out.println( \"Unable to open file '\" + fileName + \"'\"); } catch(IOException ex) { System.out.println( \"Error reading file '\" + fileName + \"'\"); } pressAnyKeyToContinue(); } void exit() { System.out.print(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\t\\t\\t\\t\\t\\n\"); System.out.print(\"\\t\\t\\t\\t\\t \\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| THANK YOU FOR USING |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| E-HEALTH CARE MANAGEMENT SYSTEM |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| -Brought To You by Fahad,Omer and Yaseen |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t||\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\n\\n\\n\\n\\t\\t\\t\\t\\t\"); System.exit(0); } void info() { System.out.println(\"\\n\\nE-Health care management system is command-driven application that helps to manage the record of the patient's as well as generate their hospital bills.\"); System.out.print(\"\\t\\t\\t\\t\\n\"); System.out.print(\"\\t\\t\\t\\t\\tOptions | Description\\n\"); System.out.print(\"\\t\\t\\t\\t\\n\"); System.out.println(\"\\t\\t\\t\\t 1 >> Add New Patient Record | A new patient file can be created by using this module.\"); System.out.println(\"\\t\\t\\t\\t 2 >> Add Diagnosis Information | Adding day-to-day evaluation of the patient or the diagnosis report in the existing file.\"); System.out.println(\"\\t\\t\\t\\t 3 >> History of the Patient | Check the previous or existing details of particular patient by using their file name.\"); System.out.println(\"\\t\\t\\t\\t 4 >> Bill of the patient | Generates the bill of the patient with displaying the details.\"); System.out.println(\"\\t\\t\\t\\t 5 >> Help | Provide the help documentation.\"); System.out.println(\"\\t\\t\\t\\t 6 >> Exit | Exits the application.\"); pressAnyKeyToContinue(); } } public class Ehospital { public static void main (String args[]) { Info i=new Info(); i.login(); i.menu(); } }"}]}}
{"project_id":38,"chunk_id":0,"content":{"main_file_path":"E-Health Care Management\\E-Health Care Management\\Ehospital.java","main_file_content":"import java.util.*; import java.lang.String; import java.io.*; import java.time.format.DateTimeFormatter; import java.time.LocalDateTime; class Info { Info() { System.out.print(\"\\t\\t\\t\\t\\t \\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| WELCOME TO E-HEALTH CARE MANAGEMENT SYSTEM |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| -Brought To You by |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| Md Fahad,Omer Mohiuddin and Yaseen Hussain |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t||\\n\"); } Scanner scan=new Scanner(System.in); String name; String address; long contact; int age; String bg; String sex; String disease; long id; String dadm; private void pressAnyKeyToContinue() { System.out.println(\"Press Enter key to continue...\"); try { System.in.read(); } catch(Exception e) { System.out.println(\"Press 'Enter' key to continue!\"); } } String readString() { Scanner scanner = new Scanner(System.in); return scanner.nextLine(); } void login() { int a; String pass; System.out.print(\"\\t\\t\\t\\t\\t \\n\"); System.out.print(\"\\n\\t\\t\\t\\t\\t\\t\\t\\tE-HEALTH CARE MANAGEMENT SYSTEM \\n\"); System.out.print(\"\\t\\t\\t\\t\\t \\n\"); System.out.println(\"\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\"); System.out.print(\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t LOGIN \\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\n\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t\\t\\tEnter the Password: \"); pass=scan.next(); if(pass.equals(\"deccan\")) { System.out.print(\"\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tAccess Granted!\\n\"); pressAnyKeyToContinue(); } else { System.out.print( \"\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tAccess Aborted...\\n\\t\\t\\t\\t\\t\\t\\t\\t1.Try Again\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t2.Exit\"); System.out.print(\"\\n\\n\\t\\t\\t\\t\\t\\t\\tEnter the option: \"); try{ a=scan.nextInt(); if(a==1) login(); else if(a==2) System.exit(0); else { System.out.print(\"\\n\\n\\t\\t\\t\\t\\t\\tInvalid Choice\\n\"); } } catch(InputMismatchException e){ System.out.println(\"\\n\\n\\t\\t\\t\\t\\t\\t\\t*Enter the correct option!*\\n\\n\"); login(); } } } public void getCurrentTimeUsingDate() { DateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm:ss\"); LocalDateTime now = LocalDateTime.now(); dadm=dtf.format(now); } void menu() { char k; System.out.print(\"\\t\\t\\t\\t\\t \\n\"); System.out.print(\"\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t E-HEALTH CARE MANAGEMENT SYSTEM \\n\\n\"); System.out.print(\"\\t\\t\\t\\t\\t \\n\"); System.out.print(\"\\n\\n\\t\\t\\t\\t\\t\\tPlease, Choose from the following Options: \\n\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t \\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t| 1 >> Add New Patient Record |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t| 2 >> Add Diagnosis Information |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t| 3 >> History of the Patient |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t| 4 >> Bill of the patient |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t| 5 >> Help |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t| 6 >> Exit |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\t||\\n\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\tEnter your choice: \"); k=scan.next().charAt(0); switch(k) { case '1': patient(); break; case '2': diagnos(); break; case '3': history(); break; case '4': bill(); break; case '5': info(); break; case '6': exit(); break; default: System.out.print(\"\\n\\n\\t\\t\\t\\t\\t\\tInvalid Choice\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\tTry again...........\\n\\n\"); menu(); } menu(); } void patient() { System.out.print(\"Enter the patient's file name: \"); String fileName =scan.next(); getCurrentTimeUsingDate(); try { FileWriter fileWriter = new FileWriter(fileName+\".txt\"); BufferedWriter bufferedWriter = new BufferedWriter(fileWriter); System.out.print(\"\\n********************************************************************\\n\"); bufferedWriter.write(\"Date of admission: \"+dadm); bufferedWriter.newLine(); System.out.print(\"\\nName : \");name=readString();bufferedWriter.write(\"Name : \"+name); bufferedWriter.newLine(); System.out.print(\"\\nAddress : \");address=readString();bufferedWriter.write(\"Address : \"+address); bufferedWriter.newLine(); System.out.print(\"\\nContact Number : \");contact=scan.nextLong();bufferedWriter.write(\"Contact Number : \"+contact); bufferedWriter.newLine(); System.out.print(\"\\nAge : \");age=scan.nextInt();bufferedWriter.write(\"Age : \"+age); bufferedWriter.newLine(); System.out.print(\"\\nSex : \");sex=scan.next();bufferedWriter.write(\"Sex : \"+sex); bufferedWriter.newLine(); System.out.print(\"\\nBlood Group : \");bg=scan.next();bufferedWriter.write(\"Blood Group : \"+bg); bufferedWriter.newLine(); System.out.print(\"\\nAny Major disease suffered earlier : \");disease=readString();bufferedWriter.write(\"Any Major disease suffered earlier : \"+disease); bufferedWriter.newLine(); System.out.print(\"\\nPatient ID : \");id=scan.nextLong();bufferedWriter.write(\"Patient ID : \"+id); bufferedWriter.newLine(); System.out.print(\"\\n********************************************************************\\n\"); bufferedWriter.write(\"\\n********************************************************************\\n\\n\"); bufferedWriter.newLine();System.out.print(\"\\nInformation Saved Successfully\\n\"); bufferedWriter.close(); } catch(IOException ex) { System.out.println(\"Error writing to file '\"+ fileName +\"'\"); } pressAnyKeyToContinue(); } void diagnos() { String symptom; String diagnosis; String medicine; String addmission; String ward; String doctor; getCurrentTimeUsingDate(); System.out.print(\"\\n\\nEnter the patient's file name to be opened : \"); String fileName=scan.next(); String line = null; try { FileReader fileReader = new FileReader(fileName+\".txt\"); BufferedReader bufferedReader = new BufferedReader(fileReader); System.out.println(\"\\n\\n\\n\\n\\t\\t\\t\\t........................................ Information about '\"+fileName+\"' ........................................\\n\\n\\n\\n\"); while((line = bufferedReader.readLine()) != null) { System.out.println(line); } bufferedReader.close(); PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(fileName+\".txt\", true))); System.out.print(\"Adding more information in patient's file................on : \"+dadm); out.println(\"Description of the day:\"+dadm); System.out.print(\"\\nDoctor appointed:\");doctor=readString();out.println(\"Doctor appointed: \"+doctor); System.out.print(\"\\nSymptoms : \");symptom=readString();out.println(\"Symptoms : \"+symptom); System.out.print(\"\\nDiagnosis : \"); diagnosis=readString();out.println(\"Diagnosis : \"+diagnosis); System.out.print(\"\\nMedicines : \");medicine=readString(); out.println(\"Medicines : \"+medicine); System.out.print(\"\\nAddmission Required? : \"); addmission=readString();out.println(\"Addmission Required? : \"+addmission); if(addmission.equals(\"Yes\")||addmission.equals(\"Y\")) { System.out.print(\"\\nType of ward : \");ward=readString(); out.println(\"Type of ward : \"+ward); out.println(\"\\n*************************************************************************\\n\"); System.out.print(ward+\" ward is alloted Successfully\\n\"); } else {out.println(\"*************************************************************************\\n\");} out.close(); pressAnyKeyToContinue(); } catch(FileNotFoundException ex) { System.out.println( \"Unable to open file '\" + fileName + \"'\"); } catch (IOException e) { System.out.println(\"Error writing or Reading to file '\"+ fileName +\"'\"); } } void history() { System.out.print(\"\\n\\nEnter the patient's file name to be opened : \"); String fileName=scan.next(); String line = null; try { FileReader fileReader = new FileReader(fileName+\".txt\"); BufferedReader bufferedReader = new BufferedReader(fileReader); System.out.print(\"\\n\\n\\n\\n\\t\\t\\t\\t........................................ Full Medical History of '\"+fileName+\"' ........................................\\n\\n\\n\\n\"); while((line = bufferedReader.readLine()) != null) { System.out.println(line); } pressAnyKeyToContinue(); bufferedReader.close(); } catch(FileNotFoundException ex) { System.out.println( \"Unable to open file '\" + fileName + \"'\"); } catch(IOException ex) { System.out.println( \"Error reading file '\" + fileName + \"'\"); } } void bill() { getCurrentTimeUsingDate(); int days; double wcharge; double doc; double ser; System.out.println(\"\\t\\t\\t\\t\\t\\t \"); System.out.print(\"\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t E-HEALTH CARE MANAGEMENT SYSTEM \\n\\n\"); System.out.println(\"\\t\\t\\t\\t\\t\\t \"); System.out.print(\"Enter the patient's file name to get the Bill: \"); String fileName=scan.next(); String line = null; try { FileReader fileReader = new FileReader(fileName+\".txt\"); PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(fileName+\".txt\", true))); BufferedReader bufferedReader = new BufferedReader(fileReader); System.out.print(\"Date: \"+dadm); System.out.println(\"\\n\\n\\n\\n\\t\\t\\t\\tDetails of the patient:\\n\\n\\n\\n\"); while((line = bufferedReader.readLine()) != null) { System.out.println(line); } System.out.print(\"\\t\\t\\t\\t\\t\\t \"); System.out.println(\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tBill of the patient:\"); System.out.print(\"\\t\\t\\t\\t\\t\\t \\n\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\tNo.of days patient stayed:\");days=scan.nextInt(); System.out.print(\"\\t\\t\\t\\t\\t\\tWard charges/day:\");wcharge=scan.nextDouble(); System.out.print(\"\\n\\t\\t\\t\\t\\t\\tTotal ward charges:\"+(wcharge*days)); System.out.print(\"\\n\\t\\t\\t\\t\\t\\tDoctor's fee:\");doc=scan.nextDouble(); System.out.print(\"\\n\\t\\t\\t\\t\\t\\tService charges:\");ser=scan.nextDouble(); System.out.print(\"\\n\\t\\t\\t\\t\\t\\tTOTAL AMOUNT:\"+((wcharge*days)+doc+ser)); out.println(\"Total Bill:\"+((wcharge*days)+doc+ser)); System.out.print(\"\\n\\t\\t\\t\\t\\t\\t \\n\"); out.close(); bufferedReader.close(); } catch(FileNotFoundException ex) { System.out.println( \"Unable to open file '\" + fileName + \"'\"); } catch(IOException ex) { System.out.println( \"Error reading file '\" + fileName + \"'\"); } pressAnyKeyToContinue(); } void exit() { System.out.print(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\t\\t\\t\\t\\t\\n\"); System.out.print(\"\\t\\t\\t\\t\\t \\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| THANK YOU FOR USING |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| E-HEALTH CARE MANAGEMENT SYSTEM |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t| -Brought To You by Fahad,Omer and Yaseen |\\n\"); System.out.print(\"\\t\\t\\t\\t\\t||\\n\"); System.out.print(\"\\t\\t\\t\\t\\t\\n\\n\\n\\n\\t\\t\\t\\t\\t\"); System.exit(0); } void info() { System.out.println(\"\\n\\nE-Health care management system is command-driven application that helps to manage the record of the patient's as well as generate their hospital bills.\"); System.out.print(\"\\t\\t\\t\\t\\n\"); System.out.print(\"\\t\\t\\t\\t\\tOptions | Description\\n\"); System.out.print(\"\\t\\t\\t\\t\\n\"); System.out.println(\"\\t\\t\\t\\t 1 >> Add New Patient Record | A new patient file can be created by using this module.\"); System.out.println(\"\\t\\t\\t\\t 2 >> Add Diagnosis Information | Adding day-to-day evaluation of the patient or the diagnosis report in the existing file.\"); System.out.println(\"\\t\\t\\t\\t 3 >> History of the Patient | Check the previous or existing details of particular patient by using their file name.\"); System.out.println(\"\\t\\t\\t\\t 4 >> Bill of the patient | Generates the bill of the patient with displaying the details.\"); System.out.println(\"\\t\\t\\t\\t 5 >> Help | Provide the help documentation.\"); System.out.println(\"\\t\\t\\t\\t 6 >> Exit | Exits the application.\"); pressAnyKeyToContinue(); } } public class Ehospital { public static void main (String args[]) { Info i=new Info(); i.login(); i.menu(); } }","dependencies":[]}}
{"project_id":41,"chunk_id":0,"content":{"main_file_path":"Email Client Software Project Java\\FetchMail\\src\\mail2.java","main_file_content":"import javax.swing.*; import java.awt.*; import java.awt.event.*; import java.io.BufferedReader; import java.io.InputStreamReader; import java.util.Properties; import javax.mail.*; @SuppressWarnings(\"serial\") public class mail2 extends JFrame { static String popServer; static String popUser; static String popPassword; public static void main(String args[]) { JFrame frame = new mailframe(); frame.setVisible(true); } } @SuppressWarnings(\"serial\") class mailframe extends JFrame implements ActionListener { JLabel lserver =new JLabel(\"SMTP Server\"); static JTextField tserver = new JTextField(15); JLabel luname =new JLabel(\"UserName\"); static JTextField tuname = new JTextField(15); JLabel lpass =new JLabel(\"Password\"); static JPasswordField tpass = new JPasswordField(15); static JTextArea message = new JTextArea(30,72); public mailframe() { this.setSize(850,500); this.setLayout(new FlowLayout(FlowLayout.LEFT)); addWindowListener(new WindowAdapter() { public void windowClosing(WindowEvent e) { System.exit(0); } } ); tpass.setEchoChar('*'); this.add(lserver); this.add(tserver); this.add(luname); this.add(tuname); this.add(lpass); this.add(tpass); JButton b1 =new JButton(\"Fetch\"); b1.addActionListener(this); this.add(b1); message.setEditable(false); JScrollPane sp = new JScrollPane(); message.add(sp); this.add(message); } public void actionPerformed(ActionEvent e) { System.out.println(\"debug button\"); fetchmail(); } @SuppressWarnings(\"deprecation\") private void fetchmail() { String popServer; String popUser; String popPassword; popServer = mailframe.tserver.getText(); popUser = mailframe.tuname.getText(); popPassword = mailframe.tpass.getText(); System.out.println(popServer); try { receive(popServer, popUser, popPassword); } catch (Exception ex) { System.out.println(\"Usage: java jmail\"+\" smtpServer address password \"); } } public static void receive(String popServer, String popUser, String popPassword){ Store store=null; Folder folder=null; try { Properties props = System.getProperties(); Session session = Session.getDefaultInstance(props, null); store = session.getStore(\"pop3\"); store.connect(popServer, popUser, popPassword); folder = store.getDefaultFolder(); if (folder == null) throw new Exception(\"No default folder\"); folder = folder.getFolder(\"INBOX\"); if (folder == null) throw new Exception(\"No POP3 INBOX\"); folder.open(Folder.READ_ONLY); Message msgs[] = folder.getMessages(); BufferedReader reader = new BufferedReader (new InputStreamReader(System.in)); mailframe.message.setText(\"\"); int msgNum; for (msgNum = 0; msgNum < msgs.length; msgNum++) { System.out.println(msgNum +\": \"+ msgs[msgNum].getFrom()[0]+ \"\\t\" + msgs[msgNum].getSubject()); System.out.println(\"Do you want to read message? [YES to read/QUIT to end]\"); String line = reader.readLine(); String y = \"yes\"; int j = line.compareTo(y); if (j == 0) { msgs[msgNum].writeTo(System.out); Object content = msgs[msgNum].getContent(); if (content instanceof Multipart) { StringBuffer messageContent = new StringBuffer(); StringBuffer msg = new StringBuffer(); Multipart multipart = (Multipart) content; for (int i = 0; i < multipart.getCount(); i++) { Part part = (Part) multipart.getBodyPart(i); if (part.isMimeType(\"text/plain\")) { msg = messageContent.append(part.getContent().toString()); String msg1 = new String(); String from = new String(); String subj = new String(); int k ; k = msgNum; msg1 = msg.toString(); subj = msgs[msgNum].getSubject(); from = msgs[msgNum].getFrom()[0].toString(); mailframe.message.append(\"Message No:\"+(k+1)+\"\\n\"); mailframe.message.append(\"Message From:\"+from+\"\\n\"); mailframe.message.append(\"Message Subject:\"+subj+\"\\n\"); mailframe.message.append(\"\\n\"+msg1+\"\\n\"); } } } else { } } else { System.out.println(\"Closing Previous Message. Going For Next.\"); } } } catch (Exception ex) { ex.printStackTrace(); } finally { try { if (folder!=null) folder.close(false); if (store!=null) store.close(); } catch (Exception ex2) {ex2.printStackTrace();} } } }","dependencies":[{"file_path":"Email Client Software Project Java\\Project\\CODE.java","file_content":"import javax.swing.*; import java.awt.*; import java.awt.event.*; import java.io.BufferedReader; import java.io.InputStreamReader; import java.util.Properties; import javax.mail.*; @SuppressWarnings(\"serial\") public class mail2 extends JFrame { static String popServer; static String popUser; static String popPassword; public static void main(String args[]) { JFrame frame = new mailframe(); frame.setVisible(true); } } @SuppressWarnings(\"serial\") class mailframe extends JFrame implements ActionListener { JLabel lserver =new JLabel(\"SMTP Server\"); static JTextField tserver = new JTextField(15); JLabel luname =new JLabel(\"UserName\"); static JTextField tuname = new JTextField(15); JLabel lpass =new JLabel(\"Password\"); static JPasswordField tpass = new JPasswordField(15); static JTextArea message = new JTextArea(30,72); public mailframe() { this.setSize(850,500); this.setLayout(new FlowLayout(FlowLayout.LEFT)); addWindowListener(new WindowAdapter() { public void windowClosing(WindowEvent e) { System.exit(0); } } ); tpass.setEchoChar('*'); this.add(lserver); this.add(tserver); this.add(luname); this.add(tuname); this.add(lpass); this.add(tpass); JButton b1 =new JButton(\"Fetch\"); b1.addActionListener(this); this.add(b1); message.setEditable(false); JScrollPane sp = new JScrollPane(); message.add(sp); this.add(message); } public void actionPerformed(ActionEvent e) { System.out.println(\"debug button\"); fetchmail(); } @SuppressWarnings(\"deprecation\") private void fetchmail() { String popServer; String popUser; String popPassword; popServer = mailframe.tserver.getText(); popUser = mailframe.tuname.getText(); popPassword = mailframe.tpass.getText(); System.out.println(popServer); try { receive(popServer, popUser, popPassword); } catch (Exception ex) { System.out.println(\"Usage: java jmail\"+\" smtpServer address password \"); } } public static void receive(String popServer, String popUser, String popPassword){ Store store=null; Folder folder=null; try { Properties props = System.getProperties(); Session session = Session.getDefaultInstance(props, null); store = session.getStore(\"pop3\"); store.connect(popServer, popUser, popPassword); folder = store.getDefaultFolder(); if (folder == null) throw new Exception(\"No default folder\"); folder = folder.getFolder(\"INBOX\"); if (folder == null) throw new Exception(\"No POP3 INBOX\"); folder.open(Folder.READ_ONLY); Message msgs[] = folder.getMessages(); BufferedReader reader = new BufferedReader (new InputStreamReader(System.in)); mailframe.message.setText(\"\"); int msgNum; for (msgNum = 0; msgNum < msgs.length; msgNum++) { System.out.println(msgNum +\": \"+ msgs[msgNum].getFrom()[0]+ \"\\t\" + msgs[msgNum].getSubject()); System.out.println(\"Do you want to read message? [YES to read/QUIT to end]\"); String line = reader.readLine(); String y = \"yes\"; int j = line.compareTo(y); if (j == 0) { msgs[msgNum].writeTo(System.out); Object content = msgs[msgNum].getContent(); if (content instanceof Multipart) { StringBuffer messageContent = new StringBuffer(); StringBuffer msg = new StringBuffer(); Multipart multipart = (Multipart) content; for (int i = 0; i < multipart.getCount(); i++) { Part part = (Part) multipart.getBodyPart(i); if (part.isMimeType(\"text/plain\")) { msg = messageContent.append(part.getContent().toString()); String msg1 = new String(); String from = new String(); String subj = new String(); int k ; k = msgNum; msg1 = msg.toString(); subj = msgs[msgNum].getSubject(); from = msgs[msgNum].getFrom()[0].toString(); mailframe.message.append(\"Message No:\"+(k+1)+\"\\n\"); mailframe.message.append(\"Message From:\"+from+\"\\n\"); mailframe.message.append(\"Message Subject:\"+subj+\"\\n\"); mailframe.message.append(\"\\n\"+msg1+\"\\n\"); } } } else { } } else { System.out.println(\"Closing Previous Message. Going For Next.\"); } } } catch (Exception ex) { ex.printStackTrace(); } finally { try { if (folder!=null) folder.close(false); if (store!=null) store.close(); } catch (Exception ex2) {ex2.printStackTrace();} } } }"}]}}
{"project_id":41,"chunk_id":0,"content":{"main_file_path":"Email Client Software Project Java\\Project\\CODE.java","main_file_content":"import javax.swing.*; import java.awt.*; import java.awt.event.*; import java.io.BufferedReader; import java.io.InputStreamReader; import java.util.Properties; import javax.mail.*; @SuppressWarnings(\"serial\") public class mail2 extends JFrame { static String popServer; static String popUser; static String popPassword; public static void main(String args[]) { JFrame frame = new mailframe(); frame.setVisible(true); } } @SuppressWarnings(\"serial\") class mailframe extends JFrame implements ActionListener { JLabel lserver =new JLabel(\"SMTP Server\"); static JTextField tserver = new JTextField(15); JLabel luname =new JLabel(\"UserName\"); static JTextField tuname = new JTextField(15); JLabel lpass =new JLabel(\"Password\"); static JPasswordField tpass = new JPasswordField(15); static JTextArea message = new JTextArea(30,72); public mailframe() { this.setSize(850,500); this.setLayout(new FlowLayout(FlowLayout.LEFT)); addWindowListener(new WindowAdapter() { public void windowClosing(WindowEvent e) { System.exit(0); } } ); tpass.setEchoChar('*'); this.add(lserver); this.add(tserver); this.add(luname); this.add(tuname); this.add(lpass); this.add(tpass); JButton b1 =new JButton(\"Fetch\"); b1.addActionListener(this); this.add(b1); message.setEditable(false); JScrollPane sp = new JScrollPane(); message.add(sp); this.add(message); } public void actionPerformed(ActionEvent e) { System.out.println(\"debug button\"); fetchmail(); } @SuppressWarnings(\"deprecation\") private void fetchmail() { String popServer; String popUser; String popPassword; popServer = mailframe.tserver.getText(); popUser = mailframe.tuname.getText(); popPassword = mailframe.tpass.getText(); System.out.println(popServer); try { receive(popServer, popUser, popPassword); } catch (Exception ex) { System.out.println(\"Usage: java jmail\"+\" smtpServer address password \"); } } public static void receive(String popServer, String popUser, String popPassword){ Store store=null; Folder folder=null; try { Properties props = System.getProperties(); Session session = Session.getDefaultInstance(props, null); store = session.getStore(\"pop3\"); store.connect(popServer, popUser, popPassword); folder = store.getDefaultFolder(); if (folder == null) throw new Exception(\"No default folder\"); folder = folder.getFolder(\"INBOX\"); if (folder == null) throw new Exception(\"No POP3 INBOX\"); folder.open(Folder.READ_ONLY); Message msgs[] = folder.getMessages(); BufferedReader reader = new BufferedReader (new InputStreamReader(System.in)); mailframe.message.setText(\"\"); int msgNum; for (msgNum = 0; msgNum < msgs.length; msgNum++) { System.out.println(msgNum +\": \"+ msgs[msgNum].getFrom()[0]+ \"\\t\" + msgs[msgNum].getSubject()); System.out.println(\"Do you want to read message? [YES to read/QUIT to end]\"); String line = reader.readLine(); String y = \"yes\"; int j = line.compareTo(y); if (j == 0) { msgs[msgNum].writeTo(System.out); Object content = msgs[msgNum].getContent(); if (content instanceof Multipart) { StringBuffer messageContent = new StringBuffer(); StringBuffer msg = new StringBuffer(); Multipart multipart = (Multipart) content; for (int i = 0; i < multipart.getCount(); i++) { Part part = (Part) multipart.getBodyPart(i); if (part.isMimeType(\"text/plain\")) { msg = messageContent.append(part.getContent().toString()); String msg1 = new String(); String from = new String(); String subj = new String(); int k ; k = msgNum; msg1 = msg.toString(); subj = msgs[msgNum].getSubject(); from = msgs[msgNum].getFrom()[0].toString(); mailframe.message.append(\"Message No:\"+(k+1)+\"\\n\"); mailframe.message.append(\"Message From:\"+from+\"\\n\"); mailframe.message.append(\"Message Subject:\"+subj+\"\\n\"); mailframe.message.append(\"\\n\"+msg1+\"\\n\"); } } } else { } } else { System.out.println(\"Closing Previous Message. Going For Next.\"); } } } catch (Exception ex) { ex.printStackTrace(); } finally { try { if (folder!=null) folder.close(false); if (store!=null) store.close(); } catch (Exception ex2) {ex2.printStackTrace();} } } }","dependencies":[]}}
{"project_id":42,"chunk_id":0,"content":{"main_file_path":"Email-master\\Email\\src\\Mail.java","main_file_content":"import java.awt.Color; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.util.Properties; import java.util.regex.Pattern; import javax.mail.Authenticator; import javax.mail.Message; import javax.mail.MessagingException; import javax.mail.PasswordAuthentication; import javax.mail.Session; import javax.mail.Transport; import javax.mail.internet.InternetAddress; import javax.mail.internet.MimeMessage; import javax.swing.BorderFactory; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JPanel; import javax.swing.JPasswordField; import javax.swing.JScrollPane; import javax.swing.JTextArea; import javax.swing.JTextField; public class Mail extends JFrame{ private static final long serialVersionUID = 1L; JPanel panel; JPanel panel2; JTextField recipient; JTextField sender; JTextField subject; JTextArea mainmessage; JPasswordField psw; JLabel label; JLabel label2; JLabel label3; JLabel label4; JButton btn; public Mail() { panel = new JPanel(); panel.setLayout(null); label = new JLabel(\"Recipient\"); label.setBounds(50, 10, 100, 40); panel.add(label); recipient = new JTextField(); recipient.setBounds(120, 15, 200, 30); recipient.setFocusable(true); panel.add(recipient); btn = new JButton(\"Submit\"); btn.setBounds(150, 70, 100, 30); panel.add(btn); btn.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { String rec = recipient.getText(); if(rec.isEmpty()) { JOptionPane.showMessageDialog(null, \"You must enter a recipient\"); } else { if(!isValid(rec)) { JOptionPane.showMessageDialog(null, \"The email you entered is not valid\"); } else{ sendMail(rec); } } } }); this.setContentPane(panel); this.setTitle(\"Sent an Email\"); this.setLocationRelativeTo(null); this.setResizable(false); this.setSize(400, 150); this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); this.setVisible(true); } @SuppressWarnings(\"deprecation\") public void sendMail(String recipient){ panel2 = new JPanel(); panel2.setLayout(null); System.out.println(\"Panel is changed waiting for your info & message\"); Properties prop = new Properties(); prop.put(\"mail.smtp.auth\", \"true\"); prop.put(\"mail.smtp.starttls.enable\", \"true\"); prop.put(\"mail.smtp.host\", \"smtp.gmail.com\"); prop.put(\"mail.smtp.port\", \"587\"); label = new JLabel(\"Enter your Email\"); label.setBounds(20, 10, 100, 40); panel2.add(label); sender = new JTextField(); sender.setBounds(170, 15, 180, 30); sender.setFocusable(true); panel2.add(sender); label2 = new JLabel(\"Enter your Password\"); label2.setBounds(20, 60, 140, 40); panel2.add(label2); psw = new JPasswordField(20); psw.setBounds(170, 65, 180, 30); panel2.add(psw); label3 = new JLabel(\"Subject\"); label3.setBounds(70, 120, 60, 40); panel2.add(label3); subject = new JTextField(); subject.setBounds(130, 125, 260, 30); panel2.add(subject); label4 = new JLabel(\"Context\"); label4.setBounds(70, 170, 60, 40); panel2.add(label4); mainmessage = new JTextArea(); mainmessage.setLineWrap(true); mainmessage.setBorder(BorderFactory.createLineBorder(Color.BLACK)); JScrollPane scroll = new JScrollPane(mainmessage); scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS); scroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER); scroll.setBounds(130, 175, 276, 230); panel2.add(scroll); btn = new JButton(\"Send\"); btn.setBounds(100, 420, 100, 30); panel2.add(btn); btn.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { String myAccEmail = sender.getText(); String myAccPass = psw.getText(); String mailSubject = subject.getText(); String mailMessage = mainmessage.getText(); if(myAccEmail.isEmpty()) { JOptionPane.showMessageDialog(null, \"You must enter your email\"); } else if(myAccPass.isEmpty()) { JOptionPane.showMessageDialog(null, \"You must enter a password\"); } else if(myAccPass.length() < 5) { JOptionPane.showMessageDialog(null, \"Password must have 5 or more characters\"); } else if(mailMessage.isEmpty()) { JOptionPane.showMessageDialog(null, \"There must be a message!\"); } else { if(!isValid(myAccEmail)) { JOptionPane.showMessageDialog(null, \"The email you entered is not valid\"); } else{ Session session = Session.getInstance(prop, new Authenticator() { @Override protected PasswordAuthentication getPasswordAuthentication() { return new PasswordAuthentication(myAccEmail, myAccPass); } }); Message message = prepareMessage(session, myAccEmail, recipient, mailSubject, mailMessage); try { Transport.send(message); System.out.println(\"Message sent successfully\"); } catch (MessagingException arg0) { arg0.printStackTrace(); JOptionPane.showMessageDialog(null, arg0); } } } } }); btn = new JButton(\"Close\"); btn.setBounds(300, 420, 100, 30); panel2.add(btn); btn.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { System.exit(0); } }); this.setContentPane(panel2); this.setTitle(\"Sent an Email\"); this.setLocation(0, 0); this.setResizable(false); this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); this.setSize(500, 500); this.setVisible(true); } private static Message prepareMessage(Session session, String myAccEmail, String recipient, String mailSubject, String mailMessage){ try { Message msg = new MimeMessage(session); msg.setFrom(new InternetAddress(myAccEmail)); msg.setRecipient(Message.RecipientType.TO, new InternetAddress(recipient)); msg.setSubject(mailSubject); msg.setText(mailMessage); return msg; } catch (MessagingException e) { e.printStackTrace(); JOptionPane.showMessageDialog(null, e); } return null; } public static boolean isValid(String email) { String emailRegex = \"^[a-zA-Z0-9_+&*-]+(?:\\\\.\"+ \"[a-zA-Z0-9_+&*-]+)*@\" + \"(?:[a-zA-Z0-9-]+\\\\.)+[a-z\" + \"A-Z]{2,7}$\"; Pattern pat = Pattern.compile(emailRegex); if (email == null) return false; return pat.matcher(email).matches(); } }","dependencies":[]}}
{"project_id":42,"chunk_id":0,"content":{"main_file_path":"Email-master\\Email\\src\\Main.java","main_file_content":"public class Main { public static void main(String[] args) { new Mail(); } }","dependencies":[{"file_path":"Email-master\\Email\\src\\Mail.java","file_content":"import java.awt.Color; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.util.Properties; import java.util.regex.Pattern; import javax.mail.Authenticator; import javax.mail.Message; import javax.mail.MessagingException; import javax.mail.PasswordAuthentication; import javax.mail.Session; import javax.mail.Transport; import javax.mail.internet.InternetAddress; import javax.mail.internet.MimeMessage; import javax.swing.BorderFactory; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JPanel; import javax.swing.JPasswordField; import javax.swing.JScrollPane; import javax.swing.JTextArea; import javax.swing.JTextField; public class Mail extends JFrame{ private static final long serialVersionUID = 1L; JPanel panel; JPanel panel2; JTextField recipient; JTextField sender; JTextField subject; JTextArea mainmessage; JPasswordField psw; JLabel label; JLabel label2; JLabel label3; JLabel label4; JButton btn; public Mail() { panel = new JPanel(); panel.setLayout(null); label = new JLabel(\"Recipient\"); label.setBounds(50, 10, 100, 40); panel.add(label); recipient = new JTextField(); recipient.setBounds(120, 15, 200, 30); recipient.setFocusable(true); panel.add(recipient); btn = new JButton(\"Submit\"); btn.setBounds(150, 70, 100, 30); panel.add(btn); btn.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { String rec = recipient.getText(); if(rec.isEmpty()) { JOptionPane.showMessageDialog(null, \"You must enter a recipient\"); } else { if(!isValid(rec)) { JOptionPane.showMessageDialog(null, \"The email you entered is not valid\"); } else{ sendMail(rec); } } } }); this.setContentPane(panel); this.setTitle(\"Sent an Email\"); this.setLocationRelativeTo(null); this.setResizable(false); this.setSize(400, 150); this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); this.setVisible(true); } @SuppressWarnings(\"deprecation\") public void sendMail(String recipient){ panel2 = new JPanel(); panel2.setLayout(null); System.out.println(\"Panel is changed waiting for your info & message\"); Properties prop = new Properties(); prop.put(\"mail.smtp.auth\", \"true\"); prop.put(\"mail.smtp.starttls.enable\", \"true\"); prop.put(\"mail.smtp.host\", \"smtp.gmail.com\"); prop.put(\"mail.smtp.port\", \"587\"); label = new JLabel(\"Enter your Email\"); label.setBounds(20, 10, 100, 40); panel2.add(label); sender = new JTextField(); sender.setBounds(170, 15, 180, 30); sender.setFocusable(true); panel2.add(sender); label2 = new JLabel(\"Enter your Password\"); label2.setBounds(20, 60, 140, 40); panel2.add(label2); psw = new JPasswordField(20); psw.setBounds(170, 65, 180, 30); panel2.add(psw); label3 = new JLabel(\"Subject\"); label3.setBounds(70, 120, 60, 40); panel2.add(label3); subject = new JTextField(); subject.setBounds(130, 125, 260, 30); panel2.add(subject); label4 = new JLabel(\"Context\"); label4.setBounds(70, 170, 60, 40); panel2.add(label4); mainmessage = new JTextArea(); mainmessage.setLineWrap(true); mainmessage.setBorder(BorderFactory.createLineBorder(Color.BLACK)); JScrollPane scroll = new JScrollPane(mainmessage); scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS); scroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER); scroll.setBounds(130, 175, 276, 230); panel2.add(scroll); btn = new JButton(\"Send\"); btn.setBounds(100, 420, 100, 30); panel2.add(btn); btn.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { String myAccEmail = sender.getText(); String myAccPass = psw.getText(); String mailSubject = subject.getText(); String mailMessage = mainmessage.getText(); if(myAccEmail.isEmpty()) { JOptionPane.showMessageDialog(null, \"You must enter your email\"); } else if(myAccPass.isEmpty()) { JOptionPane.showMessageDialog(null, \"You must enter a password\"); } else if(myAccPass.length() < 5) { JOptionPane.showMessageDialog(null, \"Password must have 5 or more characters\"); } else if(mailMessage.isEmpty()) { JOptionPane.showMessageDialog(null, \"There must be a message!\"); } else { if(!isValid(myAccEmail)) { JOptionPane.showMessageDialog(null, \"The email you entered is not valid\"); } else{ Session session = Session.getInstance(prop, new Authenticator() { @Override protected PasswordAuthentication getPasswordAuthentication() { return new PasswordAuthentication(myAccEmail, myAccPass); } }); Message message = prepareMessage(session, myAccEmail, recipient, mailSubject, mailMessage); try { Transport.send(message); System.out.println(\"Message sent successfully\"); } catch (MessagingException arg0) { arg0.printStackTrace(); JOptionPane.showMessageDialog(null, arg0); } } } } }); btn = new JButton(\"Close\"); btn.setBounds(300, 420, 100, 30); panel2.add(btn); btn.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { System.exit(0); } }); this.setContentPane(panel2); this.setTitle(\"Sent an Email\"); this.setLocation(0, 0); this.setResizable(false); this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); this.setSize(500, 500); this.setVisible(true); } private static Message prepareMessage(Session session, String myAccEmail, String recipient, String mailSubject, String mailMessage){ try { Message msg = new MimeMessage(session); msg.setFrom(new InternetAddress(myAccEmail)); msg.setRecipient(Message.RecipientType.TO, new InternetAddress(recipient)); msg.setSubject(mailSubject); msg.setText(mailMessage); return msg; } catch (MessagingException e) { e.printStackTrace(); JOptionPane.showMessageDialog(null, e); } return null; } public static boolean isValid(String email) { String emailRegex = \"^[a-zA-Z0-9_+&*-]+(?:\\\\.\"+ \"[a-zA-Z0-9_+&*-]+)*@\" + \"(?:[a-zA-Z0-9-]+\\\\.)+[a-z\" + \"A-Z]{2,7}$\"; Pattern pat = Pattern.compile(emailRegex); if (email == null) return false; return pat.matcher(email).matches(); } }"}]}}
{"project_id":43,"chunk_id":0,"content":{"main_file_path":"Email_Generator\\src\\emailgenerator\\EmailBackProgram.java","main_file_content":"package Email_App; import java.util.Scanner; public class Email { private String firstName; private String lastName; private String password; private String department; private String email; private int defaultPasswordLength=8; private int codelen=5; private String Vcode; private String company=\"drngpit.ac.in\"; private String name; public Email(String firstName, String lastName) { this.firstName = firstName; this.lastName = lastName; System.out.println(\"Kindly ! Enter department for email creation dear \"+this.firstName+\" \"+this.lastName); this.department=setDepartment(); System.out.println(\"Department:\"+department); this.password=randomPass(defaultPasswordLength); System.out.println(\"New Password :\"+password); this.name=firstName+lastName; this.Vcode=vcode(codelen); System.out.println(\"Your verification code : \"+Vcode); email=name.toLowerCase()+\".\"+department+\"@\"+company; System.out.println(\"Official mail :\"+email); } private String setDepartment(){ System.out.println(\"Enter the department Id\\nSales : 1\\nDevelopment : 2\\nAccounting : 3\"); Scanner in=new Scanner(System.in); int dep=in.nextInt(); if(dep==1){ return \"sales\"; } else if(dep==2){ return\"dev\"; } else if(dep==3){ return \"acc\"; } return\"\"; } private String randomPass(int length){ String password=\"ABCEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%\"; char[]pass=new char[length]; for(int i=0;i<length;i++){ int rand=(int)(Math.random()*password.length()); pass[i]=password.charAt(rand); } return new String(pass); } private String vcode(int codelen){ String samcode=\"1234567890\"; char[]code=new char[codelen]; for(int i=0;i<codelen;i++){ int c=(int)(Math.random()*samcode.length()); code[i]=samcode.charAt(c); } return new String(code); } public void setPassword(String password) { this.password = password; } public String getDepartment() { return department; } public void setDepartment(String department) { this.department = department; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getPassword(){ return password; } public String getFirstName() { return firstName; } public void setFirstName(String firstName) { this.firstName = firstName; } public String getVcode() { return Vcode; } public String getDept(String dep){ if(dep.equals(\"dev\")){ return \"Developers\"; } else if(dep.equals(\"acc\")){ return \"Accounts\"; } else if(dep.equals(\"sales\")){ return \"Sales\"; } return \"\"; } public String showInfo(){ return \"Name : \"+name+\"\\nOfficial email : \"+email+\"\\nDepartment : \"+getDept(department); } }","dependencies":[]}}
{"project_id":43,"chunk_id":0,"content":{"main_file_path":"Email_Generator\\src\\emailgenerator\\EmailMainProgram.java","main_file_content":"package Email_App; import com.sun.security.jgss.GSSUtil; import java.sql.SQLOutput; import java.util.Scanner; public class EmailApp { public static void main(String[] args) { System.out.println(\"Generate Organization's Email ==>\"); Scanner sc=new Scanner(System.in); System.out.println(\"Generating the email...\"); System.out.println(\"Enter firstname :\"); String first=sc.nextLine(); System.out.println(\"Enter Lastname :\"); String second=sc.nextLine(); Email em=new Email(first,second); while(true) { System.out.println(\"1 : Information \"); System.out.println(\"2 : Change Email\"); System.out.println(\"3 : Change Password\"); System.out.println(\"4 : Disclose Password\"); System.out.println(\"5 : Exit\"); System.out.println(\"Enter operation code :\"); int a = sc.nextInt(); switch (a) { case 1: System.out.println(em.showInfo()); break; case 2: System.out.println(\"Enter alternate email prefix :\"); sc.nextLine(); String alt = sc.nextLine(); em.setEmail(alt+\"@drngpit.ac.in\"); break; case 3: System.out.println(\"Enter the verification code :\"); sc.nextLine(); String s = sc.nextLine(); if (s.equals(em.getVcode())) { System.out.println(\"Enter alternate password :\"); String p = sc.nextLine(); em.setPassword(p); } else { System.out.println(\"Please Enter valid verification code !!!\"); } System.out.println(\"Password updated successfully !!!\"); break; case 4: System.out.println(\"Password disclose warning !!!\"); System.out.println(\"Enter the verification code :\"); sc.nextLine(); String s1 = sc.nextLine(); if (s1.equals(em.getVcode())) { System.out.println(\"Your password : \" + em.getPassword()); } else { System.out.println(\"Please Enter valid verification code !!!\"); } case 5: System.out.println(\"Have a great day ahead ! BYE \"); return ; } } } }","dependencies":[{"file_path":"Email_Generator\\src\\emailgenerator\\EmailBackProgram.java","file_content":"package Email_App; import java.util.Scanner; public class Email { private String firstName; private String lastName; private String password; private String department; private String email; private int defaultPasswordLength=8; private int codelen=5; private String Vcode; private String company=\"drngpit.ac.in\"; private String name; public Email(String firstName, String lastName) { this.firstName = firstName; this.lastName = lastName; System.out.println(\"Kindly ! Enter department for email creation dear \"+this.firstName+\" \"+this.lastName); this.department=setDepartment(); System.out.println(\"Department:\"+department); this.password=randomPass(defaultPasswordLength); System.out.println(\"New Password :\"+password); this.name=firstName+lastName; this.Vcode=vcode(codelen); System.out.println(\"Your verification code : \"+Vcode); email=name.toLowerCase()+\".\"+department+\"@\"+company; System.out.println(\"Official mail :\"+email); } private String setDepartment(){ System.out.println(\"Enter the department Id\\nSales : 1\\nDevelopment : 2\\nAccounting : 3\"); Scanner in=new Scanner(System.in); int dep=in.nextInt(); if(dep==1){ return \"sales\"; } else if(dep==2){ return\"dev\"; } else if(dep==3){ return \"acc\"; } return\"\"; } private String randomPass(int length){ String password=\"ABCEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%\"; char[]pass=new char[length]; for(int i=0;i<length;i++){ int rand=(int)(Math.random()*password.length()); pass[i]=password.charAt(rand); } return new String(pass); } private String vcode(int codelen){ String samcode=\"1234567890\"; char[]code=new char[codelen]; for(int i=0;i<codelen;i++){ int c=(int)(Math.random()*samcode.length()); code[i]=samcode.charAt(c); } return new String(code); } public void setPassword(String password) { this.password = password; } public String getDepartment() { return department; } public void setDepartment(String department) { this.department = department; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getPassword(){ return password; } public String getFirstName() { return firstName; } public void setFirstName(String firstName) { this.firstName = firstName; } public String getVcode() { return Vcode; } public String getDept(String dep){ if(dep.equals(\"dev\")){ return \"Developers\"; } else if(dep.equals(\"acc\")){ return \"Accounts\"; } else if(dep.equals(\"sales\")){ return \"Sales\"; } return \"\"; } public String showInfo(){ return \"Name : \"+name+\"\\nOfficial email : \"+email+\"\\nDepartment : \"+getDept(department); } }"}]}}
{"project_id":44,"chunk_id":0,"content":{"main_file_path":"employee-management-system-master\\EmployManagementSystem.java","main_file_content":"import java.util.*; import java.io.*; class MainMenu { public void menu() { System.out.println(\"\\t\\t*******************************************\"); System.out.println(\"\\t\\t\\t EMPLOYEE MANAGEMENT SYSTEM\"); System.out.println(\"\\t\\t*******************************************\"); System.out.println(\"\\t\\t\\t \"); System.out.println(\"\\t\\t\\t ~$ Abhinav Dubey\"); System.out.println(\"\\t\\t\\t \"); System.out.println(\"\\n\\nPress 1 : To Add an Employee Details\"); System.out.println(\"Press 2 : To See an Employee Details \"); System.out.println(\"Press 3 : To Remove an Employee\"); System.out.println(\"Press 4 : To Update Employee Details\"); System.out.println(\"Press 5 : To Exit the EMS Portal\"); } } class Employee_Add { public void createFile() { Scanner sc=new Scanner(System.in); EmployDetail emp=new EmployDetail(); emp.getInfo(); try{ File f1=new File(\"file\"+emp.employ_id+\".txt\"); if(f1.createNewFile()){ FileWriter myWriter = new FileWriter(\"file\"+emp.employ_id+\".txt\"); myWriter.write(\"Employee ID:\"+emp.employ_id+\"\\n\"+\"Employee Name :\"+emp.name+\"\\n\"+ \"Father's Name :\"+emp.father_name+\"\\n\"+\"Employee Contact :\"+emp.employ_contact+\"\\n\"+ \"Email Information :\"+emp.email+\"\\n\"+\"Employee position :\"+emp.position+\"\\n\"+ \"Employee Salary :\"+emp.employ_salary); myWriter.close(); System.out.println(\"\\nEmployee has been Added :)\\n\"); System.out.print(\"\\nPress Enter to Continue...\"); sc.nextLine(); } else { System.out.println(\"\\nEmployee already exists :(\"); System.out.print(\"\\nPress Enter to Continue...\"); sc.nextLine(); } } catch(Exception e){System.out.println(e);} } } class EmployDetail { String name; String father_name; String email; String position; String employ_id; String employ_salary; String employ_contact; public void getInfo() { Scanner sc=new Scanner(System.in); System.out.print(\"Enter Employee's name : \"); name=sc.nextLine(); System.out.print(\"Enter Employee's Father name -: \"); father_name=sc.nextLine(); System.out.print(\"Enter Employee's ID : \"); employ_id=sc.nextLine(); System.out.print(\"Enter Employee's Email ID ----: \"); email=sc.nextLine(); System.out.print(\"Enter Employee's Position ----: \"); position=sc.nextLine(); System.out.print(\"Enter Employee contact Info --: \"); employ_contact=sc.nextLine(); System.out.print(\"Enter Employee's Salary : \"); employ_salary=sc.nextLine(); } } class Employee_Show { public void viewFile(String s) throws Exception { File file = new File(\"file\"+s+\".txt\"); Scanner sc = new Scanner(file); while (sc.hasNextLine()) { System.out.println(sc.nextLine()); } } } class Employee_Remove { public void removeFile(String ID) { File file = new File(\"file\"+ID+\".txt\"); if(file.exists()) { if(file.delete()); { System.out.println(\"\\nEmployee has been removed Successfully\"); } } else { System.out.println(\"\\nEmployee does not exists :( \"); } } } class Employee_Update { public void updateFile(String s,String o,String n) throws IOException { File file = new File(\"file\"+s+\".txt\"); Scanner sc = new Scanner(file); String fileContext=\"\"; while (sc.hasNextLine()) { fileContext =fileContext+\"\\n\"+sc.nextLine(); } FileWriter myWriter = new FileWriter(\"file\"+s+\".txt\"); fileContext = fileContext.replaceAll(o,n); myWriter.write(fileContext); myWriter.close(); } } class CodeExit { public void out() { System.out.println(\"\\n*****************************************\"); System.out.println(\"$ cat Thank You For Using my Software :) \"); System.out.println(\"*****************************************\"); System.out.println(\"\\t\\t/~ <0d3d by Abhinav Dubey\\n\"); System.exit(0); } } class EmployManagementSystem { public static void main(String arv[]) { System.out.print(\"\\033[H\\033[2J\"); Scanner sc=new Scanner(System.in); Employee_Show epv =new Employee_Show(); int i=0; MainMenu obj1 = new MainMenu(); obj1.menu(); while(i<6) { System.out.print(\"\\nPlease Enter choice :\"); i=Integer.parseInt(sc.nextLine()); switch(i) { case 1: { Employee_Add ep =new Employee_Add(); ep.createFile(); System.out.print(\"\\033[H\\033[2J\"); obj1.menu(); break; } case 2: { System.out.print(\"\\nPlease Enter Employee's ID :\"); String s=sc.nextLine(); try { epv.viewFile(s);} catch(Exception e){System.out.println(e);} System.out.print(\"\\nPress Enter to Continue...\"); sc.nextLine(); System.out.print(\"\\033[H\\033[2J\"); obj1.menu(); break; } case 3: { System.out.print(\"\\nPlease Enter Employee's ID :\"); String s=sc.nextLine(); Employee_Remove epr =new Employee_Remove(); epr.removeFile(s); System.out.print(\"\\nPress Enter to Continue...\"); sc.nextLine(); System.out.print(\"\\033[H\\033[2J\"); obj1.menu(); break; } case 4: { System.out.print(\"\\nPlease Enter Employee's ID :\"); String I=sc.nextLine(); try { epv.viewFile(I); } catch(Exception e) { System.out.println(e); } Employee_Update epu = new Employee_Update(); System.out.print(\"Please Enter the detail you want to Update :\"); System.out.print(\"\\nFor Example :\\n\"); System.out.println(\"If you want to Change the Name, then Enter Current Name and Press Enter. Then write the new Name then Press Enter. It will Update the Name.\\n\"); String s=sc.nextLine(); System.out.print(\"Please Enter the Updated Info :\"); String n=sc.nextLine(); try { epu.updateFile(I,s,n); System.out.print(\"\\nPress Enter to Continue...\"); sc.nextLine(); System.out.print(\"\\033[H\\033[2J\"); obj1.menu(); break; } catch(IOException e) { System.out.println(e); } } case 5: { CodeExit obj = new CodeExit(); obj.out(); } } } } }","dependencies":[]}}
{"project_id":44,"chunk_id":0,"content":{"main_file_path":"employee-management-system-master\\Employee System\\UAP\\src\\NewEmployee\\CommissionEmployee.java","main_file_content":"package NewEmployee; public class CommissionEmployee extends Employee { double commission; double sale; public CommissionEmployee(String name, String id, String designation, double commission, double sale) { super(name, id, designation); this.commission = commission; this.sale = sale; } double getSalary(double sale) { return commission*sale; } @Override double getSalary() { return commission*sale; } @Override void increaseSalary(double amt) { commission += amt; } @Override String display() { super.display(); return super.display()+\"Commission: \"+commission; } }","dependencies":[{"file_path":"employee-management-system-master\\Employee System\\UAP\\src\\NewEmployee\\Employee.java","file_content":"package NewEmployee; abstract class Employee { private String name; private String id; private String designation; public Employee(String name, String id, String designation) { super(); this.name = name; this.id = id; this.designation = designation; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getId() { return id; } public void setId(String id) { this.id = id; } public String getDesignation() { return designation; } public void setDesignation(String designation) { this.designation = designation; } abstract double getSalary(); abstract void increaseSalary(double amt); String display() { return \"Name: \"+name+\" ID: \"+id+\" Designation: \"+designation; } }"}]}}
{"project_id":44,"chunk_id":0,"content":{"main_file_path":"employee-management-system-master\\Employee System\\UAP\\src\\NewEmployee\\connect.java","main_file_content":"package NewEmployee; import java.util.ArrayList; public class connect { String searchId = \"\"; double amt; static UapCse myUap = new UapCse(\"University of Asia Pacific\"); public void salaried(String name, String id, String des, double sal) { myUap.addNewEmployees(name, id, des, sal); } public void hourly(String name, String id, String des, double hr, int hw) { myUap.addNewEmployees(name, id, des, hr, hw); } public void commission(String name, String id, String des, double comissionRate, double comisionSale) { myUap.addNewEmployees(name, id, des, comissionRate, comisionSale); } public ArrayList<Employee> showres() { ArrayList<Employee> em = myUap.employees; return em; } public String searchID() { Employee e = myUap.findEmployee(searchId); String ob = e.display(); return ob; } public String updateSalary() { Employee e = myUap.findEmployee(searchId); if (e == null) { return \"No\"; } else { e.increaseSalary(amt); return \"Yes\"; } } public String Salary() { Employee e = myUap.findEmployee(searchId); String name = e.getName(); String id = e.getId(); double sal = e.getSalary(); return \"Name: \" + name + \" Id: \" + id + \" Salary: \" + sal; } }","dependencies":[{"file_path":"employee-management-system-master\\Employee System\\UAP\\src\\NewEmployee\\Employee.java","file_content":"package NewEmployee; abstract class Employee { private String name; private String id; private String designation; public Employee(String name, String id, String designation) { super(); this.name = name; this.id = id; this.designation = designation; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getId() { return id; } public void setId(String id) { this.id = id; } public String getDesignation() { return designation; } public void setDesignation(String designation) { this.designation = designation; } abstract double getSalary(); abstract void increaseSalary(double amt); String display() { return \"Name: \"+name+\" ID: \"+id+\" Designation: \"+designation; } }"},{"file_path":"employee-management-system-master\\Employee System\\UAP\\src\\NewEmployee\\UapCse.java","file_content":"package NewEmployee; import java.util.ArrayList; public class UapCse { ArrayList<Employee> employees = new ArrayList<>(); String name; public UapCse(String name) { super(); this.name = name; } private void addNewEmployee(Employee e) { employees.add(e); } public void addNewEmployees(String n, String i, String d, double s) { Employee E = new SalariedEmployee(n,i,d,s); addNewEmployee(E); } public void addNewEmployees(String n, String i, String d, double hr,int hw) { Employee E = new HourlyEmployee(n,i,d,hr,hw); addNewEmployee(E); } public void addNewEmployees(String n, String i, String d, double p,double s) { Employee E = new CommissionEmployee(n,i,d,p,s); addNewEmployee(E); } public Employee findEmployee(String id) { for (int i = 0; i < employees.size(); i++) { Employee E = employees.get(i); if(E.getId().equals(id)) { return E; } } return null; } }"}]}}
{"project_id":44,"chunk_id":0,"content":{"main_file_path":"employee-management-system-master\\Employee System\\UAP\\src\\NewEmployee\\Employee.java","main_file_content":"package NewEmployee; abstract class Employee { private String name; private String id; private String designation; public Employee(String name, String id, String designation) { super(); this.name = name; this.id = id; this.designation = designation; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getId() { return id; } public void setId(String id) { this.id = id; } public String getDesignation() { return designation; } public void setDesignation(String designation) { this.designation = designation; } abstract double getSalary(); abstract void increaseSalary(double amt); String display() { return \"Name: \"+name+\" ID: \"+id+\" Designation: \"+designation; } }","dependencies":[]}}
{"project_id":44,"chunk_id":0,"content":{"main_file_path":"employee-management-system-master\\Employee System\\UAP\\src\\NewEmployee\\FXML10Controller.java","main_file_content":"package NewEmployee; import java.io.IOException; import java.net.URL; import java.util.ArrayList; import java.util.ResourceBundle; import javafx.event.ActionEvent; import javafx.fxml.FXML; import javafx.fxml.FXMLLoader; import javafx.fxml.Initializable; import javafx.scene.Node; import javafx.scene.Parent; import javafx.scene.Scene; import javafx.scene.control.Button; import javafx.scene.control.ListView; import javafx.stage.Stage; public class FXML10Controller implements Initializable { @FXML private Button add10; @FXML private Button increase10; @FXML private Button salaryinfo10; @FXML private Button search10; @FXML private Button details10; @FXML private ListView<String> detailsbar10; @FXML private void details10Action(ActionEvent event) { connect b= new connect(); ArrayList<Employee> em=b.showres(); for(int i=0;i<em.size();i++) { Employee e=em.get(i); String ob= e.display(); detailsbar10.getItems().add(ob); } } @FXML void search10Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML9.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @FXML void add10Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML2.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @FXML void increase10Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML8.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @FXML void salaryinfo10Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML7.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @Override public void initialize(URL url, ResourceBundle rb) { } }","dependencies":[{"file_path":"employee-management-system-master\\Employee System\\UAP\\src\\NewEmployee\\Employee.java","file_content":"package NewEmployee; abstract class Employee { private String name; private String id; private String designation; public Employee(String name, String id, String designation) { super(); this.name = name; this.id = id; this.designation = designation; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getId() { return id; } public void setId(String id) { this.id = id; } public String getDesignation() { return designation; } public void setDesignation(String designation) { this.designation = designation; } abstract double getSalary(); abstract void increaseSalary(double amt); String display() { return \"Name: \"+name+\" ID: \"+id+\" Designation: \"+designation; } }"},{"file_path":"employee-management-system-master\\Employee System\\UAP\\src\\NewEmployee\\connect.java","file_content":"package NewEmployee; import java.util.ArrayList; public class connect { String searchId = \"\"; double amt; static UapCse myUap = new UapCse(\"University of Asia Pacific\"); public void salaried(String name, String id, String des, double sal) { myUap.addNewEmployees(name, id, des, sal); } public void hourly(String name, String id, String des, double hr, int hw) { myUap.addNewEmployees(name, id, des, hr, hw); } public void commission(String name, String id, String des, double comissionRate, double comisionSale) { myUap.addNewEmployees(name, id, des, comissionRate, comisionSale); } public ArrayList<Employee> showres() { ArrayList<Employee> em = myUap.employees; return em; } public String searchID() { Employee e = myUap.findEmployee(searchId); String ob = e.display(); return ob; } public String updateSalary() { Employee e = myUap.findEmployee(searchId); if (e == null) { return \"No\"; } else { e.increaseSalary(amt); return \"Yes\"; } } public String Salary() { Employee e = myUap.findEmployee(searchId); String name = e.getName(); String id = e.getId(); double sal = e.getSalary(); return \"Name: \" + name + \" Id: \" + id + \" Salary: \" + sal; } }"}]}}
{"project_id":44,"chunk_id":0,"content":{"main_file_path":"employee-management-system-master\\Employee System\\UAP\\src\\NewEmployee\\FXML2Controller.java","main_file_content":"package NewEmployee; import java.io.IOException; import java.net.URL; import java.util.ResourceBundle; import javafx.event.ActionEvent; import javafx.fxml.FXML; import javafx.fxml.FXMLLoader; import javafx.fxml.Initializable; import javafx.scene.Node; import javafx.scene.Parent; import javafx.scene.Scene; import javafx.scene.control.Button; import javafx.stage.Stage; public class FXML2Controller implements Initializable { @FXML private Button hourly; @FXML private Button commission; @FXML private Button add; @FXML private Button salaried; @FXML private Button salaryinfo2; @FXML private Button increase2; @FXML private Button search2; @FXML private Button all2; @FXML void all2Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML10.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @FXML void search2Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML9.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @FXML void salaryinfo2Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML7.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @FXML void increase2Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML8.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @FXML void salariedAction(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML4.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @FXML void addAction(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML3.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @FXML void hourlyAction(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML5.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @FXML void commissionAction(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML6.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @Override public void initialize(URL url, ResourceBundle rb) { } }","dependencies":[]}}
{"project_id":44,"chunk_id":0,"content":{"main_file_path":"employee-management-system-master\\Employee System\\UAP\\src\\NewEmployee\\FXML3Controller.java","main_file_content":"package NewEmployee; import java.io.IOException; import java.net.URL; import java.util.ResourceBundle; import javafx.event.ActionEvent; import javafx.fxml.FXML; import javafx.fxml.FXMLLoader; import javafx.fxml.Initializable; import javafx.scene.Node; import javafx.scene.Parent; import javafx.scene.Scene; import javafx.scene.control.Button; import javafx.stage.Stage; public class FXML3Controller implements Initializable { @FXML private Button add3; @FXML private Button salaryinfo3; @FXML private Button increase3; @FXML private Button search3; @FXML private Button all3; @FXML void all3Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML10.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @FXML void search3Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML9.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @FXML void salaryinfo3Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML7.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @FXML void add3Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML2.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @FXML void increase3Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML8.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @Override public void initialize(URL url, ResourceBundle rb) { } }","dependencies":[]}}
{"project_id":44,"chunk_id":0,"content":{"main_file_path":"employee-management-system-master\\Employee System\\UAP\\src\\NewEmployee\\FXML4Controller.java","main_file_content":"package NewEmployee; import java.io.IOException; import java.net.URL; import java.util.ResourceBundle; import javafx.event.ActionEvent; import javafx.fxml.FXML; import javafx.fxml.FXMLLoader; import javafx.fxml.Initializable; import javafx.scene.Node; import javafx.scene.Parent; import javafx.scene.Scene; import javafx.scene.control.Button; import javafx.scene.control.TextField; import javafx.stage.Stage; public class FXML4Controller implements Initializable { @FXML private Button discard; @FXML private TextField name4; @FXML private TextField id4; @FXML private TextField salary4; @FXML private TextField designation4; @FXML private Button save4; @FXML private Button hourly4; @FXML private Button commission4; @FXML private Button salaryinfo4; @FXML private Button increase4; @FXML private Button search4; @FXML private Button all4; @FXML private void save4Action(ActionEvent event) { { if (name4.getText().equals(\"\") || id4.getText().equals(\"\") || salary4.getText().equals(\"\") || designation4.getText().equals(\"\")) { } else { try { String name = name4.getText(); String id = id4.getText(); String salary = salary4.getText(); String des = designation4.getText(); double salaryToDouble = Double.parseDouble(salary); connect c = new connect(); c.salaried(name, id, des, salaryToDouble); } catch (NumberFormatException e) { } } } } @FXML void discardAction(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML3.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @Override public void initialize(URL url, ResourceBundle rb) { } @FXML private void hourly1(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML5.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @FXML private void commission4Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML6.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @FXML private void salaryinfo2Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML7.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @FXML private void increase2Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML8.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show();} @FXML private void search2Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML9.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @FXML private void all2Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML10.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } }","dependencies":[{"file_path":"employee-management-system-master\\Employee System\\UAP\\src\\NewEmployee\\connect.java","file_content":"package NewEmployee; import java.util.ArrayList; public class connect { String searchId = \"\"; double amt; static UapCse myUap = new UapCse(\"University of Asia Pacific\"); public void salaried(String name, String id, String des, double sal) { myUap.addNewEmployees(name, id, des, sal); } public void hourly(String name, String id, String des, double hr, int hw) { myUap.addNewEmployees(name, id, des, hr, hw); } public void commission(String name, String id, String des, double comissionRate, double comisionSale) { myUap.addNewEmployees(name, id, des, comissionRate, comisionSale); } public ArrayList<Employee> showres() { ArrayList<Employee> em = myUap.employees; return em; } public String searchID() { Employee e = myUap.findEmployee(searchId); String ob = e.display(); return ob; } public String updateSalary() { Employee e = myUap.findEmployee(searchId); if (e == null) { return \"No\"; } else { e.increaseSalary(amt); return \"Yes\"; } } public String Salary() { Employee e = myUap.findEmployee(searchId); String name = e.getName(); String id = e.getId(); double sal = e.getSalary(); return \"Name: \" + name + \" Id: \" + id + \" Salary: \" + sal; } }"}]}}
{"project_id":44,"chunk_id":0,"content":{"main_file_path":"employee-management-system-master\\Employee System\\UAP\\src\\NewEmployee\\FXML5Controller.java","main_file_content":"package NewEmployee; import java.io.IOException; import java.net.URL; import java.util.ResourceBundle; import javafx.event.ActionEvent; import javafx.fxml.FXML; import javafx.fxml.FXMLLoader; import javafx.fxml.Initializable; import javafx.scene.Node; import javafx.scene.Parent; import javafx.scene.Scene; import javafx.scene.control.Button; import javafx.scene.control.TextField; import javafx.stage.Stage; public class FXML5Controller implements Initializable { @FXML private Button discard; @FXML private TextField name5; @FXML private TextField id5; @FXML private TextField designation5; @FXML private Button salaried5; @FXML private Button commission5; @FXML private TextField hourlyrate5; @FXML private Button submit5; @FXML private TextField hourworked5; @FXML private Button salaryinfo5; @FXML private Button increase5; @FXML private Button search5; @FXML private Button all5; @FXML private void salaried5Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML4.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @FXML private void commission5Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML6.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @FXML void discardAction(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML3.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @Override public void initialize(URL url, ResourceBundle rb) { } @FXML private void submit5Action(ActionEvent event) { if (name5.getText().equals(\"\") || id5.getText().equals(\"\") || designation5.getText().equals(\"\") || hourworked5.getText().equals(\"\") || hourlyrate5.getText().equals(\"\")) { } else { try { String name = name5.getText(); String id = id5.getText(); String des = designation5.getText(); String hourwork = hourworked5.getText(); String hourRate = hourlyrate5.getText(); int hw = Integer.parseInt(hourwork); double hr = Double.parseDouble(hourRate); connect c = new connect(); c.hourly(name, id, des, hr, hw); } catch (NumberFormatException e) { } } } @FXML private void salaryinfo2Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML7.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @FXML private void increase2Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML8.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show();} @FXML private void search2Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML9.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @FXML private void all2Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML10.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } }","dependencies":[{"file_path":"employee-management-system-master\\Employee System\\UAP\\src\\NewEmployee\\connect.java","file_content":"package NewEmployee; import java.util.ArrayList; public class connect { String searchId = \"\"; double amt; static UapCse myUap = new UapCse(\"University of Asia Pacific\"); public void salaried(String name, String id, String des, double sal) { myUap.addNewEmployees(name, id, des, sal); } public void hourly(String name, String id, String des, double hr, int hw) { myUap.addNewEmployees(name, id, des, hr, hw); } public void commission(String name, String id, String des, double comissionRate, double comisionSale) { myUap.addNewEmployees(name, id, des, comissionRate, comisionSale); } public ArrayList<Employee> showres() { ArrayList<Employee> em = myUap.employees; return em; } public String searchID() { Employee e = myUap.findEmployee(searchId); String ob = e.display(); return ob; } public String updateSalary() { Employee e = myUap.findEmployee(searchId); if (e == null) { return \"No\"; } else { e.increaseSalary(amt); return \"Yes\"; } } public String Salary() { Employee e = myUap.findEmployee(searchId); String name = e.getName(); String id = e.getId(); double sal = e.getSalary(); return \"Name: \" + name + \" Id: \" + id + \" Salary: \" + sal; } }"}]}}
{"project_id":44,"chunk_id":0,"content":{"main_file_path":"employee-management-system-master\\Employee System\\UAP\\src\\NewEmployee\\FXML6Controller.java","main_file_content":"package NewEmployee; import java.io.IOException; import java.net.URL; import java.util.ResourceBundle; import javafx.event.ActionEvent; import javafx.fxml.FXML; import javafx.fxml.FXMLLoader; import javafx.fxml.Initializable; import javafx.scene.Node; import javafx.scene.Parent; import javafx.scene.Scene; import javafx.scene.control.Button; import javafx.scene.control.TextField; import javafx.stage.Stage; public class FXML6Controller implements Initializable { @FXML private Button discard; @FXML private TextField name6; @FXML private TextField id6; @FXML private TextField designation6; @FXML private Button salaried6; @FXML private Button hourly6; @FXML private TextField sale6; @FXML private TextField commission6; @FXML private Button submit6; @FXML private Button salaryinfo6; @FXML private Button increase6; @FXML private Button search6; @FXML private Button all6; @FXML private void salaried6Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML4.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @FXML private void hourly6Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML5.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @FXML void discardAction(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML3.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @Override public void initialize(URL url, ResourceBundle rb) { } @FXML private void submit6Action(ActionEvent event) { if (name6.getText().equals(\"\") || id6.getText().equals(\"\") || designation6.getText().equals(\"\") || commission6.getText().equals(\"\") || sale6.getText().equals(\"\")) { } else { try { String name = name6.getText(); String id = id6.getText(); String des = designation6.getText(); String comsionRate = commission6.getText(); String comisionSale = sale6.getText(); double comrateToDouble = Double.parseDouble(comsionRate); double comSaleToDouble = Double.parseDouble(comsionRate); connect c = new connect(); c.commission(name, id, des, comSaleToDouble, comSaleToDouble); } catch (NumberFormatException e) { } } } @FXML private void salaryinfo2Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML7.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @FXML private void increase2Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML8.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show();} @FXML private void search2Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML9.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @FXML private void all2Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML10.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } }","dependencies":[{"file_path":"employee-management-system-master\\Employee System\\UAP\\src\\NewEmployee\\connect.java","file_content":"package NewEmployee; import java.util.ArrayList; public class connect { String searchId = \"\"; double amt; static UapCse myUap = new UapCse(\"University of Asia Pacific\"); public void salaried(String name, String id, String des, double sal) { myUap.addNewEmployees(name, id, des, sal); } public void hourly(String name, String id, String des, double hr, int hw) { myUap.addNewEmployees(name, id, des, hr, hw); } public void commission(String name, String id, String des, double comissionRate, double comisionSale) { myUap.addNewEmployees(name, id, des, comissionRate, comisionSale); } public ArrayList<Employee> showres() { ArrayList<Employee> em = myUap.employees; return em; } public String searchID() { Employee e = myUap.findEmployee(searchId); String ob = e.display(); return ob; } public String updateSalary() { Employee e = myUap.findEmployee(searchId); if (e == null) { return \"No\"; } else { e.increaseSalary(amt); return \"Yes\"; } } public String Salary() { Employee e = myUap.findEmployee(searchId); String name = e.getName(); String id = e.getId(); double sal = e.getSalary(); return \"Name: \" + name + \" Id: \" + id + \" Salary: \" + sal; } }"}]}}
{"project_id":44,"chunk_id":0,"content":{"main_file_path":"employee-management-system-master\\Employee System\\UAP\\src\\NewEmployee\\FXML7Controller.java","main_file_content":"package NewEmployee; import java.io.IOException; import java.net.URL; import java.util.ResourceBundle; import javafx.event.ActionEvent; import javafx.fxml.FXML; import javafx.fxml.FXMLLoader; import javafx.fxml.Initializable; import javafx.scene.Node; import javafx.scene.Parent; import javafx.scene.Scene; import javafx.scene.control.Button; import javafx.scene.control.TextField; import javafx.stage.Stage; public class FXML7Controller implements Initializable { @FXML private Button add7; @FXML private Button increase7; @FXML private Button search7; @FXML private Button all7; @FXML private TextField id7; @FXML private TextField salarybox7; @FXML private Button searchin7; @FXML void all7Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML10.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @FXML void search7Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML9.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @FXML void add7Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML2.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @FXML void increase7Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML8.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @Override public void initialize(URL url, ResourceBundle rb) { } @FXML private void searchin7Action(ActionEvent event) { try { connect c = new connect(); c.searchId = id7.getText(); String res = c.Salary(); salarybox7.setText(res); } catch (Exception e) { } } }","dependencies":[{"file_path":"employee-management-system-master\\Employee System\\UAP\\src\\NewEmployee\\connect.java","file_content":"package NewEmployee; import java.util.ArrayList; public class connect { String searchId = \"\"; double amt; static UapCse myUap = new UapCse(\"University of Asia Pacific\"); public void salaried(String name, String id, String des, double sal) { myUap.addNewEmployees(name, id, des, sal); } public void hourly(String name, String id, String des, double hr, int hw) { myUap.addNewEmployees(name, id, des, hr, hw); } public void commission(String name, String id, String des, double comissionRate, double comisionSale) { myUap.addNewEmployees(name, id, des, comissionRate, comisionSale); } public ArrayList<Employee> showres() { ArrayList<Employee> em = myUap.employees; return em; } public String searchID() { Employee e = myUap.findEmployee(searchId); String ob = e.display(); return ob; } public String updateSalary() { Employee e = myUap.findEmployee(searchId); if (e == null) { return \"No\"; } else { e.increaseSalary(amt); return \"Yes\"; } } public String Salary() { Employee e = myUap.findEmployee(searchId); String name = e.getName(); String id = e.getId(); double sal = e.getSalary(); return \"Name: \" + name + \" Id: \" + id + \" Salary: \" + sal; } }"}]}}
{"project_id":44,"chunk_id":0,"content":{"main_file_path":"employee-management-system-master\\Employee System\\UAP\\src\\NewEmployee\\FXML8Controller.java","main_file_content":"package NewEmployee; import java.io.IOException; import java.net.URL; import java.util.ResourceBundle; import javafx.event.ActionEvent; import javafx.fxml.FXML; import javafx.fxml.FXMLLoader; import javafx.fxml.Initializable; import javafx.scene.Node; import javafx.scene.Parent; import javafx.scene.Scene; import javafx.scene.control.Button; import javafx.scene.control.TextField; import javafx.stage.Stage; public class FXML8Controller implements Initializable { @FXML private Button add8; @FXML private Button salaryinfo8; @FXML private Button search8; @FXML private Button all8; @FXML private TextField id8; @FXML private TextField amount8; @FXML private Button update8; @FXML void all8Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML10.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @FXML void search8Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML9.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @FXML void salaryinfo8Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML7.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @FXML void addAction(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML2.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @Override public void initialize(URL url, ResourceBundle rb) { } @FXML private void update8Action(ActionEvent event){ try { String id= id8.getText(); String am= amount8.getText(); double amt= Double.parseDouble(am); connect c= new connect(); c.searchId=id; c.amt=amt; String s=c.updateSalary(); if(\"Yes\".equals(s)) { } else{ } } catch (NumberFormatException e) { } } }","dependencies":[{"file_path":"employee-management-system-master\\Employee System\\UAP\\src\\NewEmployee\\connect.java","file_content":"package NewEmployee; import java.util.ArrayList; public class connect { String searchId = \"\"; double amt; static UapCse myUap = new UapCse(\"University of Asia Pacific\"); public void salaried(String name, String id, String des, double sal) { myUap.addNewEmployees(name, id, des, sal); } public void hourly(String name, String id, String des, double hr, int hw) { myUap.addNewEmployees(name, id, des, hr, hw); } public void commission(String name, String id, String des, double comissionRate, double comisionSale) { myUap.addNewEmployees(name, id, des, comissionRate, comisionSale); } public ArrayList<Employee> showres() { ArrayList<Employee> em = myUap.employees; return em; } public String searchID() { Employee e = myUap.findEmployee(searchId); String ob = e.display(); return ob; } public String updateSalary() { Employee e = myUap.findEmployee(searchId); if (e == null) { return \"No\"; } else { e.increaseSalary(amt); return \"Yes\"; } } public String Salary() { Employee e = myUap.findEmployee(searchId); String name = e.getName(); String id = e.getId(); double sal = e.getSalary(); return \"Name: \" + name + \" Id: \" + id + \" Salary: \" + sal; } }"}]}}
{"project_id":44,"chunk_id":0,"content":{"main_file_path":"employee-management-system-master\\Employee System\\UAP\\src\\NewEmployee\\FXML9Controller.java","main_file_content":"package NewEmployee; import java.io.IOException; import java.net.URL; import java.util.ResourceBundle; import javafx.event.ActionEvent; import javafx.fxml.FXML; import javafx.fxml.FXMLLoader; import javafx.fxml.Initializable; import javafx.scene.Node; import javafx.scene.Parent; import javafx.scene.Scene; import javafx.scene.control.Button; import javafx.scene.control.TextField; import javafx.stage.Stage; public class FXML9Controller implements Initializable { @FXML private Button add9; @FXML private Button increase9; @FXML private Button salaryinfo9; @FXML private Button all9; @FXML private TextField id9; @FXML private TextField details9; @FXML private Button searchin9; @FXML void all9Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML10.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @FXML void add9Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML2.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @FXML void increase9Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML8.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @FXML void salaryinfo9Action(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML7.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @Override public void initialize(URL url, ResourceBundle rb) { } @FXML private void searchin9Action(ActionEvent event) { try { String id = id9.getText(); connect c = new connect(); c.searchId = id; String searchOut = c.searchID(); details9.setText(searchOut); } catch (Exception e) { } } }","dependencies":[{"file_path":"employee-management-system-master\\Employee System\\UAP\\src\\NewEmployee\\connect.java","file_content":"package NewEmployee; import java.util.ArrayList; public class connect { String searchId = \"\"; double amt; static UapCse myUap = new UapCse(\"University of Asia Pacific\"); public void salaried(String name, String id, String des, double sal) { myUap.addNewEmployees(name, id, des, sal); } public void hourly(String name, String id, String des, double hr, int hw) { myUap.addNewEmployees(name, id, des, hr, hw); } public void commission(String name, String id, String des, double comissionRate, double comisionSale) { myUap.addNewEmployees(name, id, des, comissionRate, comisionSale); } public ArrayList<Employee> showres() { ArrayList<Employee> em = myUap.employees; return em; } public String searchID() { Employee e = myUap.findEmployee(searchId); String ob = e.display(); return ob; } public String updateSalary() { Employee e = myUap.findEmployee(searchId); if (e == null) { return \"No\"; } else { e.increaseSalary(amt); return \"Yes\"; } } public String Salary() { Employee e = myUap.findEmployee(searchId); String name = e.getName(); String id = e.getId(); double sal = e.getSalary(); return \"Name: \" + name + \" Id: \" + id + \" Salary: \" + sal; } }"}]}}
{"project_id":44,"chunk_id":0,"content":{"main_file_path":"employee-management-system-master\\Employee System\\UAP\\src\\NewEmployee\\FXMLDocumentController.java","main_file_content":"package NewEmployee; import java.io.IOException; import java.net.URL; import java.util.ResourceBundle; import javafx.event.ActionEvent; import javafx.fxml.FXML; import javafx.fxml.FXMLLoader; import javafx.fxml.Initializable; import javafx.scene.Node; import javafx.scene.Parent; import javafx.scene.Scene; import javafx.scene.control.Button; import javafx.stage.Stage; public class FXMLDocumentController implements Initializable { @FXML private Button next; @FXML void nextGo(ActionEvent event) throws IOException { Parent root = FXMLLoader.load(getClass().getResource(\"FXML3.fxml\")); Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow(); Scene scene = new Scene(root); window.setScene(scene); window.show(); } @Override public void initialize(URL url, ResourceBundle rb) { } }","dependencies":[]}}
{"project_id":44,"chunk_id":0,"content":{"main_file_path":"employee-management-system-master\\Employee System\\UAP\\src\\NewEmployee\\HourlyEmployee.java","main_file_content":"package NewEmployee; public class HourlyEmployee extends Employee { double hourlyRate; int hourWorked; public HourlyEmployee(String name, String id, String designation, double hourlyRate, int hourWorked) { super(name, id, designation); this.hourlyRate = hourlyRate; this.hourWorked = hourWorked; } double getSalary(int hWorked) { return hourlyRate*hWorked; } @Override void increaseSalary(double amt) { hourlyRate += amt; } @Override double getSalary() { return hourlyRate*hourWorked; } @Override String display() { super.display(); return super.display()+\"Rate: \"+hourlyRate; } }","dependencies":[{"file_path":"employee-management-system-master\\Employee System\\UAP\\src\\NewEmployee\\Employee.java","file_content":"package NewEmployee; abstract class Employee { private String name; private String id; private String designation; public Employee(String name, String id, String designation) { super(); this.name = name; this.id = id; this.designation = designation; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getId() { return id; } public void setId(String id) { this.id = id; } public String getDesignation() { return designation; } public void setDesignation(String designation) { this.designation = designation; } abstract double getSalary(); abstract void increaseSalary(double amt); String display() { return \"Name: \"+name+\" ID: \"+id+\" Designation: \"+designation; } }"}]}}
{"project_id":44,"chunk_id":0,"content":{"main_file_path":"employee-management-system-master\\Employee System\\UAP\\src\\NewEmployee\\SalariedEmployee.java","main_file_content":"package NewEmployee; public class SalariedEmployee extends Employee { double monthlySalary; public SalariedEmployee(String name, String id, String designation, double monthlySalary) { super(name, id, designation); this.monthlySalary = monthlySalary; } @Override void increaseSalary(double amt) { monthlySalary = monthlySalary+amt; } @Override double getSalary() { return monthlySalary; } @Override String display() { return super.display()+\"Salary: \"+monthlySalary; } }","dependencies":[{"file_path":"employee-management-system-master\\Employee System\\UAP\\src\\NewEmployee\\Employee.java","file_content":"package NewEmployee; abstract class Employee { private String name; private String id; private String designation; public Employee(String name, String id, String designation) { super(); this.name = name; this.id = id; this.designation = designation; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getId() { return id; } public void setId(String id) { this.id = id; } public String getDesignation() { return designation; } public void setDesignation(String designation) { this.designation = designation; } abstract double getSalary(); abstract void increaseSalary(double amt); String display() { return \"Name: \"+name+\" ID: \"+id+\" Designation: \"+designation; } }"}]}}
{"project_id":44,"chunk_id":0,"content":{"main_file_path":"employee-management-system-master\\Employee System\\UAP\\src\\NewEmployee\\UAP.java","main_file_content":"package NewEmployee; import javafx.application.Application; import javafx.fxml.FXMLLoader; import javafx.scene.Parent; import javafx.scene.Scene; import javafx.stage.Stage; public class UAP extends Application { @Override public void start(Stage stage) throws Exception { Parent root = FXMLLoader.load(getClass().getResource(\"FXMLDocument.fxml\")); Scene scene = new Scene(root); scene.getStylesheets().add(getClass().getResource(\"MyCss.css\").toExternalForm()); stage.setScene(scene); stage.show(); } public static void main(String[] args) { launch(args); } }","dependencies":[]}}
{"project_id":44,"chunk_id":0,"content":{"main_file_path":"employee-management-system-master\\Employee System\\UAP\\src\\NewEmployee\\UapCse.java","main_file_content":"package NewEmployee; import java.util.ArrayList; public class UapCse { ArrayList<Employee> employees = new ArrayList<>(); String name; public UapCse(String name) { super(); this.name = name; } private void addNewEmployee(Employee e) { employees.add(e); } public void addNewEmployees(String n, String i, String d, double s) { Employee E = new SalariedEmployee(n,i,d,s); addNewEmployee(E); } public void addNewEmployees(String n, String i, String d, double hr,int hw) { Employee E = new HourlyEmployee(n,i,d,hr,hw); addNewEmployee(E); } public void addNewEmployees(String n, String i, String d, double p,double s) { Employee E = new CommissionEmployee(n,i,d,p,s); addNewEmployee(E); } public Employee findEmployee(String id) { for (int i = 0; i < employees.size(); i++) { Employee E = employees.get(i); if(E.getId().equals(id)) { return E; } } return null; } }","dependencies":[{"file_path":"employee-management-system-master\\Employee System\\UAP\\src\\NewEmployee\\CommissionEmployee.java","file_content":"package NewEmployee; public class CommissionEmployee extends Employee { double commission; double sale; public CommissionEmployee(String name, String id, String designation, double commission, double sale) { super(name, id, designation); this.commission = commission; this.sale = sale; } double getSalary(double sale) { return commission*sale; } @Override double getSalary() { return commission*sale; } @Override void increaseSalary(double amt) { commission += amt; } @Override String display() { super.display(); return super.display()+\"Commission: \"+commission; } }"},{"file_path":"employee-management-system-master\\Employee System\\UAP\\src\\NewEmployee\\Employee.java","file_content":"package NewEmployee; abstract class Employee { private String name; private String id; private String designation; public Employee(String name, String id, String designation) { super(); this.name = name; this.id = id; this.designation = designation; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getId() { return id; } public void setId(String id) { this.id = id; } public String getDesignation() { return designation; } public void setDesignation(String designation) { this.designation = designation; } abstract double getSalary(); abstract void increaseSalary(double amt); String display() { return \"Name: \"+name+\" ID: \"+id+\" Designation: \"+designation; } }"},{"file_path":"employee-management-system-master\\Employee System\\UAP\\src\\NewEmployee\\HourlyEmployee.java","file_content":"package NewEmployee; public class HourlyEmployee extends Employee { double hourlyRate; int hourWorked; public HourlyEmployee(String name, String id, String designation, double hourlyRate, int hourWorked) { super(name, id, designation); this.hourlyRate = hourlyRate; this.hourWorked = hourWorked; } double getSalary(int hWorked) { return hourlyRate*hWorked; } @Override void increaseSalary(double amt) { hourlyRate += amt; } @Override double getSalary() { return hourlyRate*hourWorked; } @Override String display() { super.display(); return super.display()+\"Rate: \"+hourlyRate; } }"},{"file_path":"employee-management-system-master\\Employee System\\UAP\\src\\NewEmployee\\SalariedEmployee.java","file_content":"package NewEmployee; public class SalariedEmployee extends Employee { double monthlySalary; public SalariedEmployee(String name, String id, String designation, double monthlySalary) { super(name, id, designation); this.monthlySalary = monthlySalary; } @Override void increaseSalary(double amt) { monthlySalary = monthlySalary+amt; } @Override double getSalary() { return monthlySalary; } @Override String display() { return super.display()+\"Salary: \"+monthlySalary; } }"}]}}
{"project_id":45,"chunk_id":0,"content":{"main_file_path":"Employee-Payroll-System-master\\sources\\org\\payroll\\DatabaseManager.java","main_file_content":"package org.payroll; import java.io.*; import java.sql.*; import java.util.*; public class DatabaseManager { String ConnectionString; Connection conn; Statement curs; public DatabaseManager(String db) { ConnectionString = \"jdbc:sqlite:\" + db; if (!(new File(db)).exists()) { connectToDatabase(); initNewDatabase(); } else { connectToDatabase(); } } void connectToDatabase() { try { conn = DriverManager.getConnection(ConnectionString); curs = conn.createStatement(); curs.setQueryTimeout(30); } catch (SQLException e) { System.err.println(e.getMessage()); } } void initNewDatabase() { try { curs.executeUpdate( \"CREATE TABLE login_ids(id INTEGER NOT NULL PRIMARY KEY, username STRING NOT NULL, password STRING NOT NULL)\" ); curs.executeUpdate( \"INSERT INTO login_ids VALUES(null, \\\"admin\\\", \\\"password\\\")\" ); curs.executeUpdate( \"CREATE TABLE departments(\" + \"id INTEGER NOT NULL PRIMARY KEY,\" + \"dep_name STRING NOT NULL,\" + \"basic_salary INTEGER NOT NULL,\" + \"da INTEGER NOT NULL,\" + \"hra INTEGER NOT NULL,\" + \"pf INTEGER NOT NULL,\" + \"gross_salary INTEGER NOT NULL,\" + \"epf INTEGER NOT NULL,\" + \"lic INTEGER NOT NULL,\" + \"deductions INTEGER NOT NULL,\" + \"net_salary INTEGER NOT NULL\" + \")\" ); curs.executeUpdate( \"CREATE TABLE employees(\" + \"id INTEGER NOT NULL PRIMARY KEY,\" + \"first_name STRING NOT NULL,\" + \"last_name STRING NOT NULL,\" + \"email STRING NOT NULL,\" + \"department STRING NOT NULL\" + \")\" ); } catch (SQLException e) { System.err.println(e.getMessage()); } } public Boolean verifyLoginId(String username) { try { return curs.executeQuery( \"SELECT * FROM login_ids WHERE username=\\\"\" + username + \"\\\"\" ).next(); } catch (SQLException e) { System.err.println(e.getMessage()); } return false; } public Boolean verifyLoginId(String username, String password) { try { return curs.executeQuery( \"SELECT * FROM login_ids WHERE username=\\\"\" + username + \"\\\" AND password=\\\"\" + password + \"\\\"\" ).next(); } catch (SQLException e) { System.err.println(e.getMessage()); } return false; } public void createLoginId(String username, String password) { try { curs.executeUpdate(\"INSERT INTO login_ids VALUES(null, \\\"\" + username + \"\\\", \\\"\" + password + \"\\\")\"); } catch (SQLException e) { System.err.println(e.getMessage()); } } public void deleteLoginId(String username) { try { curs.executeUpdate( \"DELETE FROM login_ids WHERE username=\\\"\" + username + \"\\\"\" ); } catch (SQLException e) { System.err.println(e.getMessage()); } } public void changePassword(String username, String newPassword) { try { curs.executeUpdate( \"UPDATE login_ids SET password=\\\"\" + newPassword + \"\\\" WHERE username=\\\"\" + username + \"\\\"\" ); } catch (SQLException e) { System.err.println(e.getMessage()); } } public Boolean existsDepartment(String dep_name) { try { return curs.executeQuery( \"SELECT * FROM departments WHERE dep_name=\\\"\" + dep_name + \"\\\"\" ).next(); } catch (SQLException e) { System.err.println(e.getMessage()); } return false; } public void newDepartment(String dep_name, int basic_salary, int da_percent, int hra_percent, int pf_percent) { int da = (da_percent / 100) * basic_salary; int hra = (hra_percent / 100) * basic_salary; int pf = (pf_percent / 100) * basic_salary; int gross_salary = basic_salary + da + hra + pf; int epf = pf / 2; int lic = epf / 2; int deductions = epf + lic; int net_salary = gross_salary - deductions; try { curs.executeUpdate( \"INSERT INTO departments VALUES(\" + \"null,\" + \"\\\"\" + dep_name + \"\\\" ,\" + Integer.toString(basic_salary) + \",\" + Integer.toString(da) + \",\" + Integer.toString(hra) + \",\" + Integer.toString(pf) + \",\" + Integer.toString(gross_salary) + \",\" + Integer.toString(epf) + \",\" + Integer.toString(lic) + \",\" + Integer.toString(deductions) + \",\" + Integer.toString(net_salary) + \")\" ); } catch (SQLException e) { System.err.println(e.getMessage()); } } public void deleteDepartment(String dep_name) { try { curs.executeUpdate( \"DELETE FROM departments WHERE dep_name=\\\"\" + dep_name + \"\\\"\" ); curs.executeUpdate( \"DELETE FROM employees WHERE department=\\\"\" + dep_name + \"\\\"\" ); } catch (SQLException e) { System.err.println(e.getMessage()); } } public void updateDepartment(String dep_name, int basic_salary, int da, int hra, int pf) { deleteDepartment(dep_name); newDepartment(dep_name, basic_salary, da, hra, pf); } public ArrayList<String> getListOfDepartments() { ArrayList<String> lst = new ArrayList<String>(); try { ResultSet rs = curs.executeQuery(\"SELECT dep_name FROM departments\"); while (rs.next()) { lst.add(rs.getString(\"dep_name\")); } } catch (SQLException e) { System.err.println(e.getMessage()); } return lst; } public int getSalary(String dep_name) { try { ResultSet rs = curs.executeQuery(\"SELECT net_salary FROM departments WHERE dep_name=\\\"\" + dep_name + \"\\\"\"); if (rs.next()) return rs.getInt(\"net_salary\"); } catch (SQLException e) { System.err.println(e.getMessage()); } return 0; } public Boolean existsEmployeeID(int id) { try { return curs.executeQuery( \"SELECT * FROM employees WHERE id=\" + Integer.toString(id) ).next(); } catch (SQLException e) { System.err.println(e.getMessage()); } return false; } public void createEmployee(String fn, String ln, String email, String department) { try { curs.executeUpdate(\"INSERT INTO employees VALUES(\" + \"null,\" + \"\\\"\" + fn + \"\\\",\" + \"\\\"\" + ln + \"\\\",\" + \"\\\"\" + email + \"\\\",\" + \"\\\"\" + department + \"\\\"\" + \")\"); } catch (SQLException e) { System.err.println(e.getMessage()); } } public void deleteEmployee(int id) { try { curs.executeUpdate( \"DELETE FROM employees WHERE id=\" + Integer.toString(id) ); } catch (SQLException e) { System.err.println(e.getMessage()); } } public void updateEmployee(int id, String fn, String ln, String email, String department) { try { curs.executeUpdate( \"UPDATE employees SET \" + \"first_name=\\\"\" + fn + \"\\\",\" + \"last_name=\\\"\" + ln + \"\\\",\" + \"email=\\\"\" + email + \"\\\",\" + \"department=\\\"\" + department + \"\\\" \" + \"WHERE id=\" + Integer.toString(id) ); } catch (SQLException e) { System.err.println(e.getMessage()); } } public Object[][] getEmployees() { ArrayList<Object[]> employees = new ArrayList<Object[]>(); ResultSet rs; try { rs = curs.executeQuery( \"SELECT * FROM employees\" ); while (rs.next()) { Object[] temp = { rs.getInt(\"id\"), rs.getString(\"first_name\"), rs.getString(\"last_name\"), rs.getString(\"email\"), rs.getString(\"department\"), getSalary(rs.getString(\"department\")) }; employees.add(temp); } } catch (SQLException e) { System.err.println(e.getMessage()); } return employees.toArray(new Object[employees.size()][]); } }","dependencies":[]}}
{"project_id":45,"chunk_id":0,"content":{"main_file_path":"Employee-Payroll-System-master\\sources\\org\\payroll\\LoginFrame.java","main_file_content":"package org.payroll; import java.awt.*; import java.awt.event.*; import javax.swing.*; public class LoginFrame extends JFrame { private static final long serialVersionUID = 1L; JLabel lbl_info, lbl_username, lbl_password; JButton btn_login, btn_exit; JTextField txt_username; JPasswordField txt_password; public LoginFrame() { initFrame(); initComponents(); addActionListeners(); addComponentsToFrame(); } void initFrame() { setTitle(\"Login\"); setSize(300, 140); setLocationRelativeTo(null); setDefaultCloseOperation(EXIT_ON_CLOSE); setResizable(false); setLayout(new FlowLayout()); } void initComponents() { lbl_info = new JLabel(\"Employee Payroll System by Sanjan Geet Singh\"); lbl_username = new JLabel(\"Username: \"); lbl_password = new JLabel(\"Password: \"); txt_username = new JTextField(18); txt_password = new JPasswordField(18); btn_exit = new JButton(\"Exit\"); btn_login = new JButton(\"Login\"); } void addActionListeners() { btn_exit.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { System.exit(0); } }); btn_login.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { if (Main.dbManager.verifyLoginId(txt_username.getText(), new String(txt_password.getPassword()))) { LoginSuccessful(); } else { LoginFailed(); } } }); } void addComponentsToFrame() { add(lbl_info); add(lbl_username); add(txt_username); add(lbl_password); add(txt_password); add(btn_exit); add(btn_login); } void LoginSuccessful() { JOptionPane.showMessageDialog( null, \"Login Successful\", \"Login Successful\", JOptionPane.INFORMATION_MESSAGE ); setVisible(false); (new MainFrame(txt_username.getText())).setVisible(true); dispose(); } void LoginFailed() { JOptionPane.showMessageDialog( null, \"Wrong username or password\", \"Login Failed\", JOptionPane.ERROR_MESSAGE ); txt_username.setText(\"\"); txt_password.setText(\"\"); } }","dependencies":[{"file_path":"Employee-Payroll-System-master\\sources\\org\\payroll\\MainFrame.java","file_content":"package org.payroll; import java.awt.*; import java.awt.event.*; import javax.swing.*; import org.payroll.preferences.*; import org.payroll.departments.*; import org.payroll.employees.*; public class MainFrame extends JFrame { private static final long serialVersionUID = 1L; String username; Object[] columns = { \"ID\", \"First Name\", \"Last Name\", \"Email\", \"Department\", \"Net Salary\" }; Object[][] data; JTable table; JScrollPane scrollpane; JTextField txt_loggedInAs; JMenuBar menubar; JMenu fileMenu, tableMenu, employeesMenu, departmentsMenu, preferencesMenu, helpMenu; JMenuItem logoutMI, exitMI; JMenuItem reloadMI; JMenuItem newEmployeeMI, updateEmployeeMI, deleteEmployeeMI; JMenuItem newDepartmentMI, modifyDepartmentMI, deleteDepartmentMI; JMenuItem newLoginIdMI, changePasswordMI, deleteLoginIdMI; JMenuItem aboutMI; public MainFrame(String username) { this.username = username; initFrame(); initComponents(); configureComponents(); addActionListeners(); addComponentsToFrame(); } void initFrame() { setTitle(\"Payroll System by Sanjan Geet Singh\"); setSize(800, 600); setLocationRelativeTo(null); setDefaultCloseOperation(EXIT_ON_CLOSE); setLayout(new BorderLayout()); } void initComponents() { data = Main.dbManager.getEmployees(); menubar = new JMenuBar(); txt_loggedInAs = new JTextField(\"Logged in as \" + username); fileMenu = new JMenu(\"File\"); tableMenu = new JMenu(\"Table\"); employeesMenu = new JMenu(\"Employees\"); departmentsMenu = new JMenu(\"Departments\"); preferencesMenu = new JMenu(\"Preferences\"); helpMenu = new JMenu(\"Help\"); logoutMI = new JMenuItem(\"Logout\"); exitMI = new JMenuItem(\"Exit\"); reloadMI = new JMenuItem(\"Reload\"); newEmployeeMI = new JMenuItem(\"New Employee\"); updateEmployeeMI = new JMenuItem(\"Update Employee\"); deleteEmployeeMI = new JMenuItem(\"Delete Employee\"); newDepartmentMI = new JMenuItem(\"New Department\"); modifyDepartmentMI = new JMenuItem(\"Modify Department\"); deleteDepartmentMI = new JMenuItem(\"Delete Department\"); newLoginIdMI = new JMenuItem(\"New Login ID\"); changePasswordMI = new JMenuItem(\"Change Password\"); deleteLoginIdMI = new JMenuItem(\"Delete Login ID\"); aboutMI = new JMenuItem(\"About\"); if (data == null) { table = new JTable(); } else { table = new JTable(data, columns); } scrollpane = new JScrollPane(table); } void configureComponents() { table.setEnabled(false); txt_loggedInAs.setEditable(false); } void addActionListeners() { logoutMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { setVisible(false); (new LoginFrame()).setVisible(true); dispose(); } }); exitMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { System.exit(0); } }); reloadMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { setVisible(false); (new MainFrame(username)).setVisible(true); dispose(); } }); newEmployeeMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { (new NewEmployeeFrame()).setVisible(true); } }); updateEmployeeMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { (new UpdateEmployeeFrame()).setVisible(true); } }); deleteEmployeeMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { (new DeleteEmployeeFrame()).setVisible(true); } }); newDepartmentMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { (new NewDepartmentFrame()).setVisible(true); } }); modifyDepartmentMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { (new ModifyDepartmentFrame()).setVisible(true); } }); deleteDepartmentMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { (new DeleteDepartmentFrame()).setVisible(true); } }); newLoginIdMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { (new NewLoginIdFrame()).setVisible(true); } }); changePasswordMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { (new ChangePasswordFrame(username)).setVisible(true); } }); deleteLoginIdMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { (new DeleteLoginIdFrame()).setVisible(true); } }); aboutMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { JOptionPane.showMessageDialog( null, \"Employee Payroll System\\nAuthor: Sanjan Geet Singh\\nEmail: sanjangeet2109s@gmail.com\", \"About\", JOptionPane.INFORMATION_MESSAGE ); } }); } void addComponentsToFrame() { fileMenu.add(logoutMI); fileMenu.add(exitMI); tableMenu.add(reloadMI); employeesMenu.add(newEmployeeMI); employeesMenu.add(updateEmployeeMI); employeesMenu.add(deleteEmployeeMI); departmentsMenu.add(newDepartmentMI); departmentsMenu.add(modifyDepartmentMI); departmentsMenu.add(deleteDepartmentMI); preferencesMenu.add(newLoginIdMI); preferencesMenu.add(changePasswordMI); preferencesMenu.add(deleteLoginIdMI); helpMenu.add(aboutMI); menubar.add(fileMenu); menubar.add(tableMenu); menubar.add(employeesMenu); menubar.add(departmentsMenu); menubar.add(preferencesMenu); menubar.add(helpMenu); setJMenuBar(menubar); add(scrollpane, BorderLayout.CENTER); add(txt_loggedInAs, BorderLayout.SOUTH); } }"}]}}
{"project_id":45,"chunk_id":0,"content":{"main_file_path":"Employee-Payroll-System-master\\sources\\org\\payroll\\Main.java","main_file_content":"package org.payroll; public class Main { public static DatabaseManager dbManager; public static void main(String[] args) { dbManager = new DatabaseManager(\"\"); (new LoginFrame()).setVisible(true); } }","dependencies":[{"file_path":"Employee-Payroll-System-master\\sources\\org\\payroll\\DatabaseManager.java","file_content":"package org.payroll; import java.io.*; import java.sql.*; import java.util.*; public class DatabaseManager { String ConnectionString; Connection conn; Statement curs; public DatabaseManager(String db) { ConnectionString = \"jdbc:sqlite:\" + db; if (!(new File(db)).exists()) { connectToDatabase(); initNewDatabase(); } else { connectToDatabase(); } } void connectToDatabase() { try { conn = DriverManager.getConnection(ConnectionString); curs = conn.createStatement(); curs.setQueryTimeout(30); } catch (SQLException e) { System.err.println(e.getMessage()); } } void initNewDatabase() { try { curs.executeUpdate( \"CREATE TABLE login_ids(id INTEGER NOT NULL PRIMARY KEY, username STRING NOT NULL, password STRING NOT NULL)\" ); curs.executeUpdate( \"INSERT INTO login_ids VALUES(null, \\\"admin\\\", \\\"password\\\")\" ); curs.executeUpdate( \"CREATE TABLE departments(\" + \"id INTEGER NOT NULL PRIMARY KEY,\" + \"dep_name STRING NOT NULL,\" + \"basic_salary INTEGER NOT NULL,\" + \"da INTEGER NOT NULL,\" + \"hra INTEGER NOT NULL,\" + \"pf INTEGER NOT NULL,\" + \"gross_salary INTEGER NOT NULL,\" + \"epf INTEGER NOT NULL,\" + \"lic INTEGER NOT NULL,\" + \"deductions INTEGER NOT NULL,\" + \"net_salary INTEGER NOT NULL\" + \")\" ); curs.executeUpdate( \"CREATE TABLE employees(\" + \"id INTEGER NOT NULL PRIMARY KEY,\" + \"first_name STRING NOT NULL,\" + \"last_name STRING NOT NULL,\" + \"email STRING NOT NULL,\" + \"department STRING NOT NULL\" + \")\" ); } catch (SQLException e) { System.err.println(e.getMessage()); } } public Boolean verifyLoginId(String username) { try { return curs.executeQuery( \"SELECT * FROM login_ids WHERE username=\\\"\" + username + \"\\\"\" ).next(); } catch (SQLException e) { System.err.println(e.getMessage()); } return false; } public Boolean verifyLoginId(String username, String password) { try { return curs.executeQuery( \"SELECT * FROM login_ids WHERE username=\\\"\" + username + \"\\\" AND password=\\\"\" + password + \"\\\"\" ).next(); } catch (SQLException e) { System.err.println(e.getMessage()); } return false; } public void createLoginId(String username, String password) { try { curs.executeUpdate(\"INSERT INTO login_ids VALUES(null, \\\"\" + username + \"\\\", \\\"\" + password + \"\\\")\"); } catch (SQLException e) { System.err.println(e.getMessage()); } } public void deleteLoginId(String username) { try { curs.executeUpdate( \"DELETE FROM login_ids WHERE username=\\\"\" + username + \"\\\"\" ); } catch (SQLException e) { System.err.println(e.getMessage()); } } public void changePassword(String username, String newPassword) { try { curs.executeUpdate( \"UPDATE login_ids SET password=\\\"\" + newPassword + \"\\\" WHERE username=\\\"\" + username + \"\\\"\" ); } catch (SQLException e) { System.err.println(e.getMessage()); } } public Boolean existsDepartment(String dep_name) { try { return curs.executeQuery( \"SELECT * FROM departments WHERE dep_name=\\\"\" + dep_name + \"\\\"\" ).next(); } catch (SQLException e) { System.err.println(e.getMessage()); } return false; } public void newDepartment(String dep_name, int basic_salary, int da_percent, int hra_percent, int pf_percent) { int da = (da_percent / 100) * basic_salary; int hra = (hra_percent / 100) * basic_salary; int pf = (pf_percent / 100) * basic_salary; int gross_salary = basic_salary + da + hra + pf; int epf = pf / 2; int lic = epf / 2; int deductions = epf + lic; int net_salary = gross_salary - deductions; try { curs.executeUpdate( \"INSERT INTO departments VALUES(\" + \"null,\" + \"\\\"\" + dep_name + \"\\\" ,\" + Integer.toString(basic_salary) + \",\" + Integer.toString(da) + \",\" + Integer.toString(hra) + \",\" + Integer.toString(pf) + \",\" + Integer.toString(gross_salary) + \",\" + Integer.toString(epf) + \",\" + Integer.toString(lic) + \",\" + Integer.toString(deductions) + \",\" + Integer.toString(net_salary) + \")\" ); } catch (SQLException e) { System.err.println(e.getMessage()); } } public void deleteDepartment(String dep_name) { try { curs.executeUpdate( \"DELETE FROM departments WHERE dep_name=\\\"\" + dep_name + \"\\\"\" ); curs.executeUpdate( \"DELETE FROM employees WHERE department=\\\"\" + dep_name + \"\\\"\" ); } catch (SQLException e) { System.err.println(e.getMessage()); } } public void updateDepartment(String dep_name, int basic_salary, int da, int hra, int pf) { deleteDepartment(dep_name); newDepartment(dep_name, basic_salary, da, hra, pf); } public ArrayList<String> getListOfDepartments() { ArrayList<String> lst = new ArrayList<String>(); try { ResultSet rs = curs.executeQuery(\"SELECT dep_name FROM departments\"); while (rs.next()) { lst.add(rs.getString(\"dep_name\")); } } catch (SQLException e) { System.err.println(e.getMessage()); } return lst; } public int getSalary(String dep_name) { try { ResultSet rs = curs.executeQuery(\"SELECT net_salary FROM departments WHERE dep_name=\\\"\" + dep_name + \"\\\"\"); if (rs.next()) return rs.getInt(\"net_salary\"); } catch (SQLException e) { System.err.println(e.getMessage()); } return 0; } public Boolean existsEmployeeID(int id) { try { return curs.executeQuery( \"SELECT * FROM employees WHERE id=\" + Integer.toString(id) ).next(); } catch (SQLException e) { System.err.println(e.getMessage()); } return false; } public void createEmployee(String fn, String ln, String email, String department) { try { curs.executeUpdate(\"INSERT INTO employees VALUES(\" + \"null,\" + \"\\\"\" + fn + \"\\\",\" + \"\\\"\" + ln + \"\\\",\" + \"\\\"\" + email + \"\\\",\" + \"\\\"\" + department + \"\\\"\" + \")\"); } catch (SQLException e) { System.err.println(e.getMessage()); } } public void deleteEmployee(int id) { try { curs.executeUpdate( \"DELETE FROM employees WHERE id=\" + Integer.toString(id) ); } catch (SQLException e) { System.err.println(e.getMessage()); } } public void updateEmployee(int id, String fn, String ln, String email, String department) { try { curs.executeUpdate( \"UPDATE employees SET \" + \"first_name=\\\"\" + fn + \"\\\",\" + \"last_name=\\\"\" + ln + \"\\\",\" + \"email=\\\"\" + email + \"\\\",\" + \"department=\\\"\" + department + \"\\\" \" + \"WHERE id=\" + Integer.toString(id) ); } catch (SQLException e) { System.err.println(e.getMessage()); } } public Object[][] getEmployees() { ArrayList<Object[]> employees = new ArrayList<Object[]>(); ResultSet rs; try { rs = curs.executeQuery( \"SELECT * FROM employees\" ); while (rs.next()) { Object[] temp = { rs.getInt(\"id\"), rs.getString(\"first_name\"), rs.getString(\"last_name\"), rs.getString(\"email\"), rs.getString(\"department\"), getSalary(rs.getString(\"department\")) }; employees.add(temp); } } catch (SQLException e) { System.err.println(e.getMessage()); } return employees.toArray(new Object[employees.size()][]); } }"},{"file_path":"Employee-Payroll-System-master\\sources\\org\\payroll\\LoginFrame.java","file_content":"package org.payroll; import java.awt.*; import java.awt.event.*; import javax.swing.*; public class LoginFrame extends JFrame { private static final long serialVersionUID = 1L; JLabel lbl_info, lbl_username, lbl_password; JButton btn_login, btn_exit; JTextField txt_username; JPasswordField txt_password; public LoginFrame() { initFrame(); initComponents(); addActionListeners(); addComponentsToFrame(); } void initFrame() { setTitle(\"Login\"); setSize(300, 140); setLocationRelativeTo(null); setDefaultCloseOperation(EXIT_ON_CLOSE); setResizable(false); setLayout(new FlowLayout()); } void initComponents() { lbl_info = new JLabel(\"Employee Payroll System by Sanjan Geet Singh\"); lbl_username = new JLabel(\"Username: \"); lbl_password = new JLabel(\"Password: \"); txt_username = new JTextField(18); txt_password = new JPasswordField(18); btn_exit = new JButton(\"Exit\"); btn_login = new JButton(\"Login\"); } void addActionListeners() { btn_exit.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { System.exit(0); } }); btn_login.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { if (Main.dbManager.verifyLoginId(txt_username.getText(), new String(txt_password.getPassword()))) { LoginSuccessful(); } else { LoginFailed(); } } }); } void addComponentsToFrame() { add(lbl_info); add(lbl_username); add(txt_username); add(lbl_password); add(txt_password); add(btn_exit); add(btn_login); } void LoginSuccessful() { JOptionPane.showMessageDialog( null, \"Login Successful\", \"Login Successful\", JOptionPane.INFORMATION_MESSAGE ); setVisible(false); (new MainFrame(txt_username.getText())).setVisible(true); dispose(); } void LoginFailed() { JOptionPane.showMessageDialog( null, \"Wrong username or password\", \"Login Failed\", JOptionPane.ERROR_MESSAGE ); txt_username.setText(\"\"); txt_password.setText(\"\"); } }"}]}}
{"project_id":45,"chunk_id":0,"content":{"main_file_path":"Employee-Payroll-System-master\\sources\\org\\payroll\\MainFrame.java","main_file_content":"package org.payroll; import java.awt.*; import java.awt.event.*; import javax.swing.*; import org.payroll.preferences.*; import org.payroll.departments.*; import org.payroll.employees.*; public class MainFrame extends JFrame { private static final long serialVersionUID = 1L; String username; Object[] columns = { \"ID\", \"First Name\", \"Last Name\", \"Email\", \"Department\", \"Net Salary\" }; Object[][] data; JTable table; JScrollPane scrollpane; JTextField txt_loggedInAs; JMenuBar menubar; JMenu fileMenu, tableMenu, employeesMenu, departmentsMenu, preferencesMenu, helpMenu; JMenuItem logoutMI, exitMI; JMenuItem reloadMI; JMenuItem newEmployeeMI, updateEmployeeMI, deleteEmployeeMI; JMenuItem newDepartmentMI, modifyDepartmentMI, deleteDepartmentMI; JMenuItem newLoginIdMI, changePasswordMI, deleteLoginIdMI; JMenuItem aboutMI; public MainFrame(String username) { this.username = username; initFrame(); initComponents(); configureComponents(); addActionListeners(); addComponentsToFrame(); } void initFrame() { setTitle(\"Payroll System by Sanjan Geet Singh\"); setSize(800, 600); setLocationRelativeTo(null); setDefaultCloseOperation(EXIT_ON_CLOSE); setLayout(new BorderLayout()); } void initComponents() { data = Main.dbManager.getEmployees(); menubar = new JMenuBar(); txt_loggedInAs = new JTextField(\"Logged in as \" + username); fileMenu = new JMenu(\"File\"); tableMenu = new JMenu(\"Table\"); employeesMenu = new JMenu(\"Employees\"); departmentsMenu = new JMenu(\"Departments\"); preferencesMenu = new JMenu(\"Preferences\"); helpMenu = new JMenu(\"Help\"); logoutMI = new JMenuItem(\"Logout\"); exitMI = new JMenuItem(\"Exit\"); reloadMI = new JMenuItem(\"Reload\"); newEmployeeMI = new JMenuItem(\"New Employee\"); updateEmployeeMI = new JMenuItem(\"Update Employee\"); deleteEmployeeMI = new JMenuItem(\"Delete Employee\"); newDepartmentMI = new JMenuItem(\"New Department\"); modifyDepartmentMI = new JMenuItem(\"Modify Department\"); deleteDepartmentMI = new JMenuItem(\"Delete Department\"); newLoginIdMI = new JMenuItem(\"New Login ID\"); changePasswordMI = new JMenuItem(\"Change Password\"); deleteLoginIdMI = new JMenuItem(\"Delete Login ID\"); aboutMI = new JMenuItem(\"About\"); if (data == null) { table = new JTable(); } else { table = new JTable(data, columns); } scrollpane = new JScrollPane(table); } void configureComponents() { table.setEnabled(false); txt_loggedInAs.setEditable(false); } void addActionListeners() { logoutMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { setVisible(false); (new LoginFrame()).setVisible(true); dispose(); } }); exitMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { System.exit(0); } }); reloadMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { setVisible(false); (new MainFrame(username)).setVisible(true); dispose(); } }); newEmployeeMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { (new NewEmployeeFrame()).setVisible(true); } }); updateEmployeeMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { (new UpdateEmployeeFrame()).setVisible(true); } }); deleteEmployeeMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { (new DeleteEmployeeFrame()).setVisible(true); } }); newDepartmentMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { (new NewDepartmentFrame()).setVisible(true); } }); modifyDepartmentMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { (new ModifyDepartmentFrame()).setVisible(true); } }); deleteDepartmentMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { (new DeleteDepartmentFrame()).setVisible(true); } }); newLoginIdMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { (new NewLoginIdFrame()).setVisible(true); } }); changePasswordMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { (new ChangePasswordFrame(username)).setVisible(true); } }); deleteLoginIdMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { (new DeleteLoginIdFrame()).setVisible(true); } }); aboutMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { JOptionPane.showMessageDialog( null, \"Employee Payroll System\\nAuthor: Sanjan Geet Singh\\nEmail: sanjangeet2109s@gmail.com\", \"About\", JOptionPane.INFORMATION_MESSAGE ); } }); } void addComponentsToFrame() { fileMenu.add(logoutMI); fileMenu.add(exitMI); tableMenu.add(reloadMI); employeesMenu.add(newEmployeeMI); employeesMenu.add(updateEmployeeMI); employeesMenu.add(deleteEmployeeMI); departmentsMenu.add(newDepartmentMI); departmentsMenu.add(modifyDepartmentMI); departmentsMenu.add(deleteDepartmentMI); preferencesMenu.add(newLoginIdMI); preferencesMenu.add(changePasswordMI); preferencesMenu.add(deleteLoginIdMI); helpMenu.add(aboutMI); menubar.add(fileMenu); menubar.add(tableMenu); menubar.add(employeesMenu); menubar.add(departmentsMenu); menubar.add(preferencesMenu); menubar.add(helpMenu); setJMenuBar(menubar); add(scrollpane, BorderLayout.CENTER); add(txt_loggedInAs, BorderLayout.SOUTH); } }","dependencies":[{"file_path":"Employee-Payroll-System-master\\sources\\org\\payroll\\LoginFrame.java","file_content":"package org.payroll; import java.awt.*; import java.awt.event.*; import javax.swing.*; public class LoginFrame extends JFrame { private static final long serialVersionUID = 1L; JLabel lbl_info, lbl_username, lbl_password; JButton btn_login, btn_exit; JTextField txt_username; JPasswordField txt_password; public LoginFrame() { initFrame(); initComponents(); addActionListeners(); addComponentsToFrame(); } void initFrame() { setTitle(\"Login\"); setSize(300, 140); setLocationRelativeTo(null); setDefaultCloseOperation(EXIT_ON_CLOSE); setResizable(false); setLayout(new FlowLayout()); } void initComponents() { lbl_info = new JLabel(\"Employee Payroll System by Sanjan Geet Singh\"); lbl_username = new JLabel(\"Username: \"); lbl_password = new JLabel(\"Password: \"); txt_username = new JTextField(18); txt_password = new JPasswordField(18); btn_exit = new JButton(\"Exit\"); btn_login = new JButton(\"Login\"); } void addActionListeners() { btn_exit.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { System.exit(0); } }); btn_login.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { if (Main.dbManager.verifyLoginId(txt_username.getText(), new String(txt_password.getPassword()))) { LoginSuccessful(); } else { LoginFailed(); } } }); } void addComponentsToFrame() { add(lbl_info); add(lbl_username); add(txt_username); add(lbl_password); add(txt_password); add(btn_exit); add(btn_login); } void LoginSuccessful() { JOptionPane.showMessageDialog( null, \"Login Successful\", \"Login Successful\", JOptionPane.INFORMATION_MESSAGE ); setVisible(false); (new MainFrame(txt_username.getText())).setVisible(true); dispose(); } void LoginFailed() { JOptionPane.showMessageDialog( null, \"Wrong username or password\", \"Login Failed\", JOptionPane.ERROR_MESSAGE ); txt_username.setText(\"\"); txt_password.setText(\"\"); } }"},{"file_path":"Employee-Payroll-System-master\\sources\\org\\payroll\\departments\\DeleteDepartmentFrame.java","file_content":"package org.payroll.departments; import java.awt.*; import java.awt.event.*; import java.util.*; import javax.swing.*; import org.payroll.*; public class DeleteDepartmentFrame extends JFrame { private static final long serialVersionUID = 1L; ArrayList<String> departments = Main.dbManager.getListOfDepartments(); JLabel lbl_dep_name; JComboBox<String> combobox; JButton btn_cancel, btn_delete; public DeleteDepartmentFrame() { initFrame(); initComponents(); addActionListeners(); addComponentsToFrame(); } void initFrame() { setTitle(\"Delete Department\"); setSize(330, 120); setLocationRelativeTo(null); setResizable(false); setDefaultCloseOperation(DISPOSE_ON_CLOSE); setLayout(new FlowLayout()); } void initComponents() { lbl_dep_name = new JLabel(\"Department Name: \"); combobox = new JComboBox<String>(departments.toArray(new String[departments.size()])); btn_cancel = new JButton(\"Cancel\"); btn_delete = new JButton(\"Delete\"); } void addActionListeners() { btn_cancel.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { setVisible(false); dispose(); } }); btn_delete.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { Main.dbManager.deleteDepartment(combobox.getSelectedItem().toString()); setVisible(false); dispose(); } }); } void addComponentsToFrame() { add(lbl_dep_name); add(combobox); add(btn_cancel); add(btn_delete); } }"},{"file_path":"Employee-Payroll-System-master\\sources\\org\\payroll\\departments\\ModifyDepartmentFrame.java","file_content":"package org.payroll.departments; import java.awt.*; import java.awt.event.*; import javax.swing.*; import java.util.*; import org.payroll.*; public class ModifyDepartmentFrame extends JFrame { private static final long serialVersionUID = 1L; ArrayList<String> departments = Main.dbManager.getListOfDepartments(); JLabel lbl_dep_name, lbl_basic_salary, lbl_da, lbl_hra, lbl_pf; JComboBox<String> txt_dep_name; JTextField txt_basic_salary, txt_da, txt_hra, txt_pf; JButton btn_cancel, btn_create; public ModifyDepartmentFrame() { initFrame(); initComponents(); configureComponents(); addActionListeners(); addComponentsToFrame(); } void initFrame() { setTitle(\"Update Department\"); setSize(333, 193); setLocationRelativeTo(null); setResizable(false); setDefaultCloseOperation(DISPOSE_ON_CLOSE); setLayout(new FlowLayout()); } void initComponents() { lbl_dep_name = new JLabel(\"Department Name: \"); lbl_basic_salary = new JLabel(\" Basic Salary: \"); lbl_da = new JLabel(\" DA%: \"); lbl_hra = new JLabel(\" HRA%: \"); lbl_pf = new JLabel(\" PF%: \"); txt_dep_name = new JComboBox<String>(departments.toArray(new String[departments.size()])); txt_basic_salary = new JTextField(18); txt_da = new JTextField(18); txt_hra = new JTextField(18); txt_pf = new JTextField(18); btn_cancel = new JButton(\"Cancel\"); btn_create = new JButton(\"Update\"); } void configureComponents() { txt_da.setText(\"10\"); txt_hra.setText(\"14\"); txt_pf.setText(\"8\"); } void addActionListeners() { btn_cancel.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { setVisible(false); dispose(); } }); btn_create.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { try { String dep_name = txt_dep_name.getSelectedItem().toString(); int basic_salary = Integer.parseInt(txt_basic_salary.getText()); int da = Integer.parseInt(txt_da.getText()); int hra = Integer.parseInt(txt_hra.getText()); int pf = Integer.parseInt(txt_pf.getText()); if (Main.dbManager.existsDepartment(dep_name)) { Main.dbManager.updateDepartment(dep_name, basic_salary, da, hra, pf); setVisible(false); JOptionPane.showMessageDialog( null, \"Updated department settings\", \"Department updated\", JOptionPane.INFORMATION_MESSAGE ); dispose(); } else { JOptionPane.showMessageDialog( null, \"Department does not exist\", \"Department does not exist exist\", JOptionPane.ERROR_MESSAGE ); } } catch (NumberFormatException e1) { System.err.println(e1.getMessage()); } } }); } void addComponentsToFrame() { add(lbl_dep_name); add(txt_dep_name); add(lbl_basic_salary); add(txt_basic_salary); add(lbl_da); add(txt_da); add(lbl_hra); add(txt_hra); add(lbl_pf); add(txt_pf); add(btn_cancel); add(btn_create); } }"},{"file_path":"Employee-Payroll-System-master\\sources\\org\\payroll\\departments\\NewDepartmentFrame.java","file_content":"package org.payroll.departments; import java.awt.*; import java.awt.event.*; import javax.swing.*; import org.payroll.*; public class NewDepartmentFrame extends JFrame { private static final long serialVersionUID = 1L; JLabel lbl_dep_name, lbl_basic_salary, lbl_da, lbl_hra, lbl_pf; JTextField txt_dep_name, txt_basic_salary, txt_da, txt_hra, txt_pf; JButton btn_cancel, btn_create; public NewDepartmentFrame() { initFrame(); initComponents(); configureComponents(); addActionListeners(); addComponentsToFrame(); } void initFrame() { setTitle(\"New Department\"); setSize(333, 193); setLocationRelativeTo(null); setResizable(false); setDefaultCloseOperation(DISPOSE_ON_CLOSE); setLayout(new FlowLayout()); } void initComponents() { lbl_dep_name = new JLabel(\"Department Name: \"); lbl_basic_salary = new JLabel(\" Basic Salary: \"); lbl_da = new JLabel(\" DA%: \"); lbl_hra = new JLabel(\" HRA%: \"); lbl_pf = new JLabel(\" PF%: \"); txt_dep_name = new JTextField(18); txt_basic_salary = new JTextField(18); txt_da = new JTextField(18); txt_hra = new JTextField(18); txt_pf = new JTextField(18); btn_cancel = new JButton(\"Cancel\"); btn_create = new JButton(\"Create\"); } void configureComponents() { txt_da.setText(\"10\"); txt_hra.setText(\"14\"); txt_pf.setText(\"8\"); } void addActionListeners() { btn_cancel.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { setVisible(false); dispose(); } }); btn_create.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { try { String dep_name = txt_dep_name.getText(); int basic_salary = Integer.parseInt(txt_basic_salary.getText()); int da = Integer.parseInt(txt_da.getText()); int hra = Integer.parseInt(txt_hra.getText()); int pf = Integer.parseInt(txt_pf.getText()); if (!Main.dbManager.existsDepartment(dep_name)) { Main.dbManager.newDepartment(dep_name, basic_salary, da, hra, pf); setVisible(false); JOptionPane.showMessageDialog( null, \"Created Department successfully\", \"Department created\", JOptionPane.INFORMATION_MESSAGE ); dispose(); } else { JOptionPane.showMessageDialog( null, \"Department already exists\", \"Department already exists\", JOptionPane.ERROR_MESSAGE ); } } catch (NumberFormatException e1) { System.err.println(e1.getMessage()); } } }); } void addComponentsToFrame() { add(lbl_dep_name); add(txt_dep_name); add(lbl_basic_salary); add(txt_basic_salary); add(lbl_da); add(txt_da); add(lbl_hra); add(txt_hra); add(lbl_pf); add(txt_pf); add(btn_cancel); add(btn_create); } }"},{"file_path":"Employee-Payroll-System-master\\sources\\org\\payroll\\employees\\DeleteEmployeeFrame.java","file_content":"package org.payroll.employees; import java.awt.*; import java.awt.event.*; import javax.swing.*; import org.payroll.*; public class DeleteEmployeeFrame extends JFrame { private static final long serialVersionUID = 1L; JLabel lbl_id; JTextField txt_id; JButton btn_cancel, btn_delete; public DeleteEmployeeFrame() { initFrame(); initComponents(); configureComponents(); addActionListeners(); addComponentsToFrame(); } void initFrame() { setTitle(\"Delete Employee\"); setSize(260, 100); setLocationRelativeTo(null); setResizable(false); setDefaultCloseOperation(DISPOSE_ON_CLOSE); setLayout(new FlowLayout()); } void initComponents() { lbl_id = new JLabel(\"ID: \"); txt_id = new JTextField(18); btn_cancel = new JButton(\"Cancel\"); btn_delete = new JButton(\"Delete\"); } void configureComponents() { } void addActionListeners() { btn_cancel.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { setVisible(false); dispose(); } }); btn_delete.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { try { int id = Integer.parseUnsignedInt(txt_id.getText()); if (Main.dbManager.existsEmployeeID(id)) { Main.dbManager.deleteEmployee(id); setVisible(false); JOptionPane.showMessageDialog( null, \"Removed Employee Successfully\", \"Removed Employee\", JOptionPane.INFORMATION_MESSAGE ); dispose(); } else { JOptionPane.showMessageDialog( null, \"ID does not exist\", \"Error\", JOptionPane.ERROR_MESSAGE ); } } catch (NumberFormatException e1) { System.err.println(e1.getMessage()); } } }); } void addComponentsToFrame() { add(lbl_id); add(txt_id); add(btn_cancel); add(btn_delete); } }"},{"file_path":"Employee-Payroll-System-master\\sources\\org\\payroll\\employees\\NewEmployeeFrame.java","file_content":"package org.payroll.employees; import java.awt.*; import java.awt.event.*; import javax.swing.*; import org.payroll.*; import java.util.*; public class NewEmployeeFrame extends JFrame { private static final long serialVersionUID = 1L; ArrayList<String> departments = Main.dbManager.getListOfDepartments(); JLabel lbl_fn, lbl_ln, lbl_em, lbl_department; JTextField txt_fn, txt_ln, txt_em; JComboBox<String> txt_department; JButton btn_cancel, btn_create; public NewEmployeeFrame() { initFrame(); initComponents(); configureComponents(); addActionListeners(); addComponentsToFrame(); } void initFrame() { setTitle(\"New Employee\"); setSize(320, 170); setLocationRelativeTo(null); setResizable(false); setDefaultCloseOperation(DISPOSE_ON_CLOSE); setLayout(new FlowLayout()); } void initComponents() { lbl_fn = new JLabel (\"First Name: \"); lbl_ln = new JLabel (\"Last Name: \"); lbl_em = new JLabel (\" Email: \"); lbl_department = new JLabel (\" Department: \"); txt_fn = new JTextField(18); txt_ln = new JTextField(18); txt_em = new JTextField(18); txt_department = new JComboBox<String>(departments.toArray(new String[departments.size()])); btn_cancel = new JButton(\"Cancel\"); btn_create = new JButton(\"Create\"); } void configureComponents() { } void addActionListeners() { btn_cancel.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { setVisible(false); dispose(); } }); btn_create.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { Main.dbManager.createEmployee(txt_fn.getText(), txt_ln.getText(), txt_em.getText(), txt_department.getSelectedItem().toString()); setVisible(false); JOptionPane.showMessageDialog( null, \"New Employee Added\", \"New Employee Added\", JOptionPane.INFORMATION_MESSAGE ); dispose(); } }); } void addComponentsToFrame() { add(lbl_fn); add(txt_fn); add(lbl_ln); add(txt_ln); add(lbl_em); add(txt_em); add(lbl_department); add(txt_department); add(btn_cancel); add(btn_create); } }"},{"file_path":"Employee-Payroll-System-master\\sources\\org\\payroll\\employees\\UpdateEmployeeFrame.java","file_content":"package org.payroll.employees; import java.awt.*; import java.awt.event.*; import javax.swing.*; import org.payroll.*; import java.util.*; public class UpdateEmployeeFrame extends JFrame { private static final long serialVersionUID = 1L; ArrayList<String> departments = Main.dbManager.getListOfDepartments(); JLabel lbl_id, lbl_fn, lbl_ln, lbl_em, lbl_department; JTextField txt_id, txt_fn, txt_ln, txt_em; JComboBox<String> txt_department; JButton btn_cancel, btn_update; public UpdateEmployeeFrame() { initFrame(); initComponents(); configureComponents(); addActionListeners(); addComponentsToFrame(); } void initFrame() { setTitle(\"Update Employee\"); setSize(320, 195); setLocationRelativeTo(null); setResizable(false); setDefaultCloseOperation(DISPOSE_ON_CLOSE); setLayout(new FlowLayout()); } void initComponents() { lbl_id = new JLabel (\" ID: \"); lbl_fn = new JLabel (\"First Name: \"); lbl_ln = new JLabel (\"Last Name: \"); lbl_em = new JLabel (\" Email: \"); lbl_department = new JLabel (\" Department: \"); txt_id = new JTextField(18); txt_fn = new JTextField(18); txt_ln = new JTextField(18); txt_em = new JTextField(18); txt_department = new JComboBox<String>(departments.toArray(new String[departments.size()])); btn_cancel = new JButton(\"Cancel\"); btn_update = new JButton(\"Update\"); } void configureComponents() { } void addActionListeners() { btn_cancel.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { setVisible(false); dispose(); } }); btn_update.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { try { int id = Integer.parseInt(txt_id.getText()); String fn = txt_fn.getText(); String ln = txt_ln.getText(); String email = txt_em.getText(); String department = txt_department.getSelectedItem().toString(); if (Main.dbManager.existsEmployeeID(id)) { Main.dbManager.updateEmployee(id, fn, ln, email, department); setVisible(false); JOptionPane.showMessageDialog( null, \"ID Updated Successfully\", \"Employee Updated\", JOptionPane.INFORMATION_MESSAGE ); dispose(); } else { JOptionPane.showMessageDialog( null, \"ID doesn't exist.\", \"Error\", JOptionPane.ERROR_MESSAGE ); } } catch (NumberFormatException e1) { System.err.println(e1.getMessage()); } } }); } void addComponentsToFrame() { add(lbl_id); add(txt_id); add(lbl_fn); add(txt_fn); add(lbl_ln); add(txt_ln); add(lbl_em); add(txt_em); add(lbl_department); add(txt_department); add(btn_cancel); add(btn_update); } }"},{"file_path":"Employee-Payroll-System-master\\sources\\org\\payroll\\preferences\\ChangePasswordFrame.java","file_content":"package org.payroll.preferences; import javax.swing.*; import org.payroll.*; import java.awt.*; import java.awt.event.*; import java.util.Arrays; public class ChangePasswordFrame extends JFrame { private static final long serialVersionUID = 1L; String username; String uppercase_alphabets = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; String lowercase_alphabets = \"abcdefghijklmnopqrstuvwxyz\"; String numbers = \"0123456789\"; JLabel lbl_oldPassword, lbl_newPassword, lbl_repeatPassword; JPasswordField txt_oldPassword, txt_newPassword, txt_repeatPassword; JButton btn_cancel, btn_OK; public ChangePasswordFrame(String username) { this.username = username; initFrame(); initComponents(); addActionListeners(); addComponentsToFrame(); } void initFrame() { setTitle(\"Change Password\"); setSize(355, 145); setLocationRelativeTo(null); setResizable(false); setDefaultCloseOperation(DISPOSE_ON_CLOSE); setLayout(new FlowLayout()); } void initComponents() { lbl_oldPassword = new JLabel(\" Old Password: \"); lbl_newPassword = new JLabel(\" New Password: \"); lbl_repeatPassword = new JLabel(\"Repeat Password: \"); txt_oldPassword = new JPasswordField(20); txt_newPassword = new JPasswordField(20); txt_repeatPassword = new JPasswordField(20); btn_cancel = new JButton(\"Cancel\"); btn_OK = new JButton(\"OK\"); } void addActionListeners() { btn_cancel.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { setVisible(false); dispose(); } }); btn_OK.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { if (Main.dbManager.verifyLoginId(username, new String(txt_oldPassword.getPassword()))) if (Arrays.equals(txt_newPassword.getPassword(), txt_repeatPassword.getPassword())) if (isStrongPassword(new String(txt_newPassword.getPassword()))) { Main.dbManager.changePassword(username, new String(txt_newPassword.getPassword())); setVisible(false); JOptionPane.showMessageDialog( null, \"Your login id's password is changed successfully\", \"Password changed\", JOptionPane.INFORMATION_MESSAGE ); } else JOptionPane.showMessageDialog( null, \"Password not strong enough\", \"Weak Password\", JOptionPane.ERROR_MESSAGE ); else JOptionPane.showMessageDialog( null, \"Password don't match\", \"Password Error\", JOptionPane.ERROR_MESSAGE ); else JOptionPane.showMessageDialog( null, \"Invalid Login ID\", \"Invalid Login ID\", JOptionPane.ERROR_MESSAGE ); } }); } void addComponentsToFrame() { add(lbl_oldPassword); add(txt_oldPassword); add(lbl_newPassword); add(txt_newPassword); add(lbl_repeatPassword); add(txt_repeatPassword); add(btn_cancel); add(btn_OK); } Boolean isStrongPassword(String password) { if ((password.length() > 6) && (containsUppercase(password)) && (containsLowercase(password)) && (containsNumbers(password))) return true; return false; } Boolean containsUppercase(String password) { for (int i=0; i<password.length(); i++) { for (int j=0; j<uppercase_alphabets.length(); j++) { if (password.charAt(i) == uppercase_alphabets.charAt(j)) return true; } } return false; } Boolean containsLowercase(String password) { for (int i=0; i<password.length(); i++) { for (int j=0; j<lowercase_alphabets.length(); j++) { if (password.charAt(i) == lowercase_alphabets.charAt(j)) return true; } } return false; } Boolean containsNumbers(String password) { for (int i=0; i<password.length(); i++) { for (int j=0; j<numbers.length(); j++) { if (password.charAt(i) == numbers.charAt(j)) return true; } } return false; } }"}]}}
{"project_id":45,"chunk_id":1,"content":{"main_file_path":"Employee-Payroll-System-master\\sources\\org\\payroll\\MainFrame.java","main_file_content":"package org.payroll; import java.awt.*; import java.awt.event.*; import javax.swing.*; import org.payroll.preferences.*; import org.payroll.departments.*; import org.payroll.employees.*; public class MainFrame extends JFrame { private static final long serialVersionUID = 1L; String username; Object[] columns = { \"ID\", \"First Name\", \"Last Name\", \"Email\", \"Department\", \"Net Salary\" }; Object[][] data; JTable table; JScrollPane scrollpane; JTextField txt_loggedInAs; JMenuBar menubar; JMenu fileMenu, tableMenu, employeesMenu, departmentsMenu, preferencesMenu, helpMenu; JMenuItem logoutMI, exitMI; JMenuItem reloadMI; JMenuItem newEmployeeMI, updateEmployeeMI, deleteEmployeeMI; JMenuItem newDepartmentMI, modifyDepartmentMI, deleteDepartmentMI; JMenuItem newLoginIdMI, changePasswordMI, deleteLoginIdMI; JMenuItem aboutMI; public MainFrame(String username) { this.username = username; initFrame(); initComponents(); configureComponents(); addActionListeners(); addComponentsToFrame(); } void initFrame() { setTitle(\"Payroll System by Sanjan Geet Singh\"); setSize(800, 600); setLocationRelativeTo(null); setDefaultCloseOperation(EXIT_ON_CLOSE); setLayout(new BorderLayout()); } void initComponents() { data = Main.dbManager.getEmployees(); menubar = new JMenuBar(); txt_loggedInAs = new JTextField(\"Logged in as \" + username); fileMenu = new JMenu(\"File\"); tableMenu = new JMenu(\"Table\"); employeesMenu = new JMenu(\"Employees\"); departmentsMenu = new JMenu(\"Departments\"); preferencesMenu = new JMenu(\"Preferences\"); helpMenu = new JMenu(\"Help\"); logoutMI = new JMenuItem(\"Logout\"); exitMI = new JMenuItem(\"Exit\"); reloadMI = new JMenuItem(\"Reload\"); newEmployeeMI = new JMenuItem(\"New Employee\"); updateEmployeeMI = new JMenuItem(\"Update Employee\"); deleteEmployeeMI = new JMenuItem(\"Delete Employee\"); newDepartmentMI = new JMenuItem(\"New Department\"); modifyDepartmentMI = new JMenuItem(\"Modify Department\"); deleteDepartmentMI = new JMenuItem(\"Delete Department\"); newLoginIdMI = new JMenuItem(\"New Login ID\"); changePasswordMI = new JMenuItem(\"Change Password\"); deleteLoginIdMI = new JMenuItem(\"Delete Login ID\"); aboutMI = new JMenuItem(\"About\"); if (data == null) { table = new JTable(); } else { table = new JTable(data, columns); } scrollpane = new JScrollPane(table); } void configureComponents() { table.setEnabled(false); txt_loggedInAs.setEditable(false); } void addActionListeners() { logoutMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { setVisible(false); (new LoginFrame()).setVisible(true); dispose(); } }); exitMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { System.exit(0); } }); reloadMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { setVisible(false); (new MainFrame(username)).setVisible(true); dispose(); } }); newEmployeeMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { (new NewEmployeeFrame()).setVisible(true); } }); updateEmployeeMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { (new UpdateEmployeeFrame()).setVisible(true); } }); deleteEmployeeMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { (new DeleteEmployeeFrame()).setVisible(true); } }); newDepartmentMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { (new NewDepartmentFrame()).setVisible(true); } }); modifyDepartmentMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { (new ModifyDepartmentFrame()).setVisible(true); } }); deleteDepartmentMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { (new DeleteDepartmentFrame()).setVisible(true); } }); newLoginIdMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { (new NewLoginIdFrame()).setVisible(true); } }); changePasswordMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { (new ChangePasswordFrame(username)).setVisible(true); } }); deleteLoginIdMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { (new DeleteLoginIdFrame()).setVisible(true); } }); aboutMI.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { JOptionPane.showMessageDialog( null, \"Employee Payroll System\\nAuthor: Sanjan Geet Singh\\nEmail: sanjangeet2109s@gmail.com\", \"About\", JOptionPane.INFORMATION_MESSAGE ); } }); } void addComponentsToFrame() { fileMenu.add(logoutMI); fileMenu.add(exitMI); tableMenu.add(reloadMI); employeesMenu.add(newEmployeeMI); employeesMenu.add(updateEmployeeMI); employeesMenu.add(deleteEmployeeMI); departmentsMenu.add(newDepartmentMI); departmentsMenu.add(modifyDepartmentMI); departmentsMenu.add(deleteDepartmentMI); preferencesMenu.add(newLoginIdMI); preferencesMenu.add(changePasswordMI); preferencesMenu.add(deleteLoginIdMI); helpMenu.add(aboutMI); menubar.add(fileMenu); menubar.add(tableMenu); menubar.add(employeesMenu); menubar.add(departmentsMenu); menubar.add(preferencesMenu); menubar.add(helpMenu); setJMenuBar(menubar); add(scrollpane, BorderLayout.CENTER); add(txt_loggedInAs, BorderLayout.SOUTH); } }","dependencies":[{"file_path":"Employee-Payroll-System-master\\sources\\org\\payroll\\preferences\\DeleteLoginIdFrame.java","file_content":"package org.payroll.preferences; import java.awt.*; import java.awt.event.*; import javax.swing.*; import org.payroll.*; public class DeleteLoginIdFrame extends JFrame { private static final long serialVersionUID = 1L; JLabel lbl_username, lbl_password; JTextField txt_username; JPasswordField txt_password; JButton btn_cancel, btn_delete; public DeleteLoginIdFrame() { initFrame(); initComponents(); addActionListeners(); addComponentsToFrame(); } void initFrame() { setTitle(\"Delete Login ID\"); setSize(300, 115); setLocationRelativeTo(null); setResizable(false); setDefaultCloseOperation(DISPOSE_ON_CLOSE); setLayout(new FlowLayout()); } void initComponents() { lbl_username = new JLabel(\"Username: \"); txt_username = new JTextField(18); lbl_password = new JLabel(\"Password: \"); txt_password = new JPasswordField(18); btn_cancel = new JButton(\"Cancel\"); btn_delete = new JButton(\"Delete\"); } void addActionListeners() { btn_cancel.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { setVisible(false); dispose(); } }); btn_delete.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { if (Main.dbManager.verifyLoginId(txt_username.getText(), new String(txt_password.getPassword()))) { Main.dbManager.deleteLoginId(txt_username.getText()); setVisible(false); JOptionPane.showMessageDialog( null, \"Login ID deleted successfully\", \"Deletion Successful\", JOptionPane.INFORMATION_MESSAGE ); dispose(); } else JOptionPane.showMessageDialog( null, \"Wrong username or password\", \"Deletion Failed\", JOptionPane.ERROR_MESSAGE ); } }); } void addComponentsToFrame() { add(lbl_username); add(txt_username); add(lbl_password); add(txt_password); add(btn_cancel); add(btn_delete); } }"},{"file_path":"Employee-Payroll-System-master\\sources\\org\\payroll\\preferences\\NewLoginIdFrame.java","file_content":"package org.payroll.preferences; import java.awt.*; import java.awt.event.*; import java.util.*; import javax.swing.*; import org.payroll.*; public class NewLoginIdFrame extends JFrame { private static final long serialVersionUID = 1L; String chars = \" ^&\\\\/|`~\"; String uppercase_alphabets = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; String lowercase_alphabets = \"abcdefghijklmnopqrstuvwxyz\"; String numbers = \"0123456789\"; JLabel lbl_username, lbl_newPassword, lbl_repeatPassword; JTextField txt_username; JPasswordField txt_newPassword, txt_repeatPassword; JButton btn_cancel, btn_create; public NewLoginIdFrame() { initFrame(); initComponents(); addActionListeners(); addComponentsToFrame(); } void initFrame() { setTitle(\"New Login ID\"); setSize(338, 152); setLocationRelativeTo(null); setDefaultCloseOperation(DISPOSE_ON_CLOSE); setLayout(new FlowLayout()); } void initComponents() { lbl_username = new JLabel(\" Username: \"); txt_username = new JTextField(18); lbl_newPassword = new JLabel(\" New Password: \"); txt_newPassword = new JPasswordField(18); lbl_repeatPassword = new JLabel(\"Repeat Password: \"); txt_repeatPassword = new JPasswordField(18); btn_cancel = new JButton(\"Cancel\"); btn_create = new JButton(\"Create\"); } void addActionListeners() { btn_cancel.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { setVisible(false); dispose(); } }); btn_create.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { if (isUsernameValid()) { if (!Main.dbManager.verifyLoginId(txt_username.getText())) { if (Arrays.equals(txt_newPassword.getPassword(), txt_repeatPassword.getPassword())) { if (isStrongPassword()) { Main.dbManager.createLoginId(txt_username.getText(), new String(txt_newPassword.getPassword())); setVisible(false); JOptionPane.showMessageDialog( null, \"New Login ID created successfully\", \"New Login ID Created\", JOptionPane.INFORMATION_MESSAGE ); dispose(); } else JOptionPane.showMessageDialog( null, \"Password is not strong enough\", \"Weak Password\", JOptionPane.ERROR_MESSAGE ); } else JOptionPane.showMessageDialog( null, \"Passwords don't match\", \"Passwords are different\", JOptionPane.ERROR_MESSAGE ); } else JOptionPane.showMessageDialog( null, \"Username Already Taken\", \"Username already taken\", JOptionPane.ERROR_MESSAGE ); } else JOptionPane.showMessageDialog( null, \"Invalid Username. Username cannot contain these symbols: \" + chars, \"Invalid Username\", JOptionPane.ERROR_MESSAGE ); } }); } void addComponentsToFrame() { add(lbl_username); add(txt_username); add(lbl_newPassword); add(txt_newPassword); add(lbl_repeatPassword); add(txt_repeatPassword); add(btn_cancel); add(btn_create); } Boolean isUsernameValid() { String username = txt_username.getText(); if (username.length() < 1) return false; for (int i=0; i<username.length(); i++) { for (int j=0; j<chars.length(); j++) { if (username.charAt(i) == chars.charAt(j)) return false; } } return true; } Boolean isStrongPassword() { String password = new String(txt_newPassword.getPassword()); if ((password.length() > 6) && (containsUppercase(password)) && (containsLowercase(password)) && (containsNumbers(password))) return true; return false; } Boolean containsUppercase(String password) { for (int i=0; i<password.length(); i++) { for (int j=0; j<uppercase_alphabets.length(); j++) { if (password.charAt(i) == uppercase_alphabets.charAt(j)) return true; } } return false; } Boolean containsLowercase(String password) { for (int i=0; i<password.length(); i++) { for (int j=0; j<lowercase_alphabets.length(); j++) { if (password.charAt(i) == lowercase_alphabets.charAt(j)) return true; } } return false; } Boolean containsNumbers(String password) { for (int i=0; i<password.length(); i++) { for (int j=0; j<numbers.length(); j++) { if (password.charAt(i) == numbers.charAt(j)) return true; } } return false; } }"}]}}
{"project_id":45,"chunk_id":0,"content":{"main_file_path":"Employee-Payroll-System-master\\sources\\org\\payroll\\departments\\DeleteDepartmentFrame.java","main_file_content":"package org.payroll.departments; import java.awt.*; import java.awt.event.*; import java.util.*; import javax.swing.*; import org.payroll.*; public class DeleteDepartmentFrame extends JFrame { private static final long serialVersionUID = 1L; ArrayList<String> departments = Main.dbManager.getListOfDepartments(); JLabel lbl_dep_name; JComboBox<String> combobox; JButton btn_cancel, btn_delete; public DeleteDepartmentFrame() { initFrame(); initComponents(); addActionListeners(); addComponentsToFrame(); } void initFrame() { setTitle(\"Delete Department\"); setSize(330, 120); setLocationRelativeTo(null); setResizable(false); setDefaultCloseOperation(DISPOSE_ON_CLOSE); setLayout(new FlowLayout()); } void initComponents() { lbl_dep_name = new JLabel(\"Department Name: \"); combobox = new JComboBox<String>(departments.toArray(new String[departments.size()])); btn_cancel = new JButton(\"Cancel\"); btn_delete = new JButton(\"Delete\"); } void addActionListeners() { btn_cancel.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { setVisible(false); dispose(); } }); btn_delete.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { Main.dbManager.deleteDepartment(combobox.getSelectedItem().toString()); setVisible(false); dispose(); } }); } void addComponentsToFrame() { add(lbl_dep_name); add(combobox); add(btn_cancel); add(btn_delete); } }","dependencies":[]}}
{"project_id":45,"chunk_id":0,"content":{"main_file_path":"Employee-Payroll-System-master\\sources\\org\\payroll\\departments\\ModifyDepartmentFrame.java","main_file_content":"package org.payroll.departments; import java.awt.*; import java.awt.event.*; import javax.swing.*; import java.util.*; import org.payroll.*; public class ModifyDepartmentFrame extends JFrame { private static final long serialVersionUID = 1L; ArrayList<String> departments = Main.dbManager.getListOfDepartments(); JLabel lbl_dep_name, lbl_basic_salary, lbl_da, lbl_hra, lbl_pf; JComboBox<String> txt_dep_name; JTextField txt_basic_salary, txt_da, txt_hra, txt_pf; JButton btn_cancel, btn_create; public ModifyDepartmentFrame() { initFrame(); initComponents(); configureComponents(); addActionListeners(); addComponentsToFrame(); } void initFrame() { setTitle(\"Update Department\"); setSize(333, 193); setLocationRelativeTo(null); setResizable(false); setDefaultCloseOperation(DISPOSE_ON_CLOSE); setLayout(new FlowLayout()); } void initComponents() { lbl_dep_name = new JLabel(\"Department Name: \"); lbl_basic_salary = new JLabel(\" Basic Salary: \"); lbl_da = new JLabel(\" DA%: \"); lbl_hra = new JLabel(\" HRA%: \"); lbl_pf = new JLabel(\" PF%: \"); txt_dep_name = new JComboBox<String>(departments.toArray(new String[departments.size()])); txt_basic_salary = new JTextField(18); txt_da = new JTextField(18); txt_hra = new JTextField(18); txt_pf = new JTextField(18); btn_cancel = new JButton(\"Cancel\"); btn_create = new JButton(\"Update\"); } void configureComponents() { txt_da.setText(\"10\"); txt_hra.setText(\"14\"); txt_pf.setText(\"8\"); } void addActionListeners() { btn_cancel.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { setVisible(false); dispose(); } }); btn_create.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { try { String dep_name = txt_dep_name.getSelectedItem().toString(); int basic_salary = Integer.parseInt(txt_basic_salary.getText()); int da = Integer.parseInt(txt_da.getText()); int hra = Integer.parseInt(txt_hra.getText()); int pf = Integer.parseInt(txt_pf.getText()); if (Main.dbManager.existsDepartment(dep_name)) { Main.dbManager.updateDepartment(dep_name, basic_salary, da, hra, pf); setVisible(false); JOptionPane.showMessageDialog( null, \"Updated department settings\", \"Department updated\", JOptionPane.INFORMATION_MESSAGE ); dispose(); } else { JOptionPane.showMessageDialog( null, \"Department does not exist\", \"Department does not exist exist\", JOptionPane.ERROR_MESSAGE ); } } catch (NumberFormatException e1) { System.err.println(e1.getMessage()); } } }); } void addComponentsToFrame() { add(lbl_dep_name); add(txt_dep_name); add(lbl_basic_salary); add(txt_basic_salary); add(lbl_da); add(txt_da); add(lbl_hra); add(txt_hra); add(lbl_pf); add(txt_pf); add(btn_cancel); add(btn_create); } }","dependencies":[]}}
{"project_id":45,"chunk_id":0,"content":{"main_file_path":"Employee-Payroll-System-master\\sources\\org\\payroll\\departments\\NewDepartmentFrame.java","main_file_content":"package org.payroll.departments; import java.awt.*; import java.awt.event.*; import javax.swing.*; import org.payroll.*; public class NewDepartmentFrame extends JFrame { private static final long serialVersionUID = 1L; JLabel lbl_dep_name, lbl_basic_salary, lbl_da, lbl_hra, lbl_pf; JTextField txt_dep_name, txt_basic_salary, txt_da, txt_hra, txt_pf; JButton btn_cancel, btn_create; public NewDepartmentFrame() { initFrame(); initComponents(); configureComponents(); addActionListeners(); addComponentsToFrame(); } void initFrame() { setTitle(\"New Department\"); setSize(333, 193); setLocationRelativeTo(null); setResizable(false); setDefaultCloseOperation(DISPOSE_ON_CLOSE); setLayout(new FlowLayout()); } void initComponents() { lbl_dep_name = new JLabel(\"Department Name: \"); lbl_basic_salary = new JLabel(\" Basic Salary: \"); lbl_da = new JLabel(\" DA%: \"); lbl_hra = new JLabel(\" HRA%: \"); lbl_pf = new JLabel(\" PF%: \"); txt_dep_name = new JTextField(18); txt_basic_salary = new JTextField(18); txt_da = new JTextField(18); txt_hra = new JTextField(18); txt_pf = new JTextField(18); btn_cancel = new JButton(\"Cancel\"); btn_create = new JButton(\"Create\"); } void configureComponents() { txt_da.setText(\"10\"); txt_hra.setText(\"14\"); txt_pf.setText(\"8\"); } void addActionListeners() { btn_cancel.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { setVisible(false); dispose(); } }); btn_create.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { try { String dep_name = txt_dep_name.getText(); int basic_salary = Integer.parseInt(txt_basic_salary.getText()); int da = Integer.parseInt(txt_da.getText()); int hra = Integer.parseInt(txt_hra.getText()); int pf = Integer.parseInt(txt_pf.getText()); if (!Main.dbManager.existsDepartment(dep_name)) { Main.dbManager.newDepartment(dep_name, basic_salary, da, hra, pf); setVisible(false); JOptionPane.showMessageDialog( null, \"Created Department successfully\", \"Department created\", JOptionPane.INFORMATION_MESSAGE ); dispose(); } else { JOptionPane.showMessageDialog( null, \"Department already exists\", \"Department already exists\", JOptionPane.ERROR_MESSAGE ); } } catch (NumberFormatException e1) { System.err.println(e1.getMessage()); } } }); } void addComponentsToFrame() { add(lbl_dep_name); add(txt_dep_name); add(lbl_basic_salary); add(txt_basic_salary); add(lbl_da); add(txt_da); add(lbl_hra); add(txt_hra); add(lbl_pf); add(txt_pf); add(btn_cancel); add(btn_create); } }","dependencies":[]}}
{"project_id":45,"chunk_id":0,"content":{"main_file_path":"Employee-Payroll-System-master\\sources\\org\\payroll\\employees\\DeleteEmployeeFrame.java","main_file_content":"package org.payroll.employees; import java.awt.*; import java.awt.event.*; import javax.swing.*; import org.payroll.*; public class DeleteEmployeeFrame extends JFrame { private static final long serialVersionUID = 1L; JLabel lbl_id; JTextField txt_id; JButton btn_cancel, btn_delete; public DeleteEmployeeFrame() { initFrame(); initComponents(); configureComponents(); addActionListeners(); addComponentsToFrame(); } void initFrame() { setTitle(\"Delete Employee\"); setSize(260, 100); setLocationRelativeTo(null); setResizable(false); setDefaultCloseOperation(DISPOSE_ON_CLOSE); setLayout(new FlowLayout()); } void initComponents() { lbl_id = new JLabel(\"ID: \"); txt_id = new JTextField(18); btn_cancel = new JButton(\"Cancel\"); btn_delete = new JButton(\"Delete\"); } void configureComponents() { } void addActionListeners() { btn_cancel.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { setVisible(false); dispose(); } }); btn_delete.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { try { int id = Integer.parseUnsignedInt(txt_id.getText()); if (Main.dbManager.existsEmployeeID(id)) { Main.dbManager.deleteEmployee(id); setVisible(false); JOptionPane.showMessageDialog( null, \"Removed Employee Successfully\", \"Removed Employee\", JOptionPane.INFORMATION_MESSAGE ); dispose(); } else { JOptionPane.showMessageDialog( null, \"ID does not exist\", \"Error\", JOptionPane.ERROR_MESSAGE ); } } catch (NumberFormatException e1) { System.err.println(e1.getMessage()); } } }); } void addComponentsToFrame() { add(lbl_id); add(txt_id); add(btn_cancel); add(btn_delete); } }","dependencies":[]}}
{"project_id":45,"chunk_id":0,"content":{"main_file_path":"Employee-Payroll-System-master\\sources\\org\\payroll\\employees\\NewEmployeeFrame.java","main_file_content":"package org.payroll.employees; import java.awt.*; import java.awt.event.*; import javax.swing.*; import org.payroll.*; import java.util.*; public class NewEmployeeFrame extends JFrame { private static final long serialVersionUID = 1L; ArrayList<String> departments = Main.dbManager.getListOfDepartments(); JLabel lbl_fn, lbl_ln, lbl_em, lbl_department; JTextField txt_fn, txt_ln, txt_em; JComboBox<String> txt_department; JButton btn_cancel, btn_create; public NewEmployeeFrame() { initFrame(); initComponents(); configureComponents(); addActionListeners(); addComponentsToFrame(); } void initFrame() { setTitle(\"New Employee\"); setSize(320, 170); setLocationRelativeTo(null); setResizable(false); setDefaultCloseOperation(DISPOSE_ON_CLOSE); setLayout(new FlowLayout()); } void initComponents() { lbl_fn = new JLabel (\"First Name: \"); lbl_ln = new JLabel (\"Last Name: \"); lbl_em = new JLabel (\" Email: \"); lbl_department = new JLabel (\" Department: \"); txt_fn = new JTextField(18); txt_ln = new JTextField(18); txt_em = new JTextField(18); txt_department = new JComboBox<String>(departments.toArray(new String[departments.size()])); btn_cancel = new JButton(\"Cancel\"); btn_create = new JButton(\"Create\"); } void configureComponents() { } void addActionListeners() { btn_cancel.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { setVisible(false); dispose(); } }); btn_create.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { Main.dbManager.createEmployee(txt_fn.getText(), txt_ln.getText(), txt_em.getText(), txt_department.getSelectedItem().toString()); setVisible(false); JOptionPane.showMessageDialog( null, \"New Employee Added\", \"New Employee Added\", JOptionPane.INFORMATION_MESSAGE ); dispose(); } }); } void addComponentsToFrame() { add(lbl_fn); add(txt_fn); add(lbl_ln); add(txt_ln); add(lbl_em); add(txt_em); add(lbl_department); add(txt_department); add(btn_cancel); add(btn_create); } }","dependencies":[]}}
{"project_id":45,"chunk_id":0,"content":{"main_file_path":"Employee-Payroll-System-master\\sources\\org\\payroll\\employees\\UpdateEmployeeFrame.java","main_file_content":"package org.payroll.employees; import java.awt.*; import java.awt.event.*; import javax.swing.*; import org.payroll.*; import java.util.*; public class UpdateEmployeeFrame extends JFrame { private static final long serialVersionUID = 1L; ArrayList<String> departments = Main.dbManager.getListOfDepartments(); JLabel lbl_id, lbl_fn, lbl_ln, lbl_em, lbl_department; JTextField txt_id, txt_fn, txt_ln, txt_em; JComboBox<String> txt_department; JButton btn_cancel, btn_update; public UpdateEmployeeFrame() { initFrame(); initComponents(); configureComponents(); addActionListeners(); addComponentsToFrame(); } void initFrame() { setTitle(\"Update Employee\"); setSize(320, 195); setLocationRelativeTo(null); setResizable(false); setDefaultCloseOperation(DISPOSE_ON_CLOSE); setLayout(new FlowLayout()); } void initComponents() { lbl_id = new JLabel (\" ID: \"); lbl_fn = new JLabel (\"First Name: \"); lbl_ln = new JLabel (\"Last Name: \"); lbl_em = new JLabel (\" Email: \"); lbl_department = new JLabel (\" Department: \"); txt_id = new JTextField(18); txt_fn = new JTextField(18); txt_ln = new JTextField(18); txt_em = new JTextField(18); txt_department = new JComboBox<String>(departments.toArray(new String[departments.size()])); btn_cancel = new JButton(\"Cancel\"); btn_update = new JButton(\"Update\"); } void configureComponents() { } void addActionListeners() { btn_cancel.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { setVisible(false); dispose(); } }); btn_update.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { try { int id = Integer.parseInt(txt_id.getText()); String fn = txt_fn.getText(); String ln = txt_ln.getText(); String email = txt_em.getText(); String department = txt_department.getSelectedItem().toString(); if (Main.dbManager.existsEmployeeID(id)) { Main.dbManager.updateEmployee(id, fn, ln, email, department); setVisible(false); JOptionPane.showMessageDialog( null, \"ID Updated Successfully\", \"Employee Updated\", JOptionPane.INFORMATION_MESSAGE ); dispose(); } else { JOptionPane.showMessageDialog( null, \"ID doesn't exist.\", \"Error\", JOptionPane.ERROR_MESSAGE ); } } catch (NumberFormatException e1) { System.err.println(e1.getMessage()); } } }); } void addComponentsToFrame() { add(lbl_id); add(txt_id); add(lbl_fn); add(txt_fn); add(lbl_ln); add(txt_ln); add(lbl_em); add(txt_em); add(lbl_department); add(txt_department); add(btn_cancel); add(btn_update); } }","dependencies":[]}}
{"project_id":45,"chunk_id":0,"content":{"main_file_path":"Employee-Payroll-System-master\\sources\\org\\payroll\\preferences\\ChangePasswordFrame.java","main_file_content":"package org.payroll.preferences; import javax.swing.*; import org.payroll.*; import java.awt.*; import java.awt.event.*; import java.util.Arrays; public class ChangePasswordFrame extends JFrame { private static final long serialVersionUID = 1L; String username; String uppercase_alphabets = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; String lowercase_alphabets = \"abcdefghijklmnopqrstuvwxyz\"; String numbers = \"0123456789\"; JLabel lbl_oldPassword, lbl_newPassword, lbl_repeatPassword; JPasswordField txt_oldPassword, txt_newPassword, txt_repeatPassword; JButton btn_cancel, btn_OK; public ChangePasswordFrame(String username) { this.username = username; initFrame(); initComponents(); addActionListeners(); addComponentsToFrame(); } void initFrame() { setTitle(\"Change Password\"); setSize(355, 145); setLocationRelativeTo(null); setResizable(false); setDefaultCloseOperation(DISPOSE_ON_CLOSE); setLayout(new FlowLayout()); } void initComponents() { lbl_oldPassword = new JLabel(\" Old Password: \"); lbl_newPassword = new JLabel(\" New Password: \"); lbl_repeatPassword = new JLabel(\"Repeat Password: \"); txt_oldPassword = new JPasswordField(20); txt_newPassword = new JPasswordField(20); txt_repeatPassword = new JPasswordField(20); btn_cancel = new JButton(\"Cancel\"); btn_OK = new JButton(\"OK\"); } void addActionListeners() { btn_cancel.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { setVisible(false); dispose(); } }); btn_OK.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { if (Main.dbManager.verifyLoginId(username, new String(txt_oldPassword.getPassword()))) if (Arrays.equals(txt_newPassword.getPassword(), txt_repeatPassword.getPassword())) if (isStrongPassword(new String(txt_newPassword.getPassword()))) { Main.dbManager.changePassword(username, new String(txt_newPassword.getPassword())); setVisible(false); JOptionPane.showMessageDialog( null, \"Your login id's password is changed successfully\", \"Password changed\", JOptionPane.INFORMATION_MESSAGE ); } else JOptionPane.showMessageDialog( null, \"Password not strong enough\", \"Weak Password\", JOptionPane.ERROR_MESSAGE ); else JOptionPane.showMessageDialog( null, \"Password don't match\", \"Password Error\", JOptionPane.ERROR_MESSAGE ); else JOptionPane.showMessageDialog( null, \"Invalid Login ID\", \"Invalid Login ID\", JOptionPane.ERROR_MESSAGE ); } }); } void addComponentsToFrame() { add(lbl_oldPassword); add(txt_oldPassword); add(lbl_newPassword); add(txt_newPassword); add(lbl_repeatPassword); add(txt_repeatPassword); add(btn_cancel); add(btn_OK); } Boolean isStrongPassword(String password) { if ((password.length() > 6) && (containsUppercase(password)) && (containsLowercase(password)) && (containsNumbers(password))) return true; return false; } Boolean containsUppercase(String password) { for (int i=0; i<password.length(); i++) { for (int j=0; j<uppercase_alphabets.length(); j++) { if (password.charAt(i) == uppercase_alphabets.charAt(j)) return true; } } return false; } Boolean containsLowercase(String password) { for (int i=0; i<password.length(); i++) { for (int j=0; j<lowercase_alphabets.length(); j++) { if (password.charAt(i) == lowercase_alphabets.charAt(j)) return true; } } return false; } Boolean containsNumbers(String password) { for (int i=0; i<password.length(); i++) { for (int j=0; j<numbers.length(); j++) { if (password.charAt(i) == numbers.charAt(j)) return true; } } return false; } }","dependencies":[]}}
{"project_id":45,"chunk_id":0,"content":{"main_file_path":"Employee-Payroll-System-master\\sources\\org\\payroll\\preferences\\DeleteLoginIdFrame.java","main_file_content":"package org.payroll.preferences; import java.awt.*; import java.awt.event.*; import javax.swing.*; import org.payroll.*; public class DeleteLoginIdFrame extends JFrame { private static final long serialVersionUID = 1L; JLabel lbl_username, lbl_password; JTextField txt_username; JPasswordField txt_password; JButton btn_cancel, btn_delete; public DeleteLoginIdFrame() { initFrame(); initComponents(); addActionListeners(); addComponentsToFrame(); } void initFrame() { setTitle(\"Delete Login ID\"); setSize(300, 115); setLocationRelativeTo(null); setResizable(false); setDefaultCloseOperation(DISPOSE_ON_CLOSE); setLayout(new FlowLayout()); } void initComponents() { lbl_username = new JLabel(\"Username: \"); txt_username = new JTextField(18); lbl_password = new JLabel(\"Password: \"); txt_password = new JPasswordField(18); btn_cancel = new JButton(\"Cancel\"); btn_delete = new JButton(\"Delete\"); } void addActionListeners() { btn_cancel.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { setVisible(false); dispose(); } }); btn_delete.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { if (Main.dbManager.verifyLoginId(txt_username.getText(), new String(txt_password.getPassword()))) { Main.dbManager.deleteLoginId(txt_username.getText()); setVisible(false); JOptionPane.showMessageDialog( null, \"Login ID deleted successfully\", \"Deletion Successful\", JOptionPane.INFORMATION_MESSAGE ); dispose(); } else JOptionPane.showMessageDialog( null, \"Wrong username or password\", \"Deletion Failed\", JOptionPane.ERROR_MESSAGE ); } }); } void addComponentsToFrame() { add(lbl_username); add(txt_username); add(lbl_password); add(txt_password); add(btn_cancel); add(btn_delete); } }","dependencies":[]}}
{"project_id":45,"chunk_id":0,"content":{"main_file_path":"Employee-Payroll-System-master\\sources\\org\\payroll\\preferences\\NewLoginIdFrame.java","main_file_content":"package org.payroll.preferences; import java.awt.*; import java.awt.event.*; import java.util.*; import javax.swing.*; import org.payroll.*; public class NewLoginIdFrame extends JFrame { private static final long serialVersionUID = 1L; String chars = \" ^&\\\\/|`~\"; String uppercase_alphabets = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; String lowercase_alphabets = \"abcdefghijklmnopqrstuvwxyz\"; String numbers = \"0123456789\"; JLabel lbl_username, lbl_newPassword, lbl_repeatPassword; JTextField txt_username; JPasswordField txt_newPassword, txt_repeatPassword; JButton btn_cancel, btn_create; public NewLoginIdFrame() { initFrame(); initComponents(); addActionListeners(); addComponentsToFrame(); } void initFrame() { setTitle(\"New Login ID\"); setSize(338, 152); setLocationRelativeTo(null); setDefaultCloseOperation(DISPOSE_ON_CLOSE); setLayout(new FlowLayout()); } void initComponents() { lbl_username = new JLabel(\" Username: \"); txt_username = new JTextField(18); lbl_newPassword = new JLabel(\" New Password: \"); txt_newPassword = new JPasswordField(18); lbl_repeatPassword = new JLabel(\"Repeat Password: \"); txt_repeatPassword = new JPasswordField(18); btn_cancel = new JButton(\"Cancel\"); btn_create = new JButton(\"Create\"); } void addActionListeners() { btn_cancel.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { setVisible(false); dispose(); } }); btn_create.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { if (isUsernameValid()) { if (!Main.dbManager.verifyLoginId(txt_username.getText())) { if (Arrays.equals(txt_newPassword.getPassword(), txt_repeatPassword.getPassword())) { if (isStrongPassword()) { Main.dbManager.createLoginId(txt_username.getText(), new String(txt_newPassword.getPassword())); setVisible(false); JOptionPane.showMessageDialog( null, \"New Login ID created successfully\", \"New Login ID Created\", JOptionPane.INFORMATION_MESSAGE ); dispose(); } else JOptionPane.showMessageDialog( null, \"Password is not strong enough\", \"Weak Password\", JOptionPane.ERROR_MESSAGE ); } else JOptionPane.showMessageDialog( null, \"Passwords don't match\", \"Passwords are different\", JOptionPane.ERROR_MESSAGE ); } else JOptionPane.showMessageDialog( null, \"Username Already Taken\", \"Username already taken\", JOptionPane.ERROR_MESSAGE ); } else JOptionPane.showMessageDialog( null, \"Invalid Username. Username cannot contain these symbols: \" + chars, \"Invalid Username\", JOptionPane.ERROR_MESSAGE ); } }); } void addComponentsToFrame() { add(lbl_username); add(txt_username); add(lbl_newPassword); add(txt_newPassword); add(lbl_repeatPassword); add(txt_repeatPassword); add(btn_cancel); add(btn_create); } Boolean isUsernameValid() { String username = txt_username.getText(); if (username.length() < 1) return false; for (int i=0; i<username.length(); i++) { for (int j=0; j<chars.length(); j++) { if (username.charAt(i) == chars.charAt(j)) return false; } } return true; } Boolean isStrongPassword() { String password = new String(txt_newPassword.getPassword()); if ((password.length() > 6) && (containsUppercase(password)) && (containsLowercase(password)) && (containsNumbers(password))) return true; return false; } Boolean containsUppercase(String password) { for (int i=0; i<password.length(); i++) { for (int j=0; j<uppercase_alphabets.length(); j++) { if (password.charAt(i) == uppercase_alphabets.charAt(j)) return true; } } return false; } Boolean containsLowercase(String password) { for (int i=0; i<password.length(); i++) { for (int j=0; j<lowercase_alphabets.length(); j++) { if (password.charAt(i) == lowercase_alphabets.charAt(j)) return true; } } return false; } Boolean containsNumbers(String password) { for (int i=0; i<password.length(); i++) { for (int j=0; j<numbers.length(); j++) { if (password.charAt(i) == numbers.charAt(j)) return true; } } return false; } }","dependencies":[]}}
{"project_id":47,"chunk_id":0,"content":{"main_file_path":"Encrypt-the-Password\\password_encryption.java","main_file_content":"import java.math.BigInteger; import java.nio.charset.StandardCharsets; import java.security.MessageDigest; import java.security.NoSuchAlgorithmException; public class password_encryption { public static byte[] getSHA(String input) throws NoSuchAlgorithmException { MessageDigest md = MessageDigest.getInstance(\"SHA-512\"); return md.digest(input.getBytes(StandardCharsets.UTF_8)); } public static String toHexString(byte[] hash) { BigInteger number = new BigInteger(1, hash); StringBuilder hexString = new StringBuilder(number.toString(16)); while (hexString.length() < 32) { hexString.insert(0, '0'); } return hexString.toString(); } public static void main(String args[]) { try { String string1 = \"examplePassword123\"; System.out.println(\"\\n\" + string1 + \" : \" + toHexString(getSHA(string1))); String string2 = \"hashtrial\"; System.out.println(\"\\n\" + string2 + \" : \" + toHexString(getSHA(string2))); } catch (NoSuchAlgorithmException e) { System.out.println(\"Exception thrown for incorrect algorithm: \" + e); } } }","dependencies":[]}}
{"project_id":53,"chunk_id":0,"content":{"main_file_path":"Guess the Number\\guess_number.java","main_file_content":"import java.util.Scanner; import java.util.concurrent.ThreadLocalRandom; public class GuessNumberGame { private static final int MIN_NUMBER = 1; private static final int MAX_NUMBER = 1000; public static void main(String[] args) { GuessNumberGame game = new GuessNumberGame(); game.startGame(); } public void startGame() { boolean isUserGuessCorrect = false; int numberOfGuesses = 0; int computerNumber = getNumberByComputer(); while (!isUserGuessCorrect) { int userNumber = getUserGuessedNumber(); if (userNumber > computerNumber) { System.out.println(\"Sorry, the number you guessed is too high\"); } else if (userNumber < computerNumber) { System.out.println(\"Sorry, the number you guessed is too low\"); } else if (userNumber == computerNumber) { System.out.println(\"Congratulations! Your guess is correct!\"); isUserGuessCorrect = true; } numberOfGuesses++; } System.out.println(\"You found the number in \" + numberOfGuesses + \" guesses\"); } public int getNumberByComputer() { return ThreadLocalRandom.current().nextInt(MIN_NUMBER, MAX_NUMBER + 1); } public int getUserGuessedNumber() { Scanner sn = new Scanner(System.in); System.out.println(\"Please guess the number: \"); return sn.nextInt(); } }","dependencies":[]}}
{"project_id":54,"chunk_id":0,"content":{"main_file_path":"hangman-main\\Game.java","main_file_content":"import java.util.ArrayList; public class Game { private Printer printer = new Printer(); private String word; private int lettersRemaining; private String[] letters; private ArrayList<String> enteredLetters; private ArrayList<String> foundLetters; private ArrayList<String> wrongLetters; private int lives; Game(String word_) { word = word_; lettersRemaining = word.length(); letters = new String[lettersRemaining]; enteredLetters = new ArrayList<String>(); foundLetters = new ArrayList<String>(); wrongLetters = new ArrayList<String>(); lives = 6; } private void createLettersArray() { for (int i = 0; i < letters.length; i++) { letters[i] = Character.toString(word.charAt(i)); } } private boolean checkIfLetter(String letter) { boolean isLetter = false; if (letter.matches(\"[a-zA-Z]+\")) { isLetter = true; } return isLetter; } private boolean checkIfEntered(String letter, ArrayList<String> enteredLetters) { boolean entered = false; for (String let : enteredLetters) { if (let.equals(letter)) { entered = true; break; } } return entered; } private boolean checkLetter(String letter, String[] letters) { boolean found = false; for (String let : letters) { if (let.equals(letter)) { found = true; break; } } return found; } private int checkTimesFound(String letter, String[] letters) { int times = 0; for (String let : letters) { if (let.equals(letter)) { times += 1; } } return times; } private void addLetter(String letter, ArrayList<String> letters) { letters.add(letter); } boolean play() { createLettersArray(); printer.printWord(foundLetters, word); printer.print(\"Letters to Find: \" + lettersRemaining); printer.printEmptyLine(); printer.printHanging(lives); while (lives > 0) { printer.print(\"Enter letter:\"); LetterInput letterInput = new LetterInput(); String letter = letterInput.input().toLowerCase(); if (checkIfLetter(letter) == false) { printer.print(\"This was not a letter!\"); continue; } if (checkIfEntered(letter, enteredLetters) == true) { printer.print(\"You have already entered \" + letter + \"!\"); continue; } enteredLetters.add(letter); boolean result = checkLetter(letter, letters); printer.printIsLetterPresent(letter, result); if (result == true) { int timesFound = checkTimesFound(letter, letters); lettersRemaining -= timesFound; addLetter(letter, foundLetters); printer.printLetterLists(foundLetters, wrongLetters); } if (result == false) { lives -= 1; addLetter(letter, wrongLetters); printer.printLetterLists(foundLetters, wrongLetters); } if (lettersRemaining == 0 && lives > 0) { printer.printHappyMan(); printer.printWord(foundLetters, word); printer.print(\"You win!\"); return true; } printer.print(\"Letters remaining: \" + lettersRemaining); printer.printEmptyLine(); printer.printHanging(lives); printer.printWord(foundLetters, word); printer.printEmptyLine(); } printer.print(\"You lose!\"); printer.printFullWord(word); return false; } }","dependencies":[{"file_path":"hangman-main\\LetterInput.java","file_content":"import java.util.Scanner; public class LetterInput implements Input { private Scanner scanner; public String input() { scanner = new Scanner(System.in); String inputString = scanner.nextLine(); String outputString = \" \"; if (inputString.length() > 0) { outputString = inputString.substring(0, 1); } return outputString; } }"},{"file_path":"hangman-main\\Printer.java","file_content":"import java.util.ArrayList; class Printer { void printTitle() { System.out.println(\"\"); final String ANSI_RED = \"\\u001B[31m\"; final String ANSI_WHITE = \"\\u001B[37m\"; System.out.println(ANSI_RED + \" Hangman! \" + ANSI_WHITE); System.out.println(\"\"); System.out.println( \">> Running on \" + System.getProperty(\"os.name\") + \" <<\" + System.getProperty(\"line.separator\")); } void printEmptyLine() { System.out.print(System.getProperty(\"line.separator\")); } void print(String input) { System.out.println(input); } void printWord(ArrayList<String> foundLetters, String word) { String output = \"\"; for (int i = 0; i < word.length(); i++) { if (foundLetters.contains(Character.toString(word.charAt(i)))) { output += Character.toString(word.charAt(i)) + \" \"; } else { output += \"_ \"; } } System.out.println(output); } void printIsLetterPresent(String letter, boolean result) { String yesOrNo = \"\"; if (result == true) { yesOrNo = \"Yes\"; } else { yesOrNo = \"No\"; } System.out.println(\"Is \" + letter + \" present in word? --> \" + yesOrNo); } void printLetterLists(ArrayList<String> foundLetters, ArrayList<String> wrongLetters) { System.out.print(\"Found Letters: \"); for (String let : foundLetters) { System.out.print(let + \" \"); } System.out.println(\"\"); System.out.print(\"Wrong Letters: \"); for (String let : wrongLetters) { System.out.print(let + \" \"); } System.out.println(\"\"); } void printFullWord(String word) { System.out.println(\"The word was: \" + word); } void printHappyMan() { System.out.println(\" +---+\"); System.out.println(\" | |\"); System.out.println(\" |\"); System.out.println(\" \\\\O/ |\"); System.out.println(\" | |\"); System.out.println(\" / \\\\ |\"); System.out.println(\"\"); } void printHanging(int lives) { switch (lives) { case 6: System.out.println(\" +---+\"); System.out.println(\" | |\"); System.out.println(\" |\"); System.out.println(\" |\"); System.out.println(\" |\"); System.out.println(\" |\"); System.out.println(\"\"); break; case 5: System.out.println(\" +---+\"); System.out.println(\" | |\"); System.out.println(\" O |\"); System.out.println(\" |\"); System.out.println(\" |\"); System.out.println(\" |\"); System.out.println(\"\"); break; case 4: System.out.println(\" +---+\"); System.out.println(\" | |\"); System.out.println(\" O |\"); System.out.println(\" | |\"); System.out.println(\" |\"); System.out.println(\" |\"); System.out.println(\"\"); break; case 3: System.out.println(\" +---+\"); System.out.println(\" | |\"); System.out.println(\" O |\"); System.out.println(\" /| |\"); System.out.println(\" |\"); System.out.println(\" |\"); System.out.println(\"\"); break; case 2: System.out.println(\" +---+\"); System.out.println(\" | |\"); System.out.println(\" O |\"); System.out.println(\" /|\\\\ |\"); System.out.println(\" |\"); System.out.println(\" |\"); System.out.println(\"\"); break; case 1: System.out.println(\" +---+\"); System.out.println(\" | |\"); System.out.println(\" O |\"); System.out.println(\" /|\\\\ |\"); System.out.println(\" / |\"); System.out.println(\" |\"); System.out.println(\"\"); break; case 0: System.out.println(\" +---+\"); System.out.println(\" | |\"); System.out.println(\" O |\"); System.out.println(\" /|\\\\ |\"); System.out.println(\" / \\\\ |\"); System.out.println(\" |\"); System.out.println(\"\"); break; } } }"}]}}
{"project_id":54,"chunk_id":0,"content":{"main_file_path":"hangman-main\\Hangman.java","main_file_content":"import java.util.ArrayList; class Hangman { public static void main(String[] args) { Printer printer = new Printer(); printer.printTitle(); WordParser wordparser = new WordParser(\"./wordlist.txt\"); wordparser.createFile(); wordparser.createScanner(); ArrayList<String> words = wordparser.parse(); printer.printEmptyLine(); int winningStreak = 0; do { WordPicker wordPicker = new WordPicker(words); String word = wordPicker.pick(); Game game = new Game(word); if (game.play() == true) { winningStreak += 1; printer.print(\"Winning streak: \" + winningStreak); } else { winningStreak = 0; } } while (PlayAgain.wannaPlay() == true); printer.print(\"Thanks for playing!\"); } }","dependencies":[{"file_path":"hangman-main\\Game.java","file_content":"import java.util.ArrayList; public class Game { private Printer printer = new Printer(); private String word; private int lettersRemaining; private String[] letters; private ArrayList<String> enteredLetters; private ArrayList<String> foundLetters; private ArrayList<String> wrongLetters; private int lives; Game(String word_) { word = word_; lettersRemaining = word.length(); letters = new String[lettersRemaining]; enteredLetters = new ArrayList<String>(); foundLetters = new ArrayList<String>(); wrongLetters = new ArrayList<String>(); lives = 6; } private void createLettersArray() { for (int i = 0; i < letters.length; i++) { letters[i] = Character.toString(word.charAt(i)); } } private boolean checkIfLetter(String letter) { boolean isLetter = false; if (letter.matches(\"[a-zA-Z]+\")) { isLetter = true; } return isLetter; } private boolean checkIfEntered(String letter, ArrayList<String> enteredLetters) { boolean entered = false; for (String let : enteredLetters) { if (let.equals(letter)) { entered = true; break; } } return entered; } private boolean checkLetter(String letter, String[] letters) { boolean found = false; for (String let : letters) { if (let.equals(letter)) { found = true; break; } } return found; } private int checkTimesFound(String letter, String[] letters) { int times = 0; for (String let : letters) { if (let.equals(letter)) { times += 1; } } return times; } private void addLetter(String letter, ArrayList<String> letters) { letters.add(letter); } boolean play() { createLettersArray(); printer.printWord(foundLetters, word); printer.print(\"Letters to Find: \" + lettersRemaining); printer.printEmptyLine(); printer.printHanging(lives); while (lives > 0) { printer.print(\"Enter letter:\"); LetterInput letterInput = new LetterInput(); String letter = letterInput.input().toLowerCase(); if (checkIfLetter(letter) == false) { printer.print(\"This was not a letter!\"); continue; } if (checkIfEntered(letter, enteredLetters) == true) { printer.print(\"You have already entered \" + letter + \"!\"); continue; } enteredLetters.add(letter); boolean result = checkLetter(letter, letters); printer.printIsLetterPresent(letter, result); if (result == true) { int timesFound = checkTimesFound(letter, letters); lettersRemaining -= timesFound; addLetter(letter, foundLetters); printer.printLetterLists(foundLetters, wrongLetters); } if (result == false) { lives -= 1; addLetter(letter, wrongLetters); printer.printLetterLists(foundLetters, wrongLetters); } if (lettersRemaining == 0 && lives > 0) { printer.printHappyMan(); printer.printWord(foundLetters, word); printer.print(\"You win!\"); return true; } printer.print(\"Letters remaining: \" + lettersRemaining); printer.printEmptyLine(); printer.printHanging(lives); printer.printWord(foundLetters, word); printer.printEmptyLine(); } printer.print(\"You lose!\"); printer.printFullWord(word); return false; } }"},{"file_path":"hangman-main\\PlayAgain.java","file_content":"class PlayAgain { static boolean wannaPlay() { System.out.println(\"Do you want to play again? (y/n)\"); LetterInput letterInput = new LetterInput(); String letter = letterInput.input().toLowerCase(); if (letter.equals(\"y\")) { return true; } else { return false; } } }"},{"file_path":"hangman-main\\Printer.java","file_content":"import java.util.ArrayList; class Printer { void printTitle() { System.out.println(\"\"); final String ANSI_RED = \"\\u001B[31m\"; final String ANSI_WHITE = \"\\u001B[37m\"; System.out.println(ANSI_RED + \" Hangman! \" + ANSI_WHITE); System.out.println(\"\"); System.out.println( \">> Running on \" + System.getProperty(\"os.name\") + \" <<\" + System.getProperty(\"line.separator\")); } void printEmptyLine() { System.out.print(System.getProperty(\"line.separator\")); } void print(String input) { System.out.println(input); } void printWord(ArrayList<String> foundLetters, String word) { String output = \"\"; for (int i = 0; i < word.length(); i++) { if (foundLetters.contains(Character.toString(word.charAt(i)))) { output += Character.toString(word.charAt(i)) + \" \"; } else { output += \"_ \"; } } System.out.println(output); } void printIsLetterPresent(String letter, boolean result) { String yesOrNo = \"\"; if (result == true) { yesOrNo = \"Yes\"; } else { yesOrNo = \"No\"; } System.out.println(\"Is \" + letter + \" present in word? --> \" + yesOrNo); } void printLetterLists(ArrayList<String> foundLetters, ArrayList<String> wrongLetters) { System.out.print(\"Found Letters: \"); for (String let : foundLetters) { System.out.print(let + \" \"); } System.out.println(\"\"); System.out.print(\"Wrong Letters: \"); for (String let : wrongLetters) { System.out.print(let + \" \"); } System.out.println(\"\"); } void printFullWord(String word) { System.out.println(\"The word was: \" + word); } void printHappyMan() { System.out.println(\" +---+\"); System.out.println(\" | |\"); System.out.println(\" |\"); System.out.println(\" \\\\O/ |\"); System.out.println(\" | |\"); System.out.println(\" / \\\\ |\"); System.out.println(\"\"); } void printHanging(int lives) { switch (lives) { case 6: System.out.println(\" +---+\"); System.out.println(\" | |\"); System.out.println(\" |\"); System.out.println(\" |\"); System.out.println(\" |\"); System.out.println(\" |\"); System.out.println(\"\"); break; case 5: System.out.println(\" +---+\"); System.out.println(\" | |\"); System.out.println(\" O |\"); System.out.println(\" |\"); System.out.println(\" |\"); System.out.println(\" |\"); System.out.println(\"\"); break; case 4: System.out.println(\" +---+\"); System.out.println(\" | |\"); System.out.println(\" O |\"); System.out.println(\" | |\"); System.out.println(\" |\"); System.out.println(\" |\"); System.out.println(\"\"); break; case 3: System.out.println(\" +---+\"); System.out.println(\" | |\"); System.out.println(\" O |\"); System.out.println(\" /| |\"); System.out.println(\" |\"); System.out.println(\" |\"); System.out.println(\"\"); break; case 2: System.out.println(\" +---+\"); System.out.println(\" | |\"); System.out.println(\" O |\"); System.out.println(\" /|\\\\ |\"); System.out.println(\" |\"); System.out.println(\" |\"); System.out.println(\"\"); break; case 1: System.out.println(\" +---+\"); System.out.println(\" | |\"); System.out.println(\" O |\"); System.out.println(\" /|\\\\ |\"); System.out.println(\" / |\"); System.out.println(\" |\"); System.out.println(\"\"); break; case 0: System.out.println(\" +---+\"); System.out.println(\" | |\"); System.out.println(\" O |\"); System.out.println(\" /|\\\\ |\"); System.out.println(\" / \\\\ |\"); System.out.println(\" |\"); System.out.println(\"\"); break; } } }"},{"file_path":"hangman-main\\WordParser.java","file_content":"import java.io.File; import java.util.Scanner; import java.io.IOException; import java.util.ArrayList; public class WordParser implements Parser { private String filePath; private File file; private Scanner scanner; private ArrayList<String> words = new ArrayList<String>(); WordParser(String filePath_) { filePath = filePath_; } public void createFile() { file = new File(filePath); } public void createScanner() { try { scanner = new Scanner(file); } catch (IOException e) { e.printStackTrace(); } } public ArrayList<String> parse() { while (scanner.hasNextLine()) { String word = scanner.nextLine(); if (word.length() >= 4) { boolean hasApostrophe = false; for (int i = 0; i < word.length(); i++) { if (word.charAt(i) == '\\'' && word.charAt(i) == ' ') { hasApostrophe = true; } } if (hasApostrophe == false) { words.add(word); } } } return (words); } }"},{"file_path":"hangman-main\\WordPicker.java","file_content":"import java.util.ArrayList; import java.util.Random; public class WordPicker implements Picker { private ArrayList<String> list = new ArrayList<String>(); private Random random; WordPicker(ArrayList<String> list_) { list = list_; } public String pick() { int listSize = list.size(); random = new Random(System.currentTimeMillis()); int randomNum = random.nextInt(listSize + 1); String word = list.get(randomNum); return word; } }"}]}}
{"project_id":54,"chunk_id":0,"content":{"main_file_path":"hangman-main\\Input.java","main_file_content":"interface Input { String input(); }","dependencies":[]}}
{"project_id":54,"chunk_id":0,"content":{"main_file_path":"hangman-main\\LetterInput.java","main_file_content":"import java.util.Scanner; public class LetterInput implements Input { private Scanner scanner; public String input() { scanner = new Scanner(System.in); String inputString = scanner.nextLine(); String outputString = \" \"; if (inputString.length() > 0) { outputString = inputString.substring(0, 1); } return outputString; } }","dependencies":[{"file_path":"hangman-main\\Input.java","file_content":"interface Input { String input(); }"}]}}
{"project_id":54,"chunk_id":0,"content":{"main_file_path":"hangman-main\\Parser.java","main_file_content":"import java.util.ArrayList; interface Parser { void createFile(); void createScanner(); ArrayList<String> parse(); }","dependencies":[]}}
{"project_id":54,"chunk_id":0,"content":{"main_file_path":"hangman-main\\Picker.java","main_file_content":"interface Picker { String pick(); }","dependencies":[]}}
{"project_id":54,"chunk_id":0,"content":{"main_file_path":"hangman-main\\PlayAgain.java","main_file_content":"class PlayAgain { static boolean wannaPlay() { System.out.println(\"Do you want to play again? (y/n)\"); LetterInput letterInput = new LetterInput(); String letter = letterInput.input().toLowerCase(); if (letter.equals(\"y\")) { return true; } else { return false; } } }","dependencies":[{"file_path":"hangman-main\\LetterInput.java","file_content":"import java.util.Scanner; public class LetterInput implements Input { private Scanner scanner; public String input() { scanner = new Scanner(System.in); String inputString = scanner.nextLine(); String outputString = \" \"; if (inputString.length() > 0) { outputString = inputString.substring(0, 1); } return outputString; } }"}]}}
{"project_id":54,"chunk_id":0,"content":{"main_file_path":"hangman-main\\Printer.java","main_file_content":"import java.util.ArrayList; class Printer { void printTitle() { System.out.println(\"\"); final String ANSI_RED = \"\\u001B[31m\"; final String ANSI_WHITE = \"\\u001B[37m\"; System.out.println(ANSI_RED + \" Hangman! \" + ANSI_WHITE); System.out.println(\"\"); System.out.println( \">> Running on \" + System.getProperty(\"os.name\") + \" <<\" + System.getProperty(\"line.separator\")); } void printEmptyLine() { System.out.print(System.getProperty(\"line.separator\")); } void print(String input) { System.out.println(input); } void printWord(ArrayList<String> foundLetters, String word) { String output = \"\"; for (int i = 0; i < word.length(); i++) { if (foundLetters.contains(Character.toString(word.charAt(i)))) { output += Character.toString(word.charAt(i)) + \" \"; } else { output += \"_ \"; } } System.out.println(output); } void printIsLetterPresent(String letter, boolean result) { String yesOrNo = \"\"; if (result == true) { yesOrNo = \"Yes\"; } else { yesOrNo = \"No\"; } System.out.println(\"Is \" + letter + \" present in word? --> \" + yesOrNo); } void printLetterLists(ArrayList<String> foundLetters, ArrayList<String> wrongLetters) { System.out.print(\"Found Letters: \"); for (String let : foundLetters) { System.out.print(let + \" \"); } System.out.println(\"\"); System.out.print(\"Wrong Letters: \"); for (String let : wrongLetters) { System.out.print(let + \" \"); } System.out.println(\"\"); } void printFullWord(String word) { System.out.println(\"The word was: \" + word); } void printHappyMan() { System.out.println(\" +---+\"); System.out.println(\" | |\"); System.out.println(\" |\"); System.out.println(\" \\\\O/ |\"); System.out.println(\" | |\"); System.out.println(\" / \\\\ |\"); System.out.println(\"\"); } void printHanging(int lives) { switch (lives) { case 6: System.out.println(\" +---+\"); System.out.println(\" | |\"); System.out.println(\" |\"); System.out.println(\" |\"); System.out.println(\" |\"); System.out.println(\" |\"); System.out.println(\"\"); break; case 5: System.out.println(\" +---+\"); System.out.println(\" | |\"); System.out.println(\" O |\"); System.out.println(\" |\"); System.out.println(\" |\"); System.out.println(\" |\"); System.out.println(\"\"); break; case 4: System.out.println(\" +---+\"); System.out.println(\" | |\"); System.out.println(\" O |\"); System.out.println(\" | |\"); System.out.println(\" |\"); System.out.println(\" |\"); System.out.println(\"\"); break; case 3: System.out.println(\" +---+\"); System.out.println(\" | |\"); System.out.println(\" O |\"); System.out.println(\" /| |\"); System.out.println(\" |\"); System.out.println(\" |\"); System.out.println(\"\"); break; case 2: System.out.println(\" +---+\"); System.out.println(\" | |\"); System.out.println(\" O |\"); System.out.println(\" /|\\\\ |\"); System.out.println(\" |\"); System.out.println(\" |\"); System.out.println(\"\"); break; case 1: System.out.println(\" +---+\"); System.out.println(\" | |\"); System.out.println(\" O |\"); System.out.println(\" /|\\\\ |\"); System.out.println(\" / |\"); System.out.println(\" |\"); System.out.println(\"\"); break; case 0: System.out.println(\" +---+\"); System.out.println(\" | |\"); System.out.println(\" O |\"); System.out.println(\" /|\\\\ |\"); System.out.println(\" / \\\\ |\"); System.out.println(\" |\"); System.out.println(\"\"); break; } } }","dependencies":[]}}
{"project_id":54,"chunk_id":0,"content":{"main_file_path":"hangman-main\\WordParser.java","main_file_content":"import java.io.File; import java.util.Scanner; import java.io.IOException; import java.util.ArrayList; public class WordParser implements Parser { private String filePath; private File file; private Scanner scanner; private ArrayList<String> words = new ArrayList<String>(); WordParser(String filePath_) { filePath = filePath_; } public void createFile() { file = new File(filePath); } public void createScanner() { try { scanner = new Scanner(file); } catch (IOException e) { e.printStackTrace(); } } public ArrayList<String> parse() { while (scanner.hasNextLine()) { String word = scanner.nextLine(); if (word.length() >= 4) { boolean hasApostrophe = false; for (int i = 0; i < word.length(); i++) { if (word.charAt(i) == '\\'' && word.charAt(i) == ' ') { hasApostrophe = true; } } if (hasApostrophe == false) { words.add(word); } } } return (words); } }","dependencies":[{"file_path":"hangman-main\\Parser.java","file_content":"import java.util.ArrayList; interface Parser { void createFile(); void createScanner(); ArrayList<String> parse(); }"}]}}
{"project_id":54,"chunk_id":0,"content":{"main_file_path":"hangman-main\\WordPicker.java","main_file_content":"import java.util.ArrayList; import java.util.Random; public class WordPicker implements Picker { private ArrayList<String> list = new ArrayList<String>(); private Random random; WordPicker(ArrayList<String> list_) { list = list_; } public String pick() { int listSize = list.size(); random = new Random(System.currentTimeMillis()); int randomNum = random.nextInt(listSize + 1); String word = list.get(randomNum); return word; } }","dependencies":[{"file_path":"hangman-main\\Picker.java","file_content":"interface Picker { String pick(); }"}]}}
{"project_id":56,"chunk_id":0,"content":{"main_file_path":"HospitalManagementSysyem-master\\src\\java\\Controller\\AddDoctor.java","main_file_content":"package Controller; import Database.DatabaseConnection; import java.io.IOException; import java.io.PrintWriter; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.SQLException; import java.text.DateFormat; import java.text.SimpleDateFormat; import java.util.Date; import java.util.logging.Level; import java.util.logging.Logger; import javax.servlet.RequestDispatcher; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; @WebServlet(\"/AddDoctor\") public class AddDoctor extends HttpServlet { private int i; @Override protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { PrintWriter pw = response.getWriter(); try { Date todaysDate = new Date(); DateFormat df2 = new SimpleDateFormat(\"dd-MM-yyyy HH:mm:ss\"); String sid = request.getParameter(\"id\"); int id = Integer.parseInt(sid); String fname = request.getParameter(\"fname\"); String lname = request.getParameter(\"lname\"); String gender = request.getParameter(\"gender\"); String phone = request.getParameter(\"Mobile\"); String city = request.getParameter(\"City\"); String email = request.getParameter(\"email\"); String age = request.getParameter(\"age\"); String address = request.getParameter(\"address\"); String qualification = request.getParameter(\"qualification\"); String DateAndTime = df2.format(todaysDate); Connection con = DatabaseConnection.initializeDatabase(); PreparedStatement pst = con.prepareStatement(\"insert into doctor values(?,?,?,?,?,?,?,?,?,?,?)\"); pst.setInt(1, id); pst.setString(5, phone); pst.setString(2, fname); pst.setString(3, lname); pst.setString(4, gender); pst.setString(6, city); pst.setString(7, email); pst.setString(8, age); pst.setString(9, address); pst.setString(10, DateAndTime); pst.setString(11, qualification); i = pst.executeUpdate(); if (i > 0) { pw.println(\"<script type=\\\"text/javascript\\\">\"); pw.println(\"alert('Data Add Successfully..!');\"); pw.println(\"window.location.href = \\\"AdminHome.jsp\\\";\"); pw.println(\"</script>\"); } else { pw.println(\"<script type=\\\"text/javascript\\\">\"); pw.println(\"alert('Failed !!!!,try Again Later!');\"); pw.println(\"window.location.href = \\\"addDoctor.jsp\\\";\"); pw.println(\"</script>\"); } } catch (SQLException | ClassNotFoundException ex) { Logger.getLogger(AddPatient.class.getName()).log(Level.SEVERE, null, ex); } } }","dependencies":[{"file_path":"HospitalManagementSysyem-master\\src\\java\\Controller\\AddPatient.java","file_content":"package Controller; import Database.DatabaseConnection; import java.io.IOException; import java.io.PrintWriter; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.SQLException; import java.text.DateFormat; import java.text.SimpleDateFormat; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.util.Date; import java.util.logging.Level; import java.util.logging.Logger; import javax.servlet.RequestDispatcher; @WebServlet(\"/AddPatient\") public class AddPatient extends HttpServlet { private int i; @Override protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { PrintWriter pw = response.getWriter(); try { Date todaysDate = new Date(); DateFormat df2 = new SimpleDateFormat(\"dd-MM-yyyy HH:mm:ss\"); String fname = request.getParameter(\"fname\"); String lname = request.getParameter(\"lname\"); String gender = request.getParameter(\"gender\"); String phone = request.getParameter(\"Mobile\"); String city = request.getParameter(\"City\"); String email = request.getParameter(\"email\"); String age = request.getParameter(\"age\"); String address = request.getParameter(\"address\"); String DateAndTime = df2.format(todaysDate); Connection con = DatabaseConnection.initializeDatabase(); PreparedStatement pst = con.prepareStatement(\"insert into patient values(?,?,?,?,?,?,?,?,?)\"); pst.setString(9, phone); pst.setString(1, fname); pst.setString(2, lname); pst.setString(3, gender); pst.setString(4, city); pst.setString(5, email); pst.setString(6, age); pst.setString(7, address); pst.setString(8, DateAndTime); i = pst.executeUpdate(); if (i > 0) { pw.println(\"<script type=\\\"text/javascript\\\">\"); pw.println(\"alert('Login Successfully..!');\"); pw.println(\"window.location.href = \\\"UserHome.jsp\\\";\"); pw.println(\"</script>\"); } else { pw.println(\"<script type=\\\"text/javascript\\\">\"); pw.println(\"alert('Incorrect Data..!');\"); pw.println(\"window.location.href = \\\"addpatient.jsp\\\";\"); pw.println(\"</script>\"); } } catch (SQLException ex) { Logger.getLogger(AddPatient.class.getName()).log(Level.SEVERE, null, ex); } catch (ClassNotFoundException ex) { Logger.getLogger(AddPatient.class.getName()).log(Level.SEVERE, null, ex); } } }"},{"file_path":"HospitalManagementSysyem-master\\src\\java\\Database\\DatabaseConnection.java","file_content":"package Database; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; public class DatabaseConnection { public static Connection initializeDatabase() throws SQLException, ClassNotFoundException { String dbDriver = \"com.mysql.jdbc.Driver\"; String dbURL = \"jdbc:mysql: String dbName = \"hospital\"; String dbUsername = \"root\"; String dbPassword = \"root\"; Class.forName(dbDriver); Connection con = DriverManager.getConnection(dbURL+dbName,dbUsername,dbPassword); return con; } }"}]}}
{"project_id":56,"chunk_id":0,"content":{"main_file_path":"HospitalManagementSysyem-master\\src\\java\\Controller\\AddPatient.java","main_file_content":"package Controller; import Database.DatabaseConnection; import java.io.IOException; import java.io.PrintWriter; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.SQLException; import java.text.DateFormat; import java.text.SimpleDateFormat; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.util.Date; import java.util.logging.Level; import java.util.logging.Logger; import javax.servlet.RequestDispatcher; @WebServlet(\"/AddPatient\") public class AddPatient extends HttpServlet { private int i; @Override protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { PrintWriter pw = response.getWriter(); try { Date todaysDate = new Date(); DateFormat df2 = new SimpleDateFormat(\"dd-MM-yyyy HH:mm:ss\"); String fname = request.getParameter(\"fname\"); String lname = request.getParameter(\"lname\"); String gender = request.getParameter(\"gender\"); String phone = request.getParameter(\"Mobile\"); String city = request.getParameter(\"City\"); String email = request.getParameter(\"email\"); String age = request.getParameter(\"age\"); String address = request.getParameter(\"address\"); String DateAndTime = df2.format(todaysDate); Connection con = DatabaseConnection.initializeDatabase(); PreparedStatement pst = con.prepareStatement(\"insert into patient values(?,?,?,?,?,?,?,?,?)\"); pst.setString(9, phone); pst.setString(1, fname); pst.setString(2, lname); pst.setString(3, gender); pst.setString(4, city); pst.setString(5, email); pst.setString(6, age); pst.setString(7, address); pst.setString(8, DateAndTime); i = pst.executeUpdate(); if (i > 0) { pw.println(\"<script type=\\\"text/javascript\\\">\"); pw.println(\"alert('Login Successfully..!');\"); pw.println(\"window.location.href = \\\"UserHome.jsp\\\";\"); pw.println(\"</script>\"); } else { pw.println(\"<script type=\\\"text/javascript\\\">\"); pw.println(\"alert('Incorrect Data..!');\"); pw.println(\"window.location.href = \\\"addpatient.jsp\\\";\"); pw.println(\"</script>\"); } } catch (SQLException ex) { Logger.getLogger(AddPatient.class.getName()).log(Level.SEVERE, null, ex); } catch (ClassNotFoundException ex) { Logger.getLogger(AddPatient.class.getName()).log(Level.SEVERE, null, ex); } } }","dependencies":[{"file_path":"HospitalManagementSysyem-master\\src\\java\\Database\\DatabaseConnection.java","file_content":"package Database; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; public class DatabaseConnection { public static Connection initializeDatabase() throws SQLException, ClassNotFoundException { String dbDriver = \"com.mysql.jdbc.Driver\"; String dbURL = \"jdbc:mysql: String dbName = \"hospital\"; String dbUsername = \"root\"; String dbPassword = \"root\"; Class.forName(dbDriver); Connection con = DriverManager.getConnection(dbURL+dbName,dbUsername,dbPassword); return con; } }"}]}}
{"project_id":56,"chunk_id":0,"content":{"main_file_path":"HospitalManagementSysyem-master\\src\\java\\Controller\\AddRecp.java","main_file_content":"package Controller; import Database.DatabaseConnection; import java.io.IOException; import java.io.PrintWriter; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.SQLException; import java.text.DateFormat; import java.text.SimpleDateFormat; import java.util.Date; import java.util.logging.Level; import java.util.logging.Logger; import javax.servlet.RequestDispatcher; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; @WebServlet(\"/AddRecp\") public class AddRecp extends HttpServlet { private int i; @Override protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { PrintWriter pw = response.getWriter(); try { Date todaysDate = new Date(); DateFormat df2 = new SimpleDateFormat(\"dd-MM-yyyy HH:mm:ss\"); String fname = request.getParameter(\"fname\"); String lname = request.getParameter(\"lname\"); String phone = request.getParameter(\"Mobile\"); String DateAndTime = df2.format(todaysDate); Connection con = DatabaseConnection.initializeDatabase(); PreparedStatement pst = con.prepareStatement(\"insert into recp values(?,?,?,?)\"); pst.setString(1, fname); pst.setString(2, lname); pst.setString(3, phone); pst.setString(4, DateAndTime); i = pst.executeUpdate(); if (i > 0) { pw.println(\"<script type=\\\"text/javascript\\\">\"); pw.println(\"alert('Add Successfully..!');\"); pw.println(\"window.location.href = \\\"AdminHome.jsp\\\";\"); pw.println(\"</script>\"); } else { pw.println(\"<script type=\\\"text/javascript\\\">\"); pw.println(\"alert('Incorrect Data...!');\"); pw.println(\"window.location.href = \\\"AddRecp.jsp\\\";\"); pw.println(\"</script>\"); } } catch (SQLException | ClassNotFoundException ex) { Logger.getLogger(AddPatient.class.getName()).log(Level.SEVERE, null, ex); } } }","dependencies":[{"file_path":"HospitalManagementSysyem-master\\src\\java\\Controller\\AddPatient.java","file_content":"package Controller; import Database.DatabaseConnection; import java.io.IOException; import java.io.PrintWriter; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.SQLException; import java.text.DateFormat; import java.text.SimpleDateFormat; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.util.Date; import java.util.logging.Level; import java.util.logging.Logger; import javax.servlet.RequestDispatcher; @WebServlet(\"/AddPatient\") public class AddPatient extends HttpServlet { private int i; @Override protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { PrintWriter pw = response.getWriter(); try { Date todaysDate = new Date(); DateFormat df2 = new SimpleDateFormat(\"dd-MM-yyyy HH:mm:ss\"); String fname = request.getParameter(\"fname\"); String lname = request.getParameter(\"lname\"); String gender = request.getParameter(\"gender\"); String phone = request.getParameter(\"Mobile\"); String city = request.getParameter(\"City\"); String email = request.getParameter(\"email\"); String age = request.getParameter(\"age\"); String address = request.getParameter(\"address\"); String DateAndTime = df2.format(todaysDate); Connection con = DatabaseConnection.initializeDatabase(); PreparedStatement pst = con.prepareStatement(\"insert into patient values(?,?,?,?,?,?,?,?,?)\"); pst.setString(9, phone); pst.setString(1, fname); pst.setString(2, lname); pst.setString(3, gender); pst.setString(4, city); pst.setString(5, email); pst.setString(6, age); pst.setString(7, address); pst.setString(8, DateAndTime); i = pst.executeUpdate(); if (i > 0) { pw.println(\"<script type=\\\"text/javascript\\\">\"); pw.println(\"alert('Login Successfully..!');\"); pw.println(\"window.location.href = \\\"UserHome.jsp\\\";\"); pw.println(\"</script>\"); } else { pw.println(\"<script type=\\\"text/javascript\\\">\"); pw.println(\"alert('Incorrect Data..!');\"); pw.println(\"window.location.href = \\\"addpatient.jsp\\\";\"); pw.println(\"</script>\"); } } catch (SQLException ex) { Logger.getLogger(AddPatient.class.getName()).log(Level.SEVERE, null, ex); } catch (ClassNotFoundException ex) { Logger.getLogger(AddPatient.class.getName()).log(Level.SEVERE, null, ex); } } }"},{"file_path":"HospitalManagementSysyem-master\\src\\java\\Database\\DatabaseConnection.java","file_content":"package Database; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; public class DatabaseConnection { public static Connection initializeDatabase() throws SQLException, ClassNotFoundException { String dbDriver = \"com.mysql.jdbc.Driver\"; String dbURL = \"jdbc:mysql: String dbName = \"hospital\"; String dbUsername = \"root\"; String dbPassword = \"root\"; Class.forName(dbDriver); Connection con = DriverManager.getConnection(dbURL+dbName,dbUsername,dbPassword); return con; } }"}]}}
{"project_id":56,"chunk_id":0,"content":{"main_file_path":"HospitalManagementSysyem-master\\src\\java\\Controller\\AddWorker.java","main_file_content":"package Controller; import Database.DatabaseConnection; import java.io.IOException; import java.io.PrintWriter; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.SQLException; import java.text.DateFormat; import java.text.SimpleDateFormat; import java.util.Date; import java.util.logging.Level; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; @WebServlet(\"/AddWorker\") public class AddWorker extends HttpServlet { private int i; @Override protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { PrintWriter pw = response.getWriter(); try { Date todaysDate = new Date(); DateFormat df2 = new SimpleDateFormat(\"dd-MM-yyyy HH:mm:ss\"); String fname = request.getParameter(\"fname\"); String lname = request.getParameter(\"lname\"); String phone = request.getParameter(\"Mobile\"); String DateAndTime = df2.format(todaysDate); Connection con = DatabaseConnection.initializeDatabase(); PreparedStatement pst = con.prepareStatement(\"insert into worker values(?,?,?,?)\"); pst.setString(1, fname); pst.setString(2, lname); pst.setString(3, phone); pst.setString(4, DateAndTime); i = pst.executeUpdate(); if (i > 0) { pw.println(\"<script type=\\\"text/javascript\\\">\"); pw.println(\"alert('Add Successfully..!');\"); pw.println(\"window.location.href = \\\"AdminHome.jsp\\\";\"); pw.println(\"</script>\"); } else { pw.println(\"<script type=\\\"text/javascript\\\">\"); pw.println(\"alert('Incorrect Data..!');\"); pw.println(\"window.location.href = \\\"AddWorker.jsp\\\";\"); pw.println(\"</script>\"); } } catch (SQLException | ClassNotFoundException ex) { Logger.getLogger(AddPatient.class.getName()).log(Level.SEVERE, null, ex); } } }","dependencies":[{"file_path":"HospitalManagementSysyem-master\\src\\java\\Controller\\AddPatient.java","file_content":"package Controller; import Database.DatabaseConnection; import java.io.IOException; import java.io.PrintWriter; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.SQLException; import java.text.DateFormat; import java.text.SimpleDateFormat; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.util.Date; import java.util.logging.Level; import java.util.logging.Logger; import javax.servlet.RequestDispatcher; @WebServlet(\"/AddPatient\") public class AddPatient extends HttpServlet { private int i; @Override protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { PrintWriter pw = response.getWriter(); try { Date todaysDate = new Date(); DateFormat df2 = new SimpleDateFormat(\"dd-MM-yyyy HH:mm:ss\"); String fname = request.getParameter(\"fname\"); String lname = request.getParameter(\"lname\"); String gender = request.getParameter(\"gender\"); String phone = request.getParameter(\"Mobile\"); String city = request.getParameter(\"City\"); String email = request.getParameter(\"email\"); String age = request.getParameter(\"age\"); String address = request.getParameter(\"address\"); String DateAndTime = df2.format(todaysDate); Connection con = DatabaseConnection.initializeDatabase(); PreparedStatement pst = con.prepareStatement(\"insert into patient values(?,?,?,?,?,?,?,?,?)\"); pst.setString(9, phone); pst.setString(1, fname); pst.setString(2, lname); pst.setString(3, gender); pst.setString(4, city); pst.setString(5, email); pst.setString(6, age); pst.setString(7, address); pst.setString(8, DateAndTime); i = pst.executeUpdate(); if (i > 0) { pw.println(\"<script type=\\\"text/javascript\\\">\"); pw.println(\"alert('Login Successfully..!');\"); pw.println(\"window.location.href = \\\"UserHome.jsp\\\";\"); pw.println(\"</script>\"); } else { pw.println(\"<script type=\\\"text/javascript\\\">\"); pw.println(\"alert('Incorrect Data..!');\"); pw.println(\"window.location.href = \\\"addpatient.jsp\\\";\"); pw.println(\"</script>\"); } } catch (SQLException ex) { Logger.getLogger(AddPatient.class.getName()).log(Level.SEVERE, null, ex); } catch (ClassNotFoundException ex) { Logger.getLogger(AddPatient.class.getName()).log(Level.SEVERE, null, ex); } } }"},{"file_path":"HospitalManagementSysyem-master\\src\\java\\Database\\DatabaseConnection.java","file_content":"package Database; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; public class DatabaseConnection { public static Connection initializeDatabase() throws SQLException, ClassNotFoundException { String dbDriver = \"com.mysql.jdbc.Driver\"; String dbURL = \"jdbc:mysql: String dbName = \"hospital\"; String dbUsername = \"root\"; String dbPassword = \"root\"; Class.forName(dbDriver); Connection con = DriverManager.getConnection(dbURL+dbName,dbUsername,dbPassword); return con; } }"}]}}
{"project_id":56,"chunk_id":0,"content":{"main_file_path":"HospitalManagementSysyem-master\\src\\java\\Controller\\AdminLogin.java","main_file_content":"package Controller; import Database.DatabaseConnection; import java.io.IOException; import java.io.PrintWriter; import java.sql.Connection; import java.sql.ResultSet; import java.sql.Statement; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; @WebServlet(\"/AdminLogin\") public class AdminLogin extends HttpServlet { private String user; private String pass; @Override protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { PrintWriter pw = response.getWriter(); try { String userp = request.getParameter(\"your_name\"); String passp = request.getParameter(\"your_pass\"); Connection con = DatabaseConnection.initializeDatabase(); String s = \"select *from adminreg\"; Statement st = con.createStatement(); ResultSet rs = st.executeQuery(s); while (rs.next()) { user = rs.getString(1); pass = rs.getString(2); } if (userp.equals(user) && passp.equals(pass)) { pw.println(\"<script type=\\\"text/javascript\\\">\"); pw.println(\"alert('Login Successfully..!');\"); pw.println(\"window.location.href = \\\"AdminHome.jsp\\\";\"); pw.println(\"</script>\"); } else { pw.println(\"<script type=\\\"text/javascript\\\">\"); pw.println(\"alert('Username or Password is Incorrect..!');\"); pw.println(\"window.location.href = \\\"index.jsp\\\";\"); pw.println(\"</script>\"); } } catch (Exception e) { } } }","dependencies":[{"file_path":"HospitalManagementSysyem-master\\src\\java\\Database\\DatabaseConnection.java","file_content":"package Database; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; public class DatabaseConnection { public static Connection initializeDatabase() throws SQLException, ClassNotFoundException { String dbDriver = \"com.mysql.jdbc.Driver\"; String dbURL = \"jdbc:mysql: String dbName = \"hospital\"; String dbUsername = \"root\"; String dbPassword = \"root\"; Class.forName(dbDriver); Connection con = DriverManager.getConnection(dbURL+dbName,dbUsername,dbPassword); return con; } }"}]}}
{"project_id":56,"chunk_id":0,"content":{"main_file_path":"HospitalManagementSysyem-master\\src\\java\\Controller\\AdminRegister.java","main_file_content":"package Controller; import Database.DatabaseConnection; import java.io.IOException; import java.io.PrintWriter; import java.sql.Connection; import java.sql.PreparedStatement; import javax.servlet.RequestDispatcher; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; @WebServlet(\"/AdminRegister\") public class AdminRegister extends HttpServlet { private int i = 0; @Override protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { PrintWriter pw = response.getWriter(); try { String userp = request.getParameter(\"email\"); String passp = request.getParameter(\"pass\"); String rpassp = request.getParameter(\"re_pass\"); String tikbox = request.getParameter(\"agree-term\"); Connection con = DatabaseConnection.initializeDatabase(); PreparedStatement pst = con.prepareStatement(\"insert into adminreg values(?,?)\"); pst.setString(1, userp); pst.setString(2, passp); i = pst.executeUpdate(); if (i > 0) { pw.println(\"<script type=\\\"text/javascript\\\">\"); pw.println(\"alert('Registerd Successfully..!');\"); pw.println(\"window.location.href = \\\"adminLogin.jsp\\\";\"); pw.println(\"</script>\"); } else { pw.println(\"<script type=\\\"text/javascript\\\">\"); pw.println(\"alert('Username or Password is Incorrect..!');\"); pw.println(\"window.location.href = \\\"adminRegister.jsp\\\";\"); pw.println(\"</script>\"); } } catch (Exception e) { } } }","dependencies":[{"file_path":"HospitalManagementSysyem-master\\src\\java\\Database\\DatabaseConnection.java","file_content":"package Database; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; public class DatabaseConnection { public static Connection initializeDatabase() throws SQLException, ClassNotFoundException { String dbDriver = \"com.mysql.jdbc.Driver\"; String dbURL = \"jdbc:mysql: String dbName = \"hospital\"; String dbUsername = \"root\"; String dbPassword = \"root\"; Class.forName(dbDriver); Connection con = DriverManager.getConnection(dbURL+dbName,dbUsername,dbPassword); return con; } }"}]}}
{"project_id":56,"chunk_id":0,"content":{"main_file_path":"HospitalManagementSysyem-master\\src\\java\\Controller\\updatePatient.java","main_file_content":"package Controller; import Database.DatabaseConnection; import java.io.IOException; import java.io.PrintWriter; import java.sql.Connection; import java.sql.PreparedStatement; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; @WebServlet(\"/updatePatient\") public class updatePatient extends HttpServlet { @Override protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { PrintWriter pw = response.getWriter(); String fname = request.getParameter(\"fname\"); String lname = request.getParameter(\"lname\"); String gender = request.getParameter(\"gender\"); String phone = request.getParameter(\"Mobile\"); String city = request.getParameter(\"City\"); String email = request.getParameter(\"email\"); String age = request.getParameter(\"age\"); String address = request.getParameter(\"address\"); try { Connection con = DatabaseConnection.initializeDatabase(); PreparedStatement pst = con.prepareStatement(\"update patient set fname = ? , lname = ? , gender = ? , city = ? , email = ? , age = ? , address = ? where mobile = '\" + phone + \"' \"); pst.setString(1, fname); pst.setString(2, lname); pst.setString(3, gender); pst.setString(4, city); pst.setString(5, email); pst.setString(6, age); pst.setString(7, address); int i = pst.executeUpdate(); if (i > 0) { pw.println(\"<script type=\\\"text/javascript\\\">\"); pw.println(\"alert('Update Successfully..!');\"); pw.println(\"window.location.href = \\\"AdminHome.jsp\\\";\"); pw.println(\"</script>\"); } else { pw.println(\"<script type=\\\"text/javascript\\\">\"); pw.println(\"alert('Failed..! Try Again Later...');\"); pw.println(\"window.location.href = \\\"updatePatient.jsp\\\";\"); pw.println(\"</script>\"); } con.close(); } catch (Exception e) { } } }","dependencies":[{"file_path":"HospitalManagementSysyem-master\\src\\java\\Database\\DatabaseConnection.java","file_content":"package Database; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; public class DatabaseConnection { public static Connection initializeDatabase() throws SQLException, ClassNotFoundException { String dbDriver = \"com.mysql.jdbc.Driver\"; String dbURL = \"jdbc:mysql: String dbName = \"hospital\"; String dbUsername = \"root\"; String dbPassword = \"root\"; Class.forName(dbDriver); Connection con = DriverManager.getConnection(dbURL+dbName,dbUsername,dbPassword); return con; } }"}]}}
{"project_id":56,"chunk_id":0,"content":{"main_file_path":"HospitalManagementSysyem-master\\src\\java\\Controller\\UserLogin.java","main_file_content":"package Controller; import Database.DatabaseConnection; import java.io.IOException; import java.io.PrintWriter; import java.sql.Connection; import java.sql.ResultSet; import java.sql.Statement; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; @WebServlet(\"/UserLogin\") public class UserLogin extends HttpServlet { private String user; private String pass; @Override protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { PrintWriter pw = response.getWriter(); try { String userp = request.getParameter(\"username\"); String passp = request.getParameter(\"password\"); Connection con = DatabaseConnection.initializeDatabase(); String s = \"select *from login\"; Statement st = con.createStatement(); ResultSet rs = st.executeQuery(s); while (rs.next()) { user = rs.getString(1); pass = rs.getString(2); } if (userp.equals(user) && passp.equals(pass)) { pw.println(\"<script type=\\\"text/javascript\\\">\"); pw.println(\"alert('Login Successfully..!');\"); pw.println(\"window.location.href = \\\"UserHome.jsp\\\";\"); pw.println(\"</script>\"); } else { pw.println(\"<script type=\\\"text/javascript\\\">\"); pw.println(\"alert('Username or Password is Incorrect..!');\"); pw.println(\"window.location.href = \\\"index.jsp\\\";\"); pw.println(\"</script>\"); } } catch (Exception e) { } } }","dependencies":[{"file_path":"HospitalManagementSysyem-master\\src\\java\\Database\\DatabaseConnection.java","file_content":"package Database; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; public class DatabaseConnection { public static Connection initializeDatabase() throws SQLException, ClassNotFoundException { String dbDriver = \"com.mysql.jdbc.Driver\"; String dbURL = \"jdbc:mysql: String dbName = \"hospital\"; String dbUsername = \"root\"; String dbPassword = \"root\"; Class.forName(dbDriver); Connection con = DriverManager.getConnection(dbURL+dbName,dbUsername,dbPassword); return con; } }"}]}}
{"project_id":56,"chunk_id":0,"content":{"main_file_path":"HospitalManagementSysyem-master\\src\\java\\Controller\\UserRegister.java","main_file_content":"package Controller; import Database.DatabaseConnection; import java.io.IOException; import java.io.PrintWriter; import java.sql.Connection; import java.sql.PreparedStatement; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; @WebServlet(\"/UserRegister\") public class UserRegister extends HttpServlet { private String user; private String pass; private int i = 0; @Override protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { PrintWriter pw = response.getWriter(); try { Connection con = DatabaseConnection.initializeDatabase(); user = request.getParameter(\"Username\"); pass = request.getParameter(\"password\"); String repassp = request.getParameter(\"repassword\"); PreparedStatement pst = con.prepareStatement(\"insert into login values(?,?)\"); pst.setString(1, user); pst.setString(2, pass); i = pst.executeUpdate(); if (i > 0) { pw.println(\"<script type=\\\"text/javascript\\\">\"); pw.println(\"alert('Register Successfully..!');\"); pw.println(\"window.location.href = \\\"index.jsp\\\";\"); pw.println(\"</script>\"); } else { pw.println(\"<script type=\\\"text/javascript\\\">\"); pw.println(\"alert('Register Failed');\"); pw.println(\"window.location.href = \\\"userRegister.jsp\\\";\"); pw.println(\"</script>\"); } } catch (Exception e) { } } }","dependencies":[{"file_path":"HospitalManagementSysyem-master\\src\\java\\Database\\DatabaseConnection.java","file_content":"package Database; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; public class DatabaseConnection { public static Connection initializeDatabase() throws SQLException, ClassNotFoundException { String dbDriver = \"com.mysql.jdbc.Driver\"; String dbURL = \"jdbc:mysql: String dbName = \"hospital\"; String dbUsername = \"root\"; String dbPassword = \"root\"; Class.forName(dbDriver); Connection con = DriverManager.getConnection(dbURL+dbName,dbUsername,dbPassword); return con; } }"}]}}
{"project_id":56,"chunk_id":0,"content":{"main_file_path":"HospitalManagementSysyem-master\\src\\java\\Database\\DatabaseConnection.java","main_file_content":"package Database; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; public class DatabaseConnection { public static Connection initializeDatabase() throws SQLException, ClassNotFoundException { String dbDriver = \"com.mysql.jdbc.Driver\"; String dbURL = \"jdbc:mysql: String dbName = \"hospital\"; String dbUsername = \"root\"; String dbPassword = \"root\"; Class.forName(dbDriver); Connection con = DriverManager.getConnection(dbURL+dbName,dbUsername,dbPassword); return con; } }","dependencies":[]}}
{"project_id":57,"chunk_id":0,"content":{"main_file_path":"Hotel-Management-Project-Java-master\\Main.java","main_file_content":"import java.io.File; import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.io.Serializable; import java.util.ArrayList; import java.util.Scanner; class Food implements Serializable { int itemno; int quantity; float price; Food(int itemno,int quantity) { this.itemno=itemno; this.quantity=quantity; switch(itemno) { case 1:price=quantity*50; break; case 2:price=quantity*60; break; case 3:price=quantity*70; break; case 4:price=quantity*30; break; } } } class Singleroom implements Serializable { String name; String contact; String gender; ArrayList<Food> food =new ArrayList<>(); Singleroom() { this.name=\"\"; } Singleroom(String name,String contact,String gender) { this.name=name; this.contact=contact; this.gender=gender; } } class Doubleroom extends Singleroom implements Serializable { String name2; String contact2; String gender2; Doubleroom() { this.name=\"\"; this.name2=\"\"; } Doubleroom(String name,String contact,String gender,String name2,String contact2,String gender2) { this.name=name; this.contact=contact; this.gender=gender; this.name2=name2; this.contact2=contact2; this.gender2=gender2; } } class NotAvailable extends Exception { @Override public String toString() { return \"Not Available !\"; } } class holder implements Serializable { Doubleroom luxury_doublerrom[]=new Doubleroom[10]; Doubleroom deluxe_doublerrom[]=new Doubleroom[20]; Singleroom luxury_singleerrom[]=new Singleroom[10]; Singleroom deluxe_singleerrom[]=new Singleroom[20]; } class Hotel { static holder hotel_ob=new holder(); static Scanner sc = new Scanner(System.in); static void CustDetails(int i,int rn) { String name, contact, gender; String name2 = null, contact2 = null; String gender2=\"\"; System.out.print(\"\\nEnter customer name: \"); name = sc.next(); System.out.print(\"Enter contact number: \"); contact=sc.next(); System.out.print(\"Enter gender: \"); gender = sc.next(); if(i<3) { System.out.print(\"Enter second customer name: \"); name2 = sc.next(); System.out.print(\"Enter contact number: \"); contact2=sc.next(); System.out.print(\"Enter gender: \"); gender2 = sc.next(); } switch (i) { case 1:hotel_ob.luxury_doublerrom[rn]=new Doubleroom(name,contact,gender,name2,contact2,gender2); break; case 2:hotel_ob.deluxe_doublerrom[rn]=new Doubleroom(name,contact,gender,name2,contact2,gender2); break; case 3:hotel_ob.luxury_singleerrom[rn]=new Singleroom(name,contact,gender); break; case 4:hotel_ob.deluxe_singleerrom[rn]=new Singleroom(name,contact,gender); break; default:System.out.println(\"Wrong option\"); break; } } static void bookroom(int i) { int j; int rn; System.out.println(\"\\nChoose room number from : \"); switch (i) { case 1: for(j=0;j<hotel_ob.luxury_doublerrom.length;j++) { if(hotel_ob.luxury_doublerrom[j]==null) { System.out.print(j+1+\",\"); } } System.out.print(\"\\nEnter room number: \"); try{ rn=sc.nextInt(); rn--; if(hotel_ob.luxury_doublerrom[rn]!=null) throw new NotAvailable(); CustDetails(i,rn); } catch(Exception e) { System.out.println(\"Invalid Option\"); return; } break; case 2: for(j=0;j<hotel_ob.deluxe_doublerrom.length;j++) { if(hotel_ob.deluxe_doublerrom[j]==null) { System.out.print(j+11+\",\"); } } System.out.print(\"\\nEnter room number: \"); try{ rn=sc.nextInt(); rn=rn-11; if(hotel_ob.deluxe_doublerrom[rn]!=null) throw new NotAvailable(); CustDetails(i,rn); } catch(Exception e) { System.out.println(\"Invalid Option\"); return; } break; case 3: for(j=0;j<hotel_ob.luxury_singleerrom.length;j++) { if(hotel_ob.luxury_singleerrom[j]==null) { System.out.print(j+31+\",\"); } } System.out.print(\"\\nEnter room number: \"); try{ rn=sc.nextInt(); rn=rn-31; if(hotel_ob.luxury_singleerrom[rn]!=null) throw new NotAvailable(); CustDetails(i,rn); } catch(Exception e) { System.out.println(\"Invalid Option\"); return; } break; case 4: for(j=0;j<hotel_ob.deluxe_singleerrom.length;j++) { if(hotel_ob.deluxe_singleerrom[j]==null) { System.out.print(j+41+\",\"); } } System.out.print(\"\\nEnter room number: \"); try{ rn=sc.nextInt(); rn=rn-41; if(hotel_ob.deluxe_singleerrom[rn]!=null) throw new NotAvailable(); CustDetails(i,rn); } catch(Exception e) { System.out.println(\"Invalid Option\"); return; } break; default: System.out.println(\"Enter valid option\"); break; } System.out.println(\"Room Booked\"); } static void features(int i) { switch (i) { case 1:System.out.println(\"Number of double beds : 1\\nAC : Yes\\nFree breakfast : Yes\\nCharge per day:4000 \"); break; case 2:System.out.println(\"Number of double beds : 1\\nAC : No\\nFree breakfast : Yes\\nCharge per day:3000 \"); break; case 3:System.out.println(\"Number of single beds : 1\\nAC : Yes\\nFree breakfast : Yes\\nCharge per day:2200 \"); break; case 4:System.out.println(\"Number of single beds : 1\\nAC : No\\nFree breakfast : Yes\\nCharge per day:1200 \"); break; default: System.out.println(\"Enter valid option\"); break; } } static void availability(int i) { int j,count=0; switch (i) { case 1: for(j=0;j<10;j++) { if(hotel_ob.luxury_doublerrom[j]==null) count++; } break; case 2: for(j=0;j<hotel_ob.deluxe_doublerrom.length;j++) { if(hotel_ob.deluxe_doublerrom[j]==null) count++; } break; case 3: for(j=0;j<hotel_ob.luxury_singleerrom.length;j++) { if(hotel_ob.luxury_singleerrom[j]==null) count++; } break; case 4: for(j=0;j<hotel_ob.deluxe_singleerrom.length;j++) { if(hotel_ob.deluxe_singleerrom[j]==null) count++; } break; default: System.out.println(\"Enter valid option\"); break; } System.out.println(\"Number of rooms available : \"+count); } static void bill(int rn,int rtype) { double amount=0; String list[]={\"Sandwich\",\"Pasta\",\"Noodles\",\"Coke\"}; System.out.println(\"\\n*******\"); System.out.println(\" Bill:-\"); System.out.println(\"*******\"); switch(rtype) { case 1: amount+=4000; System.out.println(\"\\nRoom Charge - \"+4000); System.out.println(\"\\n\"); System.out.println(\"Food Charges:- \"); System.out.println(\"\"); System.out.println(\"Item Quantity Price\"); System.out.println(\"\"); for(Food obb:hotel_ob.luxury_doublerrom[rn].food) { amount+=obb.price; String format = \"%-10s%-10s%-10s%n\"; System.out.printf(format,list[obb.itemno-1],obb.quantity,obb.price ); } break; case 2:amount+=3000; System.out.println(\"Room Charge - \"+3000); System.out.println(\"\\nFood Charges:- \"); System.out.println(\"\"); System.out.println(\"Item Quantity Price\"); System.out.println(\"\"); for(Food obb:hotel_ob.deluxe_doublerrom[rn].food) { amount+=obb.price; String format = \"%-10s%-10s%-10s%n\"; System.out.printf(format,list[obb.itemno-1],obb.quantity,obb.price ); } break; case 3:amount+=2200; System.out.println(\"Room Charge - \"+2200); System.out.println(\"\\nFood Charges:- \"); System.out.println(\"\"); System.out.println(\"Item Quantity Price\"); System.out.println(\"\"); for(Food obb:hotel_ob.luxury_singleerrom[rn].food) { amount+=obb.price; String format = \"%-10s%-10s%-10s%n\"; System.out.printf(format,list[obb.itemno-1],obb.quantity,obb.price ); } break; case 4:amount+=1200; System.out.println(\"Room Charge - \"+1200); System.out.println(\"\\nFood Charges:- \"); System.out.println(\"\"); System.out.println(\"Item Quantity Price\"); System.out.println(\"\"); for(Food obb: hotel_ob.deluxe_singleerrom[rn].food) { amount+=obb.price; String format = \"%-10s%-10s%-10s%n\"; System.out.printf(format,list[obb.itemno-1],obb.quantity,obb.price ); } break; default: System.out.println(\"Not valid\"); } System.out.println(\"\\nTotal Amount- \"+amount); } static void deallocate(int rn,int rtype) { int j; char w; switch (rtype) { case 1: if(hotel_ob.luxury_doublerrom[rn]!=null) System.out.println(\"Room used by \"+hotel_ob.luxury_doublerrom[rn].name); else { System.out.println(\"Empty Already\"); return; } System.out.println(\"Do you want to checkout ?(y/n)\"); w=sc.next().charAt(0); if(w=='y'||w=='Y') { bill(rn,rtype); hotel_ob.luxury_doublerrom[rn]=null; System.out.println(\"Deallocated succesfully\"); } break; case 2: if(hotel_ob.deluxe_doublerrom[rn]!=null) System.out.println(\"Room used by \"+hotel_ob.deluxe_doublerrom[rn].name); else { System.out.println(\"Empty Already\"); return; } System.out.println(\" Do you want to checkout ?(y/n)\"); w=sc.next().charAt(0); if(w=='y'||w=='Y') { bill(rn,rtype); hotel_ob.deluxe_doublerrom[rn]=null; System.out.println(\"Deallocated succesfully\"); } break; case 3: if(hotel_ob.luxury_singleerrom[rn]!=null) System.out.println(\"Room used by \"+hotel_ob.luxury_singleerrom[rn].name); else { System.out.println(\"Empty Already\"); return; } System.out.println(\" Do you want to checkout ? (y/n)\"); w=sc.next().charAt(0); if(w=='y'||w=='Y') { bill(rn,rtype); hotel_ob.luxury_singleerrom[rn]=null; System.out.println(\"Deallocated succesfully\"); } break; case 4: if(hotel_ob.deluxe_singleerrom[rn]!=null) System.out.println(\"Room used by \"+hotel_ob.deluxe_singleerrom[rn].name); else { System.out.println(\"Empty Already\"); return; } System.out.println(\" Do you want to checkout ? (y/n)\"); w=sc.next().charAt(0); if(w=='y'||w=='Y') { bill(rn,rtype); hotel_ob.deluxe_singleerrom[rn]=null; System.out.println(\"Deallocated succesfully\"); } break; default: System.out.println(\"\\nEnter valid option : \"); break; } } static void order(int rn,int rtype) { int i,q; char wish; try{ System.out.println(\"\\n\\n Menu: \\n\\n\\n1.Sandwich\\tRs.50\\n2.Pasta\\t\\tRs.60\\n3.Noodles\\tRs.70\\n4.Coke\\t\\tRs.30\\n\"); do { i = sc.nextInt(); System.out.print(\"Quantity- \"); q=sc.nextInt(); switch(rtype){ case 1: hotel_ob.luxury_doublerrom[rn].food.add(new Food(i,q)); break; case 2: hotel_ob.deluxe_doublerrom[rn].food.add(new Food(i,q)); break; case 3: hotel_ob.luxury_singleerrom[rn].food.add(new Food(i,q)); break; case 4: hotel_ob.deluxe_singleerrom[rn].food.add(new Food(i,q)); break; } System.out.println(\"Do you want to order anything else ? (y/n)\"); wish=sc.next().charAt(0); }while(wish=='y'||wish=='Y'); } catch(NullPointerException e) { System.out.println(\"\\nRoom not booked\"); } catch(Exception e) { System.out.println(\"Cannot be done\"); } } } class write implements Runnable { holder hotel_ob; write(holder hotel_ob) { this.hotel_ob=hotel_ob; } @Override public void run() { try{ FileOutputStream fout=new FileOutputStream(\"backup\"); ObjectOutputStream oos=new ObjectOutputStream(fout); oos.writeObject(hotel_ob); } catch(Exception e) { System.out.println(\"Error in writing \"+e); } } } public class Main { public static void main(String[] args){ try { File f = new File(\"backup\"); if(f.exists()) { FileInputStream fin=new FileInputStream(f); ObjectInputStream ois=new ObjectInputStream(fin); Hotel.hotel_ob=(holder)ois.readObject(); } Scanner sc = new Scanner(System.in); int ch,ch2; char wish; x: do{ System.out.println(\"\\nEnter your choice :\\n1.Display room details\\n2.Display room availability \\n3.Book\\n4.Order food\\n5.Checkout\\n6.Exit\\n\"); ch = sc.nextInt(); switch(ch){ case 1: System.out.println(\"\\nChoose room type :\\n1.Luxury Double Room \\n2.Deluxe Double Room \\n3.Luxury Single Room \\n4.Deluxe Single Room\\n\"); ch2 = sc.nextInt(); Hotel.features(ch2); break; case 2:System.out.println(\"\\nChoose room type :\\n1.Luxury Double Room \\n2.Deluxe Double Room \\n3.Luxury Single Room\\n4.Deluxe Single Room\\n\"); ch2 = sc.nextInt(); Hotel.availability(ch2); break; case 3:System.out.println(\"\\nChoose room type :\\n1.Luxury Double Room \\n2.Deluxe Double Room \\n3.Luxury Single Room\\n4.Deluxe Single Room\\n\"); ch2 = sc.nextInt(); Hotel.bookroom(ch2); break; case 4: System.out.print(\"Room Number -\"); ch2 = sc.nextInt(); if(ch2>60) System.out.println(\"Room doesn't exist\"); else if(ch2>40) Hotel.order(ch2-41,4); else if(ch2>30) Hotel.order(ch2-31,3); else if(ch2>10) Hotel.order(ch2-11,2); else if(ch2>0) Hotel.order(ch2-1,1); else System.out.println(\"Room doesn't exist\"); break; case 5: System.out.print(\"Room Number -\"); ch2 = sc.nextInt(); if(ch2>60) System.out.println(\"Room doesn't exist\"); else if(ch2>40) Hotel.deallocate(ch2-41,4); else if(ch2>30) Hotel.deallocate(ch2-31,3); else if(ch2>10) Hotel.deallocate(ch2-11,2); else if(ch2>0) Hotel.deallocate(ch2-1,1); else System.out.println(\"Room doesn't exist\"); break; case 6:break x; } System.out.println(\"\\nContinue : (y/n)\"); wish=sc.next().charAt(0); if(!(wish=='y'||wish=='Y'||wish=='n'||wish=='N')) { System.out.println(\"Invalid Option\"); System.out.println(\"\\nContinue : (y/n)\"); wish=sc.next().charAt(0); } }while(wish=='y'||wish=='Y'); Thread t=new Thread(new write(Hotel.hotel_ob)); t.start(); } catch(Exception e) { System.out.println(\"Not a valid input\"); } } }","dependencies":[]}}
{"project_id":59,"chunk_id":0,"content":{"main_file_path":"HotelReservationSystem-master\\HotelReservation-ejb\\src\\java\\models\\Reservation.java","main_file_content":"package models; import java.io.Serializable; import java.util.Date; import javax.persistence.Basic; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.Lob; import javax.persistence.NamedQueries; import javax.persistence.NamedQuery; import javax.persistence.Table; import javax.persistence.Temporal; import javax.persistence.TemporalType; import javax.validation.constraints.NotNull; import javax.validation.constraints.Size; import javax.xml.bind.annotation.XmlRootElement; @Entity @Table(name = \"reservation\") @XmlRootElement @NamedQueries({ @NamedQuery(name = \"Reservation.findAll\", query = \"SELECT r FROM Reservation r\") , @NamedQuery(name = \"Reservation.findById\", query = \"SELECT r FROM Reservation r WHERE r.id = :id\") , @NamedQuery(name = \"Reservation.findByIdRoom\", query = \"SELECT r FROM Reservation r WHERE r.idRoom = :idRoom\") , @NamedQuery(name = \"Reservation.findByCheckInDate\", query = \"SELECT r FROM Reservation r WHERE r.checkInDate = :checkInDate\") , @NamedQuery(name = \"Reservation.findByCheckOutDate\", query = \"SELECT r FROM Reservation r WHERE r.checkOutDate = :checkOutDate\") , @NamedQuery(name = \"Reservation.findByFullName\", query = \"SELECT r FROM Reservation r WHERE r.fullName = :fullName\") , @NamedQuery(name = \"Reservation.findByEmail\", query = \"SELECT r FROM Reservation r WHERE r.email = :email\") , @NamedQuery(name = \"Reservation.findByPhone\", query = \"SELECT r FROM Reservation r WHERE r.phone = :phone\")}) public class Reservation implements Serializable { private static final long serialVersionUID = 1L; @Id @GeneratedValue(strategy = GenerationType.IDENTITY) @Basic(optional = false) @Column(name = \"id\") private Integer id; @Basic(optional = false) @NotNull @Column(name = \"id_room\") private int idRoom; @Column(name = \"check_in_date\") @Temporal(TemporalType.DATE) private Date checkInDate; @Column(name = \"check_out_date\") @Temporal(TemporalType.DATE) private Date checkOutDate; @Size(max = 25) @Column(name = \"full_name\") private String fullName; @Size(max = 25) @Column(name = \"email\") private String email; @Size(max = 20) @Column(name = \"phone\") private String phone; @Lob @Size(max = 65535) @Column(name = \"special_request\") private String specialRequest; public Reservation() { } public Reservation(Integer id) { this.id = id; } public Reservation(Integer id, int idRoom) { this.id = id; this.idRoom = idRoom; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public int getIdRoom() { return idRoom; } public void setIdRoom(int idRoom) { this.idRoom = idRoom; } public Date getCheckInDate() { return checkInDate; } public void setCheckInDate(Date checkInDate) { this.checkInDate = checkInDate; } public Date getCheckOutDate() { return checkOutDate; } public void setCheckOutDate(Date checkOutDate) { this.checkOutDate = checkOutDate; } public String getFullName() { return fullName; } public void setFullName(String fullName) { this.fullName = fullName; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getPhone() { return phone; } public void setPhone(String phone) { this.phone = phone; } public String getSpecialRequest() { return specialRequest; } public void setSpecialRequest(String specialRequest) { this.specialRequest = specialRequest; } @Override public int hashCode() { int hash = 0; hash += (id != null ? id.hashCode() : 0); return hash; } @Override public boolean equals(Object object) { if (!(object instanceof Reservation)) { return false; } Reservation other = (Reservation) object; if ((this.id == null && other.id != null) || (this.id != null && !this.id.equals(other.id))) { return false; } return true; } @Override public String toString() { return \"models.Reservation[ id=\" + id + \" ]\"; } }","dependencies":[]}}
{"project_id":59,"chunk_id":0,"content":{"main_file_path":"HotelReservationSystem-master\\HotelReservation-ejb\\src\\java\\models\\Room.java","main_file_content":"package models; import java.io.Serializable; import javax.persistence.Basic; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.Lob; import javax.persistence.NamedQueries; import javax.persistence.NamedQuery; import javax.persistence.Table; import javax.validation.constraints.Size; import javax.xml.bind.annotation.XmlRootElement; @Entity @Table(name = \"room\") @XmlRootElement @NamedQueries({ @NamedQuery(name = \"Room.findAll\", query = \"SELECT r FROM Room r\") , @NamedQuery(name = \"Room.findById\", query = \"SELECT r FROM Room r WHERE r.id = :id\") , @NamedQuery(name = \"Room.findByNumberOfPerson\", query = \"SELECT r FROM Room r WHERE r.numberOfPerson = :numberOfPerson\") , @NamedQuery(name = \"Room.findByHavePrivateBathroom\", query = \"SELECT r FROM Room r WHERE r.havePrivateBathroom = :havePrivateBathroom\") , @NamedQuery(name = \"Room.findByPrice\", query = \"SELECT r FROM Room r WHERE r.price = :price\")}) public class Room implements Serializable { private static final long serialVersionUID = 1L; @Id @GeneratedValue(strategy = GenerationType.IDENTITY) @Basic(optional = false) @Column(name = \"id\") private Integer id; @Lob @Size(max = 65535) @Column(name = \"description\") private String description; @Column(name = \"number_of_person\") private Integer numberOfPerson; @Column(name = \"have_private_bathroom\") private Boolean havePrivateBathroom; @Column(name = \"price\") private Double price; public Room() { } public Room(Integer id) { this.id = id; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } public Integer getNumberOfPerson() { return numberOfPerson; } public void setNumberOfPerson(Integer numberOfPerson) { this.numberOfPerson = numberOfPerson; } public Boolean getHavePrivateBathroom() { return havePrivateBathroom; } public void setHavePrivateBathroom(Boolean havePrivateBathroom) { this.havePrivateBathroom = havePrivateBathroom; } public Double getPrice() { return price; } public void setPrice(Double price) { this.price = price; } @Override public int hashCode() { int hash = 0; hash += (id != null ? id.hashCode() : 0); return hash; } @Override public boolean equals(Object object) { if (!(object instanceof Room)) { return false; } Room other = (Room) object; if ((this.id == null && other.id != null) || (this.id != null && !this.id.equals(other.id))) { return false; } return true; } @Override public String toString() { return \"models.Room[ id=\" + id + \" ]\"; } }","dependencies":[]}}
{"project_id":59,"chunk_id":0,"content":{"main_file_path":"HotelReservationSystem-master\\HotelReservation-ejb\\src\\java\\sessionbeans\\AbstractFacade.java","main_file_content":"package sessionbeans; import java.util.List; import javax.persistence.EntityManager; public abstract class AbstractFacade<T> { private Class<T> entityClass; public AbstractFacade(Class<T> entityClass) { this.entityClass = entityClass; } protected abstract EntityManager getEntityManager(); public void create(T entity) { getEntityManager().persist(entity); } public void edit(T entity) { getEntityManager().merge(entity); } public void remove(T entity) { getEntityManager().remove(getEntityManager().merge(entity)); } public T find(Object id) { return getEntityManager().find(entityClass, id); } public List<T> findAll() { javax.persistence.criteria.CriteriaQuery cq = getEntityManager().getCriteriaBuilder().createQuery(); cq.select(cq.from(entityClass)); return getEntityManager().createQuery(cq).getResultList(); } public List<T> findRange(int[] range) { javax.persistence.criteria.CriteriaQuery cq = getEntityManager().getCriteriaBuilder().createQuery(); cq.select(cq.from(entityClass)); javax.persistence.Query q = getEntityManager().createQuery(cq); q.setMaxResults(range[1] - range[0] + 1); q.setFirstResult(range[0]); return q.getResultList(); } public int count() { javax.persistence.criteria.CriteriaQuery cq = getEntityManager().getCriteriaBuilder().createQuery(); javax.persistence.criteria.Root<T> rt = cq.from(entityClass); cq.select(getEntityManager().getCriteriaBuilder().count(rt)); javax.persistence.Query q = getEntityManager().createQuery(cq); return ((Long) q.getSingleResult()).intValue(); } }","dependencies":[]}}
{"project_id":59,"chunk_id":0,"content":{"main_file_path":"HotelReservationSystem-master\\HotelReservation-ejb\\src\\java\\sessionbeans\\ReservationFacade.java","main_file_content":"package sessionbeans; import javax.ejb.Stateless; import javax.persistence.EntityManager; import javax.persistence.PersistenceContext; import models.Reservation; @Stateless public class ReservationFacade extends AbstractFacade<Reservation> implements ReservationFacadeLocal { @PersistenceContext(unitName = \"HotelReservation-ejbPU\") private EntityManager em; @Override protected EntityManager getEntityManager() { return em; } public ReservationFacade() { super(Reservation.class); } }","dependencies":[{"file_path":"HotelReservationSystem-master\\HotelReservation-ejb\\src\\java\\models\\Reservation.java","file_content":"package models; import java.io.Serializable; import java.util.Date; import javax.persistence.Basic; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.Lob; import javax.persistence.NamedQueries; import javax.persistence.NamedQuery; import javax.persistence.Table; import javax.persistence.Temporal; import javax.persistence.TemporalType; import javax.validation.constraints.NotNull; import javax.validation.constraints.Size; import javax.xml.bind.annotation.XmlRootElement; @Entity @Table(name = \"reservation\") @XmlRootElement @NamedQueries({ @NamedQuery(name = \"Reservation.findAll\", query = \"SELECT r FROM Reservation r\") , @NamedQuery(name = \"Reservation.findById\", query = \"SELECT r FROM Reservation r WHERE r.id = :id\") , @NamedQuery(name = \"Reservation.findByIdRoom\", query = \"SELECT r FROM Reservation r WHERE r.idRoom = :idRoom\") , @NamedQuery(name = \"Reservation.findByCheckInDate\", query = \"SELECT r FROM Reservation r WHERE r.checkInDate = :checkInDate\") , @NamedQuery(name = \"Reservation.findByCheckOutDate\", query = \"SELECT r FROM Reservation r WHERE r.checkOutDate = :checkOutDate\") , @NamedQuery(name = \"Reservation.findByFullName\", query = \"SELECT r FROM Reservation r WHERE r.fullName = :fullName\") , @NamedQuery(name = \"Reservation.findByEmail\", query = \"SELECT r FROM Reservation r WHERE r.email = :email\") , @NamedQuery(name = \"Reservation.findByPhone\", query = \"SELECT r FROM Reservation r WHERE r.phone = :phone\")}) public class Reservation implements Serializable { private static final long serialVersionUID = 1L; @Id @GeneratedValue(strategy = GenerationType.IDENTITY) @Basic(optional = false) @Column(name = \"id\") private Integer id; @Basic(optional = false) @NotNull @Column(name = \"id_room\") private int idRoom; @Column(name = \"check_in_date\") @Temporal(TemporalType.DATE) private Date checkInDate; @Column(name = \"check_out_date\") @Temporal(TemporalType.DATE) private Date checkOutDate; @Size(max = 25) @Column(name = \"full_name\") private String fullName; @Size(max = 25) @Column(name = \"email\") private String email; @Size(max = 20) @Column(name = \"phone\") private String phone; @Lob @Size(max = 65535) @Column(name = \"special_request\") private String specialRequest; public Reservation() { } public Reservation(Integer id) { this.id = id; } public Reservation(Integer id, int idRoom) { this.id = id; this.idRoom = idRoom; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public int getIdRoom() { return idRoom; } public void setIdRoom(int idRoom) { this.idRoom = idRoom; } public Date getCheckInDate() { return checkInDate; } public void setCheckInDate(Date checkInDate) { this.checkInDate = checkInDate; } public Date getCheckOutDate() { return checkOutDate; } public void setCheckOutDate(Date checkOutDate) { this.checkOutDate = checkOutDate; } public String getFullName() { return fullName; } public void setFullName(String fullName) { this.fullName = fullName; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getPhone() { return phone; } public void setPhone(String phone) { this.phone = phone; } public String getSpecialRequest() { return specialRequest; } public void setSpecialRequest(String specialRequest) { this.specialRequest = specialRequest; } @Override public int hashCode() { int hash = 0; hash += (id != null ? id.hashCode() : 0); return hash; } @Override public boolean equals(Object object) { if (!(object instanceof Reservation)) { return false; } Reservation other = (Reservation) object; if ((this.id == null && other.id != null) || (this.id != null && !this.id.equals(other.id))) { return false; } return true; } @Override public String toString() { return \"models.Reservation[ id=\" + id + \" ]\"; } }"},{"file_path":"HotelReservationSystem-master\\HotelReservation-ejb\\src\\java\\sessionbeans\\AbstractFacade.java","file_content":"package sessionbeans; import java.util.List; import javax.persistence.EntityManager; public abstract class AbstractFacade<T> { private Class<T> entityClass; public AbstractFacade(Class<T> entityClass) { this.entityClass = entityClass; } protected abstract EntityManager getEntityManager(); public void create(T entity) { getEntityManager().persist(entity); } public void edit(T entity) { getEntityManager().merge(entity); } public void remove(T entity) { getEntityManager().remove(getEntityManager().merge(entity)); } public T find(Object id) { return getEntityManager().find(entityClass, id); } public List<T> findAll() { javax.persistence.criteria.CriteriaQuery cq = getEntityManager().getCriteriaBuilder().createQuery(); cq.select(cq.from(entityClass)); return getEntityManager().createQuery(cq).getResultList(); } public List<T> findRange(int[] range) { javax.persistence.criteria.CriteriaQuery cq = getEntityManager().getCriteriaBuilder().createQuery(); cq.select(cq.from(entityClass)); javax.persistence.Query q = getEntityManager().createQuery(cq); q.setMaxResults(range[1] - range[0] + 1); q.setFirstResult(range[0]); return q.getResultList(); } public int count() { javax.persistence.criteria.CriteriaQuery cq = getEntityManager().getCriteriaBuilder().createQuery(); javax.persistence.criteria.Root<T> rt = cq.from(entityClass); cq.select(getEntityManager().getCriteriaBuilder().count(rt)); javax.persistence.Query q = getEntityManager().createQuery(cq); return ((Long) q.getSingleResult()).intValue(); } }"},{"file_path":"HotelReservationSystem-master\\HotelReservation-ejb\\src\\java\\sessionbeans\\ReservationFacadeLocal.java","file_content":"package sessionbeans; import java.util.List; import javax.ejb.Local; import models.Reservation; @Local public interface ReservationFacadeLocal { void create(Reservation reservation); void edit(Reservation reservation); void remove(Reservation reservation); Reservation find(Object id); List<Reservation> findAll(); List<Reservation> findRange(int[] range); int count(); }"}]}}
{"project_id":59,"chunk_id":0,"content":{"main_file_path":"HotelReservationSystem-master\\HotelReservation-ejb\\src\\java\\sessionbeans\\ReservationFacadeLocal.java","main_file_content":"package sessionbeans; import java.util.List; import javax.ejb.Local; import models.Reservation; @Local public interface ReservationFacadeLocal { void create(Reservation reservation); void edit(Reservation reservation); void remove(Reservation reservation); Reservation find(Object id); List<Reservation> findAll(); List<Reservation> findRange(int[] range); int count(); }","dependencies":[{"file_path":"HotelReservationSystem-master\\HotelReservation-ejb\\src\\java\\models\\Reservation.java","file_content":"package models; import java.io.Serializable; import java.util.Date; import javax.persistence.Basic; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.Lob; import javax.persistence.NamedQueries; import javax.persistence.NamedQuery; import javax.persistence.Table; import javax.persistence.Temporal; import javax.persistence.TemporalType; import javax.validation.constraints.NotNull; import javax.validation.constraints.Size; import javax.xml.bind.annotation.XmlRootElement; @Entity @Table(name = \"reservation\") @XmlRootElement @NamedQueries({ @NamedQuery(name = \"Reservation.findAll\", query = \"SELECT r FROM Reservation r\") , @NamedQuery(name = \"Reservation.findById\", query = \"SELECT r FROM Reservation r WHERE r.id = :id\") , @NamedQuery(name = \"Reservation.findByIdRoom\", query = \"SELECT r FROM Reservation r WHERE r.idRoom = :idRoom\") , @NamedQuery(name = \"Reservation.findByCheckInDate\", query = \"SELECT r FROM Reservation r WHERE r.checkInDate = :checkInDate\") , @NamedQuery(name = \"Reservation.findByCheckOutDate\", query = \"SELECT r FROM Reservation r WHERE r.checkOutDate = :checkOutDate\") , @NamedQuery(name = \"Reservation.findByFullName\", query = \"SELECT r FROM Reservation r WHERE r.fullName = :fullName\") , @NamedQuery(name = \"Reservation.findByEmail\", query = \"SELECT r FROM Reservation r WHERE r.email = :email\") , @NamedQuery(name = \"Reservation.findByPhone\", query = \"SELECT r FROM Reservation r WHERE r.phone = :phone\")}) public class Reservation implements Serializable { private static final long serialVersionUID = 1L; @Id @GeneratedValue(strategy = GenerationType.IDENTITY) @Basic(optional = false) @Column(name = \"id\") private Integer id; @Basic(optional = false) @NotNull @Column(name = \"id_room\") private int idRoom; @Column(name = \"check_in_date\") @Temporal(TemporalType.DATE) private Date checkInDate; @Column(name = \"check_out_date\") @Temporal(TemporalType.DATE) private Date checkOutDate; @Size(max = 25) @Column(name = \"full_name\") private String fullName; @Size(max = 25) @Column(name = \"email\") private String email; @Size(max = 20) @Column(name = \"phone\") private String phone; @Lob @Size(max = 65535) @Column(name = \"special_request\") private String specialRequest; public Reservation() { } public Reservation(Integer id) { this.id = id; } public Reservation(Integer id, int idRoom) { this.id = id; this.idRoom = idRoom; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public int getIdRoom() { return idRoom; } public void setIdRoom(int idRoom) { this.idRoom = idRoom; } public Date getCheckInDate() { return checkInDate; } public void setCheckInDate(Date checkInDate) { this.checkInDate = checkInDate; } public Date getCheckOutDate() { return checkOutDate; } public void setCheckOutDate(Date checkOutDate) { this.checkOutDate = checkOutDate; } public String getFullName() { return fullName; } public void setFullName(String fullName) { this.fullName = fullName; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getPhone() { return phone; } public void setPhone(String phone) { this.phone = phone; } public String getSpecialRequest() { return specialRequest; } public void setSpecialRequest(String specialRequest) { this.specialRequest = specialRequest; } @Override public int hashCode() { int hash = 0; hash += (id != null ? id.hashCode() : 0); return hash; } @Override public boolean equals(Object object) { if (!(object instanceof Reservation)) { return false; } Reservation other = (Reservation) object; if ((this.id == null && other.id != null) || (this.id != null && !this.id.equals(other.id))) { return false; } return true; } @Override public String toString() { return \"models.Reservation[ id=\" + id + \" ]\"; } }"}]}}
{"project_id":59,"chunk_id":0,"content":{"main_file_path":"HotelReservationSystem-master\\HotelReservation-ejb\\src\\java\\sessionbeans\\RoomFacade.java","main_file_content":"package sessionbeans; import javax.ejb.Stateless; import javax.persistence.EntityManager; import javax.persistence.PersistenceContext; import models.Room; @Stateless public class RoomFacade extends AbstractFacade<Room> implements RoomFacadeLocal { @PersistenceContext(unitName = \"HotelReservation-ejbPU\") private EntityManager em; @Override protected EntityManager getEntityManager() { return em; } public RoomFacade() { super(Room.class); } }","dependencies":[{"file_path":"HotelReservationSystem-master\\HotelReservation-ejb\\src\\java\\models\\Room.java","file_content":"package models; import java.io.Serializable; import javax.persistence.Basic; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.Lob; import javax.persistence.NamedQueries; import javax.persistence.NamedQuery; import javax.persistence.Table; import javax.validation.constraints.Size; import javax.xml.bind.annotation.XmlRootElement; @Entity @Table(name = \"room\") @XmlRootElement @NamedQueries({ @NamedQuery(name = \"Room.findAll\", query = \"SELECT r FROM Room r\") , @NamedQuery(name = \"Room.findById\", query = \"SELECT r FROM Room r WHERE r.id = :id\") , @NamedQuery(name = \"Room.findByNumberOfPerson\", query = \"SELECT r FROM Room r WHERE r.numberOfPerson = :numberOfPerson\") , @NamedQuery(name = \"Room.findByHavePrivateBathroom\", query = \"SELECT r FROM Room r WHERE r.havePrivateBathroom = :havePrivateBathroom\") , @NamedQuery(name = \"Room.findByPrice\", query = \"SELECT r FROM Room r WHERE r.price = :price\")}) public class Room implements Serializable { private static final long serialVersionUID = 1L; @Id @GeneratedValue(strategy = GenerationType.IDENTITY) @Basic(optional = false) @Column(name = \"id\") private Integer id; @Lob @Size(max = 65535) @Column(name = \"description\") private String description; @Column(name = \"number_of_person\") private Integer numberOfPerson; @Column(name = \"have_private_bathroom\") private Boolean havePrivateBathroom; @Column(name = \"price\") private Double price; public Room() { } public Room(Integer id) { this.id = id; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } public Integer getNumberOfPerson() { return numberOfPerson; } public void setNumberOfPerson(Integer numberOfPerson) { this.numberOfPerson = numberOfPerson; } public Boolean getHavePrivateBathroom() { return havePrivateBathroom; } public void setHavePrivateBathroom(Boolean havePrivateBathroom) { this.havePrivateBathroom = havePrivateBathroom; } public Double getPrice() { return price; } public void setPrice(Double price) { this.price = price; } @Override public int hashCode() { int hash = 0; hash += (id != null ? id.hashCode() : 0); return hash; } @Override public boolean equals(Object object) { if (!(object instanceof Room)) { return false; } Room other = (Room) object; if ((this.id == null && other.id != null) || (this.id != null && !this.id.equals(other.id))) { return false; } return true; } @Override public String toString() { return \"models.Room[ id=\" + id + \" ]\"; } }"},{"file_path":"HotelReservationSystem-master\\HotelReservation-ejb\\src\\java\\sessionbeans\\AbstractFacade.java","file_content":"package sessionbeans; import java.util.List; import javax.persistence.EntityManager; public abstract class AbstractFacade<T> { private Class<T> entityClass; public AbstractFacade(Class<T> entityClass) { this.entityClass = entityClass; } protected abstract EntityManager getEntityManager(); public void create(T entity) { getEntityManager().persist(entity); } public void edit(T entity) { getEntityManager().merge(entity); } public void remove(T entity) { getEntityManager().remove(getEntityManager().merge(entity)); } public T find(Object id) { return getEntityManager().find(entityClass, id); } public List<T> findAll() { javax.persistence.criteria.CriteriaQuery cq = getEntityManager().getCriteriaBuilder().createQuery(); cq.select(cq.from(entityClass)); return getEntityManager().createQuery(cq).getResultList(); } public List<T> findRange(int[] range) { javax.persistence.criteria.CriteriaQuery cq = getEntityManager().getCriteriaBuilder().createQuery(); cq.select(cq.from(entityClass)); javax.persistence.Query q = getEntityManager().createQuery(cq); q.setMaxResults(range[1] - range[0] + 1); q.setFirstResult(range[0]); return q.getResultList(); } public int count() { javax.persistence.criteria.CriteriaQuery cq = getEntityManager().getCriteriaBuilder().createQuery(); javax.persistence.criteria.Root<T> rt = cq.from(entityClass); cq.select(getEntityManager().getCriteriaBuilder().count(rt)); javax.persistence.Query q = getEntityManager().createQuery(cq); return ((Long) q.getSingleResult()).intValue(); } }"},{"file_path":"HotelReservationSystem-master\\HotelReservation-ejb\\src\\java\\sessionbeans\\RoomFacadeLocal.java","file_content":"package sessionbeans; import java.util.List; import javax.ejb.Local; import models.Room; @Local public interface RoomFacadeLocal { void create(Room room); void edit(Room room); void remove(Room room); Room find(Object id); List<Room> findAll(); List<Room> findRange(int[] range); int count(); }"}]}}
{"project_id":59,"chunk_id":0,"content":{"main_file_path":"HotelReservationSystem-master\\HotelReservation-ejb\\src\\java\\sessionbeans\\RoomFacadeLocal.java","main_file_content":"package sessionbeans; import java.util.List; import javax.ejb.Local; import models.Room; @Local public interface RoomFacadeLocal { void create(Room room); void edit(Room room); void remove(Room room); Room find(Object id); List<Room> findAll(); List<Room> findRange(int[] range); int count(); }","dependencies":[{"file_path":"HotelReservationSystem-master\\HotelReservation-ejb\\src\\java\\models\\Room.java","file_content":"package models; import java.io.Serializable; import javax.persistence.Basic; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.Lob; import javax.persistence.NamedQueries; import javax.persistence.NamedQuery; import javax.persistence.Table; import javax.validation.constraints.Size; import javax.xml.bind.annotation.XmlRootElement; @Entity @Table(name = \"room\") @XmlRootElement @NamedQueries({ @NamedQuery(name = \"Room.findAll\", query = \"SELECT r FROM Room r\") , @NamedQuery(name = \"Room.findById\", query = \"SELECT r FROM Room r WHERE r.id = :id\") , @NamedQuery(name = \"Room.findByNumberOfPerson\", query = \"SELECT r FROM Room r WHERE r.numberOfPerson = :numberOfPerson\") , @NamedQuery(name = \"Room.findByHavePrivateBathroom\", query = \"SELECT r FROM Room r WHERE r.havePrivateBathroom = :havePrivateBathroom\") , @NamedQuery(name = \"Room.findByPrice\", query = \"SELECT r FROM Room r WHERE r.price = :price\")}) public class Room implements Serializable { private static final long serialVersionUID = 1L; @Id @GeneratedValue(strategy = GenerationType.IDENTITY) @Basic(optional = false) @Column(name = \"id\") private Integer id; @Lob @Size(max = 65535) @Column(name = \"description\") private String description; @Column(name = \"number_of_person\") private Integer numberOfPerson; @Column(name = \"have_private_bathroom\") private Boolean havePrivateBathroom; @Column(name = \"price\") private Double price; public Room() { } public Room(Integer id) { this.id = id; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } public Integer getNumberOfPerson() { return numberOfPerson; } public void setNumberOfPerson(Integer numberOfPerson) { this.numberOfPerson = numberOfPerson; } public Boolean getHavePrivateBathroom() { return havePrivateBathroom; } public void setHavePrivateBathroom(Boolean havePrivateBathroom) { this.havePrivateBathroom = havePrivateBathroom; } public Double getPrice() { return price; } public void setPrice(Double price) { this.price = price; } @Override public int hashCode() { int hash = 0; hash += (id != null ? id.hashCode() : 0); return hash; } @Override public boolean equals(Object object) { if (!(object instanceof Room)) { return false; } Room other = (Room) object; if ((this.id == null && other.id != null) || (this.id != null && !this.id.equals(other.id))) { return false; } return true; } @Override public String toString() { return \"models.Room[ id=\" + id + \" ]\"; } }"}]}}
{"project_id":59,"chunk_id":0,"content":{"main_file_path":"HotelReservationSystem-master\\HotelReservation-war\\src\\java\\servlets\\AvailableRooms.java","main_file_content":"package servlets; import javax.servlet.RequestDispatcher; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException; @WebServlet(name = \"available_rooms\") public class AvailableRooms extends HttpServlet { @Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { String checkInDate = request.getParameter(\"checkInDate\"); String checkOutDate = request.getParameter(\"checkOutDate\"); request.setAttribute(\"checkInDate\", checkInDate); request.setAttribute(\"checkOutDate\", checkOutDate); request.setAttribute(\"roomId\", request.getParameter(\"roomId\")); request.setAttribute(\"price\", request.getParameter(\"price\")); RequestDispatcher reqDispatcher = getServletConfig().getServletContext().getRequestDispatcher(\"/views/reservation.jsp\"); reqDispatcher.forward(request, response); } }","dependencies":[]}}
{"project_id":59,"chunk_id":0,"content":{"main_file_path":"HotelReservationSystem-master\\HotelReservation-war\\src\\java\\servlets\\FinalReservation.java","main_file_content":"package servlets; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException; import java.sql.Connection; import java.sql.DriverManager; import java.sql.PreparedStatement; import javax.ejb.EJB; import javax.servlet.RequestDispatcher; import sessionbeans.ReservationFacadeLocal; @WebServlet(name = \"reservation\") public class FinalReservation extends HttpServlet { @EJB private ReservationFacadeLocal reservationFacade; @Override protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { int idRoom = Integer.parseInt(request.getParameter(\"roomId\")); String checkInDate = request.getParameter(\"checkInDate\"); String checkOutDate = request.getParameter(\"checkOutDate\"); String fullName = request.getParameter(\"fullName\"); String email = request.getParameter(\"email\"); String phone = request.getParameter(\"phone\"); String specialRequest = request.getParameter(\"specialRequest\"); try { String sql = \"INSERT INTO reservation VALUES (null, ?, ?, ?, ?, ?, ?, ?)\"; Connection con = DriverManager.getConnection(\"jdbc:mysql: PreparedStatement prest = con.prepareStatement(sql); prest.setInt(1, idRoom); prest.setString(2, checkInDate); prest.setString(3, checkOutDate); prest.setString(4, fullName); prest.setString(5, email); prest.setString(6, phone); prest.setString(7, specialRequest); prest.executeUpdate(); } catch(Exception e) { e.printStackTrace(); } RequestDispatcher reqDispatcher = getServletConfig().getServletContext().getRequestDispatcher(\"/views/home.jsp\"); reqDispatcher.forward(request, response); } }","dependencies":[{"file_path":"HotelReservationSystem-master\\HotelReservation-ejb\\src\\java\\sessionbeans\\ReservationFacadeLocal.java","file_content":"package sessionbeans; import java.util.List; import javax.ejb.Local; import models.Reservation; @Local public interface ReservationFacadeLocal { void create(Reservation reservation); void edit(Reservation reservation); void remove(Reservation reservation); Reservation find(Object id); List<Reservation> findAll(); List<Reservation> findRange(int[] range); int count(); }"}]}}
{"project_id":59,"chunk_id":0,"content":{"main_file_path":"HotelReservationSystem-master\\HotelReservation-war\\src\\java\\servlets\\FinalReservation_.java","main_file_content":"package servlets; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException; import java.text.SimpleDateFormat; import javax.ejb.EJB; import javax.servlet.RequestDispatcher; import models.Reservation; import sessionbeans.ReservationFacadeLocal; @WebServlet(name = \"reservation\") public class FinalReservation_ extends HttpServlet { @EJB private ReservationFacadeLocal reservationFacade; @Override protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { int idRoom = Integer.parseInt(request.getParameter(\"roomId\")); String checkInDate = request.getParameter(\"checkInDate\"); String checkOutDate = request.getParameter(\"checkOutDate\"); String fullName = request.getParameter(\"fullName\"); String email = request.getParameter(\"email\"); String phone = request.getParameter(\"phone\"); String specialRequest = request.getParameter(\"specialRequest\"); Reservation reservation = new Reservation(); reservation.setIdRoom(idRoom); reservation.setFullName(fullName); reservation.setEmail(email); reservation.setPhone(phone); reservation.setSpecialRequest(specialRequest); SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\"); try { reservation.setCheckOutDate(sdf.parse(checkOutDate)); reservation.setCheckInDate(sdf.parse(checkInDate)); } catch(Exception e) { e.printStackTrace(); } reservationFacade.create(reservation); RequestDispatcher reqDispatcher = getServletConfig().getServletContext().getRequestDispatcher(\"/views/home.jsp\"); reqDispatcher.forward(request, response); } }","dependencies":[{"file_path":"HotelReservationSystem-master\\HotelReservation-ejb\\src\\java\\models\\Reservation.java","file_content":"package models; import java.io.Serializable; import java.util.Date; import javax.persistence.Basic; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.Lob; import javax.persistence.NamedQueries; import javax.persistence.NamedQuery; import javax.persistence.Table; import javax.persistence.Temporal; import javax.persistence.TemporalType; import javax.validation.constraints.NotNull; import javax.validation.constraints.Size; import javax.xml.bind.annotation.XmlRootElement; @Entity @Table(name = \"reservation\") @XmlRootElement @NamedQueries({ @NamedQuery(name = \"Reservation.findAll\", query = \"SELECT r FROM Reservation r\") , @NamedQuery(name = \"Reservation.findById\", query = \"SELECT r FROM Reservation r WHERE r.id = :id\") , @NamedQuery(name = \"Reservation.findByIdRoom\", query = \"SELECT r FROM Reservation r WHERE r.idRoom = :idRoom\") , @NamedQuery(name = \"Reservation.findByCheckInDate\", query = \"SELECT r FROM Reservation r WHERE r.checkInDate = :checkInDate\") , @NamedQuery(name = \"Reservation.findByCheckOutDate\", query = \"SELECT r FROM Reservation r WHERE r.checkOutDate = :checkOutDate\") , @NamedQuery(name = \"Reservation.findByFullName\", query = \"SELECT r FROM Reservation r WHERE r.fullName = :fullName\") , @NamedQuery(name = \"Reservation.findByEmail\", query = \"SELECT r FROM Reservation r WHERE r.email = :email\") , @NamedQuery(name = \"Reservation.findByPhone\", query = \"SELECT r FROM Reservation r WHERE r.phone = :phone\")}) public class Reservation implements Serializable { private static final long serialVersionUID = 1L; @Id @GeneratedValue(strategy = GenerationType.IDENTITY) @Basic(optional = false) @Column(name = \"id\") private Integer id; @Basic(optional = false) @NotNull @Column(name = \"id_room\") private int idRoom; @Column(name = \"check_in_date\") @Temporal(TemporalType.DATE) private Date checkInDate; @Column(name = \"check_out_date\") @Temporal(TemporalType.DATE) private Date checkOutDate; @Size(max = 25) @Column(name = \"full_name\") private String fullName; @Size(max = 25) @Column(name = \"email\") private String email; @Size(max = 20) @Column(name = \"phone\") private String phone; @Lob @Size(max = 65535) @Column(name = \"special_request\") private String specialRequest; public Reservation() { } public Reservation(Integer id) { this.id = id; } public Reservation(Integer id, int idRoom) { this.id = id; this.idRoom = idRoom; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public int getIdRoom() { return idRoom; } public void setIdRoom(int idRoom) { this.idRoom = idRoom; } public Date getCheckInDate() { return checkInDate; } public void setCheckInDate(Date checkInDate) { this.checkInDate = checkInDate; } public Date getCheckOutDate() { return checkOutDate; } public void setCheckOutDate(Date checkOutDate) { this.checkOutDate = checkOutDate; } public String getFullName() { return fullName; } public void setFullName(String fullName) { this.fullName = fullName; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getPhone() { return phone; } public void setPhone(String phone) { this.phone = phone; } public String getSpecialRequest() { return specialRequest; } public void setSpecialRequest(String specialRequest) { this.specialRequest = specialRequest; } @Override public int hashCode() { int hash = 0; hash += (id != null ? id.hashCode() : 0); return hash; } @Override public boolean equals(Object object) { if (!(object instanceof Reservation)) { return false; } Reservation other = (Reservation) object; if ((this.id == null && other.id != null) || (this.id != null && !this.id.equals(other.id))) { return false; } return true; } @Override public String toString() { return \"models.Reservation[ id=\" + id + \" ]\"; } }"},{"file_path":"HotelReservationSystem-master\\HotelReservation-ejb\\src\\java\\sessionbeans\\ReservationFacadeLocal.java","file_content":"package sessionbeans; import java.util.List; import javax.ejb.Local; import models.Reservation; @Local public interface ReservationFacadeLocal { void create(Reservation reservation); void edit(Reservation reservation); void remove(Reservation reservation); Reservation find(Object id); List<Reservation> findAll(); List<Reservation> findRange(int[] range); int count(); }"}]}}
{"project_id":59,"chunk_id":0,"content":{"main_file_path":"HotelReservationSystem-master\\HotelReservation-war\\src\\java\\servlets\\Home.java","main_file_content":"package servlets; import javax.servlet.RequestDispatcher; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException; import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.Date; import java.util.List; import java.util.logging.Level; import java.util.logging.Logger; import javax.ejb.EJB; import models.Room; import models.Reservation; import sessionbeans.ReservationFacadeLocal; import sessionbeans.RoomFacadeLocal; @WebServlet(name = \"home\") public class Home extends HttpServlet { @EJB private ReservationFacadeLocal reservationFacade; @EJB private RoomFacadeLocal roomFacade; @Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { String checkInDate = request.getParameter(\"checkInDate\"); String checkOutDate = request.getParameter(\"checkOutDate\"); request.setAttribute(\"checkInDate\", checkInDate); request.setAttribute(\"checkOutDate\", checkOutDate); List<Room> availableRooms = roomFacade.findAll(); List<Reservation> reservation = reservationFacade.findAll(); for (int i = 0; i < reservation.size(); i++) { if ( (isDateAfterThan(checkInDate, reservation.get(i).getCheckInDate().toString()) && isDateAfterThan(reservation.get(i).getCheckOutDate().toString(), checkOutDate)) || (isDateAfterThan(reservation.get(i).getCheckInDate().toString(), checkInDate) && isDateAfterThan(checkOutDate, reservation.get(i).getCheckOutDate().toString())) || (isDateAfterThan(checkInDate, reservation.get(i).getCheckInDate().toString()) && isDateAfterThan(checkOutDate, reservation.get(i).getCheckOutDate().toString())) || (isDateAfterThan(reservation.get(i).getCheckInDate().toString(), checkInDate) && isDateAfterThan(reservation.get(i).getCheckOutDate().toString(), checkOutDate)) ) { for(int j = 0; j < availableRooms.size(); j++) { if(reservation.get(i).getIdRoom() == availableRooms.get(j).getId()) { availableRooms.remove(j); break; } } } } request.setAttribute(\"availableRooms\", availableRooms); RequestDispatcher reqDispatcher = getServletConfig().getServletContext().getRequestDispatcher(\"/views/available_rooms.jsp\"); reqDispatcher.forward(request, response); } private boolean isDateAfterThan(String firstDate, String secondDate) { SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\"); try { Date date1 = sdf.parse(firstDate); Date date2 = sdf.parse(secondDate); return date1.compareTo(date2) > 0; } catch (ParseException e) { e.printStackTrace(); return false; } } }","dependencies":[{"file_path":"HotelReservationSystem-master\\HotelReservation-ejb\\src\\java\\models\\Reservation.java","file_content":"package models; import java.io.Serializable; import java.util.Date; import javax.persistence.Basic; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.Lob; import javax.persistence.NamedQueries; import javax.persistence.NamedQuery; import javax.persistence.Table; import javax.persistence.Temporal; import javax.persistence.TemporalType; import javax.validation.constraints.NotNull; import javax.validation.constraints.Size; import javax.xml.bind.annotation.XmlRootElement; @Entity @Table(name = \"reservation\") @XmlRootElement @NamedQueries({ @NamedQuery(name = \"Reservation.findAll\", query = \"SELECT r FROM Reservation r\") , @NamedQuery(name = \"Reservation.findById\", query = \"SELECT r FROM Reservation r WHERE r.id = :id\") , @NamedQuery(name = \"Reservation.findByIdRoom\", query = \"SELECT r FROM Reservation r WHERE r.idRoom = :idRoom\") , @NamedQuery(name = \"Reservation.findByCheckInDate\", query = \"SELECT r FROM Reservation r WHERE r.checkInDate = :checkInDate\") , @NamedQuery(name = \"Reservation.findByCheckOutDate\", query = \"SELECT r FROM Reservation r WHERE r.checkOutDate = :checkOutDate\") , @NamedQuery(name = \"Reservation.findByFullName\", query = \"SELECT r FROM Reservation r WHERE r.fullName = :fullName\") , @NamedQuery(name = \"Reservation.findByEmail\", query = \"SELECT r FROM Reservation r WHERE r.email = :email\") , @NamedQuery(name = \"Reservation.findByPhone\", query = \"SELECT r FROM Reservation r WHERE r.phone = :phone\")}) public class Reservation implements Serializable { private static final long serialVersionUID = 1L; @Id @GeneratedValue(strategy = GenerationType.IDENTITY) @Basic(optional = false) @Column(name = \"id\") private Integer id; @Basic(optional = false) @NotNull @Column(name = \"id_room\") private int idRoom; @Column(name = \"check_in_date\") @Temporal(TemporalType.DATE) private Date checkInDate; @Column(name = \"check_out_date\") @Temporal(TemporalType.DATE) private Date checkOutDate; @Size(max = 25) @Column(name = \"full_name\") private String fullName; @Size(max = 25) @Column(name = \"email\") private String email; @Size(max = 20) @Column(name = \"phone\") private String phone; @Lob @Size(max = 65535) @Column(name = \"special_request\") private String specialRequest; public Reservation() { } public Reservation(Integer id) { this.id = id; } public Reservation(Integer id, int idRoom) { this.id = id; this.idRoom = idRoom; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public int getIdRoom() { return idRoom; } public void setIdRoom(int idRoom) { this.idRoom = idRoom; } public Date getCheckInDate() { return checkInDate; } public void setCheckInDate(Date checkInDate) { this.checkInDate = checkInDate; } public Date getCheckOutDate() { return checkOutDate; } public void setCheckOutDate(Date checkOutDate) { this.checkOutDate = checkOutDate; } public String getFullName() { return fullName; } public void setFullName(String fullName) { this.fullName = fullName; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getPhone() { return phone; } public void setPhone(String phone) { this.phone = phone; } public String getSpecialRequest() { return specialRequest; } public void setSpecialRequest(String specialRequest) { this.specialRequest = specialRequest; } @Override public int hashCode() { int hash = 0; hash += (id != null ? id.hashCode() : 0); return hash; } @Override public boolean equals(Object object) { if (!(object instanceof Reservation)) { return false; } Reservation other = (Reservation) object; if ((this.id == null && other.id != null) || (this.id != null && !this.id.equals(other.id))) { return false; } return true; } @Override public String toString() { return \"models.Reservation[ id=\" + id + \" ]\"; } }"},{"file_path":"HotelReservationSystem-master\\HotelReservation-ejb\\src\\java\\models\\Room.java","file_content":"package models; import java.io.Serializable; import javax.persistence.Basic; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.Lob; import javax.persistence.NamedQueries; import javax.persistence.NamedQuery; import javax.persistence.Table; import javax.validation.constraints.Size; import javax.xml.bind.annotation.XmlRootElement; @Entity @Table(name = \"room\") @XmlRootElement @NamedQueries({ @NamedQuery(name = \"Room.findAll\", query = \"SELECT r FROM Room r\") , @NamedQuery(name = \"Room.findById\", query = \"SELECT r FROM Room r WHERE r.id = :id\") , @NamedQuery(name = \"Room.findByNumberOfPerson\", query = \"SELECT r FROM Room r WHERE r.numberOfPerson = :numberOfPerson\") , @NamedQuery(name = \"Room.findByHavePrivateBathroom\", query = \"SELECT r FROM Room r WHERE r.havePrivateBathroom = :havePrivateBathroom\") , @NamedQuery(name = \"Room.findByPrice\", query = \"SELECT r FROM Room r WHERE r.price = :price\")}) public class Room implements Serializable { private static final long serialVersionUID = 1L; @Id @GeneratedValue(strategy = GenerationType.IDENTITY) @Basic(optional = false) @Column(name = \"id\") private Integer id; @Lob @Size(max = 65535) @Column(name = \"description\") private String description; @Column(name = \"number_of_person\") private Integer numberOfPerson; @Column(name = \"have_private_bathroom\") private Boolean havePrivateBathroom; @Column(name = \"price\") private Double price; public Room() { } public Room(Integer id) { this.id = id; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } public Integer getNumberOfPerson() { return numberOfPerson; } public void setNumberOfPerson(Integer numberOfPerson) { this.numberOfPerson = numberOfPerson; } public Boolean getHavePrivateBathroom() { return havePrivateBathroom; } public void setHavePrivateBathroom(Boolean havePrivateBathroom) { this.havePrivateBathroom = havePrivateBathroom; } public Double getPrice() { return price; } public void setPrice(Double price) { this.price = price; } @Override public int hashCode() { int hash = 0; hash += (id != null ? id.hashCode() : 0); return hash; } @Override public boolean equals(Object object) { if (!(object instanceof Room)) { return false; } Room other = (Room) object; if ((this.id == null && other.id != null) || (this.id != null && !this.id.equals(other.id))) { return false; } return true; } @Override public String toString() { return \"models.Room[ id=\" + id + \" ]\"; } }"},{"file_path":"HotelReservationSystem-master\\HotelReservation-ejb\\src\\java\\sessionbeans\\ReservationFacadeLocal.java","file_content":"package sessionbeans; import java.util.List; import javax.ejb.Local; import models.Reservation; @Local public interface ReservationFacadeLocal { void create(Reservation reservation); void edit(Reservation reservation); void remove(Reservation reservation); Reservation find(Object id); List<Reservation> findAll(); List<Reservation> findRange(int[] range); int count(); }"},{"file_path":"HotelReservationSystem-master\\HotelReservation-ejb\\src\\java\\sessionbeans\\RoomFacadeLocal.java","file_content":"package sessionbeans; import java.util.List; import javax.ejb.Local; import models.Room; @Local public interface RoomFacadeLocal { void create(Room room); void edit(Room room); void remove(Room room); Room find(Object id); List<Room> findAll(); List<Room> findRange(int[] range); int count(); }"}]}}
{"project_id":61,"chunk_id":0,"content":{"main_file_path":"Internet Slang's Dictionary\\src\\proj1\\Main.java","main_file_content":"package proj1; import java.util.*; class node { node lc,rc; String name; String meaning; int h; public node(String name,String meaning) { this.name=name.toLowerCase(); this.meaning=meaning; lc=rc=null; h=1; } } class AVL { Scanner sc = new Scanner (System.in); private node root; public AVL() { root=null; } int height(node N) { int lh, rh; if(N == null) return 0; if(N.lc == null) lh = 0; else lh = 1 + N.lc.h; if(N.rc == null) rh = 0; else rh = 1 + N.rc.h; if(lh > rh) return lh; else return rh; } int balanceFactor(node root) {int bf, lh, rh; if(root == null) return 0; if(root.lc == null) lh = 0; else lh = 1 + height(root.lc); if(root.rc == null) rh = 0; else rh = 1 + height(root.rc); bf = lh - rh; return bf; } node LL(node ptr) { node tmp = ptr.lc; ptr.lc = tmp.rc; tmp.rc = ptr; tmp.h = height(tmp); ptr.h = height(ptr); return tmp; } node RR(node ptr) { node tmp = ptr.rc; ptr.rc = tmp.lc; tmp.lc = ptr; tmp.h = height(tmp); ptr.h = height(ptr); return tmp; } node LR(node root) { root.lc=RR(root.lc); root=LL(root); return root; } node RL(node root) { root.rc=LL(root.rc); root=RR(root); return root; } node insert(node root, node temp){ int bf; if(root == null){ root = new node(temp.name, temp.meaning); return root; } if(temp.name.compareTo(root.name) < 0){ root.lc = insert(root.lc, temp); bf = balanceFactor(root); if(bf == 2){ if(temp.name.compareToIgnoreCase(root.lc.name) < 0) root = LL(root); else root = LR(root); } } else{ root.rc = insert(root.rc, temp); bf = balanceFactor(root); if(bf == -2){ if(temp.name.compareToIgnoreCase(root.rc.name) > 0) root = RR(root); else root = RL(root); } } root.h = height(root); return root; } void create(String Name,String mean) { node temp=new node(Name,mean); root=insert(root,temp); } void display(node localRoot) { if(localRoot != null){ display(localRoot.lc); System.out.println(localRoot.name.toUpperCase()+\" -\"+localRoot.meaning); display(localRoot.rc); } } node getRoot() { return root; } void findWord() { System.out.print(\"\\nEnter word : \"); String target=sc.nextLine().toLowerCase(); node current=root; while(current!=null) { int comparison=target.compareTo(current.name); if(comparison==0) { System.out.println(\"\\nWord : \"+current.name.toUpperCase()+\"\\t\\t-\\t\\tMeaning : \"+current.meaning); return; } else if(comparison<0) { current=current.lc; } else { current=current.rc; } } System.out.println(\"\\nWord not found! Please be more specific.\"); } int displayWordsAt(node head,String i,int t) { if (head != null) { if(head.name.startsWith(i)) { t++; System.out.println(\"Word : \"+head.name.toUpperCase()+\"\\t\\t-\\t\\tMeaning : \"+head.meaning); } t=displayWordsAt(head.lc, i,t); t=displayWordsAt(head.rc, i,t); return t; } return t; } int totalWordsCount(node r) { if (r == null) { return 0; } else { int l = 1; l += totalWordsCount(r.lc); l += totalWordsCount(r.rc); return l; } } int wordCountAt(node loc,char j) { if(loc==null) return 0; int count=0; if(loc.name.charAt(0)==j) count++; return count+wordCountAt(loc.lc,j)+wordCountAt(loc.rc,j); } void wordStartsWithVowel() { System.out.println(\"\\nStarts with Vowel : 'a' \\n\"); displayWordsAt(root,\"a\",0); System.out.println(\"\\nStarts with Vowel : 'e' \\n\"); displayWordsAt(root,\"e\",0); System.out.println(\"\\nStarts with Vowel : 'i' \\n\"); displayWordsAt(root,\"i\",0); System.out.println(\"\\nStarts with Vowel : 'o' \\n\"); displayWordsAt(root,\"o\",0); System.out.println(\"\\nStarts with Vowel : 'u' \\n\"); displayWordsAt(root,\"u\",0); } void wordCountStartsWithVowel() { int t=0; { int c= wordCountAt(root,'a'); System.out.println(\"Total no. of words starting with vowel : 'a' are - \"+c); t=t+c; } { int c= wordCountAt(root,'e'); System.out.println(\"Total no. of words starting with vowel : 'e' are - \"+c); t=t+c; } { int c= wordCountAt(root,'i'); System.out.println(\"Total no. of words starting with vowel : 'i' are - \"+c); t=t+c; } { int c= wordCountAt(root,'o'); System.out.println(\"Total no. of words starting with vowel : 'o' are - \"+c); t=t+c; } { int c= wordCountAt(root,'u'); System.out.println(\"Total no. of words starting with vowel : 'u' are - \"+c); t=t+c; } System.out.println(\"\\nTotal no. of words starting with vowels are : \"+t); } } public class Main{ public static void main(String[] args) { AVL avl=new AVL(); Scanner sc=new Scanner(System.in); avl.create(\"brb\",\"Be right back\"); avl.create(\"btw\",\"By the way\"); avl.create(\"ama\", \"Ask Me Anything\"); avl.create(\"lmk\",\"Let me know\"); avl.create(\"gtg\",\"Got to go\"); avl.create(\"dm\", \"Direct Message\"); avl.create(\"idk\", \"I don't know\"); avl.create(\"rofl\",\"Rolling on floor laughing\"); avl.create(\"stfu\", \"Shut the *swear word!* up\"); avl.create(\"icymi\", \"In case you missed it\"); avl.create(\"tl\",\"Too long\" ); avl.create(\"ikr\", \"I know right\"); avl.create(\"dr\", \"Didn’t read\"); avl.create(\"nvm\", \"Nevermind\"); avl.create(\"tgif\",\"Thank goodness it’s Friday\"); avl.create(\"tbh\",\"To be honest\"); avl.create(\"tbf\", \"To be frank\"); avl.create(\"rn\", \"Right now\"); avl.create(\"qotd\",\"Quote of the day\"); avl.create(\"ootd\",\"Outfit of the day\"); avl.create(\"lol\",\"Laugh out loud\"); avl.create(\"ttyl\", \"Talk to you later\"); avl.create(\"hit me up\",\" Hit me up\"); avl.create(\"fwiw\", \"For what it’s worth\"); avl.create(\"imo\", \"In my opinion\"); avl.create(\"imho\", \"In my humble opinion\"); avl.create(\"tba\", \"To be announced\"); avl.create(\"tbd\", \"To be decided\"); avl.create(\"ae\",\"Accident & Emergency\"); avl.create(\"af\",\"Always And Forever\"); avl.create(\"afe\",\"Abercrombie & Fitch\"); avl.create(\"ar\",\"Artists & Repertoire\"); avl.create(\"an\",\"Author's Note\"); avl.create(\"aw\",\"Anyway\"); avl.create(\"a1\",\"Top quality\"); avl.create(\"a2dp\",\"Advanced Audio Distribution Profile\"); avl.create(\"a3\",\"Anywhere, Any time, Any place\"); avl.create(\"a4u\",\"All For You\"); avl.create(\"a7a\",\"Frustration, anger (Arabic)\"); avl.create(\"a7x\",\"Avenged Sevenfold (band)\"); avl.create(\"aa\",\"Alcoholics Anonymous\"); avl.create(\"aab\",\"Average At Best\"); avl.create(\"aac\",\"Apple Audio Compression\"); avl.create(\"aak\",\"Alive And Kicking\"); avl.create(\"aamof\",\"As A Matter Of Fact\"); avl.create(\"aap\",\"Always A Pleasure\"); avl.create(\"aar\",\"At Any Rate\"); avl.create(\"aarp\",\"American Association of Retired Persons\"); avl.create(\"aat\",\"And Another Thing\"); avl.create(\"aawy\",\"And Also With You\"); avl.create(\"aayf\",\"As Always, Your Friend\"); avl.create(\"abbo\",\"Accountants Bookkeepers and Business Owners\"); avl.create(\"e\",\"Ecstasy\"); avl.create(\"eoe\",\"Errors and omissions excluded\"); avl.create(\"ecig\",\"Electronic Cigarett\"); avl.create(\"edating\",\"Online dating\"); avl.create(\"evite\",\"Electronic Invitation\"); avl.create(\"ev\",\"Everyone\"); avl.create(\"eeg\",\"Ear To Ear Grin\"); avl.create(\"ea\",\"Electronic Arts\"); avl.create(\"eas\",\"End of Active Service\"); avl.create(\"eb\",\"Eyeball\"); avl.create(\"ebcak\",\"Error Between Chair And Keyboard\"); avl.create(\"ebd\",\"End of Business Day\"); avl.create(\"ebm\",\"Electronic Body Music\"); avl.create(\"ebony\",\"Dark skin tone\"); avl.create(\"ebt\",\"Electronic Benefits Transfer\"); avl.create(\"ecg\",\"Electrocardiogram\"); avl.create(\"eco\",\"Ecological\"); avl.create(\"ect\",\"Misspelling of 'etc'\"); avl.create(\"ecu\",\"Electronic Control Unit\"); avl.create(\"ecw\",\"Extreme Championship Wrestling\"); avl.create(\"edc\",\"Every Day Carry\"); avl.create(\"edd\",\"Estimated Delivery Date\"); avl.create(\"eddress \",\"Email address\"); avl.create(\"edgy\",\"Cutting edge\"); avl.create(\"edith\",\"Even Dead, I'm The Hero\"); avl.create(\"ial\",\"I Ain't Laughing\"); avl.create(\"ialto\",\"I Always Love That One\"); avl.create(\"iama\",\"I Am Mildly Amused\"); avl.create(\"ianand\",\"I Am Not A Doctor\"); avl.create(\"ianal\",\"I Am Not A Lawyer (this is an uninformed opinion)\"); avl.create(\"iakrt\",\"I already know that\"); avl.create(\"ias\",\"In A Second\"); avl.create(\"iatco\",\"I Am The Cool One\"); avl.create(\"iau\",\"I Adore You\"); avl.create(\"iaw\",\"In Accordance With\"); avl.create (\"iawtc\",\"I Agree With That/This Comment\"); avl.create(\"iawtcsm \",\"I Agree With This Comment So Much\"); avl.create(\"iawtp\",\"I Agree With This Post\"); avl.create(\"o\",\"Ounce (of drugs)\"); avl.create(\"orly\",\"Oh, Really?\"); avl.create(\"oo\",\"Over and Out\"); avl.create(\"oa\",\"Over Acting\"); avl.create(\"oan\",\"On Another Note\"); avl.create(\"oao\",\"Over And Out\"); avl.create(\"oap\",\"Old Age Pensioner\"); avl.create(\"oatus\",\"On A Totally Unrelated Subject\"); avl.create(\"oaus\",\"On An Unrelated Subject\"); avl.create(\"ob\",\"Oh, Brother\"); avl.create(\"obby\",\"Oh, Baby\"); avl.create(\"obe\",\"Overcome By Events\"); avl.create(\"obgyn\",\"Gynecologist (OBstetrics and GYNecology)\"); avl.create(\"obhwf\",\"One Big Happy Weasely Family\"); avl.create(\"obo\",\"Or Best Offer\"); avl.create(\"obq\",\"Oh, Be Quiet\"); avl.create(\"obs\",\"Obviously\"); avl.create(\"obtw\",\"Oh, By The Way\"); avl.create(\"obv\",\"Obviously\"); avl.create(\"obx\",\"Outer Banks North Carolina\"); avl.create(\"oc\",\"Of Course\"); avl.create(\"ocd\",\"Obsessive Compulsive Disorder\"); avl.create(\"och\",\"Oh (Scottish)\"); avl.create(\"ocn\",\"Of Course Not\"); avl.create(\"oco\",\"Oh, Come On\"); avl.create(\"ocr\",\"Optical Character Recognition\"); avl.create(\"oct\",\"On Company Time\"); avl.create(\"od\",\"Overdose\"); avl.create(\"lit\", \"When something is very good\" ); avl.create(\"extra\",\"Dramatic\"); avl.create(\"salty\",\"When someone is upset\"); avl.create(\"flex\",\"Someone is showing off\"); avl.create(\"highkey\",\"Liked something secretly\"); avl.create(\"shook\",\"They are shocked or incredibly surprised\"); avl.create(\"spilling the tea\",\"They are gossiping\"); avl.create(\"wallflower\",\"A shy person\"); avl.create(\"busted \",\"Getting caught\"); avl.create(\"g2g\",\"Got to go\"); avl.create(\"lurker\",\"When someone visits a forum often\"); avl.create(\"faq\",\"Frequently asked questions\"); avl.create(\"pwned\",\"Defeated or humiliated\"); avl.create(\"lag\",\"When computer application is slow\"); avl.create(\"noob\",\"When someone is new to something\"); avl.create(\"photobomb\",\"When someone or something appears in a photo unexpectedly\"); avl.create(\"spam\",\"Type of email which is not meaningful\"); avl.create(\"trending\",\"Popular or fashionable at a moment\"); avl.create(\"handle \",\"Nickname for a website\"); avl.create(\"haha\",\"Laughter\"); avl.create(\"irl\",\"In real life\"); avl.create(\"nsfw\",\"Not safe for work\"); avl.create(\"dr\",\"Didn't read\"); avl.create(\"otl\",\"Emoji used to show an expression or feeling\"); avl.create(\"wack\",\" Bad ,wrong ,worthless\"); avl.create(\"wacko\",\"Crazy, insane.\"); avl.create(\"wacky\",\"Crazy, zany.\"); avl.create(\"wad\", \"(Noun) A large amount of money.\"); avl.create(\"nab\", \"To catch someone doing something wrong.\"); avl.create(\"nail\",\"To do something perfectly.\"); avl.create(\"narc\",\"A narcotics officer, a police officer working in drug trade suppression.\"); avl.create(\"nark\",\"A police officer working in drug trade suppression.\"); avl.create(\"neat\",\"Very good, excellent.\"); avl.create(\"nerd\",\"A studious person with few social skills.\"); avl.create(\"ocker\",\"A crude and obnoxious Australian.\"); avl.create(\"od\",\"To take an overdose of a drug.\"); avl.create(\"oddball\",\"A strange or eccentric person \"); avl.create(\"off\",\"To murder, to kill.\"); avl.create(\"off the hook\",\"No longer suspected of guilt \"); avl.create(\"pack heat\",\"To carry a gun.\"); avl.create(\"pack it in\",\"To stop what you're doing, to quit.\"); avl.create(\"pain in the arse\",\"Someone or something that's annoying or troublesome.\"); avl.create(\"pain in the ass\",\"An annoying or troublesome person or thing.\"); avl.create(\"pal\",\"A friend.\"); avl.create(\"quick sticks\",\"Quickly. \"); avl.create(\"quid\",\"One pound sterling.\"); avl.create(\"quids-in\",\"In profit. \"); avl.create(\"quilt\",\"A feeble or pathetic person. \"); avl.create(\"quack\",\"doctor\"); avl.create(\"laa\",\"Lad\"); avl.create(\"labtop\",\"Laptop\"); avl.create(\"lacking\",\"Without a weapon, specifically a gun\"); avl.create(\"lad\",\"Guy\"); avl.create(\"maab\",\"Male-Assigned At Birth\"); avl.create(\"mac\",\"Media Access Control\"); avl.create(\"maching\",\"Going at maximum Speed (skiing or biking)\"); avl.create(\"mack\",\"Flirt\"); avl.create(\"mad\",\"Really, extremely\"); avl.create(\"madd\",\"Mothers Against Drunk Driving\"); avl.create(\"mag\",\"Magazine\"); avl.create(\"jaja\",\"Spanish laugh\"); avl.create(\"b\",\"Bro\"); avl.create(\"ban\",\"Banned\"); avl.create(\"bb\",\"Baby\"); avl.create(\"bd\",\"Bondage And Discipline\"); avl.create(\"be\",\"Breaking And Entering\"); avl.create(\"C\",\"Very happy\"); avl.create(\"caac\",\"Cool As A Cucumber\"); avl.create(\"cab\",\"Misspelling of CBA\"); avl.create(\"cachai\",\"Do you understand?\"); avl.create(\"cache\",\"Store for temporary computer files\"); avl.create(\"cactus\",\"Broken, dead\"); avl.create(\"dada\",\"Defence Against the Dark Arts (Harry Potter)\"); avl.create(\"dadt\",\"Don't Ask, Don't Tell\"); avl.create(\"dae\",\"Does Anybody Else\"); avl.create(\"dag\",\"Damn\"); avl.create(\"daggy\",\"Uncool, not trendy, untidy\"); avl.create (\"faa\",\"Federal Aviation Administration)\"); avl.create( \"faab\",\"Female-Assigned At Birth\"); avl.create(\"faak\",\"Falling Asleep At Keyboard\"); avl.create (\"fab\",\"Fabulous\"); avl.create(\"fabu\",\"Fabulous\"); avl.create(\"ga \",\"Go Ahead\"); avl.create(\"gac\",\"Guilty As Charged\"); avl.create(\"gaff\",\"House\"); avl.create(\"gafaia\",\"Get Away From It All\"); avl.create(\"gafm\",\"Get Away From Me\"); avl.create(\"gag\",\"About to throw up\"); avl.create(\"ha\",\"Sarcastic laugh\"); avl.create(\"habbo\",\"Online community/game\"); avl.create(\"habibi\",\"My darling (Arabic)\"); avl.create(\"hac\",\"Asian Chick\"); avl.create(\"hacer\",\"Hacker\"); avl.create(\"jaf\",\"Just A Friend\"); avl.create(\"jag\",\"Socially inept person\"); avl.create(\"jah\",\"God,Jehovah\"); avl.create(\"jailbreak\",\"Crack an iPhone\"); avl.create(\"kd\",\"Kraft Dinner\"); avl.create(\"kda\",\"Kills / Deaths / Assists\"); avl.create(\"kdr\",\"Kill/Death Ratio\"); avl.create(\"keed\",\"Kid, joke\"); avl.create(\"keel\",\"Kill\"); avl.create(\"lsa\",\"Cantonese Exclamation\"); avl.create (\"rabbit on\",\"To talk for a long time, esp. \"); avl.create (\"racket\",\"Loud noise that lasts a long time.\"); avl.create (\"racket\",\"A dishonest or illegal activity that makes money.\"); avl.create (\"rap\",\"To talk together in a relaxed way \"); avl.create (\"rap\",\"To recite lyrics over a rhythmic beat.\"); avl.create (\"s.p.\",\"British slang for the odds on a horse; essential information, the known form.\"); avl.create (\"s.t.p.\",\"Slang for a particular hallucinogenic drug similar to, but more powerful than LSD.\"); avl.create (\"sab\",\"British slang for sabotage.\"); avl.create (\"sabbing\",\"British slang for sabotage.\"); avl.create (\"tad\",\"Slightly, a little.\"); avl.create (\"tail\",\"A person who's following someone to find out where they're going and what they're doing.\"); avl.create (\"take\",\"Stolen money or goods.\"); avl.create (\"tee off\",\"To make someone angry, to annoy.\"); avl.create (\"thick\",\"Not very intelligent, a bit slow mentally.\"); avl.create (\"ugg boots\",\"Soft sheepskin boots that originated in Australia.\"); avl.create (\"ump\",\"Umpire.\"); avl.create (\"umpteen\",\"Many, countless.\"); avl.create (\"uncle sam\",\"The U.S.A., the U.S. government.\"); avl.create (\"uncool.\",\"Not good, not acceptable, not fashionable.\"); avl.create (\"uac\",\"User Account Control\"); avl.create (\"uae\", \"United Arab Emirates\"); avl.create (\"uak\",\"You Already Know\"); avl.create (\"uan\",\"Universal Access Number\"); avl.create (\"uark\",\"You Already Know\"); avl.create (\"uav\",\"Urban Assault Vehicle\"); avl.create(\"ub\",\"You biggit\"); avl.create (\"ubt\",\"You Be Too\"); avl.create (\"ubber\",\"Uber, very\"); avl.create (\"ubd\",\"User Brain Damage\"); avl.create (\"v\",\"Black−American slang for an unfriendly female\"); avl.create (\"v.a.t.\",\"British slang for vodka and tonic.\"); avl.create (\"v.c.\",\"American slang for Viet Cong, a north Vietnamese combatant.\"); avl.create (\"vac\",\"British slang for a university or other higher education holiday.\"); avl.create (\"vacuum cleaner\",\"Black−American slang for ones lungs\"); avl.create(\"zilchNothing\",\"Zero\"); avl.create(\"zibi\",\"Person from Zimbabwe\"); avl.create(\"zing\",\"Owned\"); avl.create(\"zip\",\"Ounce of marijauna\"); avl.create (\"zit\",\"Spot, pimple\"); avl.create(\"zoinks\",\"jeepers\"); avl.create(\"yacc\",\"Yet Another Compiler-Compiler\"); avl.create(\"yam\",\"And so on, blah\"); avl.create(\"yagb\",\"You Ain't Grizz Baby (COD)\"); avl.create(\"yahoo\",\"Yob, lout\"); avl.create(\"yahwej\",\"The name of God in hebrew\"); avl.create(\"yak\",\"You Already Know\"); avl.create(\"xkcd\",\"Web comic\"); avl.create (\"xl\",\"Extra Large\"); avl.create(\"xlnt\",\"Excellent\"); avl.create (\"xlr\",\"Accelerate\"); avl.create (\"xls\",\"MS Excel file extension\"); avl.create(\"xm\",\"Extreme\"); avl.create (\"waa\",\"Crying\"); avl.create (\"waam\",\"What's going on, what's up\"); avl.create (\"waan\",\"Want\"); avl.create(\"wack\",\"Low quailty, lame\"); avl.create (\"wadr\",\"With All Due Respect\"); avl.create(\"waefrd\",\"When All Else Fails, Read Directions\"); int ch; do{ System.out.println(\"**************************** Menu ********************************\"); System.out.println(\"1.Find a Word\"); System.out.println(\"2.Display words starting with given letter\"); System.out.println(\"3.Total no. of words in dictionary\"); System.out.println(\"4.Total no. of words starting with given letter\"); System.out.println(\"5.Display all words\"); System.out.println(\"6.Display Words starting with vowels\"); System.out.println(\"7.Total no. of words starting with vowels\"); System.out.println(\"8.Exit\"); System.out.println(\"******************************************************************\"); System.out.print(\"Enter your choice : \"); ch=sc.nextInt(); switch(ch) { case 1: avl.findWord(); break; case 2: System.out.print(\"\\nEnter the starting letter of the words you want to find : \"); String c=sc.next(); if(c.length()!=1) { System.out.println(\"\\nEnter a single letter!\"); break; } else { int j=0; if(avl.displayWordsAt(avl.getRoot(),c,j)==0) System.out.println(\"No word starts with the letter '\"+c+\"'\"); break; } case 3: System.out.println(\"\\nTotal no. of words in the dictionary are : \"+avl.totalWordsCount(avl.getRoot())); break; case 4: System.out.print(\"\\nEnter the starting letter of the words you want to find : \"); String b=sc.next(); if(b.length()!=1) { System.out.println(\"\\nEnter a single letter!\"); break; } else { System.out.println(avl.wordCountAt(avl.getRoot(),b.toLowerCase().charAt(0))); break; } case 5: avl.display(avl.getRoot()); break; case 6: avl.wordStartsWithVowel(); break; case 7: avl.wordCountStartsWithVowel(); break; case 8: System.out.println(\"Program ended\"); break; default: System.out.println(\"Invalid option\"); } } while(ch != 8); sc.close(); } }","dependencies":[]}}
{"project_id":68,"chunk_id":0,"content":{"main_file_path":"JavaPhoenixChannels-master\\src\\main\\java\\org\\phoenixframework\\channels\\Binding.java","main_file_content":"package org.phoenixframework.channels; class Binding { private final String event; private final IMessageCallback callback; public Binding(final String event, final IMessageCallback callback) { this.event = event; this.callback = callback; } public String getEvent() { return event; } public IMessageCallback getCallback() { return callback; } @Override public String toString() { return \"Binding{\" + \"event='\" + event + '\\'' + \", callback=\" + callback + '}'; } }","dependencies":[{"file_path":"JavaPhoenixChannels-master\\src\\main\\java\\org\\phoenixframework\\channels\\IMessageCallback.java","file_content":"package org.phoenixframework.channels; public interface IMessageCallback { void onMessage(final Envelope envelope); }"}]}}
{"project_id":68,"chunk_id":0,"content":{"main_file_path":"JavaPhoenixChannels-master\\src\\main\\java\\org\\phoenixframework\\channels\\Channel.java","main_file_content":"package org.phoenixframework.channels; import com.fasterxml.jackson.databind.JsonNode; import java.io.IOException; import java.util.ArrayList; import java.util.Iterator; import java.util.List; import java.util.Timer; import java.util.TimerTask; import java.util.concurrent.LinkedBlockingDeque; import org.slf4j.Logger; import org.slf4j.LoggerFactory; public class Channel { private static final long DEFAULT_TIMEOUT = 5000; private static final Logger log = LoggerFactory.getLogger(Channel.class); private final List<Binding> bindings = new ArrayList<>(); private Timer channelTimer = null; private final Push joinPush; private boolean joinedOnce = false; private final JsonNode payload; private final LinkedBlockingDeque<Push> pushBuffer = new LinkedBlockingDeque<>(); private final Socket socket; private ChannelState state = ChannelState.CLOSED; private final String topic; public Channel(final String topic, final JsonNode payload, final Socket socket) { this.topic = topic; this.payload = payload; this.socket = socket; this.joinPush = new Push(this, ChannelEvent.JOIN.getPhxEvent(), payload, DEFAULT_TIMEOUT); this.channelTimer = new Timer(\"Phx Rejoin timer for \" + topic); this.joinPush.receive(\"ok\", new IMessageCallback() { @Override public void onMessage(Envelope envelope) { Channel.this.state = ChannelState.JOINED; } }); this.joinPush.timeout(new ITimeoutCallback() { @Override public void onTimeout() { Channel.this.state = ChannelState.ERRORED; } }); this.onClose(new IMessageCallback() { @Override public void onMessage(Envelope envelope) { Channel.this.state = ChannelState.CLOSED; Channel.this.socket.remove(Channel.this); } }); this.onError(new IErrorCallback() { @Override public void onError(String reason) { Channel.this.state = ChannelState.ERRORED; scheduleRejoinTimer(); } }); this.on(ChannelEvent.REPLY.getPhxEvent(), new IMessageCallback() { @Override public void onMessage(final Envelope envelope) { Channel.this.trigger(Socket.replyEventName(envelope.getRef()), envelope); } }); } private boolean canPush() { return this.socket.isConnected() && this.state == ChannelState.JOINED; } public Socket getSocket() { return socket; } public String getTopic() { return topic; } public boolean isMember(final Envelope envelope) { String topic = envelope.getTopic(); String event = envelope.getEvent(); String joinRef = envelope.getJoinRef(); if (!this.topic.equals(topic)) { return false; } boolean isLifecycleEvent = ChannelEvent.getEvent(event) != null; if (joinRef != null && isLifecycleEvent && joinRef != this.joinRef()) { log.info(\"dropping outdated message topic: %s, event: %s, joinRef: %s\", topic, event, joinRef); return false; } return true; } public Push join() throws IllegalStateException, IOException { if (this.joinedOnce) { throw new IllegalStateException( \"Tried to join multiple times. 'join' can only be invoked once per channel\"); } this.joinedOnce = true; this.sendJoin(); return this.joinPush; } public Push leave() throws IOException { return this.push(ChannelEvent.LEAVE.getPhxEvent()).receive(\"ok\", new IMessageCallback() { public void onMessage(final Envelope envelope) { Channel.this.trigger(ChannelEvent.CLOSE.getPhxEvent(), null); } }); } public Channel off(final String event) { synchronized (bindings) { for (final Iterator<Binding> bindingIter = bindings.iterator(); bindingIter.hasNext(); ) { if (bindingIter.next().getEvent().equals(event)) { bindingIter.remove(); break; } } } return this; } public Channel on(final String event, final IMessageCallback callback) { synchronized (bindings) { this.bindings.add(new Binding(event, callback)); } return this; } private void onClose(final IMessageCallback callback) { this.on(ChannelEvent.CLOSE.getPhxEvent(), callback); } private void onError(final IErrorCallback callback) { this.on(ChannelEvent.ERROR.getPhxEvent(), new IMessageCallback() { @Override public void onMessage(final Envelope envelope) { String reason = null; if (envelope != null) { reason = envelope.getReason(); } callback.onError(reason); } }); } private Push push(final String event, final JsonNode payload, final long timeout) throws IOException, IllegalStateException { if (!this.joinedOnce) { throw new IllegalStateException(\"Unable to push event before channel has been joined\"); } final Push pushEvent = new Push(this, event, payload, timeout); if (this.canPush()) { pushEvent.send(); } else { this.pushBuffer.add(pushEvent); } return pushEvent; } public Push push(final String event, final JsonNode payload) throws IOException { return push(event, payload, DEFAULT_TIMEOUT); } public Push push(final String event) throws IOException { return push(event, null); } private void rejoin() throws IOException { this.sendJoin(); while (!this.pushBuffer.isEmpty()) { this.pushBuffer.removeFirst().send(); } } private void rejoinUntilConnected() throws IOException { if (this.state == ChannelState.ERRORED) { if (this.socket.isConnected()) { this.rejoin(); } else { scheduleRejoinTimer(); } } } public void scheduleRepeatingTask(TimerTask timerTask, long ms) { this.channelTimer.schedule(timerTask, ms, ms); } public void scheduleTask(TimerTask timerTask, long ms) { this.channelTimer.schedule(timerTask, ms); } @Override public String toString() { return \"Channel{\" + \"topic='\" + topic + '\\'' + \", message=\" + payload + \", bindings(\" + bindings.size() + \")=\" + bindings + '}'; } void trigger(final String triggerEvent, final Envelope envelope) { synchronized (bindings) { for (final Binding binding : bindings) { if (binding.getEvent().equals(triggerEvent)) { binding.getCallback().onMessage(envelope); break; } } } } private void scheduleRejoinTimer() { final TimerTask rejoinTimerTask = new TimerTask() { @Override public void run() { try { Channel.this.rejoinUntilConnected(); } catch (IOException e) { log.error(\"Failed to rejoin\", e); } } }; scheduleTask(rejoinTimerTask, Socket.RECONNECT_INTERVAL_MS); } private void sendJoin() throws IOException { this.state = ChannelState.JOINING; this.joinPush.send(); } public boolean isJoined() { return state == ChannelState.JOINED; } public boolean isErrored() { return state == ChannelState.ERRORED; } public boolean isClosed() { return state == ChannelState.CLOSED; } public boolean isJoining() { return state == ChannelState.JOINING; } public String joinRef() { return this.joinPush.getRef(); } }","dependencies":[{"file_path":"JavaPhoenixChannels-master\\src\\main\\java\\org\\phoenixframework\\channels\\Binding.java","file_content":"package org.phoenixframework.channels; class Binding { private final String event; private final IMessageCallback callback; public Binding(final String event, final IMessageCallback callback) { this.event = event; this.callback = callback; } public String getEvent() { return event; } public IMessageCallback getCallback() { return callback; } @Override public String toString() { return \"Binding{\" + \"event='\" + event + '\\'' + \", callback=\" + callback + '}'; } }"},{"file_path":"JavaPhoenixChannels-master\\src\\main\\java\\org\\phoenixframework\\channels\\ChannelEvent.java","file_content":"package org.phoenixframework.channels; public enum ChannelEvent { CLOSE(\"phx_close\"), ERROR(\"phx_error\"), JOIN(\"phx_join\"), REPLY(\"phx_reply\"), LEAVE(\"phx_leave\"); private final String phxEvent; public static ChannelEvent getEvent(final String phxEvent) { for (final ChannelEvent ev : values()) { if (ev.getPhxEvent().equals(phxEvent)) { return ev; } } return null; } ChannelEvent(final String phxEvent) { this.phxEvent = phxEvent; } public String getPhxEvent() { return phxEvent; } }"},{"file_path":"JavaPhoenixChannels-master\\src\\main\\java\\org\\phoenixframework\\channels\\ChannelState.java","file_content":"package org.phoenixframework.channels; public enum ChannelState { CLOSED, ERRORED, JOINED, JOINING }"},{"file_path":"JavaPhoenixChannels-master\\src\\main\\java\\org\\phoenixframework\\channels\\Envelope.java","file_content":"package org.phoenixframework.channels; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import com.fasterxml.jackson.databind.JsonNode; @JsonIgnoreProperties(ignoreUnknown = true) public class Envelope { @JsonProperty(value = \"topic\") private String topic; @JsonProperty(value = \"event\") private String event; @JsonProperty(value = \"payload\") private JsonNode payload; @JsonProperty(value = \"ref\") private String ref; @JsonProperty private String join_ref; @SuppressWarnings(\"unused\") public Envelope() { } public Envelope(final String topic, final String event, final JsonNode payload, final String ref, final String join_ref) { this.topic = topic; this.event = event; this.payload = payload; this.ref = ref; this.join_ref = join_ref; } public String getTopic() { return topic; } public String getEvent() { return event; } public JsonNode getPayload() { return payload; } public String getRef() { if (ref != null) return ref; final JsonNode refNode = payload.get(\"ref\"); return refNode != null ? refNode.textValue() : null; } public String getJoinRef() { if (join_ref != null) return join_ref; final JsonNode joinRefNode = payload.get(\"join_ref\"); return joinRefNode != null ? joinRefNode.textValue() : null; } public String getResponseStatus() { final JsonNode statusNode = payload.get(\"status\"); return statusNode == null ? null : statusNode.textValue(); } public String getReason() { final JsonNode reasonNode = payload.get(\"reason\"); return reasonNode == null ? null : reasonNode.textValue(); } @Override public String toString() { return \"Envelope{\" + \"topic='\" + topic + '\\'' + \", event='\" + event + '\\'' + \", payload=\" + payload + '}'; } }"},{"file_path":"JavaPhoenixChannels-master\\src\\main\\java\\org\\phoenixframework\\channels\\IErrorCallback.java","file_content":"package org.phoenixframework.channels; public interface IErrorCallback { void onError(final String reason); }"},{"file_path":"JavaPhoenixChannels-master\\src\\main\\java\\org\\phoenixframework\\channels\\IMessageCallback.java","file_content":"package org.phoenixframework.channels; public interface IMessageCallback { void onMessage(final Envelope envelope); }"},{"file_path":"JavaPhoenixChannels-master\\src\\main\\java\\org\\phoenixframework\\channels\\ITimeoutCallback.java","file_content":"package org.phoenixframework.channels; public interface ITimeoutCallback { void onTimeout(); }"},{"file_path":"JavaPhoenixChannels-master\\src\\main\\java\\org\\phoenixframework\\channels\\Push.java","file_content":"package org.phoenixframework.channels; import com.fasterxml.jackson.databind.JsonNode; import java.io.IOException; import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map; import java.util.TimerTask; import org.slf4j.Logger; import org.slf4j.LoggerFactory; public class Push { private static final Logger log = LoggerFactory.getLogger(Push.class); private class TimeoutHook { private ITimeoutCallback callback; private final long ms; private TimerTask timerTask; public TimeoutHook(final long ms) { this.ms = ms; } public ITimeoutCallback getCallback() { return callback; } public long getMs() { return ms; } public TimerTask getTimerTask() { return timerTask; } public boolean hasCallback() { return this.callback != null; } public void setCallback(final ITimeoutCallback callback) { this.callback = callback; } public void setTimerTask(final TimerTask timerTask) { this.timerTask = timerTask; } } private Channel channel = null; private String event = null; private JsonNode payload = null; private final Map<String, List<IMessageCallback>> recHooks = new HashMap<>(); private Envelope receivedEnvelope = null; private String refEvent = null; private boolean sent = false; private final TimeoutHook timeoutHook; private String ref; Push(final Channel channel, final String event, final JsonNode payload, final long timeout) { this.channel = channel; this.event = event; this.payload = payload; this.timeoutHook = new TimeoutHook(timeout); } public Push receive(final String status, final IMessageCallback callback) { if (this.receivedEnvelope != null) { final String receivedStatus = this.receivedEnvelope.getResponseStatus(); if (receivedStatus != null && receivedStatus.equals(status)) { callback.onMessage(this.receivedEnvelope); } } synchronized (recHooks) { List<IMessageCallback> statusHooks = this.recHooks.get(status); if (statusHooks == null) { statusHooks = new ArrayList<>(); this.recHooks.put(status, statusHooks); } statusHooks.add(callback); } return this; } public Push timeout(final ITimeoutCallback callback) { if (this.timeoutHook.hasCallback()) { throw new IllegalStateException(\"Only a single after hook can be applied to a Push\"); } this.timeoutHook.setCallback(callback); return this; } Channel getChannel() { return channel; } String getEvent() { return event; } JsonNode getPayload() { return payload; } public String getRef() { return ref; } Map<String, List<IMessageCallback>> getRecHooks() { return recHooks; } Envelope getReceivedEnvelope() { return receivedEnvelope; } boolean isSent() { return sent; } void send() throws IOException { this.ref = channel.getSocket().makeRef(); log.trace(\"Push send, ref={}\", ref); this.refEvent = Socket.replyEventName(ref); this.receivedEnvelope = null; this.channel.on(this.refEvent, new IMessageCallback() { @Override public void onMessage(final Envelope envelope) { Push.this.receivedEnvelope = envelope; Push.this.matchReceive(receivedEnvelope.getResponseStatus(), envelope); Push.this.cancelRefEvent(); Push.this.cancelTimeout(); } }); this.startTimeout(); this.sent = true; final Envelope envelope = new Envelope(this.channel.getTopic(), this.event, this.payload, this.ref, this.channel.joinRef()); this.channel.getSocket().push(envelope); } private void reset() { this.cancelRefEvent(); this.refEvent = null; this.receivedEnvelope = null; this.sent = false; } private void cancelRefEvent() { this.channel.off(this.refEvent); } private void cancelTimeout() { this.timeoutHook.getTimerTask().cancel(); this.timeoutHook.setTimerTask(null); } private TimerTask createTimerTask() { final Runnable callback = new Runnable() { @Override public void run() { Push.this.cancelRefEvent(); if (Push.this.timeoutHook.hasCallback()) { Push.this.timeoutHook.getCallback().onTimeout(); } } }; return new TimerTask() { @Override public void run() { callback.run(); } }; } private void matchReceive(final String status, final Envelope envelope) { synchronized (recHooks) { final List<IMessageCallback> statusCallbacks = this.recHooks.get(status); if (statusCallbacks != null) { for (final IMessageCallback callback : statusCallbacks) { callback.onMessage(envelope); } } } } private void startTimeout() { this.timeoutHook.setTimerTask(createTimerTask()); this.channel.scheduleTask(this.timeoutHook.getTimerTask(), this.timeoutHook.getMs()); } }"},{"file_path":"JavaPhoenixChannels-master\\src\\main\\java\\org\\phoenixframework\\channels\\Socket.java","file_content":"package org.phoenixframework.channels; import com.fasterxml.jackson.databind.JsonNode; import com.fasterxml.jackson.databind.ObjectMapper; import com.fasterxml.jackson.databind.node.JsonNodeFactory; import com.fasterxml.jackson.databind.node.ObjectNode; import java.io.IOException; import java.util.ArrayList; import java.util.Collections; import java.util.HashMap; import java.util.Iterator; import java.util.List; import java.util.Set; import java.util.Timer; import java.util.TimerTask; import java.util.concurrent.LinkedBlockingQueue; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import okhttp3.MediaType; import okhttp3.OkHttpClient; import okhttp3.Request; import okhttp3.RequestBody; import okhttp3.Response; import okhttp3.WebSocket; import okhttp3.WebSocketListener; import okio.ByteString; public class Socket { private static final Logger log = LoggerFactory.getLogger(Socket.class); public class PhoenixWSListener extends WebSocketListener { @Override public void onOpen(WebSocket webSocket, Response response) { log.trace(\"WebSocket onOpen: {}\", webSocket); Socket.this.webSocket = webSocket; cancelReconnectTimer(); startHeartbeatTimer(); for (final ISocketOpenCallback callback : socketOpenCallbacks) { callback.onOpen(); } Socket.this.flushSendBuffer(); } @Override public void onMessage(WebSocket webSocket, String text) { log.trace(\"onMessage: {}\", text); try { final Envelope envelope = objectMapper.readValue(text, Envelope.class); synchronized (channels) { for (final Channel channel : channels) { if (channel.isMember(envelope)) { channel.trigger(envelope.getEvent(), envelope); } } } for (final IMessageCallback callback : messageCallbacks) { callback.onMessage(envelope); } } catch (IOException e) { log.error(\"Failed to read message payload\", e); } } @Override public void onMessage(WebSocket webSocket, ByteString bytes) { onMessage(webSocket, bytes.toString()); } @Override public void onClosing(WebSocket webSocket, int code, String reason) { } @Override public void onClosed(WebSocket webSocket, int code, String reason) { log.trace(\"WebSocket onClose {}/{}\", code, reason); Socket.this.webSocket = null; for (final ISocketCloseCallback callback : socketCloseCallbacks) { callback.onClose(); } } @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) { log.warn(\"WebSocket connection error\", t); try { triggerChannelError(); for (final IErrorCallback callback : errorCallbacks) { callback.onError(t.getMessage()); } } finally { if (Socket.this.webSocket != null) { try { Socket.this.webSocket.close(1001 , \"EOF received\"); } finally { Socket.this.webSocket = null; } } if (reconnectOnFailure) { scheduleReconnectTimer(); } } } } public static final int RECONNECT_INTERVAL_MS = 5000; private static final int DEFAULT_HEARTBEAT_INTERVAL = 7000; private final List<Channel> channels = new ArrayList<>(); private String endpointUri = null; private final Set<IErrorCallback> errorCallbacks = Collections.newSetFromMap(new HashMap<IErrorCallback, Boolean>()); private final int heartbeatInterval; private TimerTask heartbeatTimerTask = null; private final OkHttpClient httpClient = new OkHttpClient(); private final Set<IMessageCallback> messageCallbacks = Collections.newSetFromMap(new HashMap<IMessageCallback, Boolean>()); private final ObjectMapper objectMapper = new ObjectMapper(); private boolean reconnectOnFailure = true; private TimerTask reconnectTimerTask = null; private int refNo = 1; private final LinkedBlockingQueue<RequestBody> sendBuffer = new LinkedBlockingQueue<>(); private final Set<ISocketCloseCallback> socketCloseCallbacks = Collections .newSetFromMap(new HashMap<ISocketCloseCallback, Boolean>()); private final Set<ISocketOpenCallback> socketOpenCallbacks = Collections .newSetFromMap(new HashMap<ISocketOpenCallback, Boolean>()); private Timer timer = null; private WebSocket webSocket = null; private final PhoenixWSListener wsListener = new PhoenixWSListener(); public Socket(final String endpointUri) throws IOException { this(endpointUri, DEFAULT_HEARTBEAT_INTERVAL); } public Socket(final String endpointUri, final int heartbeatIntervalInMs) { log.trace(\"PhoenixSocket({})\", endpointUri); this.endpointUri = endpointUri; this.heartbeatInterval = heartbeatIntervalInMs; this.timer = new Timer(\"Reconnect Timer for \" + endpointUri); } public Channel chan(final String topic, final JsonNode payload) { log.trace(\"chan: {}, {}\", topic, payload); final Channel channel = new Channel(topic, payload, Socket.this); synchronized (channels) { channels.add(channel); } return channel; } public void connect() throws IOException { log.trace(\"connect\"); disconnect(); final String httpUrl = this.endpointUri.replaceFirst(\"^ws:\", \"http:\") .replaceFirst(\"^wss:\", \"https:\"); final Request request = new Request.Builder().url(httpUrl).build(); webSocket = httpClient.newWebSocket(request, wsListener); } public void disconnect() throws IOException { log.trace(\"disconnect\"); if (webSocket != null) { webSocket.close(1001 , \"Disconnected by client\"); } cancelHeartbeatTimer(); cancelReconnectTimer(); } public boolean isConnected() { return webSocket != null; } public Socket onClose(final ISocketCloseCallback callback) { this.socketCloseCallbacks.add(callback); return this; } public Socket onError(final IErrorCallback callback) { this.errorCallbacks.add(callback); return this; } public Socket onMessage(final IMessageCallback callback) { this.messageCallbacks.add(callback); return this; } public Socket onOpen(final ISocketOpenCallback callback) { cancelReconnectTimer(); this.socketOpenCallbacks.add(callback); return this; } public Socket push(final Envelope envelope) throws IOException { final ObjectNode node = objectMapper.createObjectNode(); node.put(\"topic\", envelope.getTopic()); node.put(\"event\", envelope.getEvent()); node.put(\"ref\", envelope.getRef()); node.put(\"join_ref\", envelope.getJoinRef()); node.set(\"payload\", envelope.getPayload() == null ? objectMapper.createObjectNode() : envelope.getPayload()); final String json = objectMapper.writeValueAsString(node); log.trace(\"push: {}, isConnected:{}, JSON:{}\", envelope, isConnected(), json); RequestBody body = RequestBody.create(MediaType.parse(\"text/xml\"), json); if (this.isConnected()) { webSocket.send(json); } else { this.sendBuffer.add(body); } return this; } public void reconectOnFailure(final boolean reconnectOnFailure) { this.reconnectOnFailure = reconnectOnFailure; } public void remove(final Channel channel) { synchronized (channels) { for (final Iterator chanIter = channels.iterator(); chanIter.hasNext(); ) { if (chanIter.next() == channel) { chanIter.remove(); break; } } } } public void removeAllChannels() { synchronized (channels) { channels.clear(); } } @Override public String toString() { return \"PhoenixSocket{\" + \"endpointUri='\" + endpointUri + '\\'' + \", channels(\" + channels.size() + \")=\" + channels + \", refNo=\" + refNo + \", webSocket=\" + webSocket + '}'; } synchronized String makeRef() { refNo = (refNo + 1) % Integer.MAX_VALUE; return Integer.toString(refNo); } private void cancelHeartbeatTimer() { if (Socket.this.heartbeatTimerTask != null) { Socket.this.heartbeatTimerTask.cancel(); } } private void cancelReconnectTimer() { if (Socket.this.reconnectTimerTask != null) { Socket.this.reconnectTimerTask.cancel(); } } private void flushSendBuffer() { while (this.isConnected() && !this.sendBuffer.isEmpty()) { final RequestBody body = this.sendBuffer.remove(); this.webSocket.send(body.toString()); } } private void scheduleReconnectTimer() { cancelReconnectTimer(); cancelHeartbeatTimer(); Socket.this.reconnectTimerTask = new TimerTask() { @Override public void run() { log.trace(\"reconnectTimerTask run\"); try { Socket.this.connect(); } catch (Exception e) { log.error(\"Failed to reconnect to \" + Socket.this.wsListener, e); } } }; timer.schedule(Socket.this.reconnectTimerTask, RECONNECT_INTERVAL_MS); } private void startHeartbeatTimer() { Socket.this.heartbeatTimerTask = new TimerTask() { @Override public void run() { log.trace(\"heartbeatTimerTask run\"); if (Socket.this.isConnected()) { try { Envelope envelope = new Envelope(\"phoenix\", \"heartbeat\", new ObjectNode(JsonNodeFactory.instance), Socket.this.makeRef(), null); Socket.this.push(envelope); } catch (Exception e) { log.error(\"Failed to send heartbeat\", e); } } } }; timer.schedule(Socket.this.heartbeatTimerTask, Socket.this.heartbeatInterval, Socket.this.heartbeatInterval); } private void triggerChannelError() { synchronized (channels) { for (final Channel channel : channels) { channel.trigger(ChannelEvent.ERROR.getPhxEvent(), null); } } } static String replyEventName(final String ref) { return \"chan_reply_\" + ref; } }"}]}}
{"project_id":68,"chunk_id":0,"content":{"main_file_path":"JavaPhoenixChannels-master\\src\\main\\java\\org\\phoenixframework\\channels\\ChannelEvent.java","main_file_content":"package org.phoenixframework.channels; public enum ChannelEvent { CLOSE(\"phx_close\"), ERROR(\"phx_error\"), JOIN(\"phx_join\"), REPLY(\"phx_reply\"), LEAVE(\"phx_leave\"); private final String phxEvent; public static ChannelEvent getEvent(final String phxEvent) { for (final ChannelEvent ev : values()) { if (ev.getPhxEvent().equals(phxEvent)) { return ev; } } return null; } ChannelEvent(final String phxEvent) { this.phxEvent = phxEvent; } public String getPhxEvent() { return phxEvent; } }","dependencies":[]}}
{"project_id":68,"chunk_id":0,"content":{"main_file_path":"JavaPhoenixChannels-master\\src\\main\\java\\org\\phoenixframework\\channels\\ChannelState.java","main_file_content":"package org.phoenixframework.channels; public enum ChannelState { CLOSED, ERRORED, JOINED, JOINING }","dependencies":[]}}
{"project_id":68,"chunk_id":0,"content":{"main_file_path":"JavaPhoenixChannels-master\\src\\main\\java\\org\\phoenixframework\\channels\\Envelope.java","main_file_content":"package org.phoenixframework.channels; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import com.fasterxml.jackson.databind.JsonNode; @JsonIgnoreProperties(ignoreUnknown = true) public class Envelope { @JsonProperty(value = \"topic\") private String topic; @JsonProperty(value = \"event\") private String event; @JsonProperty(value = \"payload\") private JsonNode payload; @JsonProperty(value = \"ref\") private String ref; @JsonProperty private String join_ref; @SuppressWarnings(\"unused\") public Envelope() { } public Envelope(final String topic, final String event, final JsonNode payload, final String ref, final String join_ref) { this.topic = topic; this.event = event; this.payload = payload; this.ref = ref; this.join_ref = join_ref; } public String getTopic() { return topic; } public String getEvent() { return event; } public JsonNode getPayload() { return payload; } public String getRef() { if (ref != null) return ref; final JsonNode refNode = payload.get(\"ref\"); return refNode != null ? refNode.textValue() : null; } public String getJoinRef() { if (join_ref != null) return join_ref; final JsonNode joinRefNode = payload.get(\"join_ref\"); return joinRefNode != null ? joinRefNode.textValue() : null; } public String getResponseStatus() { final JsonNode statusNode = payload.get(\"status\"); return statusNode == null ? null : statusNode.textValue(); } public String getReason() { final JsonNode reasonNode = payload.get(\"reason\"); return reasonNode == null ? null : reasonNode.textValue(); } @Override public String toString() { return \"Envelope{\" + \"topic='\" + topic + '\\'' + \", event='\" + event + '\\'' + \", payload=\" + payload + '}'; } }","dependencies":[]}}
{"project_id":68,"chunk_id":0,"content":{"main_file_path":"JavaPhoenixChannels-master\\src\\main\\java\\org\\phoenixframework\\channels\\IErrorCallback.java","main_file_content":"package org.phoenixframework.channels; public interface IErrorCallback { void onError(final String reason); }","dependencies":[]}}
{"project_id":68,"chunk_id":0,"content":{"main_file_path":"JavaPhoenixChannels-master\\src\\main\\java\\org\\phoenixframework\\channels\\IMessageCallback.java","main_file_content":"package org.phoenixframework.channels; public interface IMessageCallback { void onMessage(final Envelope envelope); }","dependencies":[{"file_path":"JavaPhoenixChannels-master\\src\\main\\java\\org\\phoenixframework\\channels\\Envelope.java","file_content":"package org.phoenixframework.channels; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import com.fasterxml.jackson.databind.JsonNode; @JsonIgnoreProperties(ignoreUnknown = true) public class Envelope { @JsonProperty(value = \"topic\") private String topic; @JsonProperty(value = \"event\") private String event; @JsonProperty(value = \"payload\") private JsonNode payload; @JsonProperty(value = \"ref\") private String ref; @JsonProperty private String join_ref; @SuppressWarnings(\"unused\") public Envelope() { } public Envelope(final String topic, final String event, final JsonNode payload, final String ref, final String join_ref) { this.topic = topic; this.event = event; this.payload = payload; this.ref = ref; this.join_ref = join_ref; } public String getTopic() { return topic; } public String getEvent() { return event; } public JsonNode getPayload() { return payload; } public String getRef() { if (ref != null) return ref; final JsonNode refNode = payload.get(\"ref\"); return refNode != null ? refNode.textValue() : null; } public String getJoinRef() { if (join_ref != null) return join_ref; final JsonNode joinRefNode = payload.get(\"join_ref\"); return joinRefNode != null ? joinRefNode.textValue() : null; } public String getResponseStatus() { final JsonNode statusNode = payload.get(\"status\"); return statusNode == null ? null : statusNode.textValue(); } public String getReason() { final JsonNode reasonNode = payload.get(\"reason\"); return reasonNode == null ? null : reasonNode.textValue(); } @Override public String toString() { return \"Envelope{\" + \"topic='\" + topic + '\\'' + \", event='\" + event + '\\'' + \", payload=\" + payload + '}'; } }"}]}}
{"project_id":68,"chunk_id":0,"content":{"main_file_path":"JavaPhoenixChannels-master\\src\\main\\java\\org\\phoenixframework\\channels\\ISocketCloseCallback.java","main_file_content":"package org.phoenixframework.channels; public interface ISocketCloseCallback { void onClose(); }","dependencies":[]}}
{"project_id":68,"chunk_id":0,"content":{"main_file_path":"JavaPhoenixChannels-master\\src\\main\\java\\org\\phoenixframework\\channels\\ISocketOpenCallback.java","main_file_content":"package org.phoenixframework.channels; public interface ISocketOpenCallback { void onOpen(); }","dependencies":[]}}
{"project_id":68,"chunk_id":0,"content":{"main_file_path":"JavaPhoenixChannels-master\\src\\main\\java\\org\\phoenixframework\\channels\\ITimeoutCallback.java","main_file_content":"package org.phoenixframework.channels; public interface ITimeoutCallback { void onTimeout(); }","dependencies":[]}}
{"project_id":68,"chunk_id":0,"content":{"main_file_path":"JavaPhoenixChannels-master\\src\\main\\java\\org\\phoenixframework\\channels\\Push.java","main_file_content":"package org.phoenixframework.channels; import com.fasterxml.jackson.databind.JsonNode; import java.io.IOException; import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map; import java.util.TimerTask; import org.slf4j.Logger; import org.slf4j.LoggerFactory; public class Push { private static final Logger log = LoggerFactory.getLogger(Push.class); private class TimeoutHook { private ITimeoutCallback callback; private final long ms; private TimerTask timerTask; public TimeoutHook(final long ms) { this.ms = ms; } public ITimeoutCallback getCallback() { return callback; } public long getMs() { return ms; } public TimerTask getTimerTask() { return timerTask; } public boolean hasCallback() { return this.callback != null; } public void setCallback(final ITimeoutCallback callback) { this.callback = callback; } public void setTimerTask(final TimerTask timerTask) { this.timerTask = timerTask; } } private Channel channel = null; private String event = null; private JsonNode payload = null; private final Map<String, List<IMessageCallback>> recHooks = new HashMap<>(); private Envelope receivedEnvelope = null; private String refEvent = null; private boolean sent = false; private final TimeoutHook timeoutHook; private String ref; Push(final Channel channel, final String event, final JsonNode payload, final long timeout) { this.channel = channel; this.event = event; this.payload = payload; this.timeoutHook = new TimeoutHook(timeout); } public Push receive(final String status, final IMessageCallback callback) { if (this.receivedEnvelope != null) { final String receivedStatus = this.receivedEnvelope.getResponseStatus(); if (receivedStatus != null && receivedStatus.equals(status)) { callback.onMessage(this.receivedEnvelope); } } synchronized (recHooks) { List<IMessageCallback> statusHooks = this.recHooks.get(status); if (statusHooks == null) { statusHooks = new ArrayList<>(); this.recHooks.put(status, statusHooks); } statusHooks.add(callback); } return this; } public Push timeout(final ITimeoutCallback callback) { if (this.timeoutHook.hasCallback()) { throw new IllegalStateException(\"Only a single after hook can be applied to a Push\"); } this.timeoutHook.setCallback(callback); return this; } Channel getChannel() { return channel; } String getEvent() { return event; } JsonNode getPayload() { return payload; } public String getRef() { return ref; } Map<String, List<IMessageCallback>> getRecHooks() { return recHooks; } Envelope getReceivedEnvelope() { return receivedEnvelope; } boolean isSent() { return sent; } void send() throws IOException { this.ref = channel.getSocket().makeRef(); log.trace(\"Push send, ref={}\", ref); this.refEvent = Socket.replyEventName(ref); this.receivedEnvelope = null; this.channel.on(this.refEvent, new IMessageCallback() { @Override public void onMessage(final Envelope envelope) { Push.this.receivedEnvelope = envelope; Push.this.matchReceive(receivedEnvelope.getResponseStatus(), envelope); Push.this.cancelRefEvent(); Push.this.cancelTimeout(); } }); this.startTimeout(); this.sent = true; final Envelope envelope = new Envelope(this.channel.getTopic(), this.event, this.payload, this.ref, this.channel.joinRef()); this.channel.getSocket().push(envelope); } private void reset() { this.cancelRefEvent(); this.refEvent = null; this.receivedEnvelope = null; this.sent = false; } private void cancelRefEvent() { this.channel.off(this.refEvent); } private void cancelTimeout() { this.timeoutHook.getTimerTask().cancel(); this.timeoutHook.setTimerTask(null); } private TimerTask createTimerTask() { final Runnable callback = new Runnable() { @Override public void run() { Push.this.cancelRefEvent(); if (Push.this.timeoutHook.hasCallback()) { Push.this.timeoutHook.getCallback().onTimeout(); } } }; return new TimerTask() { @Override public void run() { callback.run(); } }; } private void matchReceive(final String status, final Envelope envelope) { synchronized (recHooks) { final List<IMessageCallback> statusCallbacks = this.recHooks.get(status); if (statusCallbacks != null) { for (final IMessageCallback callback : statusCallbacks) { callback.onMessage(envelope); } } } } private void startTimeout() { this.timeoutHook.setTimerTask(createTimerTask()); this.channel.scheduleTask(this.timeoutHook.getTimerTask(), this.timeoutHook.getMs()); } }","dependencies":[{"file_path":"JavaPhoenixChannels-master\\src\\main\\java\\org\\phoenixframework\\channels\\Channel.java","file_content":"package org.phoenixframework.channels; import com.fasterxml.jackson.databind.JsonNode; import java.io.IOException; import java.util.ArrayList; import java.util.Iterator; import java.util.List; import java.util.Timer; import java.util.TimerTask; import java.util.concurrent.LinkedBlockingDeque; import org.slf4j.Logger; import org.slf4j.LoggerFactory; public class Channel { private static final long DEFAULT_TIMEOUT = 5000; private static final Logger log = LoggerFactory.getLogger(Channel.class); private final List<Binding> bindings = new ArrayList<>(); private Timer channelTimer = null; private final Push joinPush; private boolean joinedOnce = false; private final JsonNode payload; private final LinkedBlockingDeque<Push> pushBuffer = new LinkedBlockingDeque<>(); private final Socket socket; private ChannelState state = ChannelState.CLOSED; private final String topic; public Channel(final String topic, final JsonNode payload, final Socket socket) { this.topic = topic; this.payload = payload; this.socket = socket; this.joinPush = new Push(this, ChannelEvent.JOIN.getPhxEvent(), payload, DEFAULT_TIMEOUT); this.channelTimer = new Timer(\"Phx Rejoin timer for \" + topic); this.joinPush.receive(\"ok\", new IMessageCallback() { @Override public void onMessage(Envelope envelope) { Channel.this.state = ChannelState.JOINED; } }); this.joinPush.timeout(new ITimeoutCallback() { @Override public void onTimeout() { Channel.this.state = ChannelState.ERRORED; } }); this.onClose(new IMessageCallback() { @Override public void onMessage(Envelope envelope) { Channel.this.state = ChannelState.CLOSED; Channel.this.socket.remove(Channel.this); } }); this.onError(new IErrorCallback() { @Override public void onError(String reason) { Channel.this.state = ChannelState.ERRORED; scheduleRejoinTimer(); } }); this.on(ChannelEvent.REPLY.getPhxEvent(), new IMessageCallback() { @Override public void onMessage(final Envelope envelope) { Channel.this.trigger(Socket.replyEventName(envelope.getRef()), envelope); } }); } private boolean canPush() { return this.socket.isConnected() && this.state == ChannelState.JOINED; } public Socket getSocket() { return socket; } public String getTopic() { return topic; } public boolean isMember(final Envelope envelope) { String topic = envelope.getTopic(); String event = envelope.getEvent(); String joinRef = envelope.getJoinRef(); if (!this.topic.equals(topic)) { return false; } boolean isLifecycleEvent = ChannelEvent.getEvent(event) != null; if (joinRef != null && isLifecycleEvent && joinRef != this.joinRef()) { log.info(\"dropping outdated message topic: %s, event: %s, joinRef: %s\", topic, event, joinRef); return false; } return true; } public Push join() throws IllegalStateException, IOException { if (this.joinedOnce) { throw new IllegalStateException( \"Tried to join multiple times. 'join' can only be invoked once per channel\"); } this.joinedOnce = true; this.sendJoin(); return this.joinPush; } public Push leave() throws IOException { return this.push(ChannelEvent.LEAVE.getPhxEvent()).receive(\"ok\", new IMessageCallback() { public void onMessage(final Envelope envelope) { Channel.this.trigger(ChannelEvent.CLOSE.getPhxEvent(), null); } }); } public Channel off(final String event) { synchronized (bindings) { for (final Iterator<Binding> bindingIter = bindings.iterator(); bindingIter.hasNext(); ) { if (bindingIter.next().getEvent().equals(event)) { bindingIter.remove(); break; } } } return this; } public Channel on(final String event, final IMessageCallback callback) { synchronized (bindings) { this.bindings.add(new Binding(event, callback)); } return this; } private void onClose(final IMessageCallback callback) { this.on(ChannelEvent.CLOSE.getPhxEvent(), callback); } private void onError(final IErrorCallback callback) { this.on(ChannelEvent.ERROR.getPhxEvent(), new IMessageCallback() { @Override public void onMessage(final Envelope envelope) { String reason = null; if (envelope != null) { reason = envelope.getReason(); } callback.onError(reason); } }); } private Push push(final String event, final JsonNode payload, final long timeout) throws IOException, IllegalStateException { if (!this.joinedOnce) { throw new IllegalStateException(\"Unable to push event before channel has been joined\"); } final Push pushEvent = new Push(this, event, payload, timeout); if (this.canPush()) { pushEvent.send(); } else { this.pushBuffer.add(pushEvent); } return pushEvent; } public Push push(final String event, final JsonNode payload) throws IOException { return push(event, payload, DEFAULT_TIMEOUT); } public Push push(final String event) throws IOException { return push(event, null); } private void rejoin() throws IOException { this.sendJoin(); while (!this.pushBuffer.isEmpty()) { this.pushBuffer.removeFirst().send(); } } private void rejoinUntilConnected() throws IOException { if (this.state == ChannelState.ERRORED) { if (this.socket.isConnected()) { this.rejoin(); } else { scheduleRejoinTimer(); } } } public void scheduleRepeatingTask(TimerTask timerTask, long ms) { this.channelTimer.schedule(timerTask, ms, ms); } public void scheduleTask(TimerTask timerTask, long ms) { this.channelTimer.schedule(timerTask, ms); } @Override public String toString() { return \"Channel{\" + \"topic='\" + topic + '\\'' + \", message=\" + payload + \", bindings(\" + bindings.size() + \")=\" + bindings + '}'; } void trigger(final String triggerEvent, final Envelope envelope) { synchronized (bindings) { for (final Binding binding : bindings) { if (binding.getEvent().equals(triggerEvent)) { binding.getCallback().onMessage(envelope); break; } } } } private void scheduleRejoinTimer() { final TimerTask rejoinTimerTask = new TimerTask() { @Override public void run() { try { Channel.this.rejoinUntilConnected(); } catch (IOException e) { log.error(\"Failed to rejoin\", e); } } }; scheduleTask(rejoinTimerTask, Socket.RECONNECT_INTERVAL_MS); } private void sendJoin() throws IOException { this.state = ChannelState.JOINING; this.joinPush.send(); } public boolean isJoined() { return state == ChannelState.JOINED; } public boolean isErrored() { return state == ChannelState.ERRORED; } public boolean isClosed() { return state == ChannelState.CLOSED; } public boolean isJoining() { return state == ChannelState.JOINING; } public String joinRef() { return this.joinPush.getRef(); } }"},{"file_path":"JavaPhoenixChannels-master\\src\\main\\java\\org\\phoenixframework\\channels\\Envelope.java","file_content":"package org.phoenixframework.channels; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import com.fasterxml.jackson.databind.JsonNode; @JsonIgnoreProperties(ignoreUnknown = true) public class Envelope { @JsonProperty(value = \"topic\") private String topic; @JsonProperty(value = \"event\") private String event; @JsonProperty(value = \"payload\") private JsonNode payload; @JsonProperty(value = \"ref\") private String ref; @JsonProperty private String join_ref; @SuppressWarnings(\"unused\") public Envelope() { } public Envelope(final String topic, final String event, final JsonNode payload, final String ref, final String join_ref) { this.topic = topic; this.event = event; this.payload = payload; this.ref = ref; this.join_ref = join_ref; } public String getTopic() { return topic; } public String getEvent() { return event; } public JsonNode getPayload() { return payload; } public String getRef() { if (ref != null) return ref; final JsonNode refNode = payload.get(\"ref\"); return refNode != null ? refNode.textValue() : null; } public String getJoinRef() { if (join_ref != null) return join_ref; final JsonNode joinRefNode = payload.get(\"join_ref\"); return joinRefNode != null ? joinRefNode.textValue() : null; } public String getResponseStatus() { final JsonNode statusNode = payload.get(\"status\"); return statusNode == null ? null : statusNode.textValue(); } public String getReason() { final JsonNode reasonNode = payload.get(\"reason\"); return reasonNode == null ? null : reasonNode.textValue(); } @Override public String toString() { return \"Envelope{\" + \"topic='\" + topic + '\\'' + \", event='\" + event + '\\'' + \", payload=\" + payload + '}'; } }"},{"file_path":"JavaPhoenixChannels-master\\src\\main\\java\\org\\phoenixframework\\channels\\IMessageCallback.java","file_content":"package org.phoenixframework.channels; public interface IMessageCallback { void onMessage(final Envelope envelope); }"},{"file_path":"JavaPhoenixChannels-master\\src\\main\\java\\org\\phoenixframework\\channels\\ITimeoutCallback.java","file_content":"package org.phoenixframework.channels; public interface ITimeoutCallback { void onTimeout(); }"},{"file_path":"JavaPhoenixChannels-master\\src\\main\\java\\org\\phoenixframework\\channels\\Socket.java","file_content":"package org.phoenixframework.channels; import com.fasterxml.jackson.databind.JsonNode; import com.fasterxml.jackson.databind.ObjectMapper; import com.fasterxml.jackson.databind.node.JsonNodeFactory; import com.fasterxml.jackson.databind.node.ObjectNode; import java.io.IOException; import java.util.ArrayList; import java.util.Collections; import java.util.HashMap; import java.util.Iterator; import java.util.List; import java.util.Set; import java.util.Timer; import java.util.TimerTask; import java.util.concurrent.LinkedBlockingQueue; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import okhttp3.MediaType; import okhttp3.OkHttpClient; import okhttp3.Request; import okhttp3.RequestBody; import okhttp3.Response; import okhttp3.WebSocket; import okhttp3.WebSocketListener; import okio.ByteString; public class Socket { private static final Logger log = LoggerFactory.getLogger(Socket.class); public class PhoenixWSListener extends WebSocketListener { @Override public void onOpen(WebSocket webSocket, Response response) { log.trace(\"WebSocket onOpen: {}\", webSocket); Socket.this.webSocket = webSocket; cancelReconnectTimer(); startHeartbeatTimer(); for (final ISocketOpenCallback callback : socketOpenCallbacks) { callback.onOpen(); } Socket.this.flushSendBuffer(); } @Override public void onMessage(WebSocket webSocket, String text) { log.trace(\"onMessage: {}\", text); try { final Envelope envelope = objectMapper.readValue(text, Envelope.class); synchronized (channels) { for (final Channel channel : channels) { if (channel.isMember(envelope)) { channel.trigger(envelope.getEvent(), envelope); } } } for (final IMessageCallback callback : messageCallbacks) { callback.onMessage(envelope); } } catch (IOException e) { log.error(\"Failed to read message payload\", e); } } @Override public void onMessage(WebSocket webSocket, ByteString bytes) { onMessage(webSocket, bytes.toString()); } @Override public void onClosing(WebSocket webSocket, int code, String reason) { } @Override public void onClosed(WebSocket webSocket, int code, String reason) { log.trace(\"WebSocket onClose {}/{}\", code, reason); Socket.this.webSocket = null; for (final ISocketCloseCallback callback : socketCloseCallbacks) { callback.onClose(); } } @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) { log.warn(\"WebSocket connection error\", t); try { triggerChannelError(); for (final IErrorCallback callback : errorCallbacks) { callback.onError(t.getMessage()); } } finally { if (Socket.this.webSocket != null) { try { Socket.this.webSocket.close(1001 , \"EOF received\"); } finally { Socket.this.webSocket = null; } } if (reconnectOnFailure) { scheduleReconnectTimer(); } } } } public static final int RECONNECT_INTERVAL_MS = 5000; private static final int DEFAULT_HEARTBEAT_INTERVAL = 7000; private final List<Channel> channels = new ArrayList<>(); private String endpointUri = null; private final Set<IErrorCallback> errorCallbacks = Collections.newSetFromMap(new HashMap<IErrorCallback, Boolean>()); private final int heartbeatInterval; private TimerTask heartbeatTimerTask = null; private final OkHttpClient httpClient = new OkHttpClient(); private final Set<IMessageCallback> messageCallbacks = Collections.newSetFromMap(new HashMap<IMessageCallback, Boolean>()); private final ObjectMapper objectMapper = new ObjectMapper(); private boolean reconnectOnFailure = true; private TimerTask reconnectTimerTask = null; private int refNo = 1; private final LinkedBlockingQueue<RequestBody> sendBuffer = new LinkedBlockingQueue<>(); private final Set<ISocketCloseCallback> socketCloseCallbacks = Collections .newSetFromMap(new HashMap<ISocketCloseCallback, Boolean>()); private final Set<ISocketOpenCallback> socketOpenCallbacks = Collections .newSetFromMap(new HashMap<ISocketOpenCallback, Boolean>()); private Timer timer = null; private WebSocket webSocket = null; private final PhoenixWSListener wsListener = new PhoenixWSListener(); public Socket(final String endpointUri) throws IOException { this(endpointUri, DEFAULT_HEARTBEAT_INTERVAL); } public Socket(final String endpointUri, final int heartbeatIntervalInMs) { log.trace(\"PhoenixSocket({})\", endpointUri); this.endpointUri = endpointUri; this.heartbeatInterval = heartbeatIntervalInMs; this.timer = new Timer(\"Reconnect Timer for \" + endpointUri); } public Channel chan(final String topic, final JsonNode payload) { log.trace(\"chan: {}, {}\", topic, payload); final Channel channel = new Channel(topic, payload, Socket.this); synchronized (channels) { channels.add(channel); } return channel; } public void connect() throws IOException { log.trace(\"connect\"); disconnect(); final String httpUrl = this.endpointUri.replaceFirst(\"^ws:\", \"http:\") .replaceFirst(\"^wss:\", \"https:\"); final Request request = new Request.Builder().url(httpUrl).build(); webSocket = httpClient.newWebSocket(request, wsListener); } public void disconnect() throws IOException { log.trace(\"disconnect\"); if (webSocket != null) { webSocket.close(1001 , \"Disconnected by client\"); } cancelHeartbeatTimer(); cancelReconnectTimer(); } public boolean isConnected() { return webSocket != null; } public Socket onClose(final ISocketCloseCallback callback) { this.socketCloseCallbacks.add(callback); return this; } public Socket onError(final IErrorCallback callback) { this.errorCallbacks.add(callback); return this; } public Socket onMessage(final IMessageCallback callback) { this.messageCallbacks.add(callback); return this; } public Socket onOpen(final ISocketOpenCallback callback) { cancelReconnectTimer(); this.socketOpenCallbacks.add(callback); return this; } public Socket push(final Envelope envelope) throws IOException { final ObjectNode node = objectMapper.createObjectNode(); node.put(\"topic\", envelope.getTopic()); node.put(\"event\", envelope.getEvent()); node.put(\"ref\", envelope.getRef()); node.put(\"join_ref\", envelope.getJoinRef()); node.set(\"payload\", envelope.getPayload() == null ? objectMapper.createObjectNode() : envelope.getPayload()); final String json = objectMapper.writeValueAsString(node); log.trace(\"push: {}, isConnected:{}, JSON:{}\", envelope, isConnected(), json); RequestBody body = RequestBody.create(MediaType.parse(\"text/xml\"), json); if (this.isConnected()) { webSocket.send(json); } else { this.sendBuffer.add(body); } return this; } public void reconectOnFailure(final boolean reconnectOnFailure) { this.reconnectOnFailure = reconnectOnFailure; } public void remove(final Channel channel) { synchronized (channels) { for (final Iterator chanIter = channels.iterator(); chanIter.hasNext(); ) { if (chanIter.next() == channel) { chanIter.remove(); break; } } } } public void removeAllChannels() { synchronized (channels) { channels.clear(); } } @Override public String toString() { return \"PhoenixSocket{\" + \"endpointUri='\" + endpointUri + '\\'' + \", channels(\" + channels.size() + \")=\" + channels + \", refNo=\" + refNo + \", webSocket=\" + webSocket + '}'; } synchronized String makeRef() { refNo = (refNo + 1) % Integer.MAX_VALUE; return Integer.toString(refNo); } private void cancelHeartbeatTimer() { if (Socket.this.heartbeatTimerTask != null) { Socket.this.heartbeatTimerTask.cancel(); } } private void cancelReconnectTimer() { if (Socket.this.reconnectTimerTask != null) { Socket.this.reconnectTimerTask.cancel(); } } private void flushSendBuffer() { while (this.isConnected() && !this.sendBuffer.isEmpty()) { final RequestBody body = this.sendBuffer.remove(); this.webSocket.send(body.toString()); } } private void scheduleReconnectTimer() { cancelReconnectTimer(); cancelHeartbeatTimer(); Socket.this.reconnectTimerTask = new TimerTask() { @Override public void run() { log.trace(\"reconnectTimerTask run\"); try { Socket.this.connect(); } catch (Exception e) { log.error(\"Failed to reconnect to \" + Socket.this.wsListener, e); } } }; timer.schedule(Socket.this.reconnectTimerTask, RECONNECT_INTERVAL_MS); } private void startHeartbeatTimer() { Socket.this.heartbeatTimerTask = new TimerTask() { @Override public void run() { log.trace(\"heartbeatTimerTask run\"); if (Socket.this.isConnected()) { try { Envelope envelope = new Envelope(\"phoenix\", \"heartbeat\", new ObjectNode(JsonNodeFactory.instance), Socket.this.makeRef(), null); Socket.this.push(envelope); } catch (Exception e) { log.error(\"Failed to send heartbeat\", e); } } } }; timer.schedule(Socket.this.heartbeatTimerTask, Socket.this.heartbeatInterval, Socket.this.heartbeatInterval); } private void triggerChannelError() { synchronized (channels) { for (final Channel channel : channels) { channel.trigger(ChannelEvent.ERROR.getPhxEvent(), null); } } } static String replyEventName(final String ref) { return \"chan_reply_\" + ref; } }"}]}}
{"project_id":68,"chunk_id":0,"content":{"main_file_path":"JavaPhoenixChannels-master\\src\\main\\java\\org\\phoenixframework\\channels\\Socket.java","main_file_content":"package org.phoenixframework.channels; import com.fasterxml.jackson.databind.JsonNode; import com.fasterxml.jackson.databind.ObjectMapper; import com.fasterxml.jackson.databind.node.JsonNodeFactory; import com.fasterxml.jackson.databind.node.ObjectNode; import java.io.IOException; import java.util.ArrayList; import java.util.Collections; import java.util.HashMap; import java.util.Iterator; import java.util.List; import java.util.Set; import java.util.Timer; import java.util.TimerTask; import java.util.concurrent.LinkedBlockingQueue; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import okhttp3.MediaType; import okhttp3.OkHttpClient; import okhttp3.Request; import okhttp3.RequestBody; import okhttp3.Response; import okhttp3.WebSocket; import okhttp3.WebSocketListener; import okio.ByteString; public class Socket { private static final Logger log = LoggerFactory.getLogger(Socket.class); public class PhoenixWSListener extends WebSocketListener { @Override public void onOpen(WebSocket webSocket, Response response) { log.trace(\"WebSocket onOpen: {}\", webSocket); Socket.this.webSocket = webSocket; cancelReconnectTimer(); startHeartbeatTimer(); for (final ISocketOpenCallback callback : socketOpenCallbacks) { callback.onOpen(); } Socket.this.flushSendBuffer(); } @Override public void onMessage(WebSocket webSocket, String text) { log.trace(\"onMessage: {}\", text); try { final Envelope envelope = objectMapper.readValue(text, Envelope.class); synchronized (channels) { for (final Channel channel : channels) { if (channel.isMember(envelope)) { channel.trigger(envelope.getEvent(), envelope); } } } for (final IMessageCallback callback : messageCallbacks) { callback.onMessage(envelope); } } catch (IOException e) { log.error(\"Failed to read message payload\", e); } } @Override public void onMessage(WebSocket webSocket, ByteString bytes) { onMessage(webSocket, bytes.toString()); } @Override public void onClosing(WebSocket webSocket, int code, String reason) { } @Override public void onClosed(WebSocket webSocket, int code, String reason) { log.trace(\"WebSocket onClose {}/{}\", code, reason); Socket.this.webSocket = null; for (final ISocketCloseCallback callback : socketCloseCallbacks) { callback.onClose(); } } @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) { log.warn(\"WebSocket connection error\", t); try { triggerChannelError(); for (final IErrorCallback callback : errorCallbacks) { callback.onError(t.getMessage()); } } finally { if (Socket.this.webSocket != null) { try { Socket.this.webSocket.close(1001 , \"EOF received\"); } finally { Socket.this.webSocket = null; } } if (reconnectOnFailure) { scheduleReconnectTimer(); } } } } public static final int RECONNECT_INTERVAL_MS = 5000; private static final int DEFAULT_HEARTBEAT_INTERVAL = 7000; private final List<Channel> channels = new ArrayList<>(); private String endpointUri = null; private final Set<IErrorCallback> errorCallbacks = Collections.newSetFromMap(new HashMap<IErrorCallback, Boolean>()); private final int heartbeatInterval; private TimerTask heartbeatTimerTask = null; private final OkHttpClient httpClient = new OkHttpClient(); private final Set<IMessageCallback> messageCallbacks = Collections.newSetFromMap(new HashMap<IMessageCallback, Boolean>()); private final ObjectMapper objectMapper = new ObjectMapper(); private boolean reconnectOnFailure = true; private TimerTask reconnectTimerTask = null; private int refNo = 1; private final LinkedBlockingQueue<RequestBody> sendBuffer = new LinkedBlockingQueue<>(); private final Set<ISocketCloseCallback> socketCloseCallbacks = Collections .newSetFromMap(new HashMap<ISocketCloseCallback, Boolean>()); private final Set<ISocketOpenCallback> socketOpenCallbacks = Collections .newSetFromMap(new HashMap<ISocketOpenCallback, Boolean>()); private Timer timer = null; private WebSocket webSocket = null; private final PhoenixWSListener wsListener = new PhoenixWSListener(); public Socket(final String endpointUri) throws IOException { this(endpointUri, DEFAULT_HEARTBEAT_INTERVAL); } public Socket(final String endpointUri, final int heartbeatIntervalInMs) { log.trace(\"PhoenixSocket({})\", endpointUri); this.endpointUri = endpointUri; this.heartbeatInterval = heartbeatIntervalInMs; this.timer = new Timer(\"Reconnect Timer for \" + endpointUri); } public Channel chan(final String topic, final JsonNode payload) { log.trace(\"chan: {}, {}\", topic, payload); final Channel channel = new Channel(topic, payload, Socket.this); synchronized (channels) { channels.add(channel); } return channel; } public void connect() throws IOException { log.trace(\"connect\"); disconnect(); final String httpUrl = this.endpointUri.replaceFirst(\"^ws:\", \"http:\") .replaceFirst(\"^wss:\", \"https:\"); final Request request = new Request.Builder().url(httpUrl).build(); webSocket = httpClient.newWebSocket(request, wsListener); } public void disconnect() throws IOException { log.trace(\"disconnect\"); if (webSocket != null) { webSocket.close(1001 , \"Disconnected by client\"); } cancelHeartbeatTimer(); cancelReconnectTimer(); } public boolean isConnected() { return webSocket != null; } public Socket onClose(final ISocketCloseCallback callback) { this.socketCloseCallbacks.add(callback); return this; } public Socket onError(final IErrorCallback callback) { this.errorCallbacks.add(callback); return this; } public Socket onMessage(final IMessageCallback callback) { this.messageCallbacks.add(callback); return this; } public Socket onOpen(final ISocketOpenCallback callback) { cancelReconnectTimer(); this.socketOpenCallbacks.add(callback); return this; } public Socket push(final Envelope envelope) throws IOException { final ObjectNode node = objectMapper.createObjectNode(); node.put(\"topic\", envelope.getTopic()); node.put(\"event\", envelope.getEvent()); node.put(\"ref\", envelope.getRef()); node.put(\"join_ref\", envelope.getJoinRef()); node.set(\"payload\", envelope.getPayload() == null ? objectMapper.createObjectNode() : envelope.getPayload()); final String json = objectMapper.writeValueAsString(node); log.trace(\"push: {}, isConnected:{}, JSON:{}\", envelope, isConnected(), json); RequestBody body = RequestBody.create(MediaType.parse(\"text/xml\"), json); if (this.isConnected()) { webSocket.send(json); } else { this.sendBuffer.add(body); } return this; } public void reconectOnFailure(final boolean reconnectOnFailure) { this.reconnectOnFailure = reconnectOnFailure; } public void remove(final Channel channel) { synchronized (channels) { for (final Iterator chanIter = channels.iterator(); chanIter.hasNext(); ) { if (chanIter.next() == channel) { chanIter.remove(); break; } } } } public void removeAllChannels() { synchronized (channels) { channels.clear(); } } @Override public String toString() { return \"PhoenixSocket{\" + \"endpointUri='\" + endpointUri + '\\'' + \", channels(\" + channels.size() + \")=\" + channels + \", refNo=\" + refNo + \", webSocket=\" + webSocket + '}'; } synchronized String makeRef() { refNo = (refNo + 1) % Integer.MAX_VALUE; return Integer.toString(refNo); } private void cancelHeartbeatTimer() { if (Socket.this.heartbeatTimerTask != null) { Socket.this.heartbeatTimerTask.cancel(); } } private void cancelReconnectTimer() { if (Socket.this.reconnectTimerTask != null) { Socket.this.reconnectTimerTask.cancel(); } } private void flushSendBuffer() { while (this.isConnected() && !this.sendBuffer.isEmpty()) { final RequestBody body = this.sendBuffer.remove(); this.webSocket.send(body.toString()); } } private void scheduleReconnectTimer() { cancelReconnectTimer(); cancelHeartbeatTimer(); Socket.this.reconnectTimerTask = new TimerTask() { @Override public void run() { log.trace(\"reconnectTimerTask run\"); try { Socket.this.connect(); } catch (Exception e) { log.error(\"Failed to reconnect to \" + Socket.this.wsListener, e); } } }; timer.schedule(Socket.this.reconnectTimerTask, RECONNECT_INTERVAL_MS); } private void startHeartbeatTimer() { Socket.this.heartbeatTimerTask = new TimerTask() { @Override public void run() { log.trace(\"heartbeatTimerTask run\"); if (Socket.this.isConnected()) { try { Envelope envelope = new Envelope(\"phoenix\", \"heartbeat\", new ObjectNode(JsonNodeFactory.instance), Socket.this.makeRef(), null); Socket.this.push(envelope); } catch (Exception e) { log.error(\"Failed to send heartbeat\", e); } } } }; timer.schedule(Socket.this.heartbeatTimerTask, Socket.this.heartbeatInterval, Socket.this.heartbeatInterval); } private void triggerChannelError() { synchronized (channels) { for (final Channel channel : channels) { channel.trigger(ChannelEvent.ERROR.getPhxEvent(), null); } } } static String replyEventName(final String ref) { return \"chan_reply_\" + ref; } }","dependencies":[{"file_path":"JavaPhoenixChannels-master\\src\\main\\java\\org\\phoenixframework\\channels\\Channel.java","file_content":"package org.phoenixframework.channels; import com.fasterxml.jackson.databind.JsonNode; import java.io.IOException; import java.util.ArrayList; import java.util.Iterator; import java.util.List; import java.util.Timer; import java.util.TimerTask; import java.util.concurrent.LinkedBlockingDeque; import org.slf4j.Logger; import org.slf4j.LoggerFactory; public class Channel { private static final long DEFAULT_TIMEOUT = 5000; private static final Logger log = LoggerFactory.getLogger(Channel.class); private final List<Binding> bindings = new ArrayList<>(); private Timer channelTimer = null; private final Push joinPush; private boolean joinedOnce = false; private final JsonNode payload; private final LinkedBlockingDeque<Push> pushBuffer = new LinkedBlockingDeque<>(); private final Socket socket; private ChannelState state = ChannelState.CLOSED; private final String topic; public Channel(final String topic, final JsonNode payload, final Socket socket) { this.topic = topic; this.payload = payload; this.socket = socket; this.joinPush = new Push(this, ChannelEvent.JOIN.getPhxEvent(), payload, DEFAULT_TIMEOUT); this.channelTimer = new Timer(\"Phx Rejoin timer for \" + topic); this.joinPush.receive(\"ok\", new IMessageCallback() { @Override public void onMessage(Envelope envelope) { Channel.this.state = ChannelState.JOINED; } }); this.joinPush.timeout(new ITimeoutCallback() { @Override public void onTimeout() { Channel.this.state = ChannelState.ERRORED; } }); this.onClose(new IMessageCallback() { @Override public void onMessage(Envelope envelope) { Channel.this.state = ChannelState.CLOSED; Channel.this.socket.remove(Channel.this); } }); this.onError(new IErrorCallback() { @Override public void onError(String reason) { Channel.this.state = ChannelState.ERRORED; scheduleRejoinTimer(); } }); this.on(ChannelEvent.REPLY.getPhxEvent(), new IMessageCallback() { @Override public void onMessage(final Envelope envelope) { Channel.this.trigger(Socket.replyEventName(envelope.getRef()), envelope); } }); } private boolean canPush() { return this.socket.isConnected() && this.state == ChannelState.JOINED; } public Socket getSocket() { return socket; } public String getTopic() { return topic; } public boolean isMember(final Envelope envelope) { String topic = envelope.getTopic(); String event = envelope.getEvent(); String joinRef = envelope.getJoinRef(); if (!this.topic.equals(topic)) { return false; } boolean isLifecycleEvent = ChannelEvent.getEvent(event) != null; if (joinRef != null && isLifecycleEvent && joinRef != this.joinRef()) { log.info(\"dropping outdated message topic: %s, event: %s, joinRef: %s\", topic, event, joinRef); return false; } return true; } public Push join() throws IllegalStateException, IOException { if (this.joinedOnce) { throw new IllegalStateException( \"Tried to join multiple times. 'join' can only be invoked once per channel\"); } this.joinedOnce = true; this.sendJoin(); return this.joinPush; } public Push leave() throws IOException { return this.push(ChannelEvent.LEAVE.getPhxEvent()).receive(\"ok\", new IMessageCallback() { public void onMessage(final Envelope envelope) { Channel.this.trigger(ChannelEvent.CLOSE.getPhxEvent(), null); } }); } public Channel off(final String event) { synchronized (bindings) { for (final Iterator<Binding> bindingIter = bindings.iterator(); bindingIter.hasNext(); ) { if (bindingIter.next().getEvent().equals(event)) { bindingIter.remove(); break; } } } return this; } public Channel on(final String event, final IMessageCallback callback) { synchronized (bindings) { this.bindings.add(new Binding(event, callback)); } return this; } private void onClose(final IMessageCallback callback) { this.on(ChannelEvent.CLOSE.getPhxEvent(), callback); } private void onError(final IErrorCallback callback) { this.on(ChannelEvent.ERROR.getPhxEvent(), new IMessageCallback() { @Override public void onMessage(final Envelope envelope) { String reason = null; if (envelope != null) { reason = envelope.getReason(); } callback.onError(reason); } }); } private Push push(final String event, final JsonNode payload, final long timeout) throws IOException, IllegalStateException { if (!this.joinedOnce) { throw new IllegalStateException(\"Unable to push event before channel has been joined\"); } final Push pushEvent = new Push(this, event, payload, timeout); if (this.canPush()) { pushEvent.send(); } else { this.pushBuffer.add(pushEvent); } return pushEvent; } public Push push(final String event, final JsonNode payload) throws IOException { return push(event, payload, DEFAULT_TIMEOUT); } public Push push(final String event) throws IOException { return push(event, null); } private void rejoin() throws IOException { this.sendJoin(); while (!this.pushBuffer.isEmpty()) { this.pushBuffer.removeFirst().send(); } } private void rejoinUntilConnected() throws IOException { if (this.state == ChannelState.ERRORED) { if (this.socket.isConnected()) { this.rejoin(); } else { scheduleRejoinTimer(); } } } public void scheduleRepeatingTask(TimerTask timerTask, long ms) { this.channelTimer.schedule(timerTask, ms, ms); } public void scheduleTask(TimerTask timerTask, long ms) { this.channelTimer.schedule(timerTask, ms); } @Override public String toString() { return \"Channel{\" + \"topic='\" + topic + '\\'' + \", message=\" + payload + \", bindings(\" + bindings.size() + \")=\" + bindings + '}'; } void trigger(final String triggerEvent, final Envelope envelope) { synchronized (bindings) { for (final Binding binding : bindings) { if (binding.getEvent().equals(triggerEvent)) { binding.getCallback().onMessage(envelope); break; } } } } private void scheduleRejoinTimer() { final TimerTask rejoinTimerTask = new TimerTask() { @Override public void run() { try { Channel.this.rejoinUntilConnected(); } catch (IOException e) { log.error(\"Failed to rejoin\", e); } } }; scheduleTask(rejoinTimerTask, Socket.RECONNECT_INTERVAL_MS); } private void sendJoin() throws IOException { this.state = ChannelState.JOINING; this.joinPush.send(); } public boolean isJoined() { return state == ChannelState.JOINED; } public boolean isErrored() { return state == ChannelState.ERRORED; } public boolean isClosed() { return state == ChannelState.CLOSED; } public boolean isJoining() { return state == ChannelState.JOINING; } public String joinRef() { return this.joinPush.getRef(); } }"},{"file_path":"JavaPhoenixChannels-master\\src\\main\\java\\org\\phoenixframework\\channels\\Envelope.java","file_content":"package org.phoenixframework.channels; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import com.fasterxml.jackson.databind.JsonNode; @JsonIgnoreProperties(ignoreUnknown = true) public class Envelope { @JsonProperty(value = \"topic\") private String topic; @JsonProperty(value = \"event\") private String event; @JsonProperty(value = \"payload\") private JsonNode payload; @JsonProperty(value = \"ref\") private String ref; @JsonProperty private String join_ref; @SuppressWarnings(\"unused\") public Envelope() { } public Envelope(final String topic, final String event, final JsonNode payload, final String ref, final String join_ref) { this.topic = topic; this.event = event; this.payload = payload; this.ref = ref; this.join_ref = join_ref; } public String getTopic() { return topic; } public String getEvent() { return event; } public JsonNode getPayload() { return payload; } public String getRef() { if (ref != null) return ref; final JsonNode refNode = payload.get(\"ref\"); return refNode != null ? refNode.textValue() : null; } public String getJoinRef() { if (join_ref != null) return join_ref; final JsonNode joinRefNode = payload.get(\"join_ref\"); return joinRefNode != null ? joinRefNode.textValue() : null; } public String getResponseStatus() { final JsonNode statusNode = payload.get(\"status\"); return statusNode == null ? null : statusNode.textValue(); } public String getReason() { final JsonNode reasonNode = payload.get(\"reason\"); return reasonNode == null ? null : reasonNode.textValue(); } @Override public String toString() { return \"Envelope{\" + \"topic='\" + topic + '\\'' + \", event='\" + event + '\\'' + \", payload=\" + payload + '}'; } }"},{"file_path":"JavaPhoenixChannels-master\\src\\main\\java\\org\\phoenixframework\\channels\\IErrorCallback.java","file_content":"package org.phoenixframework.channels; public interface IErrorCallback { void onError(final String reason); }"},{"file_path":"JavaPhoenixChannels-master\\src\\main\\java\\org\\phoenixframework\\channels\\IMessageCallback.java","file_content":"package org.phoenixframework.channels; public interface IMessageCallback { void onMessage(final Envelope envelope); }"},{"file_path":"JavaPhoenixChannels-master\\src\\main\\java\\org\\phoenixframework\\channels\\ISocketCloseCallback.java","file_content":"package org.phoenixframework.channels; public interface ISocketCloseCallback { void onClose(); }"},{"file_path":"JavaPhoenixChannels-master\\src\\main\\java\\org\\phoenixframework\\channels\\ISocketOpenCallback.java","file_content":"package org.phoenixframework.channels; public interface ISocketOpenCallback { void onOpen(); }"}]}}
{"project_id":68,"chunk_id":0,"content":{"main_file_path":"JavaPhoenixChannels-master\\src\\main\\java\\org\\phoenixframework\\channels\\SocketEvent.java","main_file_content":"package org.phoenixframework.channels; public enum SocketEvent { OPEN, CLOSE, ERROR, MESSAGE }","dependencies":[]}}
{"project_id":68,"chunk_id":0,"content":{"main_file_path":"JavaPhoenixChannels-master\\src\\main\\java\\org\\phoenixframework\\channels\\SocketState.java","main_file_content":"package org.phoenixframework.channels; public enum SocketState { CONNECTING, OPEN, CLOSING, CLOSED }","dependencies":[]}}
{"project_id":69,"chunk_id":0,"content":{"main_file_path":"jellyball-master\\app\\src\\androidTest\\java\\mr_immortalz\\com\\jellyball\\ApplicationTest.java","main_file_content":"package mr_immortalz.com.jellyball; import android.app.Application; import android.test.ApplicationTestCase; public class ApplicationTest extends ApplicationTestCase<Application> { public ApplicationTest() { super(Application.class); } }","dependencies":[]}}
{"project_id":69,"chunk_id":0,"content":{"main_file_path":"jellyball-master\\app\\src\\main\\java\\mr_immortalz\\com\\jellyball\\LogUtil.java","main_file_content":"package mr_immortalz.com.jellyball; import android.util.Log; public class LogUtil { public static final String defaultTag = \"dota\"; public static final int VERBOSE = 1; public static final int DEBUG = 2; public static final int INFO = 3; public static final int WARN = 4; public static final int ERROR = 5; public static final int NOTHING = 6; public static final int LEVEL = VERBOSE; public static void v(String tag, String msg) { if (LEVEL <= VERBOSE) { Log.v(tag, msg); } } public static void d(String tag, String msg) { if (LEVEL <= DEBUG) { Log.d(tag, msg); } } public static void i(String tag, String msg) { if (LEVEL <= INFO) { Log.i(tag, msg); } } public static void w(String tag, String msg) { if (LEVEL <= WARN) { Log.w(tag, msg); } } public static void e(String tag, String msg) { if (LEVEL <= ERROR) { Log.e(tag, msg); } } public static void v(String msg) { if (LEVEL <= VERBOSE) { Log.v(defaultTag, msg); } } public static void d(String msg) { if (LEVEL <= DEBUG) { Log.d(defaultTag, msg); } } public static void i(String msg) { if (LEVEL <= INFO) { Log.i(defaultTag, msg); } } public static void w(String msg) { if (LEVEL <= WARN) { Log.w(defaultTag, msg); } } public static void e(String msg) { if (LEVEL <= ERROR) { Log.e(defaultTag, msg); } } public static void m(String msg){ String methodName = new Exception().getStackTrace()[1].getMethodName(); Log.v(defaultTag, methodName + \": \" + msg); } public static void m(int msg){ String methodName = new Exception().getStackTrace()[1].getMethodName(); Log.v(defaultTag, methodName + \": \" + msg + \"\"); } public static void m(){ String methodName = new Exception().getStackTrace()[1].getMethodName(); Log.v(defaultTag, methodName); } public static void v(int msg) { LogUtil.v(msg + \"\"); } public static void d(int msg) { LogUtil.d(msg + \"\"); } public static void i(int msg) { LogUtil.i(msg + \"\"); } public static void w(int msg) { LogUtil.w(msg + \"\"); } public static void e(int msg) { LogUtil.e(msg + \"\"); } }","dependencies":[]}}
{"project_id":69,"chunk_id":0,"content":{"main_file_path":"jellyball-master\\app\\src\\main\\java\\mr_immortalz\\com\\jellyball\\MainActivity.java","main_file_content":"package mr_immortalz.com.jellyball; import android.app.Activity; import android.graphics.Color; import android.os.Bundle; import android.view.Gravity; import android.view.View; import android.widget.ImageView; import android.widget.TableLayout; import android.widget.TableRow; import android.widget.TextView; import android.widget.Toast; import mr_immortalz.com.jellyball.custom.JellyBall; import mr_immortalz.com.jellyball.custom.PullScrollView; public class MainActivity extends Activity implements PullScrollView.OnTurnListener { private PullScrollView mScrollView; private ImageView mHeadImg; private TableLayout mMainLayout; private JellyBall jellyBall; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.act_pull_down); initView(); showTable(); } protected void initView() { mScrollView = (PullScrollView) findViewById(R.id.scroll_view); mHeadImg = (ImageView) findViewById(R.id.background_img); mMainLayout = (TableLayout) findViewById(R.id.table_layout); jellyBall = (JellyBall) findViewById(R.id.cirle); mScrollView.setHeader(mHeadImg); mScrollView.setOnTurnListener(this); } public void showTable() { TableRow.LayoutParams layoutParams = new TableRow.LayoutParams( TableRow.LayoutParams.MATCH_PARENT, TableRow.LayoutParams.WRAP_CONTENT); layoutParams.gravity = Gravity.CENTER; layoutParams.leftMargin = 30; layoutParams.bottomMargin = 10; layoutParams.topMargin = 10; for (int i = 0; i < 30; i++) { TableRow tableRow = new TableRow(this); TextView textView = new TextView(this); textView.setText(\"Test pull down scroll view \" + i); textView.setTextSize(20); textView.setPadding(15, 15, 15, 15); tableRow.addView(textView, layoutParams); if (i % 2 != 0) { tableRow.setBackgroundColor(Color.LTGRAY); } else { tableRow.setBackgroundColor(Color.WHITE); } final int n = i; tableRow.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { Toast.makeText(MainActivity.this, \"Click item \" + n, Toast.LENGTH_SHORT).show(); } }); mMainLayout.addView(tableRow); } } @Override public void onPull(float y) { jellyBall.setPullHeight(y); } @Override public void onUp(float y) { jellyBall.setUpHeight(y); } @Override public void onRefresh() { jellyBall.beginStopRefresh(); mScrollView.stopRefresh(); } }","dependencies":[{"file_path":"jellyball-master\\app\\src\\main\\java\\mr_immortalz\\com\\jellyball\\custom\\JellyBall.java","file_content":"package mr_immortalz.com.jellyball.custom; import android.animation.Animator; import android.animation.AnimatorListenerAdapter; import android.animation.ObjectAnimator; import android.content.Context; import android.graphics.Canvas; import android.graphics.Paint; import android.graphics.Path; import android.graphics.PointF; import android.graphics.Rect; import android.util.AttributeSet; import android.view.View; import android.view.animation.AccelerateDecelerateInterpolator; import android.view.animation.Animation; import android.view.animation.Transformation; import mr_immortalz.com.jellyball.R; public class JellyBall extends View { private int mWidth; private int mHeight; private Rect mRect = new Rect(); private float circleStartX; private float circleStartY; private float radius = 24; private float blackMagic = 0.551915024494f; private float c; private float rebounceY; private float rebounceX; private VPoint p1, p3; private HPoint p2, p4; private Path mLinePath; private float lineStartY = 0f; private float lineWidth; private float rebounceInterpolatedTime; private RebounceAnim rebounceAnim; private float pullProgress; private float PULL_MAX; private float MOVE_DISTANCE; private boolean isFirstPull = true; private boolean isFirstUp = true; private boolean moveEnd = false; private boolean isPullOver = false; private float pullOverDistance; private Path mPath; private Paint mCirclePaint; private Paint mLinePaint; private Type mType = Type.NORMAL; public enum Type { NORMAL, PULL, REBOUNCE_DOWN, REBOUNCE_UP, UP, REFRESHING_START, REFRESH_END, } public JellyBall(Context context) { this(context, null); } public JellyBall(Context context, AttributeSet attrs) { this(context, attrs, 0); } public JellyBall(Context context, AttributeSet attrs, int defStyleAttr) { super(context, attrs, defStyleAttr); init(); } private void init() { mCirclePaint = new Paint(); mCirclePaint.setStyle(Paint.Style.FILL); mCirclePaint.setAntiAlias(true); mCirclePaint.setColor(getResources().getColor(R.color.red)); mLinePaint = new Paint(); mLinePaint.setStyle(Paint.Style.FILL); mLinePaint.setAntiAlias(true); mLinePaint.setColor(getResources().getColor(R.color.alph_red)); p1 = new VPoint(); p3 = new VPoint(); p2 = new HPoint(); p4 = new HPoint(); mPath = new Path(); mLinePath = new Path(); PULL_MAX = getResources().getDimension(R.dimen.jellyball_pullmax); MOVE_DISTANCE = getResources().getDimension(R.dimen.jellyball_move_distance); } @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { super.onMeasure(widthMeasureSpec, heightMeasureSpec); mWidth = getMeasuredWidth(); mHeight = getMeasuredHeight(); rebounceY = radius / 2; rebounceX = radius; circleStartX = (mWidth - 2 * radius) / 2; circleStartY = rebounceY; c = radius * blackMagic; lineStartY = circleStartY; } public void setPullHeight(final float y) { if (y <= PULL_MAX) { pullProgress = y / PULL_MAX; setType(Type.PULL); } else if ((y - PULL_MAX) >= 0) { if (isFirstPull) { isFirstPull = false; isFirstUp = true; ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(this, \"translationY\", MOVE_DISTANCE); objectAnimator.setDuration(10); objectAnimator.setInterpolator(new AccelerateDecelerateInterpolator()); objectAnimator.addListener(new AnimatorListenerAdapter() { @Override public void onAnimationEnd(Animator animation) { setType(Type.REBOUNCE_DOWN); if (mRect.isEmpty()) { mRect.set(getLeft(), getTop(), getRight(), getBottom()); } moveEnd = true; } }); objectAnimator.start(); } else { if (moveEnd) { isPullOver = true; layout(mRect.left, (int) (mRect.top + (y - PULL_MAX) * 2), mRect.right, (int) (mRect.bottom + (y - PULL_MAX) * 2)); pullOverDistance = (y - PULL_MAX) * 2; } } } } public void setUpHeight(float y) { if (mType == Type.PULL) { pullProgress = y / PULL_MAX; invalidate(); if (y == 0) { setType(JellyBall.Type.NORMAL); } } else if (mType == Type.REFRESHING_START) { setType(Type.UP); if (isFirstUp) { isFirstUp = false; isFirstPull = true; ObjectAnimator objectAnimator; if (isPullOver) { objectAnimator = ObjectAnimator.ofFloat(this, \"translationY\", -pullOverDistance); } else { objectAnimator = ObjectAnimator.ofFloat(this, \"translationY\", 0); } objectAnimator.setDuration(150); objectAnimator.setInterpolator(new AccelerateDecelerateInterpolator()); objectAnimator.addListener(new AnimatorListenerAdapter() { @Override public void onAnimationEnd(Animator animation) { setType(Type.REBOUNCE_UP); } }); objectAnimator.start(); } } } private void circleModel0() { p1.setY(radius); p3.setY(-radius); p1.x = p3.x = 0; p1.left.x = p3.left.x = -c; p1.right.x = p3.right.x = c; p2.setX(radius); p4.setX(-radius); p2.y = p4.y = 0; p2.top.y = p4.top.y = -c; p2.bottom.y = p4.bottom.y = c; } private void lineModel0() { lineStartY = circleStartY - 1; lineWidth = getResources().getDimension(R.dimen.jellyball_line_width); } private void lineModel1(float progress) { lineModel0(); lineWidth = lineWidth * (1.0f - progress + 0.3f) * 0.8f; } private void circleModel1(float progress) { circleModel0(); p1.setY(p1.y + radius * 1.5f * progress); lineStartY += radius * 1.5f * progress; } private void circleModel2(float progress) { circleModel1(0.8f); p2.adjustAllX(-radius * (progress - 0.8f) * 0.4f); p4.adjustAllX(radius * (progress - 0.8f) * 0.4f); p1.setY(p1.y + radius * 3f * (progress - 0.8f)); lineStartY += radius * 3f * (progress - 0.8f); } @Override protected void onDraw(Canvas canvas) { mPath.reset(); mLinePath.reset(); canvas.translate(circleStartX + radius, circleStartY + radius); switch (mType){ case NORMAL: circleModel0(); lineModel0(); break; case PULL: if (pullProgress >= 0 && pullProgress <= 0.8f) { circleModel1(pullProgress); } else if (pullProgress > 0.8f && pullProgress <= 1.0f) { circleModel2(pullProgress); } lineModel1(pullProgress); break; case REBOUNCE_DOWN: rebounceAction(); break; case REFRESHING_START: circleModel0(); break; case UP: circleModel0(); break; case REBOUNCE_UP: rebounceAction(); break; case REFRESH_END: setType(Type.NORMAL); break; default: break; } mPath.moveTo(p1.x, p1.y); mPath.cubicTo(p1.right.x, p1.right.y, p2.bottom.x, p2.bottom.y, p2.x, p2.y); mPath.cubicTo(p2.top.x, p2.top.y, p3.right.x, p3.right.y, p3.x, p3.y); mPath.cubicTo(p3.left.x, p3.left.y, p4.top.x, p4.top.y, p4.x, p4.y); mPath.cubicTo(p4.bottom.x, p4.bottom.y, p1.left.x, p1.left.y, p1.x, p1.y); canvas.drawPath(mPath, mCirclePaint); canvas.save(); mLinePath.moveTo(-lineWidth / 2, lineStartY); mLinePath.lineTo(lineWidth / 2, lineStartY); mLinePath.lineTo(getResources().getDimension(R.dimen.jellyball_line_width) / 2, mHeight); mLinePath.lineTo(-getResources().getDimension(R.dimen.jellyball_line_width) / 2, mHeight); mLinePath.close(); canvas.drawPath(mLinePath, mLinePaint); canvas.restore(); } private void rebounceAction() { circleModel0(); lineModel0(); p2.adjustAllX(getRebounceHorizontalX(rebounceInterpolatedTime)); p4.adjustAllX(-getRebounceHorizontalX(rebounceInterpolatedTime)); p2.adjustAllBottomY(getRebounceHorizontalBottomY(rebounceInterpolatedTime)); p4.adjustAllBottomY(getRebounceHorizontalBottomY(rebounceInterpolatedTime)); p3.adjustAllY(getRebounceVerticalPointY(rebounceInterpolatedTime)); p1.adjustBottomX(getRebounceVerticalPointY(rebounceInterpolatedTime)); } private class VPoint { private float x; private float y; private PointF left; private PointF right; public VPoint() { left = new PointF(); right = new PointF(); } public void setY(float y) { this.y = y; left.y = right.y = y; } public void adjustAllY(float offset) { this.y += offset; this.left.y += offset; this.right.y += offset; } public void adjustBottomX(float offset) { this.left.x -= offset; this.right.x += offset; } } private class HPoint { private float x; private float y; private PointF top; private PointF bottom; public HPoint() { top = new PointF(); bottom = new PointF(); } public void setX(float x) { this.x = x; top.x = bottom.x = x; } public void adjustAllX(float offset) { this.x += offset; this.top.x += offset; this.bottom.x += offset; } public void adjustAllBottomY(float offset) { this.y += offset; this.bottom.y += offset; this.top.y += offset; } public void adjustAllY(float offset) { this.y += offset; this.top.y += offset; this.bottom.y += offset; } } private void setType(Type type) { this.mType = type; switch (type) { case REBOUNCE_DOWN: startRebounceAnim(Type.REFRESHING_START); break; case REBOUNCE_UP: startRebounceAnim(Type.REFRESH_END); break; default: break; } invalidate(); } private class RebounceAnim extends Animation { @Override protected void applyTransformation(float interpolatedTime, Transformation t) { super.applyTransformation(interpolatedTime, t); rebounceInterpolatedTime = interpolatedTime; invalidate(); } } private void startRebounceAnim(final Type type) { rebounceAnim = new RebounceAnim(); rebounceAnim.setDuration(500); rebounceAnim.setAnimationListener(new Animation.AnimationListener() { @Override public void onAnimationStart(Animation animation) { } @Override public void onAnimationEnd(Animation animation) { setType(type); } @Override public void onAnimationRepeat(Animation animation) { } }); startAnimation(rebounceAnim); } public void beginStopRefresh() { stopRebounceAnim(); setType(Type.REFRESHING_START); } private void stopRebounceAnim() { if (rebounceAnim != null) { clearAnimation(); } } private float getRebounceHorizontalX(float x) { return (float) ((1 - Math.exp(-2 * (x + 0.052)) * Math.cos(20 * (x + 0.052))) - 1) * rebounceX / 3 * 2; } private float getRebounceHorizontalBottomY(float y) { return (float) ((1 - Math.exp(-2 * (y + 0.052)) * Math.cos(20 * (y + 0.052))) - 1) * rebounceY / 2; } private float getRebounceVerticalPointY(float y) { return (float) ((1 - Math.exp(-2 * (y + 0.052)) * Math.cos(20 * (y + 0.052))) - 1) * rebounceY; } }"},{"file_path":"jellyball-master\\app\\src\\main\\java\\mr_immortalz\\com\\jellyball\\custom\\PullScrollView.java","file_content":"package mr_immortalz.com.jellyball.custom; import android.content.Context; import android.content.res.TypedArray; import android.graphics.Rect; import android.util.AttributeSet; import android.view.MotionEvent; import android.view.View; import android.view.ViewConfiguration; import android.view.animation.Animation; import android.view.animation.AnimationSet; import android.view.animation.Transformation; import android.view.animation.TranslateAnimation; import android.widget.ScrollView; import mr_immortalz.com.jellyball.LogUtil; import mr_immortalz.com.jellyball.R; public class PullScrollView extends ScrollView { private static final float SCROLL_RATIO = 0.36f; private static final int TURN_DISTANCE = 100; private View mHeader; private int mHeaderHeight; private int mHeaderVisibleHeight; private View mContentView; private Rect mContentRect = new Rect(); private float mTouchDownY; private boolean mEnableTouch = false; private boolean isMoving = false; private boolean isTop = false; private int mInitTop, mInitBottom; private int mCurrentTop, mCurrentBottom; private OnTurnListener mOnTurnListener; public enum State { UP, DOWN, NORMAL, REFRESH } private float interpolatedTime; private float lastMoveHeaderHeight; private float pullHeaderHeight; private int mScaledTouchSlop; private State mState = State.NORMAL; public PullScrollView(Context context) { super(context); init(context, null); } public PullScrollView(Context context, AttributeSet attrs) { super(context, attrs); init(context, attrs); } public PullScrollView(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); init(context, attrs); } private void init(Context context, AttributeSet attrs) { setOverScrollMode(OVER_SCROLL_NEVER); if (null != attrs) { TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.PullScrollView); if (ta != null) { mHeaderHeight = (int) ta.getDimension(R.styleable.PullScrollView_headerHeight, -1); mHeaderVisibleHeight = (int) ta.getDimension(R.styleable .PullScrollView_headerVisibleHeight, -1); ta.recycle(); } } mScaledTouchSlop = ViewConfiguration.get(getContext()) .getScaledTouchSlop(); } public void setHeader(View view) { mHeader = view; } public void setOnTurnListener(OnTurnListener turnListener) { mOnTurnListener = turnListener; } @Override protected void onFinishInflate() { if (getChildCount() > 0) { mContentView = getChildAt(0); LogUtil.m(\"mContentView \" + mContentView.getClass().getSimpleName()); } super.onFinishInflate(); } @Override protected void onScrollChanged(int l, int t, int oldl, int oldt) { super.onScrollChanged(l, t, oldl, oldt); if (getScrollY() == 0) { isTop = true; } } @Override public boolean onInterceptTouchEvent(MotionEvent ev) { if (ev.getAction() == MotionEvent.ACTION_DOWN) { mTouchDownY = ev.getY(); mCurrentTop = mInitTop = mHeader.getTop(); mCurrentBottom = mInitBottom = mHeader.getBottom(); } return super.onInterceptTouchEvent(ev); } @Override public boolean onTouchEvent(MotionEvent ev) { if (mContentView != null) { doTouchEvent(ev); } return mEnableTouch || super.onTouchEvent(ev); } private void doTouchEvent(MotionEvent event) { int action = event.getAction(); switch (action) { case MotionEvent.ACTION_MOVE: doActionMove(event); break; case MotionEvent.ACTION_UP: LogUtil.m(\"mstate \" + mState); if (mState == State.REFRESH) { if (mOnTurnListener != null) { mOnTurnListener.onRefresh(); } } else { if (isNeedAnimation()) { rollBackAnimation(); } if (getScrollY() == 0) { mState = State.NORMAL; } isMoving = false; mEnableTouch = false; } break; default: break; } } public void stopRefresh() { if (isNeedAnimation()) { rollBackAnimation(); } if (getScrollY() == 0) { mState = State.NORMAL; } } private void doActionMove(MotionEvent event) { if (getScrollY() == 0) { mState = State.NORMAL; if (isTop) { isTop = false; mTouchDownY = event.getY(); } } float deltaY = event.getY() - mTouchDownY; if (deltaY * 0.5f * SCROLL_RATIO > getResources().getDimension(R.dimen.jellyball_pullmax)) { mState = State.REFRESH; } if (deltaY < 0 && mState == State.NORMAL) { mState = State.UP; } else if (deltaY > 0 && mState == State.NORMAL) { mState = State.DOWN; } if (mState == State.UP) { deltaY = deltaY < 0 ? deltaY : 0; isMoving = false; mEnableTouch = false; } else if (mState == State.DOWN) { if (getScrollY() <= deltaY) { mEnableTouch = true; isMoving = true; } deltaY = deltaY < 0 ? 0 : deltaY; } if (deltaY >= mScaledTouchSlop) { isMoving = true; } else { isMoving = false; } if (isMoving) { if (mContentRect.isEmpty()) { mContentRect.set(mContentView.getLeft(), mContentView.getTop(), mContentView.getRight(), mContentView.getBottom()); } float headerMoveHeight = deltaY * 0.5f * SCROLL_RATIO; lastMoveHeaderHeight = headerMoveHeight; pullHeaderHeight = lastMoveHeaderHeight; if (mOnTurnListener != null) { mOnTurnListener.onPull(pullHeaderHeight); } mCurrentTop = (int) (mInitTop + headerMoveHeight); mCurrentBottom = (int) (mInitBottom + headerMoveHeight); float contentMoveHeight = deltaY * SCROLL_RATIO; int headerBottom = mCurrentBottom - mHeaderVisibleHeight; int top = (int) (mContentRect.top + contentMoveHeight); int bottom = (int) (mContentRect.bottom + contentMoveHeight); if (top <= headerBottom) { mContentView.layout(mContentRect.left, top, mContentRect.right, bottom); mHeader.layout(mHeader.getLeft(), mCurrentTop, mHeader.getRight(), mCurrentBottom); } } } private class MoveAnim extends Animation { @Override protected void applyTransformation(float interpolatedTime2, Transformation t) { super.applyTransformation(interpolatedTime2, t); interpolatedTime = interpolatedTime2; pullHeaderHeight = lastMoveHeaderHeight * (1 - interpolatedTime); if (mOnTurnListener != null) { mOnTurnListener.onUp(pullHeaderHeight); } } } private void rollBackAnimation() { AnimationSet set = new AnimationSet(true); MoveAnim moveAnim = new MoveAnim(); TranslateAnimation tranAnim = new TranslateAnimation(0, 0, Math.abs(mInitTop - mCurrentTop), 0); set.addAnimation(moveAnim); set.addAnimation(tranAnim); set.setDuration(200); mHeader.startAnimation(set); mHeader.layout(mHeader.getLeft(), mInitTop, mHeader.getRight(), mInitBottom); TranslateAnimation innerAnim = new TranslateAnimation(0, 0, mContentView.getTop(), mContentRect.top); innerAnim.setDuration(200); mContentView.startAnimation(innerAnim); mContentView.layout(mContentRect.left, mContentRect.top, mContentRect.right, mContentRect.bottom); mContentRect.setEmpty(); } private boolean isNeedAnimation() { return !mContentRect.isEmpty() && isMoving; } public interface OnTurnListener { public void onPull(float y); public void onUp(float y); public void onRefresh(); } }"}]}}
{"project_id":69,"chunk_id":0,"content":{"main_file_path":"jellyball-master\\app\\src\\main\\java\\mr_immortalz\\com\\jellyball\\custom\\JellyBall.java","main_file_content":"package mr_immortalz.com.jellyball.custom; import android.animation.Animator; import android.animation.AnimatorListenerAdapter; import android.animation.ObjectAnimator; import android.content.Context; import android.graphics.Canvas; import android.graphics.Paint; import android.graphics.Path; import android.graphics.PointF; import android.graphics.Rect; import android.util.AttributeSet; import android.view.View; import android.view.animation.AccelerateDecelerateInterpolator; import android.view.animation.Animation; import android.view.animation.Transformation; import mr_immortalz.com.jellyball.R; public class JellyBall extends View { private int mWidth; private int mHeight; private Rect mRect = new Rect(); private float circleStartX; private float circleStartY; private float radius = 24; private float blackMagic = 0.551915024494f; private float c; private float rebounceY; private float rebounceX; private VPoint p1, p3; private HPoint p2, p4; private Path mLinePath; private float lineStartY = 0f; private float lineWidth; private float rebounceInterpolatedTime; private RebounceAnim rebounceAnim; private float pullProgress; private float PULL_MAX; private float MOVE_DISTANCE; private boolean isFirstPull = true; private boolean isFirstUp = true; private boolean moveEnd = false; private boolean isPullOver = false; private float pullOverDistance; private Path mPath; private Paint mCirclePaint; private Paint mLinePaint; private Type mType = Type.NORMAL; public enum Type { NORMAL, PULL, REBOUNCE_DOWN, REBOUNCE_UP, UP, REFRESHING_START, REFRESH_END, } public JellyBall(Context context) { this(context, null); } public JellyBall(Context context, AttributeSet attrs) { this(context, attrs, 0); } public JellyBall(Context context, AttributeSet attrs, int defStyleAttr) { super(context, attrs, defStyleAttr); init(); } private void init() { mCirclePaint = new Paint(); mCirclePaint.setStyle(Paint.Style.FILL); mCirclePaint.setAntiAlias(true); mCirclePaint.setColor(getResources().getColor(R.color.red)); mLinePaint = new Paint(); mLinePaint.setStyle(Paint.Style.FILL); mLinePaint.setAntiAlias(true); mLinePaint.setColor(getResources().getColor(R.color.alph_red)); p1 = new VPoint(); p3 = new VPoint(); p2 = new HPoint(); p4 = new HPoint(); mPath = new Path(); mLinePath = new Path(); PULL_MAX = getResources().getDimension(R.dimen.jellyball_pullmax); MOVE_DISTANCE = getResources().getDimension(R.dimen.jellyball_move_distance); } @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { super.onMeasure(widthMeasureSpec, heightMeasureSpec); mWidth = getMeasuredWidth(); mHeight = getMeasuredHeight(); rebounceY = radius / 2; rebounceX = radius; circleStartX = (mWidth - 2 * radius) / 2; circleStartY = rebounceY; c = radius * blackMagic; lineStartY = circleStartY; } public void setPullHeight(final float y) { if (y <= PULL_MAX) { pullProgress = y / PULL_MAX; setType(Type.PULL); } else if ((y - PULL_MAX) >= 0) { if (isFirstPull) { isFirstPull = false; isFirstUp = true; ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(this, \"translationY\", MOVE_DISTANCE); objectAnimator.setDuration(10); objectAnimator.setInterpolator(new AccelerateDecelerateInterpolator()); objectAnimator.addListener(new AnimatorListenerAdapter() { @Override public void onAnimationEnd(Animator animation) { setType(Type.REBOUNCE_DOWN); if (mRect.isEmpty()) { mRect.set(getLeft(), getTop(), getRight(), getBottom()); } moveEnd = true; } }); objectAnimator.start(); } else { if (moveEnd) { isPullOver = true; layout(mRect.left, (int) (mRect.top + (y - PULL_MAX) * 2), mRect.right, (int) (mRect.bottom + (y - PULL_MAX) * 2)); pullOverDistance = (y - PULL_MAX) * 2; } } } } public void setUpHeight(float y) { if (mType == Type.PULL) { pullProgress = y / PULL_MAX; invalidate(); if (y == 0) { setType(JellyBall.Type.NORMAL); } } else if (mType == Type.REFRESHING_START) { setType(Type.UP); if (isFirstUp) { isFirstUp = false; isFirstPull = true; ObjectAnimator objectAnimator; if (isPullOver) { objectAnimator = ObjectAnimator.ofFloat(this, \"translationY\", -pullOverDistance); } else { objectAnimator = ObjectAnimator.ofFloat(this, \"translationY\", 0); } objectAnimator.setDuration(150); objectAnimator.setInterpolator(new AccelerateDecelerateInterpolator()); objectAnimator.addListener(new AnimatorListenerAdapter() { @Override public void onAnimationEnd(Animator animation) { setType(Type.REBOUNCE_UP); } }); objectAnimator.start(); } } } private void circleModel0() { p1.setY(radius); p3.setY(-radius); p1.x = p3.x = 0; p1.left.x = p3.left.x = -c; p1.right.x = p3.right.x = c; p2.setX(radius); p4.setX(-radius); p2.y = p4.y = 0; p2.top.y = p4.top.y = -c; p2.bottom.y = p4.bottom.y = c; } private void lineModel0() { lineStartY = circleStartY - 1; lineWidth = getResources().getDimension(R.dimen.jellyball_line_width); } private void lineModel1(float progress) { lineModel0(); lineWidth = lineWidth * (1.0f - progress + 0.3f) * 0.8f; } private void circleModel1(float progress) { circleModel0(); p1.setY(p1.y + radius * 1.5f * progress); lineStartY += radius * 1.5f * progress; } private void circleModel2(float progress) { circleModel1(0.8f); p2.adjustAllX(-radius * (progress - 0.8f) * 0.4f); p4.adjustAllX(radius * (progress - 0.8f) * 0.4f); p1.setY(p1.y + radius * 3f * (progress - 0.8f)); lineStartY += radius * 3f * (progress - 0.8f); } @Override protected void onDraw(Canvas canvas) { mPath.reset(); mLinePath.reset(); canvas.translate(circleStartX + radius, circleStartY + radius); switch (mType){ case NORMAL: circleModel0(); lineModel0(); break; case PULL: if (pullProgress >= 0 && pullProgress <= 0.8f) { circleModel1(pullProgress); } else if (pullProgress > 0.8f && pullProgress <= 1.0f) { circleModel2(pullProgress); } lineModel1(pullProgress); break; case REBOUNCE_DOWN: rebounceAction(); break; case REFRESHING_START: circleModel0(); break; case UP: circleModel0(); break; case REBOUNCE_UP: rebounceAction(); break; case REFRESH_END: setType(Type.NORMAL); break; default: break; } mPath.moveTo(p1.x, p1.y); mPath.cubicTo(p1.right.x, p1.right.y, p2.bottom.x, p2.bottom.y, p2.x, p2.y); mPath.cubicTo(p2.top.x, p2.top.y, p3.right.x, p3.right.y, p3.x, p3.y); mPath.cubicTo(p3.left.x, p3.left.y, p4.top.x, p4.top.y, p4.x, p4.y); mPath.cubicTo(p4.bottom.x, p4.bottom.y, p1.left.x, p1.left.y, p1.x, p1.y); canvas.drawPath(mPath, mCirclePaint); canvas.save(); mLinePath.moveTo(-lineWidth / 2, lineStartY); mLinePath.lineTo(lineWidth / 2, lineStartY); mLinePath.lineTo(getResources().getDimension(R.dimen.jellyball_line_width) / 2, mHeight); mLinePath.lineTo(-getResources().getDimension(R.dimen.jellyball_line_width) / 2, mHeight); mLinePath.close(); canvas.drawPath(mLinePath, mLinePaint); canvas.restore(); } private void rebounceAction() { circleModel0(); lineModel0(); p2.adjustAllX(getRebounceHorizontalX(rebounceInterpolatedTime)); p4.adjustAllX(-getRebounceHorizontalX(rebounceInterpolatedTime)); p2.adjustAllBottomY(getRebounceHorizontalBottomY(rebounceInterpolatedTime)); p4.adjustAllBottomY(getRebounceHorizontalBottomY(rebounceInterpolatedTime)); p3.adjustAllY(getRebounceVerticalPointY(rebounceInterpolatedTime)); p1.adjustBottomX(getRebounceVerticalPointY(rebounceInterpolatedTime)); } private class VPoint { private float x; private float y; private PointF left; private PointF right; public VPoint() { left = new PointF(); right = new PointF(); } public void setY(float y) { this.y = y; left.y = right.y = y; } public void adjustAllY(float offset) { this.y += offset; this.left.y += offset; this.right.y += offset; } public void adjustBottomX(float offset) { this.left.x -= offset; this.right.x += offset; } } private class HPoint { private float x; private float y; private PointF top; private PointF bottom; public HPoint() { top = new PointF(); bottom = new PointF(); } public void setX(float x) { this.x = x; top.x = bottom.x = x; } public void adjustAllX(float offset) { this.x += offset; this.top.x += offset; this.bottom.x += offset; } public void adjustAllBottomY(float offset) { this.y += offset; this.bottom.y += offset; this.top.y += offset; } public void adjustAllY(float offset) { this.y += offset; this.top.y += offset; this.bottom.y += offset; } } private void setType(Type type) { this.mType = type; switch (type) { case REBOUNCE_DOWN: startRebounceAnim(Type.REFRESHING_START); break; case REBOUNCE_UP: startRebounceAnim(Type.REFRESH_END); break; default: break; } invalidate(); } private class RebounceAnim extends Animation { @Override protected void applyTransformation(float interpolatedTime, Transformation t) { super.applyTransformation(interpolatedTime, t); rebounceInterpolatedTime = interpolatedTime; invalidate(); } } private void startRebounceAnim(final Type type) { rebounceAnim = new RebounceAnim(); rebounceAnim.setDuration(500); rebounceAnim.setAnimationListener(new Animation.AnimationListener() { @Override public void onAnimationStart(Animation animation) { } @Override public void onAnimationEnd(Animation animation) { setType(type); } @Override public void onAnimationRepeat(Animation animation) { } }); startAnimation(rebounceAnim); } public void beginStopRefresh() { stopRebounceAnim(); setType(Type.REFRESHING_START); } private void stopRebounceAnim() { if (rebounceAnim != null) { clearAnimation(); } } private float getRebounceHorizontalX(float x) { return (float) ((1 - Math.exp(-2 * (x + 0.052)) * Math.cos(20 * (x + 0.052))) - 1) * rebounceX / 3 * 2; } private float getRebounceHorizontalBottomY(float y) { return (float) ((1 - Math.exp(-2 * (y + 0.052)) * Math.cos(20 * (y + 0.052))) - 1) * rebounceY / 2; } private float getRebounceVerticalPointY(float y) { return (float) ((1 - Math.exp(-2 * (y + 0.052)) * Math.cos(20 * (y + 0.052))) - 1) * rebounceY; } }","dependencies":[]}}
{"project_id":69,"chunk_id":0,"content":{"main_file_path":"jellyball-master\\app\\src\\main\\java\\mr_immortalz\\com\\jellyball\\custom\\PullScrollView.java","main_file_content":"package mr_immortalz.com.jellyball.custom; import android.content.Context; import android.content.res.TypedArray; import android.graphics.Rect; import android.util.AttributeSet; import android.view.MotionEvent; import android.view.View; import android.view.ViewConfiguration; import android.view.animation.Animation; import android.view.animation.AnimationSet; import android.view.animation.Transformation; import android.view.animation.TranslateAnimation; import android.widget.ScrollView; import mr_immortalz.com.jellyball.LogUtil; import mr_immortalz.com.jellyball.R; public class PullScrollView extends ScrollView { private static final float SCROLL_RATIO = 0.36f; private static final int TURN_DISTANCE = 100; private View mHeader; private int mHeaderHeight; private int mHeaderVisibleHeight; private View mContentView; private Rect mContentRect = new Rect(); private float mTouchDownY; private boolean mEnableTouch = false; private boolean isMoving = false; private boolean isTop = false; private int mInitTop, mInitBottom; private int mCurrentTop, mCurrentBottom; private OnTurnListener mOnTurnListener; public enum State { UP, DOWN, NORMAL, REFRESH } private float interpolatedTime; private float lastMoveHeaderHeight; private float pullHeaderHeight; private int mScaledTouchSlop; private State mState = State.NORMAL; public PullScrollView(Context context) { super(context); init(context, null); } public PullScrollView(Context context, AttributeSet attrs) { super(context, attrs); init(context, attrs); } public PullScrollView(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); init(context, attrs); } private void init(Context context, AttributeSet attrs) { setOverScrollMode(OVER_SCROLL_NEVER); if (null != attrs) { TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.PullScrollView); if (ta != null) { mHeaderHeight = (int) ta.getDimension(R.styleable.PullScrollView_headerHeight, -1); mHeaderVisibleHeight = (int) ta.getDimension(R.styleable .PullScrollView_headerVisibleHeight, -1); ta.recycle(); } } mScaledTouchSlop = ViewConfiguration.get(getContext()) .getScaledTouchSlop(); } public void setHeader(View view) { mHeader = view; } public void setOnTurnListener(OnTurnListener turnListener) { mOnTurnListener = turnListener; } @Override protected void onFinishInflate() { if (getChildCount() > 0) { mContentView = getChildAt(0); LogUtil.m(\"mContentView \" + mContentView.getClass().getSimpleName()); } super.onFinishInflate(); } @Override protected void onScrollChanged(int l, int t, int oldl, int oldt) { super.onScrollChanged(l, t, oldl, oldt); if (getScrollY() == 0) { isTop = true; } } @Override public boolean onInterceptTouchEvent(MotionEvent ev) { if (ev.getAction() == MotionEvent.ACTION_DOWN) { mTouchDownY = ev.getY(); mCurrentTop = mInitTop = mHeader.getTop(); mCurrentBottom = mInitBottom = mHeader.getBottom(); } return super.onInterceptTouchEvent(ev); } @Override public boolean onTouchEvent(MotionEvent ev) { if (mContentView != null) { doTouchEvent(ev); } return mEnableTouch || super.onTouchEvent(ev); } private void doTouchEvent(MotionEvent event) { int action = event.getAction(); switch (action) { case MotionEvent.ACTION_MOVE: doActionMove(event); break; case MotionEvent.ACTION_UP: LogUtil.m(\"mstate \" + mState); if (mState == State.REFRESH) { if (mOnTurnListener != null) { mOnTurnListener.onRefresh(); } } else { if (isNeedAnimation()) { rollBackAnimation(); } if (getScrollY() == 0) { mState = State.NORMAL; } isMoving = false; mEnableTouch = false; } break; default: break; } } public void stopRefresh() { if (isNeedAnimation()) { rollBackAnimation(); } if (getScrollY() == 0) { mState = State.NORMAL; } } private void doActionMove(MotionEvent event) { if (getScrollY() == 0) { mState = State.NORMAL; if (isTop) { isTop = false; mTouchDownY = event.getY(); } } float deltaY = event.getY() - mTouchDownY; if (deltaY * 0.5f * SCROLL_RATIO > getResources().getDimension(R.dimen.jellyball_pullmax)) { mState = State.REFRESH; } if (deltaY < 0 && mState == State.NORMAL) { mState = State.UP; } else if (deltaY > 0 && mState == State.NORMAL) { mState = State.DOWN; } if (mState == State.UP) { deltaY = deltaY < 0 ? deltaY : 0; isMoving = false; mEnableTouch = false; } else if (mState == State.DOWN) { if (getScrollY() <= deltaY) { mEnableTouch = true; isMoving = true; } deltaY = deltaY < 0 ? 0 : deltaY; } if (deltaY >= mScaledTouchSlop) { isMoving = true; } else { isMoving = false; } if (isMoving) { if (mContentRect.isEmpty()) { mContentRect.set(mContentView.getLeft(), mContentView.getTop(), mContentView.getRight(), mContentView.getBottom()); } float headerMoveHeight = deltaY * 0.5f * SCROLL_RATIO; lastMoveHeaderHeight = headerMoveHeight; pullHeaderHeight = lastMoveHeaderHeight; if (mOnTurnListener != null) { mOnTurnListener.onPull(pullHeaderHeight); } mCurrentTop = (int) (mInitTop + headerMoveHeight); mCurrentBottom = (int) (mInitBottom + headerMoveHeight); float contentMoveHeight = deltaY * SCROLL_RATIO; int headerBottom = mCurrentBottom - mHeaderVisibleHeight; int top = (int) (mContentRect.top + contentMoveHeight); int bottom = (int) (mContentRect.bottom + contentMoveHeight); if (top <= headerBottom) { mContentView.layout(mContentRect.left, top, mContentRect.right, bottom); mHeader.layout(mHeader.getLeft(), mCurrentTop, mHeader.getRight(), mCurrentBottom); } } } private class MoveAnim extends Animation { @Override protected void applyTransformation(float interpolatedTime2, Transformation t) { super.applyTransformation(interpolatedTime2, t); interpolatedTime = interpolatedTime2; pullHeaderHeight = lastMoveHeaderHeight * (1 - interpolatedTime); if (mOnTurnListener != null) { mOnTurnListener.onUp(pullHeaderHeight); } } } private void rollBackAnimation() { AnimationSet set = new AnimationSet(true); MoveAnim moveAnim = new MoveAnim(); TranslateAnimation tranAnim = new TranslateAnimation(0, 0, Math.abs(mInitTop - mCurrentTop), 0); set.addAnimation(moveAnim); set.addAnimation(tranAnim); set.setDuration(200); mHeader.startAnimation(set); mHeader.layout(mHeader.getLeft(), mInitTop, mHeader.getRight(), mInitBottom); TranslateAnimation innerAnim = new TranslateAnimation(0, 0, mContentView.getTop(), mContentRect.top); innerAnim.setDuration(200); mContentView.startAnimation(innerAnim); mContentView.layout(mContentRect.left, mContentRect.top, mContentRect.right, mContentRect.bottom); mContentRect.setEmpty(); } private boolean isNeedAnimation() { return !mContentRect.isEmpty() && isMoving; } public interface OnTurnListener { public void onPull(float y); public void onUp(float y); public void onRefresh(); } }","dependencies":[{"file_path":"jellyball-master\\app\\src\\main\\java\\mr_immortalz\\com\\jellyball\\LogUtil.java","file_content":"package mr_immortalz.com.jellyball; import android.util.Log; public class LogUtil { public static final String defaultTag = \"dota\"; public static final int VERBOSE = 1; public static final int DEBUG = 2; public static final int INFO = 3; public static final int WARN = 4; public static final int ERROR = 5; public static final int NOTHING = 6; public static final int LEVEL = VERBOSE; public static void v(String tag, String msg) { if (LEVEL <= VERBOSE) { Log.v(tag, msg); } } public static void d(String tag, String msg) { if (LEVEL <= DEBUG) { Log.d(tag, msg); } } public static void i(String tag, String msg) { if (LEVEL <= INFO) { Log.i(tag, msg); } } public static void w(String tag, String msg) { if (LEVEL <= WARN) { Log.w(tag, msg); } } public static void e(String tag, String msg) { if (LEVEL <= ERROR) { Log.e(tag, msg); } } public static void v(String msg) { if (LEVEL <= VERBOSE) { Log.v(defaultTag, msg); } } public static void d(String msg) { if (LEVEL <= DEBUG) { Log.d(defaultTag, msg); } } public static void i(String msg) { if (LEVEL <= INFO) { Log.i(defaultTag, msg); } } public static void w(String msg) { if (LEVEL <= WARN) { Log.w(defaultTag, msg); } } public static void e(String msg) { if (LEVEL <= ERROR) { Log.e(defaultTag, msg); } } public static void m(String msg){ String methodName = new Exception().getStackTrace()[1].getMethodName(); Log.v(defaultTag, methodName + \": \" + msg); } public static void m(int msg){ String methodName = new Exception().getStackTrace()[1].getMethodName(); Log.v(defaultTag, methodName + \": \" + msg + \"\"); } public static void m(){ String methodName = new Exception().getStackTrace()[1].getMethodName(); Log.v(defaultTag, methodName); } public static void v(int msg) { LogUtil.v(msg + \"\"); } public static void d(int msg) { LogUtil.d(msg + \"\"); } public static void i(int msg) { LogUtil.i(msg + \"\"); } public static void w(int msg) { LogUtil.w(msg + \"\"); } public static void e(int msg) { LogUtil.e(msg + \"\"); } }"}]}}
{"project_id":69,"chunk_id":0,"content":{"main_file_path":"jellyball-master\\app\\src\\test\\java\\mr_immortalz\\com\\jellyball\\ExampleUnitTest.java","main_file_content":"package mr_immortalz.com.jellyball; import org.junit.Test; import static org.junit.Assert.*; public class ExampleUnitTest { @Test public void addition_isCorrect() throws Exception { assertEquals(4, 2 + 2); } }","dependencies":[]}}
{"project_id":73,"chunk_id":0,"content":{"main_file_path":"lan-chat-app-master\\src\\chatapplication\\ChatApp.java","main_file_content":"package chatapplication; import java.awt.Color; public class ChatApp extends javax.swing.JFrame { static String name; public ChatApp() { this.setTitle(\"ChatApp\"); this.setUndecorated(true); initComponents(); this.setLocationRelativeTo(null); } @SuppressWarnings(\"unchecked\") private void initComponents() { jButton2 = new javax.swing.JButton(); jButton3 = new javax.swing.JButton(); setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE); setBackground(new java.awt.Color(255, 255, 153)); setFont(new java.awt.Font(\"Cambria Math\", 3, 10)); setForeground(new java.awt.Color(255, 0, 0)); jButton2.setFont(new java.awt.Font(\"Gabriola\", 1, 24)); jButton2.setText(\"Login to Chat Room\"); jButton2.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jButton2ActionPerformed(evt); } }); jButton3.setFont(new java.awt.Font(\"Gabriola\", 1, 24)); jButton3.setText(\"Exit\"); jButton3.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jButton3ActionPerformed(evt); } }); javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane()); getContentPane().setLayout(layout); layout.setHorizontalGroup( layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(layout.createSequentialGroup() .addContainerGap(382, Short.MAX_VALUE) .addComponent(jButton3) .addContainerGap(95, Short.MAX_VALUE)) .addGroup(layout.createSequentialGroup() .addGap(161, 161, 161) .addComponent(jButton2) .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)) ); layout.setVerticalGroup( layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(layout.createSequentialGroup() .addContainerGap(172, Short.MAX_VALUE) .addComponent(jButton2) .addGap(121, 121, 121) .addComponent(jButton3) .addGap(37, 37, 37)) ); pack(); } private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) { this.setVisible(false); new MultiClient(); } private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) { this.setVisible(false); System.exit(1); } public static void main(String args[]) { try { for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) { if (\"Nimbus\".equals(info.getName())) { javax.swing.UIManager.setLookAndFeel(info.getClassName()); break; } } } catch (ClassNotFoundException ex) { java.util.logging.Logger.getLogger(ChatApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } catch (InstantiationException ex) { java.util.logging.Logger.getLogger(ChatApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } catch (IllegalAccessException ex) { java.util.logging.Logger.getLogger(ChatApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } catch (javax.swing.UnsupportedLookAndFeelException ex) { java.util.logging.Logger.getLogger(ChatApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } java.awt.EventQueue.invokeLater(new Runnable() { public void run() { new ChatApp().setVisible(true); } }); } private javax.swing.JButton jButton2; private javax.swing.JButton jButton3; }","dependencies":[{"file_path":"lan-chat-app-master\\src\\chatapplication\\MultiClient.java","file_content":"package chatapplication; import static chatapplication.MulticastClient.name; import javax.swing.JOptionPane; public class MultiClient { MultiClient() { name= JOptionPane.showInputDialog(\"Please enter your name\"); int count=0; while( name==null || name.equals(\"\") ) { if(name==null) { new ChatApp().setVisible(true); count++; break;} else if(name.equals(\"\")) { JOptionPane.showMessageDialog(new ChatApp(), \"Please enter a proper name\"); name=JOptionPane.showInputDialog(\"Please enter your name\"); } } if(count==0) { new MulticastClient().setVisible(true); Thread t1=new Thread(new Client()); t1.start(); } } }"}]}}
{"project_id":73,"chunk_id":0,"content":{"main_file_path":"lan-chat-app-master\\src\\chatapplication\\MulticastClient.java","main_file_content":"package chatapplication; import static chatapplication.MulticastClient.name; import static chatapplication.MulticastClient.s; import java.net.*; import java.io.*; import java.util.*; import javax.swing.JOptionPane; public class MulticastClient extends javax.swing.JFrame { public static String name; public static String message; public static MulticastSocket socket=null; public static InetAddress address ; public static DatagramSocket s=null; public MulticastClient() { initComponents(); this.setLocationRelativeTo(null); } @SuppressWarnings(\"unchecked\") private void initComponents() { jButton1 = new javax.swing.JButton(); jScrollPane1 = new javax.swing.JScrollPane(); jTextArea1 = new javax.swing.JTextArea(); jScrollPane2 = new javax.swing.JScrollPane(); jTextArea2 = new javax.swing.JTextArea(); jLabel1 = new javax.swing.JLabel(); jButton2 = new javax.swing.JButton(); jLabel2 = new javax.swing.JLabel(); jScrollPane3 = new javax.swing.JScrollPane(); jTextArea3 = new javax.swing.JTextArea(); jLabel3 = new javax.swing.JLabel(); setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE); jButton1.setText(\"Send\"); jButton1.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jButton1ActionPerformed(evt); } }); jTextArea1.setEditable(false); jTextArea1.setColumns(20); jTextArea1.setFont(new java.awt.Font(\"Calibri Light\", 0, 18)); jTextArea1.setRows(5); jTextArea1.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR)); jScrollPane1.setViewportView(jTextArea1); jTextArea2.setColumns(20); jTextArea2.setFont(new java.awt.Font(\"Gabriola\", 1, 24)); jTextArea2.setRows(5); jScrollPane2.setViewportView(jTextArea2); jLabel1.setFont(new java.awt.Font(\"Gabriola\", 1, 24)); jLabel1.setText(\"Enter your message here\"); jButton2.setText(\"Exit from Chat\"); jButton2.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jButton2ActionPerformed(evt); } }); jLabel2.setFont(new java.awt.Font(\"Gabriola\", 1, 24)); jLabel2.setText(\"Chat Window\"); jTextArea3.setEditable(false); jTextArea3.setColumns(20); jTextArea3.setRows(5); jScrollPane3.setViewportView(jTextArea3); jLabel3.setFont(new java.awt.Font(\"Gabriola\", 1, 24)); jLabel3.setText(\"Online users\"); javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane()); getContentPane().setLayout(layout); layout.setHorizontalGroup( layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(layout.createSequentialGroup() .addGap(23, 23, 23) .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup() .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addComponent(jScrollPane1) .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)) .addGap(50, 50, 50) .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addComponent(jLabel3) .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))) .addGroup(layout.createSequentialGroup() .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addComponent(jLabel1) .addGroup(layout.createSequentialGroup() .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE) .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED) .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE) .addGap(73, 73, 73) .addComponent(jButton2))) .addGap(0, 163, Short.MAX_VALUE))) .addContainerGap()) ); layout.setVerticalGroup( layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup() .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE) .addComponent(jLabel2) .addComponent(jLabel3)) .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED) .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE) .addGroup(layout.createSequentialGroup() .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE) .addGap(0, 0, Short.MAX_VALUE))) .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED) .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING) .addGroup(layout.createSequentialGroup() .addComponent(jLabel1) .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED) .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)) .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE) .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE) .addComponent(jButton2))) .addContainerGap()) ); pack(); } private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) { String x=\"***** \"+name+\" has logged out from the chat room *****\"; byte buf[]=x.getBytes(); try{ InetAddress group = InetAddress.getByName(\"230.0.0.1\"); DatagramPacket packet = new DatagramPacket(buf, buf.length, group, 4446); s.send(packet); }catch(Exception e){} x=\"exited\"; buf=x.getBytes(); try{ InetAddress group=InetAddress.getByName(\"230.0.0.2\"); DatagramPacket packet=new DatagramPacket(buf, buf.length,group,5000); s.send(packet); socket.leaveGroup(address); s.close(); } catch(Exception e){} this.setVisible(false); new ChatApp().setVisible(true); } private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) { String text= jTextArea2.getText(); if(!text.equals(\"\")) { message=name+\": \"+text; try { byte[] buf ; buf = message.getBytes(); InetAddress group = InetAddress.getByName(\"230.0.0.1\"); DatagramPacket packet = new DatagramPacket(buf, buf.length, group, 4446); s.send(packet); } catch (IOException e) { MulticastClient.socket.close(); } } } public static void main(String args[]) { java.awt.EventQueue.invokeLater(new Runnable() { @Override public void run() { new MulticastClient().setVisible(true); } } ); } private javax.swing.JButton jButton1; private javax.swing.JButton jButton2; private javax.swing.JLabel jLabel1; private javax.swing.JLabel jLabel2; private javax.swing.JLabel jLabel3; private javax.swing.JScrollPane jScrollPane1; private javax.swing.JScrollPane jScrollPane2; private javax.swing.JScrollPane jScrollPane3; public static javax.swing.JTextArea jTextArea1; public static javax.swing.JTextArea jTextArea2; public static javax.swing.JTextArea jTextArea3; } class Client implements Runnable { Client(){ try{ MulticastClient.socket = new MulticastSocket(4446) ; MulticastClient. s=new DatagramSocket(); MulticastClient. address=InetAddress.getByName(\"230.0.0.1\"); MulticastClient.socket.joinGroup(MulticastClient.address); } catch(Exception e) {JOptionPane.showMessageDialog(new ChatApp(), \"Sorry,Cannot bind\");}} @Override public void run(){ Thread t3=new Thread(new OnlineStatus()); t3.start(); Thread t4=new Thread(new ReceiveOnlineStatus()); t4.start(); newUser(); while(true) { try{ DatagramPacket packet; byte[] buf = new byte[256]; packet = new DatagramPacket(buf, buf.length); MulticastClient.socket.receive(packet); String received = new String(packet.getData(), 0, packet.getLength()); MulticastClient.jTextArea1.setText(MulticastClient.jTextArea1.getText()+received+\"\\n\"); MulticastClient.jTextArea2.setText(\"\"); }catch(IOException e){System.err.println(e);} } } void newUser(){String x=\"***** \"+name+\" has logged into the chat room *****\"; byte buf[]=x.getBytes(); try{ InetAddress group = InetAddress.getByName(\"230.0.0.1\"); DatagramPacket packet = new DatagramPacket(buf, buf.length, group, 4446); s.send(packet); }catch(Exception e){}} }","dependencies":[{"file_path":"lan-chat-app-master\\src\\chatapplication\\ChatApp.java","file_content":"package chatapplication; import java.awt.Color; public class ChatApp extends javax.swing.JFrame { static String name; public ChatApp() { this.setTitle(\"ChatApp\"); this.setUndecorated(true); initComponents(); this.setLocationRelativeTo(null); } @SuppressWarnings(\"unchecked\") private void initComponents() { jButton2 = new javax.swing.JButton(); jButton3 = new javax.swing.JButton(); setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE); setBackground(new java.awt.Color(255, 255, 153)); setFont(new java.awt.Font(\"Cambria Math\", 3, 10)); setForeground(new java.awt.Color(255, 0, 0)); jButton2.setFont(new java.awt.Font(\"Gabriola\", 1, 24)); jButton2.setText(\"Login to Chat Room\"); jButton2.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jButton2ActionPerformed(evt); } }); jButton3.setFont(new java.awt.Font(\"Gabriola\", 1, 24)); jButton3.setText(\"Exit\"); jButton3.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jButton3ActionPerformed(evt); } }); javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane()); getContentPane().setLayout(layout); layout.setHorizontalGroup( layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(layout.createSequentialGroup() .addContainerGap(382, Short.MAX_VALUE) .addComponent(jButton3) .addContainerGap(95, Short.MAX_VALUE)) .addGroup(layout.createSequentialGroup() .addGap(161, 161, 161) .addComponent(jButton2) .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)) ); layout.setVerticalGroup( layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(layout.createSequentialGroup() .addContainerGap(172, Short.MAX_VALUE) .addComponent(jButton2) .addGap(121, 121, 121) .addComponent(jButton3) .addGap(37, 37, 37)) ); pack(); } private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) { this.setVisible(false); new MultiClient(); } private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) { this.setVisible(false); System.exit(1); } public static void main(String args[]) { try { for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) { if (\"Nimbus\".equals(info.getName())) { javax.swing.UIManager.setLookAndFeel(info.getClassName()); break; } } } catch (ClassNotFoundException ex) { java.util.logging.Logger.getLogger(ChatApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } catch (InstantiationException ex) { java.util.logging.Logger.getLogger(ChatApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } catch (IllegalAccessException ex) { java.util.logging.Logger.getLogger(ChatApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } catch (javax.swing.UnsupportedLookAndFeelException ex) { java.util.logging.Logger.getLogger(ChatApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } java.awt.EventQueue.invokeLater(new Runnable() { public void run() { new ChatApp().setVisible(true); } }); } private javax.swing.JButton jButton2; private javax.swing.JButton jButton3; }"},{"file_path":"lan-chat-app-master\\src\\chatapplication\\OnlineStatus.java","file_content":"package chatapplication; import java.io.*; import static java.lang.Thread.sleep; import java.net.*; import java.util.*; public class OnlineStatus implements Runnable{ DatagramSocket s; OnlineStatus(){ try { s=new DatagramSocket(); } catch (SocketException ex) { }} @Override public void run(){ while(true) { try { byte[] buf ; buf=MulticastClient.name.getBytes(); InetAddress group = InetAddress.getByName(\"230.0.0.2\"); DatagramPacket packet = new DatagramPacket(buf, buf.length, group, 5000); s.send(packet); try{sleep((long)(Math.random() * 20000)); }catch(Exception e){} } catch (IOException e) { System.out.println(\"error in online status class\"); s.close();} }} }class ReceiveOnlineStatus implements Runnable{ InetAddress address=null; MulticastSocket socket=null; public static ArrayList al=new ArrayList(); ReceiveOnlineStatus(){ try{ socket = new MulticastSocket(5000) ; address=InetAddress.getByName(\"230.0.0.2\"); socket.joinGroup(address); } catch(Exception e) {System.err.println(\"error\"); } } @Override public void run(){ al=new ArrayList(); while(true){ try{ DatagramPacket packet; byte[] buf = new byte[256]; packet = new DatagramPacket(buf, buf.length); socket.receive(packet); String name=new String(packet.getData(), 0, packet.getLength()); if(name.equals(\"exited\")) al=new ArrayList(); if(!al.contains(name)&& !name.equals(\"exited\")) { al.add(name); if(MulticastClient.jTextArea3.getText().equals(\"\")) MulticastClient.jTextArea3.setText(name); else { MulticastClient.jTextArea3.setText(\"\"); for(Object obj:al) { MulticastClient.jTextArea3.setText(MulticastClient.jTextArea3.getText()+obj.toString()+\"\\n\"); } } } } catch(Exception e){System.out.println(\"error in receiveonline status class\");} }} }"}]}}
{"project_id":73,"chunk_id":0,"content":{"main_file_path":"lan-chat-app-master\\src\\chatapplication\\MultiClient.java","main_file_content":"package chatapplication; import static chatapplication.MulticastClient.name; import javax.swing.JOptionPane; public class MultiClient { MultiClient() { name= JOptionPane.showInputDialog(\"Please enter your name\"); int count=0; while( name==null || name.equals(\"\") ) { if(name==null) { new ChatApp().setVisible(true); count++; break;} else if(name.equals(\"\")) { JOptionPane.showMessageDialog(new ChatApp(), \"Please enter a proper name\"); name=JOptionPane.showInputDialog(\"Please enter your name\"); } } if(count==0) { new MulticastClient().setVisible(true); Thread t1=new Thread(new Client()); t1.start(); } } }","dependencies":[{"file_path":"lan-chat-app-master\\src\\chatapplication\\ChatApp.java","file_content":"package chatapplication; import java.awt.Color; public class ChatApp extends javax.swing.JFrame { static String name; public ChatApp() { this.setTitle(\"ChatApp\"); this.setUndecorated(true); initComponents(); this.setLocationRelativeTo(null); } @SuppressWarnings(\"unchecked\") private void initComponents() { jButton2 = new javax.swing.JButton(); jButton3 = new javax.swing.JButton(); setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE); setBackground(new java.awt.Color(255, 255, 153)); setFont(new java.awt.Font(\"Cambria Math\", 3, 10)); setForeground(new java.awt.Color(255, 0, 0)); jButton2.setFont(new java.awt.Font(\"Gabriola\", 1, 24)); jButton2.setText(\"Login to Chat Room\"); jButton2.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jButton2ActionPerformed(evt); } }); jButton3.setFont(new java.awt.Font(\"Gabriola\", 1, 24)); jButton3.setText(\"Exit\"); jButton3.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jButton3ActionPerformed(evt); } }); javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane()); getContentPane().setLayout(layout); layout.setHorizontalGroup( layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(layout.createSequentialGroup() .addContainerGap(382, Short.MAX_VALUE) .addComponent(jButton3) .addContainerGap(95, Short.MAX_VALUE)) .addGroup(layout.createSequentialGroup() .addGap(161, 161, 161) .addComponent(jButton2) .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)) ); layout.setVerticalGroup( layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(layout.createSequentialGroup() .addContainerGap(172, Short.MAX_VALUE) .addComponent(jButton2) .addGap(121, 121, 121) .addComponent(jButton3) .addGap(37, 37, 37)) ); pack(); } private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) { this.setVisible(false); new MultiClient(); } private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) { this.setVisible(false); System.exit(1); } public static void main(String args[]) { try { for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) { if (\"Nimbus\".equals(info.getName())) { javax.swing.UIManager.setLookAndFeel(info.getClassName()); break; } } } catch (ClassNotFoundException ex) { java.util.logging.Logger.getLogger(ChatApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } catch (InstantiationException ex) { java.util.logging.Logger.getLogger(ChatApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } catch (IllegalAccessException ex) { java.util.logging.Logger.getLogger(ChatApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } catch (javax.swing.UnsupportedLookAndFeelException ex) { java.util.logging.Logger.getLogger(ChatApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } java.awt.EventQueue.invokeLater(new Runnable() { public void run() { new ChatApp().setVisible(true); } }); } private javax.swing.JButton jButton2; private javax.swing.JButton jButton3; }"},{"file_path":"lan-chat-app-master\\src\\chatapplication\\MulticastClient.java","file_content":"package chatapplication; import static chatapplication.MulticastClient.name; import static chatapplication.MulticastClient.s; import java.net.*; import java.io.*; import java.util.*; import javax.swing.JOptionPane; public class MulticastClient extends javax.swing.JFrame { public static String name; public static String message; public static MulticastSocket socket=null; public static InetAddress address ; public static DatagramSocket s=null; public MulticastClient() { initComponents(); this.setLocationRelativeTo(null); } @SuppressWarnings(\"unchecked\") private void initComponents() { jButton1 = new javax.swing.JButton(); jScrollPane1 = new javax.swing.JScrollPane(); jTextArea1 = new javax.swing.JTextArea(); jScrollPane2 = new javax.swing.JScrollPane(); jTextArea2 = new javax.swing.JTextArea(); jLabel1 = new javax.swing.JLabel(); jButton2 = new javax.swing.JButton(); jLabel2 = new javax.swing.JLabel(); jScrollPane3 = new javax.swing.JScrollPane(); jTextArea3 = new javax.swing.JTextArea(); jLabel3 = new javax.swing.JLabel(); setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE); jButton1.setText(\"Send\"); jButton1.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jButton1ActionPerformed(evt); } }); jTextArea1.setEditable(false); jTextArea1.setColumns(20); jTextArea1.setFont(new java.awt.Font(\"Calibri Light\", 0, 18)); jTextArea1.setRows(5); jTextArea1.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR)); jScrollPane1.setViewportView(jTextArea1); jTextArea2.setColumns(20); jTextArea2.setFont(new java.awt.Font(\"Gabriola\", 1, 24)); jTextArea2.setRows(5); jScrollPane2.setViewportView(jTextArea2); jLabel1.setFont(new java.awt.Font(\"Gabriola\", 1, 24)); jLabel1.setText(\"Enter your message here\"); jButton2.setText(\"Exit from Chat\"); jButton2.addActionListener(new java.awt.event.ActionListener() { public void actionPerformed(java.awt.event.ActionEvent evt) { jButton2ActionPerformed(evt); } }); jLabel2.setFont(new java.awt.Font(\"Gabriola\", 1, 24)); jLabel2.setText(\"Chat Window\"); jTextArea3.setEditable(false); jTextArea3.setColumns(20); jTextArea3.setRows(5); jScrollPane3.setViewportView(jTextArea3); jLabel3.setFont(new java.awt.Font(\"Gabriola\", 1, 24)); jLabel3.setText(\"Online users\"); javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane()); getContentPane().setLayout(layout); layout.setHorizontalGroup( layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(layout.createSequentialGroup() .addGap(23, 23, 23) .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup() .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addComponent(jScrollPane1) .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)) .addGap(50, 50, 50) .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addComponent(jLabel3) .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))) .addGroup(layout.createSequentialGroup() .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addComponent(jLabel1) .addGroup(layout.createSequentialGroup() .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE) .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED) .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE) .addGap(73, 73, 73) .addComponent(jButton2))) .addGap(0, 163, Short.MAX_VALUE))) .addContainerGap()) ); layout.setVerticalGroup( layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup() .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE) .addComponent(jLabel2) .addComponent(jLabel3)) .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED) .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE) .addGroup(layout.createSequentialGroup() .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE) .addGap(0, 0, Short.MAX_VALUE))) .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED) .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING) .addGroup(layout.createSequentialGroup() .addComponent(jLabel1) .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED) .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)) .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE) .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE) .addComponent(jButton2))) .addContainerGap()) ); pack(); } private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) { String x=\"***** \"+name+\" has logged out from the chat room *****\"; byte buf[]=x.getBytes(); try{ InetAddress group = InetAddress.getByName(\"230.0.0.1\"); DatagramPacket packet = new DatagramPacket(buf, buf.length, group, 4446); s.send(packet); }catch(Exception e){} x=\"exited\"; buf=x.getBytes(); try{ InetAddress group=InetAddress.getByName(\"230.0.0.2\"); DatagramPacket packet=new DatagramPacket(buf, buf.length,group,5000); s.send(packet); socket.leaveGroup(address); s.close(); } catch(Exception e){} this.setVisible(false); new ChatApp().setVisible(true); } private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) { String text= jTextArea2.getText(); if(!text.equals(\"\")) { message=name+\": \"+text; try { byte[] buf ; buf = message.getBytes(); InetAddress group = InetAddress.getByName(\"230.0.0.1\"); DatagramPacket packet = new DatagramPacket(buf, buf.length, group, 4446); s.send(packet); } catch (IOException e) { MulticastClient.socket.close(); } } } public static void main(String args[]) { java.awt.EventQueue.invokeLater(new Runnable() { @Override public void run() { new MulticastClient().setVisible(true); } } ); } private javax.swing.JButton jButton1; private javax.swing.JButton jButton2; private javax.swing.JLabel jLabel1; private javax.swing.JLabel jLabel2; private javax.swing.JLabel jLabel3; private javax.swing.JScrollPane jScrollPane1; private javax.swing.JScrollPane jScrollPane2; private javax.swing.JScrollPane jScrollPane3; public static javax.swing.JTextArea jTextArea1; public static javax.swing.JTextArea jTextArea2; public static javax.swing.JTextArea jTextArea3; } class Client implements Runnable { Client(){ try{ MulticastClient.socket = new MulticastSocket(4446) ; MulticastClient. s=new DatagramSocket(); MulticastClient. address=InetAddress.getByName(\"230.0.0.1\"); MulticastClient.socket.joinGroup(MulticastClient.address); } catch(Exception e) {JOptionPane.showMessageDialog(new ChatApp(), \"Sorry,Cannot bind\");}} @Override public void run(){ Thread t3=new Thread(new OnlineStatus()); t3.start(); Thread t4=new Thread(new ReceiveOnlineStatus()); t4.start(); newUser(); while(true) { try{ DatagramPacket packet; byte[] buf = new byte[256]; packet = new DatagramPacket(buf, buf.length); MulticastClient.socket.receive(packet); String received = new String(packet.getData(), 0, packet.getLength()); MulticastClient.jTextArea1.setText(MulticastClient.jTextArea1.getText()+received+\"\\n\"); MulticastClient.jTextArea2.setText(\"\"); }catch(IOException e){System.err.println(e);} } } void newUser(){String x=\"***** \"+name+\" has logged into the chat room *****\"; byte buf[]=x.getBytes(); try{ InetAddress group = InetAddress.getByName(\"230.0.0.1\"); DatagramPacket packet = new DatagramPacket(buf, buf.length, group, 4446); s.send(packet); }catch(Exception e){}} }"}]}}
{"project_id":73,"chunk_id":0,"content":{"main_file_path":"lan-chat-app-master\\src\\chatapplication\\OnlineStatus.java","main_file_content":"package chatapplication; import java.io.*; import static java.lang.Thread.sleep; import java.net.*; import java.util.*; public class OnlineStatus implements Runnable{ DatagramSocket s; OnlineStatus(){ try { s=new DatagramSocket(); } catch (SocketException ex) { }} @Override public void run(){ while(true) { try { byte[] buf ; buf=MulticastClient.name.getBytes(); InetAddress group = InetAddress.getByName(\"230.0.0.2\"); DatagramPacket packet = new DatagramPacket(buf, buf.length, group, 5000); s.send(packet); try{sleep((long)(Math.random() * 20000)); }catch(Exception e){} } catch (IOException e) { System.out.println(\"error in online status class\"); s.close();} }} }class ReceiveOnlineStatus implements Runnable{ InetAddress address=null; MulticastSocket socket=null; public static ArrayList al=new ArrayList(); ReceiveOnlineStatus(){ try{ socket = new MulticastSocket(5000) ; address=InetAddress.getByName(\"230.0.0.2\"); socket.joinGroup(address); } catch(Exception e) {System.err.println(\"error\"); } } @Override public void run(){ al=new ArrayList(); while(true){ try{ DatagramPacket packet; byte[] buf = new byte[256]; packet = new DatagramPacket(buf, buf.length); socket.receive(packet); String name=new String(packet.getData(), 0, packet.getLength()); if(name.equals(\"exited\")) al=new ArrayList(); if(!al.contains(name)&& !name.equals(\"exited\")) { al.add(name); if(MulticastClient.jTextArea3.getText().equals(\"\")) MulticastClient.jTextArea3.setText(name); else { MulticastClient.jTextArea3.setText(\"\"); for(Object obj:al) { MulticastClient.jTextArea3.setText(MulticastClient.jTextArea3.getText()+obj.toString()+\"\\n\"); } } } } catch(Exception e){System.out.println(\"error in receiveonline status class\");} }} }","dependencies":[]}}
{"project_id":75,"chunk_id":0,"content":{"main_file_path":"learn-spring-boot-graphql-master\\src\\it\\java\\com.learn.graphql.resolver.bank.query\\BankAccountQueryResolverIT.java","main_file_content":"package com.learn.graphql.resolver.bank.query; import static java.lang.String.format; import static org.assertj.core.api.Assertions.assertThat; import static org.skyscreamer.jsonassert.JSONAssert.assertEquals; import com.graphql.spring.boot.test.GraphQLTestTemplate; import io.micrometer.core.instrument.util.IOUtils; import java.io.IOException; import java.nio.charset.StandardCharsets; import org.json.JSONException; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.boot.test.context.SpringBootTest.WebEnvironment; import org.springframework.core.io.ClassPathResource; import org.springframework.http.HttpStatus; @SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT, classes = TestApplication.class) public class BankAccountQueryResolverIT { private static final String GRAPHQL_QUERY_REQUEST_PATH = \"graphql/resolver/query/request/%s.graphql\"; private static final String GRAPHQL_QUERY_RESPONSE_PATH = \"graphql/resolver/query/response/%s.json\"; @Autowired GraphQLTestTemplate graphQLTestTemplate; @Test void bank_accounts_are_returned() throws IOException, JSONException { var testName = \"bank_account\"; var graphQLResponse = graphQLTestTemplate .postForResource(format(GRAPHQL_QUERY_REQUEST_PATH, testName)); var expectedResponseBody = read(format(GRAPHQL_QUERY_RESPONSE_PATH, testName)); assertThat(graphQLResponse.getStatusCode()).isEqualTo(HttpStatus.OK); assertEquals(expectedResponseBody, graphQLResponse.getRawResponse().getBody(), true); } private String read(String location) throws IOException { return IOUtils.toString( new ClassPathResource(location).getInputStream(), StandardCharsets.UTF_8); } }","dependencies":[{"file_path":"learn-spring-boot-graphql-master\\src\\it\\java\\com.learn.graphql.resolver.bank.query\\TestApplication.java","file_content":"package com.learn.graphql.resolver.bank.query; import static java.time.ZoneOffset.UTC; import com.learn.graphql.Application; import java.time.Clock; import java.time.LocalDate; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.Import; import org.springframework.context.annotation.Primary; @Configuration @Import(Application.class) public class TestApplication { @Bean @Primary public Clock testClock() { return Clock.fixed(LocalDate.of(2020, 10, 16).atStartOfDay(UTC).toInstant(), UTC); } }"}]}}
{"project_id":75,"chunk_id":0,"content":{"main_file_path":"learn-spring-boot-graphql-master\\src\\it\\java\\com.learn.graphql.resolver.bank.query\\TestApplication.java","main_file_content":"package com.learn.graphql.resolver.bank.query; import static java.time.ZoneOffset.UTC; import com.learn.graphql.Application; import java.time.Clock; import java.time.LocalDate; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.Import; import org.springframework.context.annotation.Primary; @Configuration @Import(Application.class) public class TestApplication { @Bean @Primary public Clock testClock() { return Clock.fixed(LocalDate.of(2020, 10, 16).atStartOfDay(UTC).toInstant(), UTC); } }","dependencies":[{"file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\Application.java","file_content":"package com.learn.graphql; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class Application { public static void main(String[] args) { SpringApplication.run(Application.class, args); } }"}]}}
{"project_id":75,"chunk_id":0,"content":{"main_file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\Application.java","main_file_content":"package com.learn.graphql; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class Application { public static void main(String[] args) { SpringApplication.run(Application.class, args); } }","dependencies":[]}}
{"project_id":75,"chunk_id":0,"content":{"main_file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\cache\\RequestKey.java","main_file_content":"package com.learn.graphql.cache; import java.util.List; import lombok.Value; @Value public class RequestKey { String userId; List<String> queries; }","dependencies":[]}}
{"project_id":75,"chunk_id":0,"content":{"main_file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\cache\\ResponseCacheManager.java","main_file_content":"package com.learn.graphql.cache; import com.github.benmanes.caffeine.cache.Cache; import com.learn.graphql.config.security.GraphQLSecurityConfig; import graphql.kickstart.execution.input.GraphQLInvocationInput; import graphql.kickstart.servlet.cache.CachedResponse; import graphql.kickstart.servlet.cache.GraphQLResponseCacheManager; import javax.servlet.http.HttpServletRequest; import lombok.RequiredArgsConstructor; import lombok.extern.slf4j.Slf4j; import org.springframework.stereotype.Component; @Slf4j @Component @RequiredArgsConstructor public class ResponseCacheManager implements GraphQLResponseCacheManager { private final Cache<RequestKey, CachedResponse> responseCache; @Override public CachedResponse get(HttpServletRequest request, GraphQLInvocationInput invocationInput) { return responseCache.getIfPresent(getRequestKey(request, invocationInput)); } @Override public boolean isCacheable(HttpServletRequest request, GraphQLInvocationInput invocationInput) { return invocationInput.getQueries() .stream() .noneMatch(this::isIntrospectionQuery); } @Override public void put(HttpServletRequest request, GraphQLInvocationInput invocationInput, CachedResponse cachedResponse) { responseCache.put(getRequestKey(request, invocationInput), cachedResponse); } private RequestKey getRequestKey(HttpServletRequest request, GraphQLInvocationInput invocationInput) { return new RequestKey(getUserId(request), invocationInput.getQueries()); } private String getUserId(HttpServletRequest request) { var userId = request.getHeader(GraphQLSecurityConfig.USER_ID_PRE_AUTH_HEADER); if (userId == null) { throw new IllegalArgumentException(\"User Id is null. Cannot read from ResponseCacheManager.\"); } return userId; } private boolean isIntrospectionQuery(String query) { return query.contains(\"Introspection\"); } }","dependencies":[{"file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\cache\\RequestKey.java","file_content":"package com.learn.graphql.cache; import java.util.List; import lombok.Value; @Value public class RequestKey { String userId; List<String> queries; }"}]}}
{"project_id":75,"chunk_id":0,"content":{"main_file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\config\\AsyncExecutorConfig.java","main_file_content":"package com.learn.graphql.config; import com.learn.graphql.util.ExecutorFactory; import java.util.concurrent.Executor; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; @Configuration public class AsyncExecutorConfig { @Bean public Executor balanceExecutor(ExecutorFactory executorFactory) { return executorFactory.newExecutor(); } @Bean public Executor bankAccountExecutor(ExecutorFactory executorFactory) { return executorFactory.newExecutor(); } }","dependencies":[{"file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\util\\ExecutorFactory.java","file_content":"package com.learn.graphql.util; import java.util.concurrent.Executor; import lombok.AccessLevel; import lombok.RequiredArgsConstructor; import org.springframework.core.task.TaskDecorator; import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor; import org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor; import org.springframework.stereotype.Component; @Component @RequiredArgsConstructor(access = AccessLevel.PRIVATE) public final class ExecutorFactory { private final TaskDecorator mdcContextTaskDecorator; public Executor newExecutor() { var executor = new ThreadPoolTaskExecutor(); executor.setCorePoolSize(Runtime.getRuntime().availableProcessors()); executor.setMaxPoolSize(Runtime.getRuntime().availableProcessors()); executor.setKeepAliveSeconds(0); executor.setTaskDecorator(mdcContextTaskDecorator); executor.initialize(); return new DelegatingSecurityContextAsyncTaskExecutor(executor); } }"}]}}
{"project_id":75,"chunk_id":0,"content":{"main_file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\config\\CacheConfig.java","main_file_content":"package com.learn.graphql.config; import com.github.benmanes.caffeine.cache.Cache; import com.github.benmanes.caffeine.cache.Caffeine; import com.learn.graphql.cache.RequestKey; import graphql.kickstart.servlet.cache.CachedResponse; import java.time.Duration; import lombok.extern.slf4j.Slf4j; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; @Slf4j @Configuration public class CacheConfig { @Bean public Cache<RequestKey, CachedResponse> responseCache() { return Caffeine.newBuilder() .expireAfterWrite(Duration.ofMinutes(1L)) .maximumSize(100L) .removalListener((key, value, cause) -> log.info(\"Key {} with value {} was removed from the response cache. Cause {}\", key, value, cause)) .build(); } }","dependencies":[{"file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\cache\\RequestKey.java","file_content":"package com.learn.graphql.cache; import java.util.List; import lombok.Value; @Value public class RequestKey { String userId; List<String> queries; }"}]}}
{"project_id":75,"chunk_id":0,"content":{"main_file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\config\\ClockConfig.java","main_file_content":"package com.learn.graphql.config; import java.time.Clock; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; @Configuration public class ClockConfig { @Bean public Clock clock() { return Clock.systemUTC(); } }","dependencies":[]}}
{"project_id":75,"chunk_id":0,"content":{"main_file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\config\\ValidationDirectiveConfig.java","main_file_content":"package com.learn.graphql.config; import graphql.validation.rules.OnValidationErrorStrategy; import graphql.validation.rules.ValidationRules; import graphql.validation.schemawiring.ValidationSchemaWiring; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; @Configuration public class ValidationDirectiveConfig { @Bean public ValidationSchemaWiring validationSchemaWiring() { var validationRules = ValidationRules.newValidationRules() .onValidationErrorStrategy(OnValidationErrorStrategy.RETURN_NULL) .build(); return new ValidationSchemaWiring(validationRules); } }","dependencies":[]}}
{"project_id":75,"chunk_id":0,"content":{"main_file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\config\\security\\AuthenticationConnectionListener.java","main_file_content":"package com.learn.graphql.config.security; import static com.learn.graphql.config.security.GraphQLSecurityConfig.CORRELATION_ID; import graphql.kickstart.execution.subscriptions.SubscriptionSession; import graphql.kickstart.execution.subscriptions.apollo.ApolloSubscriptionConnectionListener; import graphql.kickstart.execution.subscriptions.apollo.OperationMessage; import java.util.Map; import java.util.UUID; import lombok.extern.slf4j.Slf4j; import org.slf4j.MDC; import org.springframework.security.core.Authentication; import org.springframework.security.core.context.SecurityContextHolder; import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken; import org.springframework.stereotype.Component; @Slf4j @Component public class AuthenticationConnectionListener implements ApolloSubscriptionConnectionListener { public static final String AUTHENTICATION = \"AUTHENTICATION\"; @Override public void onConnect(SubscriptionSession session, OperationMessage message) { log.info(\"onConnect with payload {}\", message.getPayload()); var payload = (Map<String, String>) message.getPayload(); var userId = payload.get(GraphQLSecurityConfig.USER_ID_PRE_AUTH_HEADER); var userRoles = payload.get(GraphQLSecurityConfig.USER_ROLES_PRE_AUTH_HEADER); var grantedAuthorities = GrantedAuthorityFactory.getAuthoritiesFrom(userRoles); var token = new PreAuthenticatedAuthenticationToken(userId, null, grantedAuthorities); session.getUserProperties().put(AUTHENTICATION, token); session.getUserProperties().put(CORRELATION_ID, UUID.randomUUID().toString()); } @Override public void onStart(SubscriptionSession session, OperationMessage message) { log.info(\"onStart with payload {}\", message.getPayload()); var authentication = (Authentication) session.getUserProperties().get(AUTHENTICATION); SecurityContextHolder.getContext().setAuthentication(authentication); MDC.put(CORRELATION_ID, (String) session.getUserProperties().get(CORRELATION_ID)); } @Override public void onStop(SubscriptionSession session, OperationMessage message) { log.info(\"onStop with payload {}\", message.getPayload()); } @Override public void onTerminate(SubscriptionSession session, OperationMessage message) { log.info(\"onTerminate with payload {}\", message.getPayload()); MDC.clear(); } }","dependencies":[{"file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\config\\security\\GrantedAuthorityFactory.java","file_content":"package com.learn.graphql.config.security; import java.util.List; import java.util.Set; import java.util.stream.Collectors; import lombok.AccessLevel; import lombok.NoArgsConstructor; import org.apache.commons.lang3.StringUtils; import org.springframework.security.core.GrantedAuthority; import org.springframework.security.core.authority.SimpleGrantedAuthority; @NoArgsConstructor(access = AccessLevel.PRIVATE) public class GrantedAuthorityFactory { public static List<GrantedAuthority> getAuthoritiesFrom(String userRoles) { if (StringUtils.isBlank(userRoles)) { return List.of(); } return Set.of(userRoles.split(\",\")) .stream() .map(SimpleGrantedAuthority::new) .collect(Collectors.toList()); } }"}]}}
{"project_id":75,"chunk_id":0,"content":{"main_file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\config\\security\\GrantedAuthoritiesAuthenticationDetailsSource.java","main_file_content":"package com.learn.graphql.config.security; import static com.learn.graphql.config.security.GraphQLSecurityConfig.USER_ROLES_PRE_AUTH_HEADER; import javax.servlet.http.HttpServletRequest; import org.springframework.security.authentication.AuthenticationDetailsSource; import org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails; public class GrantedAuthoritiesAuthenticationDetailsSource implements AuthenticationDetailsSource<HttpServletRequest, PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails> { @Override public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails buildDetails( HttpServletRequest request) { var userRoles = request.getHeader(USER_ROLES_PRE_AUTH_HEADER); var authorities = GrantedAuthorityFactory.getAuthoritiesFrom(userRoles); return new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails(request, authorities); } }","dependencies":[{"file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\config\\security\\GrantedAuthorityFactory.java","file_content":"package com.learn.graphql.config.security; import java.util.List; import java.util.Set; import java.util.stream.Collectors; import lombok.AccessLevel; import lombok.NoArgsConstructor; import org.apache.commons.lang3.StringUtils; import org.springframework.security.core.GrantedAuthority; import org.springframework.security.core.authority.SimpleGrantedAuthority; @NoArgsConstructor(access = AccessLevel.PRIVATE) public class GrantedAuthorityFactory { public static List<GrantedAuthority> getAuthoritiesFrom(String userRoles) { if (StringUtils.isBlank(userRoles)) { return List.of(); } return Set.of(userRoles.split(\",\")) .stream() .map(SimpleGrantedAuthority::new) .collect(Collectors.toList()); } }"}]}}
{"project_id":75,"chunk_id":0,"content":{"main_file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\config\\security\\GrantedAuthorityFactory.java","main_file_content":"package com.learn.graphql.config.security; import java.util.List; import java.util.Set; import java.util.stream.Collectors; import lombok.AccessLevel; import lombok.NoArgsConstructor; import org.apache.commons.lang3.StringUtils; import org.springframework.security.core.GrantedAuthority; import org.springframework.security.core.authority.SimpleGrantedAuthority; @NoArgsConstructor(access = AccessLevel.PRIVATE) public class GrantedAuthorityFactory { public static List<GrantedAuthority> getAuthoritiesFrom(String userRoles) { if (StringUtils.isBlank(userRoles)) { return List.of(); } return Set.of(userRoles.split(\",\")) .stream() .map(SimpleGrantedAuthority::new) .collect(Collectors.toList()); } }","dependencies":[]}}
{"project_id":75,"chunk_id":0,"content":{"main_file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\config\\security\\GraphQLSecurityConfig.java","main_file_content":"package com.learn.graphql.config.security; import javax.servlet.Filter; import lombok.RequiredArgsConstructor; import lombok.extern.slf4j.Slf4j; import org.springframework.context.annotation.Configuration; import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder; import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.config.annotation.web.builders.WebSecurity; import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity; import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; import org.springframework.security.config.http.SessionCreationPolicy; import org.springframework.security.web.authentication.preauth.AbstractPreAuthenticatedProcessingFilter; import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider; @Slf4j @Configuration @EnableWebSecurity @EnableGlobalMethodSecurity( securedEnabled = true, prePostEnabled = true) @RequiredArgsConstructor public class GraphQLSecurityConfig extends WebSecurityConfigurerAdapter { public static final String USER_ID_PRE_AUTH_HEADER = \"user_id\"; public static final String USER_ROLES_PRE_AUTH_HEADER = \"user_roles\"; public static final String CORRELATION_ID = \"correlation_id\"; private final PreAuthenticatedAuthenticationProvider preAuthenticatedAuthenticationProvider; @Override public void configure(AuthenticationManagerBuilder authenticationManagerBuilder) { authenticationManagerBuilder.authenticationProvider(preAuthenticatedAuthenticationProvider); } @Override protected void configure(HttpSecurity http) throws Exception { log.info(\"Configuring spring security\"); http .addFilterBefore(createRequestHeadersPreAuthenticationFilter(), AbstractPreAuthenticatedProcessingFilter.class) .authorizeRequests() .anyRequest().authenticated() .and() .csrf().disable() .httpBasic().disable() .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) .and() .logout().disable() .anonymous().disable(); } @Override public void configure(WebSecurity web) { web.ignoring() .antMatchers(\"/actuator/health\") .antMatchers(\"/playground\", \"/vendor/playground/**\") .antMatchers(\"/subscriptions\"); } private Filter createRequestHeadersPreAuthenticationFilter() throws Exception { var filter = new RequestHeadersPreAuthenticationFilter(); filter.setAuthenticationDetailsSource(new GrantedAuthoritiesAuthenticationDetailsSource()); filter.setAuthenticationManager(authenticationManager()); filter.setContinueFilterChainOnUnsuccessfulAuthentication(false); return filter; } }","dependencies":[{"file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\config\\security\\GrantedAuthoritiesAuthenticationDetailsSource.java","file_content":"package com.learn.graphql.config.security; import static com.learn.graphql.config.security.GraphQLSecurityConfig.USER_ROLES_PRE_AUTH_HEADER; import javax.servlet.http.HttpServletRequest; import org.springframework.security.authentication.AuthenticationDetailsSource; import org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails; public class GrantedAuthoritiesAuthenticationDetailsSource implements AuthenticationDetailsSource<HttpServletRequest, PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails> { @Override public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails buildDetails( HttpServletRequest request) { var userRoles = request.getHeader(USER_ROLES_PRE_AUTH_HEADER); var authorities = GrantedAuthorityFactory.getAuthoritiesFrom(userRoles); return new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails(request, authorities); } }"},{"file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\config\\security\\RequestHeadersPreAuthenticationFilter.java","file_content":"package com.learn.graphql.config.security; import static com.learn.graphql.config.security.GraphQLSecurityConfig.USER_ID_PRE_AUTH_HEADER; import javax.servlet.http.HttpServletRequest; import org.apache.commons.lang3.StringUtils; import org.springframework.security.web.authentication.preauth.AbstractPreAuthenticatedProcessingFilter; public class RequestHeadersPreAuthenticationFilter extends AbstractPreAuthenticatedProcessingFilter { @Override protected Object getPreAuthenticatedPrincipal(HttpServletRequest request) { return request.getHeader(USER_ID_PRE_AUTH_HEADER); } @Override protected Object getPreAuthenticatedCredentials(HttpServletRequest request) { return StringUtils.EMPTY; } }"}]}}
{"project_id":75,"chunk_id":0,"content":{"main_file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\config\\security\\ProviderConfig.java","main_file_content":"package com.learn.graphql.config.security; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider; import org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesUserDetailsService; @Configuration public class ProviderConfig { @Bean public PreAuthenticatedAuthenticationProvider preAuthenticatedAuthenticationProvider() { var preAuthProvider = new PreAuthenticatedAuthenticationProvider(); preAuthProvider.setPreAuthenticatedUserDetailsService( new PreAuthenticatedGrantedAuthoritiesUserDetailsService()); return preAuthProvider; } }","dependencies":[]}}
{"project_id":75,"chunk_id":0,"content":{"main_file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\config\\security\\RequestHeadersPreAuthenticationFilter.java","main_file_content":"package com.learn.graphql.config.security; import static com.learn.graphql.config.security.GraphQLSecurityConfig.USER_ID_PRE_AUTH_HEADER; import javax.servlet.http.HttpServletRequest; import org.apache.commons.lang3.StringUtils; import org.springframework.security.web.authentication.preauth.AbstractPreAuthenticatedProcessingFilter; public class RequestHeadersPreAuthenticationFilter extends AbstractPreAuthenticatedProcessingFilter { @Override protected Object getPreAuthenticatedPrincipal(HttpServletRequest request) { return request.getHeader(USER_ID_PRE_AUTH_HEADER); } @Override protected Object getPreAuthenticatedCredentials(HttpServletRequest request) { return StringUtils.EMPTY; } }","dependencies":[]}}
{"project_id":75,"chunk_id":0,"content":{"main_file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\connection\\CursorUtil.java","main_file_content":"package com.learn.graphql.connection; import graphql.relay.ConnectionCursor; import graphql.relay.DefaultConnectionCursor; import graphql.relay.Edge; import java.nio.charset.StandardCharsets; import java.util.Base64; import java.util.List; import java.util.UUID; import org.springframework.stereotype.Component; @Component public class CursorUtil { public ConnectionCursor createCursorWith(UUID id) { return new DefaultConnectionCursor( Base64.getEncoder().encodeToString(id.toString().getBytes(StandardCharsets.UTF_8))); } public UUID decode(String cursor) { return UUID.fromString(new String(Base64.getDecoder().decode(cursor))); } public <T> ConnectionCursor getFirstCursorFrom(List<Edge<T>> edges) { return edges.isEmpty() ? null : edges.get(0).getCursor(); } public <T> ConnectionCursor getLastCursorFrom(List<Edge<T>> edges) { return edges.isEmpty() ? null : edges.get(edges.size() - 1).getCursor(); } }","dependencies":[]}}
{"project_id":75,"chunk_id":0,"content":{"main_file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\context\\CustomGraphQLContext.java","main_file_content":"package com.learn.graphql.context; import graphql.kickstart.servlet.context.GraphQLServletContext; import java.util.List; import java.util.Map; import java.util.Optional; import javax.security.auth.Subject; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.Part; import lombok.Getter; import lombok.RequiredArgsConstructor; import org.dataloader.DataLoaderRegistry; @Getter @RequiredArgsConstructor public class CustomGraphQLContext implements GraphQLServletContext { private final String userId; private final GraphQLServletContext context; @Override public List<Part> getFileParts() { return context.getFileParts(); } @Override public Map<String, List<Part>> getParts() { return context.getParts(); } @Override public HttpServletRequest getHttpServletRequest() { return context.getHttpServletRequest(); } @Override public HttpServletResponse getHttpServletResponse() { return context.getHttpServletResponse(); } @Override public Optional<Subject> getSubject() { return context.getSubject(); } @Override public DataLoaderRegistry getDataLoaderRegistry() { return context.getDataLoaderRegistry(); } }","dependencies":[]}}
{"project_id":75,"chunk_id":0,"content":{"main_file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\context\\CustomGraphQLContextBuilder.java","main_file_content":"package com.learn.graphql.context; import static com.learn.graphql.config.security.GraphQLSecurityConfig.CORRELATION_ID; import com.learn.graphql.context.dataloader.DataLoaderRegistryFactory; import graphql.kickstart.execution.context.GraphQLContext; import graphql.kickstart.servlet.context.DefaultGraphQLServletContext; import graphql.kickstart.servlet.context.DefaultGraphQLWebSocketContext; import graphql.kickstart.servlet.context.GraphQLServletContextBuilder; import java.util.UUID; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.websocket.Session; import javax.websocket.server.HandshakeRequest; import lombok.RequiredArgsConstructor; import lombok.extern.slf4j.Slf4j; import org.slf4j.MDC; import org.springframework.stereotype.Component; @Slf4j @Component @RequiredArgsConstructor public class CustomGraphQLContextBuilder implements GraphQLServletContextBuilder { private final DataLoaderRegistryFactory dataLoaderRegistryFactory; @Override public GraphQLContext build(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) { MDC.put(CORRELATION_ID, UUID.randomUUID().toString()); var userId = httpServletRequest.getHeader(\"user_id\"); var context = DefaultGraphQLServletContext.createServletContext() .with(httpServletRequest) .with(httpServletResponse) .with(dataLoaderRegistryFactory.create(userId)) .build(); return new CustomGraphQLContext(userId, context); } @Override public GraphQLContext build(Session session, HandshakeRequest handshakeRequest) { return DefaultGraphQLWebSocketContext.createWebSocketContext() .with(session) .with(handshakeRequest) .build(); } @Override public GraphQLContext build() { throw new IllegalStateException(\"Unsupported\"); } }","dependencies":[{"file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\context\\CustomGraphQLContext.java","file_content":"package com.learn.graphql.context; import graphql.kickstart.servlet.context.GraphQLServletContext; import java.util.List; import java.util.Map; import java.util.Optional; import javax.security.auth.Subject; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.Part; import lombok.Getter; import lombok.RequiredArgsConstructor; import org.dataloader.DataLoaderRegistry; @Getter @RequiredArgsConstructor public class CustomGraphQLContext implements GraphQLServletContext { private final String userId; private final GraphQLServletContext context; @Override public List<Part> getFileParts() { return context.getFileParts(); } @Override public Map<String, List<Part>> getParts() { return context.getParts(); } @Override public HttpServletRequest getHttpServletRequest() { return context.getHttpServletRequest(); } @Override public HttpServletResponse getHttpServletResponse() { return context.getHttpServletResponse(); } @Override public Optional<Subject> getSubject() { return context.getSubject(); } @Override public DataLoaderRegistry getDataLoaderRegistry() { return context.getDataLoaderRegistry(); } }"},{"file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\context\\dataloader\\DataLoaderRegistryFactory.java","file_content":"package com.learn.graphql.context.dataloader; import com.learn.graphql.service.BalanceService; import java.math.BigDecimal; import java.util.Map; import java.util.Set; import java.util.UUID; import java.util.concurrent.CompletableFuture; import java.util.concurrent.Executor; import lombok.RequiredArgsConstructor; import org.dataloader.BatchLoaderEnvironment; import org.dataloader.DataLoader; import org.dataloader.DataLoaderRegistry; import org.springframework.stereotype.Component; @Component @RequiredArgsConstructor public class DataLoaderRegistryFactory { public static final String BALANCE_DATA_LOADER = \"BALANCE_DATA_LOADER\"; private final BalanceService balanceService; private final Executor balanceExecutor; public DataLoaderRegistry create(String userId) { var registry = new DataLoaderRegistry(); registry.register(BALANCE_DATA_LOADER, createBalanceDataLoader(userId)); return registry; } private DataLoader<UUID, BigDecimal> createBalanceDataLoader(String userId) { return DataLoader .newMappedDataLoader((Set<UUID> bankAccountIds, BatchLoaderEnvironment environment) -> CompletableFuture.supplyAsync(() -> balanceService.getBalanceFor((Map) environment.getKeyContexts(), userId), balanceExecutor)); } }"}]}}
{"project_id":75,"chunk_id":0,"content":{"main_file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\context\\dataloader\\DataLoaderRegistryFactory.java","main_file_content":"package com.learn.graphql.context.dataloader; import com.learn.graphql.service.BalanceService; import java.math.BigDecimal; import java.util.Map; import java.util.Set; import java.util.UUID; import java.util.concurrent.CompletableFuture; import java.util.concurrent.Executor; import lombok.RequiredArgsConstructor; import org.dataloader.BatchLoaderEnvironment; import org.dataloader.DataLoader; import org.dataloader.DataLoaderRegistry; import org.springframework.stereotype.Component; @Component @RequiredArgsConstructor public class DataLoaderRegistryFactory { public static final String BALANCE_DATA_LOADER = \"BALANCE_DATA_LOADER\"; private final BalanceService balanceService; private final Executor balanceExecutor; public DataLoaderRegistry create(String userId) { var registry = new DataLoaderRegistry(); registry.register(BALANCE_DATA_LOADER, createBalanceDataLoader(userId)); return registry; } private DataLoader<UUID, BigDecimal> createBalanceDataLoader(String userId) { return DataLoader .newMappedDataLoader((Set<UUID> bankAccountIds, BatchLoaderEnvironment environment) -> CompletableFuture.supplyAsync(() -> balanceService.getBalanceFor((Map) environment.getKeyContexts(), userId), balanceExecutor)); } }","dependencies":[{"file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\service\\BalanceService.java","file_content":"package com.learn.graphql.service; import com.learn.graphql.domain.bank.BankAccount; import java.math.BigDecimal; import java.util.Map; import java.util.UUID; import lombok.extern.slf4j.Slf4j; import org.springframework.security.core.context.SecurityContextHolder; import org.springframework.stereotype.Service; @Slf4j @Service public class BalanceService { public Map<UUID, BigDecimal> getBalanceFor(Map<UUID, BankAccount> bankAccountIds, String userId) { log.info(\"Requesting batch bank account ids: {} for user Id: {}\", bankAccountIds, userId); log.info(\"User ID: {}\", SecurityContextHolder.getContext().getAuthentication().getPrincipal()); var ids = bankAccountIds.keySet(); return Map.of( UUID.fromString(\"c6aa269a-812b-49d5-b178-a739a1ed74cc\"), BigDecimal.ONE, UUID.fromString(\"48e4a484-af2c-4366-8cd4-25330597473f\"), new BigDecimal(\"23431.22\")); } }"}]}}
{"project_id":75,"chunk_id":0,"content":{"main_file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\domain\\bank\\Asset.java","main_file_content":"package com.learn.graphql.domain.bank; import java.util.UUID; import lombok.Builder; import lombok.Value; @Builder @Value public class Asset { UUID id; }","dependencies":[]}}
{"project_id":75,"chunk_id":0,"content":{"main_file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\domain\\bank\\BankAccount.java","main_file_content":"package com.learn.graphql.domain.bank; import java.math.BigDecimal; import java.time.LocalDate; import java.time.ZonedDateTime; import java.util.UUID; import lombok.Builder; import lombok.Value; @Builder @Value public class BankAccount { UUID id; Client client; Currency currency; ZonedDateTime createdAt; LocalDate createdOn; BigDecimal balance; }","dependencies":[{"file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\domain\\bank\\Client.java","file_content":"package com.learn.graphql.domain.bank; import java.util.List; import java.util.UUID; import lombok.Builder; import lombok.Value; @Value @Builder public class Client { UUID id; String firstName; List<String> middleNames; String lastName; }"},{"file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\domain\\bank\\Currency.java","file_content":"package com.learn.graphql.domain.bank; public enum Currency { CHF, USD }"}]}}
{"project_id":75,"chunk_id":0,"content":{"main_file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\domain\\bank\\Client.java","main_file_content":"package com.learn.graphql.domain.bank; import java.util.List; import java.util.UUID; import lombok.Builder; import lombok.Value; @Value @Builder public class Client { UUID id; String firstName; List<String> middleNames; String lastName; }","dependencies":[]}}
{"project_id":75,"chunk_id":0,"content":{"main_file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\domain\\bank\\Currency.java","main_file_content":"package com.learn.graphql.domain.bank; public enum Currency { CHF, USD }","dependencies":[]}}
{"project_id":75,"chunk_id":0,"content":{"main_file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\domain\\bank\\input\\CreateBankAccountInput.java","main_file_content":"package com.learn.graphql.domain.bank.input; import javax.validation.constraints.NotBlank; import lombok.Data; @Data public class CreateBankAccountInput { @NotBlank String firstName; int age; }","dependencies":[]}}
{"project_id":75,"chunk_id":0,"content":{"main_file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\exceptions\\GraphqlExceptionHandler.java","main_file_content":"package com.learn.graphql.exceptions; import graphql.GraphQLException; import graphql.kickstart.spring.error.ThrowableGraphQLError; import javax.validation.ConstraintViolationException; import org.springframework.http.HttpStatus; import org.springframework.security.access.AccessDeniedException; import org.springframework.stereotype.Component; import org.springframework.web.bind.annotation.ExceptionHandler; @Component public class GraphqlExceptionHandler { @ExceptionHandler({GraphQLException.class, ConstraintViolationException.class}) public ThrowableGraphQLError handle(Exception e) { return new ThrowableGraphQLError(e); } @ExceptionHandler(AccessDeniedException.class) public ThrowableGraphQLError handle(AccessDeniedException e) { return new ThrowableGraphQLError(e, HttpStatus.FORBIDDEN.getReasonPhrase()); } @ExceptionHandler(RuntimeException.class) public ThrowableGraphQLError handle(RuntimeException e) { return new ThrowableGraphQLError(e, HttpStatus.INTERNAL_SERVER_ERROR.getReasonPhrase()); } }","dependencies":[]}}
{"project_id":75,"chunk_id":0,"content":{"main_file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\instrumentation\\RequestLoggingInstrumentation.java","main_file_content":"package com.learn.graphql.instrumentation; import graphql.ExecutionResult; import graphql.execution.instrumentation.InstrumentationContext; import graphql.execution.instrumentation.SimpleInstrumentation; import graphql.execution.instrumentation.SimpleInstrumentationContext; import graphql.execution.instrumentation.parameters.InstrumentationExecutionParameters; import java.time.Clock; import java.time.Duration; import java.time.Instant; import lombok.RequiredArgsConstructor; import lombok.extern.slf4j.Slf4j; import org.springframework.stereotype.Component; @Slf4j @Component @RequiredArgsConstructor public class RequestLoggingInstrumentation extends SimpleInstrumentation { private final Clock clock; @Override public InstrumentationContext<ExecutionResult> beginExecution( InstrumentationExecutionParameters parameters) { var start = Instant.now(clock); log.info(\"Query: {} with variables: {}\", parameters.getQuery(), parameters.getVariables()); return SimpleInstrumentationContext.whenCompleted((executionResult, throwable) -> { var duration = Duration.between(start, Instant.now(clock)); if (throwable == null) { log.info(\"Completed successfully in: {}\", duration); } else { log.warn(\"Failed in: {}\", duration, throwable); } }); } }","dependencies":[]}}
{"project_id":75,"chunk_id":0,"content":{"main_file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\listener\\LoggingListener.java","main_file_content":"package com.learn.graphql.listener; import graphql.kickstart.servlet.core.GraphQLServletListener; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import lombok.extern.slf4j.Slf4j; import org.springframework.stereotype.Component; @Slf4j @Component public class LoggingListener implements GraphQLServletListener { private static final RequestCallback ON_FINALLY_LISTENER = new RequestCallback() { @Override public void onFinally(HttpServletRequest request, HttpServletResponse response) { log.info(\"OnFinally: GraphQL query complete\"); } }; @Override public RequestCallback onRequest(HttpServletRequest request, HttpServletResponse response) { return ON_FINALLY_LISTENER; } }","dependencies":[]}}
{"project_id":75,"chunk_id":0,"content":{"main_file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\publisher\\BankAccountPublisher.java","main_file_content":"package com.learn.graphql.publisher; import com.learn.graphql.domain.bank.BankAccount; import java.util.UUID; import lombok.extern.slf4j.Slf4j; import org.reactivestreams.Publisher; import org.springframework.stereotype.Component; import reactor.core.publisher.DirectProcessor; import reactor.core.publisher.FluxProcessor; import reactor.core.publisher.FluxSink; @Slf4j @Component public class BankAccountPublisher { private final FluxProcessor<BankAccount, BankAccount> processor; private final FluxSink<BankAccount> sink; public BankAccountPublisher() { this.processor = DirectProcessor.<BankAccount>create().serialize(); this.sink = processor.sink(); } public void publish(BankAccount bankAccount) { sink.next(bankAccount); } public Publisher<BankAccount> getBankAccountPublisher() { return processor.map(bankAccount -> { log.info(\"Publishing global subscription update for Bank Account {}\", bankAccount); return bankAccount; }); } public Publisher<BankAccount> getBankAccountPublisherFor(UUID id) { return processor .filter(bankAccount -> id.equals(bankAccount.getId())) .map(bankAccount -> { log.info(\"Publishing individual subscription update for Bank Account {}\", bankAccount); return bankAccount; }); } }","dependencies":[{"file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\domain\\bank\\BankAccount.java","file_content":"package com.learn.graphql.domain.bank; import java.math.BigDecimal; import java.time.LocalDate; import java.time.ZonedDateTime; import java.util.UUID; import lombok.Builder; import lombok.Value; @Builder @Value public class BankAccount { UUID id; Client client; Currency currency; ZonedDateTime createdAt; LocalDate createdOn; BigDecimal balance; }"}]}}
{"project_id":75,"chunk_id":0,"content":{"main_file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\resolver\\bank\\mutation\\BankAccountMutation.java","main_file_content":"package com.learn.graphql.resolver.bank.mutation; import com.learn.graphql.domain.bank.BankAccount; import com.learn.graphql.domain.bank.Currency; import com.learn.graphql.domain.bank.input.CreateBankAccountInput; import com.learn.graphql.publisher.BankAccountPublisher; import graphql.kickstart.tools.GraphQLMutationResolver; import java.time.Clock; import java.time.LocalDate; import java.time.ZonedDateTime; import java.util.UUID; import javax.validation.Valid; import lombok.RequiredArgsConstructor; import lombok.extern.slf4j.Slf4j; import org.springframework.stereotype.Component; import org.springframework.validation.annotation.Validated; @Slf4j @Validated @Component @RequiredArgsConstructor public class BankAccountMutation implements GraphQLMutationResolver { private final Clock clock; private final BankAccountPublisher bankAccountPublisher; public BankAccount createBankAccount(@Valid CreateBankAccountInput input) { log.info(\"Creating bank account for {}\", input); return getBankAccount(UUID.randomUUID()); } public BankAccount updateBankAccount(UUID id, String name, int age) { log.info(\"Updating bank account for {}. Name: {}, age: {}\", id, name, age); return getBankAccount(id); } private BankAccount getBankAccount(UUID id) { var bankAccount = BankAccount.builder() .id(id) .currency(Currency.USD) .createdAt(ZonedDateTime.now(clock)) .createdOn(LocalDate.now(clock)) .build(); bankAccountPublisher.publish(bankAccount); return bankAccount; } }","dependencies":[{"file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\domain\\bank\\BankAccount.java","file_content":"package com.learn.graphql.domain.bank; import java.math.BigDecimal; import java.time.LocalDate; import java.time.ZonedDateTime; import java.util.UUID; import lombok.Builder; import lombok.Value; @Builder @Value public class BankAccount { UUID id; Client client; Currency currency; ZonedDateTime createdAt; LocalDate createdOn; BigDecimal balance; }"},{"file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\domain\\bank\\input\\CreateBankAccountInput.java","file_content":"package com.learn.graphql.domain.bank.input; import javax.validation.constraints.NotBlank; import lombok.Data; @Data public class CreateBankAccountInput { @NotBlank String firstName; int age; }"},{"file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\publisher\\BankAccountPublisher.java","file_content":"package com.learn.graphql.publisher; import com.learn.graphql.domain.bank.BankAccount; import java.util.UUID; import lombok.extern.slf4j.Slf4j; import org.reactivestreams.Publisher; import org.springframework.stereotype.Component; import reactor.core.publisher.DirectProcessor; import reactor.core.publisher.FluxProcessor; import reactor.core.publisher.FluxSink; @Slf4j @Component public class BankAccountPublisher { private final FluxProcessor<BankAccount, BankAccount> processor; private final FluxSink<BankAccount> sink; public BankAccountPublisher() { this.processor = DirectProcessor.<BankAccount>create().serialize(); this.sink = processor.sink(); } public void publish(BankAccount bankAccount) { sink.next(bankAccount); } public Publisher<BankAccount> getBankAccountPublisher() { return processor.map(bankAccount -> { log.info(\"Publishing global subscription update for Bank Account {}\", bankAccount); return bankAccount; }); } public Publisher<BankAccount> getBankAccountPublisherFor(UUID id) { return processor .filter(bankAccount -> id.equals(bankAccount.getId())) .map(bankAccount -> { log.info(\"Publishing individual subscription update for Bank Account {}\", bankAccount); return bankAccount; }); } }"}]}}
{"project_id":75,"chunk_id":0,"content":{"main_file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\resolver\\bank\\mutation\\UploadFileMutation.java","main_file_content":"package com.learn.graphql.resolver.bank.mutation; import graphql.kickstart.servlet.context.DefaultGraphQLServletContext; import graphql.kickstart.tools.GraphQLMutationResolver; import graphql.schema.DataFetchingEnvironment; import java.util.UUID; import lombok.extern.slf4j.Slf4j; import org.springframework.stereotype.Component; @Slf4j @Component public class UploadFileMutation implements GraphQLMutationResolver { public UUID uploadFile(DataFetchingEnvironment environment) { DefaultGraphQLServletContext context = environment.getContext(); context.getFileParts().forEach( part -> log.info(\"uploading: {} , size: {}\", part.getSubmittedFileName(), part.getSize())); return UUID.randomUUID(); } }","dependencies":[]}}
{"project_id":75,"chunk_id":0,"content":{"main_file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\resolver\\bank\\query\\BankAccountQueryResolver.java","main_file_content":"package com.learn.graphql.resolver.bank.query; import com.learn.graphql.connection.CursorUtil; import com.learn.graphql.context.CustomGraphQLContext; import com.learn.graphql.domain.bank.BankAccount; import com.learn.graphql.domain.bank.Currency; import com.learn.graphql.respository.BankAccountRepository; import graphql.kickstart.tools.GraphQLQueryResolver; import graphql.relay.Connection; import graphql.relay.DefaultConnection; import graphql.relay.DefaultEdge; import graphql.relay.DefaultPageInfo; import graphql.relay.Edge; import graphql.schema.DataFetchingEnvironment; import graphql.schema.SelectedField; import java.time.Clock; import java.time.LocalDate; import java.time.ZonedDateTime; import java.util.List; import java.util.UUID; import java.util.stream.Collectors; import lombok.RequiredArgsConstructor; import lombok.extern.slf4j.Slf4j; import org.jetbrains.annotations.Nullable; import org.springframework.security.access.prepost.PreAuthorize; import org.springframework.stereotype.Component; @Slf4j @Component @RequiredArgsConstructor public class BankAccountQueryResolver implements GraphQLQueryResolver { private final BankAccountRepository bankAccountRepository; private final CursorUtil cursorUtil; private final Clock clock; @PreAuthorize(\"hasAuthority('get:bank_account')\") public BankAccount bankAccount(UUID id, DataFetchingEnvironment environment) { log.info(\"Retrieving bank account id: {}\", id); CustomGraphQLContext context = environment.getContext(); log.info(\"User ID: {}\", context.getUserId()); var requestedFields = environment.getSelectionSet().getFields().stream() .map(SelectedField::getName).collect(Collectors.toUnmodifiableSet()); log.info(\"Requested Fields: {}\", requestedFields); return BankAccount.builder() .id(id) .currency(Currency.USD) .createdAt(ZonedDateTime.now(clock)) .createdOn(LocalDate.now(clock)) .build(); } public Connection<BankAccount> bankAccounts(int first, @Nullable String cursor) { List<Edge<BankAccount>> edges = getBankAccounts(cursor) .stream() .map(bankAccount -> new DefaultEdge<>(bankAccount, cursorUtil.createCursorWith(bankAccount.getId()))) .limit(first) .collect(Collectors.toUnmodifiableList()); var pageInfo = new DefaultPageInfo( cursorUtil.getFirstCursorFrom(edges), cursorUtil.getLastCursorFrom(edges), cursor != null, edges.size() >= first); return new DefaultConnection<>(edges, pageInfo); } public List<BankAccount> getBankAccounts(String cursor) { if (cursor == null) { return bankAccountRepository.getBankAccounts(); } return bankAccountRepository.getBankAccountsAfter(cursorUtil.decode(cursor)); } }","dependencies":[{"file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\connection\\CursorUtil.java","file_content":"package com.learn.graphql.connection; import graphql.relay.ConnectionCursor; import graphql.relay.DefaultConnectionCursor; import graphql.relay.Edge; import java.nio.charset.StandardCharsets; import java.util.Base64; import java.util.List; import java.util.UUID; import org.springframework.stereotype.Component; @Component public class CursorUtil { public ConnectionCursor createCursorWith(UUID id) { return new DefaultConnectionCursor( Base64.getEncoder().encodeToString(id.toString().getBytes(StandardCharsets.UTF_8))); } public UUID decode(String cursor) { return UUID.fromString(new String(Base64.getDecoder().decode(cursor))); } public <T> ConnectionCursor getFirstCursorFrom(List<Edge<T>> edges) { return edges.isEmpty() ? null : edges.get(0).getCursor(); } public <T> ConnectionCursor getLastCursorFrom(List<Edge<T>> edges) { return edges.isEmpty() ? null : edges.get(edges.size() - 1).getCursor(); } }"},{"file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\context\\CustomGraphQLContext.java","file_content":"package com.learn.graphql.context; import graphql.kickstart.servlet.context.GraphQLServletContext; import java.util.List; import java.util.Map; import java.util.Optional; import javax.security.auth.Subject; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.Part; import lombok.Getter; import lombok.RequiredArgsConstructor; import org.dataloader.DataLoaderRegistry; @Getter @RequiredArgsConstructor public class CustomGraphQLContext implements GraphQLServletContext { private final String userId; private final GraphQLServletContext context; @Override public List<Part> getFileParts() { return context.getFileParts(); } @Override public Map<String, List<Part>> getParts() { return context.getParts(); } @Override public HttpServletRequest getHttpServletRequest() { return context.getHttpServletRequest(); } @Override public HttpServletResponse getHttpServletResponse() { return context.getHttpServletResponse(); } @Override public Optional<Subject> getSubject() { return context.getSubject(); } @Override public DataLoaderRegistry getDataLoaderRegistry() { return context.getDataLoaderRegistry(); } }"},{"file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\domain\\bank\\BankAccount.java","file_content":"package com.learn.graphql.domain.bank; import java.math.BigDecimal; import java.time.LocalDate; import java.time.ZonedDateTime; import java.util.UUID; import lombok.Builder; import lombok.Value; @Builder @Value public class BankAccount { UUID id; Client client; Currency currency; ZonedDateTime createdAt; LocalDate createdOn; BigDecimal balance; }"},{"file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\respository\\BankAccountRepository.java","file_content":"package com.learn.graphql.respository; import static java.util.UUID.fromString; import com.learn.graphql.domain.bank.BankAccount; import com.learn.graphql.domain.bank.Currency; import java.time.ZonedDateTime; import java.util.Comparator; import java.util.List; import java.util.UUID; import java.util.stream.Collectors; import org.springframework.stereotype.Component; @Component public class BankAccountRepository { private final List<BankAccount> bankAccounts = List.of( BankAccount.builder() .id(fromString(\"c6aa269a-812b-49d5-b178-a739a1ed74cc\")) .currency(Currency.USD) .createdAt(ZonedDateTime.parse(\"2019-05-03T12:12:00+00:00\")) .build(), BankAccount.builder() .id(fromString(\"410f5919-e50b-4790-aae3-65d2d4b21c77\")) .currency(Currency.CHF) .createdAt(ZonedDateTime.parse(\"2020-12-03T10:15:30+00:00\")) .build(), BankAccount.builder() .id(fromString(\"024bb503-5c0f-4d60-aa44-db19d87042f4\")) .currency(Currency.CHF) .createdAt(ZonedDateTime.parse(\"2020-12-03T10:15:31+00:00\")) .build(), BankAccount.builder() .id(fromString(\"48e4a484-af2c-4366-8cd4-25330597473f\")) .currency(Currency.USD) .createdAt(ZonedDateTime.parse(\"2007-08-07T19:01:22+04:00\")) .build() ).stream() .sorted(Comparator.comparing(BankAccount::getId)) .collect(Collectors.toUnmodifiableList()); public List<BankAccount> getBankAccounts() { return bankAccounts; } public List<BankAccount> getBankAccountsAfter(UUID id) { return bankAccounts.stream() .dropWhile(bankAccount -> bankAccount.getId().compareTo(id) != 1) .collect(Collectors.toUnmodifiableList()); } }"}]}}
{"project_id":75,"chunk_id":0,"content":{"main_file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\resolver\\bank\\query\\BankAccountResolver.java","main_file_content":"package com.learn.graphql.resolver.bank.query; import com.learn.graphql.context.dataloader.DataLoaderRegistryFactory; import com.learn.graphql.domain.bank.Asset; import com.learn.graphql.domain.bank.BankAccount; import com.learn.graphql.domain.bank.Client; import graphql.kickstart.tools.GraphQLResolver; import graphql.schema.DataFetchingEnvironment; import java.math.BigDecimal; import java.util.List; import java.util.UUID; import java.util.concurrent.CompletableFuture; import java.util.concurrent.Executor; import lombok.RequiredArgsConstructor; import lombok.extern.slf4j.Slf4j; import org.dataloader.DataLoader; import org.springframework.security.access.prepost.PreAuthorize; import org.springframework.stereotype.Component; @Slf4j @Component @RequiredArgsConstructor public class BankAccountResolver implements GraphQLResolver<BankAccount> { private final Executor bankAccountExecutor; public CompletableFuture<List<Asset>> assets(BankAccount bankAccount) { return CompletableFuture.supplyAsync( () -> { log.info(\"Getting assets for bank account id {}\", bankAccount.getId()); return List.of(); }, bankAccountExecutor); } public Client client(BankAccount bankAccount) { log.info(\"Requesting client data for bank account id {}\", bankAccount.getId()); return Client.builder() .id(UUID.randomUUID()) .firstName(\"Philip\") .lastName(\"Starritt\") .build(); } @PreAuthorize(\"hasAuthority('get:bank_account_balance')\") public CompletableFuture<BigDecimal> balance(BankAccount bankAccount, DataFetchingEnvironment environment) { DataLoader<UUID, BigDecimal> dataLoader = environment .getDataLoader(DataLoaderRegistryFactory.BALANCE_DATA_LOADER); return dataLoader.load(bankAccount.getId(), bankAccount); } }","dependencies":[{"file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\domain\\bank\\Asset.java","file_content":"package com.learn.graphql.domain.bank; import java.util.UUID; import lombok.Builder; import lombok.Value; @Builder @Value public class Asset { UUID id; }"},{"file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\domain\\bank\\BankAccount.java","file_content":"package com.learn.graphql.domain.bank; import java.math.BigDecimal; import java.time.LocalDate; import java.time.ZonedDateTime; import java.util.UUID; import lombok.Builder; import lombok.Value; @Builder @Value public class BankAccount { UUID id; Client client; Currency currency; ZonedDateTime createdAt; LocalDate createdOn; BigDecimal balance; }"},{"file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\domain\\bank\\Client.java","file_content":"package com.learn.graphql.domain.bank; import java.util.List; import java.util.UUID; import lombok.Builder; import lombok.Value; @Value @Builder public class Client { UUID id; String firstName; List<String> middleNames; String lastName; }"}]}}
{"project_id":75,"chunk_id":0,"content":{"main_file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\resolver\\bank\\subscription\\BankAccountSubscription.java","main_file_content":"package com.learn.graphql.resolver.bank.subscription; import com.learn.graphql.config.security.AuthenticationConnectionListener; import com.learn.graphql.domain.bank.BankAccount; import com.learn.graphql.publisher.BankAccountPublisher; import graphql.kickstart.servlet.context.GraphQLWebSocketContext; import graphql.kickstart.tools.GraphQLSubscriptionResolver; import graphql.schema.DataFetchingEnvironment; import java.util.UUID; import lombok.RequiredArgsConstructor; import lombok.extern.slf4j.Slf4j; import org.reactivestreams.Publisher; import org.springframework.security.access.prepost.PreAuthorize; import org.springframework.security.core.Authentication; import org.springframework.security.core.context.SecurityContextHolder; import org.springframework.stereotype.Component; @Slf4j @Component @RequiredArgsConstructor public class BankAccountSubscription implements GraphQLSubscriptionResolver { private final BankAccountPublisher bankAccountPublisher; @PreAuthorize(\"hasAuthority('get:bank_account')\") public Publisher<BankAccount> bankAccounts() { return bankAccountPublisher.getBankAccountPublisher(); } @PreAuthorize(\"hasAuthority('get:bank_account')\") public Publisher<BankAccount> bankAccount(UUID id, DataFetchingEnvironment e) { log.info(\"Creating bank account publisher for user Id: {}\", SecurityContextHolder.getContext().getAuthentication().getPrincipal()); GraphQLWebSocketContext context = getContext(e); var authentication = (Authentication) context.getSession().getUserProperties() .get(AuthenticationConnectionListener.AUTHENTICATION); log.info(\"Creating bank account publisher for user Id: {}\", authentication.getPrincipal()); return bankAccountPublisher.getBankAccountPublisherFor(id); } private <T> T getContext(DataFetchingEnvironment e) { return e.getContext(); } }","dependencies":[{"file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\domain\\bank\\BankAccount.java","file_content":"package com.learn.graphql.domain.bank; import java.math.BigDecimal; import java.time.LocalDate; import java.time.ZonedDateTime; import java.util.UUID; import lombok.Builder; import lombok.Value; @Builder @Value public class BankAccount { UUID id; Client client; Currency currency; ZonedDateTime createdAt; LocalDate createdOn; BigDecimal balance; }"},{"file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\publisher\\BankAccountPublisher.java","file_content":"package com.learn.graphql.publisher; import com.learn.graphql.domain.bank.BankAccount; import java.util.UUID; import lombok.extern.slf4j.Slf4j; import org.reactivestreams.Publisher; import org.springframework.stereotype.Component; import reactor.core.publisher.DirectProcessor; import reactor.core.publisher.FluxProcessor; import reactor.core.publisher.FluxSink; @Slf4j @Component public class BankAccountPublisher { private final FluxProcessor<BankAccount, BankAccount> processor; private final FluxSink<BankAccount> sink; public BankAccountPublisher() { this.processor = DirectProcessor.<BankAccount>create().serialize(); this.sink = processor.sink(); } public void publish(BankAccount bankAccount) { sink.next(bankAccount); } public Publisher<BankAccount> getBankAccountPublisher() { return processor.map(bankAccount -> { log.info(\"Publishing global subscription update for Bank Account {}\", bankAccount); return bankAccount; }); } public Publisher<BankAccount> getBankAccountPublisherFor(UUID id) { return processor .filter(bankAccount -> id.equals(bankAccount.getId())) .map(bankAccount -> { log.info(\"Publishing individual subscription update for Bank Account {}\", bankAccount); return bankAccount; }); } }"}]}}
{"project_id":75,"chunk_id":0,"content":{"main_file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\respository\\BankAccountRepository.java","main_file_content":"package com.learn.graphql.respository; import static java.util.UUID.fromString; import com.learn.graphql.domain.bank.BankAccount; import com.learn.graphql.domain.bank.Currency; import java.time.ZonedDateTime; import java.util.Comparator; import java.util.List; import java.util.UUID; import java.util.stream.Collectors; import org.springframework.stereotype.Component; @Component public class BankAccountRepository { private final List<BankAccount> bankAccounts = List.of( BankAccount.builder() .id(fromString(\"c6aa269a-812b-49d5-b178-a739a1ed74cc\")) .currency(Currency.USD) .createdAt(ZonedDateTime.parse(\"2019-05-03T12:12:00+00:00\")) .build(), BankAccount.builder() .id(fromString(\"410f5919-e50b-4790-aae3-65d2d4b21c77\")) .currency(Currency.CHF) .createdAt(ZonedDateTime.parse(\"2020-12-03T10:15:30+00:00\")) .build(), BankAccount.builder() .id(fromString(\"024bb503-5c0f-4d60-aa44-db19d87042f4\")) .currency(Currency.CHF) .createdAt(ZonedDateTime.parse(\"2020-12-03T10:15:31+00:00\")) .build(), BankAccount.builder() .id(fromString(\"48e4a484-af2c-4366-8cd4-25330597473f\")) .currency(Currency.USD) .createdAt(ZonedDateTime.parse(\"2007-08-07T19:01:22+04:00\")) .build() ).stream() .sorted(Comparator.comparing(BankAccount::getId)) .collect(Collectors.toUnmodifiableList()); public List<BankAccount> getBankAccounts() { return bankAccounts; } public List<BankAccount> getBankAccountsAfter(UUID id) { return bankAccounts.stream() .dropWhile(bankAccount -> bankAccount.getId().compareTo(id) != 1) .collect(Collectors.toUnmodifiableList()); } }","dependencies":[{"file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\domain\\bank\\BankAccount.java","file_content":"package com.learn.graphql.domain.bank; import java.math.BigDecimal; import java.time.LocalDate; import java.time.ZonedDateTime; import java.util.UUID; import lombok.Builder; import lombok.Value; @Builder @Value public class BankAccount { UUID id; Client client; Currency currency; ZonedDateTime createdAt; LocalDate createdOn; BigDecimal balance; }"}]}}
{"project_id":75,"chunk_id":0,"content":{"main_file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\service\\BalanceService.java","main_file_content":"package com.learn.graphql.service; import com.learn.graphql.domain.bank.BankAccount; import java.math.BigDecimal; import java.util.Map; import java.util.UUID; import lombok.extern.slf4j.Slf4j; import org.springframework.security.core.context.SecurityContextHolder; import org.springframework.stereotype.Service; @Slf4j @Service public class BalanceService { public Map<UUID, BigDecimal> getBalanceFor(Map<UUID, BankAccount> bankAccountIds, String userId) { log.info(\"Requesting batch bank account ids: {} for user Id: {}\", bankAccountIds, userId); log.info(\"User ID: {}\", SecurityContextHolder.getContext().getAuthentication().getPrincipal()); var ids = bankAccountIds.keySet(); return Map.of( UUID.fromString(\"c6aa269a-812b-49d5-b178-a739a1ed74cc\"), BigDecimal.ONE, UUID.fromString(\"48e4a484-af2c-4366-8cd4-25330597473f\"), new BigDecimal(\"23431.22\")); } }","dependencies":[{"file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\domain\\bank\\BankAccount.java","file_content":"package com.learn.graphql.domain.bank; import java.math.BigDecimal; import java.time.LocalDate; import java.time.ZonedDateTime; import java.util.UUID; import lombok.Builder; import lombok.Value; @Builder @Value public class BankAccount { UUID id; Client client; Currency currency; ZonedDateTime createdAt; LocalDate createdOn; BigDecimal balance; }"}]}}
{"project_id":75,"chunk_id":0,"content":{"main_file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\util\\ExecutorFactory.java","main_file_content":"package com.learn.graphql.util; import java.util.concurrent.Executor; import lombok.AccessLevel; import lombok.RequiredArgsConstructor; import org.springframework.core.task.TaskDecorator; import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor; import org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor; import org.springframework.stereotype.Component; @Component @RequiredArgsConstructor(access = AccessLevel.PRIVATE) public final class ExecutorFactory { private final TaskDecorator mdcContextTaskDecorator; public Executor newExecutor() { var executor = new ThreadPoolTaskExecutor(); executor.setCorePoolSize(Runtime.getRuntime().availableProcessors()); executor.setMaxPoolSize(Runtime.getRuntime().availableProcessors()); executor.setKeepAliveSeconds(0); executor.setTaskDecorator(mdcContextTaskDecorator); executor.initialize(); return new DelegatingSecurityContextAsyncTaskExecutor(executor); } }","dependencies":[]}}
{"project_id":75,"chunk_id":0,"content":{"main_file_path":"learn-spring-boot-graphql-master\\src\\main\\java\\com\\learn\\graphql\\util\\MdcContextTaskDecorator.java","main_file_content":"package com.learn.graphql.util; import graphql.kickstart.servlet.AsyncTaskDecorator; import org.slf4j.MDC; import org.springframework.core.task.TaskDecorator; import org.springframework.stereotype.Component; @Component public class MdcContextTaskDecorator implements AsyncTaskDecorator, TaskDecorator { @Override public Runnable decorate(Runnable runnable) { var mdcContext = MDC.getCopyOfContextMap(); return () -> { try { MDC.setContextMap(mdcContext); runnable.run(); } finally { MDC.clear(); } }; } }","dependencies":[]}}
{"project_id":76,"chunk_id":0,"content":{"main_file_path":"Leetcode\\BasicCalculator224.java","main_file_content":"public class BasicCalculator224 { public int calculate(String s) { int L = s.length(); int result = 0; int start = 0; boolean isNum = false; boolean doPlus = true; for (int i=0; i<L; i++) { char c = s.charAt(i); if (isDigit(c) && !isNum) { start = i; isNum = true; continue; } if (isDigit(c)) continue; if (isNum) { result = doCal(s, result, start, i, doPlus); isNum = false; } if (isPlus(c)) { doPlus = true; } else if (isMunis(c)) { doPlus = false; } else if (isOpen(c)) { List<Integer> l = calculate(s, i+1, L); result = doCal(result, l.get(0), doPlus); i = l.get(1); } } if (isNum) { return doCal(s, result, start, L, doPlus); } return result; } private List<Integer> calculate(String s, int from, int L) { int result = 0; int start = from; int to = from; boolean isNum = false; boolean doPlus = true; for (int i=from; i<L; i++) { char c = s.charAt(i); if (isDigit(c) && !isNum) { start = i; isNum = true; continue; } if (isDigit(c)) continue; if (isNum) { result = doCal(s, result, start, i, doPlus); isNum = false; } if (isPlus(c)) { doPlus = true; } else if (isMunis(c)) { doPlus = false; } else if (isOpen(c)) { List<Integer> l = calculate(s, i+1, L); result = doCal(result, l.get(0), doPlus); i = l.get(1); } else { to = i; break; } } if (isNum) { return Arrays.asList(doCal(s, result, start, to, doPlus), to); } return Arrays.asList(result, to); } private int doCal(String s, int previous, int start, int end, boolean doPlus) { int num = Integer.parseInt(s.substring(start, end)); return doCal(previous, num, doPlus); } private int doCal(int previous, int num, boolean doPlus) { if (doPlus) { return previous + num; } else { return previous - num; } } private boolean isPlus(char c) { return c == '+'; } private boolean isMunis(char c) { return c == '-'; } private boolean isOpen(char c) { return c == '('; } private boolean isClose(char c) { return c == ')'; } private boolean isDigit(char c) { return c >= '0' && c <= '9'; } private boolean isSpace(char c) { return c == ' '; } public int calculate2(String s) { Stack<Integer> stack = new Stack<Integer>(); int result = 0; int number = 0; int sign = 1; for(int i = 0; i < s.length(); i++){ char c = s.charAt(i); if(Character.isDigit(c)){ number = 10 * number + (int)(c - '0'); }else if(c == '+'){ result += sign * number; number = 0; sign = 1; }else if(c == '-'){ result += sign * number; number = 0; sign = -1; }else if(c == '('){ stack.push(result); stack.push(sign); sign = 1; result = 0; }else if(c == ')'){ result += sign * number; number = 0; result *= stack.pop(); result += stack.pop(); } } if(number != 0) result += sign * number; return result; } public int calculate3(String s) { char[] chars = s.toCharArray(); int i = 0; int N = chars.length; int sign = 1; Stack<String> stack = new Stack<>(); while (i < N) { char ch = chars[i]; if (ch == ' ') { i++; } else if (ch == '+') { sign = 1; i++; } else if (ch == '-') { sign = -1; i++; } else if (ch == '(') { stack.push((sign == 1 ? \"+\" : \"-\") + Character.toString(ch)); sign = 1; i++; } else if (ch == ')') { int local = 0; while (!stack.isEmpty() && !stack.peek().endsWith(\"(\")) { local += Integer.valueOf(stack.pop()); } if (stack.isEmpty()) { stack.push(Integer.toString(local)); } else { String op = stack.pop(); if (op.startsWith(\"+\")) { stack.push(Integer.toString(local)); } else { stack.push(Integer.toString(-local)); } } i++; } else { int j = getNum(chars, i); stack.push((sign == 1 ? \"+\" : \"-\") + s.substring(i, j)); i = j; } } int res = 0; while (!stack.isEmpty()) res += Integer.valueOf(stack.pop()); return res; } private int getNum(char[] chars, int i) { int j = i; while (j < chars.length && Character.isDigit(chars[j])) j++; return j; } public int calculate4(String s) { int pre = 0, curr = 0, sign = 1, op = 0, num = 0; for (int i = 0; i < s.length(); i++) { if (Character.isDigit(s.charAt(i))) { num = num * 10 + (s.charAt(i) - '0'); if (i == s.length() - 1 || !Character.isDigit(s.charAt(i + 1))) { curr = (op == 0 ? num : (op == 1 ? curr * num : curr / num)); } } else if (s.charAt(i) == '*' || s.charAt(i) == '/') { op = (s.charAt(i) == '*' ? 1 : -1); num = 0; } else if (s.charAt(i) == '+' || s.charAt(i) == '-') { pre += sign * curr; sign = (s.charAt(i) == '+' ? 1 : -1); op = 0; num = 0; } } return pre + sign * curr; } }","dependencies":[]}}
{"project_id":76,"chunk_id":0,"content":{"main_file_path":"Leetcode\\BasicCalculatorII227.java","main_file_content":"public class BasicCalculatorII227 { public int calculate(String s) { char[] chars = s.toCharArray(); int N = s.length(); int res = 0; int i = 0; while (i < N && chars[i] == ' ') i++; int j = getNum(chars, i); int num = Integer.valueOf(s.substring(i, j)); i = j; while (i < N) { while (i < N && chars[i] == ' ') i++; if (i == N) break; char op = chars[i]; i++; while (i < N && chars[i] == ' ') i++; if (i == N) break; j = getNum(chars, i); int curr = Integer.valueOf(s.substring(i, j)); i = j; if (op == '+') { res += num; num = curr; } else if (op == '-') { res += num; num = -curr; } else if (op == '*') { num *= curr; } else { num /= curr; } } return res + num; } private int getNum(char[] chars, int i) { int j = i; while (j < chars.length && Character.isDigit(chars[j])) { j++; } return j; } }","dependencies":[]}}
{"project_id":76,"chunk_id":0,"content":{"main_file_path":"Leetcode\\Graph\\Dijkastra.java","main_file_content":"public class Dijkstra { public int[] shortestDistancesFrom(int[][] graph, int src) { if (graph == null || graph.length == 0 || graph[0].length == 0) return new int[0]; int len = graph.length; int[] dist = new int[len]; Set<Integer> sptSet = new HashSet[len]; for (int i = 0; i < len; i++) { dist[i] = Integer.MAX_VALUE; } dist[src] = 0; while (sptSet.size() < len) { int u = extractMin(dist, sptSet); sptSet.add(u); for (int v=0; v<len; v++) { if (!sptSet.contains(v) && graph[u][v] > 0 && dist[u] != Integer.MAX_VALUE && dist[u] + graph[u][v] < dist[v]) { dist[v] = dist[u] + graph[u][v]; } } } return dist; } private int extractMin(int[] dist, Set<Integer> sptSet) { int minIdx = -1; int minVal = Integer.MAX_VALUE; for (int i=0; i<dist.length; i++) { if (!sptSet.contains(i) && dist[i] < minVal) { minIdx = i; minVal = dist[i]; } } return minIdx; } public int shortestDistance(int[][] graph, int src, int dest) { if (graph == null || graph.length == 0 || graph[0].length == 0) return new int[0]; int len = graph.length; int[] dist = new int[len]; Set<Integer> sptSet = new HashSet[len]; for (int i = 0; i < len; i++) { dist[i] = Integer.MAX_VALUE; } dist[src] = 0; while (sptSet.size() < len) { int u = minDistance(dist, sptSet); if (u = target) return dist[u]; sptSet.add(u); for (int v=0; v<len; v++) { if (!sptSet.contains(v) && graph[u][v] > 0 && dist[u] != Integer.MAX_VALUE && dist[u] + graph[u][v] < dist[v]) { dist[v] = dist[u] + graph[u][v]; } } } return -1; } public List<Integer> shortestPath(int[][] graph, int src, int dest) { if (graph == null || graph.length == 0 || graph[0].length == 0) return new int[0]; int len = graph.length; int[] dist = new int[len]; int[] parent = new int[len]; Set<Integer> sptSet = new HashSet[len]; for (int i = 0; i < len; i++) { dist[i] = Integer.MAX_VALUE; parent[i] = i; } dist[src] = 0; while (sptSet.size() < len) { int u = extractMin(dist, sptSet); if (u = target) return constructShortestPath(parent, src, dest); sptSet.add(u); for (int v=0; v<len; v++) { if (!sptSet.contains(v) && graph[u][v] > 0 && dist[u] != Integer.MAX_VALUE && dist[u] + graph[u][v] < dist[v]) { dist[v] = dist[u] + graph[u][v]; parent[v] = u; } } } return dist; } private List<Integer> constructShortestPath(int[] parent, int src, int dest) { LinkedList<Integer> path = new LinkedList<>(); path.add(dest); while (path.getFirst() != src) { int head = path.getFirst(); if (parent[head] == head) return new LinkedList<>(); path.addFirst(parent[head]); } return path; } }","dependencies":[]}}
{"project_id":76,"chunk_id":0,"content":{"main_file_path":"Leetcode\\Search\\BinarySearch.java","main_file_content":"public class Dijkstra { public int[] shortestDistancesFrom(int[][] graph, int src) { if (graph == null || graph.length == 0 || graph[0].length == 0) return new int[0]; int len = graph.length; int[] dist = new int[len]; Set<Integer> sptSet = new HashSet[len]; for (int i = 0; i < len; i++) { dist[i] = Integer.MAX_VALUE; } dist[src] = 0; while (sptSet.size() < len) { int u = extractMin(dist, sptSet); sptSet.add(u); for (int v=0; v<len; v++) { if (!sptSet.contains(v) && graph[u][v] > 0 && dist[u] != Integer.MAX_VALUE && dist[u] + graph[u][v] < dist[v]) { dist[v] = dist[u] + graph[u][v]; } } } return dist; } private int extractMin(int[] dist, Set<Integer> sptSet) { int minIdx = -1; int minVal = Integer.MAX_VALUE; for (int i=0; i<dist.length; i++) { if (!sptSet.contains(i) && dist[i] < minVal) { minIdx = i; minVal = dist[i]; } } return minIdx; } public int shortestDistance(int[][] graph, int src, int dest) { if (graph == null || graph.length == 0 || graph[0].length == 0) return new int[0]; int len = graph.length; int[] dist = new int[len]; Set<Integer> sptSet = new HashSet[len]; for (int i = 0; i < len; i++) { dist[i] = Integer.MAX_VALUE; } dist[src] = 0; while (sptSet.size() < len) { int u = minDistance(dist, sptSet); if (u = target) return dist[u]; sptSet.add(u); for (int v=0; v<len; v++) { if (!sptSet.contains(v) && graph[u][v] > 0 && dist[u] != Integer.MAX_VALUE && dist[u] + graph[u][v] < dist[v]) { dist[v] = dist[u] + graph[u][v]; } } } return -1; } public List<Integer> shortestPath(int[][] graph, int src, int dest) { if (graph == null || graph.length == 0 || graph[0].length == 0) return new int[0]; int len = graph.length; int[] dist = new int[len]; int[] parent = new int[len]; Set<Integer> sptSet = new HashSet[len]; for (int i = 0; i < len; i++) { dist[i] = Integer.MAX_VALUE; parent[i] = i; } dist[src] = 0; while (sptSet.size() < len) { int u = extractMin(dist, sptSet); if (u = target) return constructShortestPath(parent, src, dest); sptSet.add(u); for (int v=0; v<len; v++) { if (!sptSet.contains(v) && graph[u][v] > 0 && dist[u] != Integer.MAX_VALUE && dist[u] + graph[u][v] < dist[v]) { dist[v] = dist[u] + graph[u][v]; parent[v] = u; } } } return dist; } private List<Integer> constructShortestPath(int[] parent, int src, int dest) { LinkedList<Integer> path = new LinkedList<>(); path.add(dest); while (path.getFirst() != src) { int head = path.getFirst(); if (parent[head] == head) return new LinkedList<>(); path.addFirst(parent[head]); } return path; } }","dependencies":[]}}
{"project_id":78,"chunk_id":0,"content":{"main_file_path":"ListScanner\\scanner.java","main_file_content":"import java.util.ArrayList; import java.util.Scanner; public class ToDoListApp { private static ArrayList<Task> taskList = new ArrayList<>(); private static int taskIdCounter = 1; public static void main(String[] args) { Scanner scanner = new Scanner(System.in); while (true) { System.out.println(\"To-Do List Application\"); System.out.println(\"1. Add Task\"); System.out.println(\"2. List Tasks\"); System.out.println(\"3. Mark Task as Completed\"); System.out.println(\"4. Remove Task\"); System.out.println(\"5. Exit\"); System.out.print(\"Enter your choice: \"); int choice = scanner.nextInt(); scanner.nextLine(); switch (choice) { case 1: addTask(scanner); break; case 2: listTasks(); break; case 3: markTaskAsCompleted(scanner); break; case 4: removeTask(scanner); break; case 5: System.out.println(\"Goodbye!\"); System.exit(0); default: System.out.println(\"Invalid choice. Please try again.\"); } } } private static void addTask(Scanner scanner) { System.out.print(\"Enter the task description: \"); String description = scanner.nextLine(); Task task = new Task(taskIdCounter, description); taskList.add(task); taskIdCounter++; System.out.println(\"Task added successfully!\"); } private static void listTasks() { if (taskList.isEmpty()) { System.out.println(\"No tasks to display.\"); } else { System.out.println(\"Tasks:\"); for (Task task : taskList) { System.out.println(task); } } } private static void markTaskAsCompleted(Scanner scanner) { System.out.print(\"Enter the task ID to mark as completed: \"); int taskId = scanner.nextInt(); scanner.nextLine(); for (Task task : taskList) { if (task.getId() == taskId) { task.setCompleted(true); System.out.println(\"Task marked as completed.\"); return; } } System.out.println(\"Task not found.\"); } private static void removeTask(Scanner scanner) { System.out.print(\"Enter the task ID to remove: \"); int taskId = scanner.nextInt(); scanner.nextLine(); for (Task task : taskList) { if (task.getId() == taskId) { taskList.remove(task); System.out.println(\"Task removed.\"); return; } } System.out.println(\"Task not found.\"); } } class Task { private int id; private String description; private boolean completed; public Task(int id, String description) { this.id = id; this.description = description; this.completed = false; } public int getId() { return id; } public String getDescription() { return description; } public boolean isCompleted() { return completed; } public void setCompleted(boolean completed) { this.completed = completed; } @Override public String toString() { return id + \". [\" + (completed ? \"X\" : \" \") + \"] \" + description; } }","dependencies":[]}}
{"project_id":79,"chunk_id":0,"content":{"main_file_path":"Lost and found application\\app\\src\\androidTest\\java\\com\\application\\bufinder\\ExampleInstrumentedTest.java","main_file_content":"package com.application.bufinder; import android.content.Context; import androidx.test.platform.app.InstrumentationRegistry; import androidx.test.ext.junit.runners.AndroidJUnit4; import org.junit.Test; import org.junit.runner.RunWith; import static org.junit.Assert.*; @RunWith(AndroidJUnit4.class) public class ExampleInstrumentedTest { @Test public void useAppContext() { Context appContext = InstrumentationRegistry.getInstrumentation().getTargetContext(); assertEquals(\"com.application.bufinder\", appContext.getPackageName()); } }","dependencies":[]}}
{"project_id":79,"chunk_id":0,"content":{"main_file_path":"Lost and found application\\app\\src\\main\\java\\com\\application\\bufinder\\EditProfile.java","main_file_content":"package com.application.bufinder; import android.app.Activity; import android.content.Intent; import android.net.Uri; import android.os.Bundle; import android.provider.MediaStore; import android.util.Log; import android.view.View; import android.widget.Button; import android.widget.EditText; import android.widget.ImageView; import android.widget.Toast; import androidx.annotation.NonNull; import androidx.appcompat.app.AppCompatActivity; import com.google.android.gms.tasks.OnFailureListener; import com.google.android.gms.tasks.OnSuccessListener; import com.google.firebase.auth.FirebaseAuth; import com.google.firebase.auth.FirebaseUser; import com.google.firebase.firestore.DocumentReference; import com.google.firebase.firestore.FirebaseFirestore; import com.google.firebase.storage.FirebaseStorage; import com.google.firebase.storage.StorageReference; import com.google.firebase.storage.UploadTask; import com.squareup.picasso.Picasso; import java.util.HashMap; import java.util.Map; public class EditProfile extends AppCompatActivity { public static final String TAG = \"TAG\"; EditText profileFullName,profileEmail,profilePhone; ImageView profileImageView; Button saveBtn; FirebaseAuth fAuth; FirebaseFirestore fStore; FirebaseUser user; StorageReference storageReference; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_edit_profile); Intent data = getIntent(); final String fullName = data.getStringExtra(\"fullName\"); String email = data.getStringExtra(\"email\"); String phone = data.getStringExtra(\"phone\"); fAuth = FirebaseAuth.getInstance(); fStore = FirebaseFirestore.getInstance(); user = fAuth.getCurrentUser(); storageReference = FirebaseStorage.getInstance().getReference(); profileFullName = findViewById(R.id.profileFullName); profileEmail = findViewById(R.id.profileEmailAddress); profilePhone = findViewById(R.id.profilePhoneNo); profileImageView = findViewById(R.id.profileImageView); saveBtn = findViewById(R.id.saveProfileInfo); StorageReference profileRef = storageReference.child(\"users/\"+fAuth.getCurrentUser().getUid()+\"/profile.jpg\"); profileRef.getDownloadUrl().addOnSuccessListener(new OnSuccessListener<Uri>() { @Override public void onSuccess(Uri uri) { Picasso.get().load(uri).into(profileImageView); } }); profileImageView.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { Intent openGalleryIntent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI); startActivityForResult(openGalleryIntent,1000); } }); saveBtn.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { if(profileFullName.getText().toString().isEmpty() || profileEmail.getText().toString().isEmpty() || profilePhone.getText().toString().isEmpty()){ Toast.makeText(EditProfile.this, \"One or Many fields are empty.\", Toast.LENGTH_SHORT).show(); return; } final String email = profileEmail.getText().toString(); user.updateEmail(email).addOnSuccessListener(new OnSuccessListener<Void>() { @Override public void onSuccess(Void aVoid) { DocumentReference docRef = fStore.collection(\"users\").document(user.getUid()); Map<String,Object> edited = new HashMap<>(); edited.put(\"email\",email); edited.put(\"fName\",profileFullName.getText().toString()); edited.put(\"phone\",profilePhone.getText().toString()); docRef.update(edited).addOnSuccessListener(new OnSuccessListener<Void>() { @Override public void onSuccess(Void aVoid) { Toast.makeText(EditProfile.this, \"Profile Updated\", Toast.LENGTH_SHORT).show(); startActivity(new Intent(getApplicationContext(),MainActivity.class)); finish(); } }); Toast.makeText(EditProfile.this, \"Email is changed.\", Toast.LENGTH_SHORT).show(); } }).addOnFailureListener(new OnFailureListener() { @Override public void onFailure(@NonNull Exception e) { Toast.makeText(EditProfile.this, e.getMessage(), Toast.LENGTH_SHORT).show(); } }); } }); profileEmail.setText(email); profileFullName.setText(fullName); profilePhone.setText(phone); Log.d(TAG, \"onCreate: \" + fullName + \" \" + email + \" \" + phone); } @Override protected void onActivityResult(int requestCode, int resultCode, @androidx.annotation.Nullable Intent data) { super.onActivityResult(requestCode, resultCode, data); if(requestCode == 1000){ if(resultCode == Activity.RESULT_OK){ Uri imageUri = data.getData(); uploadImageToFirebase(imageUri); } } } private void uploadImageToFirebase(Uri imageUri) { final StorageReference fileRef = storageReference.child(\"users/\"+fAuth.getCurrentUser().getUid()+\"/profile.jpg\"); fileRef.putFile(imageUri).addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() { @Override public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) { fileRef.getDownloadUrl().addOnSuccessListener(new OnSuccessListener<Uri>() { @Override public void onSuccess(Uri uri) { Picasso.get().load(uri).into(profileImageView); } }); } }).addOnFailureListener(new OnFailureListener() { @Override public void onFailure(@NonNull Exception e) { Toast.makeText(getApplicationContext(), \"Failed.\", Toast.LENGTH_SHORT).show(); } }); } }","dependencies":[{"file_path":"Lost and found application\\app\\src\\main\\java\\com\\application\\bufinder\\MainActivity.java","file_content":"package com.application.bufinder; import androidx.appcompat.app.AppCompatActivity; import androidx.fragment.app.Fragment; import androidx.fragment.app.FragmentManager; import androidx.fragment.app.FragmentTransaction; import android.annotation.SuppressLint; import android.os.Bundle; import com.application.bufinder.databinding.ActivityMainBinding; public class MainActivity extends AppCompatActivity { ActivityMainBinding binding; @SuppressLint(\"RestrictedApi\") @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); binding = ActivityMainBinding.inflate(getLayoutInflater()); setContentView(binding.getRoot()); replaceFragment(new LostFragment()); binding.bottomNavigationView.setOnNavigationItemSelectedListener(item -> { switch(item.getItemId()) { case R.id.lost: replaceFragment(new LostFragment()); break; case R.id.found: replaceFragment(new FoundFragment()); break; case R.id.settings: replaceFragment(new SettingsFragment()); break; } getSupportActionBar().setDefaultDisplayHomeAsUpEnabled(true); getSupportActionBar().setIcon(R.drawable.ic_action_name); return true; }); } private void replaceFragment(Fragment fragment){ FragmentManager fragmentManager=getSupportFragmentManager(); FragmentTransaction fragmentTransaction = ((FragmentManager) fragmentManager).beginTransaction(); fragmentTransaction.replace(R.id.frame_layout,fragment); fragmentTransaction.commit(); }}"}]}}
{"project_id":79,"chunk_id":0,"content":{"main_file_path":"Lost and found application\\app\\src\\main\\java\\com\\application\\bufinder\\FoundFragment.java","main_file_content":"package com.application.bufinder; import android.content.Intent; import android.os.Bundle; import androidx.annotation.NonNull; import androidx.appcompat.widget.PopupMenu; import androidx.fragment.app.Fragment; import androidx.recyclerview.widget.RecyclerView; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.EditText; import com.google.android.material.floatingactionbutton.FloatingActionButton; import com.google.firebase.auth.FirebaseAuth; import java.util.ArrayList; public class FoundFragment extends Fragment { RecyclerView list; String uid = FirebaseAuth.getInstance().getUid(); PopupMenu popupMenu; private static final String ARG_PARAM1 = \"param1\"; private static final String ARG_PARAM2 = \"param2\"; private String mParam1; private String mParam2; public FoundFragment() { } public static FoundFragment newInstance(String param1, String param2) { FoundFragment fragment = new FoundFragment(); Bundle args = new Bundle(); args.putString(ARG_PARAM1, param1); args.putString(ARG_PARAM2, param2); fragment.setArguments(args); return fragment; } @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); if (getArguments() != null) { mParam1 = getArguments().getString(ARG_PARAM1); mParam2 = getArguments().getString(ARG_PARAM2); } } @Override public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { View view = inflater.inflate(R.layout.fragment_found, container, false); FloatingActionButton fab = view.findViewById(R.id.floatingActionButton1); fab.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { Intent i = new Intent(getContext(),Found_Form.class); startActivity(i); } }); return view; } }","dependencies":[{"file_path":"Lost and found application\\app\\src\\main\\java\\com\\application\\bufinder\\Found_Form.java","file_content":"package com.application.bufinder; import androidx.appcompat.app.AppCompatActivity; import android.content.Intent; import android.os.Bundle; import android.view.View; import android.widget.AdapterView; import android.widget.ArrayAdapter; import android.widget.Button; import android.widget.Spinner; import com.application.bufinder.models.Journal; import com.google.android.gms.tasks.OnSuccessListener; import com.google.firebase.firestore.CollectionReference; import com.google.firebase.firestore.DocumentReference; import com.google.firebase.firestore.FirebaseFirestore; import java.util.ArrayList; import java.util.Arrays; public class Found_Form extends AppCompatActivity { Button button; Spinner sp_item, sp_sub, sp_brand, sp_colour; private final FirebaseFirestore db = FirebaseFirestore.getInstance(); private final CollectionReference collectionReference = db.collection(\"Found\"); ArrayList<String> arrayList_item; ArrayAdapter<String> arrayAdapter_item; ArrayList<String> arrayList_ad; ArrayList<String> arrayList_la; ArrayList<String> arrayList_w; ArrayList<String> arrayList_f; ArrayList<String> arrayList_b; ArrayList<String> arrayList_k; ArrayList<String> arrayList_se; ArrayList<String> arrayList_c; ArrayAdapter<String> arrayAdapter_sub; ArrayList<String> arrayList_adb; ArrayList<String> arrayList_lab; ArrayList<String> arrayList_wb; ArrayList<String> arrayList_fb; ArrayList<String> arrayList_bb; ArrayList<String> arrayList_kb; ArrayList<String> arrayList_seb; ArrayList<String> arrayList_cb; ArrayAdapter<String> arrayAdapter_brand; ArrayList<String> arrayList_colour; ArrayAdapter<String> arrayAdapter_colour; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_found_form); sp_item = (Spinner) findViewById(R.id.sp_item); sp_sub = (Spinner) findViewById(R.id.sp_sub); sp_brand = (Spinner) findViewById(R.id.sp_brand); sp_colour = (Spinner) findViewById(R.id.sp_colour); button = findViewById(R.id.button); arrayList_item = new ArrayList<>(Arrays.asList(\"Audio Devices\",\"Laptop and Accessories\",\"Wearables\", \"Footwear\", \"Bottles\", \"Keys\", \"Sports Equipment\", \"Any type of Card\")); arrayAdapter_item = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_item); sp_item.setAdapter(arrayAdapter_item); arrayList_ad = new ArrayList<>(Arrays.asList(\"Select Sub-type\", \"Speakers\", \"Over-ear Headphones\", \"On-ear Headphones\", \"Collar Earphones\", \"Wired Earphones\", \"True Wireless Earphones\", \"Can't Specify\")); arrayList_la = new ArrayList<>(Arrays.asList(\"Select Sub-type\", \"Laptop\", \"Keyboard\", \"Mouse\", \"Storage Devices\", \"Charger\", \"Laptop Sleeve\", \"Can't Specify\")); arrayList_w = new ArrayList<>(Arrays.asList(\"Select Sub-type\", \"Spectacles\", \"Watches\", \"Jewellery\", \"Caps\", \"Mufflers\", \"Gloves\", \"Can't Specify\")); arrayList_f = new ArrayList<>(Arrays.asList(\"Select Sub-type\",\"Shoes\", \"Slippers\", \"Sandals\", \"Can't Specify\")); arrayList_b = new ArrayList<>(Arrays.asList(\"Select Sub-type\",\"Steel Bottles\", \"Gym Bottles\", \"Can't Specify\")); arrayList_k = new ArrayList<>(Arrays.asList(\"Select Sub-type\",\"Car Keys\", \"Room Keys\", \"Locker Keys\", \"Can't Specify\")); arrayList_se = new ArrayList<>(Arrays.asList(\"Select Sub-type\",\"Racquets\", \"Ball\", \"Shuttle Cock\", \"Can't Specify\")); arrayList_c = new ArrayList<>(Arrays.asList(\"Select Sub-type\",\"Credit/Debit Cards\", \"ID Card\", \"Can't Specify\")); arrayList_adb = new ArrayList<>(Arrays.asList(\"Select Brand of Item\",\"Bose\", \"Apple\", \"Boat\", \"Noise\", \"MI\", \"Realme\",\"Can't Specify\")); arrayList_lab = new ArrayList<>(Arrays.asList(\"Select Brand of Item\",\"HP\", \"Dell\", \"Apple\", \"Lenovo\", \"Can't Specify\")); arrayList_wb = new ArrayList<>(Arrays.asList(\"Select Brand of Item\",\"Casio\", \"Titan Eye\", \"Oakley\", \"MI\", \"Apple\",\"Titan\",\"Rado\", \"G-Shock\", \"Can't Specify\")); arrayList_fb = new ArrayList<>(Arrays.asList(\"Select Brand of Item\",\"Nike\", \"Adidas\", \"Reebok\", \"Sparx\", \"Campus\", \"Crocs\", \"Decathlon\", \"Can't Specify\")); arrayList_bb = new ArrayList<>(Arrays.asList(\"Select Brand of Item\",\"Can't Specify\")); arrayList_kb = new ArrayList<>(Arrays.asList(\"Select Brand of Item\",\"Can't Specify\")); arrayList_seb = new ArrayList<>(Arrays.asList(\"Select Brand of Item\",\"Yonex\", \"Adidas\", \"Nike\", \"Puma\", \"Decathlon\", \"Cosco\", \"Can't Specify\")); arrayList_cb = new ArrayList<>(Arrays.asList(\"Select Brand of Item\",\"HDFC\", \"UCO Bank\", \"Slice\", \"Bennett ID\", \"Can't Specify\")); arrayList_colour = new ArrayList<>(Arrays.asList(\"Select a base colour\",\"Red\", \"Orange\", \"Pink\", \"Grey\", \"Black\", \"White\", \"Dark Green\", \"Light Green\", \"Yellow\", \"Light Blue\", \"Dark Blue\", \"Violet\")); sp_item.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent, View view, int position, long id) { if(position == 0){ arrayAdapter_sub = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_ad); arrayAdapter_brand = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_adb); } if(position == 1){ arrayAdapter_sub = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_la); arrayAdapter_brand = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_lab); } if(position == 2){ arrayAdapter_sub = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_w); arrayAdapter_brand = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_wb); } if(position == 3){ arrayAdapter_sub = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_f); arrayAdapter_brand = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_fb); } if(position == 4){ arrayAdapter_sub = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_b); arrayAdapter_brand = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_bb); } if(position == 5){ arrayAdapter_sub = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_k); arrayAdapter_brand = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_kb); } if(position == 6){ arrayAdapter_sub = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_se); arrayAdapter_brand = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_seb); } if(position == 7){ arrayAdapter_sub = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_c); arrayAdapter_brand = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_cb); } sp_sub.setAdapter(arrayAdapter_sub); sp_brand.setAdapter(arrayAdapter_brand); arrayAdapter_colour = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_colour); sp_colour.setAdapter(arrayAdapter_colour); } @Override public void onNothingSelected(AdapterView<?> parent) { } }); button.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { saveItem(); } }); } private void saveItem() { String Item = sp_item.getSelectedItem().toString().trim(); String Sub = sp_sub.getSelectedItem().toString().trim(); String Brand = sp_brand.getSelectedItem().toString().trim(); String Color = sp_colour.getSelectedItem().toString().trim(); Journal journal = new Journal(); journal.setItem(Item); journal.setSub(Sub); journal.setBrand(Brand); journal.setColor(Color); collectionReference.add(journal) .addOnSuccessListener(new OnSuccessListener<DocumentReference>() { @Override public void onSuccess(DocumentReference documentReference) { Intent i = new Intent(Found_Form.this,FoundFragment.class); startActivity(i); } }); } }"}]}}
{"project_id":79,"chunk_id":0,"content":{"main_file_path":"Lost and found application\\app\\src\\main\\java\\com\\application\\bufinder\\Found_Form.java","main_file_content":"package com.application.bufinder; import androidx.appcompat.app.AppCompatActivity; import android.content.Intent; import android.os.Bundle; import android.view.View; import android.widget.AdapterView; import android.widget.ArrayAdapter; import android.widget.Button; import android.widget.Spinner; import com.application.bufinder.models.Journal; import com.google.android.gms.tasks.OnSuccessListener; import com.google.firebase.firestore.CollectionReference; import com.google.firebase.firestore.DocumentReference; import com.google.firebase.firestore.FirebaseFirestore; import java.util.ArrayList; import java.util.Arrays; public class Found_Form extends AppCompatActivity { Button button; Spinner sp_item, sp_sub, sp_brand, sp_colour; private final FirebaseFirestore db = FirebaseFirestore.getInstance(); private final CollectionReference collectionReference = db.collection(\"Found\"); ArrayList<String> arrayList_item; ArrayAdapter<String> arrayAdapter_item; ArrayList<String> arrayList_ad; ArrayList<String> arrayList_la; ArrayList<String> arrayList_w; ArrayList<String> arrayList_f; ArrayList<String> arrayList_b; ArrayList<String> arrayList_k; ArrayList<String> arrayList_se; ArrayList<String> arrayList_c; ArrayAdapter<String> arrayAdapter_sub; ArrayList<String> arrayList_adb; ArrayList<String> arrayList_lab; ArrayList<String> arrayList_wb; ArrayList<String> arrayList_fb; ArrayList<String> arrayList_bb; ArrayList<String> arrayList_kb; ArrayList<String> arrayList_seb; ArrayList<String> arrayList_cb; ArrayAdapter<String> arrayAdapter_brand; ArrayList<String> arrayList_colour; ArrayAdapter<String> arrayAdapter_colour; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_found_form); sp_item = (Spinner) findViewById(R.id.sp_item); sp_sub = (Spinner) findViewById(R.id.sp_sub); sp_brand = (Spinner) findViewById(R.id.sp_brand); sp_colour = (Spinner) findViewById(R.id.sp_colour); button = findViewById(R.id.button); arrayList_item = new ArrayList<>(Arrays.asList(\"Audio Devices\",\"Laptop and Accessories\",\"Wearables\", \"Footwear\", \"Bottles\", \"Keys\", \"Sports Equipment\", \"Any type of Card\")); arrayAdapter_item = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_item); sp_item.setAdapter(arrayAdapter_item); arrayList_ad = new ArrayList<>(Arrays.asList(\"Select Sub-type\", \"Speakers\", \"Over-ear Headphones\", \"On-ear Headphones\", \"Collar Earphones\", \"Wired Earphones\", \"True Wireless Earphones\", \"Can't Specify\")); arrayList_la = new ArrayList<>(Arrays.asList(\"Select Sub-type\", \"Laptop\", \"Keyboard\", \"Mouse\", \"Storage Devices\", \"Charger\", \"Laptop Sleeve\", \"Can't Specify\")); arrayList_w = new ArrayList<>(Arrays.asList(\"Select Sub-type\", \"Spectacles\", \"Watches\", \"Jewellery\", \"Caps\", \"Mufflers\", \"Gloves\", \"Can't Specify\")); arrayList_f = new ArrayList<>(Arrays.asList(\"Select Sub-type\",\"Shoes\", \"Slippers\", \"Sandals\", \"Can't Specify\")); arrayList_b = new ArrayList<>(Arrays.asList(\"Select Sub-type\",\"Steel Bottles\", \"Gym Bottles\", \"Can't Specify\")); arrayList_k = new ArrayList<>(Arrays.asList(\"Select Sub-type\",\"Car Keys\", \"Room Keys\", \"Locker Keys\", \"Can't Specify\")); arrayList_se = new ArrayList<>(Arrays.asList(\"Select Sub-type\",\"Racquets\", \"Ball\", \"Shuttle Cock\", \"Can't Specify\")); arrayList_c = new ArrayList<>(Arrays.asList(\"Select Sub-type\",\"Credit/Debit Cards\", \"ID Card\", \"Can't Specify\")); arrayList_adb = new ArrayList<>(Arrays.asList(\"Select Brand of Item\",\"Bose\", \"Apple\", \"Boat\", \"Noise\", \"MI\", \"Realme\",\"Can't Specify\")); arrayList_lab = new ArrayList<>(Arrays.asList(\"Select Brand of Item\",\"HP\", \"Dell\", \"Apple\", \"Lenovo\", \"Can't Specify\")); arrayList_wb = new ArrayList<>(Arrays.asList(\"Select Brand of Item\",\"Casio\", \"Titan Eye\", \"Oakley\", \"MI\", \"Apple\",\"Titan\",\"Rado\", \"G-Shock\", \"Can't Specify\")); arrayList_fb = new ArrayList<>(Arrays.asList(\"Select Brand of Item\",\"Nike\", \"Adidas\", \"Reebok\", \"Sparx\", \"Campus\", \"Crocs\", \"Decathlon\", \"Can't Specify\")); arrayList_bb = new ArrayList<>(Arrays.asList(\"Select Brand of Item\",\"Can't Specify\")); arrayList_kb = new ArrayList<>(Arrays.asList(\"Select Brand of Item\",\"Can't Specify\")); arrayList_seb = new ArrayList<>(Arrays.asList(\"Select Brand of Item\",\"Yonex\", \"Adidas\", \"Nike\", \"Puma\", \"Decathlon\", \"Cosco\", \"Can't Specify\")); arrayList_cb = new ArrayList<>(Arrays.asList(\"Select Brand of Item\",\"HDFC\", \"UCO Bank\", \"Slice\", \"Bennett ID\", \"Can't Specify\")); arrayList_colour = new ArrayList<>(Arrays.asList(\"Select a base colour\",\"Red\", \"Orange\", \"Pink\", \"Grey\", \"Black\", \"White\", \"Dark Green\", \"Light Green\", \"Yellow\", \"Light Blue\", \"Dark Blue\", \"Violet\")); sp_item.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent, View view, int position, long id) { if(position == 0){ arrayAdapter_sub = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_ad); arrayAdapter_brand = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_adb); } if(position == 1){ arrayAdapter_sub = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_la); arrayAdapter_brand = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_lab); } if(position == 2){ arrayAdapter_sub = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_w); arrayAdapter_brand = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_wb); } if(position == 3){ arrayAdapter_sub = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_f); arrayAdapter_brand = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_fb); } if(position == 4){ arrayAdapter_sub = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_b); arrayAdapter_brand = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_bb); } if(position == 5){ arrayAdapter_sub = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_k); arrayAdapter_brand = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_kb); } if(position == 6){ arrayAdapter_sub = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_se); arrayAdapter_brand = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_seb); } if(position == 7){ arrayAdapter_sub = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_c); arrayAdapter_brand = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_cb); } sp_sub.setAdapter(arrayAdapter_sub); sp_brand.setAdapter(arrayAdapter_brand); arrayAdapter_colour = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_colour); sp_colour.setAdapter(arrayAdapter_colour); } @Override public void onNothingSelected(AdapterView<?> parent) { } }); button.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { saveItem(); } }); } private void saveItem() { String Item = sp_item.getSelectedItem().toString().trim(); String Sub = sp_sub.getSelectedItem().toString().trim(); String Brand = sp_brand.getSelectedItem().toString().trim(); String Color = sp_colour.getSelectedItem().toString().trim(); Journal journal = new Journal(); journal.setItem(Item); journal.setSub(Sub); journal.setBrand(Brand); journal.setColor(Color); collectionReference.add(journal) .addOnSuccessListener(new OnSuccessListener<DocumentReference>() { @Override public void onSuccess(DocumentReference documentReference) { Intent i = new Intent(Found_Form.this,FoundFragment.class); startActivity(i); } }); } }","dependencies":[{"file_path":"Lost and found application\\app\\src\\main\\java\\com\\application\\bufinder\\FoundFragment.java","file_content":"package com.application.bufinder; import android.content.Intent; import android.os.Bundle; import androidx.annotation.NonNull; import androidx.appcompat.widget.PopupMenu; import androidx.fragment.app.Fragment; import androidx.recyclerview.widget.RecyclerView; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.EditText; import com.google.android.material.floatingactionbutton.FloatingActionButton; import com.google.firebase.auth.FirebaseAuth; import java.util.ArrayList; public class FoundFragment extends Fragment { RecyclerView list; String uid = FirebaseAuth.getInstance().getUid(); PopupMenu popupMenu; private static final String ARG_PARAM1 = \"param1\"; private static final String ARG_PARAM2 = \"param2\"; private String mParam1; private String mParam2; public FoundFragment() { } public static FoundFragment newInstance(String param1, String param2) { FoundFragment fragment = new FoundFragment(); Bundle args = new Bundle(); args.putString(ARG_PARAM1, param1); args.putString(ARG_PARAM2, param2); fragment.setArguments(args); return fragment; } @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); if (getArguments() != null) { mParam1 = getArguments().getString(ARG_PARAM1); mParam2 = getArguments().getString(ARG_PARAM2); } } @Override public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { View view = inflater.inflate(R.layout.fragment_found, container, false); FloatingActionButton fab = view.findViewById(R.id.floatingActionButton1); fab.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { Intent i = new Intent(getContext(),Found_Form.class); startActivity(i); } }); return view; } }"},{"file_path":"Lost and found application\\app\\src\\main\\java\\com\\application\\bufinder\\models\\Journal.java","file_content":"package com.application.bufinder.models; public class Journal { private String Item; private String Sub; private String Brand; private String Color; public Journal() { } public Journal(String item, String sub, String brand, String color) { Item = item; Sub = sub; Brand = brand; Color = color; } public String getItem() { return Item; } public void setItem(String item) { Item = item; } public String getSub() { return Sub; } public void setSub(String sub) { Sub = sub; } public String getBrand() { return Brand; } public void setBrand(String brand) { Brand = brand; } public String getColor() { return Color; } public void setColor(String color) { Color = color; } }"}]}}
{"project_id":79,"chunk_id":0,"content":{"main_file_path":"Lost and found application\\app\\src\\main\\java\\com\\application\\bufinder\\Login.java","main_file_content":"package com.application.bufinder; import android.content.DialogInterface; import android.content.Intent; import android.os.Bundle; import android.text.TextUtils; import android.view.View; import android.widget.Button; import android.widget.EditText; import android.widget.ProgressBar; import android.widget.TextView; import android.widget.Toast; import androidx.annotation.NonNull; import androidx.appcompat.app.AlertDialog; import androidx.appcompat.app.AppCompatActivity; import com.google.android.gms.tasks.OnCompleteListener; import com.google.android.gms.tasks.OnFailureListener; import com.google.android.gms.tasks.OnSuccessListener; import com.google.android.gms.tasks.Task; import com.google.firebase.auth.AuthResult; import com.google.firebase.auth.FirebaseAuth; public class Login extends AppCompatActivity { EditText mEmail,mPassword; Button mLoginBtn; TextView mCreateBtn,forgotTextLink; ProgressBar progressBar; FirebaseAuth fAuth; private long backPressedTime; private Toast back; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_login); mEmail = findViewById(R.id.Email); mPassword = findViewById(R.id.password); progressBar = findViewById(R.id.progressBar); fAuth = FirebaseAuth.getInstance(); mLoginBtn = findViewById(R.id.loginBtn); mCreateBtn = findViewById(R.id.createText); forgotTextLink = findViewById(R.id.forgotPassword); mLoginBtn.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { String email = mEmail.getText().toString().trim(); String password = mPassword.getText().toString().trim(); if(TextUtils.isEmpty(email)){ mEmail.setError(\"Email is Required.\"); return; } if(TextUtils.isEmpty(password)){ mPassword.setError(\"Password is Required.\"); return; } if(password.length() < 6){ mPassword.setError(\"Password Must be >= 6 Characters\"); return; } progressBar.setVisibility(View.VISIBLE); fAuth.signInWithEmailAndPassword(email,password).addOnCompleteListener(new OnCompleteListener<AuthResult>() { @Override public void onComplete(@NonNull Task<AuthResult> task) { if(task.isSuccessful()){ Toast.makeText(Login.this, \"Logged in Successfully\", Toast.LENGTH_SHORT).show(); startActivity(new Intent(getApplicationContext(),MainActivity.class)); }else { Toast.makeText(Login.this, \"Error ! \" + task.getException().getMessage(), Toast.LENGTH_SHORT).show(); progressBar.setVisibility(View.GONE); } } }); } }); mCreateBtn.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { startActivity(new Intent(getApplicationContext(),Register.class)); } }); forgotTextLink.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { final EditText resetMail = new EditText(v.getContext()); final AlertDialog.Builder passwordResetDialog = new AlertDialog.Builder(v.getContext()); passwordResetDialog.setTitle(\"Reset Password ?\"); passwordResetDialog.setMessage(\"Enter Your Email To Received Reset Link.\"); passwordResetDialog.setView(resetMail); passwordResetDialog.setPositiveButton(\"Yes\", new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { String mail = resetMail.getText().toString(); fAuth.sendPasswordResetEmail(mail).addOnSuccessListener(new OnSuccessListener<Void>() { @Override public void onSuccess(Void aVoid) { Toast.makeText(Login.this, \"Reset Link Sent To Your Email.\", Toast.LENGTH_SHORT).show(); } }).addOnFailureListener(new OnFailureListener() { @Override public void onFailure(@NonNull Exception e) { Toast.makeText(Login.this, \"Error ! Reset Link is Not Sent\" + e.getMessage(), Toast.LENGTH_SHORT).show(); } }); } }); passwordResetDialog.setNegativeButton(\"No\", new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { } }); passwordResetDialog.create().show(); } }); } }","dependencies":[{"file_path":"Lost and found application\\app\\src\\main\\java\\com\\application\\bufinder\\MainActivity.java","file_content":"package com.application.bufinder; import androidx.appcompat.app.AppCompatActivity; import androidx.fragment.app.Fragment; import androidx.fragment.app.FragmentManager; import androidx.fragment.app.FragmentTransaction; import android.annotation.SuppressLint; import android.os.Bundle; import com.application.bufinder.databinding.ActivityMainBinding; public class MainActivity extends AppCompatActivity { ActivityMainBinding binding; @SuppressLint(\"RestrictedApi\") @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); binding = ActivityMainBinding.inflate(getLayoutInflater()); setContentView(binding.getRoot()); replaceFragment(new LostFragment()); binding.bottomNavigationView.setOnNavigationItemSelectedListener(item -> { switch(item.getItemId()) { case R.id.lost: replaceFragment(new LostFragment()); break; case R.id.found: replaceFragment(new FoundFragment()); break; case R.id.settings: replaceFragment(new SettingsFragment()); break; } getSupportActionBar().setDefaultDisplayHomeAsUpEnabled(true); getSupportActionBar().setIcon(R.drawable.ic_action_name); return true; }); } private void replaceFragment(Fragment fragment){ FragmentManager fragmentManager=getSupportFragmentManager(); FragmentTransaction fragmentTransaction = ((FragmentManager) fragmentManager).beginTransaction(); fragmentTransaction.replace(R.id.frame_layout,fragment); fragmentTransaction.commit(); }}"},{"file_path":"Lost and found application\\app\\src\\main\\java\\com\\application\\bufinder\\Register.java","file_content":"package com.application.bufinder; import android.content.Intent; import android.os.Bundle; import android.text.TextUtils; import android.util.Log; import android.view.View; import android.widget.Button; import android.widget.EditText; import android.widget.ProgressBar; import android.widget.TextView; import android.widget.Toast; import androidx.annotation.NonNull; import androidx.appcompat.app.AppCompatActivity; import com.google.android.gms.tasks.OnCompleteListener; import com.google.android.gms.tasks.OnFailureListener; import com.google.android.gms.tasks.OnSuccessListener; import com.google.android.gms.tasks.Task; import com.google.firebase.auth.AuthResult; import com.google.firebase.auth.FirebaseAuth; import com.google.firebase.auth.FirebaseUser; import com.google.firebase.firestore.DocumentReference; import com.google.firebase.firestore.FirebaseFirestore; import java.util.HashMap; import java.util.Map; public class Register extends AppCompatActivity { public static final String TAG = \"TAG\"; EditText mFullName,mEmail,mPassword,mPhone; Button mRegisterBtn; TextView mLoginBtn; FirebaseAuth fAuth; ProgressBar progressBar; FirebaseFirestore fStore; String userID; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_register); mFullName = findViewById(R.id.fullName); mEmail = findViewById(R.id.Email); mPassword = findViewById(R.id.password); mPhone = findViewById(R.id.phone); mRegisterBtn= findViewById(R.id.registerBtn); mLoginBtn = findViewById(R.id.createText); fAuth = FirebaseAuth.getInstance(); fStore = FirebaseFirestore.getInstance(); progressBar = findViewById(R.id.progressBar); if(fAuth.getCurrentUser() != null){ startActivity(new Intent(getApplicationContext(),MainActivity.class)); finish(); } mRegisterBtn.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { final String email = mEmail.getText().toString().trim(); String password = mPassword.getText().toString().trim(); final String fullName = mFullName.getText().toString(); final String phone = mPhone.getText().toString(); String namee = email; if(TextUtils.isEmpty(email)){ mEmail.setError(\"Email is Required.\"); return; } if(TextUtils.isEmpty(password)){ mPassword.setError(\"Password is Required.\"); return; } if(password.length() < 6){ mPassword.setError(\"Password Must be >= 6 Characters\"); return; } progressBar.setVisibility(View.VISIBLE); fAuth.createUserWithEmailAndPassword(email,password).addOnCompleteListener(new OnCompleteListener<AuthResult>() { @Override public void onComplete(@NonNull Task<AuthResult> task) { if(task.isSuccessful()){ FirebaseUser fuser = fAuth.getCurrentUser(); fuser.sendEmailVerification().addOnSuccessListener(new OnSuccessListener<Void>() { @Override public void onSuccess(Void aVoid) { Toast.makeText(Register.this, \"Verification Email Has been Sent.\", Toast.LENGTH_SHORT).show(); } }).addOnFailureListener(new OnFailureListener() { @Override public void onFailure(@NonNull Exception e) { Log.d(TAG, \"onFailure: Email not sent \" + e.getMessage()); } }); Toast.makeText(Register.this, \"User Created.\", Toast.LENGTH_SHORT).show(); userID = fAuth.getCurrentUser().getUid(); DocumentReference documentReference = fStore.collection(\"users\").document(userID); Map<String,Object> user = new HashMap<>(); user.put(\"fName\",fullName); user.put(\"email\",email); user.put(\"phone\",phone); documentReference.set(user).addOnSuccessListener(new OnSuccessListener<Void>() { @Override public void onSuccess(Void aVoid) { Log.d(TAG, \"onSuccess: user Profile is created for \"+ userID); } }).addOnFailureListener(new OnFailureListener() { @Override public void onFailure(@NonNull Exception e) { Log.d(TAG, \"onFailure: \" + e.toString()); } }); startActivity(new Intent(getApplicationContext(),MainActivity.class)); }else { Toast.makeText(Register.this, \"Error ! \" + task.getException().getMessage(), Toast.LENGTH_SHORT).show(); progressBar.setVisibility(View.GONE); } } }); } }); mLoginBtn.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { startActivity(new Intent(getApplicationContext(),Login.class)); } }); } }"}]}}
{"project_id":79,"chunk_id":0,"content":{"main_file_path":"Lost and found application\\app\\src\\main\\java\\com\\application\\bufinder\\LostFragment.java","main_file_content":"package com.application.bufinder; import android.content.Intent; import android.os.Bundle; import androidx.annotation.NonNull; import androidx.fragment.app.Fragment; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.Toast; import com.google.android.material.floatingactionbutton.FloatingActionButton; public class LostFragment extends Fragment { private static final String ARG_PARAM1 = \"param1\"; private static final String ARG_PARAM2 = \"param2\"; private String mParam1; private String mParam2; public LostFragment() { } public static LostFragment newInstance(String param1, String param2) { LostFragment fragment = new LostFragment(); Bundle args = new Bundle(); args.putString(ARG_PARAM1, param1); args.putString(ARG_PARAM2, param2); fragment.setArguments(args); return fragment; } @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); if (getArguments() != null) { mParam1 = getArguments().getString(ARG_PARAM1); mParam2 = getArguments().getString(ARG_PARAM2); } } @Override public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { View view = inflater.inflate(R.layout.fragment_lost, container, false); FloatingActionButton fab = view.findViewById(R.id.floatingActionButton); fab.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { Intent i = new Intent(getContext(),Lost_Form.class); startActivity(i); } }); return view; } }","dependencies":[{"file_path":"Lost and found application\\app\\src\\main\\java\\com\\application\\bufinder\\Lost_Form.java","file_content":"package com.application.bufinder; import androidx.appcompat.app.AppCompatActivity; import android.content.Intent; import android.os.Bundle; import android.view.View; import android.widget.AdapterView; import android.widget.ArrayAdapter; import android.widget.Button; import android.widget.Spinner; import com.application.bufinder.models.Journal; import com.google.android.gms.tasks.OnSuccessListener; import com.google.firebase.firestore.CollectionReference; import com.google.firebase.firestore.DocumentReference; import com.google.firebase.firestore.FirebaseFirestore; import java.util.ArrayList; import java.util.Arrays; public class Lost_Form extends AppCompatActivity { Button button1; Spinner sp_item1, sp_sub1, sp_brand1, sp_colour1; ArrayList<String> arrayList_item; ArrayAdapter<String> arrayAdapter_item; private final FirebaseFirestore db = FirebaseFirestore.getInstance(); private final CollectionReference collectionReference = db.collection(\"Lost\"); ArrayList<String> arrayList_ad; ArrayList<String> arrayList_la; ArrayList<String> arrayList_w; ArrayList<String> arrayList_f; ArrayList<String> arrayList_b; ArrayList<String> arrayList_k; ArrayList<String> arrayList_se; ArrayList<String> arrayList_c; ArrayAdapter<String> arrayAdapter_sub; ArrayList<String> arrayList_adb; ArrayList<String> arrayList_lab; ArrayList<String> arrayList_wb; ArrayList<String> arrayList_fb; ArrayList<String> arrayList_bb; ArrayList<String> arrayList_kb; ArrayList<String> arrayList_seb; ArrayList<String> arrayList_cb; ArrayAdapter<String> arrayAdapter_brand; ArrayList<String> arrayList_colour; ArrayAdapter<String> arrayAdapter_colour; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_lost_form); sp_item1 = (Spinner) findViewById(R.id.sp_item1); sp_sub1 = (Spinner) findViewById(R.id.sp_sub1); sp_brand1 = (Spinner) findViewById(R.id.sp_brand1); sp_colour1 = (Spinner) findViewById(R.id.sp_colour1); button1 = findViewById(R.id.button1); arrayList_item = new ArrayList<>(Arrays.asList(\"Audio Devices\",\"Laptop and Accessories\",\"Wearables\", \"Footwear\", \"Bottles\", \"Keys\", \"Sports Equipment\", \"Any type of Card\")); arrayAdapter_item = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_item); sp_item1.setAdapter(arrayAdapter_item); arrayList_ad = new ArrayList<>(Arrays.asList(\"Select Sub-type\", \"Speakers\", \"Over-ear Headphones\", \"On-ear Headphones\", \"Collar Earphones\", \"Wired Earphones\", \"True Wireless Earphones\", \"Other\")); arrayList_la = new ArrayList<>(Arrays.asList(\"Select Sub-type\", \"Laptop\", \"Keyboard\", \"Mouse\", \"Storage Devices\", \"Charger\", \"Laptop Sleeve\", \"Other\")); arrayList_w = new ArrayList<>(Arrays.asList(\"Select Sub-type\", \"Spectacles\", \"Watches\", \"Jewellery\", \"Caps\", \"Mufflers\", \"Gloves\", \"Other\")); arrayList_f = new ArrayList<>(Arrays.asList(\"Select Sub-type\",\"Shoes\", \"Slippers\", \"Sandals\", \"Other\")); arrayList_b = new ArrayList<>(Arrays.asList(\"Select Sub-type\",\"Steel Bottles\", \"Gym Bottles\", \"Other\")); arrayList_k = new ArrayList<>(Arrays.asList(\"Select Sub-type\",\"Car Keys\", \"Room Keys\", \"Locker Keys\", \"Other\")); arrayList_se = new ArrayList<>(Arrays.asList(\"Select Sub-type\",\"Racquets\", \"Ball\", \"Shuttle Cock\", \"Other\")); arrayList_c = new ArrayList<>(Arrays.asList(\"Select Sub-type\",\"Credit/Debit Cards\", \"ID Card\", \"Other\")); arrayList_adb = new ArrayList<>(Arrays.asList(\"Select Brand of Item\",\"Bose\", \"Apple\", \"Boat\", \"Noise\", \"MI\", \"Realme\",\"Other\")); arrayList_lab = new ArrayList<>(Arrays.asList(\"Select Brand of Item\",\"HP\", \"Dell\", \"Apple\", \"Lenovo\", \"Other\")); arrayList_wb = new ArrayList<>(Arrays.asList(\"Select Brand of Item\",\"Casio\", \"Titan Eye\", \"Oakley\", \"MI\", \"Apple\",\"Titan\",\"Rado\", \"G-Shock\", \"Other\")); arrayList_fb = new ArrayList<>(Arrays.asList(\"Select Brand of Item\",\"Nike\", \"Adidas\", \"Reebok\", \"Sparx\", \"Campus\", \"Crocs\", \"Decathlon\", \"Other\")); arrayList_bb = new ArrayList<>(Arrays.asList(\"Select Brand of Item\",\"Other\")); arrayList_kb = new ArrayList<>(Arrays.asList(\"Select Brand of Item\",\"Other\")); arrayList_seb = new ArrayList<>(Arrays.asList(\"Select Brand of Item\",\"Yonex\", \"Adidas\", \"Nike\", \"Puma\", \"Decathlon\", \"Cosco\", \"Other\")); arrayList_cb = new ArrayList<>(Arrays.asList(\"Select Brand of Item\",\"HDFC\", \"UCO Bank\", \"Slice\", \"Bennett ID\", \"Other\")); arrayList_colour = new ArrayList<>(Arrays.asList(\"Select a base colour\",\"Red\", \"Orange\", \"Pink\", \"Grey\", \"Black\", \"White\", \"Dark Green\", \"Light Green\", \"Yellow\", \"Light Blue\", \"Dark Blue\", \"Violet\")); sp_item1.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent, View view, int position, long id) { if(position == 0){ arrayAdapter_sub = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_ad); arrayAdapter_brand = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_adb); } if(position == 1){ arrayAdapter_sub = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_la); arrayAdapter_brand = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_lab); } if(position == 2){ arrayAdapter_sub = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_w); arrayAdapter_brand = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_wb); } if(position == 3){ arrayAdapter_sub = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_f); arrayAdapter_brand = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_fb); } if(position == 4){ arrayAdapter_sub = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_b); arrayAdapter_brand = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_bb); } if(position == 5){ arrayAdapter_sub = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_k); arrayAdapter_brand = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_kb); } if(position == 6){ arrayAdapter_sub = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_se); arrayAdapter_brand = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_seb); } if(position == 7){ arrayAdapter_sub = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_c); arrayAdapter_brand = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_cb); } sp_sub1.setAdapter(arrayAdapter_sub); sp_brand1.setAdapter(arrayAdapter_brand); arrayAdapter_colour = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_colour); sp_colour1.setAdapter(arrayAdapter_colour); } @Override public void onNothingSelected(AdapterView<?> parent) { } }); button1.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { saveItem(); } }); } private void saveItem() { String Item1 = sp_item1.getSelectedItem().toString().trim(); String Sub1 = sp_sub1.getSelectedItem().toString().trim(); String Brand1 = sp_brand1.getSelectedItem().toString().trim(); String Color1 = sp_colour1.getSelectedItem().toString().trim(); Journal journal = new Journal(); journal.setItem(Item1); journal.setSub(Sub1); journal.setBrand(Brand1); journal.setColor(Color1); collectionReference.add(journal) .addOnSuccessListener(new OnSuccessListener<DocumentReference>() { @Override public void onSuccess(DocumentReference documentReference) { Intent i1 = new Intent(Lost_Form.this,LostFragment.class); startActivity(i1); } }); } }"}]}}
{"project_id":79,"chunk_id":0,"content":{"main_file_path":"Lost and found application\\app\\src\\main\\java\\com\\application\\bufinder\\Lost_Form.java","main_file_content":"package com.application.bufinder; import androidx.appcompat.app.AppCompatActivity; import android.content.Intent; import android.os.Bundle; import android.view.View; import android.widget.AdapterView; import android.widget.ArrayAdapter; import android.widget.Button; import android.widget.Spinner; import com.application.bufinder.models.Journal; import com.google.android.gms.tasks.OnSuccessListener; import com.google.firebase.firestore.CollectionReference; import com.google.firebase.firestore.DocumentReference; import com.google.firebase.firestore.FirebaseFirestore; import java.util.ArrayList; import java.util.Arrays; public class Lost_Form extends AppCompatActivity { Button button1; Spinner sp_item1, sp_sub1, sp_brand1, sp_colour1; ArrayList<String> arrayList_item; ArrayAdapter<String> arrayAdapter_item; private final FirebaseFirestore db = FirebaseFirestore.getInstance(); private final CollectionReference collectionReference = db.collection(\"Lost\"); ArrayList<String> arrayList_ad; ArrayList<String> arrayList_la; ArrayList<String> arrayList_w; ArrayList<String> arrayList_f; ArrayList<String> arrayList_b; ArrayList<String> arrayList_k; ArrayList<String> arrayList_se; ArrayList<String> arrayList_c; ArrayAdapter<String> arrayAdapter_sub; ArrayList<String> arrayList_adb; ArrayList<String> arrayList_lab; ArrayList<String> arrayList_wb; ArrayList<String> arrayList_fb; ArrayList<String> arrayList_bb; ArrayList<String> arrayList_kb; ArrayList<String> arrayList_seb; ArrayList<String> arrayList_cb; ArrayAdapter<String> arrayAdapter_brand; ArrayList<String> arrayList_colour; ArrayAdapter<String> arrayAdapter_colour; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_lost_form); sp_item1 = (Spinner) findViewById(R.id.sp_item1); sp_sub1 = (Spinner) findViewById(R.id.sp_sub1); sp_brand1 = (Spinner) findViewById(R.id.sp_brand1); sp_colour1 = (Spinner) findViewById(R.id.sp_colour1); button1 = findViewById(R.id.button1); arrayList_item = new ArrayList<>(Arrays.asList(\"Audio Devices\",\"Laptop and Accessories\",\"Wearables\", \"Footwear\", \"Bottles\", \"Keys\", \"Sports Equipment\", \"Any type of Card\")); arrayAdapter_item = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_item); sp_item1.setAdapter(arrayAdapter_item); arrayList_ad = new ArrayList<>(Arrays.asList(\"Select Sub-type\", \"Speakers\", \"Over-ear Headphones\", \"On-ear Headphones\", \"Collar Earphones\", \"Wired Earphones\", \"True Wireless Earphones\", \"Other\")); arrayList_la = new ArrayList<>(Arrays.asList(\"Select Sub-type\", \"Laptop\", \"Keyboard\", \"Mouse\", \"Storage Devices\", \"Charger\", \"Laptop Sleeve\", \"Other\")); arrayList_w = new ArrayList<>(Arrays.asList(\"Select Sub-type\", \"Spectacles\", \"Watches\", \"Jewellery\", \"Caps\", \"Mufflers\", \"Gloves\", \"Other\")); arrayList_f = new ArrayList<>(Arrays.asList(\"Select Sub-type\",\"Shoes\", \"Slippers\", \"Sandals\", \"Other\")); arrayList_b = new ArrayList<>(Arrays.asList(\"Select Sub-type\",\"Steel Bottles\", \"Gym Bottles\", \"Other\")); arrayList_k = new ArrayList<>(Arrays.asList(\"Select Sub-type\",\"Car Keys\", \"Room Keys\", \"Locker Keys\", \"Other\")); arrayList_se = new ArrayList<>(Arrays.asList(\"Select Sub-type\",\"Racquets\", \"Ball\", \"Shuttle Cock\", \"Other\")); arrayList_c = new ArrayList<>(Arrays.asList(\"Select Sub-type\",\"Credit/Debit Cards\", \"ID Card\", \"Other\")); arrayList_adb = new ArrayList<>(Arrays.asList(\"Select Brand of Item\",\"Bose\", \"Apple\", \"Boat\", \"Noise\", \"MI\", \"Realme\",\"Other\")); arrayList_lab = new ArrayList<>(Arrays.asList(\"Select Brand of Item\",\"HP\", \"Dell\", \"Apple\", \"Lenovo\", \"Other\")); arrayList_wb = new ArrayList<>(Arrays.asList(\"Select Brand of Item\",\"Casio\", \"Titan Eye\", \"Oakley\", \"MI\", \"Apple\",\"Titan\",\"Rado\", \"G-Shock\", \"Other\")); arrayList_fb = new ArrayList<>(Arrays.asList(\"Select Brand of Item\",\"Nike\", \"Adidas\", \"Reebok\", \"Sparx\", \"Campus\", \"Crocs\", \"Decathlon\", \"Other\")); arrayList_bb = new ArrayList<>(Arrays.asList(\"Select Brand of Item\",\"Other\")); arrayList_kb = new ArrayList<>(Arrays.asList(\"Select Brand of Item\",\"Other\")); arrayList_seb = new ArrayList<>(Arrays.asList(\"Select Brand of Item\",\"Yonex\", \"Adidas\", \"Nike\", \"Puma\", \"Decathlon\", \"Cosco\", \"Other\")); arrayList_cb = new ArrayList<>(Arrays.asList(\"Select Brand of Item\",\"HDFC\", \"UCO Bank\", \"Slice\", \"Bennett ID\", \"Other\")); arrayList_colour = new ArrayList<>(Arrays.asList(\"Select a base colour\",\"Red\", \"Orange\", \"Pink\", \"Grey\", \"Black\", \"White\", \"Dark Green\", \"Light Green\", \"Yellow\", \"Light Blue\", \"Dark Blue\", \"Violet\")); sp_item1.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent, View view, int position, long id) { if(position == 0){ arrayAdapter_sub = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_ad); arrayAdapter_brand = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_adb); } if(position == 1){ arrayAdapter_sub = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_la); arrayAdapter_brand = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_lab); } if(position == 2){ arrayAdapter_sub = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_w); arrayAdapter_brand = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_wb); } if(position == 3){ arrayAdapter_sub = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_f); arrayAdapter_brand = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_fb); } if(position == 4){ arrayAdapter_sub = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_b); arrayAdapter_brand = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_bb); } if(position == 5){ arrayAdapter_sub = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_k); arrayAdapter_brand = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_kb); } if(position == 6){ arrayAdapter_sub = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_se); arrayAdapter_brand = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_seb); } if(position == 7){ arrayAdapter_sub = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_c); arrayAdapter_brand = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_cb); } sp_sub1.setAdapter(arrayAdapter_sub); sp_brand1.setAdapter(arrayAdapter_brand); arrayAdapter_colour = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_spinner_item, arrayList_colour); sp_colour1.setAdapter(arrayAdapter_colour); } @Override public void onNothingSelected(AdapterView<?> parent) { } }); button1.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { saveItem(); } }); } private void saveItem() { String Item1 = sp_item1.getSelectedItem().toString().trim(); String Sub1 = sp_sub1.getSelectedItem().toString().trim(); String Brand1 = sp_brand1.getSelectedItem().toString().trim(); String Color1 = sp_colour1.getSelectedItem().toString().trim(); Journal journal = new Journal(); journal.setItem(Item1); journal.setSub(Sub1); journal.setBrand(Brand1); journal.setColor(Color1); collectionReference.add(journal) .addOnSuccessListener(new OnSuccessListener<DocumentReference>() { @Override public void onSuccess(DocumentReference documentReference) { Intent i1 = new Intent(Lost_Form.this,LostFragment.class); startActivity(i1); } }); } }","dependencies":[{"file_path":"Lost and found application\\app\\src\\main\\java\\com\\application\\bufinder\\LostFragment.java","file_content":"package com.application.bufinder; import android.content.Intent; import android.os.Bundle; import androidx.annotation.NonNull; import androidx.fragment.app.Fragment; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.Toast; import com.google.android.material.floatingactionbutton.FloatingActionButton; public class LostFragment extends Fragment { private static final String ARG_PARAM1 = \"param1\"; private static final String ARG_PARAM2 = \"param2\"; private String mParam1; private String mParam2; public LostFragment() { } public static LostFragment newInstance(String param1, String param2) { LostFragment fragment = new LostFragment(); Bundle args = new Bundle(); args.putString(ARG_PARAM1, param1); args.putString(ARG_PARAM2, param2); fragment.setArguments(args); return fragment; } @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); if (getArguments() != null) { mParam1 = getArguments().getString(ARG_PARAM1); mParam2 = getArguments().getString(ARG_PARAM2); } } @Override public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { View view = inflater.inflate(R.layout.fragment_lost, container, false); FloatingActionButton fab = view.findViewById(R.id.floatingActionButton); fab.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { Intent i = new Intent(getContext(),Lost_Form.class); startActivity(i); } }); return view; } }"},{"file_path":"Lost and found application\\app\\src\\main\\java\\com\\application\\bufinder\\models\\Journal.java","file_content":"package com.application.bufinder.models; public class Journal { private String Item; private String Sub; private String Brand; private String Color; public Journal() { } public Journal(String item, String sub, String brand, String color) { Item = item; Sub = sub; Brand = brand; Color = color; } public String getItem() { return Item; } public void setItem(String item) { Item = item; } public String getSub() { return Sub; } public void setSub(String sub) { Sub = sub; } public String getBrand() { return Brand; } public void setBrand(String brand) { Brand = brand; } public String getColor() { return Color; } public void setColor(String color) { Color = color; } }"}]}}
{"project_id":79,"chunk_id":0,"content":{"main_file_path":"Lost and found application\\app\\src\\main\\java\\com\\application\\bufinder\\MainActivity.java","main_file_content":"package com.application.bufinder; import androidx.appcompat.app.AppCompatActivity; import androidx.fragment.app.Fragment; import androidx.fragment.app.FragmentManager; import androidx.fragment.app.FragmentTransaction; import android.annotation.SuppressLint; import android.os.Bundle; import com.application.bufinder.databinding.ActivityMainBinding; public class MainActivity extends AppCompatActivity { ActivityMainBinding binding; @SuppressLint(\"RestrictedApi\") @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); binding = ActivityMainBinding.inflate(getLayoutInflater()); setContentView(binding.getRoot()); replaceFragment(new LostFragment()); binding.bottomNavigationView.setOnNavigationItemSelectedListener(item -> { switch(item.getItemId()) { case R.id.lost: replaceFragment(new LostFragment()); break; case R.id.found: replaceFragment(new FoundFragment()); break; case R.id.settings: replaceFragment(new SettingsFragment()); break; } getSupportActionBar().setDefaultDisplayHomeAsUpEnabled(true); getSupportActionBar().setIcon(R.drawable.ic_action_name); return true; }); } private void replaceFragment(Fragment fragment){ FragmentManager fragmentManager=getSupportFragmentManager(); FragmentTransaction fragmentTransaction = ((FragmentManager) fragmentManager).beginTransaction(); fragmentTransaction.replace(R.id.frame_layout,fragment); fragmentTransaction.commit(); }}","dependencies":[{"file_path":"Lost and found application\\app\\src\\main\\java\\com\\application\\bufinder\\FoundFragment.java","file_content":"package com.application.bufinder; import android.content.Intent; import android.os.Bundle; import androidx.annotation.NonNull; import androidx.appcompat.widget.PopupMenu; import androidx.fragment.app.Fragment; import androidx.recyclerview.widget.RecyclerView; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.EditText; import com.google.android.material.floatingactionbutton.FloatingActionButton; import com.google.firebase.auth.FirebaseAuth; import java.util.ArrayList; public class FoundFragment extends Fragment { RecyclerView list; String uid = FirebaseAuth.getInstance().getUid(); PopupMenu popupMenu; private static final String ARG_PARAM1 = \"param1\"; private static final String ARG_PARAM2 = \"param2\"; private String mParam1; private String mParam2; public FoundFragment() { } public static FoundFragment newInstance(String param1, String param2) { FoundFragment fragment = new FoundFragment(); Bundle args = new Bundle(); args.putString(ARG_PARAM1, param1); args.putString(ARG_PARAM2, param2); fragment.setArguments(args); return fragment; } @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); if (getArguments() != null) { mParam1 = getArguments().getString(ARG_PARAM1); mParam2 = getArguments().getString(ARG_PARAM2); } } @Override public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { View view = inflater.inflate(R.layout.fragment_found, container, false); FloatingActionButton fab = view.findViewById(R.id.floatingActionButton1); fab.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { Intent i = new Intent(getContext(),Found_Form.class); startActivity(i); } }); return view; } }"},{"file_path":"Lost and found application\\app\\src\\main\\java\\com\\application\\bufinder\\LostFragment.java","file_content":"package com.application.bufinder; import android.content.Intent; import android.os.Bundle; import androidx.annotation.NonNull; import androidx.fragment.app.Fragment; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.Toast; import com.google.android.material.floatingactionbutton.FloatingActionButton; public class LostFragment extends Fragment { private static final String ARG_PARAM1 = \"param1\"; private static final String ARG_PARAM2 = \"param2\"; private String mParam1; private String mParam2; public LostFragment() { } public static LostFragment newInstance(String param1, String param2) { LostFragment fragment = new LostFragment(); Bundle args = new Bundle(); args.putString(ARG_PARAM1, param1); args.putString(ARG_PARAM2, param2); fragment.setArguments(args); return fragment; } @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); if (getArguments() != null) { mParam1 = getArguments().getString(ARG_PARAM1); mParam2 = getArguments().getString(ARG_PARAM2); } } @Override public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { View view = inflater.inflate(R.layout.fragment_lost, container, false); FloatingActionButton fab = view.findViewById(R.id.floatingActionButton); fab.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { Intent i = new Intent(getContext(),Lost_Form.class); startActivity(i); } }); return view; } }"},{"file_path":"Lost and found application\\app\\src\\main\\java\\com\\application\\bufinder\\SettingsFragment.java","file_content":"package com.application.bufinder; import android.content.Intent; import android.os.Bundle; import androidx.annotation.NonNull; import androidx.fragment.app.Fragment; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.Button; import android.widget.TextView; import com.application.bufinder.Login; import com.application.bufinder.R; import com.google.android.gms.auth.api.signin.GoogleSignIn; import com.google.android.gms.auth.api.signin.GoogleSignInAccount; import com.google.android.gms.auth.api.signin.GoogleSignInClient; import com.google.android.gms.auth.api.signin.GoogleSignInOptions; import com.google.android.gms.tasks.OnCompleteListener; import com.google.android.gms.tasks.Task; import com.google.android.material.floatingactionbutton.FloatingActionButton; import com.google.firebase.auth.FirebaseAuth; import com.squareup.picasso.Picasso; import de.hdodenhof.circleimageview.CircleImageView; public class SettingsFragment extends Fragment { CircleImageView imageView; TextView userName; Button signOutBtn,button; private static final String ARG_PARAM1 = \"param1\"; private static final String ARG_PARAM2 = \"param2\"; private String mParam1; private String mParam2; public SettingsFragment() { } public static SettingsFragment newInstance(String param1, String param2) { SettingsFragment fragment = new SettingsFragment(); Bundle args = new Bundle(); args.putString(ARG_PARAM1, param1); args.putString(ARG_PARAM2, param2); fragment.setArguments(args); return fragment; } @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); if (getArguments() != null) { mParam1 = getArguments().getString(ARG_PARAM1); mParam2 = getArguments().getString(ARG_PARAM2); } } @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { View view = inflater.inflate(R.layout.fragment_settings, container, false); imageView = (CircleImageView) view.findViewById(R.id.ProfilePic); userName = (TextView) view.findViewById(R.id.UserNameTxt); signOutBtn = (Button) view.findViewById(R.id.SignOutBtn); GoogleSignInAccount acct = GoogleSignIn.getLastSignedInAccount(getActivity()); if (acct != null) { userName.setText(acct.getDisplayName()); Picasso.get().load(acct.getPhotoUrl()).into(imageView); } signOutBtn.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { GoogleSignInOptions gso = new GoogleSignInOptions. Builder(GoogleSignInOptions.DEFAULT_SIGN_IN). build(); GoogleSignInClient googleSignInClient = GoogleSignIn.getClient(getActivity(), gso); googleSignInClient.signOut().addOnCompleteListener(new OnCompleteListener<Void>() { @Override public void onComplete(@NonNull Task<Void> task) { if (task.isSuccessful()) { FirebaseAuth.getInstance().signOut(); Intent intent = new Intent(getContext(), Login.class); intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK); startActivity(intent); } } }); } }); Button button = view.findViewById(R.id.button); button.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { Intent i = new Intent(getContext(), EditProfile.class); startActivity(i); } }); return view; } }"}]}}
{"project_id":79,"chunk_id":0,"content":{"main_file_path":"Lost and found application\\app\\src\\main\\java\\com\\application\\bufinder\\Register.java","main_file_content":"package com.application.bufinder; import android.content.Intent; import android.os.Bundle; import android.text.TextUtils; import android.util.Log; import android.view.View; import android.widget.Button; import android.widget.EditText; import android.widget.ProgressBar; import android.widget.TextView; import android.widget.Toast; import androidx.annotation.NonNull; import androidx.appcompat.app.AppCompatActivity; import com.google.android.gms.tasks.OnCompleteListener; import com.google.android.gms.tasks.OnFailureListener; import com.google.android.gms.tasks.OnSuccessListener; import com.google.android.gms.tasks.Task; import com.google.firebase.auth.AuthResult; import com.google.firebase.auth.FirebaseAuth; import com.google.firebase.auth.FirebaseUser; import com.google.firebase.firestore.DocumentReference; import com.google.firebase.firestore.FirebaseFirestore; import java.util.HashMap; import java.util.Map; public class Register extends AppCompatActivity { public static final String TAG = \"TAG\"; EditText mFullName,mEmail,mPassword,mPhone; Button mRegisterBtn; TextView mLoginBtn; FirebaseAuth fAuth; ProgressBar progressBar; FirebaseFirestore fStore; String userID; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_register); mFullName = findViewById(R.id.fullName); mEmail = findViewById(R.id.Email); mPassword = findViewById(R.id.password); mPhone = findViewById(R.id.phone); mRegisterBtn= findViewById(R.id.registerBtn); mLoginBtn = findViewById(R.id.createText); fAuth = FirebaseAuth.getInstance(); fStore = FirebaseFirestore.getInstance(); progressBar = findViewById(R.id.progressBar); if(fAuth.getCurrentUser() != null){ startActivity(new Intent(getApplicationContext(),MainActivity.class)); finish(); } mRegisterBtn.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { final String email = mEmail.getText().toString().trim(); String password = mPassword.getText().toString().trim(); final String fullName = mFullName.getText().toString(); final String phone = mPhone.getText().toString(); String namee = email; if(TextUtils.isEmpty(email)){ mEmail.setError(\"Email is Required.\"); return; } if(TextUtils.isEmpty(password)){ mPassword.setError(\"Password is Required.\"); return; } if(password.length() < 6){ mPassword.setError(\"Password Must be >= 6 Characters\"); return; } progressBar.setVisibility(View.VISIBLE); fAuth.createUserWithEmailAndPassword(email,password).addOnCompleteListener(new OnCompleteListener<AuthResult>() { @Override public void onComplete(@NonNull Task<AuthResult> task) { if(task.isSuccessful()){ FirebaseUser fuser = fAuth.getCurrentUser(); fuser.sendEmailVerification().addOnSuccessListener(new OnSuccessListener<Void>() { @Override public void onSuccess(Void aVoid) { Toast.makeText(Register.this, \"Verification Email Has been Sent.\", Toast.LENGTH_SHORT).show(); } }).addOnFailureListener(new OnFailureListener() { @Override public void onFailure(@NonNull Exception e) { Log.d(TAG, \"onFailure: Email not sent \" + e.getMessage()); } }); Toast.makeText(Register.this, \"User Created.\", Toast.LENGTH_SHORT).show(); userID = fAuth.getCurrentUser().getUid(); DocumentReference documentReference = fStore.collection(\"users\").document(userID); Map<String,Object> user = new HashMap<>(); user.put(\"fName\",fullName); user.put(\"email\",email); user.put(\"phone\",phone); documentReference.set(user).addOnSuccessListener(new OnSuccessListener<Void>() { @Override public void onSuccess(Void aVoid) { Log.d(TAG, \"onSuccess: user Profile is created for \"+ userID); } }).addOnFailureListener(new OnFailureListener() { @Override public void onFailure(@NonNull Exception e) { Log.d(TAG, \"onFailure: \" + e.toString()); } }); startActivity(new Intent(getApplicationContext(),MainActivity.class)); }else { Toast.makeText(Register.this, \"Error ! \" + task.getException().getMessage(), Toast.LENGTH_SHORT).show(); progressBar.setVisibility(View.GONE); } } }); } }); mLoginBtn.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { startActivity(new Intent(getApplicationContext(),Login.class)); } }); } }","dependencies":[{"file_path":"Lost and found application\\app\\src\\main\\java\\com\\application\\bufinder\\Login.java","file_content":"package com.application.bufinder; import android.content.DialogInterface; import android.content.Intent; import android.os.Bundle; import android.text.TextUtils; import android.view.View; import android.widget.Button; import android.widget.EditText; import android.widget.ProgressBar; import android.widget.TextView; import android.widget.Toast; import androidx.annotation.NonNull; import androidx.appcompat.app.AlertDialog; import androidx.appcompat.app.AppCompatActivity; import com.google.android.gms.tasks.OnCompleteListener; import com.google.android.gms.tasks.OnFailureListener; import com.google.android.gms.tasks.OnSuccessListener; import com.google.android.gms.tasks.Task; import com.google.firebase.auth.AuthResult; import com.google.firebase.auth.FirebaseAuth; public class Login extends AppCompatActivity { EditText mEmail,mPassword; Button mLoginBtn; TextView mCreateBtn,forgotTextLink; ProgressBar progressBar; FirebaseAuth fAuth; private long backPressedTime; private Toast back; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_login); mEmail = findViewById(R.id.Email); mPassword = findViewById(R.id.password); progressBar = findViewById(R.id.progressBar); fAuth = FirebaseAuth.getInstance(); mLoginBtn = findViewById(R.id.loginBtn); mCreateBtn = findViewById(R.id.createText); forgotTextLink = findViewById(R.id.forgotPassword); mLoginBtn.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { String email = mEmail.getText().toString().trim(); String password = mPassword.getText().toString().trim(); if(TextUtils.isEmpty(email)){ mEmail.setError(\"Email is Required.\"); return; } if(TextUtils.isEmpty(password)){ mPassword.setError(\"Password is Required.\"); return; } if(password.length() < 6){ mPassword.setError(\"Password Must be >= 6 Characters\"); return; } progressBar.setVisibility(View.VISIBLE); fAuth.signInWithEmailAndPassword(email,password).addOnCompleteListener(new OnCompleteListener<AuthResult>() { @Override public void onComplete(@NonNull Task<AuthResult> task) { if(task.isSuccessful()){ Toast.makeText(Login.this, \"Logged in Successfully\", Toast.LENGTH_SHORT).show(); startActivity(new Intent(getApplicationContext(),MainActivity.class)); }else { Toast.makeText(Login.this, \"Error ! \" + task.getException().getMessage(), Toast.LENGTH_SHORT).show(); progressBar.setVisibility(View.GONE); } } }); } }); mCreateBtn.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { startActivity(new Intent(getApplicationContext(),Register.class)); } }); forgotTextLink.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { final EditText resetMail = new EditText(v.getContext()); final AlertDialog.Builder passwordResetDialog = new AlertDialog.Builder(v.getContext()); passwordResetDialog.setTitle(\"Reset Password ?\"); passwordResetDialog.setMessage(\"Enter Your Email To Received Reset Link.\"); passwordResetDialog.setView(resetMail); passwordResetDialog.setPositiveButton(\"Yes\", new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { String mail = resetMail.getText().toString(); fAuth.sendPasswordResetEmail(mail).addOnSuccessListener(new OnSuccessListener<Void>() { @Override public void onSuccess(Void aVoid) { Toast.makeText(Login.this, \"Reset Link Sent To Your Email.\", Toast.LENGTH_SHORT).show(); } }).addOnFailureListener(new OnFailureListener() { @Override public void onFailure(@NonNull Exception e) { Toast.makeText(Login.this, \"Error ! Reset Link is Not Sent\" + e.getMessage(), Toast.LENGTH_SHORT).show(); } }); } }); passwordResetDialog.setNegativeButton(\"No\", new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { } }); passwordResetDialog.create().show(); } }); } }"},{"file_path":"Lost and found application\\app\\src\\main\\java\\com\\application\\bufinder\\MainActivity.java","file_content":"package com.application.bufinder; import androidx.appcompat.app.AppCompatActivity; import androidx.fragment.app.Fragment; import androidx.fragment.app.FragmentManager; import androidx.fragment.app.FragmentTransaction; import android.annotation.SuppressLint; import android.os.Bundle; import com.application.bufinder.databinding.ActivityMainBinding; public class MainActivity extends AppCompatActivity { ActivityMainBinding binding; @SuppressLint(\"RestrictedApi\") @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); binding = ActivityMainBinding.inflate(getLayoutInflater()); setContentView(binding.getRoot()); replaceFragment(new LostFragment()); binding.bottomNavigationView.setOnNavigationItemSelectedListener(item -> { switch(item.getItemId()) { case R.id.lost: replaceFragment(new LostFragment()); break; case R.id.found: replaceFragment(new FoundFragment()); break; case R.id.settings: replaceFragment(new SettingsFragment()); break; } getSupportActionBar().setDefaultDisplayHomeAsUpEnabled(true); getSupportActionBar().setIcon(R.drawable.ic_action_name); return true; }); } private void replaceFragment(Fragment fragment){ FragmentManager fragmentManager=getSupportFragmentManager(); FragmentTransaction fragmentTransaction = ((FragmentManager) fragmentManager).beginTransaction(); fragmentTransaction.replace(R.id.frame_layout,fragment); fragmentTransaction.commit(); }}"}]}}
{"project_id":79,"chunk_id":0,"content":{"main_file_path":"Lost and found application\\app\\src\\main\\java\\com\\application\\bufinder\\SettingsFragment.java","main_file_content":"package com.application.bufinder; import android.content.Intent; import android.os.Bundle; import androidx.annotation.NonNull; import androidx.fragment.app.Fragment; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.Button; import android.widget.TextView; import com.application.bufinder.Login; import com.application.bufinder.R; import com.google.android.gms.auth.api.signin.GoogleSignIn; import com.google.android.gms.auth.api.signin.GoogleSignInAccount; import com.google.android.gms.auth.api.signin.GoogleSignInClient; import com.google.android.gms.auth.api.signin.GoogleSignInOptions; import com.google.android.gms.tasks.OnCompleteListener; import com.google.android.gms.tasks.Task; import com.google.android.material.floatingactionbutton.FloatingActionButton; import com.google.firebase.auth.FirebaseAuth; import com.squareup.picasso.Picasso; import de.hdodenhof.circleimageview.CircleImageView; public class SettingsFragment extends Fragment { CircleImageView imageView; TextView userName; Button signOutBtn,button; private static final String ARG_PARAM1 = \"param1\"; private static final String ARG_PARAM2 = \"param2\"; private String mParam1; private String mParam2; public SettingsFragment() { } public static SettingsFragment newInstance(String param1, String param2) { SettingsFragment fragment = new SettingsFragment(); Bundle args = new Bundle(); args.putString(ARG_PARAM1, param1); args.putString(ARG_PARAM2, param2); fragment.setArguments(args); return fragment; } @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); if (getArguments() != null) { mParam1 = getArguments().getString(ARG_PARAM1); mParam2 = getArguments().getString(ARG_PARAM2); } } @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { View view = inflater.inflate(R.layout.fragment_settings, container, false); imageView = (CircleImageView) view.findViewById(R.id.ProfilePic); userName = (TextView) view.findViewById(R.id.UserNameTxt); signOutBtn = (Button) view.findViewById(R.id.SignOutBtn); GoogleSignInAccount acct = GoogleSignIn.getLastSignedInAccount(getActivity()); if (acct != null) { userName.setText(acct.getDisplayName()); Picasso.get().load(acct.getPhotoUrl()).into(imageView); } signOutBtn.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { GoogleSignInOptions gso = new GoogleSignInOptions. Builder(GoogleSignInOptions.DEFAULT_SIGN_IN). build(); GoogleSignInClient googleSignInClient = GoogleSignIn.getClient(getActivity(), gso); googleSignInClient.signOut().addOnCompleteListener(new OnCompleteListener<Void>() { @Override public void onComplete(@NonNull Task<Void> task) { if (task.isSuccessful()) { FirebaseAuth.getInstance().signOut(); Intent intent = new Intent(getContext(), Login.class); intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK); startActivity(intent); } } }); } }); Button button = view.findViewById(R.id.button); button.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { Intent i = new Intent(getContext(), EditProfile.class); startActivity(i); } }); return view; } }","dependencies":[{"file_path":"Lost and found application\\app\\src\\main\\java\\com\\application\\bufinder\\EditProfile.java","file_content":"package com.application.bufinder; import android.app.Activity; import android.content.Intent; import android.net.Uri; import android.os.Bundle; import android.provider.MediaStore; import android.util.Log; import android.view.View; import android.widget.Button; import android.widget.EditText; import android.widget.ImageView; import android.widget.Toast; import androidx.annotation.NonNull; import androidx.appcompat.app.AppCompatActivity; import com.google.android.gms.tasks.OnFailureListener; import com.google.android.gms.tasks.OnSuccessListener; import com.google.firebase.auth.FirebaseAuth; import com.google.firebase.auth.FirebaseUser; import com.google.firebase.firestore.DocumentReference; import com.google.firebase.firestore.FirebaseFirestore; import com.google.firebase.storage.FirebaseStorage; import com.google.firebase.storage.StorageReference; import com.google.firebase.storage.UploadTask; import com.squareup.picasso.Picasso; import java.util.HashMap; import java.util.Map; public class EditProfile extends AppCompatActivity { public static final String TAG = \"TAG\"; EditText profileFullName,profileEmail,profilePhone; ImageView profileImageView; Button saveBtn; FirebaseAuth fAuth; FirebaseFirestore fStore; FirebaseUser user; StorageReference storageReference; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_edit_profile); Intent data = getIntent(); final String fullName = data.getStringExtra(\"fullName\"); String email = data.getStringExtra(\"email\"); String phone = data.getStringExtra(\"phone\"); fAuth = FirebaseAuth.getInstance(); fStore = FirebaseFirestore.getInstance(); user = fAuth.getCurrentUser(); storageReference = FirebaseStorage.getInstance().getReference(); profileFullName = findViewById(R.id.profileFullName); profileEmail = findViewById(R.id.profileEmailAddress); profilePhone = findViewById(R.id.profilePhoneNo); profileImageView = findViewById(R.id.profileImageView); saveBtn = findViewById(R.id.saveProfileInfo); StorageReference profileRef = storageReference.child(\"users/\"+fAuth.getCurrentUser().getUid()+\"/profile.jpg\"); profileRef.getDownloadUrl().addOnSuccessListener(new OnSuccessListener<Uri>() { @Override public void onSuccess(Uri uri) { Picasso.get().load(uri).into(profileImageView); } }); profileImageView.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { Intent openGalleryIntent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI); startActivityForResult(openGalleryIntent,1000); } }); saveBtn.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { if(profileFullName.getText().toString().isEmpty() || profileEmail.getText().toString().isEmpty() || profilePhone.getText().toString().isEmpty()){ Toast.makeText(EditProfile.this, \"One or Many fields are empty.\", Toast.LENGTH_SHORT).show(); return; } final String email = profileEmail.getText().toString(); user.updateEmail(email).addOnSuccessListener(new OnSuccessListener<Void>() { @Override public void onSuccess(Void aVoid) { DocumentReference docRef = fStore.collection(\"users\").document(user.getUid()); Map<String,Object> edited = new HashMap<>(); edited.put(\"email\",email); edited.put(\"fName\",profileFullName.getText().toString()); edited.put(\"phone\",profilePhone.getText().toString()); docRef.update(edited).addOnSuccessListener(new OnSuccessListener<Void>() { @Override public void onSuccess(Void aVoid) { Toast.makeText(EditProfile.this, \"Profile Updated\", Toast.LENGTH_SHORT).show(); startActivity(new Intent(getApplicationContext(),MainActivity.class)); finish(); } }); Toast.makeText(EditProfile.this, \"Email is changed.\", Toast.LENGTH_SHORT).show(); } }).addOnFailureListener(new OnFailureListener() { @Override public void onFailure(@NonNull Exception e) { Toast.makeText(EditProfile.this, e.getMessage(), Toast.LENGTH_SHORT).show(); } }); } }); profileEmail.setText(email); profileFullName.setText(fullName); profilePhone.setText(phone); Log.d(TAG, \"onCreate: \" + fullName + \" \" + email + \" \" + phone); } @Override protected void onActivityResult(int requestCode, int resultCode, @androidx.annotation.Nullable Intent data) { super.onActivityResult(requestCode, resultCode, data); if(requestCode == 1000){ if(resultCode == Activity.RESULT_OK){ Uri imageUri = data.getData(); uploadImageToFirebase(imageUri); } } } private void uploadImageToFirebase(Uri imageUri) { final StorageReference fileRef = storageReference.child(\"users/\"+fAuth.getCurrentUser().getUid()+\"/profile.jpg\"); fileRef.putFile(imageUri).addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() { @Override public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) { fileRef.getDownloadUrl().addOnSuccessListener(new OnSuccessListener<Uri>() { @Override public void onSuccess(Uri uri) { Picasso.get().load(uri).into(profileImageView); } }); } }).addOnFailureListener(new OnFailureListener() { @Override public void onFailure(@NonNull Exception e) { Toast.makeText(getApplicationContext(), \"Failed.\", Toast.LENGTH_SHORT).show(); } }); } }"},{"file_path":"Lost and found application\\app\\src\\main\\java\\com\\application\\bufinder\\Login.java","file_content":"package com.application.bufinder; import android.content.DialogInterface; import android.content.Intent; import android.os.Bundle; import android.text.TextUtils; import android.view.View; import android.widget.Button; import android.widget.EditText; import android.widget.ProgressBar; import android.widget.TextView; import android.widget.Toast; import androidx.annotation.NonNull; import androidx.appcompat.app.AlertDialog; import androidx.appcompat.app.AppCompatActivity; import com.google.android.gms.tasks.OnCompleteListener; import com.google.android.gms.tasks.OnFailureListener; import com.google.android.gms.tasks.OnSuccessListener; import com.google.android.gms.tasks.Task; import com.google.firebase.auth.AuthResult; import com.google.firebase.auth.FirebaseAuth; public class Login extends AppCompatActivity { EditText mEmail,mPassword; Button mLoginBtn; TextView mCreateBtn,forgotTextLink; ProgressBar progressBar; FirebaseAuth fAuth; private long backPressedTime; private Toast back; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_login); mEmail = findViewById(R.id.Email); mPassword = findViewById(R.id.password); progressBar = findViewById(R.id.progressBar); fAuth = FirebaseAuth.getInstance(); mLoginBtn = findViewById(R.id.loginBtn); mCreateBtn = findViewById(R.id.createText); forgotTextLink = findViewById(R.id.forgotPassword); mLoginBtn.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { String email = mEmail.getText().toString().trim(); String password = mPassword.getText().toString().trim(); if(TextUtils.isEmpty(email)){ mEmail.setError(\"Email is Required.\"); return; } if(TextUtils.isEmpty(password)){ mPassword.setError(\"Password is Required.\"); return; } if(password.length() < 6){ mPassword.setError(\"Password Must be >= 6 Characters\"); return; } progressBar.setVisibility(View.VISIBLE); fAuth.signInWithEmailAndPassword(email,password).addOnCompleteListener(new OnCompleteListener<AuthResult>() { @Override public void onComplete(@NonNull Task<AuthResult> task) { if(task.isSuccessful()){ Toast.makeText(Login.this, \"Logged in Successfully\", Toast.LENGTH_SHORT).show(); startActivity(new Intent(getApplicationContext(),MainActivity.class)); }else { Toast.makeText(Login.this, \"Error ! \" + task.getException().getMessage(), Toast.LENGTH_SHORT).show(); progressBar.setVisibility(View.GONE); } } }); } }); mCreateBtn.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { startActivity(new Intent(getApplicationContext(),Register.class)); } }); forgotTextLink.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { final EditText resetMail = new EditText(v.getContext()); final AlertDialog.Builder passwordResetDialog = new AlertDialog.Builder(v.getContext()); passwordResetDialog.setTitle(\"Reset Password ?\"); passwordResetDialog.setMessage(\"Enter Your Email To Received Reset Link.\"); passwordResetDialog.setView(resetMail); passwordResetDialog.setPositiveButton(\"Yes\", new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { String mail = resetMail.getText().toString(); fAuth.sendPasswordResetEmail(mail).addOnSuccessListener(new OnSuccessListener<Void>() { @Override public void onSuccess(Void aVoid) { Toast.makeText(Login.this, \"Reset Link Sent To Your Email.\", Toast.LENGTH_SHORT).show(); } }).addOnFailureListener(new OnFailureListener() { @Override public void onFailure(@NonNull Exception e) { Toast.makeText(Login.this, \"Error ! Reset Link is Not Sent\" + e.getMessage(), Toast.LENGTH_SHORT).show(); } }); } }); passwordResetDialog.setNegativeButton(\"No\", new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { } }); passwordResetDialog.create().show(); } }); } }"}]}}
{"project_id":79,"chunk_id":0,"content":{"main_file_path":"Lost and found application\\app\\src\\main\\java\\com\\application\\bufinder\\models\\Journal.java","main_file_content":"package com.application.bufinder.models; public class Journal { private String Item; private String Sub; private String Brand; private String Color; public Journal() { } public Journal(String item, String sub, String brand, String color) { Item = item; Sub = sub; Brand = brand; Color = color; } public String getItem() { return Item; } public void setItem(String item) { Item = item; } public String getSub() { return Sub; } public void setSub(String sub) { Sub = sub; } public String getBrand() { return Brand; } public void setBrand(String brand) { Brand = brand; } public String getColor() { return Color; } public void setColor(String color) { Color = color; } }","dependencies":[]}}
{"project_id":79,"chunk_id":0,"content":{"main_file_path":"Lost and found application\\app\\src\\main\\java\\com\\application\\bufinder\\util\\JournalApi.java","main_file_content":"package com.application.bufinder.util; import android.app.Application; public class JournalApi extends Application { private static JournalApi instance; private String username; private String userId; public JournalApi() { } public static JournalApi getInstance() { if (instance == null) instance = new JournalApi(); return instance; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getUserId() { return userId; } public void setUserId(String userId) { this.userId = userId; } }","dependencies":[]}}
{"project_id":79,"chunk_id":0,"content":{"main_file_path":"Lost and found application\\app\\src\\test\\java\\com\\application\\bufinder\\ExampleUnitTest.java","main_file_content":"package com.application.bufinder; import org.junit.Test; import static org.junit.Assert.*; public class ExampleUnitTest { @Test public void addition_isCorrect() { assertEquals(4, 2 + 2); } }","dependencies":[]}}
{"project_id":80,"chunk_id":0,"content":{"main_file_path":"MeiTuanRefreshListView-master\\app\\src\\androidTest\\java\\com\\zhangqi\\meituanrefreshlistview\\ApplicationTest.java","main_file_content":"package com.zhangqi.meituanrefreshlistview; import android.app.Application; import android.test.ApplicationTestCase; public class ApplicationTest extends ApplicationTestCase<Application> { public ApplicationTest() { super(Application.class); } }","dependencies":[]}}
{"project_id":80,"chunk_id":0,"content":{"main_file_path":"MeiTuanRefreshListView-master\\app\\src\\main\\java\\com\\zhangqi\\meituanrefreshlistview\\MainActivity.java","main_file_content":"package com.zhangqi.meituanrefreshlistview; import android.app.Activity; import android.os.Bundle; import android.os.Handler; import android.os.Message; import android.widget.ArrayAdapter; import com.zhangqi.meituanrefreshlistview.MeiTuanListView.OnMeiTuanRefreshListener; import java.lang.ref.WeakReference; import java.util.ArrayList; import java.util.Arrays; import java.util.List; public class MainActivity extends Activity implements OnMeiTuanRefreshListener{ private MeiTuanListView mListView; private List<String> mDatas; private ArrayAdapter<String> mAdapter; private final static int REFRESH_COMPLETE = 0; private InterHandler mInterHandler = new InterHandler(this); private static class InterHandler extends Handler{ private WeakReference<MainActivity> mActivity; public InterHandler(MainActivity activity){ mActivity = new WeakReference<MainActivity>(activity); } @Override public void handleMessage(Message msg) { MainActivity activity = mActivity.get(); if (activity != null) { switch (msg.what) { case REFRESH_COMPLETE: activity.mListView.setOnRefreshComplete(); activity.mAdapter.notifyDataSetChanged(); activity.mListView.setSelection(0); break; } }else{ super.handleMessage(msg); } } } @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mListView = (MeiTuanListView) findViewById(R.id.listview); String[] data = new String[]{\"hello world\",\"hello world\",\"hello world\",\"hello world\", \"hello world\",\"hello world\",\"hello world\",\"hello world\",\"hello world\", \"hello world\",\"hello world\",\"hello world\",\"hello world\",\"hello world\",}; mDatas = new ArrayList<String>(Arrays.asList(data)); mAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1,mDatas); mListView.setAdapter(mAdapter); mListView.setOnMeiTuanRefreshListener(this); } @Override public void onRefresh() { new Thread(new Runnable() { @Override public void run() { try { Thread.sleep(3000); mDatas.add(0, \"new data\"); mInterHandler.sendEmptyMessage(REFRESH_COMPLETE); } catch (InterruptedException e) { e.printStackTrace(); } } }).start(); } }","dependencies":[{"file_path":"MeiTuanRefreshListView-master\\app\\src\\main\\java\\com\\zhangqi\\meituanrefreshlistview\\MeiTuanListView.java","file_content":"package com.zhangqi.meituanrefreshlistview; import android.content.Context; import android.graphics.drawable.AnimationDrawable; import android.util.AttributeSet; import android.util.Log; import android.view.LayoutInflater; import android.view.MotionEvent; import android.view.View; import android.view.ViewGroup; import android.view.animation.Animation; import android.widget.AbsListView; import android.widget.FrameLayout; import android.widget.LinearLayout; import android.widget.ListView; import android.widget.TextView; import java.text.SimpleDateFormat; public class MeiTuanListView extends ListView implements AbsListView.OnScrollListener{ private static final int DONE = 0; private static final int PULL_TO_REFRESH = 1; private static final int RELEASE_TO_REFRESH = 2; private static final int REFRESHING = 3; private static final int RATIO = 3; private LinearLayout headerView; private int headerViewHeight; private float startY; private float offsetY; private TextView tv_pull_to_refresh; private OnMeiTuanRefreshListener mOnRefreshListener; private int state; private int mFirstVisibleItem; private boolean isRecord; private boolean isEnd; private boolean isRefreable; private FrameLayout mAnimContainer; private Animation animation; private SimpleDateFormat format; private MeiTuanRefreshFirstStepView mFirstView; private MeiTuanRefreshSecondStepView mSecondView; private AnimationDrawable secondAnim; private MeiTuanRefreshThirdStepView mThirdView; private AnimationDrawable thirdAnim; public MeiTuanListView(Context context) { super(context); init(context); } public MeiTuanListView(Context context, AttributeSet attrs) { super(context, attrs); init(context); } public MeiTuanListView(Context context, AttributeSet attrs, int defStyleAttr) { super(context, attrs, defStyleAttr); init(context); } public interface OnMeiTuanRefreshListener{ void onRefresh(); } public void setOnMeiTuanRefreshListener(OnMeiTuanRefreshListener onRefreshListener){ mOnRefreshListener = onRefreshListener; isRefreable = true; } public void setOnRefreshComplete(){ isEnd = true; state = DONE; changeHeaderByState(state); } private void init(Context context) { setOverScrollMode(View.OVER_SCROLL_NEVER); setOnScrollListener(this); headerView = (LinearLayout) LayoutInflater.from(context).inflate(R.layout.meituan_item, null, false); mFirstView = (MeiTuanRefreshFirstStepView) headerView.findViewById(R.id.first_view); tv_pull_to_refresh = (TextView) headerView.findViewById(R.id.tv_pull_to_refresh); mSecondView = (MeiTuanRefreshSecondStepView) headerView.findViewById(R.id.second_view); mSecondView.setBackgroundResource(R.drawable.pull_to_refresh_second_anim); secondAnim = (AnimationDrawable) mSecondView.getBackground(); mThirdView = (MeiTuanRefreshThirdStepView) headerView.findViewById(R.id.third_view); mThirdView.setBackgroundResource(R.drawable.pull_to_refresh_third_anim); thirdAnim = (AnimationDrawable) mThirdView.getBackground(); measureView(headerView); addHeaderView(headerView); headerViewHeight = headerView.getMeasuredHeight(); headerView.setPadding(0, -headerViewHeight, 0, 0); Log.i(\"zhangqi\",\"headerViewHeight=\"+headerViewHeight); state = DONE; isEnd = true; isRefreable = false; } @Override public void onScrollStateChanged(AbsListView absListView, int i) { } @Override public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleItemCount, int totalItemCount) { mFirstVisibleItem = firstVisibleItem; } @Override public boolean onTouchEvent(MotionEvent ev) { if (isEnd) { if (isRefreable) { switch (ev.getAction()){ case MotionEvent.ACTION_DOWN: if (mFirstVisibleItem == 0 && !isRecord) { isRecord = true; startY = ev.getY(); } break; case MotionEvent.ACTION_MOVE: float tempY = ev.getY(); if (mFirstVisibleItem == 0 && !isRecord) { isRecord = true; startY = tempY; } if (state!=REFRESHING && isRecord ) { offsetY = tempY - startY; float currentHeight = (-headerViewHeight+offsetY/3); float currentProgress = 1+currentHeight/headerViewHeight; if (currentProgress>=1) { currentProgress = 1; } if (state == RELEASE_TO_REFRESH && isRecord) { setSelection(0); if (-headerViewHeight+offsetY/RATIO<0) { state = PULL_TO_REFRESH; changeHeaderByState(state); }else if (offsetY<=0) { state = DONE; changeHeaderByState(state); } } if (state == PULL_TO_REFRESH && isRecord) { setSelection(0); if (-headerViewHeight+offsetY/RATIO>=0) { state = RELEASE_TO_REFRESH; changeHeaderByState(state); }else if (offsetY<=0) { state = DONE; changeHeaderByState(state); } } if (state == DONE && isRecord) { if (offsetY>=0) { state = PULL_TO_REFRESH; } } if (state == PULL_TO_REFRESH) { headerView.setPadding(0,(int)(-headerViewHeight+offsetY/RATIO) ,0,0); mFirstView.setCurrentProgress(currentProgress); mFirstView.postInvalidate(); } if (state == RELEASE_TO_REFRESH) { headerView.setPadding(0,(int)(-headerViewHeight+offsetY/RATIO) ,0, 0); mFirstView.setCurrentProgress(currentProgress); mFirstView.postInvalidate(); } } break; case MotionEvent.ACTION_UP: if (state == PULL_TO_REFRESH) { this.smoothScrollBy((int)(-headerViewHeight+offsetY/RATIO)+headerViewHeight, 500); changeHeaderByState(state); } if (state == RELEASE_TO_REFRESH) { this.smoothScrollBy((int)(-headerViewHeight+offsetY/RATIO), 500); state = REFRESHING; mOnRefreshListener.onRefresh(); changeHeaderByState(state); } isRecord = false; break; } } } return super.onTouchEvent(ev); } private void changeHeaderByState(int state){ switch (state) { case DONE: headerView.setPadding(0, -headerViewHeight, 0, 0); mFirstView.setVisibility(View.VISIBLE); mSecondView.setVisibility(View.GONE); secondAnim.stop(); mThirdView.setVisibility(View.GONE); thirdAnim.stop(); break; case RELEASE_TO_REFRESH: tv_pull_to_refresh.setText(\"放开刷新\"); mFirstView.setVisibility(View.GONE); mSecondView.setVisibility(View.VISIBLE); secondAnim.start(); mThirdView.setVisibility(View.GONE); thirdAnim.stop(); break; case PULL_TO_REFRESH: tv_pull_to_refresh.setText(\"下拉刷新\"); mFirstView.setVisibility(View.VISIBLE); mSecondView.setVisibility(View.GONE); secondAnim.stop(); mThirdView.setVisibility(View.GONE); thirdAnim.stop(); break; case REFRESHING: tv_pull_to_refresh.setText(\"正在刷新\"); mFirstView.setVisibility(View.GONE); mThirdView.setVisibility(View.VISIBLE); mSecondView.setVisibility(View.GONE); secondAnim.stop(); thirdAnim.start(); break; default: break; } } private void measureView(View child) { ViewGroup.LayoutParams p = child.getLayoutParams(); if (p == null) { p = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT); } int childWidthSpec = ViewGroup.getChildMeasureSpec(0, 0 + 0, p.width); int lpHeight = p.height; int childHeightSpec; if (lpHeight > 0) { childHeightSpec = MeasureSpec.makeMeasureSpec(lpHeight, MeasureSpec.EXACTLY); } else { childHeightSpec = MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED); } child.measure(childWidthSpec, childHeightSpec); } }"}]}}
{"project_id":80,"chunk_id":0,"content":{"main_file_path":"MeiTuanRefreshListView-master\\app\\src\\main\\java\\com\\zhangqi\\meituanrefreshlistview\\MeiTuanListView.java","main_file_content":"package com.zhangqi.meituanrefreshlistview; import android.content.Context; import android.graphics.drawable.AnimationDrawable; import android.util.AttributeSet; import android.util.Log; import android.view.LayoutInflater; import android.view.MotionEvent; import android.view.View; import android.view.ViewGroup; import android.view.animation.Animation; import android.widget.AbsListView; import android.widget.FrameLayout; import android.widget.LinearLayout; import android.widget.ListView; import android.widget.TextView; import java.text.SimpleDateFormat; public class MeiTuanListView extends ListView implements AbsListView.OnScrollListener{ private static final int DONE = 0; private static final int PULL_TO_REFRESH = 1; private static final int RELEASE_TO_REFRESH = 2; private static final int REFRESHING = 3; private static final int RATIO = 3; private LinearLayout headerView; private int headerViewHeight; private float startY; private float offsetY; private TextView tv_pull_to_refresh; private OnMeiTuanRefreshListener mOnRefreshListener; private int state; private int mFirstVisibleItem; private boolean isRecord; private boolean isEnd; private boolean isRefreable; private FrameLayout mAnimContainer; private Animation animation; private SimpleDateFormat format; private MeiTuanRefreshFirstStepView mFirstView; private MeiTuanRefreshSecondStepView mSecondView; private AnimationDrawable secondAnim; private MeiTuanRefreshThirdStepView mThirdView; private AnimationDrawable thirdAnim; public MeiTuanListView(Context context) { super(context); init(context); } public MeiTuanListView(Context context, AttributeSet attrs) { super(context, attrs); init(context); } public MeiTuanListView(Context context, AttributeSet attrs, int defStyleAttr) { super(context, attrs, defStyleAttr); init(context); } public interface OnMeiTuanRefreshListener{ void onRefresh(); } public void setOnMeiTuanRefreshListener(OnMeiTuanRefreshListener onRefreshListener){ mOnRefreshListener = onRefreshListener; isRefreable = true; } public void setOnRefreshComplete(){ isEnd = true; state = DONE; changeHeaderByState(state); } private void init(Context context) { setOverScrollMode(View.OVER_SCROLL_NEVER); setOnScrollListener(this); headerView = (LinearLayout) LayoutInflater.from(context).inflate(R.layout.meituan_item, null, false); mFirstView = (MeiTuanRefreshFirstStepView) headerView.findViewById(R.id.first_view); tv_pull_to_refresh = (TextView) headerView.findViewById(R.id.tv_pull_to_refresh); mSecondView = (MeiTuanRefreshSecondStepView) headerView.findViewById(R.id.second_view); mSecondView.setBackgroundResource(R.drawable.pull_to_refresh_second_anim); secondAnim = (AnimationDrawable) mSecondView.getBackground(); mThirdView = (MeiTuanRefreshThirdStepView) headerView.findViewById(R.id.third_view); mThirdView.setBackgroundResource(R.drawable.pull_to_refresh_third_anim); thirdAnim = (AnimationDrawable) mThirdView.getBackground(); measureView(headerView); addHeaderView(headerView); headerViewHeight = headerView.getMeasuredHeight(); headerView.setPadding(0, -headerViewHeight, 0, 0); Log.i(\"zhangqi\",\"headerViewHeight=\"+headerViewHeight); state = DONE; isEnd = true; isRefreable = false; } @Override public void onScrollStateChanged(AbsListView absListView, int i) { } @Override public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleItemCount, int totalItemCount) { mFirstVisibleItem = firstVisibleItem; } @Override public boolean onTouchEvent(MotionEvent ev) { if (isEnd) { if (isRefreable) { switch (ev.getAction()){ case MotionEvent.ACTION_DOWN: if (mFirstVisibleItem == 0 && !isRecord) { isRecord = true; startY = ev.getY(); } break; case MotionEvent.ACTION_MOVE: float tempY = ev.getY(); if (mFirstVisibleItem == 0 && !isRecord) { isRecord = true; startY = tempY; } if (state!=REFRESHING && isRecord ) { offsetY = tempY - startY; float currentHeight = (-headerViewHeight+offsetY/3); float currentProgress = 1+currentHeight/headerViewHeight; if (currentProgress>=1) { currentProgress = 1; } if (state == RELEASE_TO_REFRESH && isRecord) { setSelection(0); if (-headerViewHeight+offsetY/RATIO<0) { state = PULL_TO_REFRESH; changeHeaderByState(state); }else if (offsetY<=0) { state = DONE; changeHeaderByState(state); } } if (state == PULL_TO_REFRESH && isRecord) { setSelection(0); if (-headerViewHeight+offsetY/RATIO>=0) { state = RELEASE_TO_REFRESH; changeHeaderByState(state); }else if (offsetY<=0) { state = DONE; changeHeaderByState(state); } } if (state == DONE && isRecord) { if (offsetY>=0) { state = PULL_TO_REFRESH; } } if (state == PULL_TO_REFRESH) { headerView.setPadding(0,(int)(-headerViewHeight+offsetY/RATIO) ,0,0); mFirstView.setCurrentProgress(currentProgress); mFirstView.postInvalidate(); } if (state == RELEASE_TO_REFRESH) { headerView.setPadding(0,(int)(-headerViewHeight+offsetY/RATIO) ,0, 0); mFirstView.setCurrentProgress(currentProgress); mFirstView.postInvalidate(); } } break; case MotionEvent.ACTION_UP: if (state == PULL_TO_REFRESH) { this.smoothScrollBy((int)(-headerViewHeight+offsetY/RATIO)+headerViewHeight, 500); changeHeaderByState(state); } if (state == RELEASE_TO_REFRESH) { this.smoothScrollBy((int)(-headerViewHeight+offsetY/RATIO), 500); state = REFRESHING; mOnRefreshListener.onRefresh(); changeHeaderByState(state); } isRecord = false; break; } } } return super.onTouchEvent(ev); } private void changeHeaderByState(int state){ switch (state) { case DONE: headerView.setPadding(0, -headerViewHeight, 0, 0); mFirstView.setVisibility(View.VISIBLE); mSecondView.setVisibility(View.GONE); secondAnim.stop(); mThirdView.setVisibility(View.GONE); thirdAnim.stop(); break; case RELEASE_TO_REFRESH: tv_pull_to_refresh.setText(\"放开刷新\"); mFirstView.setVisibility(View.GONE); mSecondView.setVisibility(View.VISIBLE); secondAnim.start(); mThirdView.setVisibility(View.GONE); thirdAnim.stop(); break; case PULL_TO_REFRESH: tv_pull_to_refresh.setText(\"下拉刷新\"); mFirstView.setVisibility(View.VISIBLE); mSecondView.setVisibility(View.GONE); secondAnim.stop(); mThirdView.setVisibility(View.GONE); thirdAnim.stop(); break; case REFRESHING: tv_pull_to_refresh.setText(\"正在刷新\"); mFirstView.setVisibility(View.GONE); mThirdView.setVisibility(View.VISIBLE); mSecondView.setVisibility(View.GONE); secondAnim.stop(); thirdAnim.start(); break; default: break; } } private void measureView(View child) { ViewGroup.LayoutParams p = child.getLayoutParams(); if (p == null) { p = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT); } int childWidthSpec = ViewGroup.getChildMeasureSpec(0, 0 + 0, p.width); int lpHeight = p.height; int childHeightSpec; if (lpHeight > 0) { childHeightSpec = MeasureSpec.makeMeasureSpec(lpHeight, MeasureSpec.EXACTLY); } else { childHeightSpec = MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED); } child.measure(childWidthSpec, childHeightSpec); } }","dependencies":[{"file_path":"MeiTuanRefreshListView-master\\app\\src\\main\\java\\com\\zhangqi\\meituanrefreshlistview\\MeiTuanRefreshFirstStepView.java","file_content":"package com.zhangqi.meituanrefreshlistview; import android.content.Context; import android.graphics.Bitmap; import android.graphics.BitmapFactory; import android.graphics.Canvas; import android.util.AttributeSet; import android.view.View; public class MeiTuanRefreshFirstStepView extends View{ private Bitmap initialBitmap; private int measuredWidth; private int measuredHeight; private Bitmap endBitmap; private float mCurrentProgress; private Bitmap scaledBitmap; public MeiTuanRefreshFirstStepView(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); init(context); } public MeiTuanRefreshFirstStepView(Context context, AttributeSet attrs) { super(context, attrs); init(context); } public MeiTuanRefreshFirstStepView(Context context) { super(context); init(context); } private void init(Context context) { initialBitmap = Bitmap.createBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.pull_image)); endBitmap = Bitmap.createBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.pull_end_image_frame_05)); } @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { setMeasuredDimension(measureWidth(widthMeasureSpec),measureWidth(widthMeasureSpec)*endBitmap.getHeight()/endBitmap.getWidth()); } private int measureWidth(int widMeasureSpec){ int result = 0; int size = MeasureSpec.getSize(widMeasureSpec); int mode = MeasureSpec.getMode(widMeasureSpec); if (mode == MeasureSpec.EXACTLY){ result = size; }else{ result = endBitmap.getWidth(); if (mode == MeasureSpec.AT_MOST){ result = Math.min(result,size); } } return result; } @Override protected void onLayout(boolean changed, int left, int top, int right, int bottom) { super.onLayout(changed, left, top, right, bottom); measuredWidth = getMeasuredWidth(); measuredHeight = getMeasuredHeight(); scaledBitmap = Bitmap.createScaledBitmap(initialBitmap, measuredWidth,measuredWidth*initialBitmap.getHeight()/initialBitmap.getWidth(), true); } @Override protected void onDraw(Canvas canvas) { super.onDraw(canvas); canvas.scale(mCurrentProgress, mCurrentProgress, measuredWidth/2, measuredHeight/2); canvas.drawBitmap(scaledBitmap,0,measuredHeight/4,null); } public void setCurrentProgress(float currentProgress){ mCurrentProgress = currentProgress; } }"},{"file_path":"MeiTuanRefreshListView-master\\app\\src\\main\\java\\com\\zhangqi\\meituanrefreshlistview\\MeiTuanRefreshSecondStepView.java","file_content":"package com.zhangqi.meituanrefreshlistview; import android.content.Context; import android.graphics.Bitmap; import android.graphics.BitmapFactory; import android.graphics.Canvas; import android.util.AttributeSet; import android.util.Log; import android.view.View; public class MeiTuanRefreshSecondStepView extends View{ private Bitmap endBitmap; public MeiTuanRefreshSecondStepView(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); init(); } public MeiTuanRefreshSecondStepView(Context context, AttributeSet attrs) { super(context, attrs); init(); } public MeiTuanRefreshSecondStepView(Context context) { super(context); init(); } private void init() { endBitmap = Bitmap.createBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.pull_end_image_frame_05)); } @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { setMeasuredDimension(measureWidth(widthMeasureSpec), measureWidth(widthMeasureSpec)*endBitmap.getHeight()/endBitmap.getWidth()); } private int measureWidth(int widthMeasureSpec){ int result = 0; int size = MeasureSpec.getSize(widthMeasureSpec); int mode = MeasureSpec.getMode(widthMeasureSpec); if (mode == MeasureSpec.EXACTLY) { result = size; }else { result = endBitmap.getWidth(); if (mode == MeasureSpec.AT_MOST) { result = Math.min(result, size); } } return result; } }"},{"file_path":"MeiTuanRefreshListView-master\\app\\src\\main\\java\\com\\zhangqi\\meituanrefreshlistview\\MeiTuanRefreshThirdStepView.java","file_content":"package com.zhangqi.meituanrefreshlistview; import android.content.Context; import android.graphics.Bitmap; import android.graphics.BitmapFactory; import android.util.AttributeSet; import android.view.View; public class MeiTuanRefreshThirdStepView extends View{ private Bitmap endBitmap; public MeiTuanRefreshThirdStepView(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); init(); } public MeiTuanRefreshThirdStepView(Context context, AttributeSet attrs) { super(context, attrs); init(); } public MeiTuanRefreshThirdStepView(Context context) { super(context); init(); } private void init() { endBitmap = Bitmap.createBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.pull_end_image_frame_05)); } @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { setMeasuredDimension(measureWidth(widthMeasureSpec), measureWidth(widthMeasureSpec)*endBitmap.getHeight()/endBitmap.getWidth()); } private int measureWidth(int widthMeasureSpec){ int result = 0; int size = MeasureSpec.getSize(widthMeasureSpec); int mode = MeasureSpec.getMode(widthMeasureSpec); if (mode == MeasureSpec.EXACTLY) { result = size; }else { result = endBitmap.getWidth(); if (mode == MeasureSpec.AT_MOST) { result = Math.min(result, size); } } return result; } }"}]}}
{"project_id":80,"chunk_id":0,"content":{"main_file_path":"MeiTuanRefreshListView-master\\app\\src\\main\\java\\com\\zhangqi\\meituanrefreshlistview\\MeiTuanRefreshFirstStepView.java","main_file_content":"package com.zhangqi.meituanrefreshlistview; import android.content.Context; import android.graphics.Bitmap; import android.graphics.BitmapFactory; import android.graphics.Canvas; import android.util.AttributeSet; import android.view.View; public class MeiTuanRefreshFirstStepView extends View{ private Bitmap initialBitmap; private int measuredWidth; private int measuredHeight; private Bitmap endBitmap; private float mCurrentProgress; private Bitmap scaledBitmap; public MeiTuanRefreshFirstStepView(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); init(context); } public MeiTuanRefreshFirstStepView(Context context, AttributeSet attrs) { super(context, attrs); init(context); } public MeiTuanRefreshFirstStepView(Context context) { super(context); init(context); } private void init(Context context) { initialBitmap = Bitmap.createBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.pull_image)); endBitmap = Bitmap.createBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.pull_end_image_frame_05)); } @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { setMeasuredDimension(measureWidth(widthMeasureSpec),measureWidth(widthMeasureSpec)*endBitmap.getHeight()/endBitmap.getWidth()); } private int measureWidth(int widMeasureSpec){ int result = 0; int size = MeasureSpec.getSize(widMeasureSpec); int mode = MeasureSpec.getMode(widMeasureSpec); if (mode == MeasureSpec.EXACTLY){ result = size; }else{ result = endBitmap.getWidth(); if (mode == MeasureSpec.AT_MOST){ result = Math.min(result,size); } } return result; } @Override protected void onLayout(boolean changed, int left, int top, int right, int bottom) { super.onLayout(changed, left, top, right, bottom); measuredWidth = getMeasuredWidth(); measuredHeight = getMeasuredHeight(); scaledBitmap = Bitmap.createScaledBitmap(initialBitmap, measuredWidth,measuredWidth*initialBitmap.getHeight()/initialBitmap.getWidth(), true); } @Override protected void onDraw(Canvas canvas) { super.onDraw(canvas); canvas.scale(mCurrentProgress, mCurrentProgress, measuredWidth/2, measuredHeight/2); canvas.drawBitmap(scaledBitmap,0,measuredHeight/4,null); } public void setCurrentProgress(float currentProgress){ mCurrentProgress = currentProgress; } }","dependencies":[]}}
{"project_id":80,"chunk_id":0,"content":{"main_file_path":"MeiTuanRefreshListView-master\\app\\src\\main\\java\\com\\zhangqi\\meituanrefreshlistview\\MeiTuanRefreshSecondStepView.java","main_file_content":"package com.zhangqi.meituanrefreshlistview; import android.content.Context; import android.graphics.Bitmap; import android.graphics.BitmapFactory; import android.graphics.Canvas; import android.util.AttributeSet; import android.util.Log; import android.view.View; public class MeiTuanRefreshSecondStepView extends View{ private Bitmap endBitmap; public MeiTuanRefreshSecondStepView(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); init(); } public MeiTuanRefreshSecondStepView(Context context, AttributeSet attrs) { super(context, attrs); init(); } public MeiTuanRefreshSecondStepView(Context context) { super(context); init(); } private void init() { endBitmap = Bitmap.createBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.pull_end_image_frame_05)); } @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { setMeasuredDimension(measureWidth(widthMeasureSpec), measureWidth(widthMeasureSpec)*endBitmap.getHeight()/endBitmap.getWidth()); } private int measureWidth(int widthMeasureSpec){ int result = 0; int size = MeasureSpec.getSize(widthMeasureSpec); int mode = MeasureSpec.getMode(widthMeasureSpec); if (mode == MeasureSpec.EXACTLY) { result = size; }else { result = endBitmap.getWidth(); if (mode == MeasureSpec.AT_MOST) { result = Math.min(result, size); } } return result; } }","dependencies":[]}}
{"project_id":80,"chunk_id":0,"content":{"main_file_path":"MeiTuanRefreshListView-master\\app\\src\\main\\java\\com\\zhangqi\\meituanrefreshlistview\\MeiTuanRefreshThirdStepView.java","main_file_content":"package com.zhangqi.meituanrefreshlistview; import android.content.Context; import android.graphics.Bitmap; import android.graphics.BitmapFactory; import android.util.AttributeSet; import android.view.View; public class MeiTuanRefreshThirdStepView extends View{ private Bitmap endBitmap; public MeiTuanRefreshThirdStepView(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); init(); } public MeiTuanRefreshThirdStepView(Context context, AttributeSet attrs) { super(context, attrs); init(); } public MeiTuanRefreshThirdStepView(Context context) { super(context); init(); } private void init() { endBitmap = Bitmap.createBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.pull_end_image_frame_05)); } @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { setMeasuredDimension(measureWidth(widthMeasureSpec), measureWidth(widthMeasureSpec)*endBitmap.getHeight()/endBitmap.getWidth()); } private int measureWidth(int widthMeasureSpec){ int result = 0; int size = MeasureSpec.getSize(widthMeasureSpec); int mode = MeasureSpec.getMode(widthMeasureSpec); if (mode == MeasureSpec.EXACTLY) { result = size; }else { result = endBitmap.getWidth(); if (mode == MeasureSpec.AT_MOST) { result = Math.min(result, size); } } return result; } }","dependencies":[]}}
{"project_id":80,"chunk_id":0,"content":{"main_file_path":"MeiTuanRefreshListView-master\\app\\src\\main\\java\\com\\zhangqi\\meituanrefreshlistview\\MyActivity.java","main_file_content":"package com.zhangqi.meituanrefreshlistview; import android.app.Activity; import android.os.Bundle; import android.widget.SeekBar; public class MyActivity extends Activity { private MeiTuanRefreshFirstStepView mFirstView; private SeekBar mSeekBar; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_my); mSeekBar = (SeekBar) findViewById(R.id.seekbar); mFirstView = (MeiTuanRefreshFirstStepView) findViewById(R.id.first_view); mSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() { @Override public void onProgressChanged(SeekBar seekBar, int i, boolean b) { float currentProgress = (float) i / (float) seekBar.getMax(); mFirstView.setCurrentProgress(currentProgress); mFirstView.postInvalidate(); } @Override public void onStartTrackingTouch(SeekBar seekBar) { } @Override public void onStopTrackingTouch(SeekBar seekBar) { } }); } }","dependencies":[{"file_path":"MeiTuanRefreshListView-master\\app\\src\\main\\java\\com\\zhangqi\\meituanrefreshlistview\\MeiTuanRefreshFirstStepView.java","file_content":"package com.zhangqi.meituanrefreshlistview; import android.content.Context; import android.graphics.Bitmap; import android.graphics.BitmapFactory; import android.graphics.Canvas; import android.util.AttributeSet; import android.view.View; public class MeiTuanRefreshFirstStepView extends View{ private Bitmap initialBitmap; private int measuredWidth; private int measuredHeight; private Bitmap endBitmap; private float mCurrentProgress; private Bitmap scaledBitmap; public MeiTuanRefreshFirstStepView(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); init(context); } public MeiTuanRefreshFirstStepView(Context context, AttributeSet attrs) { super(context, attrs); init(context); } public MeiTuanRefreshFirstStepView(Context context) { super(context); init(context); } private void init(Context context) { initialBitmap = Bitmap.createBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.pull_image)); endBitmap = Bitmap.createBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.pull_end_image_frame_05)); } @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { setMeasuredDimension(measureWidth(widthMeasureSpec),measureWidth(widthMeasureSpec)*endBitmap.getHeight()/endBitmap.getWidth()); } private int measureWidth(int widMeasureSpec){ int result = 0; int size = MeasureSpec.getSize(widMeasureSpec); int mode = MeasureSpec.getMode(widMeasureSpec); if (mode == MeasureSpec.EXACTLY){ result = size; }else{ result = endBitmap.getWidth(); if (mode == MeasureSpec.AT_MOST){ result = Math.min(result,size); } } return result; } @Override protected void onLayout(boolean changed, int left, int top, int right, int bottom) { super.onLayout(changed, left, top, right, bottom); measuredWidth = getMeasuredWidth(); measuredHeight = getMeasuredHeight(); scaledBitmap = Bitmap.createScaledBitmap(initialBitmap, measuredWidth,measuredWidth*initialBitmap.getHeight()/initialBitmap.getWidth(), true); } @Override protected void onDraw(Canvas canvas) { super.onDraw(canvas); canvas.scale(mCurrentProgress, mCurrentProgress, measuredWidth/2, measuredHeight/2); canvas.drawBitmap(scaledBitmap,0,measuredHeight/4,null); } public void setCurrentProgress(float currentProgress){ mCurrentProgress = currentProgress; } }"}]}}
{"project_id":82,"chunk_id":0,"content":{"main_file_path":"MiniDB-main\\src\\cli.java","main_file_content":"import java.util.Scanner; import minidb.xmlParser.DatabaseFile; import minidb.xmlParser.RegistryFile; import constants.*; public class cli { static RegistryFile registry; static DatabaseFile CurrentDb; public static void main(String[] args) { print(constants.HEADING); registry = new RegistryFile(constants.DATA_XML_PATH); Scanner input = new Scanner(System.in); while (true) { System.out.print(constants.CMD_PREFIX); String currentCmd = input.nextLine(); if (currentCmd.equals(\"exit;\")) { break; } long startTime = System.nanoTime(); cliInputs(currentCmd); long endTime = System.nanoTime(); long exeTime = (endTime - startTime) / 1000000; print(\"\\nExecution Time: \" + exeTime + \"ms\"); } input.close(); } private static void cliInputs(String input) { String[] cmdArgs = input.split(\" \"); switch (cmdArgs[0]) { case \"new\": { registry.createNewDatabase(cmdArgs[1]); break; } case \"use\": { String path = registry.getDatabasePath(cmdArgs[1], false); if (path != null) { CurrentDb = new DatabaseFile(path); CurrentDb.EditMode(); print(\"Successfully loaded Database named: \" + cmdArgs[1]); } else { print(\"Database not found\"); } break; } case \"list\": { registry.listAllDatabases(); break; } case \"help;\": { print(constants.HELP_COMMANDS); break; } case \"info\": { } case \"schema\": { if (CurrentDb != null) { String xy = cmdArgs[1]; if (xy.equals(\"show\")) { print(CurrentDb.getSchema()); } else { String[] schemaVals = xy.split(\",\"); if (schemaVals.length > 1) { CurrentDb.createSchema(xy); } else { print(\"There should be atleast 2 columns of data\"); } } } else { print(errors.NO_DATABASE_SELECTED); } break; } case \"add\": { if (CurrentDb != null) { CurrentDb.addData(cmdArgs[1]); } else { print(errors.NO_DATABASE_SELECTED); } break; } case \"read\": { if (CurrentDb != null) { if (cmdArgs.length == 1) { CurrentDb.readData(); } else { CurrentDb.readData(cmdArgs[1]); } } else { print(errors.NO_DATABASE_SELECTED); } break; } case \"drop\": { registry.deleteDatabase(cmdArgs[1]); break; } case \"update\": { if (CurrentDb != null) { } break; } case \"delete\": { if (CurrentDb != null) { CurrentDb.deleteData(cmdArgs[1]); } else { print(errors.NO_DATABASE_SELECTED); } break; } default: { print(\"UNKNOWN COMMAND: \" + cmdArgs[0] + \"\\nType `help;` for commands list\"); break; } } } private static void print(String x) { System.out.println(x); } }","dependencies":[{"file_path":"MiniDB-main\\src\\minidb\\xmlParser\\DatabaseFile.java","file_content":"package minidb.xmlParser; import org.w3c.dom.*; import javax.xml.xpath.*; public class DatabaseFile extends XMLFiles { private static String TAG_STORAGE = \"Xstorage\"; private static String TAG_META = \"Xmeta\"; private static String TAG_DATA = \"Xdata\"; private Element metaElem; private Element storageElem; public DatabaseFile(String path) { super(path); } protected void createFile() { Element rootElem = doc.createElement(\"Xroot\"); Element meta = doc.createElement(TAG_META); Element data = doc.createElement(TAG_STORAGE); rootElem.appendChild(meta); rootElem.appendChild(data); doc.appendChild(rootElem); this.updateFile(); } public void EditMode() { metaElem = (Element) doc.getElementsByTagName(TAG_META).item(0); storageElem = (Element) doc.getElementsByTagName(TAG_STORAGE).item(0); } public String getSchema() { return storageElem.getAttribute(\"schema\"); } public void createSchema(String value) { storageElem.setAttribute(\"schema\", value); this.updateFile(); } public void addData(String value) { String[] vals = value.split(\",\"); String[] schemaArray = this.getSchema().split(\",\"); if (vals.length == schemaArray.length) { Element newDataElem = doc.createElement(TAG_DATA); newDataElem.setAttribute(\"id\", vals[0]); for (int i = 1; i < schemaArray.length; i++) { String v = vals[i]; String s = schemaArray[i]; Element x = doc.createElement(s); x.appendChild(doc.createTextNode(v)); newDataElem.appendChild(x); } storageElem.appendChild(newDataElem); this.updateFile(); } else { print(\"The data does not follow the declared schema: \" + this.getSchema()); } } public void readData() { String[] schemaArray = this.getSchema().split(\",\"); String headers = String.join(\" \", schemaArray); print(headers); NodeList dataList = doc.getElementsByTagName(TAG_DATA); for (int i = 0; i < dataList.getLength(); i++) { Node singleItem = dataList.item(i); NodeList itemsChildren = singleItem.getChildNodes(); String dataString = singleItem.getAttributes().getNamedItem(\"id\").getNodeValue() + \" \"; for (int j = 0; j < itemsChildren.getLength(); j++) { Node z = itemsChildren.item(j); dataString += z.getTextContent().trim() + \" \"; } print(dataString.trim()); } } public void readData(String id) { try { XPath xPath = XPathFactory.newInstance().newXPath(); Node nameNode = (Node) xPath.compile(\"/Xroot/Xstorage/Xdata[@id=\" + id + \"]/name\").evaluate(doc, XPathConstants.NODE); if (nameNode != null) { System.out.println(nameNode.getTextContent()); } } catch (XPathExpressionException e) { e.printStackTrace(); } } public void deleteData(String id) { try { XPath xPath = XPathFactory.newInstance().newXPath(); Node nameNode = (Node) xPath.compile(\"/Xroot/Xstorage/Xdata[@id=\" + id + \"]\").evaluate(doc, XPathConstants.NODE); if (nameNode != null) { nameNode.getParentNode().removeChild(nameNode); this.updateFile(); } } catch (XPathExpressionException e) { e.printStackTrace(); } } }"},{"file_path":"MiniDB-main\\src\\minidb\\xmlParser\\RegistryFile.java","file_content":"package minidb.xmlParser; import java.io.File; import java.time.LocalDateTime; import java.time.format.DateTimeFormatter; import java.util.Objects; import javax.xml.parsers.*; import org.w3c.dom.*; import constants.constants; public class RegistryFile extends XMLFiles { public RegistryFile(String path) { super(path); } void createFile() { Element rootElem = doc.createElement(\"root\"); Element emptyDb = this.addDbEntry(\"empty\", \"true\"); rootElem.appendChild(emptyDb); doc.appendChild(rootElem); new DatabaseFile(this.getDatabasePath(\"empty\", true)); this.updateFile(); System.out.println(\"Intialized: \" + xmlFile.getPath()); } private Element addDbEntry(String name, String disabled) { Document doc = this.doc; Element databaseElem = doc.createElement(\"database\"); Element nameElem = doc.createElement(\"name\"); Element pathElem = doc.createElement(\"path\"); Element createTime = doc.createElement(\"createdTime\"); Element updateTime = doc.createElement(\"lastUpdateTime\"); DateTimeFormatter dtf = DateTimeFormatter.ISO_LOCAL_DATE_TIME; LocalDateTime now = LocalDateTime.now(); String timeNow = dtf.format(now); nameElem.appendChild(doc.createTextNode(name)); pathElem.appendChild(doc.createTextNode(this.getDatabasePath(name, true))); createTime.appendChild(doc.createTextNode(timeNow)); updateTime.appendChild(doc.createTextNode(timeNow)); databaseElem.appendChild(nameElem); databaseElem.appendChild(pathElem); databaseElem.appendChild(createTime); databaseElem.appendChild(updateTime); databaseElem.setAttribute(\"disabled\", disabled); return databaseElem; } public void createNewDatabase(String name) { try { if (!this.isDatabaseExists(name)) { Element dbEntry = addDbEntry(name, \"false\"); this.doc.getDocumentElement().appendChild(dbEntry); this.updateFile(); new DatabaseFile(this.getDatabasePath(name, true)); System.out.println(\"Successfully created Database named: \" + name); } else { System.out.println(\"Database already exists\"); } } catch (Exception e) { e.printStackTrace(); } } public void listAllDatabases() { NodeList list = this.doc.getElementsByTagName(\"name\"); for (int i = 0; i < list.getLength(); i++) { Node dbNode = list.item(i); String name = dbNode.getTextContent(); System.out.println(i + \". \" + name); } } public int checkDatabase(String name) { int x = -1; NodeList list = this.doc.getElementsByTagName(\"name\"); for (int i = 0; i < list.getLength(); i++) { Node dbNode = list.item(i); String dbName = dbNode.getTextContent(); if (Objects.equals(dbName, name)) { x = i; } } return x; } private boolean isDatabaseExists(String name) { if (checkDatabase(name) != -1) { return true; } else return false; } public String getDatabasePath(String name, boolean create) { if (create) { return constants.DB_DIR_PATH + \"\\\\\" + name + \".xml\"; } else { if (isDatabaseExists(name)) { return constants.DB_DIR_PATH + \"\\\\\" + name + \".xml\"; } else { return null; } } } public void deleteDatabase(String name) { int dbid = checkDatabase(name); if (dbid != -1) { String dbPath = getDatabasePath(name, false); NodeList list = this.doc.getElementsByTagName(\"database\"); Element dbEntry = (Element) list.item(dbid); dbEntry.getParentNode().removeChild(dbEntry); this.updateFile(); File f = new File(dbPath); f.delete(); print(\"Database deleted\"); } else { print(\"Database does not exist\"); } } }"}]}}
{"project_id":82,"chunk_id":0,"content":{"main_file_path":"MiniDB-main\\src\\constants\\constants.java","main_file_content":"package constants; public class constants { public static String VERSION = \"v0.3.1\"; static String ROOT_PATH = \".\"; public static String DATA_XML_PATH = ROOT_PATH + \"\\\\minidb.xml\"; public static String DB_DIR_PATH = ROOT_PATH + \"\\\\db\"; public static String HEADING = \"\\n\\n\" + \"╔═══════════════════════════════════════════════════╗\\n\" + \"║ Welcome to MiniDB ║\\n\" + \"║ \" + VERSION + \" ║\\n\" + \"║ --- Made by Chanakya --- ║\\n\" + \"║ Source: https: \"╚═══════════════════════════════════════════════════╝\\n\" + \"Enter the Commands: (Use 'exit;' to exit the cli)\"; public static String CMD_PREFIX = \"\\n\\u001B[31m>\\u001B[0m \"; public static String HEADINGx = \"\\n\\n\" + \" Welcome to MiniDB \\n\" + \" \" + VERSION + \" \\n\" + \" Made by Chanakya \\n\" + \"Source: https: \"Enter the Commands: (Use 'exit;' to exit the cli)\"; public static String CMD_PREFIXx = \"\\n> \"; public static final String HELP_COMMANDS = \"\\n\" + \"Commands:\\n\" + \" exit; - Exits the program\\n\" + \" help - Prints this menu\\n\" + \" list - Lists all the databases\\n\" + \" use <name> - Select the database\\n\" + \" drop <name> - Drops a database if it exists\\n\" + \" new <name> - Create a new database\\n\" + \" schema <data> - declare the schema for newly created database\\n\" + \" add <data> - Inserts data (MUST FOLLOW SCHEMA)\\n\" + \" read ?<id> - Shows the data in the database. id is optional\\n\" + \" delete <table> - Deletes a row\\n\"; }","dependencies":[]}}
{"project_id":82,"chunk_id":0,"content":{"main_file_path":"MiniDB-main\\src\\constants\\errors.java","main_file_content":"package constants; public class errors { public static String NO_DATABASE_SELECTED = \"You need to select a database first with `use` command\"; }","dependencies":[]}}
{"project_id":82,"chunk_id":0,"content":{"main_file_path":"MiniDB-main\\src\\minidb\\xmlParser\\DatabaseFile.java","main_file_content":"package minidb.xmlParser; import org.w3c.dom.*; import javax.xml.xpath.*; public class DatabaseFile extends XMLFiles { private static String TAG_STORAGE = \"Xstorage\"; private static String TAG_META = \"Xmeta\"; private static String TAG_DATA = \"Xdata\"; private Element metaElem; private Element storageElem; public DatabaseFile(String path) { super(path); } protected void createFile() { Element rootElem = doc.createElement(\"Xroot\"); Element meta = doc.createElement(TAG_META); Element data = doc.createElement(TAG_STORAGE); rootElem.appendChild(meta); rootElem.appendChild(data); doc.appendChild(rootElem); this.updateFile(); } public void EditMode() { metaElem = (Element) doc.getElementsByTagName(TAG_META).item(0); storageElem = (Element) doc.getElementsByTagName(TAG_STORAGE).item(0); } public String getSchema() { return storageElem.getAttribute(\"schema\"); } public void createSchema(String value) { storageElem.setAttribute(\"schema\", value); this.updateFile(); } public void addData(String value) { String[] vals = value.split(\",\"); String[] schemaArray = this.getSchema().split(\",\"); if (vals.length == schemaArray.length) { Element newDataElem = doc.createElement(TAG_DATA); newDataElem.setAttribute(\"id\", vals[0]); for (int i = 1; i < schemaArray.length; i++) { String v = vals[i]; String s = schemaArray[i]; Element x = doc.createElement(s); x.appendChild(doc.createTextNode(v)); newDataElem.appendChild(x); } storageElem.appendChild(newDataElem); this.updateFile(); } else { print(\"The data does not follow the declared schema: \" + this.getSchema()); } } public void readData() { String[] schemaArray = this.getSchema().split(\",\"); String headers = String.join(\" \", schemaArray); print(headers); NodeList dataList = doc.getElementsByTagName(TAG_DATA); for (int i = 0; i < dataList.getLength(); i++) { Node singleItem = dataList.item(i); NodeList itemsChildren = singleItem.getChildNodes(); String dataString = singleItem.getAttributes().getNamedItem(\"id\").getNodeValue() + \" \"; for (int j = 0; j < itemsChildren.getLength(); j++) { Node z = itemsChildren.item(j); dataString += z.getTextContent().trim() + \" \"; } print(dataString.trim()); } } public void readData(String id) { try { XPath xPath = XPathFactory.newInstance().newXPath(); Node nameNode = (Node) xPath.compile(\"/Xroot/Xstorage/Xdata[@id=\" + id + \"]/name\").evaluate(doc, XPathConstants.NODE); if (nameNode != null) { System.out.println(nameNode.getTextContent()); } } catch (XPathExpressionException e) { e.printStackTrace(); } } public void deleteData(String id) { try { XPath xPath = XPathFactory.newInstance().newXPath(); Node nameNode = (Node) xPath.compile(\"/Xroot/Xstorage/Xdata[@id=\" + id + \"]\").evaluate(doc, XPathConstants.NODE); if (nameNode != null) { nameNode.getParentNode().removeChild(nameNode); this.updateFile(); } } catch (XPathExpressionException e) { e.printStackTrace(); } } }","dependencies":[{"file_path":"MiniDB-main\\src\\minidb\\xmlParser\\XMLFiles.java","file_content":"package minidb.xmlParser; import java.io.File; import java.io.IOException; import javax.xml.parsers.*; import javax.xml.transform.*; import javax.xml.transform.dom.DOMSource; import javax.xml.transform.stream.StreamResult; import org.w3c.dom.*; import org.xml.sax.SAXException; import constants.constants; public abstract class XMLFiles { protected File xmlFile; protected Document doc; public XMLFiles(String path) { try { xmlFile = new File(path); new File(constants.DB_DIR_PATH).mkdir(); boolean NoFileFound = xmlFile.createNewFile(); load(NoFileFound); } catch (ParserConfigurationException | SAXException | IOException err) { System.out.println(err); err.printStackTrace(); } } private void load(boolean NoFile) throws ParserConfigurationException, SAXException, IOException { DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance(); DocumentBuilder docBuilder = docFactory.newDocumentBuilder(); if (NoFile) { doc = docBuilder.newDocument(); createFile(); } else { doc = docBuilder.parse(xmlFile); ; } } abstract void createFile(); protected void updateFile() { try { Transformer transformer = TransformerFactory.newInstance().newTransformer(); transformer.setOutputProperty(OutputKeys.ENCODING, \"UTF-8\"); transformer.setOutputProperty(OutputKeys.INDENT, \"no\"); transformer.setOutputProperty(OutputKeys.METHOD, \"xml\"); DOMSource source = new DOMSource(this.doc); StreamResult result = new StreamResult(this.xmlFile); transformer.transform(source, result); print(\"Updated;\"); } catch (TransformerException err) { err.printStackTrace(); } } protected void print(String x) { System.out.println(x); } }"}]}}
{"project_id":82,"chunk_id":0,"content":{"main_file_path":"MiniDB-main\\src\\minidb\\xmlParser\\RegistryFile.java","main_file_content":"package minidb.xmlParser; import java.io.File; import java.time.LocalDateTime; import java.time.format.DateTimeFormatter; import java.util.Objects; import javax.xml.parsers.*; import org.w3c.dom.*; import constants.constants; public class RegistryFile extends XMLFiles { public RegistryFile(String path) { super(path); } void createFile() { Element rootElem = doc.createElement(\"root\"); Element emptyDb = this.addDbEntry(\"empty\", \"true\"); rootElem.appendChild(emptyDb); doc.appendChild(rootElem); new DatabaseFile(this.getDatabasePath(\"empty\", true)); this.updateFile(); System.out.println(\"Intialized: \" + xmlFile.getPath()); } private Element addDbEntry(String name, String disabled) { Document doc = this.doc; Element databaseElem = doc.createElement(\"database\"); Element nameElem = doc.createElement(\"name\"); Element pathElem = doc.createElement(\"path\"); Element createTime = doc.createElement(\"createdTime\"); Element updateTime = doc.createElement(\"lastUpdateTime\"); DateTimeFormatter dtf = DateTimeFormatter.ISO_LOCAL_DATE_TIME; LocalDateTime now = LocalDateTime.now(); String timeNow = dtf.format(now); nameElem.appendChild(doc.createTextNode(name)); pathElem.appendChild(doc.createTextNode(this.getDatabasePath(name, true))); createTime.appendChild(doc.createTextNode(timeNow)); updateTime.appendChild(doc.createTextNode(timeNow)); databaseElem.appendChild(nameElem); databaseElem.appendChild(pathElem); databaseElem.appendChild(createTime); databaseElem.appendChild(updateTime); databaseElem.setAttribute(\"disabled\", disabled); return databaseElem; } public void createNewDatabase(String name) { try { if (!this.isDatabaseExists(name)) { Element dbEntry = addDbEntry(name, \"false\"); this.doc.getDocumentElement().appendChild(dbEntry); this.updateFile(); new DatabaseFile(this.getDatabasePath(name, true)); System.out.println(\"Successfully created Database named: \" + name); } else { System.out.println(\"Database already exists\"); } } catch (Exception e) { e.printStackTrace(); } } public void listAllDatabases() { NodeList list = this.doc.getElementsByTagName(\"name\"); for (int i = 0; i < list.getLength(); i++) { Node dbNode = list.item(i); String name = dbNode.getTextContent(); System.out.println(i + \". \" + name); } } public int checkDatabase(String name) { int x = -1; NodeList list = this.doc.getElementsByTagName(\"name\"); for (int i = 0; i < list.getLength(); i++) { Node dbNode = list.item(i); String dbName = dbNode.getTextContent(); if (Objects.equals(dbName, name)) { x = i; } } return x; } private boolean isDatabaseExists(String name) { if (checkDatabase(name) != -1) { return true; } else return false; } public String getDatabasePath(String name, boolean create) { if (create) { return constants.DB_DIR_PATH + \"\\\\\" + name + \".xml\"; } else { if (isDatabaseExists(name)) { return constants.DB_DIR_PATH + \"\\\\\" + name + \".xml\"; } else { return null; } } } public void deleteDatabase(String name) { int dbid = checkDatabase(name); if (dbid != -1) { String dbPath = getDatabasePath(name, false); NodeList list = this.doc.getElementsByTagName(\"database\"); Element dbEntry = (Element) list.item(dbid); dbEntry.getParentNode().removeChild(dbEntry); this.updateFile(); File f = new File(dbPath); f.delete(); print(\"Database deleted\"); } else { print(\"Database does not exist\"); } } }","dependencies":[{"file_path":"MiniDB-main\\src\\minidb\\xmlParser\\DatabaseFile.java","file_content":"package minidb.xmlParser; import org.w3c.dom.*; import javax.xml.xpath.*; public class DatabaseFile extends XMLFiles { private static String TAG_STORAGE = \"Xstorage\"; private static String TAG_META = \"Xmeta\"; private static String TAG_DATA = \"Xdata\"; private Element metaElem; private Element storageElem; public DatabaseFile(String path) { super(path); } protected void createFile() { Element rootElem = doc.createElement(\"Xroot\"); Element meta = doc.createElement(TAG_META); Element data = doc.createElement(TAG_STORAGE); rootElem.appendChild(meta); rootElem.appendChild(data); doc.appendChild(rootElem); this.updateFile(); } public void EditMode() { metaElem = (Element) doc.getElementsByTagName(TAG_META).item(0); storageElem = (Element) doc.getElementsByTagName(TAG_STORAGE).item(0); } public String getSchema() { return storageElem.getAttribute(\"schema\"); } public void createSchema(String value) { storageElem.setAttribute(\"schema\", value); this.updateFile(); } public void addData(String value) { String[] vals = value.split(\",\"); String[] schemaArray = this.getSchema().split(\",\"); if (vals.length == schemaArray.length) { Element newDataElem = doc.createElement(TAG_DATA); newDataElem.setAttribute(\"id\", vals[0]); for (int i = 1; i < schemaArray.length; i++) { String v = vals[i]; String s = schemaArray[i]; Element x = doc.createElement(s); x.appendChild(doc.createTextNode(v)); newDataElem.appendChild(x); } storageElem.appendChild(newDataElem); this.updateFile(); } else { print(\"The data does not follow the declared schema: \" + this.getSchema()); } } public void readData() { String[] schemaArray = this.getSchema().split(\",\"); String headers = String.join(\" \", schemaArray); print(headers); NodeList dataList = doc.getElementsByTagName(TAG_DATA); for (int i = 0; i < dataList.getLength(); i++) { Node singleItem = dataList.item(i); NodeList itemsChildren = singleItem.getChildNodes(); String dataString = singleItem.getAttributes().getNamedItem(\"id\").getNodeValue() + \" \"; for (int j = 0; j < itemsChildren.getLength(); j++) { Node z = itemsChildren.item(j); dataString += z.getTextContent().trim() + \" \"; } print(dataString.trim()); } } public void readData(String id) { try { XPath xPath = XPathFactory.newInstance().newXPath(); Node nameNode = (Node) xPath.compile(\"/Xroot/Xstorage/Xdata[@id=\" + id + \"]/name\").evaluate(doc, XPathConstants.NODE); if (nameNode != null) { System.out.println(nameNode.getTextContent()); } } catch (XPathExpressionException e) { e.printStackTrace(); } } public void deleteData(String id) { try { XPath xPath = XPathFactory.newInstance().newXPath(); Node nameNode = (Node) xPath.compile(\"/Xroot/Xstorage/Xdata[@id=\" + id + \"]\").evaluate(doc, XPathConstants.NODE); if (nameNode != null) { nameNode.getParentNode().removeChild(nameNode); this.updateFile(); } } catch (XPathExpressionException e) { e.printStackTrace(); } } }"},{"file_path":"MiniDB-main\\src\\minidb\\xmlParser\\XMLFiles.java","file_content":"package minidb.xmlParser; import java.io.File; import java.io.IOException; import javax.xml.parsers.*; import javax.xml.transform.*; import javax.xml.transform.dom.DOMSource; import javax.xml.transform.stream.StreamResult; import org.w3c.dom.*; import org.xml.sax.SAXException; import constants.constants; public abstract class XMLFiles { protected File xmlFile; protected Document doc; public XMLFiles(String path) { try { xmlFile = new File(path); new File(constants.DB_DIR_PATH).mkdir(); boolean NoFileFound = xmlFile.createNewFile(); load(NoFileFound); } catch (ParserConfigurationException | SAXException | IOException err) { System.out.println(err); err.printStackTrace(); } } private void load(boolean NoFile) throws ParserConfigurationException, SAXException, IOException { DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance(); DocumentBuilder docBuilder = docFactory.newDocumentBuilder(); if (NoFile) { doc = docBuilder.newDocument(); createFile(); } else { doc = docBuilder.parse(xmlFile); ; } } abstract void createFile(); protected void updateFile() { try { Transformer transformer = TransformerFactory.newInstance().newTransformer(); transformer.setOutputProperty(OutputKeys.ENCODING, \"UTF-8\"); transformer.setOutputProperty(OutputKeys.INDENT, \"no\"); transformer.setOutputProperty(OutputKeys.METHOD, \"xml\"); DOMSource source = new DOMSource(this.doc); StreamResult result = new StreamResult(this.xmlFile); transformer.transform(source, result); print(\"Updated;\"); } catch (TransformerException err) { err.printStackTrace(); } } protected void print(String x) { System.out.println(x); } }"}]}}
{"project_id":82,"chunk_id":0,"content":{"main_file_path":"MiniDB-main\\src\\minidb\\xmlParser\\XMLFiles.java","main_file_content":"package minidb.xmlParser; import java.io.File; import java.io.IOException; import javax.xml.parsers.*; import javax.xml.transform.*; import javax.xml.transform.dom.DOMSource; import javax.xml.transform.stream.StreamResult; import org.w3c.dom.*; import org.xml.sax.SAXException; import constants.constants; public abstract class XMLFiles { protected File xmlFile; protected Document doc; public XMLFiles(String path) { try { xmlFile = new File(path); new File(constants.DB_DIR_PATH).mkdir(); boolean NoFileFound = xmlFile.createNewFile(); load(NoFileFound); } catch (ParserConfigurationException | SAXException | IOException err) { System.out.println(err); err.printStackTrace(); } } private void load(boolean NoFile) throws ParserConfigurationException, SAXException, IOException { DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance(); DocumentBuilder docBuilder = docFactory.newDocumentBuilder(); if (NoFile) { doc = docBuilder.newDocument(); createFile(); } else { doc = docBuilder.parse(xmlFile); ; } } abstract void createFile(); protected void updateFile() { try { Transformer transformer = TransformerFactory.newInstance().newTransformer(); transformer.setOutputProperty(OutputKeys.ENCODING, \"UTF-8\"); transformer.setOutputProperty(OutputKeys.INDENT, \"no\"); transformer.setOutputProperty(OutputKeys.METHOD, \"xml\"); DOMSource source = new DOMSource(this.doc); StreamResult result = new StreamResult(this.xmlFile); transformer.transform(source, result); print(\"Updated;\"); } catch (TransformerException err) { err.printStackTrace(); } } protected void print(String x) { System.out.println(x); } }","dependencies":[]}}
{"project_id":86,"chunk_id":0,"content":{"main_file_path":"Online Survey System Java Project\\survey\\src\\java\\beans\\Question.java","main_file_content":"package beans; import javax.faces.bean.ManagedBean; import javax.faces.model.SelectItem; @ManagedBean public class Question { private String id, text, answer; public String getAnswer() { return answer; } public void setAnswer(String answer) { this.answer = answer; } public SelectItem[] getOptions() { return options; } public void setOptions(SelectItem[] options) { this.options = options; } private SelectItem options[] = new SelectItem[3]; public String getId() { return id; } public void setId(String id) { this.id = id; } public String getText() { return text; } public void setText(String text) { this.text = text; } public Question() { } public Question(String id, String text, String opt1, String opt2, String opt3) { this.id = id; this.text = text; this.options[0] = new SelectItem(1,opt1); this.options[1] = new SelectItem(2,opt2); this.options[2] = new SelectItem(3,opt3); } }","dependencies":[]}}
{"project_id":86,"chunk_id":0,"content":{"main_file_path":"Online Survey System Java Project\\survey\\src\\java\\beans\\Topic.java","main_file_content":"package beans; import dao.TopicDAO; import java.util.ArrayList; import javax.faces.bean.ManagedBean; import javax.faces.bean.SessionScoped; import javax.faces.event.ActionEvent; import javax.faces.model.SelectItem; @ManagedBean @SessionScoped public class Topic { private String title, id; private ArrayList<Question> questions = null; private int position = 0; public int getPosition() { return position; } public Topic() { } public String getId() { return id; } public void setId(String id) { this.id = id; } public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } public Topic(String id, String title) { this.title = title; this.id = id; } public String process() { position = 0; questions = TopicDAO.getQuestions(id); return \"survey\"; } public ArrayList<SelectItem> getTopics() { ArrayList<Topic> lst = TopicDAO.getTopics(); ArrayList<SelectItem> items = new ArrayList<SelectItem>(); for ( Topic t : lst) items.add( new SelectItem( t.getId(), t.getTitle())); return items; } public Question getQuestion() { return questions.get(position); } public int getQuestionCount() { return questions.size(); } public void next(ActionEvent evt) { position ++; } public void previous(ActionEvent evt) { position --; } public String cancel() { return \"index\"; } public String finish() { boolean done = TopicDAO.storeSurveyResults(id, questions); if ( done ) return \"finish\"; else return \"error\"; } }","dependencies":[{"file_path":"Online Survey System Java Project\\surveyadmin\\src\\java\\beans\\Question.java","file_content":"package beans; import dao.TopicDAO; import javax.faces.event.ActionEvent; public class Question { private String id, text, opt1, opt2, opt3, topicid, message; public String getId() { return id; } public void setId(String id) { this.id = id; } public String getMessage() { return message; } public void setMessage(String message) { this.message = message; } public String getOpt1() { return opt1; } public void setOpt1(String opt1) { this.opt1 = opt1; } public String getOpt2() { return opt2; } public void setOpt2(String opt2) { this.opt2 = opt2; } public String getOpt3() { return opt3; } public void setOpt3(String opt3) { this.opt3 = opt3; } public String getText() { return text; } public void setText(String text) { this.text = text; } public String getTopicid() { return topicid; } public void setTopicid(String topicid) { this.topicid = topicid; } public Question() { } public Question(String id, String text, String opt1, String opt2, String opt3, String topicid) { this.id = id; this.text = text; this.opt1 = opt1; this.opt2 = opt2; this.opt3 = opt3; this.topicid = topicid; } public Question(String id, String text, String opt1, String opt2, String opt3) { this.id = id; this.text = text; this.opt1 = opt1; this.opt2 = opt2; this.opt3 = opt3; } public void add(ActionEvent evt) { topicid = (String) Request.getSession().getAttribute(\"topicid\"); System.out.println(\"Topic ID : \" + topicid); if (TopicDAO.addQuestion(this)) { message = \"Added Question Successfully!\"; } else { message = \"Sorry! Could't Add Question!\"; } } }"},{"file_path":"Online Survey System Java Project\\surveyadmin\\src\\java\\beans\\Topic.java","file_content":"package beans; import dao.TopicDAO; import java.util.List; import javax.faces.event.ActionEvent; public class Topic { private String title, id, addedon, uname , message; public Topic() { } public Topic(String id, String title, String addedon, String uname) { this.title = title; this.id = id; this.addedon = addedon; this.uname = uname; } public String getMessage() { return message; } public void setMessage(String message) { this.message = message; } public String getAddedon() { return addedon; } public void setAddedon(String addedon) { this.addedon = addedon; } public String getId() { return id; } public void setId(String id) { this.id = id; } public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } public String getUname() { return uname; } public void setUname(String uname) { this.uname = uname; } public void add(ActionEvent evt) { boolean done = TopicDAO.add( Request.getSession().getAttribute(\"uname\").toString() , title); if ( done ) message = \"Topic has been added!\"; else message = \"Sorry! Topic was not added!\"; } public List<Topic> getTopics() { return TopicDAO.getTopics(); } public List<Question> getQuestions() { return TopicDAO.getQuestions( Request.getRequest().getParameter(\"topicid\")); } public List<SurveyResult> getSurveyResults() { return TopicDAO.getSurveyResults(Request.getRequest().getParameter(\"topicid\")); } }"},{"file_path":"Online Survey System Java Project\\surveyadmin\\src\\java\\dao\\TopicDAO.java","file_content":"package dao; import beans.Question; import beans.SurveyResult; import beans.Topic; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.Statement; import java.util.ArrayList; public class TopicDAO { public static boolean add(String uname, String title) { Connection con = null; PreparedStatement ps = null; try { con = Database.getConnection(); ps = con.prepareStatement(\"insert into topics values(topicid_sequence.nextval,?,sysdate,?)\"); ps.setString(1, title); ps.setString(2, uname); int count = ps.executeUpdate(); return count == 1; } catch (Exception ex) { System.out.println(\"Error in Topic.add() -->\" + ex.getMessage()); return false; } finally { Database.close(con); } } public static boolean delete(String topicid) { Connection con = null; PreparedStatement ps = null; try { con = Database.getConnection(); con.setAutoCommit(false); ps = con.prepareStatement(\"delete from questions where topicid = ?\"); ps.setString(1, topicid); ps.executeUpdate(); ps = con.prepareStatement(\"delete from topics where topicid = ?\"); ps.setString(1, topicid); ps.executeUpdate(); con.commit(); return true; } catch (Exception ex) { System.out.println(\"Error in Topic.delete() -->\" + ex.getMessage()); try { con.rollback(); } catch (Exception nex) { } return false; } finally { Database.close(con); } } public static boolean deleteQuestion(String questionid) { Connection con = null; PreparedStatement ps = null; try { con = Database.getConnection(); ps = con.prepareStatement(\"delete from questions where questionid = ?\"); ps.setString(1, questionid); ps.executeUpdate(); return true; } catch (Exception ex) { System.out.println(\"Error in Topic.deleteQuestion() -->\" + ex.getMessage()); return false; } finally { Database.close(con); } } public static boolean addQuestion(Question q) { Connection con = null; PreparedStatement ps = null; try { con = Database.getConnection(); ps = con.prepareStatement(\"insert into questions values(questionid_sequence.nextval,?,?,?,?,?)\"); ps.setString(1, q.getText()); ps.setString(2, q.getOpt1()); ps.setString(3, q.getOpt2()); ps.setString(4, q.getOpt3()); ps.setString(5, q.getTopicid()); int count = ps.executeUpdate(); return count == 1; } catch (Exception ex) { System.out.println(\"Error in Topic.addQuestion() -->\" + ex.getMessage()); return false; } finally { Database.close(con); } } public static ArrayList<Topic> getTopics() { try { Connection con = Database.getConnection(); Statement statement = con.createStatement(); ResultSet rs = statement.executeQuery(\"select * from topics order by topictitle\"); ArrayList<Topic> al = new ArrayList<Topic>(); while (rs.next()) { al.add(new Topic(rs.getString(\"topicid\"), rs.getString(\"topictitle\"), rs.getString(\"addedon\"), rs.getString(\"uname\"))); } rs.close(); return al; } catch (Exception e) { System.out.println(\"Error In TopicDAO.getTopics() -->\" + e.getMessage()); return (null); } } public static int getSurveyCount(String topicid) { try { Connection con = Database.getConnection(); PreparedStatement ps = con.prepareStatement(\"select count(*) from answers_master where topicid = ?\"); ps.setString(1, topicid); ResultSet rs = ps.executeQuery(); rs.next(); int count = rs.getInt(1); rs.close(); return count; } catch (Exception e) { System.out.println(\"Error In TopicDAO.getSurveyCount() -->\" + e.getMessage()); return -1; } } public static ArrayList<SurveyResult> getSurveyResults(String topicid) { try { Connection con = Database.getConnection(); PreparedStatement ps = con.prepareStatement(\"select count(*) cnt from answers_master where topicid = ?\"); ps.setString(1, topicid); ResultSet rs = ps.executeQuery(); rs.next(); int count = rs.getInt(1); rs.close(); ps.close(); PreparedStatement psq = con.prepareStatement( \"select * from questions where topicid = ?\"); psq.setString(1, topicid); ArrayList<SurveyResult> al = new ArrayList<SurveyResult>(); ResultSet questions = psq.executeQuery(); while (questions.next()) { SurveyResult sr = new SurveyResult(); sr.setQuestion(questions.getString(\"questiontext\")); sr.setOption1(questions.getString(\"opt1\")); sr.setOption2(questions.getString(\"opt2\")); sr.setOption3(questions.getString(\"opt3\")); PreparedStatement psa = con.prepareStatement( \"select sum(decode(answer,1,1,0)) opt1count, sum(decode(answer,2,1,0)) opt2count, sum(decode(answer,3,1,0)) opt3count from answers_details where questionid = ?\"); psa.setString(1, questions.getString(\"questionid\")); ResultSet answers = psa.executeQuery(); answers.next(); sr.setOpt1count( (int) ((double) answers.getInt(1) / count * 100) ); sr.setOpt2count((int) ((double) answers.getInt(2) / count * 100)); sr.setOpt3count((int) ((double) answers.getInt(3) / count * 100)); answers.close(); al.add(sr); } return al; } catch (Exception e) { System.out.println(\"Error In TopicDAO.getSurveyResults() -->\" + e.getMessage()); return null; } } public static ArrayList<Question> getQuestions(String topicid) { try { Connection con = Database.getConnection(); PreparedStatement ps = con.prepareStatement(\"select * from questions where topicid = ? order by questionid\"); ps.setString(1, topicid); ResultSet rs = ps.executeQuery(); ArrayList<Question> al = new ArrayList<Question>(); while (rs.next()) { al.add(new Question(rs.getString(\"questionid\"), rs.getString(\"questiontext\"), rs.getString(\"opt1\"), rs.getString(\"opt2\"), rs.getString(\"opt3\"))); } rs.close(); return al; } catch (Exception e) { System.out.println(\"Error In TopicDAO.getQuestions() -->\" + e.getMessage()); return (null); } } }"}]}}
{"project_id":86,"chunk_id":0,"content":{"main_file_path":"Online Survey System Java Project\\survey\\src\\java\\dao\\Database.java","main_file_content":"package dao; import java.sql.Connection; import java.sql.DriverManager; public class Database { public static Connection getConnection() { try { Class.forName(\"oracle.jdbc.driver.OracleDriver\"); Connection con = DriverManager.getConnection (\"jdbc:oracle:thin:@localhost:1521:xe\", \"survey\",\"survey\"); return con; } catch(Exception ex) { System.out.println(\"Database.getConnection() Error -->\" + ex.getMessage()); return null; } } public static void close(Connection con) { try { con.close(); } catch(Exception ex) { } } }","dependencies":[]}}
{"project_id":86,"chunk_id":0,"content":{"main_file_path":"Online Survey System Java Project\\survey\\src\\java\\dao\\TopicDAO.java","main_file_content":"package dao; import beans.Question; import beans.Topic; import java.sql.Statement; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.util.ArrayList; public class TopicDAO { public static ArrayList<Topic> getTopics() { try { Connection con = Database.getConnection(); Statement statement = con.createStatement(); ResultSet rs = statement.executeQuery(\"select * from topics order by topictitle\"); ArrayList<Topic> al = new ArrayList<Topic>(); while (rs.next()) { al.add( new Topic(rs.getString(\"topicid\"), rs.getString(\"topictitle\"))); } rs.close(); return al; } catch (Exception e) { System.out.println(\"Error In TopicDAO.getTopics() -->\" + e.getMessage()); return (null); } } public static ArrayList<Question> getQuestions(String topicid) { try { Connection con = Database.getConnection(); PreparedStatement ps = con.prepareStatement(\"select * from questions where topicid = ? order by questionid\"); ps.setString(1, topicid); ResultSet rs = ps.executeQuery(); ArrayList<Question> al = new ArrayList<Question>(); while (rs.next()) { al.add(new Question(rs.getString(\"questionid\"), rs.getString(\"questiontext\"), rs.getString(\"opt1\"), rs.getString(\"opt2\"), rs.getString(\"opt3\"))); } rs.close(); return al; } catch (Exception e) { System.out.println(\"Error In TopicDAO.getQuestions() -->\" + e.getMessage()); return (null); } } public static boolean storeSurveyResults(String topicid, ArrayList<Question> questions) { Connection con = null; PreparedStatement ps = null; try { con = Database.getConnection(); con.setAutoCommit(false); ps = con.prepareStatement(\"insert into answers_master values( surveyid_sequence.nextval,?,sysdate)\"); ps.setString(1, topicid); ps.executeUpdate(); ps = con.prepareStatement(\"insert into answers_details values( surveyid_sequence.currval, ?,?)\"); for( Question q : questions) { ps.setString(1, q.getId()); ps.setString(2, q.getAnswer()); ps.executeUpdate(); } con.commit(); return true; } catch (Exception ex) { System.out.println(\"Error in TopicDAO.storeSurveyResults() -->\" + ex.getMessage()); try { con.rollback(); } catch (Exception nex) { } return false; } finally { Database.close(con); } } }","dependencies":[{"file_path":"Online Survey System Java Project\\surveyadmin\\src\\java\\beans\\Question.java","file_content":"package beans; import dao.TopicDAO; import javax.faces.event.ActionEvent; public class Question { private String id, text, opt1, opt2, opt3, topicid, message; public String getId() { return id; } public void setId(String id) { this.id = id; } public String getMessage() { return message; } public void setMessage(String message) { this.message = message; } public String getOpt1() { return opt1; } public void setOpt1(String opt1) { this.opt1 = opt1; } public String getOpt2() { return opt2; } public void setOpt2(String opt2) { this.opt2 = opt2; } public String getOpt3() { return opt3; } public void setOpt3(String opt3) { this.opt3 = opt3; } public String getText() { return text; } public void setText(String text) { this.text = text; } public String getTopicid() { return topicid; } public void setTopicid(String topicid) { this.topicid = topicid; } public Question() { } public Question(String id, String text, String opt1, String opt2, String opt3, String topicid) { this.id = id; this.text = text; this.opt1 = opt1; this.opt2 = opt2; this.opt3 = opt3; this.topicid = topicid; } public Question(String id, String text, String opt1, String opt2, String opt3) { this.id = id; this.text = text; this.opt1 = opt1; this.opt2 = opt2; this.opt3 = opt3; } public void add(ActionEvent evt) { topicid = (String) Request.getSession().getAttribute(\"topicid\"); System.out.println(\"Topic ID : \" + topicid); if (TopicDAO.addQuestion(this)) { message = \"Added Question Successfully!\"; } else { message = \"Sorry! Could't Add Question!\"; } } }"},{"file_path":"Online Survey System Java Project\\surveyadmin\\src\\java\\beans\\Topic.java","file_content":"package beans; import dao.TopicDAO; import java.util.List; import javax.faces.event.ActionEvent; public class Topic { private String title, id, addedon, uname , message; public Topic() { } public Topic(String id, String title, String addedon, String uname) { this.title = title; this.id = id; this.addedon = addedon; this.uname = uname; } public String getMessage() { return message; } public void setMessage(String message) { this.message = message; } public String getAddedon() { return addedon; } public void setAddedon(String addedon) { this.addedon = addedon; } public String getId() { return id; } public void setId(String id) { this.id = id; } public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } public String getUname() { return uname; } public void setUname(String uname) { this.uname = uname; } public void add(ActionEvent evt) { boolean done = TopicDAO.add( Request.getSession().getAttribute(\"uname\").toString() , title); if ( done ) message = \"Topic has been added!\"; else message = \"Sorry! Topic was not added!\"; } public List<Topic> getTopics() { return TopicDAO.getTopics(); } public List<Question> getQuestions() { return TopicDAO.getQuestions( Request.getRequest().getParameter(\"topicid\")); } public List<SurveyResult> getSurveyResults() { return TopicDAO.getSurveyResults(Request.getRequest().getParameter(\"topicid\")); } }"},{"file_path":"Online Survey System Java Project\\surveyadmin\\src\\java\\dao\\Database.java","file_content":"package dao; import java.sql.Connection; import java.sql.DriverManager; public class Database { public static Connection getConnection() { try { Class.forName(\"oracle.jdbc.driver.OracleDriver\"); Connection con = DriverManager.getConnection (\"jdbc:oracle:thin:@localhost:1521:xe\", \"survey\",\"survey\"); return con; } catch(Exception ex) { System.out.println(\"Database.getConnection() Error -->\" + ex.getMessage()); return null; } } public static void close(Connection con) { try { con.close(); } catch(Exception ex) { } } }"}]}}
{"project_id":86,"chunk_id":0,"content":{"main_file_path":"Online Survey System Java Project\\surveyadmin\\src\\java\\beans\\LoginBean.java","main_file_content":"package beans; import dao.UserDAO; public class LoginBean { private String uname,password, message; public String getMessage() { return message; } public void setMessage(String message) { this.message = message; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public String getUname() { return uname; } public void setUname(String uname) { this.uname = uname; } public LoginBean() { } public String login() { boolean result = UserDAO.login(uname, password); if ( result) { Request.getSession().setAttribute(\"uname\",uname); return \"home\"; } else { message = \"Invalid Login. Please Try Again!\"; return \"login\"; } } }","dependencies":[{"file_path":"Online Survey System Java Project\\surveyadmin\\src\\java\\beans\\Request.java","file_content":"package beans; import javax.faces.context.FacesContext; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpSession; public class Request { public static HttpSession getSession() { return (HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(false); } public static HttpServletRequest getRequest() { return (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest(); } }"},{"file_path":"Online Survey System Java Project\\surveyadmin\\src\\java\\dao\\UserDAO.java","file_content":"package dao; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; public class UserDAO { public static boolean login(String uname, String pwd) { Connection con = null; PreparedStatement ps = null; try { con = Database.getConnection(); ps = con.prepareStatement(\"select uname from users where uname = ? and password = ?\"); ps.setString(1, uname); ps.setString(2, pwd); ResultSet rs = ps.executeQuery(); if (rs.next()) { return true; } else { return false; } } catch (Exception ex) { System.out.println(\"Error in login() -->\" + ex.getMessage()); return false; } finally { Database.close(con); } } }"}]}}
{"project_id":86,"chunk_id":0,"content":{"main_file_path":"Online Survey System Java Project\\surveyadmin\\src\\java\\beans\\Question.java","main_file_content":"package beans; import dao.TopicDAO; import javax.faces.event.ActionEvent; public class Question { private String id, text, opt1, opt2, opt3, topicid, message; public String getId() { return id; } public void setId(String id) { this.id = id; } public String getMessage() { return message; } public void setMessage(String message) { this.message = message; } public String getOpt1() { return opt1; } public void setOpt1(String opt1) { this.opt1 = opt1; } public String getOpt2() { return opt2; } public void setOpt2(String opt2) { this.opt2 = opt2; } public String getOpt3() { return opt3; } public void setOpt3(String opt3) { this.opt3 = opt3; } public String getText() { return text; } public void setText(String text) { this.text = text; } public String getTopicid() { return topicid; } public void setTopicid(String topicid) { this.topicid = topicid; } public Question() { } public Question(String id, String text, String opt1, String opt2, String opt3, String topicid) { this.id = id; this.text = text; this.opt1 = opt1; this.opt2 = opt2; this.opt3 = opt3; this.topicid = topicid; } public Question(String id, String text, String opt1, String opt2, String opt3) { this.id = id; this.text = text; this.opt1 = opt1; this.opt2 = opt2; this.opt3 = opt3; } public void add(ActionEvent evt) { topicid = (String) Request.getSession().getAttribute(\"topicid\"); System.out.println(\"Topic ID : \" + topicid); if (TopicDAO.addQuestion(this)) { message = \"Added Question Successfully!\"; } else { message = \"Sorry! Could't Add Question!\"; } } }","dependencies":[{"file_path":"Online Survey System Java Project\\surveyadmin\\src\\java\\beans\\Request.java","file_content":"package beans; import javax.faces.context.FacesContext; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpSession; public class Request { public static HttpSession getSession() { return (HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(false); } public static HttpServletRequest getRequest() { return (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest(); } }"},{"file_path":"Online Survey System Java Project\\surveyadmin\\src\\java\\dao\\TopicDAO.java","file_content":"package dao; import beans.Question; import beans.SurveyResult; import beans.Topic; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.Statement; import java.util.ArrayList; public class TopicDAO { public static boolean add(String uname, String title) { Connection con = null; PreparedStatement ps = null; try { con = Database.getConnection(); ps = con.prepareStatement(\"insert into topics values(topicid_sequence.nextval,?,sysdate,?)\"); ps.setString(1, title); ps.setString(2, uname); int count = ps.executeUpdate(); return count == 1; } catch (Exception ex) { System.out.println(\"Error in Topic.add() -->\" + ex.getMessage()); return false; } finally { Database.close(con); } } public static boolean delete(String topicid) { Connection con = null; PreparedStatement ps = null; try { con = Database.getConnection(); con.setAutoCommit(false); ps = con.prepareStatement(\"delete from questions where topicid = ?\"); ps.setString(1, topicid); ps.executeUpdate(); ps = con.prepareStatement(\"delete from topics where topicid = ?\"); ps.setString(1, topicid); ps.executeUpdate(); con.commit(); return true; } catch (Exception ex) { System.out.println(\"Error in Topic.delete() -->\" + ex.getMessage()); try { con.rollback(); } catch (Exception nex) { } return false; } finally { Database.close(con); } } public static boolean deleteQuestion(String questionid) { Connection con = null; PreparedStatement ps = null; try { con = Database.getConnection(); ps = con.prepareStatement(\"delete from questions where questionid = ?\"); ps.setString(1, questionid); ps.executeUpdate(); return true; } catch (Exception ex) { System.out.println(\"Error in Topic.deleteQuestion() -->\" + ex.getMessage()); return false; } finally { Database.close(con); } } public static boolean addQuestion(Question q) { Connection con = null; PreparedStatement ps = null; try { con = Database.getConnection(); ps = con.prepareStatement(\"insert into questions values(questionid_sequence.nextval,?,?,?,?,?)\"); ps.setString(1, q.getText()); ps.setString(2, q.getOpt1()); ps.setString(3, q.getOpt2()); ps.setString(4, q.getOpt3()); ps.setString(5, q.getTopicid()); int count = ps.executeUpdate(); return count == 1; } catch (Exception ex) { System.out.println(\"Error in Topic.addQuestion() -->\" + ex.getMessage()); return false; } finally { Database.close(con); } } public static ArrayList<Topic> getTopics() { try { Connection con = Database.getConnection(); Statement statement = con.createStatement(); ResultSet rs = statement.executeQuery(\"select * from topics order by topictitle\"); ArrayList<Topic> al = new ArrayList<Topic>(); while (rs.next()) { al.add(new Topic(rs.getString(\"topicid\"), rs.getString(\"topictitle\"), rs.getString(\"addedon\"), rs.getString(\"uname\"))); } rs.close(); return al; } catch (Exception e) { System.out.println(\"Error In TopicDAO.getTopics() -->\" + e.getMessage()); return (null); } } public static int getSurveyCount(String topicid) { try { Connection con = Database.getConnection(); PreparedStatement ps = con.prepareStatement(\"select count(*) from answers_master where topicid = ?\"); ps.setString(1, topicid); ResultSet rs = ps.executeQuery(); rs.next(); int count = rs.getInt(1); rs.close(); return count; } catch (Exception e) { System.out.println(\"Error In TopicDAO.getSurveyCount() -->\" + e.getMessage()); return -1; } } public static ArrayList<SurveyResult> getSurveyResults(String topicid) { try { Connection con = Database.getConnection(); PreparedStatement ps = con.prepareStatement(\"select count(*) cnt from answers_master where topicid = ?\"); ps.setString(1, topicid); ResultSet rs = ps.executeQuery(); rs.next(); int count = rs.getInt(1); rs.close(); ps.close(); PreparedStatement psq = con.prepareStatement( \"select * from questions where topicid = ?\"); psq.setString(1, topicid); ArrayList<SurveyResult> al = new ArrayList<SurveyResult>(); ResultSet questions = psq.executeQuery(); while (questions.next()) { SurveyResult sr = new SurveyResult(); sr.setQuestion(questions.getString(\"questiontext\")); sr.setOption1(questions.getString(\"opt1\")); sr.setOption2(questions.getString(\"opt2\")); sr.setOption3(questions.getString(\"opt3\")); PreparedStatement psa = con.prepareStatement( \"select sum(decode(answer,1,1,0)) opt1count, sum(decode(answer,2,1,0)) opt2count, sum(decode(answer,3,1,0)) opt3count from answers_details where questionid = ?\"); psa.setString(1, questions.getString(\"questionid\")); ResultSet answers = psa.executeQuery(); answers.next(); sr.setOpt1count( (int) ((double) answers.getInt(1) / count * 100) ); sr.setOpt2count((int) ((double) answers.getInt(2) / count * 100)); sr.setOpt3count((int) ((double) answers.getInt(3) / count * 100)); answers.close(); al.add(sr); } return al; } catch (Exception e) { System.out.println(\"Error In TopicDAO.getSurveyResults() -->\" + e.getMessage()); return null; } } public static ArrayList<Question> getQuestions(String topicid) { try { Connection con = Database.getConnection(); PreparedStatement ps = con.prepareStatement(\"select * from questions where topicid = ? order by questionid\"); ps.setString(1, topicid); ResultSet rs = ps.executeQuery(); ArrayList<Question> al = new ArrayList<Question>(); while (rs.next()) { al.add(new Question(rs.getString(\"questionid\"), rs.getString(\"questiontext\"), rs.getString(\"opt1\"), rs.getString(\"opt2\"), rs.getString(\"opt3\"))); } rs.close(); return al; } catch (Exception e) { System.out.println(\"Error In TopicDAO.getQuestions() -->\" + e.getMessage()); return (null); } } }"}]}}
{"project_id":86,"chunk_id":0,"content":{"main_file_path":"Online Survey System Java Project\\surveyadmin\\src\\java\\beans\\Request.java","main_file_content":"package beans; import javax.faces.context.FacesContext; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpSession; public class Request { public static HttpSession getSession() { return (HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(false); } public static HttpServletRequest getRequest() { return (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest(); } }","dependencies":[]}}
{"project_id":86,"chunk_id":0,"content":{"main_file_path":"Online Survey System Java Project\\surveyadmin\\src\\java\\beans\\SurveyResult.java","main_file_content":"package beans; public class SurveyResult { private String question, option1, option2,option3; private int opt1count, opt2count,opt3count; public SurveyResult() { } public SurveyResult(String question, String option1, String option2, String option3, int opt1count, int opt2count, int opt3count) { this.question = question; this.option1 = option1; this.option2 = option2; this.option3 = option3; this.opt1count = opt1count; this.opt2count = opt2count; this.opt3count = opt3count; } public int getOpt1count() { return opt1count; } public void setOpt1count(int opt1count) { this.opt1count = opt1count; } public int getOpt2count() { return opt2count; } public void setOpt2count(int opt2count) { this.opt2count = opt2count; } public int getOpt3count() { return opt3count; } public void setOpt3count(int opt3count) { this.opt3count = opt3count; } public String getOption1() { return option1; } public void setOption1(String option1) { this.option1 = option1; } public String getOption2() { return option2; } public void setOption2(String option2) { this.option2 = option2; } public String getOption3() { return option3; } public void setOption3(String option3) { this.option3 = option3; } public String getQuestion() { return question; } public void setQuestion(String question) { this.question = question; } }","dependencies":[]}}
{"project_id":86,"chunk_id":0,"content":{"main_file_path":"Online Survey System Java Project\\surveyadmin\\src\\java\\beans\\Topic.java","main_file_content":"package beans; import dao.TopicDAO; import java.util.List; import javax.faces.event.ActionEvent; public class Topic { private String title, id, addedon, uname , message; public Topic() { } public Topic(String id, String title, String addedon, String uname) { this.title = title; this.id = id; this.addedon = addedon; this.uname = uname; } public String getMessage() { return message; } public void setMessage(String message) { this.message = message; } public String getAddedon() { return addedon; } public void setAddedon(String addedon) { this.addedon = addedon; } public String getId() { return id; } public void setId(String id) { this.id = id; } public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } public String getUname() { return uname; } public void setUname(String uname) { this.uname = uname; } public void add(ActionEvent evt) { boolean done = TopicDAO.add( Request.getSession().getAttribute(\"uname\").toString() , title); if ( done ) message = \"Topic has been added!\"; else message = \"Sorry! Topic was not added!\"; } public List<Topic> getTopics() { return TopicDAO.getTopics(); } public List<Question> getQuestions() { return TopicDAO.getQuestions( Request.getRequest().getParameter(\"topicid\")); } public List<SurveyResult> getSurveyResults() { return TopicDAO.getSurveyResults(Request.getRequest().getParameter(\"topicid\")); } }","dependencies":[{"file_path":"Online Survey System Java Project\\surveyadmin\\src\\java\\beans\\Question.java","file_content":"package beans; import dao.TopicDAO; import javax.faces.event.ActionEvent; public class Question { private String id, text, opt1, opt2, opt3, topicid, message; public String getId() { return id; } public void setId(String id) { this.id = id; } public String getMessage() { return message; } public void setMessage(String message) { this.message = message; } public String getOpt1() { return opt1; } public void setOpt1(String opt1) { this.opt1 = opt1; } public String getOpt2() { return opt2; } public void setOpt2(String opt2) { this.opt2 = opt2; } public String getOpt3() { return opt3; } public void setOpt3(String opt3) { this.opt3 = opt3; } public String getText() { return text; } public void setText(String text) { this.text = text; } public String getTopicid() { return topicid; } public void setTopicid(String topicid) { this.topicid = topicid; } public Question() { } public Question(String id, String text, String opt1, String opt2, String opt3, String topicid) { this.id = id; this.text = text; this.opt1 = opt1; this.opt2 = opt2; this.opt3 = opt3; this.topicid = topicid; } public Question(String id, String text, String opt1, String opt2, String opt3) { this.id = id; this.text = text; this.opt1 = opt1; this.opt2 = opt2; this.opt3 = opt3; } public void add(ActionEvent evt) { topicid = (String) Request.getSession().getAttribute(\"topicid\"); System.out.println(\"Topic ID : \" + topicid); if (TopicDAO.addQuestion(this)) { message = \"Added Question Successfully!\"; } else { message = \"Sorry! Could't Add Question!\"; } } }"},{"file_path":"Online Survey System Java Project\\surveyadmin\\src\\java\\beans\\Request.java","file_content":"package beans; import javax.faces.context.FacesContext; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpSession; public class Request { public static HttpSession getSession() { return (HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(false); } public static HttpServletRequest getRequest() { return (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest(); } }"},{"file_path":"Online Survey System Java Project\\surveyadmin\\src\\java\\beans\\SurveyResult.java","file_content":"package beans; public class SurveyResult { private String question, option1, option2,option3; private int opt1count, opt2count,opt3count; public SurveyResult() { } public SurveyResult(String question, String option1, String option2, String option3, int opt1count, int opt2count, int opt3count) { this.question = question; this.option1 = option1; this.option2 = option2; this.option3 = option3; this.opt1count = opt1count; this.opt2count = opt2count; this.opt3count = opt3count; } public int getOpt1count() { return opt1count; } public void setOpt1count(int opt1count) { this.opt1count = opt1count; } public int getOpt2count() { return opt2count; } public void setOpt2count(int opt2count) { this.opt2count = opt2count; } public int getOpt3count() { return opt3count; } public void setOpt3count(int opt3count) { this.opt3count = opt3count; } public String getOption1() { return option1; } public void setOption1(String option1) { this.option1 = option1; } public String getOption2() { return option2; } public void setOption2(String option2) { this.option2 = option2; } public String getOption3() { return option3; } public void setOption3(String option3) { this.option3 = option3; } public String getQuestion() { return question; } public void setQuestion(String question) { this.question = question; } }"},{"file_path":"Online Survey System Java Project\\surveyadmin\\src\\java\\dao\\TopicDAO.java","file_content":"package dao; import beans.Question; import beans.SurveyResult; import beans.Topic; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.Statement; import java.util.ArrayList; public class TopicDAO { public static boolean add(String uname, String title) { Connection con = null; PreparedStatement ps = null; try { con = Database.getConnection(); ps = con.prepareStatement(\"insert into topics values(topicid_sequence.nextval,?,sysdate,?)\"); ps.setString(1, title); ps.setString(2, uname); int count = ps.executeUpdate(); return count == 1; } catch (Exception ex) { System.out.println(\"Error in Topic.add() -->\" + ex.getMessage()); return false; } finally { Database.close(con); } } public static boolean delete(String topicid) { Connection con = null; PreparedStatement ps = null; try { con = Database.getConnection(); con.setAutoCommit(false); ps = con.prepareStatement(\"delete from questions where topicid = ?\"); ps.setString(1, topicid); ps.executeUpdate(); ps = con.prepareStatement(\"delete from topics where topicid = ?\"); ps.setString(1, topicid); ps.executeUpdate(); con.commit(); return true; } catch (Exception ex) { System.out.println(\"Error in Topic.delete() -->\" + ex.getMessage()); try { con.rollback(); } catch (Exception nex) { } return false; } finally { Database.close(con); } } public static boolean deleteQuestion(String questionid) { Connection con = null; PreparedStatement ps = null; try { con = Database.getConnection(); ps = con.prepareStatement(\"delete from questions where questionid = ?\"); ps.setString(1, questionid); ps.executeUpdate(); return true; } catch (Exception ex) { System.out.println(\"Error in Topic.deleteQuestion() -->\" + ex.getMessage()); return false; } finally { Database.close(con); } } public static boolean addQuestion(Question q) { Connection con = null; PreparedStatement ps = null; try { con = Database.getConnection(); ps = con.prepareStatement(\"insert into questions values(questionid_sequence.nextval,?,?,?,?,?)\"); ps.setString(1, q.getText()); ps.setString(2, q.getOpt1()); ps.setString(3, q.getOpt2()); ps.setString(4, q.getOpt3()); ps.setString(5, q.getTopicid()); int count = ps.executeUpdate(); return count == 1; } catch (Exception ex) { System.out.println(\"Error in Topic.addQuestion() -->\" + ex.getMessage()); return false; } finally { Database.close(con); } } public static ArrayList<Topic> getTopics() { try { Connection con = Database.getConnection(); Statement statement = con.createStatement(); ResultSet rs = statement.executeQuery(\"select * from topics order by topictitle\"); ArrayList<Topic> al = new ArrayList<Topic>(); while (rs.next()) { al.add(new Topic(rs.getString(\"topicid\"), rs.getString(\"topictitle\"), rs.getString(\"addedon\"), rs.getString(\"uname\"))); } rs.close(); return al; } catch (Exception e) { System.out.println(\"Error In TopicDAO.getTopics() -->\" + e.getMessage()); return (null); } } public static int getSurveyCount(String topicid) { try { Connection con = Database.getConnection(); PreparedStatement ps = con.prepareStatement(\"select count(*) from answers_master where topicid = ?\"); ps.setString(1, topicid); ResultSet rs = ps.executeQuery(); rs.next(); int count = rs.getInt(1); rs.close(); return count; } catch (Exception e) { System.out.println(\"Error In TopicDAO.getSurveyCount() -->\" + e.getMessage()); return -1; } } public static ArrayList<SurveyResult> getSurveyResults(String topicid) { try { Connection con = Database.getConnection(); PreparedStatement ps = con.prepareStatement(\"select count(*) cnt from answers_master where topicid = ?\"); ps.setString(1, topicid); ResultSet rs = ps.executeQuery(); rs.next(); int count = rs.getInt(1); rs.close(); ps.close(); PreparedStatement psq = con.prepareStatement( \"select * from questions where topicid = ?\"); psq.setString(1, topicid); ArrayList<SurveyResult> al = new ArrayList<SurveyResult>(); ResultSet questions = psq.executeQuery(); while (questions.next()) { SurveyResult sr = new SurveyResult(); sr.setQuestion(questions.getString(\"questiontext\")); sr.setOption1(questions.getString(\"opt1\")); sr.setOption2(questions.getString(\"opt2\")); sr.setOption3(questions.getString(\"opt3\")); PreparedStatement psa = con.prepareStatement( \"select sum(decode(answer,1,1,0)) opt1count, sum(decode(answer,2,1,0)) opt2count, sum(decode(answer,3,1,0)) opt3count from answers_details where questionid = ?\"); psa.setString(1, questions.getString(\"questionid\")); ResultSet answers = psa.executeQuery(); answers.next(); sr.setOpt1count( (int) ((double) answers.getInt(1) / count * 100) ); sr.setOpt2count((int) ((double) answers.getInt(2) / count * 100)); sr.setOpt3count((int) ((double) answers.getInt(3) / count * 100)); answers.close(); al.add(sr); } return al; } catch (Exception e) { System.out.println(\"Error In TopicDAO.getSurveyResults() -->\" + e.getMessage()); return null; } } public static ArrayList<Question> getQuestions(String topicid) { try { Connection con = Database.getConnection(); PreparedStatement ps = con.prepareStatement(\"select * from questions where topicid = ? order by questionid\"); ps.setString(1, topicid); ResultSet rs = ps.executeQuery(); ArrayList<Question> al = new ArrayList<Question>(); while (rs.next()) { al.add(new Question(rs.getString(\"questionid\"), rs.getString(\"questiontext\"), rs.getString(\"opt1\"), rs.getString(\"opt2\"), rs.getString(\"opt3\"))); } rs.close(); return al; } catch (Exception e) { System.out.println(\"Error In TopicDAO.getQuestions() -->\" + e.getMessage()); return (null); } } }"}]}}
{"project_id":86,"chunk_id":0,"content":{"main_file_path":"Online Survey System Java Project\\surveyadmin\\src\\java\\dao\\Database.java","main_file_content":"package dao; import java.sql.Connection; import java.sql.DriverManager; public class Database { public static Connection getConnection() { try { Class.forName(\"oracle.jdbc.driver.OracleDriver\"); Connection con = DriverManager.getConnection (\"jdbc:oracle:thin:@localhost:1521:xe\", \"survey\",\"survey\"); return con; } catch(Exception ex) { System.out.println(\"Database.getConnection() Error -->\" + ex.getMessage()); return null; } } public static void close(Connection con) { try { con.close(); } catch(Exception ex) { } } }","dependencies":[]}}
{"project_id":86,"chunk_id":0,"content":{"main_file_path":"Online Survey System Java Project\\surveyadmin\\src\\java\\dao\\TopicDAO.java","main_file_content":"package dao; import beans.Question; import beans.SurveyResult; import beans.Topic; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.Statement; import java.util.ArrayList; public class TopicDAO { public static boolean add(String uname, String title) { Connection con = null; PreparedStatement ps = null; try { con = Database.getConnection(); ps = con.prepareStatement(\"insert into topics values(topicid_sequence.nextval,?,sysdate,?)\"); ps.setString(1, title); ps.setString(2, uname); int count = ps.executeUpdate(); return count == 1; } catch (Exception ex) { System.out.println(\"Error in Topic.add() -->\" + ex.getMessage()); return false; } finally { Database.close(con); } } public static boolean delete(String topicid) { Connection con = null; PreparedStatement ps = null; try { con = Database.getConnection(); con.setAutoCommit(false); ps = con.prepareStatement(\"delete from questions where topicid = ?\"); ps.setString(1, topicid); ps.executeUpdate(); ps = con.prepareStatement(\"delete from topics where topicid = ?\"); ps.setString(1, topicid); ps.executeUpdate(); con.commit(); return true; } catch (Exception ex) { System.out.println(\"Error in Topic.delete() -->\" + ex.getMessage()); try { con.rollback(); } catch (Exception nex) { } return false; } finally { Database.close(con); } } public static boolean deleteQuestion(String questionid) { Connection con = null; PreparedStatement ps = null; try { con = Database.getConnection(); ps = con.prepareStatement(\"delete from questions where questionid = ?\"); ps.setString(1, questionid); ps.executeUpdate(); return true; } catch (Exception ex) { System.out.println(\"Error in Topic.deleteQuestion() -->\" + ex.getMessage()); return false; } finally { Database.close(con); } } public static boolean addQuestion(Question q) { Connection con = null; PreparedStatement ps = null; try { con = Database.getConnection(); ps = con.prepareStatement(\"insert into questions values(questionid_sequence.nextval,?,?,?,?,?)\"); ps.setString(1, q.getText()); ps.setString(2, q.getOpt1()); ps.setString(3, q.getOpt2()); ps.setString(4, q.getOpt3()); ps.setString(5, q.getTopicid()); int count = ps.executeUpdate(); return count == 1; } catch (Exception ex) { System.out.println(\"Error in Topic.addQuestion() -->\" + ex.getMessage()); return false; } finally { Database.close(con); } } public static ArrayList<Topic> getTopics() { try { Connection con = Database.getConnection(); Statement statement = con.createStatement(); ResultSet rs = statement.executeQuery(\"select * from topics order by topictitle\"); ArrayList<Topic> al = new ArrayList<Topic>(); while (rs.next()) { al.add(new Topic(rs.getString(\"topicid\"), rs.getString(\"topictitle\"), rs.getString(\"addedon\"), rs.getString(\"uname\"))); } rs.close(); return al; } catch (Exception e) { System.out.println(\"Error In TopicDAO.getTopics() -->\" + e.getMessage()); return (null); } } public static int getSurveyCount(String topicid) { try { Connection con = Database.getConnection(); PreparedStatement ps = con.prepareStatement(\"select count(*) from answers_master where topicid = ?\"); ps.setString(1, topicid); ResultSet rs = ps.executeQuery(); rs.next(); int count = rs.getInt(1); rs.close(); return count; } catch (Exception e) { System.out.println(\"Error In TopicDAO.getSurveyCount() -->\" + e.getMessage()); return -1; } } public static ArrayList<SurveyResult> getSurveyResults(String topicid) { try { Connection con = Database.getConnection(); PreparedStatement ps = con.prepareStatement(\"select count(*) cnt from answers_master where topicid = ?\"); ps.setString(1, topicid); ResultSet rs = ps.executeQuery(); rs.next(); int count = rs.getInt(1); rs.close(); ps.close(); PreparedStatement psq = con.prepareStatement( \"select * from questions where topicid = ?\"); psq.setString(1, topicid); ArrayList<SurveyResult> al = new ArrayList<SurveyResult>(); ResultSet questions = psq.executeQuery(); while (questions.next()) { SurveyResult sr = new SurveyResult(); sr.setQuestion(questions.getString(\"questiontext\")); sr.setOption1(questions.getString(\"opt1\")); sr.setOption2(questions.getString(\"opt2\")); sr.setOption3(questions.getString(\"opt3\")); PreparedStatement psa = con.prepareStatement( \"select sum(decode(answer,1,1,0)) opt1count, sum(decode(answer,2,1,0)) opt2count, sum(decode(answer,3,1,0)) opt3count from answers_details where questionid = ?\"); psa.setString(1, questions.getString(\"questionid\")); ResultSet answers = psa.executeQuery(); answers.next(); sr.setOpt1count( (int) ((double) answers.getInt(1) / count * 100) ); sr.setOpt2count((int) ((double) answers.getInt(2) / count * 100)); sr.setOpt3count((int) ((double) answers.getInt(3) / count * 100)); answers.close(); al.add(sr); } return al; } catch (Exception e) { System.out.println(\"Error In TopicDAO.getSurveyResults() -->\" + e.getMessage()); return null; } } public static ArrayList<Question> getQuestions(String topicid) { try { Connection con = Database.getConnection(); PreparedStatement ps = con.prepareStatement(\"select * from questions where topicid = ? order by questionid\"); ps.setString(1, topicid); ResultSet rs = ps.executeQuery(); ArrayList<Question> al = new ArrayList<Question>(); while (rs.next()) { al.add(new Question(rs.getString(\"questionid\"), rs.getString(\"questiontext\"), rs.getString(\"opt1\"), rs.getString(\"opt2\"), rs.getString(\"opt3\"))); } rs.close(); return al; } catch (Exception e) { System.out.println(\"Error In TopicDAO.getQuestions() -->\" + e.getMessage()); return (null); } } }","dependencies":[{"file_path":"Online Survey System Java Project\\surveyadmin\\src\\java\\beans\\Question.java","file_content":"package beans; import dao.TopicDAO; import javax.faces.event.ActionEvent; public class Question { private String id, text, opt1, opt2, opt3, topicid, message; public String getId() { return id; } public void setId(String id) { this.id = id; } public String getMessage() { return message; } public void setMessage(String message) { this.message = message; } public String getOpt1() { return opt1; } public void setOpt1(String opt1) { this.opt1 = opt1; } public String getOpt2() { return opt2; } public void setOpt2(String opt2) { this.opt2 = opt2; } public String getOpt3() { return opt3; } public void setOpt3(String opt3) { this.opt3 = opt3; } public String getText() { return text; } public void setText(String text) { this.text = text; } public String getTopicid() { return topicid; } public void setTopicid(String topicid) { this.topicid = topicid; } public Question() { } public Question(String id, String text, String opt1, String opt2, String opt3, String topicid) { this.id = id; this.text = text; this.opt1 = opt1; this.opt2 = opt2; this.opt3 = opt3; this.topicid = topicid; } public Question(String id, String text, String opt1, String opt2, String opt3) { this.id = id; this.text = text; this.opt1 = opt1; this.opt2 = opt2; this.opt3 = opt3; } public void add(ActionEvent evt) { topicid = (String) Request.getSession().getAttribute(\"topicid\"); System.out.println(\"Topic ID : \" + topicid); if (TopicDAO.addQuestion(this)) { message = \"Added Question Successfully!\"; } else { message = \"Sorry! Could't Add Question!\"; } } }"},{"file_path":"Online Survey System Java Project\\surveyadmin\\src\\java\\beans\\SurveyResult.java","file_content":"package beans; public class SurveyResult { private String question, option1, option2,option3; private int opt1count, opt2count,opt3count; public SurveyResult() { } public SurveyResult(String question, String option1, String option2, String option3, int opt1count, int opt2count, int opt3count) { this.question = question; this.option1 = option1; this.option2 = option2; this.option3 = option3; this.opt1count = opt1count; this.opt2count = opt2count; this.opt3count = opt3count; } public int getOpt1count() { return opt1count; } public void setOpt1count(int opt1count) { this.opt1count = opt1count; } public int getOpt2count() { return opt2count; } public void setOpt2count(int opt2count) { this.opt2count = opt2count; } public int getOpt3count() { return opt3count; } public void setOpt3count(int opt3count) { this.opt3count = opt3count; } public String getOption1() { return option1; } public void setOption1(String option1) { this.option1 = option1; } public String getOption2() { return option2; } public void setOption2(String option2) { this.option2 = option2; } public String getOption3() { return option3; } public void setOption3(String option3) { this.option3 = option3; } public String getQuestion() { return question; } public void setQuestion(String question) { this.question = question; } }"},{"file_path":"Online Survey System Java Project\\surveyadmin\\src\\java\\beans\\Topic.java","file_content":"package beans; import dao.TopicDAO; import java.util.List; import javax.faces.event.ActionEvent; public class Topic { private String title, id, addedon, uname , message; public Topic() { } public Topic(String id, String title, String addedon, String uname) { this.title = title; this.id = id; this.addedon = addedon; this.uname = uname; } public String getMessage() { return message; } public void setMessage(String message) { this.message = message; } public String getAddedon() { return addedon; } public void setAddedon(String addedon) { this.addedon = addedon; } public String getId() { return id; } public void setId(String id) { this.id = id; } public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } public String getUname() { return uname; } public void setUname(String uname) { this.uname = uname; } public void add(ActionEvent evt) { boolean done = TopicDAO.add( Request.getSession().getAttribute(\"uname\").toString() , title); if ( done ) message = \"Topic has been added!\"; else message = \"Sorry! Topic was not added!\"; } public List<Topic> getTopics() { return TopicDAO.getTopics(); } public List<Question> getQuestions() { return TopicDAO.getQuestions( Request.getRequest().getParameter(\"topicid\")); } public List<SurveyResult> getSurveyResults() { return TopicDAO.getSurveyResults(Request.getRequest().getParameter(\"topicid\")); } }"},{"file_path":"Online Survey System Java Project\\surveyadmin\\src\\java\\dao\\Database.java","file_content":"package dao; import java.sql.Connection; import java.sql.DriverManager; public class Database { public static Connection getConnection() { try { Class.forName(\"oracle.jdbc.driver.OracleDriver\"); Connection con = DriverManager.getConnection (\"jdbc:oracle:thin:@localhost:1521:xe\", \"survey\",\"survey\"); return con; } catch(Exception ex) { System.out.println(\"Database.getConnection() Error -->\" + ex.getMessage()); return null; } } public static void close(Connection con) { try { con.close(); } catch(Exception ex) { } } }"}]}}
{"project_id":86,"chunk_id":0,"content":{"main_file_path":"Online Survey System Java Project\\surveyadmin\\src\\java\\dao\\UserDAO.java","main_file_content":"package dao; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; public class UserDAO { public static boolean login(String uname, String pwd) { Connection con = null; PreparedStatement ps = null; try { con = Database.getConnection(); ps = con.prepareStatement(\"select uname from users where uname = ? and password = ?\"); ps.setString(1, uname); ps.setString(2, pwd); ResultSet rs = ps.executeQuery(); if (rs.next()) { return true; } else { return false; } } catch (Exception ex) { System.out.println(\"Error in login() -->\" + ex.getMessage()); return false; } finally { Database.close(con); } } }","dependencies":[{"file_path":"Online Survey System Java Project\\surveyadmin\\src\\java\\dao\\Database.java","file_content":"package dao; import java.sql.Connection; import java.sql.DriverManager; public class Database { public static Connection getConnection() { try { Class.forName(\"oracle.jdbc.driver.OracleDriver\"); Connection con = DriverManager.getConnection (\"jdbc:oracle:thin:@localhost:1521:xe\", \"survey\",\"survey\"); return con; } catch(Exception ex) { System.out.println(\"Database.getConnection() Error -->\" + ex.getMessage()); return null; } } public static void close(Connection con) { try { con.close(); } catch(Exception ex) { } } }"}]}}
{"project_id":86,"chunk_id":0,"content":{"main_file_path":"Online Survey System Java Project\\surveyadmin\\src\\java\\filters\\AuthFilter.java","main_file_content":"package filters; import java.io.*; import javax.servlet.*; import javax.servlet.http.*; public class AuthFilter implements Filter { private FilterConfig filterConfig = null; public AuthFilter() { } public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { try { HttpServletRequest req = (HttpServletRequest) request; HttpServletResponse res = (HttpServletResponse) response; HttpSession ses = req.getSession(false); if ( req.getRequestURI().indexOf(\"/login.jsp\") >= 0 || (ses != null && ses.getAttribute(\"uname\") != null) ) chain.doFilter(request, response); else res.sendRedirect(req.getContextPath() + \"/faces/login.jsp\"); } catch(Throwable t) { System.out.println( t.getMessage()); } } public FilterConfig getFilterConfig() { return (this.filterConfig); } public void setFilterConfig(FilterConfig filterConfig) { this.filterConfig = filterConfig; } public void destroy() { } public void init(FilterConfig filterConfig) { this.filterConfig = filterConfig; } }","dependencies":[]}}
{"project_id":87,"chunk_id":0,"content":{"main_file_path":"Online Voting System\\Online_Voting_System\\src\\main\\java\\vote\\com\\servlet\\againvote.java","main_file_content":"package vote.com.servlet; import java.io.IOException; import jakarta.servlet.ServletException; import jakarta.servlet.http.HttpServlet; import jakarta.servlet.http.HttpServletRequest; import jakarta.servlet.http.HttpServletResponse; public class againvote extends HttpServlet { private static final long serialVersionUID = 1L; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { doGet(request, response); } }","dependencies":[]}}
{"project_id":87,"chunk_id":0,"content":{"main_file_path":"Online Voting System\\Online_Voting_System\\src\\main\\java\\vote\\com\\servlet\\DBUtilR.java","main_file_content":"package vote.com.servlet; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; public class DBUtilR { static Connection conn = null; static { try { Class.forName(\"com.mysql.jdbc.Driver\"); conn = DriverManager.getConnection(\"jdbc:mysql: if(!conn.isClosed()) { System.out.println(\"Connection established\"); } } catch (ClassNotFoundException | SQLException e) { System.out.println(\"Error in DBUtilFile\"); e.printStackTrace(); } } public static Connection getDBConnection() { return conn; } }","dependencies":[]}}
{"project_id":87,"chunk_id":0,"content":{"main_file_path":"Online Voting System\\Online_Voting_System\\src\\main\\java\\vote\\com\\servlet\\loginpage.java","main_file_content":"package vote.com.servlet; import jakarta.servlet.RequestDispatcher; import jakarta.servlet.ServletException; import jakarta.servlet.http.HttpServlet; import jakarta.servlet.http.HttpServletRequest; import jakarta.servlet.http.HttpServletResponse; import java.io.IOException; import java.io.PrintWriter; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; public class loginpage extends HttpServlet { private static final long serialVersionUID = 1L; final static Connection con=DBUtilR.getDBConnection(); static PreparedStatement ps = null; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { PrintWriter out = response.getWriter(); String card=request.getParameter(\"cardno\"); Integer pin=Integer.parseInt(request.getParameter(\"pin\")); try { if(check(card,pin)) { out.print(\"Successful Login...You Can Vote Now\"); RequestDispatcher rd=request.getRequestDispatcher(\"vote.html\"); rd.include(request,response); } else { out.print(\"Sorry username or password error , Make new account\"); RequestDispatcher rd=request.getRequestDispatcher(\"registration.html\"); rd.include(request,response); } } catch (SQLException e) { e.printStackTrace(); } } static boolean check(String card,Integer pin) throws SQLException { boolean r=false; ps=con.prepareStatement(\"Select * from register where cardno=? and pin=?\"); ps.setString(1,card); ps.setInt(2,pin); ResultSet rs=ps.executeQuery(); r=rs.next(); return r; } static boolean checkvote(String card) throws SQLException { boolean r=false; ps=con.prepareStatement(\"Select * from vote where cardno=?\"); ps.setString(1,card); ResultSet rs=ps.executeQuery(); r=rs.next(); return r; } }","dependencies":[{"file_path":"Online Voting System\\Online_Voting_System\\src\\main\\java\\vote\\com\\servlet\\DBUtilR.java","file_content":"package vote.com.servlet; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; public class DBUtilR { static Connection conn = null; static { try { Class.forName(\"com.mysql.jdbc.Driver\"); conn = DriverManager.getConnection(\"jdbc:mysql: if(!conn.isClosed()) { System.out.println(\"Connection established\"); } } catch (ClassNotFoundException | SQLException e) { System.out.println(\"Error in DBUtilFile\"); e.printStackTrace(); } } public static Connection getDBConnection() { return conn; } }"}]}}
{"project_id":87,"chunk_id":0,"content":{"main_file_path":"Online Voting System\\Online_Voting_System\\src\\main\\java\\vote\\com\\servlet\\registration.java","main_file_content":"package vote.com.servlet; import jakarta.servlet.RequestDispatcher; import jakarta.servlet.ServletException; import jakarta.servlet.http.HttpServlet; import jakarta.servlet.http.HttpServletRequest; import jakarta.servlet.http.HttpServletResponse; import java.io.IOException; import java.io.PrintWriter; import java.sql.Connection; import java.sql.DriverManager; import java.sql.PreparedStatement; public class registration extends HttpServlet { private static final long serialVersionUID = 1L; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { response.setContentType(\"text/html\"); PrintWriter out = response.getWriter(); String f=request.getParameter(\"fname\"); String c=request.getParameter(\"cardno\"); String cn=request.getParameter(\"cono\"); String ad=request.getParameter(\"add\"); String dob=request.getParameter(\"dob\"); String email=request.getParameter(\"email\"); String pin=request.getParameter(\"pin\"); try { Class.forName(\"com.mysql.jdbc.Driver\"); Connection con=(Connection) DriverManager.getConnection(\"jdbc:mysql: PreparedStatement ps=con.prepareStatement(\"insert into register values(?,?,?,?,?,?,?)\"); ps.setString(1,f); ps.setString(2,c); ps.setString(3,cn); ps.setString(4,ad); ps.setString(5,dob); ps.setString(6,email); ps.setString(7,pin); int i=ps.executeUpdate(); if(i>0) { out.print(\"Successfully your account has been created...PLEASE LOGIN\"); RequestDispatcher rd=request.getRequestDispatcher(\"loginpage.html\"); rd.include(request,response); } else { out.print(\"Failed account creation try again\"); RequestDispatcher rd=request.getRequestDispatcher(\"registration.html\"); rd.include(request,response); } } catch (Exception e2) { out.print(\"Invalid , Failed account creation try again \"+e2); RequestDispatcher rd=request.getRequestDispatcher(\"registration.html\"); rd.include(request,response); } out.close(); } protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { doPost(request, response); } }","dependencies":[]}}
{"project_id":87,"chunk_id":0,"content":{"main_file_path":"Online Voting System\\Online_Voting_System\\src\\main\\java\\vote\\com\\servlet\\thankyou.java","main_file_content":"package vote.com.servlet; import jakarta.servlet.ServletException; import jakarta.servlet.http.HttpServlet; import jakarta.servlet.http.HttpServletRequest; import jakarta.servlet.http.HttpServletResponse; import java.io.IOException; public class thankyou extends HttpServlet { private static final long serialVersionUID = 1L; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { } }","dependencies":[]}}
{"project_id":87,"chunk_id":0,"content":{"main_file_path":"Online Voting System\\Online_Voting_System\\src\\main\\java\\vote\\com\\servlet\\vote.java","main_file_content":"package vote.com.servlet; import jakarta.servlet.RequestDispatcher; import jakarta.servlet.ServletException; import jakarta.servlet.http.HttpServlet; import jakarta.servlet.http.HttpServletRequest; import jakarta.servlet.http.HttpServletResponse; import java.io.IOException; import java.io.PrintWriter; import java.sql.Connection; import java.sql.DriverManager; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.sql.SQLIntegrityConstraintViolationException; public class vote extends HttpServlet { private static final long serialVersionUID = 1L; final static Connection con=DBUtilR.getDBConnection(); static PreparedStatement ps = null; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { response.setContentType(\"text/html\"); PrintWriter out = response.getWriter(); String f=request.getParameter(\"cardno\"); String l=request.getParameter(\"party\"); try { Class.forName(\"com.mysql.jdbc.Driver\"); Connection con=(Connection) DriverManager.getConnection(\"jdbc:mysql: if(checkLogin(f)) { ps=con.prepareStatement(\"insert into vote values(?,?)\"); ps.setString(1,f); ps.setString(2,l); int i=ps.executeUpdate(); if(i>0) { out.print(\"Your Vote has been submitted successfully...\"); RequestDispatcher rd=request.getRequestDispatcher(\"thankyou.html\"); rd.include(request,response); } else { out.print(\"Failed to submit vote, try again\"); RequestDispatcher rd=request.getRequestDispatcher(\"vote.html\"); rd.include(request,response); } } else { out.print(\"Please enter correct card number\"); RequestDispatcher rd=request.getRequestDispatcher(\"vote.html\"); rd.include(request,response); } } catch (SQLIntegrityConstraintViolationException e2) { out.print(\"Please select any party\"); RequestDispatcher rd=request.getRequestDispatcher(\"vote.html\"); rd.include(request,response); } catch(Exception e) { out.print(\" \" +e); RequestDispatcher rd=request.getRequestDispatcher(\"vote.html\"); rd.include(request,response); } out.close(); } protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { doPost(request, response); } static boolean checkLogin(String card) throws SQLException { boolean r=false; ps=con.prepareStatement(\"Select * from register where cardno = ?\"); ps.setString(1,card); ResultSet rs=ps.executeQuery(); r=rs.next(); return r; } }","dependencies":[{"file_path":"Online Voting System\\Online_Voting_System\\src\\main\\java\\vote\\com\\servlet\\DBUtilR.java","file_content":"package vote.com.servlet; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; public class DBUtilR { static Connection conn = null; static { try { Class.forName(\"com.mysql.jdbc.Driver\"); conn = DriverManager.getConnection(\"jdbc:mysql: if(!conn.isClosed()) { System.out.println(\"Connection established\"); } } catch (ClassNotFoundException | SQLException e) { System.out.println(\"Error in DBUtilFile\"); e.printStackTrace(); } } public static Connection getDBConnection() { return conn; } }"}]}}
{"project_id":90,"chunk_id":0,"content":{"main_file_path":"OnlineBookStore-main\\onlinebookstore-J2EE\\OnlineBookStore\\constants\\IDatabase.java","main_file_content":"package constants; public class IDatabase { public static final String DRIVER_NAME = \"com.mysql.jdbc.Driver\"; public static final String CONNECTION_STRING = \"jdbc:mysql: public static final String USER_NAME = \"root\"; public static final String PASSWORD = \"sHj@6378#jw\"; }","dependencies":[]}}
{"project_id":90,"chunk_id":0,"content":{"main_file_path":"OnlineBookStore-main\\onlinebookstore-J2EE\\OnlineBookStore\\constants\\IOnlineBookStoreConstants.java","main_file_content":"package constants; public interface IOnlineBookStoreConstants { public static String CONTENT_TYPE_TEXT_HTML = \"text/html\"; }","dependencies":[]}}
{"project_id":90,"chunk_id":0,"content":{"main_file_path":"OnlineBookStore-main\\onlinebookstore-J2EE\\OnlineBookStore\\servlets\\AddBookServlet.java","main_file_content":"package servlets; import java.io.IOException; import java.io.PrintWriter; import java.sql.Connection; import java.sql.PreparedStatement; import javax.servlet.GenericServlet; import javax.servlet.RequestDispatcher; import javax.servlet.ServletException; import javax.servlet.ServletRequest; import javax.servlet.ServletResponse; import constants.IOnlineBookStoreConstants; import sql.IBookConstants; public class AddBookServlet extends GenericServlet{ public void service(ServletRequest req,ServletResponse res) throws IOException,ServletException { PrintWriter pw = res.getWriter(); res.setContentType(IOnlineBookStoreConstants.CONTENT_TYPE_TEXT_HTML); String bCode = req.getParameter(IBookConstants.COLUMN_BARCODE); String bName = req.getParameter(IBookConstants.COLUMN_NAME); String bAuthor = req.getParameter(IBookConstants.COLUMN_AUTHOR); int bPrice =Integer.parseInt(req.getParameter(IBookConstants.COLUMN_PRICE)); int bQty = Integer.parseInt(req.getParameter(IBookConstants.COLUMN_QUANTITY)); try { Connection con = DBConnection.getCon(); PreparedStatement ps = con.prepareStatement(\"insert into \" + IBookConstants.TABLE_BOOK + \" values(?,?,?,?,?)\"); ps.setString(1, bCode); ps.setString(2, bName); ps.setString(3, bAuthor); ps.setInt(4, bPrice); ps.setInt(5, bQty); int k = ps.executeUpdate(); if(k==1) { RequestDispatcher rd = req.getRequestDispatcher(\"AddBook.html\"); rd.include(req, res); pw.println(\"<div class=\\\"tab\\\">Book Detail Updated Successfully!<br/>Add More Books</div>\"); } else { RequestDispatcher rd = req.getRequestDispatcher(\"AddBook.html\"); pw.println(\"<div class=\\\"tab\\\">Failed to Add Books! Fill up CareFully</div>\"); rd.include(req, res); } } catch(Exception e) { e.printStackTrace(); } } }","dependencies":[{"file_path":"OnlineBookStore-main\\onlinebookstore-J2EE\\OnlineBookStore\\servlets\\DBConnection.java","file_content":"package servlets; import java.sql.*; import java.util.ResourceBundle; import constants.IDatabase; public class DBConnection { private static Connection con; private DBConnection(){}; static { try { Class.forName(IDatabase.DRIVER_NAME); } catch(Exception e) { e.printStackTrace(); } try { con = DriverManager.getConnection(IDatabase.CONNECTION_STRING, IDatabase.USER_NAME, IDatabase.PASSWORD); } catch (SQLException e) { e.printStackTrace(); } } public static Connection getCon() { return con; } }"}]}}
{"project_id":90,"chunk_id":0,"content":{"main_file_path":"OnlineBookStore-main\\onlinebookstore-J2EE\\OnlineBookStore\\servlets\\AdminLoginServlet.java","main_file_content":"package servlets; import javax.servlet.*; import javax.servlet.http.Cookie; import javax.servlet.http.HttpSession; import constants.IOnlineBookStoreConstants; import sql.IUserContants; import java.io.*; import java.sql.*; public class AdminLoginServlet extends GenericServlet { public void service(ServletRequest req, ServletResponse res) throws IOException, ServletException { PrintWriter pw = res.getWriter(); res.setContentType(IOnlineBookStoreConstants.CONTENT_TYPE_TEXT_HTML); String uName = req.getParameter(IUserContants.COLUMN_USERNAME); String pWord = req.getParameter(IUserContants.COLUMN_PASSWORD); try { Connection con = DBConnection.getCon(); PreparedStatement ps = con.prepareStatement(\"SELECT * FROM \" + IUserContants.TABLE_USERS + \" WHERE \" + IUserContants.COLUMN_USERNAME + \"=? AND \" + IUserContants.COLUMN_PASSWORD + \"=? AND \" + IUserContants.COLUMN_USERTYPE + \"=1\"); ps.setString(1, uName); ps.setString(2, pWord); ResultSet rs = ps.executeQuery(); if (rs.next()) { RequestDispatcher rd = req.getRequestDispatcher(\"Sample.html\"); Cookie ck = new Cookie(\"usertype\",\"admin\"); rd.include(req, res); pw.println(\"<div class=\\\"tab\\\">Admin Login Successful</div>\"); pw.println(\"<div class=\\\"tab\\\"><br/><a href=\\\"AddBook.html\\\">ADD BOOKS</a><br/></div>\"); pw.println(\"<div class=\\\"tab\\\"><br/><a href=\\\"RemoveBooks.html\\\">REMOVE BOOKS</a><br/></div>\"); pw.println(\"<div class=\\\"tab\\\"><br/><a href=\\\"viewbook\\\">VIEW BOOKS</a></div>\"); } else { RequestDispatcher rd = req.getRequestDispatcher(\"AdminLogin.html\"); rd.include(req, res); pw.println(\"<div class=\\\"tab\\\">Incorrect UserName or PassWord</div>\"); } } catch (Exception e) { e.printStackTrace(); } } }","dependencies":[{"file_path":"OnlineBookStore-main\\onlinebookstore-J2EE\\OnlineBookStore\\servlets\\DBConnection.java","file_content":"package servlets; import java.sql.*; import java.util.ResourceBundle; import constants.IDatabase; public class DBConnection { private static Connection con; private DBConnection(){}; static { try { Class.forName(IDatabase.DRIVER_NAME); } catch(Exception e) { e.printStackTrace(); } try { con = DriverManager.getConnection(IDatabase.CONNECTION_STRING, IDatabase.USER_NAME, IDatabase.PASSWORD); } catch (SQLException e) { e.printStackTrace(); } } public static Connection getCon() { return con; } }"}]}}
{"project_id":90,"chunk_id":0,"content":{"main_file_path":"OnlineBookStore-main\\onlinebookstore-J2EE\\OnlineBookStore\\servlets\\BuyBooksServlet.java","main_file_content":"package servlets; import java.io.*; import java.sql.*; import javax.servlet.*; import constants.IOnlineBookStoreConstants; import sql.IBookConstants; import sql.IUserContants; public class BuyBooksServlet extends GenericServlet{ public void service(ServletRequest req,ServletResponse res) throws IOException,ServletException { PrintWriter pw = res.getWriter(); res.setContentType(IOnlineBookStoreConstants.CONTENT_TYPE_TEXT_HTML); try { Connection con = DBConnection.getCon(); PreparedStatement ps = con.prepareStatement(\"Select * from \" + IBookConstants.TABLE_BOOK); ResultSet rs = ps.executeQuery(); RequestDispatcher rd = req.getRequestDispatcher(\"ViewBooks.html\"); rd.include(req, res); pw.println(\"<div class=\\\"tab hd brown \\\">Books Available In Our Store</div>\"); pw.println(\"<div class=\\\"tab\\\"><form action=\\\"buys\\\" method=\\\"post\\\">\"); pw.println(\"<table>\\r\\n\" + \" <tr>\\r\\n\" + \" <th>Books</th>\\r\\n\" + \" <th>Code</th>\\r\\n\" + \" <th>Name</th>\\r\\n\" + \" <th>Author</th>\\r\\n\" + \" <th>Price</th>\\r\\n\" + \" <th>Avail</th>\\r\\n\" + \" <th>Qty</th>\\r\\n\" + \" </tr>\"); int i=0; while(rs.next()) { String bCode = rs.getString(1); String bName = rs.getString(2); String bAuthor = rs.getString(3); int bPrice = rs.getInt(4); int bAvl = rs.getInt(5); i=i+1; String n = \"checked\"+ Integer.toString(i); String q = \"qty\"+Integer.toString(i); pw.println(\"<tr>\\r\\n\" + \" <td>\\r\\n\" + \" <input type=\\\"checkbox\\\" name=\"+n+\" value=\\\"pay\\\">\\r\\n\" + \" </td>\"); pw.println(\"<td>\"+bCode+\"</td>\"); pw.println(\"<td>\"+bName+\"</td>\"); pw.println(\"<td>\"+bAuthor+\"</td>\"); pw.println(\"<td>\"+bPrice+\"</td>\"); pw.println(\"<td>\"+bAvl+\"</td>\"); pw.println(\"<td><input type=\\\"text\\\" name=\"+q+\" value=\\\"0\\\" text-align=\\\"center\\\"></td></tr>\"); } pw.println(\"</table>\\r\\n\" + \"<input type=\\\"submit\\\" value=\\\" PAY NOW \\\">\"+\"<br/>\"+ \" </form>\\r\\n\" + \" </div>\"); } catch(Exception e) { e.printStackTrace(); } } }","dependencies":[{"file_path":"OnlineBookStore-main\\onlinebookstore-J2EE\\OnlineBookStore\\servlets\\DBConnection.java","file_content":"package servlets; import java.sql.*; import java.util.ResourceBundle; import constants.IDatabase; public class DBConnection { private static Connection con; private DBConnection(){}; static { try { Class.forName(IDatabase.DRIVER_NAME); } catch(Exception e) { e.printStackTrace(); } try { con = DriverManager.getConnection(IDatabase.CONNECTION_STRING, IDatabase.USER_NAME, IDatabase.PASSWORD); } catch (SQLException e) { e.printStackTrace(); } } public static Connection getCon() { return con; } }"}]}}
{"project_id":90,"chunk_id":0,"content":{"main_file_path":"OnlineBookStore-main\\onlinebookstore-J2EE\\OnlineBookStore\\servlets\\DBConnection.java","main_file_content":"package servlets; import java.sql.*; import java.util.ResourceBundle; import constants.IDatabase; public class DBConnection { private static Connection con; private DBConnection(){}; static { try { Class.forName(IDatabase.DRIVER_NAME); } catch(Exception e) { e.printStackTrace(); } try { con = DriverManager.getConnection(IDatabase.CONNECTION_STRING, IDatabase.USER_NAME, IDatabase.PASSWORD); } catch (SQLException e) { e.printStackTrace(); } } public static Connection getCon() { return con; } }","dependencies":[]}}
{"project_id":90,"chunk_id":0,"content":{"main_file_path":"OnlineBookStore-main\\onlinebookstore-J2EE\\OnlineBookStore\\servlets\\ReceiptServlet.java","main_file_content":"package servlets; import java.sql.*; import java.io.*; import javax.servlet.*; import constants.IOnlineBookStoreConstants; import sql.IBookConstants; public class ReceiptServlet extends GenericServlet { public void service(ServletRequest req, ServletResponse res) throws IOException, ServletException { PrintWriter pw = res.getWriter(); res.setContentType(IOnlineBookStoreConstants.CONTENT_TYPE_TEXT_HTML); try { Connection con = DBConnection.getCon(); PreparedStatement ps = con.prepareStatement(\"select * from \" + IBookConstants.TABLE_BOOK); ResultSet rs = ps.executeQuery(); int i = 0; RequestDispatcher rd = req.getRequestDispatcher(\"ViewBooks.html\"); rd.include(req, res); pw.println(\"<div class=\\\"tab\\\">You Successfully Paid for Following Books</div>\"); pw.println( \"<div class=\\\"tab\\\">\\r\\n\" + \" <table>\\r\\n\" + \" <tr>\\r\\n\" + \" \\r\\n\" + \" <th>Book Code</th>\\r\\n\" + \" <th>Book Name</th>\\r\\n\" + \" <th>Book Author</th>\\r\\n\" + \" <th>Book Price</th>\\r\\n\" + \" <th>Quantity</th><br/>\\r\\n\" + \" <th>Amount</th><br/>\\r\\n\" + \" </tr>\"); double total = 0.0; while (rs.next()) { int bPrice = rs.getInt(IBookConstants.COLUMN_PRICE); String bCode = rs.getString(IBookConstants.COLUMN_BARCODE); String bName = rs.getString(IBookConstants.COLUMN_NAME); String bAuthor = rs.getString(IBookConstants.COLUMN_AUTHOR); int bQty = rs.getInt(IBookConstants.COLUMN_QUANTITY); i = i + 1; String qt = \"qty\" + Integer.toString(i); int quantity = Integer.parseInt(req.getParameter(qt)); try { String check1 = \"checked\" + Integer.toString(i); String getChecked = req.getParameter(check1); if (bQty < quantity) { pw.println( \"</table><div class=\\\"tab\\\">Please Select the Qty less than Available Books Quantity</div>\"); break; } if (getChecked.equals(\"pay\")) { pw.println(\"<tr><td>\" + bCode + \"</td>\"); pw.println(\"<td>\" + bName + \"</td>\"); pw.println(\"<td>\" + bAuthor + \"</td>\"); pw.println(\"<td>\" + bPrice + \"</td>\"); pw.println(\"<td>\" + quantity + \"</td>\"); int amount = bPrice * quantity; total = total + amount; pw.println(\"<td>\" + amount + \"</td></tr>\"); bQty = bQty - quantity; System.out.println(bQty); PreparedStatement ps1 = con.prepareStatement(\"update \" + IBookConstants.TABLE_BOOK + \" set \" + IBookConstants.COLUMN_QUANTITY + \"=? where \" + IBookConstants.COLUMN_BARCODE + \"=?\"); ps1.setInt(1, bQty); ps1.setString(2, bCode); ps1.executeUpdate(); } } catch (Exception e) { } } pw.println(\"</table><br/><div class='tab'>Total Paid Amount: \" + total + \"</div>\"); String fPay = req.getParameter(\"f_pay\"); } catch (Exception e) { e.printStackTrace(); } } }","dependencies":[{"file_path":"OnlineBookStore-main\\onlinebookstore-J2EE\\OnlineBookStore\\servlets\\DBConnection.java","file_content":"package servlets; import java.sql.*; import java.util.ResourceBundle; import constants.IDatabase; public class DBConnection { private static Connection con; private DBConnection(){}; static { try { Class.forName(IDatabase.DRIVER_NAME); } catch(Exception e) { e.printStackTrace(); } try { con = DriverManager.getConnection(IDatabase.CONNECTION_STRING, IDatabase.USER_NAME, IDatabase.PASSWORD); } catch (SQLException e) { e.printStackTrace(); } } public static Connection getCon() { return con; } }"}]}}
{"project_id":90,"chunk_id":0,"content":{"main_file_path":"OnlineBookStore-main\\onlinebookstore-J2EE\\OnlineBookStore\\servlets\\RemoveBookServlet.java","main_file_content":"package servlets; import java.sql.*; import javax.servlet.*; import sql.IBookConstants; import java.io.*; public class RemoveBookServlet extends GenericServlet { public void service(ServletRequest req, ServletResponse res) throws IOException, ServletException { PrintWriter pw = res.getWriter(); res.setContentType(\"text/html\"); String bkid = req.getParameter(\"barcode\"); try { Connection con = DBConnection.getCon(); PreparedStatement ps = con.prepareStatement( \"delete from \" + IBookConstants.TABLE_BOOK + \" where \" + IBookConstants.COLUMN_BARCODE + \"=?\"); ps.setString(1, bkid); int k = ps.executeUpdate(); if (k == 1) { RequestDispatcher rd = req.getRequestDispatcher(\"Sample.html\"); rd.include(req, res); pw.println(\"<div class=\\\"tab\\\">Book Removed Successfully</div>\"); pw.println(\"<div class=\\\"tab\\\"><a href=\\\"RemoveBooks.html\\\">Remove more Books</a></div>\"); } else { RequestDispatcher rd = req.getRequestDispatcher(\"Sample.html\"); rd.include(req, res); pw.println(\"<div class=\\\"tab\\\">Book Not Available In The Store</div>\"); pw.println(\"<div class=\\\"tab\\\"><a href=\\\"RemoveBooks.html\\\">Remove more Books</a></div>\"); } } catch (Exception e) { e.printStackTrace(); } } }","dependencies":[{"file_path":"OnlineBookStore-main\\onlinebookstore-J2EE\\OnlineBookStore\\servlets\\DBConnection.java","file_content":"package servlets; import java.sql.*; import java.util.ResourceBundle; import constants.IDatabase; public class DBConnection { private static Connection con; private DBConnection(){}; static { try { Class.forName(IDatabase.DRIVER_NAME); } catch(Exception e) { e.printStackTrace(); } try { con = DriverManager.getConnection(IDatabase.CONNECTION_STRING, IDatabase.USER_NAME, IDatabase.PASSWORD); } catch (SQLException e) { e.printStackTrace(); } } public static Connection getCon() { return con; } }"}]}}
{"project_id":90,"chunk_id":0,"content":{"main_file_path":"OnlineBookStore-main\\onlinebookstore-J2EE\\OnlineBookStore\\servlets\\UserLoginServlet.java","main_file_content":"package servlets; import javax.servlet.*; import constants.IOnlineBookStoreConstants; import sql.IUserContants; import java.io.*; import java.sql.*; public class UserLoginServlet extends GenericServlet { public void service(ServletRequest req, ServletResponse res) throws IOException, ServletException { PrintWriter pw = res.getWriter(); res.setContentType(IOnlineBookStoreConstants.CONTENT_TYPE_TEXT_HTML); String uName = req.getParameter(IUserContants.COLUMN_USERNAME); String pWord = req.getParameter(IUserContants.COLUMN_PASSWORD); try { Connection con = DBConnection.getCon(); PreparedStatement ps = con.prepareStatement(\"SELECT * FROM \" + IUserContants.TABLE_USERS + \" WHERE \" + IUserContants.COLUMN_USERNAME + \"=? AND \" + IUserContants.COLUMN_PASSWORD + \"=? AND \" + IUserContants.COLUMN_USERTYPE + \"=2\"); ps.setString(1, uName); ps.setString(2, pWord); ResultSet rs = ps.executeQuery(); if (rs.next()) { RequestDispatcher rd = req.getRequestDispatcher(\"Sample.html\"); rd.include(req, res); pw.println(\"<div class=\\\"home hd brown\\\">Welcome ! \" + uName + \"</div><br/>\"); pw.println(\"<div class=\\\"tab hd brown\\\">User Login Successful !</div><br/>\"); pw.println(\"<div class=\\\"tab\\\"><a href=\\\"viewbook\\\">VIEW BOOKS</a></div>\"); pw.println(\"<div class='tab'><a href=\\\"buybook\\\">BUY BOOKS</a></div>\"); } else { RequestDispatcher rd = req.getRequestDispatcher(\"UserLogin.html\"); rd.include(req, res); pw.println(\"<div class=\\\"tab\\\">Incorrect UserName or PassWord</div>\"); } } catch (Exception e) { e.printStackTrace(); } } }","dependencies":[{"file_path":"OnlineBookStore-main\\onlinebookstore-J2EE\\OnlineBookStore\\servlets\\DBConnection.java","file_content":"package servlets; import java.sql.*; import java.util.ResourceBundle; import constants.IDatabase; public class DBConnection { private static Connection con; private DBConnection(){}; static { try { Class.forName(IDatabase.DRIVER_NAME); } catch(Exception e) { e.printStackTrace(); } try { con = DriverManager.getConnection(IDatabase.CONNECTION_STRING, IDatabase.USER_NAME, IDatabase.PASSWORD); } catch (SQLException e) { e.printStackTrace(); } } public static Connection getCon() { return con; } }"}]}}
{"project_id":90,"chunk_id":0,"content":{"main_file_path":"OnlineBookStore-main\\onlinebookstore-J2EE\\OnlineBookStore\\servlets\\UserRegisterServlet.java","main_file_content":"package servlets; import java.sql.*; import javax.servlet.*; import constants.IOnlineBookStoreConstants; import sql.IUserContants; import java.io.*; public class UserRegisterServlet extends GenericServlet { public void service(ServletRequest req, ServletResponse res) throws IOException, ServletException { PrintWriter pw = res.getWriter(); res.setContentType(IOnlineBookStoreConstants.CONTENT_TYPE_TEXT_HTML); String uName = req.getParameter(IUserContants.COLUMN_USERNAME); String pWord = req.getParameter(IUserContants.COLUMN_PASSWORD); String fName = req.getParameter(IUserContants.COLUMN_FIRSTNAME); String lName = req.getParameter(IUserContants.COLUMN_LASTNAME); String addr = req.getParameter(IUserContants.COLUMN_ADDRESS); String phNo = req.getParameter(IUserContants.COLUMN_PHONE); String mailId = req.getParameter(IUserContants.COLUMN_MAILID); try { Connection con = DBConnection.getCon(); PreparedStatement ps = con .prepareStatement(\"insert into \" + IUserContants.TABLE_USERS + \" values(?,?,?,?,?,?,?,?)\"); ps.setString(1, uName); ps.setString(2, pWord); ps.setString(3, fName); ps.setString(4, lName); ps.setString(5, addr); ps.setString(6, phNo); ps.setString(7, mailId); ps.setInt(8, 2); int k = ps.executeUpdate(); if (k == 1) { RequestDispatcher rd = req.getRequestDispatcher(\"Sample.html\"); rd.include(req, res); pw.println(\"<h3 class='tab'>User Registered Successfully</h3>\"); } else { RequestDispatcher rd = req.getRequestDispatcher(\"userreg\"); rd.include(req, res); pw.println(\"Sorry for interruption! Register again\"); } } catch (Exception e) { e.printStackTrace(); } } }","dependencies":[{"file_path":"OnlineBookStore-main\\onlinebookstore-J2EE\\OnlineBookStore\\servlets\\DBConnection.java","file_content":"package servlets; import java.sql.*; import java.util.ResourceBundle; import constants.IDatabase; public class DBConnection { private static Connection con; private DBConnection(){}; static { try { Class.forName(IDatabase.DRIVER_NAME); } catch(Exception e) { e.printStackTrace(); } try { con = DriverManager.getConnection(IDatabase.CONNECTION_STRING, IDatabase.USER_NAME, IDatabase.PASSWORD); } catch (SQLException e) { e.printStackTrace(); } } public static Connection getCon() { return con; } }"}]}}
{"project_id":90,"chunk_id":0,"content":{"main_file_path":"OnlineBookStore-main\\onlinebookstore-J2EE\\OnlineBookStore\\servlets\\ViewBookServlet.java","main_file_content":"package servlets; import java.io.*; import java.sql.*; import javax.servlet.*; import constants.IOnlineBookStoreConstants; import sql.IBookConstants; public class ViewBookServlet extends GenericServlet{ public void service(ServletRequest req,ServletResponse res) throws IOException,ServletException { PrintWriter pw = res.getWriter(); res.setContentType(\"text/html\"); try { Connection con = DBConnection.getCon(); PreparedStatement ps = con.prepareStatement(\"Select * from \" + IBookConstants.TABLE_BOOK); ResultSet rs = ps.executeQuery(); RequestDispatcher rd = req.getRequestDispatcher(\"ViewBooks.html\"); rd.include(req, res); pw.println(\"<div class=\\\"tab\\\">Books Available In Our Store</div>\"); pw.println(\"<div class=\\\"tab\\\">\\r\\n\" + \" <table>\\r\\n\" + \" <tr>\\r\\n\" + \" \\r\\n\" + \" <th>Book Code</th>\\r\\n\" + \" <th>Book Name</th>\\r\\n\" + \" <th>Book Author</th>\\r\\n\" + \" <th>Book Price</th>\\r\\n\" + \" <th>Quantity</th><br/>\\r\\n\" + \" </tr>\"); while(rs.next()) { String bCode = rs.getString(1); String bName = rs.getString(2); String bAuthor = rs.getString(3); int bPrice = rs.getInt(4); int bQty = rs.getInt(5); pw.println(\"<tr><td>\"+bCode+\"</td>\"); pw.println(\"<td>\"+bName+\"</td>\"); pw.println(\"<td>\"+bAuthor+\"</td>\"); pw.println(\"<td>\"+bPrice+\"</td>\"); pw.println(\"<td>\"+bQty+\"</td></tr>\"); } pw.println(\"</table>\\r\\n\" + \" </div>\"); } catch(Exception e) { e.printStackTrace(); } } }","dependencies":[{"file_path":"OnlineBookStore-main\\onlinebookstore-J2EE\\OnlineBookStore\\servlets\\DBConnection.java","file_content":"package servlets; import java.sql.*; import java.util.ResourceBundle; import constants.IDatabase; public class DBConnection { private static Connection con; private DBConnection(){}; static { try { Class.forName(IDatabase.DRIVER_NAME); } catch(Exception e) { e.printStackTrace(); } try { con = DriverManager.getConnection(IDatabase.CONNECTION_STRING, IDatabase.USER_NAME, IDatabase.PASSWORD); } catch (SQLException e) { e.printStackTrace(); } } public static Connection getCon() { return con; } }"}]}}
{"project_id":90,"chunk_id":0,"content":{"main_file_path":"OnlineBookStore-main\\onlinebookstore-J2EE\\OnlineBookStore\\sql\\IBookConstants.java","main_file_content":"package sql; public interface IBookConstants { public static String TABLE_BOOK = \"books\"; public static String COLUMN_NAME = \"name\"; public static String COLUMN_BARCODE = \"barcode\"; public static String COLUMN_AUTHOR = \"author\"; public static String COLUMN_PRICE = \"price\"; public static String COLUMN_QUANTITY = \"quantity\"; }","dependencies":[]}}
{"project_id":90,"chunk_id":0,"content":{"main_file_path":"OnlineBookStore-main\\onlinebookstore-J2EE\\OnlineBookStore\\sql\\IUserContants.java","main_file_content":"package sql; public interface IUserContants { public static String TABLE_USERS = \"users\"; public static String COLUMN_USERNAME = \"username\"; public static String COLUMN_PASSWORD = \"password\"; public static String COLUMN_FIRSTNAME = \"firstname\"; public static String COLUMN_LASTNAME = \"lastname\"; public static String COLUMN_ADDRESS = \"address\"; public static String COLUMN_PHONE = \"phone\"; public static String COLUMN_MAILID = \"mailid\"; public static String COLUMN_USERTYPE = \"usertype\"; }","dependencies":[]}}
{"project_id":92,"chunk_id":0,"content":{"main_file_path":"Parking_Lot-main\\Car.java","main_file_content":"public class Car{ public String NumberPlate; public String CarColor; public String CarType; public String getNumberPlate(){ return NumberPlate; } public void setNumberPlate(String NumberPlate){ this.NumberPlate = NumberPlate; } public String getCarColor(){ return CarColor; } public void setCarColor(String CarColor){ this.CarColor = CarColor; } public String getCarType(){ return CarType; } public void setCarType(String CarType){ this.CarType = CarType; } }","dependencies":[]}}
{"project_id":92,"chunk_id":0,"content":{"main_file_path":"Parking_Lot-main\\ParkingLot.java","main_file_content":"import java.util.ArrayList; import java.util.*; public class ParkingLot{ public static void main(String[] args){ ArrayList<ParkingTicket> assignedspotlist = new ArrayList<>(); ParkingSpot parkingspot = new ParkingSpot(); RandomInfo randominfo = new RandomInfo(); Scanner scan = new Scanner(System.in); while( true ) { System.out.print(\"You want to parked your vehicle : \"); String userinput = scan.nextLine(); int size = userinput.length(); ParkingTicket parkingticket = new ParkingTicket(); Car car = new Car(); if (size == 5) { System.out.print(\"\\033\\143\"); String carcolor = randominfo.CarColor(); String numberplate = randominfo.Numberplate(); String cartype = randominfo.CarType(); parkingticket.setAssignedCar(car); parkingticket.getAssignedCar().setNumberPlate(numberplate); parkingticket.getAssignedCar().setCarColor(carcolor); parkingticket.getAssignedCar().setCarType(cartype); int spotnum = parkingspot.SpotNum(); if(spotnum == 0){ System.out.println(\"Sorry, spot is not available.\"); continue; } parkingticket.setSpotNumber(spotnum); String cardtype = randominfo.CardType(); String time = randominfo.Time(); String date = randominfo.Date(); long cardnumber = randominfo.CardNumber(); parkingticket.setCardType(cardtype); parkingticket.setTime(time); parkingticket.setDate(date); parkingticket.setCardNumber(cardnumber); System.out.println(\"\\t\\t== Parking Ticket ==\\n\" + \"Car Number : \" + numberplate + \" Car Color : \" + carcolor + \" Car Type : \" + cartype + \"\\nParking Time : \" + time + \" Date : \" + date + \"\\nSpot Number : \" + spotnum + \"\\n\" ); assignedspotlist.add(parkingticket); System.out.println(assignedspotlist.size()); } else if(size == 4){ int cheakspot = parkingspot.si(); if (cheakspot == 10 ){ System.out.println(\"There is no car .\"); continue; } else { System.out.print(\"Enter your car number : \"); String number = scan.nextLine(); ScanTicket scanticket = new ScanTicket(); TotalTime totaltime = new TotalTime(); Payment payment = new Payment(); for(ParkingTicket cp : assignedspotlist){ String carnumber = cp.getAssignedCar().getNumberPlate(); int item = scanticket.cheaknumber(number, carnumber); if( item == 0 ){ continue; } else if(item == 1){ int spot = assignedspotlist.indexOf(cp); String exitdate = randominfo.ExitDate(); String exittime = randominfo.ExitTime(); String enterdate = assignedspotlist.get(spot).getDate(); String entertime = assignedspotlist.get(spot).getTime(); int time[] = totaltime.CalculateTime(enterdate, exitdate, entertime, exittime); float amount = payment.TotalAmount(time[0], time[1]); System.out.println(\"\\n\\t\\t=== Your Parking information ===\\n\" + \"Car Number : \" + assignedspotlist.get(spot).getAssignedCar().getNumberPlate() + \" Car Color : \" + assignedspotlist.get(spot).getAssignedCar().getCarColor() + \" Car Type : \"+assignedspotlist.get(spot).getAssignedCar().getCarType()+ \"\\nParking Time : \"+assignedspotlist.get(spot).getTime()+ \" Exit Time : \"+exittime+ \"\\nParking Date : \"+assignedspotlist.get(spot).getDate()+ \" Exit Date :\" +exitdate+ \" Spot Number : \"+assignedspotlist.get(spot).getSpotNumber()+ \"\\nTotal Time : \"+time[0]+\" Hour \"+time[1]+\" Minute \"+ \"\\nTotal Amount : \"+amount+\" rupees\\n\" ); parkingspot.FreeSpot(assignedspotlist.get(spot).getSpotNumber()); assignedspotlist.remove(spot); break; } } } } else if(size == 6){ System.out.println(\"All Car Information : \\n\"); for(ParkingTicket pt : assignedspotlist){ System.out.println(\"\\n\\ncar number : \"+pt.getAssignedCar().getNumberPlate()+ \" car color : \"+pt.getAssignedCar().getCarColor()+ \" car type : \"+pt.getAssignedCar().getCarType()+ \"\\nparking time : \"+pt.getTime()+\" date : \"+pt.getDate()+ \" spot number : \"+pt.getSpotNumber() ); } parkingspot.sipe(); System.out.println(); } } } }","dependencies":[{"file_path":"Parking_Lot-main\\Car.java","file_content":"public class Car{ public String NumberPlate; public String CarColor; public String CarType; public String getNumberPlate(){ return NumberPlate; } public void setNumberPlate(String NumberPlate){ this.NumberPlate = NumberPlate; } public String getCarColor(){ return CarColor; } public void setCarColor(String CarColor){ this.CarColor = CarColor; } public String getCarType(){ return CarType; } public void setCarType(String CarType){ this.CarType = CarType; } }"},{"file_path":"Parking_Lot-main\\ParkingSpot.java","file_content":"public class ParkingSpot{ int[] arr = new int[10]; public int SpotNum(){ int spot = 0; for (int i = 0; i < 10; i++){ if(arr[i] == 0) { spot = i + 1; arr[i] = i + 1; break; } } return spot; } public int si(){ int cheakspot = 0; for(int i = 0; i < 10; i++){ if(arr[i] != 0){ return 1; } else if(arr[i] == 0){ cheakspot++; } } return cheakspot; } public void sipe(){ System.out.print(\"\\nSpot status : \"); for(int i = 0; i < 10; i++){ System.out.print(arr[i]+\" \"); } System.out.println(); } public void FreeSpot (int num){ arr[num - 1] = 0; } }"},{"file_path":"Parking_Lot-main\\ParkingTicket.java","file_content":"import java.time.format.DateTimeFormatter; public class ParkingTicket{ public String enterDate; public String enterTime; private long CardNumber ; public String CardType; public int SpotNumber; public Car car; public Car getAssignedCar(){ return car; } public void setAssignedCar(Car car){ this.car = car; } public String getDate(){ return enterDate; } public void setDate(String enterDate){ this.enterDate = enterDate; } public String getTime(){ return enterTime; } public void setTime(String enterTime){ this.enterTime = enterTime; } private long getCardNumber(){ return CardNumber; } public void setCardNumber(long CardNumber){ this.CardNumber = CardNumber; } private String getCardType(){ return CardType; } public void setCardType(String CardType){ this.CardType = CardType; } public int getSpotNumber(){ return SpotNumber; } public void setSpotNumber(int SpotNumber){ this.SpotNumber = SpotNumber; } }"},{"file_path":"Parking_Lot-main\\Payment.java","file_content":"public class Payment{ float HourAmount = 30; float TotalAmountForHour = 0; float TotalAmountForMinute = 0; public float TotalAmount(int Hour, int Minute){ TotalAmountForHour = Hour * HourAmount; if (Minute < 60 && Minute >= 30) { TotalAmountForMinute = 20; } else if(Minute < 30 && Minute >= 15){ TotalAmountForMinute = 15; } else if(Minute < 15 && Minute >= 1){ TotalAmountForMinute = 10; } return (TotalAmountForHour+TotalAmountForMinute); } }"},{"file_path":"Parking_Lot-main\\RandomInfo.java","file_content":"import java.util.Random; import java.time.LocalDate; import java.time.LocalTime; import java.time.format.DateTimeFormatter; public class RandomInfo{ Random rand = new Random(); String[] states = {\"MH\", \"GJ\", \"RJ\", \"DL\", \"MP\", \"UP\", \"KA\", \"JK\", \"LA\"}; String[] dist = {\"02\", \"27\", \"12\", \"19\", \"22\", \"08\", \"05\", \"26\", \"30\"}; String[] alpha = {\"AB\", \"CV\", \"RT\", \"ZX\", \"WE\", \"JK\", \"RL\", \"AQ\", \"PO\", \"DH\"}; String[] color = {\"Red\", \"Yellow\", \"Green\", \"white\", \"Brown\", \"Violet\", \"Pink\"}; String[] type = {\"Sedan\", \"van\", \"Minivan\", \"Bus\", \"Pickup-truck\", \"Hatchback\"}; public String Numberplate(){ int st = rand.nextInt(states.length); int di = rand.nextInt(dist.length); int al = rand.nextInt(alpha.length); return states[st]+\"-\"+dist[di]+\" \"+alpha[al]+\" \"+rand.nextInt((99 - 10)+ 1) + 10; } public String CarColor(){ int res = rand.nextInt(color.length); return color[res]; } public String CarType() { int typ = rand.nextInt(type.length); return type[typ]; } public String Time(){ LocalTime localTime = LocalTime.now(); DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"hh:mm a\"); String enterTime = localTime.format(dateTimeFormatter); return enterTime; } public String ExitTime(){ LocalTime localTime = LocalTime.now(); DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"hh:mm a\"); String exitTime = localTime.format(dateTimeFormatter); return exitTime; } public String Date(){ LocalDate mydate = LocalDate.now(); return mydate.toString(); } public String ExitDate(){ LocalDate date = LocalDate.now(); return date.toString(); } String[] cardtype = {\"Debit\", \"Credit\"}; public String CardType(){ int caty = rand.nextInt(cardtype.length); return cardtype[caty]; } public long CardNumber(){ return ((rand.nextLong() % 100000000000000L) + 5200000000000000L); } }"},{"file_path":"Parking_Lot-main\\ScanTicket.java","file_content":"public class ScanTicket{ public int cheaknumber(String inputnumber, String storenumber){ int size1 = inputnumber.length(); int size2 = storenumber.length(); if (size1 != size2){ return 0; } else if(inputnumber.equals(storenumber)){ return 1; } return 0; } }"},{"file_path":"Parking_Lot-main\\TotalTime.java","file_content":"public class TotalTime{ public static int[] CalculateTime(String enterdate, String exitdate, String entertime, String exittime){ int firstDay = Integer.parseInt(enterdate.substring(8, 10)); int lastDay = Integer.parseInt(exitdate.substring(8, 10)); int firstMonth = Integer.parseInt(enterdate.substring(5,7), 10); int lastMonth = Integer.parseInt(exitdate.substring(5,7)); int firstYear = Integer.parseInt(enterdate.substring(0,4)); if( firstMonth != lastMonth){ int daysInMonth ; if (firstMonth == 1 || firstMonth == 3 || firstMonth == 5 || firstMonth == 7 || firstMonth == 8 || firstMonth == 10 || firstMonth == 12 ) { daysInMonth = 31; } else { if (firstMonth == 2) { daysInMonth = (firstYear % 4 == 0) ? 29 : 28; } else { daysInMonth = 30; } } int Days = daysInMonth - firstDay; Days = Days + (lastDay - 1); int HourInTotalDays = Days * 24; int HoursInFirstDay = 0; int MinutesInFirstDay = 0; if (entertime.substring(6, 8).equals(\"AM\")) { if (Integer.parseInt(entertime.substring(0, 2)) == 12) { HoursInFirstDay = 11 + 12; MinutesInFirstDay = 60 - Integer.parseInt(entertime.substring(3, 5)); } else { HoursInFirstDay = (12 - (Integer.parseInt(entertime.substring(0, 2)) + 1)) + 12; MinutesInFirstDay = 60 - Integer.parseInt(entertime.substring(3, 5)); } } else if (entertime.substring(6, 8).equals(\"PM\")) { if (Integer.parseInt(entertime.substring(0, 2)) == 12) { HoursInFirstDay = 11; MinutesInFirstDay = 60 - Integer.parseInt(entertime.substring(3, 5)); } else { HoursInFirstDay = 12 - (Integer.parseInt(entertime.substring(0, 2)) + 1); MinutesInFirstDay = 60 - Integer.parseInt(entertime.substring(3, 5)); } } int HoursInLastDay = 0; int MinutesInLastDay = 0; if (exittime.substring(6, 8).equals(\"AM\")) { if (Integer.parseInt(exittime.substring(0, 2)) == 12) { HoursInLastDay = 0; MinutesInLastDay = Integer.parseInt(exittime.substring(3, 5)); } else { HoursInLastDay = Integer.parseInt(exittime.substring(0, 2)); MinutesInLastDay = Integer.parseInt(exittime.substring(3, 5)); } } else if (exittime.substring(6, 8).equals(\"PM\")) { if (Integer.parseInt(exittime.substring(0, 2)) == 12) { HoursInLastDay = 12; MinutesInLastDay = Integer.parseInt(exittime.substring(3, 5)); } else { HoursInLastDay = 12 + Integer.parseInt(exittime.substring(0, 2)); MinutesInLastDay = Integer.parseInt(exittime.substring(3, 5)); } } int hour = HourInTotalDays + HoursInFirstDay + HoursInLastDay; int minute = MinutesInFirstDay + MinutesInLastDay; if (minute >= 60) { minute = minute - 60; hour = hour + 1; } return new int[]{hour, minute}; } else { if ((lastDay - firstDay) >= 2) { int Days = (lastDay - (firstDay - 1)) - 2; int HourInTotalDays = Days * 24; int HoursInFirstDay = 0; int MinutesInFirstDay = 0; if (entertime.substring(6, 8).equals(\"AM\")) { if (Integer.parseInt(entertime.substring(0, 2)) == 12) { HoursInFirstDay = 11 + 12; MinutesInFirstDay = 60 - Integer.parseInt(entertime.substring(3, 5)); } else { HoursInFirstDay = (12 - (Integer.parseInt(entertime.substring(0, 2)) + 1)) + 12; MinutesInFirstDay = 60 - Integer.parseInt(entertime.substring(3, 5)); } } else if (entertime.substring(6, 8).equals(\"PM\")) { if (Integer.parseInt(entertime.substring(0, 2)) == 12) { HoursInFirstDay = 11; MinutesInFirstDay = 60 - Integer.parseInt(entertime.substring(3, 5)); } else { HoursInFirstDay = 12 - (Integer.parseInt(entertime.substring(0, 2)) + 1); MinutesInFirstDay = 60 - Integer.parseInt(entertime.substring(3, 5)); } } int HoursInLastDay = 0; int MinutesInLastDay = 0; if (exittime.substring(6, 8).equals(\"AM\")) { if (Integer.parseInt(exittime.substring(0, 2)) == 12) { HoursInLastDay = 0; MinutesInLastDay = Integer.parseInt(exittime.substring(3, 5)); } else { HoursInLastDay = Integer.parseInt(exittime.substring(0, 2)); MinutesInLastDay = Integer.parseInt(exittime.substring(3, 5)); } } else if (exittime.substring(6, 8).equals(\"PM\")) { if (Integer.parseInt(exittime.substring(0, 2)) == 12) { HoursInLastDay = 12; MinutesInLastDay = Integer.parseInt(exittime.substring(3, 5)); } else { HoursInLastDay = 12 + Integer.parseInt(exittime.substring(0, 2)); MinutesInLastDay = Integer.parseInt(exittime.substring(3, 5)); } } int hour = HourInTotalDays + HoursInFirstDay + HoursInLastDay; int minute = MinutesInFirstDay + MinutesInLastDay; if (minute >= 60) { minute = minute - 60; hour = hour + 1; } return new int[]{hour, minute}; } else if ((lastDay - firstDay) == 1) { int HoursInFirstDay = 0; int MinutesInFirstDay = 0; if (entertime.substring(6, 8).equals(\"AM\")) { if (Integer.parseInt(entertime.substring(0, 2)) == 12) { HoursInFirstDay = 11 + 12; MinutesInFirstDay = 60 - Integer.parseInt(entertime.substring(3, 5)); } else { HoursInFirstDay = (12 - (Integer.parseInt(entertime.substring(0, 2)) + 1)) + 12; MinutesInFirstDay = 60 - Integer.parseInt(entertime.substring(3, 5)); } } else if (entertime.substring(6, 8).equals(\"PM\")) { if (Integer.parseInt(entertime.substring(0, 2)) == 12) { HoursInFirstDay = 11; MinutesInFirstDay = 60 - Integer.parseInt(entertime.substring(3, 5)); } else { HoursInFirstDay = 12 - (Integer.parseInt(entertime.substring(0, 2)) + 1); MinutesInFirstDay = 60 - Integer.parseInt(entertime.substring(3, 5)); } } int HoursInLastDay = 0; int MinutesInLastDay = 0; if (exittime.substring(6, 8).equals(\"AM\")) { if (Integer.parseInt(exittime.substring(0, 2)) == 12) { HoursInLastDay = 0; MinutesInLastDay = Integer.parseInt(exittime.substring(3, 5)); } else { HoursInLastDay = Integer.parseInt(exittime.substring(0, 2)); MinutesInLastDay = Integer.parseInt(exittime.substring(3, 5)); } } else if (exittime.substring(6, 8).equals(\"PM\")) { if (Integer.parseInt(exittime.substring(0, 2)) == 12) { HoursInLastDay = 12; MinutesInLastDay = Integer.parseInt(exittime.substring(3, 5)); } else { HoursInLastDay = 12 + Integer.parseInt(exittime.substring(0, 2)); MinutesInLastDay = Integer.parseInt(exittime.substring(3, 5)); } } int hour = HoursInFirstDay + HoursInLastDay; int minute = MinutesInFirstDay + MinutesInLastDay; if (minute >= 60) { minute = minute - 60; hour = hour + 1; } return new int[]{hour, minute}; } else if ((lastDay - firstDay) == 0) { int ParkedHour = 0; int ParkedMinute = 0; int ExitHour = 0; int ExitMinute = 0; int hour = 0; int minute = 0; if (entertime.substring(6, 8).equals(\"AM\") && exittime.substring(6, 8).equals(\"AM\")) { if (Integer.parseInt(entertime.substring(0, 2)) == 12) { hour = Integer.parseInt(exittime.substring(0, 2)); minute = (60 - Integer.parseInt(entertime.substring(3, 5))) + Integer.parseInt(exittime.substring(3, 5)); } else { hour = Integer.parseInt(exittime.substring(0, 2)) - (Integer.parseInt(entertime.substring(0, 2)) + 1); minute = (60 - Integer.parseInt(entertime.substring(3, 5))) + Integer.parseInt(exittime.substring(3, 5)); } } else if (entertime.substring(6, 8).equals(\"PM\") && exittime.substring(6, 8).equals(\"PM\")) { if (Integer.parseInt(entertime.substring(0, 2)) == 12) { hour = Integer.parseInt(exittime.substring(0, 2)); minute = (60 - Integer.parseInt(entertime.substring(3, 5))) + Integer.parseInt(exittime.substring(3, 5)); } else { hour = Integer.parseInt(exittime.substring(0, 2)) - (Integer.parseInt(entertime.substring(0, 2)) + 1); minute = (60 - Integer.parseInt(entertime.substring(3, 5))) + Integer.parseInt(exittime.substring(3, 5)); } } else if (entertime.substring(6, 8).equals(\"AM\") && exittime.substring(6, 8).equals(\"PM\")) { if (Integer.parseInt(entertime.substring(0, 2)) == 12) { ParkedHour = 12; ParkedMinute = 60 - Integer.parseInt(entertime.substring(3, 5)); } else { ParkedHour = 12 - (Integer.parseInt(entertime.substring(0, 2)) + 1); ParkedMinute = 60 - Integer.parseInt(entertime.substring(3, 5)); } if (Integer.parseInt(exittime.substring(0, 2)) == 12) { ExitHour = 0; ExitMinute = Integer.parseInt(exittime.substring(3, 5)); } else { ExitHour = Integer.parseInt(exittime.substring(0, 2)); ExitMinute = Integer.parseInt(exittime.substring(3, 5)); } hour = ParkedHour + ExitHour; minute = ParkedMinute + ExitMinute; } if (minute >= 60) { minute = minute - 60; hour = hour + 1; } return new int[]{hour, minute}; } } return new int[] {}; } }"}]}}
{"project_id":92,"chunk_id":0,"content":{"main_file_path":"Parking_Lot-main\\ParkingSpot.java","main_file_content":"public class ParkingSpot{ int[] arr = new int[10]; public int SpotNum(){ int spot = 0; for (int i = 0; i < 10; i++){ if(arr[i] == 0) { spot = i + 1; arr[i] = i + 1; break; } } return spot; } public int si(){ int cheakspot = 0; for(int i = 0; i < 10; i++){ if(arr[i] != 0){ return 1; } else if(arr[i] == 0){ cheakspot++; } } return cheakspot; } public void sipe(){ System.out.print(\"\\nSpot status : \"); for(int i = 0; i < 10; i++){ System.out.print(arr[i]+\" \"); } System.out.println(); } public void FreeSpot (int num){ arr[num - 1] = 0; } }","dependencies":[]}}
{"project_id":92,"chunk_id":0,"content":{"main_file_path":"Parking_Lot-main\\ParkingTicket.java","main_file_content":"import java.time.format.DateTimeFormatter; public class ParkingTicket{ public String enterDate; public String enterTime; private long CardNumber ; public String CardType; public int SpotNumber; public Car car; public Car getAssignedCar(){ return car; } public void setAssignedCar(Car car){ this.car = car; } public String getDate(){ return enterDate; } public void setDate(String enterDate){ this.enterDate = enterDate; } public String getTime(){ return enterTime; } public void setTime(String enterTime){ this.enterTime = enterTime; } private long getCardNumber(){ return CardNumber; } public void setCardNumber(long CardNumber){ this.CardNumber = CardNumber; } private String getCardType(){ return CardType; } public void setCardType(String CardType){ this.CardType = CardType; } public int getSpotNumber(){ return SpotNumber; } public void setSpotNumber(int SpotNumber){ this.SpotNumber = SpotNumber; } }","dependencies":[{"file_path":"Parking_Lot-main\\Car.java","file_content":"public class Car{ public String NumberPlate; public String CarColor; public String CarType; public String getNumberPlate(){ return NumberPlate; } public void setNumberPlate(String NumberPlate){ this.NumberPlate = NumberPlate; } public String getCarColor(){ return CarColor; } public void setCarColor(String CarColor){ this.CarColor = CarColor; } public String getCarType(){ return CarType; } public void setCarType(String CarType){ this.CarType = CarType; } }"}]}}
{"project_id":92,"chunk_id":0,"content":{"main_file_path":"Parking_Lot-main\\Payment.java","main_file_content":"public class Payment{ float HourAmount = 30; float TotalAmountForHour = 0; float TotalAmountForMinute = 0; public float TotalAmount(int Hour, int Minute){ TotalAmountForHour = Hour * HourAmount; if (Minute < 60 && Minute >= 30) { TotalAmountForMinute = 20; } else if(Minute < 30 && Minute >= 15){ TotalAmountForMinute = 15; } else if(Minute < 15 && Minute >= 1){ TotalAmountForMinute = 10; } return (TotalAmountForHour+TotalAmountForMinute); } }","dependencies":[]}}
{"project_id":92,"chunk_id":0,"content":{"main_file_path":"Parking_Lot-main\\RandomInfo.java","main_file_content":"import java.util.Random; import java.time.LocalDate; import java.time.LocalTime; import java.time.format.DateTimeFormatter; public class RandomInfo{ Random rand = new Random(); String[] states = {\"MH\", \"GJ\", \"RJ\", \"DL\", \"MP\", \"UP\", \"KA\", \"JK\", \"LA\"}; String[] dist = {\"02\", \"27\", \"12\", \"19\", \"22\", \"08\", \"05\", \"26\", \"30\"}; String[] alpha = {\"AB\", \"CV\", \"RT\", \"ZX\", \"WE\", \"JK\", \"RL\", \"AQ\", \"PO\", \"DH\"}; String[] color = {\"Red\", \"Yellow\", \"Green\", \"white\", \"Brown\", \"Violet\", \"Pink\"}; String[] type = {\"Sedan\", \"van\", \"Minivan\", \"Bus\", \"Pickup-truck\", \"Hatchback\"}; public String Numberplate(){ int st = rand.nextInt(states.length); int di = rand.nextInt(dist.length); int al = rand.nextInt(alpha.length); return states[st]+\"-\"+dist[di]+\" \"+alpha[al]+\" \"+rand.nextInt((99 - 10)+ 1) + 10; } public String CarColor(){ int res = rand.nextInt(color.length); return color[res]; } public String CarType() { int typ = rand.nextInt(type.length); return type[typ]; } public String Time(){ LocalTime localTime = LocalTime.now(); DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"hh:mm a\"); String enterTime = localTime.format(dateTimeFormatter); return enterTime; } public String ExitTime(){ LocalTime localTime = LocalTime.now(); DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"hh:mm a\"); String exitTime = localTime.format(dateTimeFormatter); return exitTime; } public String Date(){ LocalDate mydate = LocalDate.now(); return mydate.toString(); } public String ExitDate(){ LocalDate date = LocalDate.now(); return date.toString(); } String[] cardtype = {\"Debit\", \"Credit\"}; public String CardType(){ int caty = rand.nextInt(cardtype.length); return cardtype[caty]; } public long CardNumber(){ return ((rand.nextLong() % 100000000000000L) + 5200000000000000L); } }","dependencies":[]}}
{"project_id":92,"chunk_id":0,"content":{"main_file_path":"Parking_Lot-main\\ScanTicket.java","main_file_content":"public class ScanTicket{ public int cheaknumber(String inputnumber, String storenumber){ int size1 = inputnumber.length(); int size2 = storenumber.length(); if (size1 != size2){ return 0; } else if(inputnumber.equals(storenumber)){ return 1; } return 0; } }","dependencies":[]}}
{"project_id":92,"chunk_id":0,"content":{"main_file_path":"Parking_Lot-main\\TotalTime.java","main_file_content":"public class TotalTime{ public static int[] CalculateTime(String enterdate, String exitdate, String entertime, String exittime){ int firstDay = Integer.parseInt(enterdate.substring(8, 10)); int lastDay = Integer.parseInt(exitdate.substring(8, 10)); int firstMonth = Integer.parseInt(enterdate.substring(5,7), 10); int lastMonth = Integer.parseInt(exitdate.substring(5,7)); int firstYear = Integer.parseInt(enterdate.substring(0,4)); if( firstMonth != lastMonth){ int daysInMonth ; if (firstMonth == 1 || firstMonth == 3 || firstMonth == 5 || firstMonth == 7 || firstMonth == 8 || firstMonth == 10 || firstMonth == 12 ) { daysInMonth = 31; } else { if (firstMonth == 2) { daysInMonth = (firstYear % 4 == 0) ? 29 : 28; } else { daysInMonth = 30; } } int Days = daysInMonth - firstDay; Days = Days + (lastDay - 1); int HourInTotalDays = Days * 24; int HoursInFirstDay = 0; int MinutesInFirstDay = 0; if (entertime.substring(6, 8).equals(\"AM\")) { if (Integer.parseInt(entertime.substring(0, 2)) == 12) { HoursInFirstDay = 11 + 12; MinutesInFirstDay = 60 - Integer.parseInt(entertime.substring(3, 5)); } else { HoursInFirstDay = (12 - (Integer.parseInt(entertime.substring(0, 2)) + 1)) + 12; MinutesInFirstDay = 60 - Integer.parseInt(entertime.substring(3, 5)); } } else if (entertime.substring(6, 8).equals(\"PM\")) { if (Integer.parseInt(entertime.substring(0, 2)) == 12) { HoursInFirstDay = 11; MinutesInFirstDay = 60 - Integer.parseInt(entertime.substring(3, 5)); } else { HoursInFirstDay = 12 - (Integer.parseInt(entertime.substring(0, 2)) + 1); MinutesInFirstDay = 60 - Integer.parseInt(entertime.substring(3, 5)); } } int HoursInLastDay = 0; int MinutesInLastDay = 0; if (exittime.substring(6, 8).equals(\"AM\")) { if (Integer.parseInt(exittime.substring(0, 2)) == 12) { HoursInLastDay = 0; MinutesInLastDay = Integer.parseInt(exittime.substring(3, 5)); } else { HoursInLastDay = Integer.parseInt(exittime.substring(0, 2)); MinutesInLastDay = Integer.parseInt(exittime.substring(3, 5)); } } else if (exittime.substring(6, 8).equals(\"PM\")) { if (Integer.parseInt(exittime.substring(0, 2)) == 12) { HoursInLastDay = 12; MinutesInLastDay = Integer.parseInt(exittime.substring(3, 5)); } else { HoursInLastDay = 12 + Integer.parseInt(exittime.substring(0, 2)); MinutesInLastDay = Integer.parseInt(exittime.substring(3, 5)); } } int hour = HourInTotalDays + HoursInFirstDay + HoursInLastDay; int minute = MinutesInFirstDay + MinutesInLastDay; if (minute >= 60) { minute = minute - 60; hour = hour + 1; } return new int[]{hour, minute}; } else { if ((lastDay - firstDay) >= 2) { int Days = (lastDay - (firstDay - 1)) - 2; int HourInTotalDays = Days * 24; int HoursInFirstDay = 0; int MinutesInFirstDay = 0; if (entertime.substring(6, 8).equals(\"AM\")) { if (Integer.parseInt(entertime.substring(0, 2)) == 12) { HoursInFirstDay = 11 + 12; MinutesInFirstDay = 60 - Integer.parseInt(entertime.substring(3, 5)); } else { HoursInFirstDay = (12 - (Integer.parseInt(entertime.substring(0, 2)) + 1)) + 12; MinutesInFirstDay = 60 - Integer.parseInt(entertime.substring(3, 5)); } } else if (entertime.substring(6, 8).equals(\"PM\")) { if (Integer.parseInt(entertime.substring(0, 2)) == 12) { HoursInFirstDay = 11; MinutesInFirstDay = 60 - Integer.parseInt(entertime.substring(3, 5)); } else { HoursInFirstDay = 12 - (Integer.parseInt(entertime.substring(0, 2)) + 1); MinutesInFirstDay = 60 - Integer.parseInt(entertime.substring(3, 5)); } } int HoursInLastDay = 0; int MinutesInLastDay = 0; if (exittime.substring(6, 8).equals(\"AM\")) { if (Integer.parseInt(exittime.substring(0, 2)) == 12) { HoursInLastDay = 0; MinutesInLastDay = Integer.parseInt(exittime.substring(3, 5)); } else { HoursInLastDay = Integer.parseInt(exittime.substring(0, 2)); MinutesInLastDay = Integer.parseInt(exittime.substring(3, 5)); } } else if (exittime.substring(6, 8).equals(\"PM\")) { if (Integer.parseInt(exittime.substring(0, 2)) == 12) { HoursInLastDay = 12; MinutesInLastDay = Integer.parseInt(exittime.substring(3, 5)); } else { HoursInLastDay = 12 + Integer.parseInt(exittime.substring(0, 2)); MinutesInLastDay = Integer.parseInt(exittime.substring(3, 5)); } } int hour = HourInTotalDays + HoursInFirstDay + HoursInLastDay; int minute = MinutesInFirstDay + MinutesInLastDay; if (minute >= 60) { minute = minute - 60; hour = hour + 1; } return new int[]{hour, minute}; } else if ((lastDay - firstDay) == 1) { int HoursInFirstDay = 0; int MinutesInFirstDay = 0; if (entertime.substring(6, 8).equals(\"AM\")) { if (Integer.parseInt(entertime.substring(0, 2)) == 12) { HoursInFirstDay = 11 + 12; MinutesInFirstDay = 60 - Integer.parseInt(entertime.substring(3, 5)); } else { HoursInFirstDay = (12 - (Integer.parseInt(entertime.substring(0, 2)) + 1)) + 12; MinutesInFirstDay = 60 - Integer.parseInt(entertime.substring(3, 5)); } } else if (entertime.substring(6, 8).equals(\"PM\")) { if (Integer.parseInt(entertime.substring(0, 2)) == 12) { HoursInFirstDay = 11; MinutesInFirstDay = 60 - Integer.parseInt(entertime.substring(3, 5)); } else { HoursInFirstDay = 12 - (Integer.parseInt(entertime.substring(0, 2)) + 1); MinutesInFirstDay = 60 - Integer.parseInt(entertime.substring(3, 5)); } } int HoursInLastDay = 0; int MinutesInLastDay = 0; if (exittime.substring(6, 8).equals(\"AM\")) { if (Integer.parseInt(exittime.substring(0, 2)) == 12) { HoursInLastDay = 0; MinutesInLastDay = Integer.parseInt(exittime.substring(3, 5)); } else { HoursInLastDay = Integer.parseInt(exittime.substring(0, 2)); MinutesInLastDay = Integer.parseInt(exittime.substring(3, 5)); } } else if (exittime.substring(6, 8).equals(\"PM\")) { if (Integer.parseInt(exittime.substring(0, 2)) == 12) { HoursInLastDay = 12; MinutesInLastDay = Integer.parseInt(exittime.substring(3, 5)); } else { HoursInLastDay = 12 + Integer.parseInt(exittime.substring(0, 2)); MinutesInLastDay = Integer.parseInt(exittime.substring(3, 5)); } } int hour = HoursInFirstDay + HoursInLastDay; int minute = MinutesInFirstDay + MinutesInLastDay; if (minute >= 60) { minute = minute - 60; hour = hour + 1; } return new int[]{hour, minute}; } else if ((lastDay - firstDay) == 0) { int ParkedHour = 0; int ParkedMinute = 0; int ExitHour = 0; int ExitMinute = 0; int hour = 0; int minute = 0; if (entertime.substring(6, 8).equals(\"AM\") && exittime.substring(6, 8).equals(\"AM\")) { if (Integer.parseInt(entertime.substring(0, 2)) == 12) { hour = Integer.parseInt(exittime.substring(0, 2)); minute = (60 - Integer.parseInt(entertime.substring(3, 5))) + Integer.parseInt(exittime.substring(3, 5)); } else { hour = Integer.parseInt(exittime.substring(0, 2)) - (Integer.parseInt(entertime.substring(0, 2)) + 1); minute = (60 - Integer.parseInt(entertime.substring(3, 5))) + Integer.parseInt(exittime.substring(3, 5)); } } else if (entertime.substring(6, 8).equals(\"PM\") && exittime.substring(6, 8).equals(\"PM\")) { if (Integer.parseInt(entertime.substring(0, 2)) == 12) { hour = Integer.parseInt(exittime.substring(0, 2)); minute = (60 - Integer.parseInt(entertime.substring(3, 5))) + Integer.parseInt(exittime.substring(3, 5)); } else { hour = Integer.parseInt(exittime.substring(0, 2)) - (Integer.parseInt(entertime.substring(0, 2)) + 1); minute = (60 - Integer.parseInt(entertime.substring(3, 5))) + Integer.parseInt(exittime.substring(3, 5)); } } else if (entertime.substring(6, 8).equals(\"AM\") && exittime.substring(6, 8).equals(\"PM\")) { if (Integer.parseInt(entertime.substring(0, 2)) == 12) { ParkedHour = 12; ParkedMinute = 60 - Integer.parseInt(entertime.substring(3, 5)); } else { ParkedHour = 12 - (Integer.parseInt(entertime.substring(0, 2)) + 1); ParkedMinute = 60 - Integer.parseInt(entertime.substring(3, 5)); } if (Integer.parseInt(exittime.substring(0, 2)) == 12) { ExitHour = 0; ExitMinute = Integer.parseInt(exittime.substring(3, 5)); } else { ExitHour = Integer.parseInt(exittime.substring(0, 2)); ExitMinute = Integer.parseInt(exittime.substring(3, 5)); } hour = ParkedHour + ExitHour; minute = ParkedMinute + ExitMinute; } if (minute >= 60) { minute = minute - 60; hour = hour + 1; } return new int[]{hour, minute}; } } return new int[] {}; } }","dependencies":[]}}
{"project_id":94,"chunk_id":0,"content":{"main_file_path":"Patience_game\\PatienceGame.java","main_file_content":"import java.util.ArrayList; import java.util.Collections; import java.util.List; import java.util.Scanner; import java.util.Stack; public class PatienceGame { private static final int NUM_LANES = 7; private static final int NUM_SUITS = 4; private static final int NUM_CARDS_PER_SUIT = 13; private Stack<Card> drawPile = new Stack<>(); private List<Stack<Card>> lanes = new ArrayList<>(NUM_LANES); private List<Stack<Card>> suitPiles = new ArrayList<>(NUM_SUITS); private Stack<Card> uncoveredPile = new Stack<>(); private int score = 0; private int moves = 0; public PatienceGame() { initializeGame(); } private void moveUncoveredCardToSuit(char suitLabel) { int suitIndex = getLabelIndex(suitLabel); if (suitIndex >= NUM_LANES && suitIndex < NUM_LANES + NUM_SUITS) { if (uncoveredPile.isEmpty()) { System.out.println(\"Uncovered pile is empty.\"); } else { Card card = uncoveredPile.peek(); if (suitPiles.get(suitIndex - NUM_LANES).isEmpty()) { if (card.getValue() == 1) { suitPiles.get(suitIndex - NUM_LANES).push(uncoveredPile.pop()); calculateScore(card, 'P', suitLabel); moves++; } else { System.out.println(\"Invalid move. Only Aces can start a new pile.\"); } } else { Card topCard = suitPiles.get(suitIndex - NUM_LANES).peek(); if ( topCard.isOneValueHigher(card) && topCard.getSuit() == card.getSuit() ) { suitPiles.get(suitIndex - NUM_LANES).push(uncoveredPile.pop()); calculateScore(card, 'P', suitLabel); moves++; } else { System.out.println(\"Invalid move. Check the destination pile.\"); } } } } else { System.out.println(\"Invalid command. Cannot move to a lane.\"); } } private void initializeGame() { List<Card> deck = new ArrayList<>(); for (int suit = 0; suit < NUM_SUITS; suit++) { for (int value = 1; value <= NUM_CARDS_PER_SUIT; value++) { deck.add(new Card(suit, value)); } } Collections.shuffle(deck); drawPile.addAll(deck); for (int i = 0; i < NUM_LANES; i++) { lanes.add(new Stack<>()); } for (int i = 0; i < NUM_SUITS; i++) { suitPiles.add(new Stack<>()); } } public void playGame() { Scanner scanner = new Scanner(System.in); while (true) { displayGameState(); System.out.print(\"Enter a command (Q, D, or move): \"); String command = scanner.nextLine().toUpperCase(); if (command.equals(\"Q\")) { System.out.println(\"Game Over. Final Score: \" + score); break; } else if (command.equals(\"D\")) { drawCard(); } else if (command.length() == 2) { moveCard(command); } else if (command.length() == 3) { moveMultipleCards(command); } else { System.out.println(\"Invalid command. Please try again.\"); } if (isGameOver()) { System.out.println(\"Congratulations! You won the game!\"); break; } } scanner.close(); } private void displayGameState() { String[] ranks = {\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"}; String[] suits = {\"H\", \"D\", \"S\", \"C\"}; for (String suit : suits) { for (String rank : ranks) { String card = rank + suit; System.out.print(card + \" \"); } System.out.println(); } System.out.println(\"Score: \" + score); System.out.println(\"Moves: \" + moves); System.out.println(\"Draw Pile: \" + drawPile.size() + \" cards\"); System.out.println(\"Uncovered Pile: \" + uncoveredPile.size() + \" cards\"); for (int i = 0; i < NUM_LANES; i++) { System.out.println( \"Lane \" + (i + 1) + \": \" + lanes.get(i).size() + \" cards\" ); } for (int i = 0; i < NUM_SUITS; i++) { System.out.println( \"Suit \" + Card.SUIT_LABELS[i] + \": \" + suitPiles.get(i).size() + \" cards\" ); } } private void drawCard() { if (!drawPile.isEmpty()) { Card card = drawPile.pop(); uncoveredPile.push(card); moves++; } else { System.out.println(\"Draw pile is empty. Cannot draw a card.\"); } } private void moveCard(String command) { char fromLabel = command.charAt(0); char toLabel = command.charAt(1); int fromIndex = getLabelIndex(fromLabel); int toIndex = getLabelIndex(toLabel); if (fromIndex != -1 && toIndex != -1) { if (fromLabel == 'P') { moveUncoveredCardToSuit(toLabel); } else if (fromLabel >= '1' && fromLabel <= '7') { Card card = lanes.get(fromIndex).peek(); if (canMoveCard(card, toIndex)) { lanes.get(toIndex).push(lanes.get(fromIndex).pop()); calculateScore(card, fromLabel, toLabel); moves++; } else { System.out.println(\"Invalid move. Check the destination pile.\"); } } } else { System.out.println(\"Invalid labels.\"); } } private void moveMultipleCards(String command) { char fromLabel = command.charAt(0); char toLabel = command.charAt(1); int number = Character.getNumericValue(command.charAt(2)); int fromIndex = getLabelIndex(fromLabel); int toIndex = getLabelIndex(toLabel); if (fromIndex != -1 && toIndex != -1) { if (lanes.get(fromIndex).size() >= number) { List<Card> cardsToMove = new ArrayList<>(); for (int i = 0; i < number; i++) { cardsToMove.add( lanes.get(fromIndex).get(lanes.get(fromIndex).size() - 1 - i) ); } if (canMoveCards(cardsToMove, toIndex)) { for (Card card : cardsToMove) { lanes.get(toIndex).push(lanes.get(fromIndex).pop()); calculateScore(card, fromLabel, toLabel); } moves++; } else { System.out.println(\"Invalid move. Check the destination pile.\"); } } else { System.out.println(\"Not enough cards in the source lane.\"); } } else { System.out.println(\"Invalid labels.\"); } } private int getLabelIndex(char label) { if (label == 'P') { return NUM_LANES; } else if (label >= '1' && label <= '7') { return Character.getNumericValue(label) - 1; } else if (label >= 'D' && label <= 'S') { return NUM_LANES + label - 'D'; } return -1; } private boolean canMoveCard(Card card, int toIndex) { if (lanes.get(toIndex).isEmpty()) { return card.getValue() == 13; } else { Card topCard = lanes.get(toIndex).peek(); return topCard.isOneValueHigher(card) && topCard.isOppositeColor(card); } } private boolean canMoveCards(List<Card> cards, int toIndex) { if (lanes.get(toIndex).isEmpty()) { return cards.get(0).getValue() == 13; } else { Card topCard = lanes.get(toIndex).peek(); return ( topCard.isOneValueHigher(cards.get(cards.size() - 1)) && topCard.isOppositeColor(cards.get(cards.size() - 1)) ); } } private void calculateScore(Card card, char fromLabel, char toLabel) { if (fromLabel == 'P' && (toLabel >= 'D' && toLabel <= 'S')) { score += 10; } else if ( fromLabel >= '1' && fromLabel <= '7' && (toLabel >= 'D' && toLabel <= 'S') ) { score += 20; } else if ( (fromLabel >= '1' && fromLabel <= '7') && (toLabel >= '1' && toLabel <= '7') ) { score += 5; } } private boolean isGameOver() { for (Stack<Card> suitPile : suitPiles) { if (suitPile.size() < NUM_CARDS_PER_SUIT) { return false; } } return true; } public static void main(String[] args) { PatienceGame game = new PatienceGame(); game.playGame(); } } class Card { public static final String[] SUIT_LABELS = {\"D\", \"H\", \"C\", \"S\"}; private int suit; private int value; public Card(int suit, int value) { this.suit = suit; this.value = value; } public int getSuit() { return suit; } public int getValue() { return value; } public char getLabel() { return SUIT_LABELS[suit].charAt(0); } public boolean isOneValueHigher(Card other) { return this.value - other.value == 1; } public boolean isOppositeColor(Card other) { return (this.suit < 2 && other.suit >= 2) || (this.suit >= 2 && other.suit < 2); } }","dependencies":[]}}
{"project_id":95,"chunk_id":0,"content":{"main_file_path":"PerformanceDemo-master\\app\\src\\androidTest\\java\\com\\udinic\\perfdemo\\ApplicationTest.java","main_file_content":"package com.udinic.perfdemo; import android.app.Application; import android.test.ApplicationTestCase; public class ApplicationTest extends ApplicationTestCase<Application> { public ApplicationTest() { super(Application.class); } }","dependencies":[]}}
{"project_id":95,"chunk_id":0,"content":{"main_file_path":"PerformanceDemo-master\\app\\src\\main\\java\\com\\udinic\\perfdemo\\BaseActivity.java","main_file_content":"package com.udinic.perfdemo; import android.os.Bundle; import android.support.v7.app.AppCompatActivity; import com.udinic.perfdemo.util.ViewServer; public class BaseActivity extends AppCompatActivity{ @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); ViewServer.get(this).addWindow(this); } @Override protected void onDestroy() { super.onDestroy(); ViewServer.get(this).removeWindow(this); } @Override protected void onResume() { super.onResume(); ViewServer.get(this).setFocusedWindow(this); } }","dependencies":[{"file_path":"PerformanceDemo-master\\app\\src\\main\\java\\com\\udinic\\perfdemo\\util\\ViewServer.java","file_content":"package com.udinic.perfdemo.util; import java.io.BufferedReader; import java.io.BufferedWriter; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStream; import java.io.OutputStreamWriter; import java.lang.reflect.Method; import java.net.InetAddress; import java.net.ServerSocket; import java.net.Socket; import java.util.HashMap; import java.util.List; import java.util.Map.Entry; import java.util.concurrent.CopyOnWriteArrayList; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.locks.ReentrantReadWriteLock; import android.app.Activity; import android.content.Context; import android.content.pm.ApplicationInfo; import android.os.Build; import android.text.TextUtils; import android.util.Log; import android.view.View; import android.view.ViewDebug; public class ViewServer implements Runnable { private static final int VIEW_SERVER_DEFAULT_PORT = 4939; private static final int VIEW_SERVER_MAX_CONNECTIONS = 10; private static final String BUILD_TYPE_USER = \"user\"; private static final String LOG_TAG = \"ViewServer\"; private static final String VALUE_PROTOCOL_VERSION = \"4\"; private static final String VALUE_SERVER_VERSION = \"4\"; private static final String COMMAND_PROTOCOL_VERSION = \"PROTOCOL\"; private static final String COMMAND_SERVER_VERSION = \"SERVER\"; private static final String COMMAND_WINDOW_MANAGER_LIST = \"LIST\"; private static final String COMMAND_WINDOW_MANAGER_AUTOLIST = \"AUTOLIST\"; private static final String COMMAND_WINDOW_MANAGER_GET_FOCUS = \"GET_FOCUS\"; private ServerSocket mServer; private final int mPort; private Thread mThread; private ExecutorService mThreadPool; private final List<WindowListener> mListeners = new CopyOnWriteArrayList<ViewServer.WindowListener>(); private final HashMap<View, String> mWindows = new HashMap<View, String>(); private final ReentrantReadWriteLock mWindowsLock = new ReentrantReadWriteLock(); private View mFocusedWindow; private final ReentrantReadWriteLock mFocusLock = new ReentrantReadWriteLock(); private static ViewServer sServer; public static ViewServer get(Context context) { ApplicationInfo info = context.getApplicationInfo(); if (BUILD_TYPE_USER.equals(Build.TYPE) && (info.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0) { if (sServer == null) { sServer = new ViewServer(ViewServer.VIEW_SERVER_DEFAULT_PORT); } if (!sServer.isRunning()) { try { sServer.start(); } catch (IOException e) { Log.d(LOG_TAG, \"Error:\", e); } } } else { sServer = new NoopViewServer(); } return sServer; } private ViewServer() { mPort = -1; } private ViewServer(int port) { mPort = port; } public boolean start() throws IOException { if (mThread != null) { return false; } mThread = new Thread(this, \"Local View Server [port=\" + mPort + \"]\"); mThreadPool = Executors.newFixedThreadPool(VIEW_SERVER_MAX_CONNECTIONS); mThread.start(); return true; } public boolean stop() { if (mThread != null) { mThread.interrupt(); if (mThreadPool != null) { try { mThreadPool.shutdownNow(); } catch (SecurityException e) { Log.w(LOG_TAG, \"Could not stop all view server threads\"); } } mThreadPool = null; mThread = null; try { mServer.close(); mServer = null; return true; } catch (IOException e) { Log.w(LOG_TAG, \"Could not close the view server\"); } } mWindowsLock.writeLock().lock(); try { mWindows.clear(); } finally { mWindowsLock.writeLock().unlock(); } mFocusLock.writeLock().lock(); try { mFocusedWindow = null; } finally { mFocusLock.writeLock().unlock(); } return false; } public boolean isRunning() { return mThread != null && mThread.isAlive(); } public void addWindow(Activity activity) { String name = activity.getTitle().toString(); if (TextUtils.isEmpty(name)) { name = activity.getClass().getCanonicalName() + \"/0x\" + System.identityHashCode(activity); } else { name += \"(\" + activity.getClass().getCanonicalName() + \")\"; } addWindow(activity.getWindow().getDecorView(), name); } public void removeWindow(Activity activity) { removeWindow(activity.getWindow().getDecorView()); } public void addWindow(View view, String name) { mWindowsLock.writeLock().lock(); try { mWindows.put(view.getRootView(), name); } finally { mWindowsLock.writeLock().unlock(); } fireWindowsChangedEvent(); } public void removeWindow(View view) { View rootView; mWindowsLock.writeLock().lock(); try { rootView = view.getRootView(); mWindows.remove(rootView); } finally { mWindowsLock.writeLock().unlock(); } mFocusLock.writeLock().lock(); try { if (mFocusedWindow == rootView) { mFocusedWindow = null; } } finally { mFocusLock.writeLock().unlock(); } fireWindowsChangedEvent(); } public void setFocusedWindow(Activity activity) { setFocusedWindow(activity.getWindow().getDecorView()); } public void setFocusedWindow(View view) { mFocusLock.writeLock().lock(); try { mFocusedWindow = view == null ? null : view.getRootView(); } finally { mFocusLock.writeLock().unlock(); } fireFocusChangedEvent(); } public void run() { try { mServer = new ServerSocket(mPort, VIEW_SERVER_MAX_CONNECTIONS, InetAddress.getLocalHost()); } catch (Exception e) { Log.w(LOG_TAG, \"Starting ServerSocket error: \", e); } while (mServer != null && Thread.currentThread() == mThread) { try { Socket client = mServer.accept(); if (mThreadPool != null) { mThreadPool.submit(new ViewServerWorker(client)); } else { try { client.close(); } catch (IOException e) { e.printStackTrace(); } } } catch (Exception e) { Log.w(LOG_TAG, \"Connection error: \", e); } } } private static boolean writeValue(Socket client, String value) { boolean result; BufferedWriter out = null; try { OutputStream clientStream = client.getOutputStream(); out = new BufferedWriter(new OutputStreamWriter(clientStream), 8 * 1024); out.write(value); out.write(\"\\n\"); out.flush(); result = true; } catch (Exception e) { result = false; } finally { if (out != null) { try { out.close(); } catch (IOException e) { result = false; } } } return result; } private void fireWindowsChangedEvent() { for (WindowListener listener : mListeners) { listener.windowsChanged(); } } private void fireFocusChangedEvent() { for (WindowListener listener : mListeners) { listener.focusChanged(); } } private void addWindowListener(WindowListener listener) { if (!mListeners.contains(listener)) { mListeners.add(listener); } } private void removeWindowListener(WindowListener listener) { mListeners.remove(listener); } private interface WindowListener { void windowsChanged(); void focusChanged(); } private static class UncloseableOutputStream extends OutputStream { private final OutputStream mStream; UncloseableOutputStream(OutputStream stream) { mStream = stream; } public void close() throws IOException { } public boolean equals(Object o) { return mStream.equals(o); } public void flush() throws IOException { mStream.flush(); } public int hashCode() { return mStream.hashCode(); } public String toString() { return mStream.toString(); } public void write(byte[] buffer, int offset, int count) throws IOException { mStream.write(buffer, offset, count); } public void write(byte[] buffer) throws IOException { mStream.write(buffer); } public void write(int oneByte) throws IOException { mStream.write(oneByte); } } private static class NoopViewServer extends ViewServer { private NoopViewServer() { } @Override public boolean start() throws IOException { return false; } @Override public boolean stop() { return false; } @Override public boolean isRunning() { return false; } @Override public void addWindow(Activity activity) { } @Override public void removeWindow(Activity activity) { } @Override public void addWindow(View view, String name) { } @Override public void removeWindow(View view) { } @Override public void setFocusedWindow(Activity activity) { } @Override public void setFocusedWindow(View view) { } @Override public void run() { } } private class ViewServerWorker implements Runnable, WindowListener { private Socket mClient; private boolean mNeedWindowListUpdate; private boolean mNeedFocusedWindowUpdate; private final Object[] mLock = new Object[0]; public ViewServerWorker(Socket client) { mClient = client; mNeedWindowListUpdate = false; mNeedFocusedWindowUpdate = false; } public void run() { BufferedReader in = null; try { in = new BufferedReader(new InputStreamReader(mClient.getInputStream()), 1024); final String request = in.readLine(); String command; String parameters; int index = request.indexOf(' '); if (index == -1) { command = request; parameters = \"\"; } else { command = request.substring(0, index); parameters = request.substring(index + 1); } boolean result; if (COMMAND_PROTOCOL_VERSION.equalsIgnoreCase(command)) { result = writeValue(mClient, VALUE_PROTOCOL_VERSION); } else if (COMMAND_SERVER_VERSION.equalsIgnoreCase(command)) { result = writeValue(mClient, VALUE_SERVER_VERSION); } else if (COMMAND_WINDOW_MANAGER_LIST.equalsIgnoreCase(command)) { result = listWindows(mClient); } else if (COMMAND_WINDOW_MANAGER_GET_FOCUS.equalsIgnoreCase(command)) { result = getFocusedWindow(mClient); } else if (COMMAND_WINDOW_MANAGER_AUTOLIST.equalsIgnoreCase(command)) { result = windowManagerAutolistLoop(); } else { result = windowCommand(mClient, command, parameters); } if (!result) { Log.w(LOG_TAG, \"An error occurred with the command: \" + command); } } catch(IOException e) { Log.w(LOG_TAG, \"Connection error: \", e); } finally { if (in != null) { try { in.close(); } catch (IOException e) { e.printStackTrace(); } } if (mClient != null) { try { mClient.close(); } catch (IOException e) { e.printStackTrace(); } } } } private boolean windowCommand(Socket client, String command, String parameters) { boolean success = true; BufferedWriter out = null; try { int index = parameters.indexOf(' '); if (index == -1) { index = parameters.length(); } final String code = parameters.substring(0, index); int hashCode = (int) Long.parseLong(code, 16); if (index < parameters.length()) { parameters = parameters.substring(index + 1); } else { parameters = \"\"; } final View window = findWindow(hashCode); if (window == null) { return false; } final Method dispatch = ViewDebug.class.getDeclaredMethod(\"dispatchCommand\", View.class, String.class, String.class, OutputStream.class); dispatch.setAccessible(true); dispatch.invoke(null, window, command, parameters, new UncloseableOutputStream(client.getOutputStream())); if (!client.isOutputShutdown()) { out = new BufferedWriter(new OutputStreamWriter(client.getOutputStream())); out.write(\"DONE\\n\"); out.flush(); } } catch (Exception e) { Log.w(LOG_TAG, \"Could not send command \" + command + \" with parameters \" + parameters, e); success = false; } finally { if (out != null) { try { out.close(); } catch (IOException e) { success = false; } } } return success; } private View findWindow(int hashCode) { if (hashCode == -1) { View window = null; mWindowsLock.readLock().lock(); try { window = mFocusedWindow; } finally { mWindowsLock.readLock().unlock(); } return window; } mWindowsLock.readLock().lock(); try { for (Entry<View, String> entry : mWindows.entrySet()) { if (System.identityHashCode(entry.getKey()) == hashCode) { return entry.getKey(); } } } finally { mWindowsLock.readLock().unlock(); } return null; } private boolean listWindows(Socket client) { boolean result = true; BufferedWriter out = null; try { mWindowsLock.readLock().lock(); OutputStream clientStream = client.getOutputStream(); out = new BufferedWriter(new OutputStreamWriter(clientStream), 8 * 1024); for (Entry<View, String> entry : mWindows.entrySet()) { out.write(Integer.toHexString(System.identityHashCode(entry.getKey()))); out.write(' '); out.append(entry.getValue()); out.write('\\n'); } out.write(\"DONE.\\n\"); out.flush(); } catch (Exception e) { result = false; } finally { mWindowsLock.readLock().unlock(); if (out != null) { try { out.close(); } catch (IOException e) { result = false; } } } return result; } private boolean getFocusedWindow(Socket client) { boolean result = true; String focusName = null; BufferedWriter out = null; try { OutputStream clientStream = client.getOutputStream(); out = new BufferedWriter(new OutputStreamWriter(clientStream), 8 * 1024); View focusedWindow = null; mFocusLock.readLock().lock(); try { focusedWindow = mFocusedWindow; } finally { mFocusLock.readLock().unlock(); } if (focusedWindow != null) { mWindowsLock.readLock().lock(); try { focusName = mWindows.get(mFocusedWindow); } finally { mWindowsLock.readLock().unlock(); } out.write(Integer.toHexString(System.identityHashCode(focusedWindow))); out.write(' '); out.append(focusName); } out.write('\\n'); out.flush(); } catch (Exception e) { result = false; } finally { if (out != null) { try { out.close(); } catch (IOException e) { result = false; } } } return result; } public void windowsChanged() { synchronized (mLock) { mNeedWindowListUpdate = true; mLock.notifyAll(); } } public void focusChanged() { synchronized (mLock) { mNeedFocusedWindowUpdate = true; mLock.notifyAll(); } } private boolean windowManagerAutolistLoop() { addWindowListener(this); BufferedWriter out = null; try { out = new BufferedWriter(new OutputStreamWriter(mClient.getOutputStream())); while (!Thread.interrupted()) { boolean needWindowListUpdate = false; boolean needFocusedWindowUpdate = false; synchronized (mLock) { while (!mNeedWindowListUpdate && !mNeedFocusedWindowUpdate) { mLock.wait(); } if (mNeedWindowListUpdate) { mNeedWindowListUpdate = false; needWindowListUpdate = true; } if (mNeedFocusedWindowUpdate) { mNeedFocusedWindowUpdate = false; needFocusedWindowUpdate = true; } } if (needWindowListUpdate) { out.write(\"LIST UPDATE\\n\"); out.flush(); } if (needFocusedWindowUpdate) { out.write(\"FOCUS UPDATE\\n\"); out.flush(); } } } catch (Exception e) { Log.w(LOG_TAG, \"Connection error: \", e); } finally { if (out != null) { try { out.close(); } catch (IOException e) { } } removeWindowListener(this); } return true; } } }"}]}}
{"project_id":95,"chunk_id":0,"content":{"main_file_path":"PerformanceDemo-master\\app\\src\\main\\java\\com\\udinic\\perfdemo\\BusyUIThreadActivity.java","main_file_content":"package com.udinic.perfdemo; import android.animation.ObjectAnimator; import android.os.Bundle; import android.util.Log; import android.view.Menu; import android.view.MenuItem; import android.view.View; import android.view.animation.LinearInterpolator; import android.widget.Button; import android.widget.ImageView; public class BusyUIThreadActivity extends BaseActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_busy_ui_thread); Button btn1 = (Button) findViewById(R.id.btn1); btn1.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { int n = 30; Log.d(\"PerfDemo\", \"Start Fib(\"+n+\")\"); long res = fib(n); Log.d(\"PerfDemo\", \"Fib(\"+n+\") = \" + res); } }); } @Override protected void onResume() { super.onResume(); ImageView iv = (ImageView) findViewById(R.id.shape); ObjectAnimator anim = ObjectAnimator.ofFloat(iv, View.ROTATION, 0f, 360f); anim.setDuration(1000); anim.setInterpolator(new LinearInterpolator()); anim.setRepeatMode(ObjectAnimator.RESTART); anim.setRepeatCount(ObjectAnimator.INFINITE); anim.start(); } @Override public boolean onCreateOptionsMenu(Menu menu) { getMenuInflater().inflate(R.menu.menu_busy_procs, menu); return true; } @Override public boolean onOptionsItemSelected(MenuItem item) { int id = item.getItemId(); if (id == R.id.action_settings) { return true; } return super.onOptionsItemSelected(item); } public static long fib(int n) { if (n <= 1) return n; else return fib(n-1) + fib(n-2); } }","dependencies":[{"file_path":"PerformanceDemo-master\\app\\src\\main\\java\\com\\udinic\\perfdemo\\BaseActivity.java","file_content":"package com.udinic.perfdemo; import android.os.Bundle; import android.support.v7.app.AppCompatActivity; import com.udinic.perfdemo.util.ViewServer; public class BaseActivity extends AppCompatActivity{ @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); ViewServer.get(this).addWindow(this); } @Override protected void onDestroy() { super.onDestroy(); ViewServer.get(this).removeWindow(this); } @Override protected void onResume() { super.onResume(); ViewServer.get(this).setFocusedWindow(this); } }"}]}}
{"project_id":95,"chunk_id":0,"content":{"main_file_path":"PerformanceDemo-master\\app\\src\\main\\java\\com\\udinic\\perfdemo\\HeavyAnimationActivity.java","main_file_content":"package com.udinic.perfdemo; import android.animation.ValueAnimator; import android.os.Bundle; import android.view.Menu; import android.view.MenuItem; import android.view.View; import android.view.ViewPropertyAnimator; import android.widget.Button; import android.widget.CheckBox; import android.widget.CompoundButton; public class HeavyAnimationActivity extends BaseActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_heavy_animation); final CheckBox chkHwLayer = (CheckBox) findViewById(R.id.chkUseHwLayer); final CheckBox chkAlpha = (CheckBox) findViewById(R.id.chkUseAlpha); final View alphaLayout = findViewById(R.id.alphaLayout); chkAlpha.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() { @Override public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) { alphaLayout.setAlpha(isChecked ? 0.5f : 1f); } }); findViewById(R.id.btnStart).setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { final View view = findViewById(R.id.udinic); ViewPropertyAnimator animator = view.animate() .translationX(240f) .translationY(-600) .alpha(0.2f) .rotation(3000f) .scaleX(2f) .setDuration(8000) .setUpdateListener(new ValueAnimator.AnimatorUpdateListener() { @Override public void onAnimationUpdate(ValueAnimator animation) { ((Button) view.findViewById(R.id.btn2)) .setText(\"a\" + animation.getAnimatedFraction() * 100); } }); if (chkHwLayer.isChecked()) animator.withLayer(); animator.start(); } }); } @Override public boolean onCreateOptionsMenu(Menu menu) { getMenuInflater().inflate(R.menu.menu_animation, menu); return true; } @Override public boolean onOptionsItemSelected(MenuItem item) { int id = item.getItemId(); if (id == R.id.action_settings) { return true; } return super.onOptionsItemSelected(item); } }","dependencies":[{"file_path":"PerformanceDemo-master\\app\\src\\main\\java\\com\\udinic\\perfdemo\\BaseActivity.java","file_content":"package com.udinic.perfdemo; import android.os.Bundle; import android.support.v7.app.AppCompatActivity; import com.udinic.perfdemo.util.ViewServer; public class BaseActivity extends AppCompatActivity{ @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); ViewServer.get(this).addWindow(this); } @Override protected void onDestroy() { super.onDestroy(); ViewServer.get(this).removeWindow(this); } @Override protected void onResume() { super.onResume(); ViewServer.get(this).setFocusedWindow(this); } }"}]}}
{"project_id":95,"chunk_id":0,"content":{"main_file_path":"PerformanceDemo-master\\app\\src\\main\\java\\com\\udinic\\perfdemo\\HeavyListActivity.java","main_file_content":"package com.udinic.perfdemo; import android.database.DataSetObserver; import android.graphics.Color; import android.os.Bundle; import android.support.v7.app.AppCompatActivity; import android.view.LayoutInflater; import android.view.Menu; import android.view.MenuItem; import android.view.View; import android.view.ViewGroup; import android.widget.ListAdapter; import android.widget.ListView; import android.widget.TextView; import org.apache.commons.lang3.RandomStringUtils; import java.util.ArrayList; import java.util.List; import java.util.Random; public class HeavyListActivity extends BaseActivity { private ListView list; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_heavy_list); list = (ListView)findViewById(R.id.list); TerAdapter adapter = new TerAdapter(); adapter.setItems(generateItems()); list.setAdapter(adapter); } private List<String> generateItems() { int num = 300; Random rand = new Random(System.currentTimeMillis()); List<String> list = new ArrayList<>(); for (int i = 0; i < num; i++) { list.add(RandomStringUtils.random(rand.nextInt(13) + 5, \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")); } return list; } @Override public boolean onCreateOptionsMenu(Menu menu) { getMenuInflater().inflate(R.menu.menu_main, menu); return true; } @Override public boolean onOptionsItemSelected(MenuItem item) { int id = item.getItemId(); if (id == R.id.action_settings) { return true; } return super.onOptionsItemSelected(item); } private class TerAdapter implements ListAdapter { List<String> items = new ArrayList<>(); public final int[] COLORS = new int[]{Color.BLUE, Color.DKGRAY, Color.GREEN, Color.RED, Color.YELLOW}; public void setItems(List<String> items) { this.items = items; } @Override public boolean areAllItemsEnabled() { return false; } @Override public boolean isEnabled(int i) { return false; } @Override public void registerDataSetObserver(DataSetObserver dataSetObserver) { } @Override public void unregisterDataSetObserver(DataSetObserver dataSetObserver) { } @Override public int getCount() { return items.size(); } @Override public Object getItem(int i) { return items.get(i); } @Override public long getItemId(int i) { return 0; } @Override public boolean hasStableIds() { return false; } @Override public View getView(int i, View view, ViewGroup viewGroup) { LayoutInflater inflater = LayoutInflater.from(HeavyListActivity.this); String item = (String)getItem(i); view = inflater.inflate(R.layout.listitem_row, viewGroup, false); TextView tv = (TextView) view.findViewById(R.id.text); tv.setText(item); TextView txt1 = (TextView) view.findViewById(R.id.txt1); TextView txt2 = (TextView) view.findViewById(R.id.txt2); txt1.setText(item.toUpperCase()); txt2.setText(item.toLowerCase()); view.findViewById(R.id.layout2).setBackgroundColor(COLORS[item.charAt(0) % COLORS.length]); view.findViewById(R.id.layout3).setBackgroundColor(COLORS[item.charAt(1) % COLORS.length]); return view; } @Override public int getItemViewType(int i) { return 0; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEmpty() { return false; } } }","dependencies":[{"file_path":"PerformanceDemo-master\\app\\src\\main\\java\\com\\udinic\\perfdemo\\BaseActivity.java","file_content":"package com.udinic.perfdemo; import android.os.Bundle; import android.support.v7.app.AppCompatActivity; import com.udinic.perfdemo.util.ViewServer; public class BaseActivity extends AppCompatActivity{ @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); ViewServer.get(this).addWindow(this); } @Override protected void onDestroy() { super.onDestroy(); ViewServer.get(this).removeWindow(this); } @Override protected void onResume() { super.onResume(); ViewServer.get(this).setFocusedWindow(this); } }"}]}}
{"project_id":95,"chunk_id":0,"content":{"main_file_path":"PerformanceDemo-master\\app\\src\\main\\java\\com\\udinic\\perfdemo\\ListServiceCallActivity.java","main_file_content":"package com.udinic.perfdemo; import android.content.ComponentName; import android.content.Intent; import android.content.ServiceConnection; import android.os.Bundle; import android.os.IBinder; import android.support.v7.app.AppCompatActivity; import android.view.Menu; import android.view.MenuItem; import android.view.View; import android.view.ViewGroup; import android.widget.ArrayAdapter; import android.widget.ListView; import android.widget.TextView; import com.udinic.perfdemo.service.BgService; import java.util.ArrayList; import java.util.List; public class ListServiceCallActivity extends BaseActivity { private BgService mService = null; private boolean mBound = false; private ServiceConnection mConnection = new ServiceConnection() { @Override public void onServiceConnected(ComponentName className, IBinder service) { BgService.LocalBinder binder = (BgService.LocalBinder) service; mService = binder.getService(); mBound = true; initList(); } @Override public void onServiceDisconnected(ComponentName arg0) { mBound = false; } }; private ListView mList; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_list); mList = (ListView)findViewById(R.id.list); } @Override protected void onStart() { super.onStart(); Intent intent = new Intent(this, BgService.class); bindService(intent, mConnection, BIND_AUTO_CREATE); } @Override protected void onStop() { super.onStop(); if (mBound) { unbindService(mConnection); mBound = false; } } private void initList() { ArrayAdapter<String> adapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1) { @Override public View getView(final int position, View convertView, ViewGroup parent) { TextView view = (TextView)super.getView(position, convertView, parent); Thread trd = new Thread(new Runnable() { @Override public void run() { String res = mService.doWork(position); } }, \"udini-trd_\"+position); trd.start(); try { trd.join(); } catch (InterruptedException e) { e.printStackTrace(); } view.setText(getItem(position)); return view; } }; List<String> items = new ArrayList<>(); for (int i = 0; i < 5000; i++) { items.add(\"Item[\" + i + \"]\"); } adapter.addAll(items); mList.setAdapter(adapter); } @Override public boolean onCreateOptionsMenu(Menu menu) { getMenuInflater().inflate(R.menu.menu_list, menu); return true; } @Override public boolean onOptionsItemSelected(MenuItem item) { int id = item.getItemId(); if (id == R.id.action_settings) { return true; } return super.onOptionsItemSelected(item); } }","dependencies":[{"file_path":"PerformanceDemo-master\\app\\src\\main\\java\\com\\udinic\\perfdemo\\BaseActivity.java","file_content":"package com.udinic.perfdemo; import android.os.Bundle; import android.support.v7.app.AppCompatActivity; import com.udinic.perfdemo.util.ViewServer; public class BaseActivity extends AppCompatActivity{ @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); ViewServer.get(this).addWindow(this); } @Override protected void onDestroy() { super.onDestroy(); ViewServer.get(this).removeWindow(this); } @Override protected void onResume() { super.onResume(); ViewServer.get(this).setFocusedWindow(this); } }"},{"file_path":"PerformanceDemo-master\\app\\src\\main\\java\\com\\udinic\\perfdemo\\service\\BgService.java","file_content":"package com.udinic.perfdemo.service; import android.app.Service; import android.content.Intent; import android.os.Binder; import android.os.IBinder; import java.util.Random; public class BgService extends Service { LocalBinder mLocalBinder = new LocalBinder(); private static final int SPIN_COUNT = 2000; private Random mRand = new Random(); public BgService() { } @Override public IBinder onBind(Intent intent) { return mLocalBinder; } public class LocalBinder extends Binder { public BgService getService() { return BgService.this; } } public String doWork(int arg) { int reps = SPIN_COUNT * mRand.nextInt(arg+1); int ret = 0; for (int i = 0; i < reps; i++) { for (int j = 0; j < 100; j++) { ret += i * j; } } return String.valueOf(ret); } }"}]}}
{"project_id":95,"chunk_id":0,"content":{"main_file_path":"PerformanceDemo-master\\app\\src\\main\\java\\com\\udinic\\perfdemo\\MainSelectionActivity.java","main_file_content":"package com.udinic.perfdemo; import android.content.Intent; import android.os.Bundle; import android.support.annotation.IdRes; import android.view.Menu; import android.view.MenuItem; import android.view.View; public class MainSelectionActivity extends BaseActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main_selection); createOnClick(R.id.btnListService, ListServiceCallActivity.class); createOnClick(R.id.btnBusyUIThread, BusyUIThreadActivity.class); createOnClick(R.id.btnMemoryLeakActivity, MemoryLeakActivity.class); createOnClick(R.id.btnOverdraw, OverdrawActivity.class); createOnClick(R.id.btnHeavyList, HeavyListActivity.class); createOnClick(R.id.btnHeavyRenderingAnim, HeavyAnimationActivity.class); } private void createOnClick(@IdRes int btnResId, final Class<?> activityToStart) { findViewById(btnResId).setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { startActivity(new Intent(MainSelectionActivity.this, activityToStart)); } }); } @Override public boolean onCreateOptionsMenu(Menu menu) { getMenuInflater().inflate(R.menu.menu_main_selection, menu); return true; } @Override public boolean onOptionsItemSelected(MenuItem item) { int id = item.getItemId(); if (id == R.id.action_settings) { return true; } return super.onOptionsItemSelected(item); } }","dependencies":[{"file_path":"PerformanceDemo-master\\app\\src\\main\\java\\com\\udinic\\perfdemo\\BaseActivity.java","file_content":"package com.udinic.perfdemo; import android.os.Bundle; import android.support.v7.app.AppCompatActivity; import com.udinic.perfdemo.util.ViewServer; public class BaseActivity extends AppCompatActivity{ @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); ViewServer.get(this).addWindow(this); } @Override protected void onDestroy() { super.onDestroy(); ViewServer.get(this).removeWindow(this); } @Override protected void onResume() { super.onResume(); ViewServer.get(this).setFocusedWindow(this); } }"},{"file_path":"PerformanceDemo-master\\app\\src\\main\\java\\com\\udinic\\perfdemo\\BusyUIThreadActivity.java","file_content":"package com.udinic.perfdemo; import android.animation.ObjectAnimator; import android.os.Bundle; import android.util.Log; import android.view.Menu; import android.view.MenuItem; import android.view.View; import android.view.animation.LinearInterpolator; import android.widget.Button; import android.widget.ImageView; public class BusyUIThreadActivity extends BaseActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_busy_ui_thread); Button btn1 = (Button) findViewById(R.id.btn1); btn1.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { int n = 30; Log.d(\"PerfDemo\", \"Start Fib(\"+n+\")\"); long res = fib(n); Log.d(\"PerfDemo\", \"Fib(\"+n+\") = \" + res); } }); } @Override protected void onResume() { super.onResume(); ImageView iv = (ImageView) findViewById(R.id.shape); ObjectAnimator anim = ObjectAnimator.ofFloat(iv, View.ROTATION, 0f, 360f); anim.setDuration(1000); anim.setInterpolator(new LinearInterpolator()); anim.setRepeatMode(ObjectAnimator.RESTART); anim.setRepeatCount(ObjectAnimator.INFINITE); anim.start(); } @Override public boolean onCreateOptionsMenu(Menu menu) { getMenuInflater().inflate(R.menu.menu_busy_procs, menu); return true; } @Override public boolean onOptionsItemSelected(MenuItem item) { int id = item.getItemId(); if (id == R.id.action_settings) { return true; } return super.onOptionsItemSelected(item); } public static long fib(int n) { if (n <= 1) return n; else return fib(n-1) + fib(n-2); } }"},{"file_path":"PerformanceDemo-master\\app\\src\\main\\java\\com\\udinic\\perfdemo\\HeavyAnimationActivity.java","file_content":"package com.udinic.perfdemo; import android.animation.ValueAnimator; import android.os.Bundle; import android.view.Menu; import android.view.MenuItem; import android.view.View; import android.view.ViewPropertyAnimator; import android.widget.Button; import android.widget.CheckBox; import android.widget.CompoundButton; public class HeavyAnimationActivity extends BaseActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_heavy_animation); final CheckBox chkHwLayer = (CheckBox) findViewById(R.id.chkUseHwLayer); final CheckBox chkAlpha = (CheckBox) findViewById(R.id.chkUseAlpha); final View alphaLayout = findViewById(R.id.alphaLayout); chkAlpha.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() { @Override public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) { alphaLayout.setAlpha(isChecked ? 0.5f : 1f); } }); findViewById(R.id.btnStart).setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { final View view = findViewById(R.id.udinic); ViewPropertyAnimator animator = view.animate() .translationX(240f) .translationY(-600) .alpha(0.2f) .rotation(3000f) .scaleX(2f) .setDuration(8000) .setUpdateListener(new ValueAnimator.AnimatorUpdateListener() { @Override public void onAnimationUpdate(ValueAnimator animation) { ((Button) view.findViewById(R.id.btn2)) .setText(\"a\" + animation.getAnimatedFraction() * 100); } }); if (chkHwLayer.isChecked()) animator.withLayer(); animator.start(); } }); } @Override public boolean onCreateOptionsMenu(Menu menu) { getMenuInflater().inflate(R.menu.menu_animation, menu); return true; } @Override public boolean onOptionsItemSelected(MenuItem item) { int id = item.getItemId(); if (id == R.id.action_settings) { return true; } return super.onOptionsItemSelected(item); } }"},{"file_path":"PerformanceDemo-master\\app\\src\\main\\java\\com\\udinic\\perfdemo\\HeavyListActivity.java","file_content":"package com.udinic.perfdemo; import android.database.DataSetObserver; import android.graphics.Color; import android.os.Bundle; import android.support.v7.app.AppCompatActivity; import android.view.LayoutInflater; import android.view.Menu; import android.view.MenuItem; import android.view.View; import android.view.ViewGroup; import android.widget.ListAdapter; import android.widget.ListView; import android.widget.TextView; import org.apache.commons.lang3.RandomStringUtils; import java.util.ArrayList; import java.util.List; import java.util.Random; public class HeavyListActivity extends BaseActivity { private ListView list; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_heavy_list); list = (ListView)findViewById(R.id.list); TerAdapter adapter = new TerAdapter(); adapter.setItems(generateItems()); list.setAdapter(adapter); } private List<String> generateItems() { int num = 300; Random rand = new Random(System.currentTimeMillis()); List<String> list = new ArrayList<>(); for (int i = 0; i < num; i++) { list.add(RandomStringUtils.random(rand.nextInt(13) + 5, \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")); } return list; } @Override public boolean onCreateOptionsMenu(Menu menu) { getMenuInflater().inflate(R.menu.menu_main, menu); return true; } @Override public boolean onOptionsItemSelected(MenuItem item) { int id = item.getItemId(); if (id == R.id.action_settings) { return true; } return super.onOptionsItemSelected(item); } private class TerAdapter implements ListAdapter { List<String> items = new ArrayList<>(); public final int[] COLORS = new int[]{Color.BLUE, Color.DKGRAY, Color.GREEN, Color.RED, Color.YELLOW}; public void setItems(List<String> items) { this.items = items; } @Override public boolean areAllItemsEnabled() { return false; } @Override public boolean isEnabled(int i) { return false; } @Override public void registerDataSetObserver(DataSetObserver dataSetObserver) { } @Override public void unregisterDataSetObserver(DataSetObserver dataSetObserver) { } @Override public int getCount() { return items.size(); } @Override public Object getItem(int i) { return items.get(i); } @Override public long getItemId(int i) { return 0; } @Override public boolean hasStableIds() { return false; } @Override public View getView(int i, View view, ViewGroup viewGroup) { LayoutInflater inflater = LayoutInflater.from(HeavyListActivity.this); String item = (String)getItem(i); view = inflater.inflate(R.layout.listitem_row, viewGroup, false); TextView tv = (TextView) view.findViewById(R.id.text); tv.setText(item); TextView txt1 = (TextView) view.findViewById(R.id.txt1); TextView txt2 = (TextView) view.findViewById(R.id.txt2); txt1.setText(item.toUpperCase()); txt2.setText(item.toLowerCase()); view.findViewById(R.id.layout2).setBackgroundColor(COLORS[item.charAt(0) % COLORS.length]); view.findViewById(R.id.layout3).setBackgroundColor(COLORS[item.charAt(1) % COLORS.length]); return view; } @Override public int getItemViewType(int i) { return 0; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEmpty() { return false; } } }"},{"file_path":"PerformanceDemo-master\\app\\src\\main\\java\\com\\udinic\\perfdemo\\ListServiceCallActivity.java","file_content":"package com.udinic.perfdemo; import android.content.ComponentName; import android.content.Intent; import android.content.ServiceConnection; import android.os.Bundle; import android.os.IBinder; import android.support.v7.app.AppCompatActivity; import android.view.Menu; import android.view.MenuItem; import android.view.View; import android.view.ViewGroup; import android.widget.ArrayAdapter; import android.widget.ListView; import android.widget.TextView; import com.udinic.perfdemo.service.BgService; import java.util.ArrayList; import java.util.List; public class ListServiceCallActivity extends BaseActivity { private BgService mService = null; private boolean mBound = false; private ServiceConnection mConnection = new ServiceConnection() { @Override public void onServiceConnected(ComponentName className, IBinder service) { BgService.LocalBinder binder = (BgService.LocalBinder) service; mService = binder.getService(); mBound = true; initList(); } @Override public void onServiceDisconnected(ComponentName arg0) { mBound = false; } }; private ListView mList; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_list); mList = (ListView)findViewById(R.id.list); } @Override protected void onStart() { super.onStart(); Intent intent = new Intent(this, BgService.class); bindService(intent, mConnection, BIND_AUTO_CREATE); } @Override protected void onStop() { super.onStop(); if (mBound) { unbindService(mConnection); mBound = false; } } private void initList() { ArrayAdapter<String> adapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1) { @Override public View getView(final int position, View convertView, ViewGroup parent) { TextView view = (TextView)super.getView(position, convertView, parent); Thread trd = new Thread(new Runnable() { @Override public void run() { String res = mService.doWork(position); } }, \"udini-trd_\"+position); trd.start(); try { trd.join(); } catch (InterruptedException e) { e.printStackTrace(); } view.setText(getItem(position)); return view; } }; List<String> items = new ArrayList<>(); for (int i = 0; i < 5000; i++) { items.add(\"Item[\" + i + \"]\"); } adapter.addAll(items); mList.setAdapter(adapter); } @Override public boolean onCreateOptionsMenu(Menu menu) { getMenuInflater().inflate(R.menu.menu_list, menu); return true; } @Override public boolean onOptionsItemSelected(MenuItem item) { int id = item.getItemId(); if (id == R.id.action_settings) { return true; } return super.onOptionsItemSelected(item); } }"},{"file_path":"PerformanceDemo-master\\app\\src\\main\\java\\com\\udinic\\perfdemo\\MemoryLeakActivity.java","file_content":"package com.udinic.perfdemo; import android.os.Bundle; import android.view.Menu; import android.view.MenuItem; import com.udinic.perfdemo.util.BigSpendyObject; import com.udinic.perfdemo.util.ListenersManager; import com.udinic.perfdemo.util.UdinicListener; public class MemoryLeakActivity extends BaseActivity implements UdinicListener { String mStringField; BigSpendyObject spendyObject = new BigSpendyObject(); @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_memory); mStringField = \"onCreate() Called\"; ListenersManager.getManager().addListener(this); } @Override public boolean onCreateOptionsMenu(Menu menu) { getMenuInflater().inflate(R.menu.menu_memory, menu); return true; } @Override public boolean onOptionsItemSelected(MenuItem item) { int id = item.getItemId(); if (id == R.id.action_settings) { return true; } return super.onOptionsItemSelected(item); } @Override public void doStuff() { } }"},{"file_path":"PerformanceDemo-master\\app\\src\\main\\java\\com\\udinic\\perfdemo\\OverdrawActivity.java","file_content":"package com.udinic.perfdemo; import android.os.Bundle; public class OverdrawActivity extends BaseActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_overdraw); } }"}]}}
{"project_id":95,"chunk_id":0,"content":{"main_file_path":"PerformanceDemo-master\\app\\src\\main\\java\\com\\udinic\\perfdemo\\MemoryLeakActivity.java","main_file_content":"package com.udinic.perfdemo; import android.os.Bundle; import android.view.Menu; import android.view.MenuItem; import com.udinic.perfdemo.util.BigSpendyObject; import com.udinic.perfdemo.util.ListenersManager; import com.udinic.perfdemo.util.UdinicListener; public class MemoryLeakActivity extends BaseActivity implements UdinicListener { String mStringField; BigSpendyObject spendyObject = new BigSpendyObject(); @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_memory); mStringField = \"onCreate() Called\"; ListenersManager.getManager().addListener(this); } @Override public boolean onCreateOptionsMenu(Menu menu) { getMenuInflater().inflate(R.menu.menu_memory, menu); return true; } @Override public boolean onOptionsItemSelected(MenuItem item) { int id = item.getItemId(); if (id == R.id.action_settings) { return true; } return super.onOptionsItemSelected(item); } @Override public void doStuff() { } }","dependencies":[{"file_path":"PerformanceDemo-master\\app\\src\\main\\java\\com\\udinic\\perfdemo\\BaseActivity.java","file_content":"package com.udinic.perfdemo; import android.os.Bundle; import android.support.v7.app.AppCompatActivity; import com.udinic.perfdemo.util.ViewServer; public class BaseActivity extends AppCompatActivity{ @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); ViewServer.get(this).addWindow(this); } @Override protected void onDestroy() { super.onDestroy(); ViewServer.get(this).removeWindow(this); } @Override protected void onResume() { super.onResume(); ViewServer.get(this).setFocusedWindow(this); } }"},{"file_path":"PerformanceDemo-master\\app\\src\\main\\java\\com\\udinic\\perfdemo\\util\\BigSpendyObject.java","file_content":"package com.udinic.perfdemo.util; import android.graphics.Bitmap; import java.util.ArrayList; import java.util.List; public class BigSpendyObject { List<Bitmap> list = new ArrayList<>(20); String bla[] = new String[1024]; public String[] get() { return bla; } public List<Bitmap> getList() { return list; } }"},{"file_path":"PerformanceDemo-master\\app\\src\\main\\java\\com\\udinic\\perfdemo\\util\\ListenersManager.java","file_content":"package com.udinic.perfdemo.util; import java.util.ArrayList; import java.util.List; public class ListenersManager { private static ListenersManager sInstance; List<UdinicListener> listeners = new ArrayList<>(); private ListenersManager() { } public static ListenersManager getManager() { if (sInstance == null) sInstance = new ListenersManager(); return sInstance; } public void addListener(UdinicListener listener) { listeners.add(listener); } public void removeListener(UdinicListener listener) { listeners.remove(listener); } }"},{"file_path":"PerformanceDemo-master\\app\\src\\main\\java\\com\\udinic\\perfdemo\\util\\UdinicListener.java","file_content":"package com.udinic.perfdemo.util; public interface UdinicListener { void doStuff(); }"}]}}
{"project_id":95,"chunk_id":0,"content":{"main_file_path":"PerformanceDemo-master\\app\\src\\main\\java\\com\\udinic\\perfdemo\\OverdrawActivity.java","main_file_content":"package com.udinic.perfdemo; import android.os.Bundle; public class OverdrawActivity extends BaseActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_overdraw); } }","dependencies":[{"file_path":"PerformanceDemo-master\\app\\src\\main\\java\\com\\udinic\\perfdemo\\BaseActivity.java","file_content":"package com.udinic.perfdemo; import android.os.Bundle; import android.support.v7.app.AppCompatActivity; import com.udinic.perfdemo.util.ViewServer; public class BaseActivity extends AppCompatActivity{ @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); ViewServer.get(this).addWindow(this); } @Override protected void onDestroy() { super.onDestroy(); ViewServer.get(this).removeWindow(this); } @Override protected void onResume() { super.onResume(); ViewServer.get(this).setFocusedWindow(this); } }"}]}}
{"project_id":95,"chunk_id":0,"content":{"main_file_path":"PerformanceDemo-master\\app\\src\\main\\java\\com\\udinic\\perfdemo\\PerfApplication.java","main_file_content":"package com.udinic.perfdemo; import android.app.Application; public class PerfApplication extends Application { @Override public void onCreate() { super.onCreate(); } }","dependencies":[]}}
{"project_id":95,"chunk_id":0,"content":{"main_file_path":"PerformanceDemo-master\\app\\src\\main\\java\\com\\udinic\\perfdemo\\service\\BgService.java","main_file_content":"package com.udinic.perfdemo.service; import android.app.Service; import android.content.Intent; import android.os.Binder; import android.os.IBinder; import java.util.Random; public class BgService extends Service { LocalBinder mLocalBinder = new LocalBinder(); private static final int SPIN_COUNT = 2000; private Random mRand = new Random(); public BgService() { } @Override public IBinder onBind(Intent intent) { return mLocalBinder; } public class LocalBinder extends Binder { public BgService getService() { return BgService.this; } } public String doWork(int arg) { int reps = SPIN_COUNT * mRand.nextInt(arg+1); int ret = 0; for (int i = 0; i < reps; i++) { for (int j = 0; j < 100; j++) { ret += i * j; } } return String.valueOf(ret); } }","dependencies":[]}}
{"project_id":95,"chunk_id":0,"content":{"main_file_path":"PerformanceDemo-master\\app\\src\\main\\java\\com\\udinic\\perfdemo\\util\\BigSpendyObject.java","main_file_content":"package com.udinic.perfdemo.util; import android.graphics.Bitmap; import java.util.ArrayList; import java.util.List; public class BigSpendyObject { List<Bitmap> list = new ArrayList<>(20); String bla[] = new String[1024]; public String[] get() { return bla; } public List<Bitmap> getList() { return list; } }","dependencies":[]}}
{"project_id":95,"chunk_id":0,"content":{"main_file_path":"PerformanceDemo-master\\app\\src\\main\\java\\com\\udinic\\perfdemo\\util\\ListenersManager.java","main_file_content":"package com.udinic.perfdemo.util; import java.util.ArrayList; import java.util.List; public class ListenersManager { private static ListenersManager sInstance; List<UdinicListener> listeners = new ArrayList<>(); private ListenersManager() { } public static ListenersManager getManager() { if (sInstance == null) sInstance = new ListenersManager(); return sInstance; } public void addListener(UdinicListener listener) { listeners.add(listener); } public void removeListener(UdinicListener listener) { listeners.remove(listener); } }","dependencies":[{"file_path":"PerformanceDemo-master\\app\\src\\main\\java\\com\\udinic\\perfdemo\\util\\UdinicListener.java","file_content":"package com.udinic.perfdemo.util; public interface UdinicListener { void doStuff(); }"}]}}
{"project_id":95,"chunk_id":0,"content":{"main_file_path":"PerformanceDemo-master\\app\\src\\main\\java\\com\\udinic\\perfdemo\\util\\UdinicListener.java","main_file_content":"package com.udinic.perfdemo.util; public interface UdinicListener { void doStuff(); }","dependencies":[]}}
{"project_id":95,"chunk_id":0,"content":{"main_file_path":"PerformanceDemo-master\\app\\src\\main\\java\\com\\udinic\\perfdemo\\util\\ViewServer.java","main_file_content":"package com.udinic.perfdemo.util; import java.io.BufferedReader; import java.io.BufferedWriter; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStream; import java.io.OutputStreamWriter; import java.lang.reflect.Method; import java.net.InetAddress; import java.net.ServerSocket; import java.net.Socket; import java.util.HashMap; import java.util.List; import java.util.Map.Entry; import java.util.concurrent.CopyOnWriteArrayList; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.locks.ReentrantReadWriteLock; import android.app.Activity; import android.content.Context; import android.content.pm.ApplicationInfo; import android.os.Build; import android.text.TextUtils; import android.util.Log; import android.view.View; import android.view.ViewDebug; public class ViewServer implements Runnable { private static final int VIEW_SERVER_DEFAULT_PORT = 4939; private static final int VIEW_SERVER_MAX_CONNECTIONS = 10; private static final String BUILD_TYPE_USER = \"user\"; private static final String LOG_TAG = \"ViewServer\"; private static final String VALUE_PROTOCOL_VERSION = \"4\"; private static final String VALUE_SERVER_VERSION = \"4\"; private static final String COMMAND_PROTOCOL_VERSION = \"PROTOCOL\"; private static final String COMMAND_SERVER_VERSION = \"SERVER\"; private static final String COMMAND_WINDOW_MANAGER_LIST = \"LIST\"; private static final String COMMAND_WINDOW_MANAGER_AUTOLIST = \"AUTOLIST\"; private static final String COMMAND_WINDOW_MANAGER_GET_FOCUS = \"GET_FOCUS\"; private ServerSocket mServer; private final int mPort; private Thread mThread; private ExecutorService mThreadPool; private final List<WindowListener> mListeners = new CopyOnWriteArrayList<ViewServer.WindowListener>(); private final HashMap<View, String> mWindows = new HashMap<View, String>(); private final ReentrantReadWriteLock mWindowsLock = new ReentrantReadWriteLock(); private View mFocusedWindow; private final ReentrantReadWriteLock mFocusLock = new ReentrantReadWriteLock(); private static ViewServer sServer; public static ViewServer get(Context context) { ApplicationInfo info = context.getApplicationInfo(); if (BUILD_TYPE_USER.equals(Build.TYPE) && (info.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0) { if (sServer == null) { sServer = new ViewServer(ViewServer.VIEW_SERVER_DEFAULT_PORT); } if (!sServer.isRunning()) { try { sServer.start(); } catch (IOException e) { Log.d(LOG_TAG, \"Error:\", e); } } } else { sServer = new NoopViewServer(); } return sServer; } private ViewServer() { mPort = -1; } private ViewServer(int port) { mPort = port; } public boolean start() throws IOException { if (mThread != null) { return false; } mThread = new Thread(this, \"Local View Server [port=\" + mPort + \"]\"); mThreadPool = Executors.newFixedThreadPool(VIEW_SERVER_MAX_CONNECTIONS); mThread.start(); return true; } public boolean stop() { if (mThread != null) { mThread.interrupt(); if (mThreadPool != null) { try { mThreadPool.shutdownNow(); } catch (SecurityException e) { Log.w(LOG_TAG, \"Could not stop all view server threads\"); } } mThreadPool = null; mThread = null; try { mServer.close(); mServer = null; return true; } catch (IOException e) { Log.w(LOG_TAG, \"Could not close the view server\"); } } mWindowsLock.writeLock().lock(); try { mWindows.clear(); } finally { mWindowsLock.writeLock().unlock(); } mFocusLock.writeLock().lock(); try { mFocusedWindow = null; } finally { mFocusLock.writeLock().unlock(); } return false; } public boolean isRunning() { return mThread != null && mThread.isAlive(); } public void addWindow(Activity activity) { String name = activity.getTitle().toString(); if (TextUtils.isEmpty(name)) { name = activity.getClass().getCanonicalName() + \"/0x\" + System.identityHashCode(activity); } else { name += \"(\" + activity.getClass().getCanonicalName() + \")\"; } addWindow(activity.getWindow().getDecorView(), name); } public void removeWindow(Activity activity) { removeWindow(activity.getWindow().getDecorView()); } public void addWindow(View view, String name) { mWindowsLock.writeLock().lock(); try { mWindows.put(view.getRootView(), name); } finally { mWindowsLock.writeLock().unlock(); } fireWindowsChangedEvent(); } public void removeWindow(View view) { View rootView; mWindowsLock.writeLock().lock(); try { rootView = view.getRootView(); mWindows.remove(rootView); } finally { mWindowsLock.writeLock().unlock(); } mFocusLock.writeLock().lock(); try { if (mFocusedWindow == rootView) { mFocusedWindow = null; } } finally { mFocusLock.writeLock().unlock(); } fireWindowsChangedEvent(); } public void setFocusedWindow(Activity activity) { setFocusedWindow(activity.getWindow().getDecorView()); } public void setFocusedWindow(View view) { mFocusLock.writeLock().lock(); try { mFocusedWindow = view == null ? null : view.getRootView(); } finally { mFocusLock.writeLock().unlock(); } fireFocusChangedEvent(); } public void run() { try { mServer = new ServerSocket(mPort, VIEW_SERVER_MAX_CONNECTIONS, InetAddress.getLocalHost()); } catch (Exception e) { Log.w(LOG_TAG, \"Starting ServerSocket error: \", e); } while (mServer != null && Thread.currentThread() == mThread) { try { Socket client = mServer.accept(); if (mThreadPool != null) { mThreadPool.submit(new ViewServerWorker(client)); } else { try { client.close(); } catch (IOException e) { e.printStackTrace(); } } } catch (Exception e) { Log.w(LOG_TAG, \"Connection error: \", e); } } } private static boolean writeValue(Socket client, String value) { boolean result; BufferedWriter out = null; try { OutputStream clientStream = client.getOutputStream(); out = new BufferedWriter(new OutputStreamWriter(clientStream), 8 * 1024); out.write(value); out.write(\"\\n\"); out.flush(); result = true; } catch (Exception e) { result = false; } finally { if (out != null) { try { out.close(); } catch (IOException e) { result = false; } } } return result; } private void fireWindowsChangedEvent() { for (WindowListener listener : mListeners) { listener.windowsChanged(); } } private void fireFocusChangedEvent() { for (WindowListener listener : mListeners) { listener.focusChanged(); } } private void addWindowListener(WindowListener listener) { if (!mListeners.contains(listener)) { mListeners.add(listener); } } private void removeWindowListener(WindowListener listener) { mListeners.remove(listener); } private interface WindowListener { void windowsChanged(); void focusChanged(); } private static class UncloseableOutputStream extends OutputStream { private final OutputStream mStream; UncloseableOutputStream(OutputStream stream) { mStream = stream; } public void close() throws IOException { } public boolean equals(Object o) { return mStream.equals(o); } public void flush() throws IOException { mStream.flush(); } public int hashCode() { return mStream.hashCode(); } public String toString() { return mStream.toString(); } public void write(byte[] buffer, int offset, int count) throws IOException { mStream.write(buffer, offset, count); } public void write(byte[] buffer) throws IOException { mStream.write(buffer); } public void write(int oneByte) throws IOException { mStream.write(oneByte); } } private static class NoopViewServer extends ViewServer { private NoopViewServer() { } @Override public boolean start() throws IOException { return false; } @Override public boolean stop() { return false; } @Override public boolean isRunning() { return false; } @Override public void addWindow(Activity activity) { } @Override public void removeWindow(Activity activity) { } @Override public void addWindow(View view, String name) { } @Override public void removeWindow(View view) { } @Override public void setFocusedWindow(Activity activity) { } @Override public void setFocusedWindow(View view) { } @Override public void run() { } } private class ViewServerWorker implements Runnable, WindowListener { private Socket mClient; private boolean mNeedWindowListUpdate; private boolean mNeedFocusedWindowUpdate; private final Object[] mLock = new Object[0]; public ViewServerWorker(Socket client) { mClient = client; mNeedWindowListUpdate = false; mNeedFocusedWindowUpdate = false; } public void run() { BufferedReader in = null; try { in = new BufferedReader(new InputStreamReader(mClient.getInputStream()), 1024); final String request = in.readLine(); String command; String parameters; int index = request.indexOf(' '); if (index == -1) { command = request; parameters = \"\"; } else { command = request.substring(0, index); parameters = request.substring(index + 1); } boolean result; if (COMMAND_PROTOCOL_VERSION.equalsIgnoreCase(command)) { result = writeValue(mClient, VALUE_PROTOCOL_VERSION); } else if (COMMAND_SERVER_VERSION.equalsIgnoreCase(command)) { result = writeValue(mClient, VALUE_SERVER_VERSION); } else if (COMMAND_WINDOW_MANAGER_LIST.equalsIgnoreCase(command)) { result = listWindows(mClient); } else if (COMMAND_WINDOW_MANAGER_GET_FOCUS.equalsIgnoreCase(command)) { result = getFocusedWindow(mClient); } else if (COMMAND_WINDOW_MANAGER_AUTOLIST.equalsIgnoreCase(command)) { result = windowManagerAutolistLoop(); } else { result = windowCommand(mClient, command, parameters); } if (!result) { Log.w(LOG_TAG, \"An error occurred with the command: \" + command); } } catch(IOException e) { Log.w(LOG_TAG, \"Connection error: \", e); } finally { if (in != null) { try { in.close(); } catch (IOException e) { e.printStackTrace(); } } if (mClient != null) { try { mClient.close(); } catch (IOException e) { e.printStackTrace(); } } } } private boolean windowCommand(Socket client, String command, String parameters) { boolean success = true; BufferedWriter out = null; try { int index = parameters.indexOf(' '); if (index == -1) { index = parameters.length(); } final String code = parameters.substring(0, index); int hashCode = (int) Long.parseLong(code, 16); if (index < parameters.length()) { parameters = parameters.substring(index + 1); } else { parameters = \"\"; } final View window = findWindow(hashCode); if (window == null) { return false; } final Method dispatch = ViewDebug.class.getDeclaredMethod(\"dispatchCommand\", View.class, String.class, String.class, OutputStream.class); dispatch.setAccessible(true); dispatch.invoke(null, window, command, parameters, new UncloseableOutputStream(client.getOutputStream())); if (!client.isOutputShutdown()) { out = new BufferedWriter(new OutputStreamWriter(client.getOutputStream())); out.write(\"DONE\\n\"); out.flush(); } } catch (Exception e) { Log.w(LOG_TAG, \"Could not send command \" + command + \" with parameters \" + parameters, e); success = false; } finally { if (out != null) { try { out.close(); } catch (IOException e) { success = false; } } } return success; } private View findWindow(int hashCode) { if (hashCode == -1) { View window = null; mWindowsLock.readLock().lock(); try { window = mFocusedWindow; } finally { mWindowsLock.readLock().unlock(); } return window; } mWindowsLock.readLock().lock(); try { for (Entry<View, String> entry : mWindows.entrySet()) { if (System.identityHashCode(entry.getKey()) == hashCode) { return entry.getKey(); } } } finally { mWindowsLock.readLock().unlock(); } return null; } private boolean listWindows(Socket client) { boolean result = true; BufferedWriter out = null; try { mWindowsLock.readLock().lock(); OutputStream clientStream = client.getOutputStream(); out = new BufferedWriter(new OutputStreamWriter(clientStream), 8 * 1024); for (Entry<View, String> entry : mWindows.entrySet()) { out.write(Integer.toHexString(System.identityHashCode(entry.getKey()))); out.write(' '); out.append(entry.getValue()); out.write('\\n'); } out.write(\"DONE.\\n\"); out.flush(); } catch (Exception e) { result = false; } finally { mWindowsLock.readLock().unlock(); if (out != null) { try { out.close(); } catch (IOException e) { result = false; } } } return result; } private boolean getFocusedWindow(Socket client) { boolean result = true; String focusName = null; BufferedWriter out = null; try { OutputStream clientStream = client.getOutputStream(); out = new BufferedWriter(new OutputStreamWriter(clientStream), 8 * 1024); View focusedWindow = null; mFocusLock.readLock().lock(); try { focusedWindow = mFocusedWindow; } finally { mFocusLock.readLock().unlock(); } if (focusedWindow != null) { mWindowsLock.readLock().lock(); try { focusName = mWindows.get(mFocusedWindow); } finally { mWindowsLock.readLock().unlock(); } out.write(Integer.toHexString(System.identityHashCode(focusedWindow))); out.write(' '); out.append(focusName); } out.write('\\n'); out.flush(); } catch (Exception e) { result = false; } finally { if (out != null) { try { out.close(); } catch (IOException e) { result = false; } } } return result; } public void windowsChanged() { synchronized (mLock) { mNeedWindowListUpdate = true; mLock.notifyAll(); } } public void focusChanged() { synchronized (mLock) { mNeedFocusedWindowUpdate = true; mLock.notifyAll(); } } private boolean windowManagerAutolistLoop() { addWindowListener(this); BufferedWriter out = null; try { out = new BufferedWriter(new OutputStreamWriter(mClient.getOutputStream())); while (!Thread.interrupted()) { boolean needWindowListUpdate = false; boolean needFocusedWindowUpdate = false; synchronized (mLock) { while (!mNeedWindowListUpdate && !mNeedFocusedWindowUpdate) { mLock.wait(); } if (mNeedWindowListUpdate) { mNeedWindowListUpdate = false; needWindowListUpdate = true; } if (mNeedFocusedWindowUpdate) { mNeedFocusedWindowUpdate = false; needFocusedWindowUpdate = true; } } if (needWindowListUpdate) { out.write(\"LIST UPDATE\\n\"); out.flush(); } if (needFocusedWindowUpdate) { out.write(\"FOCUS UPDATE\\n\"); out.flush(); } } } catch (Exception e) { Log.w(LOG_TAG, \"Connection error: \", e); } finally { if (out != null) { try { out.close(); } catch (IOException e) { } } removeWindowListener(this); } return true; } } }","dependencies":[]}}
{"project_id":95,"chunk_id":0,"content":{"main_file_path":"PerformanceDemo-master\\keepbusyapp\\src\\androidTest\\java\\com\\udinic\\keepbusyapp\\ApplicationTest.java","main_file_content":"package com.udinic.keepbusyapp; import android.app.Application; import android.test.ApplicationTestCase; public class ApplicationTest extends ApplicationTestCase<Application> { public ApplicationTest() { super(Application.class); } }","dependencies":[]}}
{"project_id":95,"chunk_id":0,"content":{"main_file_path":"PerformanceDemo-master\\keepbusyapp\\src\\main\\java\\com\\udinic\\keepbusyapp\\BusyService.java","main_file_content":"package com.udinic.keepbusyapp; import android.app.Service; import android.content.Intent; import android.os.IBinder; import android.support.annotation.Nullable; import android.util.Log; public class BusyService extends Service { private static final int SPIN_COUNT = 2000; int numThreads = 4; @Override public int onStartCommand(Intent intent, int flags, int startId) { Log.d(\"BusyService\", \"Starting \" + numThreads + \" threads\"); long startWhen = System.nanoTime(); SpinThread threads[] = new SpinThread[numThreads]; for (int i = 0; i < numThreads; i++) { threads[i] = new SpinThread(i); threads[i].start(); } for (int i = 0; i < numThreads; i++) { try { threads[i].join(); } catch (InterruptedException ie) { System.err.println(\"join \" + i + \" failed: \" + ie); } } long endWhen = System.nanoTime(); Log.d(\"BusyService\", \"All threads finished in \" + ((endWhen - startWhen) / 1000000) + \"ms\"); return BIND_AUTO_CREATE; } static class SpinThread extends Thread { private int mTid; SpinThread(int tid) { mTid = tid; } public void run() { long startWhen = System.nanoTime(); Log.d(\"BusyService\", \"Thread \" + mTid + \" started\"); int tid = mTid; int reps = SPIN_COUNT + tid; int ret = 0; for (int i = 0; i < reps; i++) { for (int j = 0; j < 1000000; j++) { ret += i * j; } } long endWhen = System.nanoTime(); Log.d(\"BusyService\", \"Thread \" + mTid + \" finished in \" + ((endWhen - startWhen) / 1000000) + \"ms (\" + ret + \")\"); } } @Nullable @Override public IBinder onBind(Intent intent) { return null; } }","dependencies":[]}}
{"project_id":95,"chunk_id":0,"content":{"main_file_path":"PerformanceDemo-master\\keepbusyapp\\src\\main\\java\\com\\udinic\\keepbusyapp\\MainActivity.java","main_file_content":"package com.udinic.keepbusyapp; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.view.Menu; import android.view.MenuItem; public class MainActivity extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); } @Override public boolean onCreateOptionsMenu(Menu menu) { getMenuInflater().inflate(R.menu.menu_main, menu); return true; } @Override public boolean onOptionsItemSelected(MenuItem item) { int id = item.getItemId(); if (id == R.id.action_settings) { return true; } return super.onOptionsItemSelected(item); } }","dependencies":[]}}
{"project_id":95,"chunk_id":0,"content":{"main_file_path":"PerformanceDemo-master\\keepbusyapp\\src\\main\\java\\com\\udinic\\keepbusyapp\\ReqReceiver.java","main_file_content":"package com.udinic.keepbusyapp; import android.content.BroadcastReceiver; import android.content.Context; import android.content.Intent; import android.util.Log; public class ReqReceiver extends BroadcastReceiver { @Override public void onReceive(Context context, Intent intent) { Log.d(\"ReqReceiver\", \"Starting BusyService\"); context.startService(new Intent(context, BusyService.class)); } }","dependencies":[{"file_path":"PerformanceDemo-master\\keepbusyapp\\src\\main\\java\\com\\udinic\\keepbusyapp\\BusyService.java","file_content":"package com.udinic.keepbusyapp; import android.app.Service; import android.content.Intent; import android.os.IBinder; import android.support.annotation.Nullable; import android.util.Log; public class BusyService extends Service { private static final int SPIN_COUNT = 2000; int numThreads = 4; @Override public int onStartCommand(Intent intent, int flags, int startId) { Log.d(\"BusyService\", \"Starting \" + numThreads + \" threads\"); long startWhen = System.nanoTime(); SpinThread threads[] = new SpinThread[numThreads]; for (int i = 0; i < numThreads; i++) { threads[i] = new SpinThread(i); threads[i].start(); } for (int i = 0; i < numThreads; i++) { try { threads[i].join(); } catch (InterruptedException ie) { System.err.println(\"join \" + i + \" failed: \" + ie); } } long endWhen = System.nanoTime(); Log.d(\"BusyService\", \"All threads finished in \" + ((endWhen - startWhen) / 1000000) + \"ms\"); return BIND_AUTO_CREATE; } static class SpinThread extends Thread { private int mTid; SpinThread(int tid) { mTid = tid; } public void run() { long startWhen = System.nanoTime(); Log.d(\"BusyService\", \"Thread \" + mTid + \" started\"); int tid = mTid; int reps = SPIN_COUNT + tid; int ret = 0; for (int i = 0; i < reps; i++) { for (int j = 0; j < 1000000; j++) { ret += i * j; } } long endWhen = System.nanoTime(); Log.d(\"BusyService\", \"Thread \" + mTid + \" finished in \" + ((endWhen - startWhen) / 1000000) + \"ms (\" + ret + \")\"); } } @Nullable @Override public IBinder onBind(Intent intent) { return null; } }"}]}}
{"project_id":95,"chunk_id":0,"content":{"main_file_path":"PerformanceDemo-master\\keepbusyapp\\src\\test\\java\\com\\udinic\\keepbusyapp\\ExampleUnitTest.java","main_file_content":"package com.udinic.keepbusyapp; import org.junit.Test; import static org.junit.Assert.*; public class ExampleUnitTest { @Test public void addition_isCorrect() throws Exception { assertEquals(4, 2 + 2); } }","dependencies":[]}}
{"project_id":97,"chunk_id":0,"content":{"main_file_path":"Quiz project\\Client.java","main_file_content":"import java.io.DataInputStream; import java.io.DataOutputStream; import java.io.IOException; import java.net.Socket; import java.util.Scanner; class Client { public static void main(String[] args) { int port = 999; System.out.print(\"Enter your Participant ID (1/2/3): \"); Scanner scanner = new Scanner(System.in); int id = scanner.nextInt(); scanner.nextLine(); port += id; Socket socket = null; try { socket = new Socket(\"localhost\", port); } catch (Exception e) { System.out.println(\"!! ERROR while Connecting to the Server !!\"); System.out.println(\"** Host has not yet created the Quiz, Host should connect first **\"); System.exit(1); } System.out.println(\"Connected to server..\"); System.out.print(\"Enter your name: \"); String name = scanner.nextLine(); try { DataInputStream dataInputStream = new DataInputStream(socket.getInputStream()); DataOutputStream dataOutputStream = new DataOutputStream(socket.getOutputStream()); dataOutputStream.writeUTF(name); int total_ques = dataInputStream.readInt(); int time_per_ques = dataInputStream.readInt(); for (int i = 0; i < total_ques; i++) { String ques = dataInputStream.readUTF(); String options = dataInputStream.readUTF(); System.out.println(ques); System.out.println(options); timer t = new timer(); String ans = t.getInput(time_per_ques); dataOutputStream.writeUTF(ans); } System.out.println(\"!! You had successfully completed the Quiz !!\"); System.out.println(\"***Contact the owner for Final Score***\"); socket.close(); } catch (IOException e) { System.out.println(e); } } }","dependencies":[{"file_path":"Quiz project\\timer.java","file_content":"import java.util.Timer; import java.util.TimerTask; import java.io.*; public class timer { private String str = \"\", str2 = \"\"; BufferedReader in; Timer timer = new Timer(); boolean hasRun = false; TimerTask task = new TimerTask() { @Override public void run() { hasRun = true; if (str.equals(\"\")) { System.out.println(\"you had enter nothing. Press 'Enter' to proceed to next ques.\"); System.out.println(\"\"); } timer.cancel(); } }; public String getInput(int seconds) throws IOException { timer.schedule(task, seconds * 1000); System.out.println(\"Answer within \" + seconds + \" seconds: \"); System.out.print(\"Your ans: \"); in = new BufferedReader(new InputStreamReader(System.in)); str2 = in.readLine(); if (!hasRun) { timer.cancel(); str = str2; } System.out.println(\"\"); return str; } }"}]}}
{"project_id":97,"chunk_id":0,"content":{"main_file_path":"Quiz project\\ClientThread.java","main_file_content":"import java.io.DataInputStream; import java.io.DataOutputStream; import java.io.IOException; import java.net.ServerSocket; import java.net.Socket; import java.util.concurrent.TimeUnit; class Quiz { int quesNum = 0; int threadnum = 0; static String Question, Option, Answer; static boolean has_started = false; void sendQues(DataOutputStream dataOutputStream, int count) throws IOException, InterruptedException { threadnum++; if (threadnum < 3) { synchronized (this) { wait(); } } if (!has_started) { if (Initiator.initiator()) { System.out.println(\"!! Quiz is LIVE now !!\"); System.out.println(\"\"); } has_started = true; } dataOutputStream.writeUTF(Question); dataOutputStream.writeUTF(Option); if (threadnum == 3) synchronized (this) { Answer = reader.readAns(); threadnum = 0; notifyAll(); } TimeUnit.SECONDS.sleep(5); } int receiveAns(DataInputStream dataInputStream) throws IOException { String ans = dataInputStream.readUTF(); if (ans.equals(Answer)) return 1; return 0; } } public class ClientThread extends Thread { static int count = 0, name_count = 0, total_ques = 0, time_per_ques = 0; final static Quiz quiz = new Quiz(); static boolean isAnswering = false; String name; int port, score = 0; ClientThread(int port) { this.port = port; } public static void initialise(int total_ques, int time_per_ques) { ClientThread.total_ques = total_ques; ClientThread.time_per_ques = time_per_ques; } @Override public void run() { try { ServerSocket serverSocket = new ServerSocket(port); Socket socket = serverSocket.accept(); DataOutputStream dataOutputStream = new DataOutputStream(socket.getOutputStream()); DataInputStream dataInputStream = new DataInputStream(socket.getInputStream()); name = dataInputStream.readUTF(); dataOutputStream.writeInt(total_ques); dataOutputStream.writeInt(time_per_ques); System.out.println(name + \" Connected.\"); count++; while (quiz.quesNum < total_ques) { if (port == 1000) { String[] list = reader.readQues(); quiz.Question = list[0]; quiz.Option = list[1]; } else { Thread.sleep(1000); } quiz.sendQues(dataOutputStream, count); if (port == 1000) isAnswering = true; score += quiz.receiveAns(dataInputStream); if (port == 1000) { isAnswering = false; count = 0; quiz.quesNum++; } else { if (quiz.quesNum == total_ques - 1 && isAnswering) break; Thread.sleep(500); } } serverSocket.close(); System.out.println(name + \"'s score: \" + score); } catch (IOException e) { e.printStackTrace(); } catch (InterruptedException e) { e.printStackTrace(); } } }","dependencies":[{"file_path":"Quiz project\\Initiator.java","file_content":"import java.util.Scanner; public class Initiator extends Thread { public static boolean initiator() { boolean flag = false; int countdown = 5; Scanner scan = new Scanner(System.in); while (flag == false) { System.out.println(\"!! Enter 'START' to begin the Quiz !!\"); String input = scan.nextLine(); if (input.equals(\"START\")) { System.out.print(\"Quiz starting in \" + countdown); while (countdown-- > 0) { try { Thread.sleep(1500); } catch (InterruptedException e) { } System.out.print(\"\\b\" + countdown); } System.out.println(\"\"); flag = true; return flag; } else { System.out.println( \"Please enter 'START' correctly. If you not want to start quiz then just enter 'QUIT'\"); String in = scan.next(); if (in.equals(\"QUIT\")) { System.out.print(\"EXITING the Quiz\"); int i = 2; while (i-- > 0) { for (int j = 0; j < 3; j++) { System.out.print(\".\"); try { Thread.sleep(700); } catch (InterruptedException e) { } if (j == 2) { System.out.print(\"\\b\\b\\b\"); } } } return false; } if (in.equals(\"START\")) { input = \"START\"; System.out.print(\"Quiz starting in \" + countdown); while (countdown-- > 0) { try { Thread.sleep(1500); } catch (InterruptedException e) { } System.out.print(\"\\b\" + countdown); } System.out.println(\"\"); return true; } } } return true; } }"},{"file_path":"Quiz project\\reader.java","file_content":"import java.io.*; import java.util.Scanner; public class reader { static int currentQues = 0; static FileInputStream fis1 = null, fis2 = null; static Scanner sc1 = null, sc2 = null; static String[] readQues() throws FileNotFoundException { if (currentQues == 0) { fis1 = new FileInputStream(\"Questions.txt\"); sc1 = new Scanner(fis1); } String[] list = new String[2]; list[0] = sc1.nextLine(); list[1] = sc1.nextLine(); currentQues++; return list; } static String readAns() throws FileNotFoundException { if (currentQues == 1) { fis2 = new FileInputStream(\"AnswerKey.txt\"); sc2 = new Scanner(fis2); } String ans = sc2.nextLine(); return ans; } }"}]}}
{"project_id":97,"chunk_id":0,"content":{"main_file_path":"Quiz project\\Host.java","main_file_content":"abstract class Host { void subject() { subject_selector.select_subjet(); } boolean questions() { return question_setter.set_questions(); } public void time(int wait) { Set_time.set(wait); } }","dependencies":[{"file_path":"Quiz project\\Set_time.java","file_content":"class Set_time extends Thread { static protected int t; static void set(int time) { System.out.println(\"Participants have to answer each question in \" + time + \" seconds\"); t = time; } }"},{"file_path":"Quiz project\\question_setter.java","file_content":"import java.io.*; import java.util.*; import java.nio.file.Files; import java.nio.file.Paths; import java.util.stream.*; public class question_setter { public static int ques = 0; public static boolean set_questions() { Set<Integer> que = new HashSet<Integer>(); Scanner s = new Scanner(System.in); System.out.print(\"Enter number of Questions in Quiz: \"); int n = s.nextInt(); ques = n; System.out.println(\"Selecting qustions of \" + subject_selector.subject + \" ...\"); try { Thread.sleep(2000); } catch (InterruptedException e) { System.out.print(e); } int num = 0; try { FileWriter fw1 = new FileWriter(\"Questions.txt\"); FileWriter fw2 = new FileWriter(\"AnswerKey.txt\"); while (n-- > 0) { boolean flag = false; while (!flag) { num = (int) (Math.random() * 100); if (num <= 30 && num % 2 == 1) { if (que.contains(num)) { flag = false; } else { que.add(num); flag = true; } } } num--; for (int i = 0; i < 2; i++) { String line1; try (Stream<String> lines = Files.lines(Paths.get(subject_selector.subject + \".txt\"))) { line1 = lines.skip(num).findFirst().get(); fw1.write(line1 + '\\n'); } num++; } num--; String line2; try (Stream<String> lines = Files.lines(Paths.get(subject_selector.subject + \"_sol\" + \".txt\"))) { line2 = lines.skip((int) (num / 2)).findFirst().get(); fw2.write(line2 + '\\n'); } catch (IOException e) { System.out.println(e); } num += 2; } fw1.close(); fw2.close(); } catch (IOException e) { System.out.println(e); } return true; } }"},{"file_path":"Quiz project\\subject_selector.java","file_content":"import java.util.Scanner; public class subject_selector { protected static String subject; static String select_subjet() { System.out.println(\"Select Subject by entering its option(1/2/3):-\"); System.out.println(\"1.) Programming 2.) General Knowledge 3.) Science\"); Scanner scan = new Scanner(System.in); int s = scan.nextInt(); switch (s) { case 1: subject = \"programming\"; break; case 2: subject = \"General_knowledge\"; break; case 3: subject = \"Science\"; break; default: System.out.println(\"Please select valid subject\"); System.exit(1); } return subject; } }"}]}}
{"project_id":97,"chunk_id":0,"content":{"main_file_path":"Quiz project\\Initiator.java","main_file_content":"import java.util.Scanner; public class Initiator extends Thread { public static boolean initiator() { boolean flag = false; int countdown = 5; Scanner scan = new Scanner(System.in); while (flag == false) { System.out.println(\"!! Enter 'START' to begin the Quiz !!\"); String input = scan.nextLine(); if (input.equals(\"START\")) { System.out.print(\"Quiz starting in \" + countdown); while (countdown-- > 0) { try { Thread.sleep(1500); } catch (InterruptedException e) { } System.out.print(\"\\b\" + countdown); } System.out.println(\"\"); flag = true; return flag; } else { System.out.println( \"Please enter 'START' correctly. If you not want to start quiz then just enter 'QUIT'\"); String in = scan.next(); if (in.equals(\"QUIT\")) { System.out.print(\"EXITING the Quiz\"); int i = 2; while (i-- > 0) { for (int j = 0; j < 3; j++) { System.out.print(\".\"); try { Thread.sleep(700); } catch (InterruptedException e) { } if (j == 2) { System.out.print(\"\\b\\b\\b\"); } } } return false; } if (in.equals(\"START\")) { input = \"START\"; System.out.print(\"Quiz starting in \" + countdown); while (countdown-- > 0) { try { Thread.sleep(1500); } catch (InterruptedException e) { } System.out.print(\"\\b\" + countdown); } System.out.println(\"\"); return true; } } } return true; } }","dependencies":[]}}
{"project_id":97,"chunk_id":0,"content":{"main_file_path":"Quiz project\\Main.java","main_file_content":"import java.util.Scanner; public class Main extends Host{ public static void main(String[] args) { Host Host_obj = new Main(); synchronized (Host_obj) { Host_obj.subject(); boolean Questions = Host_obj.questions(); if (Questions) { System.out.println(\"Successfully selected \" + question_setter.ques + \" questions for the Quiz..\"); } else { System.out.println(\"!! Unable to select questions !!\"); } System.out.print(\"Enter time(in seconds) for each question : \"); int time; Scanner scan = new Scanner(System.in); time = scan.nextInt(); Host_obj.time(time); System.out.println(\"Waiting for participants to connect..\"); ClientThread.initialise(question_setter.ques, Set_time.t); ClientThread clientThread = new ClientThread(1000); ClientThread clientThread1 = new ClientThread(1001); ClientThread clientThread2 = new ClientThread(1002); clientThread.start(); clientThread1.start(); clientThread2.start(); } } }","dependencies":[{"file_path":"Quiz project\\ClientThread.java","file_content":"import java.io.DataInputStream; import java.io.DataOutputStream; import java.io.IOException; import java.net.ServerSocket; import java.net.Socket; import java.util.concurrent.TimeUnit; class Quiz { int quesNum = 0; int threadnum = 0; static String Question, Option, Answer; static boolean has_started = false; void sendQues(DataOutputStream dataOutputStream, int count) throws IOException, InterruptedException { threadnum++; if (threadnum < 3) { synchronized (this) { wait(); } } if (!has_started) { if (Initiator.initiator()) { System.out.println(\"!! Quiz is LIVE now !!\"); System.out.println(\"\"); } has_started = true; } dataOutputStream.writeUTF(Question); dataOutputStream.writeUTF(Option); if (threadnum == 3) synchronized (this) { Answer = reader.readAns(); threadnum = 0; notifyAll(); } TimeUnit.SECONDS.sleep(5); } int receiveAns(DataInputStream dataInputStream) throws IOException { String ans = dataInputStream.readUTF(); if (ans.equals(Answer)) return 1; return 0; } } public class ClientThread extends Thread { static int count = 0, name_count = 0, total_ques = 0, time_per_ques = 0; final static Quiz quiz = new Quiz(); static boolean isAnswering = false; String name; int port, score = 0; ClientThread(int port) { this.port = port; } public static void initialise(int total_ques, int time_per_ques) { ClientThread.total_ques = total_ques; ClientThread.time_per_ques = time_per_ques; } @Override public void run() { try { ServerSocket serverSocket = new ServerSocket(port); Socket socket = serverSocket.accept(); DataOutputStream dataOutputStream = new DataOutputStream(socket.getOutputStream()); DataInputStream dataInputStream = new DataInputStream(socket.getInputStream()); name = dataInputStream.readUTF(); dataOutputStream.writeInt(total_ques); dataOutputStream.writeInt(time_per_ques); System.out.println(name + \" Connected.\"); count++; while (quiz.quesNum < total_ques) { if (port == 1000) { String[] list = reader.readQues(); quiz.Question = list[0]; quiz.Option = list[1]; } else { Thread.sleep(1000); } quiz.sendQues(dataOutputStream, count); if (port == 1000) isAnswering = true; score += quiz.receiveAns(dataInputStream); if (port == 1000) { isAnswering = false; count = 0; quiz.quesNum++; } else { if (quiz.quesNum == total_ques - 1 && isAnswering) break; Thread.sleep(500); } } serverSocket.close(); System.out.println(name + \"'s score: \" + score); } catch (IOException e) { e.printStackTrace(); } catch (InterruptedException e) { e.printStackTrace(); } } }"},{"file_path":"Quiz project\\Host.java","file_content":"abstract class Host { void subject() { subject_selector.select_subjet(); } boolean questions() { return question_setter.set_questions(); } public void time(int wait) { Set_time.set(wait); } }"}]}}
{"project_id":97,"chunk_id":0,"content":{"main_file_path":"Quiz project\\question_setter.java","main_file_content":"import java.io.*; import java.util.*; import java.nio.file.Files; import java.nio.file.Paths; import java.util.stream.*; public class question_setter { public static int ques = 0; public static boolean set_questions() { Set<Integer> que = new HashSet<Integer>(); Scanner s = new Scanner(System.in); System.out.print(\"Enter number of Questions in Quiz: \"); int n = s.nextInt(); ques = n; System.out.println(\"Selecting qustions of \" + subject_selector.subject + \" ...\"); try { Thread.sleep(2000); } catch (InterruptedException e) { System.out.print(e); } int num = 0; try { FileWriter fw1 = new FileWriter(\"Questions.txt\"); FileWriter fw2 = new FileWriter(\"AnswerKey.txt\"); while (n-- > 0) { boolean flag = false; while (!flag) { num = (int) (Math.random() * 100); if (num <= 30 && num % 2 == 1) { if (que.contains(num)) { flag = false; } else { que.add(num); flag = true; } } } num--; for (int i = 0; i < 2; i++) { String line1; try (Stream<String> lines = Files.lines(Paths.get(subject_selector.subject + \".txt\"))) { line1 = lines.skip(num).findFirst().get(); fw1.write(line1 + '\\n'); } num++; } num--; String line2; try (Stream<String> lines = Files.lines(Paths.get(subject_selector.subject + \"_sol\" + \".txt\"))) { line2 = lines.skip((int) (num / 2)).findFirst().get(); fw2.write(line2 + '\\n'); } catch (IOException e) { System.out.println(e); } num += 2; } fw1.close(); fw2.close(); } catch (IOException e) { System.out.println(e); } return true; } }","dependencies":[]}}
{"project_id":97,"chunk_id":0,"content":{"main_file_path":"Quiz project\\reader.java","main_file_content":"import java.io.*; import java.util.Scanner; public class reader { static int currentQues = 0; static FileInputStream fis1 = null, fis2 = null; static Scanner sc1 = null, sc2 = null; static String[] readQues() throws FileNotFoundException { if (currentQues == 0) { fis1 = new FileInputStream(\"Questions.txt\"); sc1 = new Scanner(fis1); } String[] list = new String[2]; list[0] = sc1.nextLine(); list[1] = sc1.nextLine(); currentQues++; return list; } static String readAns() throws FileNotFoundException { if (currentQues == 1) { fis2 = new FileInputStream(\"AnswerKey.txt\"); sc2 = new Scanner(fis2); } String ans = sc2.nextLine(); return ans; } }","dependencies":[]}}
{"project_id":97,"chunk_id":0,"content":{"main_file_path":"Quiz project\\Set_time.java","main_file_content":"class Set_time extends Thread { static protected int t; static void set(int time) { System.out.println(\"Participants have to answer each question in \" + time + \" seconds\"); t = time; } }","dependencies":[]}}
{"project_id":97,"chunk_id":0,"content":{"main_file_path":"Quiz project\\subject_selector.java","main_file_content":"import java.util.Scanner; public class subject_selector { protected static String subject; static String select_subjet() { System.out.println(\"Select Subject by entering its option(1/2/3):-\"); System.out.println(\"1.) Programming 2.) General Knowledge 3.) Science\"); Scanner scan = new Scanner(System.in); int s = scan.nextInt(); switch (s) { case 1: subject = \"programming\"; break; case 2: subject = \"General_knowledge\"; break; case 3: subject = \"Science\"; break; default: System.out.println(\"Please select valid subject\"); System.exit(1); } return subject; } }","dependencies":[]}}
{"project_id":97,"chunk_id":0,"content":{"main_file_path":"Quiz project\\timer.java","main_file_content":"import java.util.Timer; import java.util.TimerTask; import java.io.*; public class timer { private String str = \"\", str2 = \"\"; BufferedReader in; Timer timer = new Timer(); boolean hasRun = false; TimerTask task = new TimerTask() { @Override public void run() { hasRun = true; if (str.equals(\"\")) { System.out.println(\"you had enter nothing. Press 'Enter' to proceed to next ques.\"); System.out.println(\"\"); } timer.cancel(); } }; public String getInput(int seconds) throws IOException { timer.schedule(task, seconds * 1000); System.out.println(\"Answer within \" + seconds + \" seconds: \"); System.out.print(\"Your ans: \"); in = new BufferedReader(new InputStreamReader(System.in)); str2 = in.readLine(); if (!hasRun) { timer.cancel(); str = str2; } System.out.println(\"\"); return str; } }","dependencies":[]}}
{"project_id":101,"chunk_id":0,"content":{"main_file_path":"Riddle Game\\riddle_game.java","main_file_content":"import javax.swing.*; import java.awt.*; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; public class RiddleGame extends JFrame { private String[] riddles = { \"I speak without a mouth and hear without ears. I have no body, but I come alive with wind. What am I?\", \"I'm not alive, but I can grow; I don't have lungs, but I need air; I don't have a mouth, but water kills me. What am I?\", \"I have keys but can't open locks. What am I?\", \"I am taken from a mine, and shut up in a wooden case, from which I am never released, and yet I am used by almost every person. What am I?\", \"The more you take, the more you leave behind. What am I?\", \"I have cities but no houses, forests but no trees, and rivers but no water. What am I?\", \"I'm tall when I'm young and short when I'm old. What am I?\" }; private String[] answers = { \"An echo\", \"A fire\", \"A piano\", \"Pencil lead (graphite)\", \"Footsteps\", \"A map\", \"A candle\" }; private int currentRiddleIndex = 0; private JLabel riddleLabel; private JTextField answerField; private JButton submitButton; public RiddleGame() { setTitle(\"Riddle Game\"); setSize(400, 200); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setLayout(new BorderLayout()); riddleLabel = new JLabel(riddles[currentRiddleIndex]); answerField = new JTextField(20); submitButton = new JButton(\"Submit\"); JPanel centerPanel = new JPanel(); centerPanel.setLayout(new GridLayout(3, 1)); centerPanel.add(riddleLabel); centerPanel.add(answerField); centerPanel.add(submitButton); add(centerPanel, BorderLayout.CENTER); submitButton.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { checkAnswer(); } }); } private void checkAnswer() { String userAnswer = answerField.getText().trim().toLowerCase(); String correctAnswer = answers[currentRiddleIndex].toLowerCase(); if (userAnswer.equals(correctAnswer)) { JOptionPane.showMessageDialog(this, \"Correct!\"); } else { JOptionPane.showMessageDialog(this, \"Incorrect. Try again.\"); } currentRiddleIndex++; if (currentRiddleIndex < riddles.length) { riddleLabel.setText(riddles[currentRiddleIndex]); answerField.setText(\"\"); } else { JOptionPane.showMessageDialog(this, \"Congratulations! You've completed all the riddles.\"); System.exit(0); } } public static void main(String[] args) { SwingUtilities.invokeLater(() -> { RiddleGame game = new RiddleGame(); game.setVisible(true); }); } }","dependencies":[]}}
{"project_id":105,"chunk_id":0,"content":{"main_file_path":"SecExample-main\\.mvn\\wrapper\\MavenWrapperDownloader.java","main_file_content":"import java.net.*; import java.io.*; import java.nio.channels.*; import java.util.Properties; public class MavenWrapperDownloader { private static final String WRAPPER_VERSION = \"0.5.6\"; private static final String DEFAULT_DOWNLOAD_URL = \"https: + WRAPPER_VERSION + \"/maven-wrapper-\" + WRAPPER_VERSION + \".jar\"; private static final String MAVEN_WRAPPER_PROPERTIES_PATH = \".mvn/wrapper/maven-wrapper.properties\"; private static final String MAVEN_WRAPPER_JAR_PATH = \".mvn/wrapper/maven-wrapper.jar\"; private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\"; public static void main(String args[]) { System.out.println(\"- Downloader started\"); File baseDirectory = new File(args[0]); System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath()); File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH); String url = DEFAULT_DOWNLOAD_URL; if (mavenWrapperPropertyFile.exists()) { FileInputStream mavenWrapperPropertyFileInputStream = null; try { mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile); Properties mavenWrapperProperties = new Properties(); mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream); url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url); } catch (IOException e) { System.out.println(\"- ERROR loading '\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"'\"); } finally { try { if (mavenWrapperPropertyFileInputStream != null) { mavenWrapperPropertyFileInputStream.close(); } } catch (IOException e) { } } } System.out.println(\"- Downloading from: \" + url); File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH); if (!outputFile.getParentFile().exists()) { if (!outputFile.getParentFile().mkdirs()) { System.out.println( \"- ERROR creating output directory '\" + outputFile.getParentFile().getAbsolutePath() + \"'\"); } } System.out.println(\"- Downloading to: \" + outputFile.getAbsolutePath()); try { downloadFileFromURL(url, outputFile); System.out.println(\"Done\"); System.exit(0); } catch (Throwable e) { System.out.println(\"- Error downloading\"); e.printStackTrace(); System.exit(1); } } private static void downloadFileFromURL(String urlString, File destination) throws Exception { if (System.getenv(\"MVNW_USERNAME\") != null && System.getenv(\"MVNW_PASSWORD\") != null) { String username = System.getenv(\"MVNW_USERNAME\"); char[] password = System.getenv(\"MVNW_PASSWORD\").toCharArray(); Authenticator.setDefault(new Authenticator() { @Override protected PasswordAuthentication getPasswordAuthentication() { return new PasswordAuthentication(username, password); } }); } URL website = new URL(urlString); ReadableByteChannel rbc; rbc = Channels.newChannel(website.openStream()); FileOutputStream fos = new FileOutputStream(destination); fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE); fos.close(); rbc.close(); } }","dependencies":[]}}
{"project_id":105,"chunk_id":0,"content":{"main_file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\SecexampleApplication.java","main_file_content":"package com.suyu.secexample; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class SecexampleApplication { public static void main(String[] args) { SpringApplication.run(SecexampleApplication.class, args); } }","dependencies":[]}}
{"project_id":105,"chunk_id":0,"content":{"main_file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\cors\\controller\\corscontroller.java","main_file_content":"package com.suyu.secexample.cors.controller; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.CrossOrigin; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RestController; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; @Controller public class corscontroller { private static String info = \"{\\\"敏感信息账号\\\": \\\"suyu\\\", \\\"敏感信息手机\\\": \\\"13888888888\\\"，\\\"敏感信息qq\\\": \\\"10010\\\", \\\"敏感信息身份证\\\": \\\"321222222222222222\\\", \\\"敏感信息地址\\\": \\\"网商路699号阿里巴巴园区\\\"}\"; @CrossOrigin(origins = {\"*\"}) @GetMapping(\"/cors1\") public String vuln1(HttpServletRequest request, HttpServletResponse response, Model model) { model.addAttribute(\"name\",info); return \"cors/cors\"; } @GetMapping(\"/cors2\") public String vuln2(HttpServletRequest request, HttpServletResponse response, Model model) { response.setHeader(\"Access-Control-Allow-Origin\", \"*\"); model.addAttribute(\"name\",info); return \"cors/cors\"; } }","dependencies":[]}}
{"project_id":105,"chunk_id":0,"content":{"main_file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\csrf\\controller\\csrfcontroller.java","main_file_content":"package com.suyu.secexample.csrf.controller; import com.alibaba.fastjson.JSON; import com.alibaba.fastjson.JSONObject; import com.suyu.secexample.csrf.model.User; import com.suyu.secexample.csrf.service.UsernameService; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; @Controller public class csrfcontroller { User user = new User(); @Autowired private UsernameService userService; @GetMapping(\"/csrf\") public String input() { return \"csrf/csrf\"; } @RequestMapping(\"/csrf\") public String addUser(User user1, Model model) { user.setId(user1.getId()); user.setName(user1.getName()); user.setPwd(user1.getPwd()); userService.addUser(user); return \"csrf/csrf\"; } }","dependencies":[{"file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\csrf\\model\\User.java","file_content":"package com.suyu.secexample.csrf.model; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; @Data @NoArgsConstructor @AllArgsConstructor public class User { private int id; private String name; private String pwd; }"},{"file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\csrf\\service\\UsernameService.java","file_content":"package com.suyu.secexample.csrf.service; import com.suyu.secexample.csrf.model.User; import java.util.List; public interface UsernameService { public void addUser(User user); }"}]}}
{"project_id":105,"chunk_id":0,"content":{"main_file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\csrf\\mapper\\UsernameMapper.java","main_file_content":"package com.suyu.secexample.csrf.mapper; import com.suyu.secexample.csrf.model.User; import org.apache.ibatis.annotations.Mapper; import org.springframework.stereotype.Repository; import java.util.List; @Mapper @Repository public interface UsernameMapper { public void addUser(User user); }","dependencies":[{"file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\csrf\\model\\User.java","file_content":"package com.suyu.secexample.csrf.model; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; @Data @NoArgsConstructor @AllArgsConstructor public class User { private int id; private String name; private String pwd; }"}]}}
{"project_id":105,"chunk_id":0,"content":{"main_file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\csrf\\model\\User.java","main_file_content":"package com.suyu.secexample.csrf.model; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; @Data @NoArgsConstructor @AllArgsConstructor public class User { private int id; private String name; private String pwd; }","dependencies":[]}}
{"project_id":105,"chunk_id":0,"content":{"main_file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\csrf\\service\\UsernameService.java","main_file_content":"package com.suyu.secexample.csrf.service; import com.suyu.secexample.csrf.model.User; import java.util.List; public interface UsernameService { public void addUser(User user); }","dependencies":[{"file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\csrf\\model\\User.java","file_content":"package com.suyu.secexample.csrf.model; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; @Data @NoArgsConstructor @AllArgsConstructor public class User { private int id; private String name; private String pwd; }"}]}}
{"project_id":105,"chunk_id":0,"content":{"main_file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\csrf\\service\\impl\\UsernameServiceImpl.java","main_file_content":"package com.suyu.secexample.csrf.service.impl; import com.suyu.secexample.csrf.mapper.UsernameMapper; import com.suyu.secexample.csrf.model.User; import com.suyu.secexample.csrf.service.UsernameService; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import java.util.List; @Service public class UsernameServiceImpl implements UsernameService { @Autowired private UsernameMapper usernameMapper; @Override public void addUser(User user) { usernameMapper.addUser(user); } }","dependencies":[{"file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\csrf\\mapper\\UsernameMapper.java","file_content":"package com.suyu.secexample.csrf.mapper; import com.suyu.secexample.csrf.model.User; import org.apache.ibatis.annotations.Mapper; import org.springframework.stereotype.Repository; import java.util.List; @Mapper @Repository public interface UsernameMapper { public void addUser(User user); }"},{"file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\csrf\\model\\User.java","file_content":"package com.suyu.secexample.csrf.model; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; @Data @NoArgsConstructor @AllArgsConstructor public class User { private int id; private String name; private String pwd; }"},{"file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\csrf\\service\\UsernameService.java","file_content":"package com.suyu.secexample.csrf.service; import com.suyu.secexample.csrf.model.User; import java.util.List; public interface UsernameService { public void addUser(User user); }"}]}}
{"project_id":105,"chunk_id":0,"content":{"main_file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\fastjson\\controller\\fastjsoncontroller.java","main_file_content":"package com.suyu.secexample.fastjson.controller; import com.alibaba.fastjson.JSON; import com.alibaba.fastjson.JSONObject; import com.suyu.secexample.fastjson.model.User; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.*; @Controller public class fastjsoncontroller { @GetMapping(\"/fastjson\") public String input(){ return \"fastjson/fastjson\"; } User user = new User(); @RequestMapping (\"fastjson\") public String fastjson1(@RequestBody String jsonData, Model model) { JSONObject jsonObject = JSON.parseObject(jsonData); user.setAge(jsonObject.get(\"age\").toString()); user.setUsername(jsonObject.get(\"username\").toString()); model.addAttribute(\"result\",user); return \"fastjson/fastjsonoutput\"; } @RequestMapping (\"fastjson2\") public String fastjson2( Model model) { model.addAttribute(\"result\",user); return \"fastjson/fastjsonoutput\"; } }","dependencies":[{"file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\fastjson\\model\\User.java","file_content":"package com.suyu.secexample.fastjson.model; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; @Data @NoArgsConstructor @AllArgsConstructor public class User { private String age; private String username; }"}]}}
{"project_id":105,"chunk_id":0,"content":{"main_file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\fastjson\\model\\User.java","main_file_content":"package com.suyu.secexample.fastjson.model; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; @Data @NoArgsConstructor @AllArgsConstructor public class User { private String age; private String username; }","dependencies":[]}}
{"project_id":105,"chunk_id":0,"content":{"main_file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\messageecho\\controller\\messagecontroller.java","main_file_content":"package com.suyu.secexample.messageecho.controller; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PostMapping; import java.util.Random; @Controller public class messagecontroller { int Code = 0; @GetMapping(\"/messageecho\") public String index(){ return \"messageecho/messageecho\"; } @GetMapping(\"/messageecho/getcode\") public String getcode(Model model){ Random r = new Random(); int number = r.nextInt(900000); model.addAttribute(\"code\",number); System.out.println(number); Code =number; return \"messageecho/messageechooutput\"; } @PostMapping(\"/messageecho/testcode\") public String testcode(Integer code1,Model model){ String result =\"fail\"; if (code1 != null && code1 != 0 &&Code == code1){ System.out.println(true); result =\"sueecss\"; } model.addAttribute(\"code1\",result); return \"messageecho/messageechooutput\"; } }","dependencies":[]}}
{"project_id":105,"chunk_id":0,"content":{"main_file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\rce\\controller\\rcecontroller.java","main_file_content":"package com.suyu.secexample.rce.controller; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; @Controller public class rcecontroller { @RequestMapping(\"/rce\") public String input(){ return \"rce/rce\"; } @PostMapping(\"/rceoutput\") public String index(@RequestParam(\"command\") String command, Model model){ if(command==\"\" | command==null){ command= \"whoami\"; } Process p = null; String result = null; try { p = Runtime.getRuntime().exec(command); } catch (IOException e) { e.printStackTrace(); } InputStream is = p.getInputStream(); BufferedReader reader = new BufferedReader(new InputStreamReader(is)); String s = null; while (true) { try { if (!((s = reader.readLine()) != null)) break; } catch (IOException e) { e.printStackTrace(); } result = s; } model.addAttribute(\"result\",result); return \"rce/rceoutput\"; } }","dependencies":[]}}
{"project_id":105,"chunk_id":0,"content":{"main_file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\sql\\controller\\sqlcontroller.java","main_file_content":"package com.suyu.secexample.sql.controller; import com.github.pagehelper.PageInfo; import com.suyu.secexample.sql.dao.User; import com.suyu.secexample.sql.dao.pojo.UserQuery; import com.suyu.secexample.sql.service.UserService; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PostMapping; @Controller public class sqlcontroller { @Autowired private UserService userService; @GetMapping(\"/sql\") public String index(Model model, UserQuery userQuery){ PageInfo<User> userPageInfo = userService.listUserByName(userQuery); model.addAttribute(\"page\",userPageInfo); return \"sql/sql\"; } @PostMapping(\"/sql\") public String listUserByName(Model model,UserQuery userQuery){ PageInfo<User> userPageInfo = userService.listUserByName(userQuery); model.addAttribute(\"page\",userPageInfo); return \"sql/sql\"; } }","dependencies":[{"file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\sql\\dao\\User.java","file_content":"package com.suyu.secexample.sql.dao; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; @Data @AllArgsConstructor @NoArgsConstructor public class User { private Integer id; private String name; private String pwd; }"},{"file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\sql\\dao\\pojo\\UserQuery.java","file_content":"package com.suyu.secexample.sql.dao.pojo; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; @Data @AllArgsConstructor @NoArgsConstructor public class UserQuery { private Integer pageNum = 1; private Integer pageSize = 10; private String name; }"},{"file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\sql\\service\\UserService.java","file_content":"package com.suyu.secexample.sql.service; import com.github.pagehelper.PageInfo; import com.suyu.secexample.sql.dao.User; import com.suyu.secexample.sql.dao.pojo.UserQuery; import java.util.List; public interface UserService { public List<User> listUser(); public PageInfo<User> listUserByName(UserQuery userQuery); }"}]}}
{"project_id":105,"chunk_id":0,"content":{"main_file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\sql\\dao\\User.java","main_file_content":"package com.suyu.secexample.sql.dao; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; @Data @AllArgsConstructor @NoArgsConstructor public class User { private Integer id; private String name; private String pwd; }","dependencies":[]}}
{"project_id":105,"chunk_id":0,"content":{"main_file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\sql\\dao\\pojo\\UserQuery.java","main_file_content":"package com.suyu.secexample.sql.dao.pojo; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; @Data @AllArgsConstructor @NoArgsConstructor public class UserQuery { private Integer pageNum = 1; private Integer pageSize = 10; private String name; }","dependencies":[]}}
{"project_id":105,"chunk_id":0,"content":{"main_file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\sql\\mapper\\UserMapper.java","main_file_content":"package com.suyu.secexample.sql.mapper; import com.suyu.secexample.sql.dao.User; import com.suyu.secexample.sql.dao.pojo.UserQuery; import org.apache.ibatis.annotations.*; import org.springframework.stereotype.Repository; import java.util.List; @Mapper @Repository public interface UserMapper { public List<User> listUser(); public List<User> listUserByName(UserQuery userQuery); }","dependencies":[{"file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\sql\\dao\\User.java","file_content":"package com.suyu.secexample.sql.dao; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; @Data @AllArgsConstructor @NoArgsConstructor public class User { private Integer id; private String name; private String pwd; }"},{"file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\sql\\dao\\pojo\\UserQuery.java","file_content":"package com.suyu.secexample.sql.dao.pojo; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; @Data @AllArgsConstructor @NoArgsConstructor public class UserQuery { private Integer pageNum = 1; private Integer pageSize = 10; private String name; }"}]}}
{"project_id":105,"chunk_id":0,"content":{"main_file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\sql\\service\\UserService.java","main_file_content":"package com.suyu.secexample.sql.service; import com.github.pagehelper.PageInfo; import com.suyu.secexample.sql.dao.User; import com.suyu.secexample.sql.dao.pojo.UserQuery; import java.util.List; public interface UserService { public List<User> listUser(); public PageInfo<User> listUserByName(UserQuery userQuery); }","dependencies":[{"file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\sql\\dao\\User.java","file_content":"package com.suyu.secexample.sql.dao; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; @Data @AllArgsConstructor @NoArgsConstructor public class User { private Integer id; private String name; private String pwd; }"},{"file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\sql\\dao\\pojo\\UserQuery.java","file_content":"package com.suyu.secexample.sql.dao.pojo; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; @Data @AllArgsConstructor @NoArgsConstructor public class UserQuery { private Integer pageNum = 1; private Integer pageSize = 10; private String name; }"}]}}
{"project_id":105,"chunk_id":0,"content":{"main_file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\sql\\service\\impl\\UserServiceImpl.java","main_file_content":"package com.suyu.secexample.sql.service.impl; import com.github.pagehelper.PageHelper; import com.github.pagehelper.PageInfo; import com.suyu.secexample.sql.dao.User; import com.suyu.secexample.sql.dao.pojo.UserQuery; import com.suyu.secexample.sql.mapper.UserMapper; import com.suyu.secexample.sql.service.UserService; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import java.util.List; @Service public class UserServiceImpl implements UserService { @Autowired private UserMapper userMapper; @Override public List<User> listUser() { return userMapper.listUser(); } @Override public PageInfo<User> listUserByName(UserQuery userQuery) { PageHelper.startPage(userQuery.getPageNum(),userQuery.getPageSize()); return new PageInfo<User>(userMapper.listUserByName(userQuery)); } }","dependencies":[{"file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\sql\\dao\\User.java","file_content":"package com.suyu.secexample.sql.dao; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; @Data @AllArgsConstructor @NoArgsConstructor public class User { private Integer id; private String name; private String pwd; }"},{"file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\sql\\dao\\pojo\\UserQuery.java","file_content":"package com.suyu.secexample.sql.dao.pojo; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; @Data @AllArgsConstructor @NoArgsConstructor public class UserQuery { private Integer pageNum = 1; private Integer pageSize = 10; private String name; }"},{"file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\sql\\mapper\\UserMapper.java","file_content":"package com.suyu.secexample.sql.mapper; import com.suyu.secexample.sql.dao.User; import com.suyu.secexample.sql.dao.pojo.UserQuery; import org.apache.ibatis.annotations.*; import org.springframework.stereotype.Repository; import java.util.List; @Mapper @Repository public interface UserMapper { public List<User> listUser(); public List<User> listUserByName(UserQuery userQuery); }"},{"file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\sql\\service\\UserService.java","file_content":"package com.suyu.secexample.sql.service; import com.github.pagehelper.PageInfo; import com.suyu.secexample.sql.dao.User; import com.suyu.secexample.sql.dao.pojo.UserQuery; import java.util.List; public interface UserService { public List<User> listUser(); public PageInfo<User> listUserByName(UserQuery userQuery); }"}]}}
{"project_id":105,"chunk_id":0,"content":{"main_file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\ssrf\\controller\\ssrfcontroller.java","main_file_content":"package com.suyu.secexample.ssrf.controller; import com.suyu.secexample.ssrf.utils.HttpTool; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestParam; @Controller public class ssrfcontroller { @GetMapping(\"/ssrf\") public String index(){ return \"ssrf/ssrf\"; } @PostMapping(\"/ssrfoutput\") public String index(@RequestParam(\"url\") String url, Model model){ String result = null; try { result = String.valueOf(HttpTool.getHttpReuest(String.valueOf(url))); } catch (Exception e) { e.printStackTrace(); } model.addAttribute(\"result\",result); return \"ssrf/ssrfoutput\"; } }","dependencies":[{"file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\ssrf\\utils\\HttpTool.java","file_content":"package com.suyu.secexample.ssrf.utils; import java.io.*; import java.net.URL; import java.net.URLConnection; public class HttpTool { public static Object httpRequest(String requestUrl) throws Exception { String htmlContent; URL url = new URL(requestUrl); URLConnection urlConnection = url.openConnection(); BufferedReader base = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\")); StringBuffer html = new StringBuffer(); while ((htmlContent = base.readLine()) != null) { html.append(htmlContent); } base.close(); return html; } public static Object getHttpReuest(String requestUrl) throws Exception { return httpRequest(requestUrl); } }"}]}}
{"project_id":105,"chunk_id":0,"content":{"main_file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\ssrf\\utils\\HttpTool.java","main_file_content":"package com.suyu.secexample.ssrf.utils; import java.io.*; import java.net.URL; import java.net.URLConnection; public class HttpTool { public static Object httpRequest(String requestUrl) throws Exception { String htmlContent; URL url = new URL(requestUrl); URLConnection urlConnection = url.openConnection(); BufferedReader base = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\")); StringBuffer html = new StringBuffer(); while ((htmlContent = base.readLine()) != null) { html.append(htmlContent); } base.close(); return html; } public static Object getHttpReuest(String requestUrl) throws Exception { return httpRequest(requestUrl); } }","dependencies":[]}}
{"project_id":105,"chunk_id":0,"content":{"main_file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\xss\\controller\\xsscontroller.java","main_file_content":"package com.suyu.secexample.xss.controller; import com.suyu.secexample.xss.model.Person; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestParam; @Controller public class xsscontroller { @GetMapping(\"/home\") public String index() { return \"index\"; } @GetMapping (\"/xss\") public String input(){ return \"xss/xss\"; } @PostMapping (\"/xssoutput\") public String outputmessage(@RequestParam(\"name\") String name, Model model){ Person person = new Person(name); model.addAttribute(\"myperson\",person); return \"xss/xssoutput\"; } }","dependencies":[{"file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\xss\\model\\Person.java","file_content":"package com.suyu.secexample.xss.model; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; @Data @NoArgsConstructor @AllArgsConstructor public class Person { private String name; }"}]}}
{"project_id":105,"chunk_id":0,"content":{"main_file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\xss\\model\\Person.java","main_file_content":"package com.suyu.secexample.xss.model; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; @Data @NoArgsConstructor @AllArgsConstructor public class Person { private String name; }","dependencies":[]}}
{"project_id":105,"chunk_id":0,"content":{"main_file_path":"SecExample-main\\src\\main\\java\\com\\suyu\\secexample\\xxe\\controller\\xxecontroller.java","main_file_content":"package com.suyu.secexample.xxe.controller; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; @Controller public class xxecontroller { @GetMapping(\"/xxe\") public String input(){ return \"xxe/xxe\"; } }","dependencies":[]}}
{"project_id":105,"chunk_id":0,"content":{"main_file_path":"SecExample-main\\src\\test\\java\\com\\suyu\\secexample\\SecexampleApplicationTests.java","main_file_content":"package com.suyu.secexample; import org.junit.jupiter.api.Test; import org.springframework.boot.test.context.SpringBootTest; @SpringBootTest class SecexampleApplicationTests { @Test void contextLoads() { } }","dependencies":[]}}
{"project_id":107,"chunk_id":0,"content":{"main_file_path":"ShootPlane-master\\PlaneWar\\gen\\com\\itheima\\shotplane\\BuildConfig.java","main_file_content":"package com.itheima.shotplane; public final class BuildConfig { public final static boolean DEBUG = true; }","dependencies":[]}}
{"project_id":107,"chunk_id":0,"content":{"main_file_path":"ShootPlane-master\\PlaneWar\\gen\\com\\itheima\\shotplane\\R.java","main_file_content":"package com.itheima.shotplane; public final class R { public static final class anim { public static final int dialog_enter=0x7f040000; public static final int dialog_exit=0x7f040001; } public static final class attr { } public static final class dimen { public static final int activity_horizontal_margin=0x7f050000; public static final int activity_vertical_margin=0x7f050001; } public static final class drawable { public static final int ball=0x7f020000; public static final int bullet=0x7f020001; public static final int dialog_bg=0x7f020002; public static final int dialog_bg_normal=0x7f020003; public static final int dialog_bg_pressed=0x7f020004; public static final int enemy1=0x7f020005; public static final int enemy2=0x7f020006; public static final int enemy3=0x7f020007; public static final int enemy4=0x7f020008; public static final int enemy5=0x7f020009; public static final int enemy_boom=0x7f02000a; public static final int game_bg=0x7f02000b; public static final int game_loading=0x7f02000c; public static final int game_loading1=0x7f02000d; public static final int game_loading2=0x7f02000e; public static final int game_loading3=0x7f02000f; public static final int hero1=0x7f020010; public static final int hero2=0x7f020011; public static final int hero3=0x7f020012; public static final int hero4=0x7f020013; public static final int hero5=0x7f020014; public static final int hero_boom=0x7f020015; public static final int logo=0x7f020016; public static final int text_bg=0x7f020017; } public static final class id { public static final int btn_finish=0x7f080004; public static final int btn_restart=0x7f080003; public static final int logo=0x7f080000; public static final int text=0x7f080002; public static final int view=0x7f080001; } public static final class layout { public static final int activity_loading=0x7f030000; public static final int activity_main=0x7f030001; public static final int dialog_game=0x7f030002; } public static final class string { public static final int app_name=0x7f060000; } public static final class style { public static final int AppBaseTheme=0x7f070000; public static final int AppTheme=0x7f070001; public static final int DialogAnim=0x7f070003; public static final int GameDialog=0x7f070002; } }","dependencies":[]}}
{"project_id":107,"chunk_id":0,"content":{"main_file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\PlaneWar.java","main_file_content":"package com.itheima.shotplane; import com.itheima.shotplane.activity.MainActivity; import com.itheima.shotplane.entity.BaseEntity; import com.itheima.shotplane.entity.Bullet; import com.itheima.shotplane.entity.Enemy; import com.itheima.shotplane.entity.Hero; import com.itheima.shotplane.listener.AddBoomListener; import com.itheima.shotplane.listener.AddBulletListener; import com.itheima.shotplane.listener.AddEnemyListener; import com.itheima.shotplane.listener.AddHeroListener; import com.itheima.shotplane.util.SharePrefUtil; import com.itheima.shotplane.util.SharePrefUtil.KEY; import android.content.Context; import android.graphics.Canvas; import android.graphics.Color; import android.graphics.Paint; import android.graphics.Rect; import android.graphics.RectF; import android.graphics.Paint.Align; import android.graphics.Paint.Style; import android.graphics.drawable.Drawable; import android.os.Handler; import android.util.AttributeSet; import android.util.Log; import android.view.MotionEvent; import android.view.View; import android.widget.FrameLayout; public class PlaneWar extends FrameLayout { private String TAG = \"PlaneWar\"; private Paint paint = null; private String str = \"当前得分：%s\"; private int score = 0; private int textHeight = 0; private final int CREATE_ENEMY_DURATION = 1000; private final int CREATE_BULLET_DURATION = 100; private final int MSG_ENEMY = 1; private final int MSG_BULLET = 2; private Handler handler = new Handler() { public void handleMessage(android.os.Message msg) { switch (msg.what) { case MSG_ENEMY: generateEnemy(); break; case MSG_BULLET: generateBullet(); break; } }; }; public PlaneWar(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); init(); } public PlaneWar(Context context, AttributeSet attrs) { super(context, attrs); init(); } public PlaneWar(Context context) { super(context); init(); } private void init() { paint = new Paint(); paint.setTextSize(16); paint.setColor(Color.WHITE); paint.setTextSkewX(-0.15f); textHeight = getTextHeight(str); } public void start() { generateEnemy(); generateHero(); generateBullet(); } private Hero mHero; public Hero getHero() { return mHero; } private void generateHero() { mHero = new Hero(getContext()); mHero.setVisibility(View.INVISIBLE); mHero.getViewTreeObserver().addOnGlobalLayoutListener( new AddHeroListener(mHero)); addView(mHero); } private void generateEnemy() { Enemy enemy = new Enemy(getContext()); enemy.setPlaneWar(this); enemy.getViewTreeObserver().addOnGlobalLayoutListener( new AddEnemyListener(enemy)); addView(enemy); handler.sendEmptyMessageDelayed(MSG_ENEMY, CREATE_ENEMY_DURATION); } private void generateBullet() { Bullet bullet = new Bullet(getContext()); bullet.setHero(mHero); bullet.getViewTreeObserver().addOnGlobalLayoutListener( new AddBulletListener(bullet)); addView(bullet); handler.sendEmptyMessageDelayed(MSG_BULLET, CREATE_BULLET_DURATION); } private float downX, downY; @Override public boolean onTouchEvent(MotionEvent event) { if (mHero.getVisibility() != View.VISIBLE) { return false; } switch (event.getAction()) { case MotionEvent.ACTION_DOWN: downX = event.getX(); downY = event.getY(); moveHeroTo(downX, downY); break; case MotionEvent.ACTION_MOVE: float moveX = event.getX(); float moveY = event.getY(); float deltaX = moveX - downX; float deltaY = moveY - downY; moveHeroBy(deltaX, deltaY); downX = moveX; downY = moveY; break; case MotionEvent.ACTION_UP: break; } return true; } private void moveHeroTo(float x, float y) { float xOffset = x - mHero.getTranslationX() - mHero.getWidth() / 2; float yOffset = y - mHero.getTranslationY() - mHero.getHeight() / 2; moveHeroBy(xOffset, yOffset); } private void moveHeroBy(float xOffset, float yOffset) { float newTranslationX = mHero.getTranslationX() + xOffset; float newTranslationY = mHero.getTranslationY() + yOffset; if (newTranslationX < 0) newTranslationX = 0; if (newTranslationX > (getWidth() - mHero.getWidth())) { newTranslationX = getWidth() - mHero.getWidth(); } if (newTranslationY < 0) newTranslationY = 0; if (newTranslationY > (getHeight() - mHero.getHeight())) { newTranslationY = getHeight() - mHero.getHeight(); } mHero.setTranslationX(newTranslationX); mHero.setTranslationY(newTranslationY); } public void end() { clearAll(); MainActivity mainActivity = (MainActivity) getContext(); mainActivity.finish(); } public void clearAll() { handler.removeMessages(MSG_ENEMY); handler.removeMessages(MSG_BULLET); int childCount = getChildCount(); for (int i = 0; i < childCount; i++) { View view = getChildAt(i); if (view instanceof Enemy) { Enemy enemy = (Enemy) view; enemy.stopAnimation(); } else if (view instanceof Bullet) { Bullet bullet = (Bullet) view; bullet.stopAnimation(); } } removeAllViews(); resetScore(); } public void boomEnemy(float translationX, float translationY) { View v = new View(getContext()); Drawable drawable = getResources().getDrawable(R.drawable.enemy_boom); v.setLayoutParams(new LayoutParams(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight())); v.setBackgroundDrawable(drawable); v.setTranslationX(translationX); v.setTranslationY(translationY); v.getViewTreeObserver().addOnGlobalLayoutListener( new AddBoomListener(v)); addView(v); } public void boomHero() { View v = new View(getContext()); Drawable drawable = getResources().getDrawable(R.drawable.hero_boom); v.setLayoutParams(new LayoutParams(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight())); v.setBackgroundDrawable(drawable); v.setTranslationX(mHero.getTranslationX()); v.setTranslationY(mHero.getTranslationY()); v.getViewTreeObserver().addOnGlobalLayoutListener( new AddBoomListener(v)); addView(v); } public void removeBullet() { handler.removeMessages(MSG_BULLET); int childCount = getChildCount(); for (int i = 0; i < childCount; i++) { View view = getChildAt(i); if (view instanceof Bullet) { Bullet bullet = (Bullet) view; bullet.stopAnimation(); removeView(bullet); } } } public void hideHero() { mHero.setVisibility(View.INVISIBLE); } @Override protected void dispatchDraw(Canvas canvas) { super.dispatchDraw(canvas); canvas.drawText(String.format(str, score), 1, textHeight + 1, paint); } public int getTextHeight(String text) { Rect bounds = new Rect(); paint.getTextBounds(text, 0, text.length(), bounds); return bounds.height(); } public void increaseScore() { score += 100; postInvalidate(); } private void resetScore() { score = 0; postInvalidate(); } public void saveScore() { int localScore = SharePrefUtil.getInt(getContext(), KEY.SCORE, 0); SharePrefUtil.saveInt(getContext(), KEY.SCORE, Math.max(localScore, score)); } }","dependencies":[{"file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\activity\\MainActivity.java","file_content":"package com.itheima.shotplane.activity; import android.app.Activity; import android.os.Bundle; import android.os.Handler; import android.view.View; import com.itheima.shotplane.PlaneWar; import com.itheima.shotplane.R; public class MainActivity extends Activity { private PlaneWar planeWar; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); planeWar = (PlaneWar) View.inflate(this, R.layout.activity_main, null); setContentView(planeWar); new Handler().postDelayed(new Runnable() { @Override public void run() { planeWar.start(); } }, 1000); } }"},{"file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\entity\\Bullet.java","file_content":"package com.itheima.shotplane.entity; import com.itheima.shotplane.PlaneWar; import com.itheima.shotplane.R; import com.itheima.shotplane.R.drawable; import com.nineoldandroids.animation.Animator; import com.nineoldandroids.animation.AnimatorListenerAdapter; import com.nineoldandroids.view.ViewPropertyAnimator; import android.content.Context; import android.graphics.Bitmap; import android.graphics.BitmapFactory; import android.graphics.Canvas; import android.util.AttributeSet; import android.view.View; import android.view.ViewGroup; import android.view.animation.LinearInterpolator; public class Bullet extends BaseEntity{ public Bullet(Context context) { super(context); } private boolean isCanShot = true; private Hero hero; public void setCanShot(boolean isCanShot){ this.isCanShot = isCanShot; } public boolean isCanShot(){ return isCanShot; } @Override protected int getImageRes() { return R.drawable.bullet; } private ViewPropertyAnimator animator; public void shot(float targetY,long duration) { if(animator==null){ animator = ViewPropertyAnimator.animate(this).translationY(targetY) .setDuration(duration) .setInterpolator(new LinearInterpolator()) .setListener(new AnimatorListenerAdapter() { @Override public void onAnimationEnd(Animator animation) { bitmap.recycle(); PlaneWar war = (PlaneWar) getParent(); if(war!=null){ war.removeView(Bullet.this); } } @Override public void onAnimationCancel(Animator animation) { bitmap.recycle(); PlaneWar war = (PlaneWar) getParent(); if(war!=null){ war.removeView(Bullet.this); } } }); } animator.start(); } public Hero getHero() { return hero; } public void setHero(Hero hero) { this.hero = hero; } @Override public void stopAnimation() { if(animator!=null){ animator.cancel(); } } }"},{"file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\entity\\Enemy.java","file_content":"package com.itheima.shotplane.entity; import com.itheima.shotplane.PlaneWar; import com.itheima.shotplane.R; import com.itheima.shotplane.animator.FlyAnimator; import com.itheima.shotplane.animator.FlyAnimator.OnEnemyFlyListener; import com.itheima.shotplane.dialog.GameDialog.OnRestartClickListener; import com.itheima.shotplane.util.Utils; import com.nineoldandroids.animation.Animator; import com.nineoldandroids.animation.AnimatorListenerAdapter; import android.content.Context; import android.graphics.RectF; import android.os.Handler; import android.util.Log; import android.view.View; import android.view.animation.LinearInterpolator; public class Enemy extends BaseEntity implements OnEnemyFlyListener { protected PlaneWar planeWar; protected final int MAX_SHOT_COUNT = 8; public PlaneWar getPlaneWar() { return planeWar; } public void setPlaneWar(PlaneWar planeWar) { this.planeWar = planeWar; } public Enemy(Context context) { super(context); } private long duration; private int targetY; private int shotCount; public long getDuration() { return duration; } public void setDuration(long duration) { this.duration = duration; } public int getTargetY() { return targetY; } public void setTargetY(int targetY) { this.targetY = targetY; } FlyAnimator flyAnimator; public void fly() { flyAnimator = new FlyAnimator(this, getTranslationY(), targetY); flyAnimator.setOnEnemyFlyListener(this); flyAnimator.setAnimationListener(new AnimatorListenerAdapter() { @Override public void onAnimationEnd(Animator animation) { PlaneWar war = (PlaneWar) getParent(); if (war != null) { war.removeView(Enemy.this); } } @Override public void onAnimationCancel(Animator animation) { PlaneWar war = (PlaneWar) getParent(); if (war != null) { war.removeView(Enemy.this); } } }); flyAnimator.setInterpolator(new LinearInterpolator()); flyAnimator.start(duration); } @Override protected int getImageRes() { return R.drawable.enemy1; } @Override public void onFly(float translationY) { Hero hero = planeWar.getHero(); if (hero != null && hero.getVisibility() == View.VISIBLE && getParent()!=null) { if (isShareRect(this, hero) || isInRect(this, hero)) { planeWar.boomEnemy(getTranslationX(), getTranslationY()); flyAnimator.cancel(); planeWar.boomHero(); planeWar.removeBullet(); planeWar.hideHero(); planeWar.saveScore(); showDialog(); } for (int i = 0; i < planeWar.getChildCount(); i++) { View view = planeWar.getChildAt(i); if (view instanceof Bullet) { Bullet bullet = (Bullet) view; if (bullet.isCanShot()) { if (isShareRect(bullet, this) || isInRect(bullet, this)) { setShotCount(getShotCount() + 1); bullet.setCanShot(false); bullet.setVisibility(View.INVISIBLE); bullet.stopAnimation(); } if (getShotCount() >= MAX_SHOT_COUNT) { planeWar.boomEnemy(getTranslationX(), getTranslationY()); flyAnimator.cancel(); planeWar.increaseScore(); break; } } } } } } public boolean isInRect(View v1, View v2) { RectF rect1 = Utils.getTranslationRect(v1); RectF rect2 = Utils.getTranslationRect(v2); return rect1.left >= rect2.left && rect1.top >= rect2.top && rect1.right <= rect2.right && rect1.bottom <= rect2.bottom; } public boolean isShareRect(View v1, View v2) { RectF rect1 = Utils.getTranslationRect(v1); RectF rect2 = Utils.getTranslationRect(v2); boolean isLeftIn = rect1.left >= rect2.left && rect1.left <= rect2.right; boolean isTopIn = rect1.top >= rect2.top && rect1.top <= rect2.bottom; boolean isRightIn = rect1.right >= rect2.left && rect1.right <= rect2.right; boolean isBottomIn = rect1.bottom >= rect2.top && rect1.bottom <= rect2.bottom; return (isLeftIn && isTopIn) || (isLeftIn && isBottomIn) || (isRightIn && isTopIn) || (isRightIn && isBottomIn) || (isTopIn && isLeftIn) || (isTopIn && isRightIn) || (isBottomIn && isLeftIn) || (isBottomIn && isRightIn); } public int getShotCount() { return shotCount; } public void setShotCount(int shotCount) { this.shotCount = shotCount; } @Override public void stopAnimation() { if (flyAnimator != null) { flyAnimator.cancel(); } } private void showDialog() { new Handler().postDelayed(new Runnable() { @Override public void run() { Utils.showGameDialog(getContext(), new OnRestartClickListener() { @Override public void onRestartClick() { planeWar.clearAll(); planeWar.start(); } @Override public void onFinishClick() { planeWar.end(); } }); } }, 1500); } }"},{"file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\entity\\Hero.java","file_content":"package com.itheima.shotplane.entity; import com.itheima.shotplane.R; import android.content.Context; public class Hero extends BaseEntity{ public Hero(Context context) { super(context); } @Override protected int getImageRes() { return R.drawable.hero1; } }"},{"file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\listener\\AddBoomListener.java","file_content":"package com.itheima.shotplane.listener; import android.graphics.drawable.AnimationDrawable; import android.graphics.drawable.Drawable; import android.os.Handler; import android.view.View; import android.view.ViewGroup; public class AddBoomListener extends AddEntityListener<View>{ public AddBoomListener(View t) { super(t); } @Override protected void onLayoutFinish() { Drawable background = t.getBackground(); if(background instanceof AnimationDrawable){ AnimationDrawable bg = (AnimationDrawable) background; bg.start(); new Handler().postDelayed(new Runnable() { @Override public void run() { ((ViewGroup)t.getParent()).removeView(t); } }, 601); } } }"},{"file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\listener\\AddBulletListener.java","file_content":"package com.itheima.shotplane.listener; import android.util.Log; import com.itheima.shotplane.entity.Bullet; import com.itheima.shotplane.entity.Hero; public class AddBulletListener extends AddEntityListener<Bullet>{ public AddBulletListener(Bullet t) { super(t); } @Override protected void onLayoutFinish() { Bullet bullet = t; Hero hero = bullet.getHero(); bullet.setTranslationX(hero.getTranslationX()+hero.getWidth()/2); bullet.setTranslationY(hero.getTranslationY()-bullet.getHeight()); float targetY = -bullet.getHeight(); float distance = targetY - bullet.getTranslationY(); long duration = (long) (Math.abs(distance)*3); bullet.shot(targetY,duration); } }"},{"file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\listener\\AddEnemyListener.java","file_content":"package com.itheima.shotplane.listener; import java.util.Random; import com.itheima.shotplane.PlaneWar; import com.itheima.shotplane.entity.Enemy; public class AddEnemyListener extends AddEntityListener<Enemy> { public AddEnemyListener(Enemy t) { super(t); } @Override protected void onLayoutFinish() { Enemy enemy = t; PlaneWar war = (PlaneWar) enemy.getParent(); if (war != null) { Random random = new Random(); enemy.setTranslationY(-1 * enemy.getHeight()); float targetX = random.nextInt((war.getWidth() - enemy.getWidth())); enemy.setTranslationX(targetX); enemy.setDuration(4000 + new Random().nextInt(2000)); enemy.setTargetY(war.getHeight() + enemy.getHeight()); enemy.fly(); } } }"},{"file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\listener\\AddHeroListener.java","file_content":"package com.itheima.shotplane.listener; import android.view.View; import android.view.ViewGroup; import com.itheima.shotplane.entity.Hero; public class AddHeroListener extends AddEntityListener<Hero>{ public AddHeroListener(Hero t) { super(t); } @Override protected void onLayoutFinish() { Hero hero = t; int parentWidth = ((ViewGroup)hero.getParent()).getWidth(); int parentHeitht = ((ViewGroup)hero.getParent()).getHeight(); float translationX = parentWidth/2 - hero.getWidth()/2; hero.setTranslationX(translationX); hero.setTranslationY(parentHeitht-hero.getHeight()); hero.setVisibility(View.VISIBLE); } }"},{"file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\util\\SharePrefUtil.java","file_content":"package com.itheima.shotplane.util; import android.content.Context; import android.content.SharedPreferences; public class SharePrefUtil { private static String tag = SharePrefUtil.class.getSimpleName(); private final static String SP_NAME = \"config\"; private static SharedPreferences sp; public interface KEY { String SCORE = \"score\"; } public static void saveBoolean(Context context, String key, boolean value) { if (sp == null) sp = context.getSharedPreferences(SP_NAME, 0); sp.edit().putBoolean(key, value).commit(); } public static void saveString(Context context, String key, String value) { if (sp == null) sp = context.getSharedPreferences(SP_NAME, 0); sp.edit().putString(key, value).commit(); } public static void saveLong(Context context, String key, long value) { if (sp == null) sp = context.getSharedPreferences(SP_NAME, 0); sp.edit().putLong(key, value).commit(); } public static void saveInt(Context context, String key, int value) { if (sp == null) sp = context.getSharedPreferences(SP_NAME, 0); sp.edit().putInt(key, value).commit(); } public static void saveFloat(Context context, String key, float value) { if (sp == null) sp = context.getSharedPreferences(SP_NAME, 0); sp.edit().putFloat(key, value).commit(); } public static String getString(Context context, String key, String defValue) { if (sp == null) sp = context.getSharedPreferences(SP_NAME, 0); return sp.getString(key, defValue); } public static int getInt(Context context, String key, int defValue) { if (sp == null) sp = context.getSharedPreferences(SP_NAME, 0); return sp.getInt(key, defValue); } public static long getLong(Context context, String key, long defValue) { if (sp == null) sp = context.getSharedPreferences(SP_NAME, 0); return sp.getLong(key, defValue); } public static float getFloat(Context context, String key, float defValue) { if (sp == null) sp = context.getSharedPreferences(SP_NAME, 0); return sp.getFloat(key, defValue); } public static boolean getBoolean(Context context, String key, boolean defValue) { if (sp == null) sp = context.getSharedPreferences(SP_NAME, 0); return sp.getBoolean(key, defValue); } }"}]}}
{"project_id":107,"chunk_id":0,"content":{"main_file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\activity\\LoadingActivity.java","main_file_content":"package com.itheima.shotplane.activity; import com.itheima.shotplane.R; import android.app.Activity; import android.content.Intent; import android.graphics.drawable.AnimationDrawable; import android.os.Bundle; import android.os.Handler; import android.view.View; public class LoadingActivity extends Activity{ @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_loading); View view = findViewById(R.id.view); AnimationDrawable drawable = (AnimationDrawable) view.getBackground(); drawable.start(); new Handler().postDelayed(new Runnable() { @Override public void run() { startActivity(new Intent(LoadingActivity.this,MainActivity.class)); finish(); } }, 2701); } }","dependencies":[{"file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\activity\\MainActivity.java","file_content":"package com.itheima.shotplane.activity; import android.app.Activity; import android.os.Bundle; import android.os.Handler; import android.view.View; import com.itheima.shotplane.PlaneWar; import com.itheima.shotplane.R; public class MainActivity extends Activity { private PlaneWar planeWar; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); planeWar = (PlaneWar) View.inflate(this, R.layout.activity_main, null); setContentView(planeWar); new Handler().postDelayed(new Runnable() { @Override public void run() { planeWar.start(); } }, 1000); } }"}]}}
{"project_id":107,"chunk_id":0,"content":{"main_file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\activity\\MainActivity.java","main_file_content":"package com.itheima.shotplane.activity; import android.app.Activity; import android.os.Bundle; import android.os.Handler; import android.view.View; import com.itheima.shotplane.PlaneWar; import com.itheima.shotplane.R; public class MainActivity extends Activity { private PlaneWar planeWar; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); planeWar = (PlaneWar) View.inflate(this, R.layout.activity_main, null); setContentView(planeWar); new Handler().postDelayed(new Runnable() { @Override public void run() { planeWar.start(); } }, 1000); } }","dependencies":[{"file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\PlaneWar.java","file_content":"package com.itheima.shotplane; import com.itheima.shotplane.activity.MainActivity; import com.itheima.shotplane.entity.BaseEntity; import com.itheima.shotplane.entity.Bullet; import com.itheima.shotplane.entity.Enemy; import com.itheima.shotplane.entity.Hero; import com.itheima.shotplane.listener.AddBoomListener; import com.itheima.shotplane.listener.AddBulletListener; import com.itheima.shotplane.listener.AddEnemyListener; import com.itheima.shotplane.listener.AddHeroListener; import com.itheima.shotplane.util.SharePrefUtil; import com.itheima.shotplane.util.SharePrefUtil.KEY; import android.content.Context; import android.graphics.Canvas; import android.graphics.Color; import android.graphics.Paint; import android.graphics.Rect; import android.graphics.RectF; import android.graphics.Paint.Align; import android.graphics.Paint.Style; import android.graphics.drawable.Drawable; import android.os.Handler; import android.util.AttributeSet; import android.util.Log; import android.view.MotionEvent; import android.view.View; import android.widget.FrameLayout; public class PlaneWar extends FrameLayout { private String TAG = \"PlaneWar\"; private Paint paint = null; private String str = \"当前得分：%s\"; private int score = 0; private int textHeight = 0; private final int CREATE_ENEMY_DURATION = 1000; private final int CREATE_BULLET_DURATION = 100; private final int MSG_ENEMY = 1; private final int MSG_BULLET = 2; private Handler handler = new Handler() { public void handleMessage(android.os.Message msg) { switch (msg.what) { case MSG_ENEMY: generateEnemy(); break; case MSG_BULLET: generateBullet(); break; } }; }; public PlaneWar(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); init(); } public PlaneWar(Context context, AttributeSet attrs) { super(context, attrs); init(); } public PlaneWar(Context context) { super(context); init(); } private void init() { paint = new Paint(); paint.setTextSize(16); paint.setColor(Color.WHITE); paint.setTextSkewX(-0.15f); textHeight = getTextHeight(str); } public void start() { generateEnemy(); generateHero(); generateBullet(); } private Hero mHero; public Hero getHero() { return mHero; } private void generateHero() { mHero = new Hero(getContext()); mHero.setVisibility(View.INVISIBLE); mHero.getViewTreeObserver().addOnGlobalLayoutListener( new AddHeroListener(mHero)); addView(mHero); } private void generateEnemy() { Enemy enemy = new Enemy(getContext()); enemy.setPlaneWar(this); enemy.getViewTreeObserver().addOnGlobalLayoutListener( new AddEnemyListener(enemy)); addView(enemy); handler.sendEmptyMessageDelayed(MSG_ENEMY, CREATE_ENEMY_DURATION); } private void generateBullet() { Bullet bullet = new Bullet(getContext()); bullet.setHero(mHero); bullet.getViewTreeObserver().addOnGlobalLayoutListener( new AddBulletListener(bullet)); addView(bullet); handler.sendEmptyMessageDelayed(MSG_BULLET, CREATE_BULLET_DURATION); } private float downX, downY; @Override public boolean onTouchEvent(MotionEvent event) { if (mHero.getVisibility() != View.VISIBLE) { return false; } switch (event.getAction()) { case MotionEvent.ACTION_DOWN: downX = event.getX(); downY = event.getY(); moveHeroTo(downX, downY); break; case MotionEvent.ACTION_MOVE: float moveX = event.getX(); float moveY = event.getY(); float deltaX = moveX - downX; float deltaY = moveY - downY; moveHeroBy(deltaX, deltaY); downX = moveX; downY = moveY; break; case MotionEvent.ACTION_UP: break; } return true; } private void moveHeroTo(float x, float y) { float xOffset = x - mHero.getTranslationX() - mHero.getWidth() / 2; float yOffset = y - mHero.getTranslationY() - mHero.getHeight() / 2; moveHeroBy(xOffset, yOffset); } private void moveHeroBy(float xOffset, float yOffset) { float newTranslationX = mHero.getTranslationX() + xOffset; float newTranslationY = mHero.getTranslationY() + yOffset; if (newTranslationX < 0) newTranslationX = 0; if (newTranslationX > (getWidth() - mHero.getWidth())) { newTranslationX = getWidth() - mHero.getWidth(); } if (newTranslationY < 0) newTranslationY = 0; if (newTranslationY > (getHeight() - mHero.getHeight())) { newTranslationY = getHeight() - mHero.getHeight(); } mHero.setTranslationX(newTranslationX); mHero.setTranslationY(newTranslationY); } public void end() { clearAll(); MainActivity mainActivity = (MainActivity) getContext(); mainActivity.finish(); } public void clearAll() { handler.removeMessages(MSG_ENEMY); handler.removeMessages(MSG_BULLET); int childCount = getChildCount(); for (int i = 0; i < childCount; i++) { View view = getChildAt(i); if (view instanceof Enemy) { Enemy enemy = (Enemy) view; enemy.stopAnimation(); } else if (view instanceof Bullet) { Bullet bullet = (Bullet) view; bullet.stopAnimation(); } } removeAllViews(); resetScore(); } public void boomEnemy(float translationX, float translationY) { View v = new View(getContext()); Drawable drawable = getResources().getDrawable(R.drawable.enemy_boom); v.setLayoutParams(new LayoutParams(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight())); v.setBackgroundDrawable(drawable); v.setTranslationX(translationX); v.setTranslationY(translationY); v.getViewTreeObserver().addOnGlobalLayoutListener( new AddBoomListener(v)); addView(v); } public void boomHero() { View v = new View(getContext()); Drawable drawable = getResources().getDrawable(R.drawable.hero_boom); v.setLayoutParams(new LayoutParams(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight())); v.setBackgroundDrawable(drawable); v.setTranslationX(mHero.getTranslationX()); v.setTranslationY(mHero.getTranslationY()); v.getViewTreeObserver().addOnGlobalLayoutListener( new AddBoomListener(v)); addView(v); } public void removeBullet() { handler.removeMessages(MSG_BULLET); int childCount = getChildCount(); for (int i = 0; i < childCount; i++) { View view = getChildAt(i); if (view instanceof Bullet) { Bullet bullet = (Bullet) view; bullet.stopAnimation(); removeView(bullet); } } } public void hideHero() { mHero.setVisibility(View.INVISIBLE); } @Override protected void dispatchDraw(Canvas canvas) { super.dispatchDraw(canvas); canvas.drawText(String.format(str, score), 1, textHeight + 1, paint); } public int getTextHeight(String text) { Rect bounds = new Rect(); paint.getTextBounds(text, 0, text.length(), bounds); return bounds.height(); } public void increaseScore() { score += 100; postInvalidate(); } private void resetScore() { score = 0; postInvalidate(); } public void saveScore() { int localScore = SharePrefUtil.getInt(getContext(), KEY.SCORE, 0); SharePrefUtil.saveInt(getContext(), KEY.SCORE, Math.max(localScore, score)); } }"}]}}
{"project_id":107,"chunk_id":0,"content":{"main_file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\animator\\BaseAnimator.java","main_file_content":"package com.itheima.shotplane.animator; import android.view.View; import android.view.animation.Interpolator; import com.nineoldandroids.animation.Animator.AnimatorListener; import com.nineoldandroids.animation.AnimatorListenerAdapter; import com.nineoldandroids.animation.ValueAnimator; import com.nineoldandroids.animation.ValueAnimator.AnimatorUpdateListener; public abstract class BaseAnimator { public ValueAnimator animator; protected View target; public BaseAnimator(View target,float startValue,float endValue){ this.target = target; animator = ValueAnimator.ofFloat(startValue,endValue); animator.addUpdateListener(new AnimatorUpdateListener() { @Override public void onAnimationUpdate(ValueAnimator animator) { float animatedValue = (Float) animator.getAnimatedValue(); doAnim(animatedValue); } }); } public void start(long duration){ animator.setDuration(duration); animator.start(); } public void setAnimationListener(AnimatorListenerAdapter listener){ animator.addListener(listener); } public void setInterpolator(Interpolator value){ animator.setInterpolator(value); } public void cancel(){ animator.cancel(); } protected abstract void doAnim(float animatedValue); }","dependencies":[]}}
{"project_id":107,"chunk_id":0,"content":{"main_file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\animator\\FlyAnimator.java","main_file_content":"package com.itheima.shotplane.animator; import android.view.View; public class FlyAnimator extends BaseAnimator { public FlyAnimator(View target, float startValue, float endValue) { super(target, startValue, endValue); } @Override protected void doAnim(float animatedValue) { target.setTranslationY(animatedValue); if(listener!=null){ listener.onFly(animatedValue); } } private OnEnemyFlyListener listener; public void setOnEnemyFlyListener(OnEnemyFlyListener listener){ this.listener = listener; } public interface OnEnemyFlyListener{ void onFly(float translationY); } }","dependencies":[{"file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\animator\\BaseAnimator.java","file_content":"package com.itheima.shotplane.animator; import android.view.View; import android.view.animation.Interpolator; import com.nineoldandroids.animation.Animator.AnimatorListener; import com.nineoldandroids.animation.AnimatorListenerAdapter; import com.nineoldandroids.animation.ValueAnimator; import com.nineoldandroids.animation.ValueAnimator.AnimatorUpdateListener; public abstract class BaseAnimator { public ValueAnimator animator; protected View target; public BaseAnimator(View target,float startValue,float endValue){ this.target = target; animator = ValueAnimator.ofFloat(startValue,endValue); animator.addUpdateListener(new AnimatorUpdateListener() { @Override public void onAnimationUpdate(ValueAnimator animator) { float animatedValue = (Float) animator.getAnimatedValue(); doAnim(animatedValue); } }); } public void start(long duration){ animator.setDuration(duration); animator.start(); } public void setAnimationListener(AnimatorListenerAdapter listener){ animator.addListener(listener); } public void setInterpolator(Interpolator value){ animator.setInterpolator(value); } public void cancel(){ animator.cancel(); } protected abstract void doAnim(float animatedValue); }"}]}}
{"project_id":107,"chunk_id":0,"content":{"main_file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\dialog\\GameDialog.java","main_file_content":"package com.itheima.shotplane.dialog; import com.itheima.shotplane.R; import com.itheima.shotplane.activity.MainActivity; import com.itheima.shotplane.util.SharePrefUtil; import com.itheima.shotplane.util.SharePrefUtil.KEY; import android.app.Dialog; import android.content.Context; import android.os.Bundle; import android.os.Handler; import android.view.View; import android.view.View.OnClickListener; import android.widget.Button; import android.widget.TextView; public class GameDialog extends Dialog implements OnClickListener { public GameDialog(Context context) { this(context, R.style.GameDialog); } public GameDialog(Context context, int theme) { super(context, theme); } private Button btn_restart, btn_finish; private TextView text; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.dialog_game); btn_restart = (Button) findViewById(R.id.btn_restart); btn_finish = (Button) findViewById(R.id.btn_finish); text = (TextView) findViewById(R.id.text); btn_finish.setOnClickListener(this); btn_restart.setOnClickListener(this); int score = SharePrefUtil.getInt(getContext(), KEY.SCORE, 0); text.setText(\"目前最高得分：\"+score); } @Override public void onClick(final View v) { dismiss(); new Handler().postDelayed(new Runnable() { public void run() { switch (v.getId()) { case R.id.btn_restart: if (listener != null) { listener.onRestartClick(); } break; case R.id.btn_finish: if (listener != null) { listener.onFinishClick(); } break; } } }, 1100); } private OnRestartClickListener listener; public void setOnRestartClickListener(OnRestartClickListener listener) { this.listener = listener; } public interface OnRestartClickListener { void onRestartClick(); void onFinishClick(); } }","dependencies":[{"file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\util\\SharePrefUtil.java","file_content":"package com.itheima.shotplane.util; import android.content.Context; import android.content.SharedPreferences; public class SharePrefUtil { private static String tag = SharePrefUtil.class.getSimpleName(); private final static String SP_NAME = \"config\"; private static SharedPreferences sp; public interface KEY { String SCORE = \"score\"; } public static void saveBoolean(Context context, String key, boolean value) { if (sp == null) sp = context.getSharedPreferences(SP_NAME, 0); sp.edit().putBoolean(key, value).commit(); } public static void saveString(Context context, String key, String value) { if (sp == null) sp = context.getSharedPreferences(SP_NAME, 0); sp.edit().putString(key, value).commit(); } public static void saveLong(Context context, String key, long value) { if (sp == null) sp = context.getSharedPreferences(SP_NAME, 0); sp.edit().putLong(key, value).commit(); } public static void saveInt(Context context, String key, int value) { if (sp == null) sp = context.getSharedPreferences(SP_NAME, 0); sp.edit().putInt(key, value).commit(); } public static void saveFloat(Context context, String key, float value) { if (sp == null) sp = context.getSharedPreferences(SP_NAME, 0); sp.edit().putFloat(key, value).commit(); } public static String getString(Context context, String key, String defValue) { if (sp == null) sp = context.getSharedPreferences(SP_NAME, 0); return sp.getString(key, defValue); } public static int getInt(Context context, String key, int defValue) { if (sp == null) sp = context.getSharedPreferences(SP_NAME, 0); return sp.getInt(key, defValue); } public static long getLong(Context context, String key, long defValue) { if (sp == null) sp = context.getSharedPreferences(SP_NAME, 0); return sp.getLong(key, defValue); } public static float getFloat(Context context, String key, float defValue) { if (sp == null) sp = context.getSharedPreferences(SP_NAME, 0); return sp.getFloat(key, defValue); } public static boolean getBoolean(Context context, String key, boolean defValue) { if (sp == null) sp = context.getSharedPreferences(SP_NAME, 0); return sp.getBoolean(key, defValue); } }"}]}}
{"project_id":107,"chunk_id":0,"content":{"main_file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\entity\\BaseEntity.java","main_file_content":"package com.itheima.shotplane.entity; import android.content.Context; import android.graphics.Bitmap; import android.graphics.BitmapFactory; import android.graphics.Canvas; import android.graphics.Color; import android.graphics.Paint; import android.graphics.Paint.Style; import android.graphics.drawable.AnimationDrawable; import android.graphics.drawable.Drawable; import android.view.View; public abstract class BaseEntity extends View { protected Bitmap bitmap; public BaseEntity(Context context) { super(context); init(); } private void init() { bitmap = BitmapFactory.decodeResource(getResources(), getImageRes()); } @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { setMeasuredDimension(bitmap.getWidth(), bitmap.getHeight()); } @Override protected void onDraw(Canvas canvas) { canvas.drawBitmap(bitmap, 0, 0, null); } protected abstract int getImageRes(); public void stopAnimation(){ } }","dependencies":[]}}
{"project_id":107,"chunk_id":0,"content":{"main_file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\entity\\Bullet.java","main_file_content":"package com.itheima.shotplane.entity; import com.itheima.shotplane.PlaneWar; import com.itheima.shotplane.R; import com.itheima.shotplane.R.drawable; import com.nineoldandroids.animation.Animator; import com.nineoldandroids.animation.AnimatorListenerAdapter; import com.nineoldandroids.view.ViewPropertyAnimator; import android.content.Context; import android.graphics.Bitmap; import android.graphics.BitmapFactory; import android.graphics.Canvas; import android.util.AttributeSet; import android.view.View; import android.view.ViewGroup; import android.view.animation.LinearInterpolator; public class Bullet extends BaseEntity{ public Bullet(Context context) { super(context); } private boolean isCanShot = true; private Hero hero; public void setCanShot(boolean isCanShot){ this.isCanShot = isCanShot; } public boolean isCanShot(){ return isCanShot; } @Override protected int getImageRes() { return R.drawable.bullet; } private ViewPropertyAnimator animator; public void shot(float targetY,long duration) { if(animator==null){ animator = ViewPropertyAnimator.animate(this).translationY(targetY) .setDuration(duration) .setInterpolator(new LinearInterpolator()) .setListener(new AnimatorListenerAdapter() { @Override public void onAnimationEnd(Animator animation) { bitmap.recycle(); PlaneWar war = (PlaneWar) getParent(); if(war!=null){ war.removeView(Bullet.this); } } @Override public void onAnimationCancel(Animator animation) { bitmap.recycle(); PlaneWar war = (PlaneWar) getParent(); if(war!=null){ war.removeView(Bullet.this); } } }); } animator.start(); } public Hero getHero() { return hero; } public void setHero(Hero hero) { this.hero = hero; } @Override public void stopAnimation() { if(animator!=null){ animator.cancel(); } } }","dependencies":[{"file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\PlaneWar.java","file_content":"package com.itheima.shotplane; import com.itheima.shotplane.activity.MainActivity; import com.itheima.shotplane.entity.BaseEntity; import com.itheima.shotplane.entity.Bullet; import com.itheima.shotplane.entity.Enemy; import com.itheima.shotplane.entity.Hero; import com.itheima.shotplane.listener.AddBoomListener; import com.itheima.shotplane.listener.AddBulletListener; import com.itheima.shotplane.listener.AddEnemyListener; import com.itheima.shotplane.listener.AddHeroListener; import com.itheima.shotplane.util.SharePrefUtil; import com.itheima.shotplane.util.SharePrefUtil.KEY; import android.content.Context; import android.graphics.Canvas; import android.graphics.Color; import android.graphics.Paint; import android.graphics.Rect; import android.graphics.RectF; import android.graphics.Paint.Align; import android.graphics.Paint.Style; import android.graphics.drawable.Drawable; import android.os.Handler; import android.util.AttributeSet; import android.util.Log; import android.view.MotionEvent; import android.view.View; import android.widget.FrameLayout; public class PlaneWar extends FrameLayout { private String TAG = \"PlaneWar\"; private Paint paint = null; private String str = \"当前得分：%s\"; private int score = 0; private int textHeight = 0; private final int CREATE_ENEMY_DURATION = 1000; private final int CREATE_BULLET_DURATION = 100; private final int MSG_ENEMY = 1; private final int MSG_BULLET = 2; private Handler handler = new Handler() { public void handleMessage(android.os.Message msg) { switch (msg.what) { case MSG_ENEMY: generateEnemy(); break; case MSG_BULLET: generateBullet(); break; } }; }; public PlaneWar(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); init(); } public PlaneWar(Context context, AttributeSet attrs) { super(context, attrs); init(); } public PlaneWar(Context context) { super(context); init(); } private void init() { paint = new Paint(); paint.setTextSize(16); paint.setColor(Color.WHITE); paint.setTextSkewX(-0.15f); textHeight = getTextHeight(str); } public void start() { generateEnemy(); generateHero(); generateBullet(); } private Hero mHero; public Hero getHero() { return mHero; } private void generateHero() { mHero = new Hero(getContext()); mHero.setVisibility(View.INVISIBLE); mHero.getViewTreeObserver().addOnGlobalLayoutListener( new AddHeroListener(mHero)); addView(mHero); } private void generateEnemy() { Enemy enemy = new Enemy(getContext()); enemy.setPlaneWar(this); enemy.getViewTreeObserver().addOnGlobalLayoutListener( new AddEnemyListener(enemy)); addView(enemy); handler.sendEmptyMessageDelayed(MSG_ENEMY, CREATE_ENEMY_DURATION); } private void generateBullet() { Bullet bullet = new Bullet(getContext()); bullet.setHero(mHero); bullet.getViewTreeObserver().addOnGlobalLayoutListener( new AddBulletListener(bullet)); addView(bullet); handler.sendEmptyMessageDelayed(MSG_BULLET, CREATE_BULLET_DURATION); } private float downX, downY; @Override public boolean onTouchEvent(MotionEvent event) { if (mHero.getVisibility() != View.VISIBLE) { return false; } switch (event.getAction()) { case MotionEvent.ACTION_DOWN: downX = event.getX(); downY = event.getY(); moveHeroTo(downX, downY); break; case MotionEvent.ACTION_MOVE: float moveX = event.getX(); float moveY = event.getY(); float deltaX = moveX - downX; float deltaY = moveY - downY; moveHeroBy(deltaX, deltaY); downX = moveX; downY = moveY; break; case MotionEvent.ACTION_UP: break; } return true; } private void moveHeroTo(float x, float y) { float xOffset = x - mHero.getTranslationX() - mHero.getWidth() / 2; float yOffset = y - mHero.getTranslationY() - mHero.getHeight() / 2; moveHeroBy(xOffset, yOffset); } private void moveHeroBy(float xOffset, float yOffset) { float newTranslationX = mHero.getTranslationX() + xOffset; float newTranslationY = mHero.getTranslationY() + yOffset; if (newTranslationX < 0) newTranslationX = 0; if (newTranslationX > (getWidth() - mHero.getWidth())) { newTranslationX = getWidth() - mHero.getWidth(); } if (newTranslationY < 0) newTranslationY = 0; if (newTranslationY > (getHeight() - mHero.getHeight())) { newTranslationY = getHeight() - mHero.getHeight(); } mHero.setTranslationX(newTranslationX); mHero.setTranslationY(newTranslationY); } public void end() { clearAll(); MainActivity mainActivity = (MainActivity) getContext(); mainActivity.finish(); } public void clearAll() { handler.removeMessages(MSG_ENEMY); handler.removeMessages(MSG_BULLET); int childCount = getChildCount(); for (int i = 0; i < childCount; i++) { View view = getChildAt(i); if (view instanceof Enemy) { Enemy enemy = (Enemy) view; enemy.stopAnimation(); } else if (view instanceof Bullet) { Bullet bullet = (Bullet) view; bullet.stopAnimation(); } } removeAllViews(); resetScore(); } public void boomEnemy(float translationX, float translationY) { View v = new View(getContext()); Drawable drawable = getResources().getDrawable(R.drawable.enemy_boom); v.setLayoutParams(new LayoutParams(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight())); v.setBackgroundDrawable(drawable); v.setTranslationX(translationX); v.setTranslationY(translationY); v.getViewTreeObserver().addOnGlobalLayoutListener( new AddBoomListener(v)); addView(v); } public void boomHero() { View v = new View(getContext()); Drawable drawable = getResources().getDrawable(R.drawable.hero_boom); v.setLayoutParams(new LayoutParams(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight())); v.setBackgroundDrawable(drawable); v.setTranslationX(mHero.getTranslationX()); v.setTranslationY(mHero.getTranslationY()); v.getViewTreeObserver().addOnGlobalLayoutListener( new AddBoomListener(v)); addView(v); } public void removeBullet() { handler.removeMessages(MSG_BULLET); int childCount = getChildCount(); for (int i = 0; i < childCount; i++) { View view = getChildAt(i); if (view instanceof Bullet) { Bullet bullet = (Bullet) view; bullet.stopAnimation(); removeView(bullet); } } } public void hideHero() { mHero.setVisibility(View.INVISIBLE); } @Override protected void dispatchDraw(Canvas canvas) { super.dispatchDraw(canvas); canvas.drawText(String.format(str, score), 1, textHeight + 1, paint); } public int getTextHeight(String text) { Rect bounds = new Rect(); paint.getTextBounds(text, 0, text.length(), bounds); return bounds.height(); } public void increaseScore() { score += 100; postInvalidate(); } private void resetScore() { score = 0; postInvalidate(); } public void saveScore() { int localScore = SharePrefUtil.getInt(getContext(), KEY.SCORE, 0); SharePrefUtil.saveInt(getContext(), KEY.SCORE, Math.max(localScore, score)); } }"},{"file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\entity\\BaseEntity.java","file_content":"package com.itheima.shotplane.entity; import android.content.Context; import android.graphics.Bitmap; import android.graphics.BitmapFactory; import android.graphics.Canvas; import android.graphics.Color; import android.graphics.Paint; import android.graphics.Paint.Style; import android.graphics.drawable.AnimationDrawable; import android.graphics.drawable.Drawable; import android.view.View; public abstract class BaseEntity extends View { protected Bitmap bitmap; public BaseEntity(Context context) { super(context); init(); } private void init() { bitmap = BitmapFactory.decodeResource(getResources(), getImageRes()); } @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { setMeasuredDimension(bitmap.getWidth(), bitmap.getHeight()); } @Override protected void onDraw(Canvas canvas) { canvas.drawBitmap(bitmap, 0, 0, null); } protected abstract int getImageRes(); public void stopAnimation(){ } }"},{"file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\entity\\Hero.java","file_content":"package com.itheima.shotplane.entity; import com.itheima.shotplane.R; import android.content.Context; public class Hero extends BaseEntity{ public Hero(Context context) { super(context); } @Override protected int getImageRes() { return R.drawable.hero1; } }"}]}}
{"project_id":107,"chunk_id":0,"content":{"main_file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\entity\\Enemy.java","main_file_content":"package com.itheima.shotplane.entity; import com.itheima.shotplane.PlaneWar; import com.itheima.shotplane.R; import com.itheima.shotplane.animator.FlyAnimator; import com.itheima.shotplane.animator.FlyAnimator.OnEnemyFlyListener; import com.itheima.shotplane.dialog.GameDialog.OnRestartClickListener; import com.itheima.shotplane.util.Utils; import com.nineoldandroids.animation.Animator; import com.nineoldandroids.animation.AnimatorListenerAdapter; import android.content.Context; import android.graphics.RectF; import android.os.Handler; import android.util.Log; import android.view.View; import android.view.animation.LinearInterpolator; public class Enemy extends BaseEntity implements OnEnemyFlyListener { protected PlaneWar planeWar; protected final int MAX_SHOT_COUNT = 8; public PlaneWar getPlaneWar() { return planeWar; } public void setPlaneWar(PlaneWar planeWar) { this.planeWar = planeWar; } public Enemy(Context context) { super(context); } private long duration; private int targetY; private int shotCount; public long getDuration() { return duration; } public void setDuration(long duration) { this.duration = duration; } public int getTargetY() { return targetY; } public void setTargetY(int targetY) { this.targetY = targetY; } FlyAnimator flyAnimator; public void fly() { flyAnimator = new FlyAnimator(this, getTranslationY(), targetY); flyAnimator.setOnEnemyFlyListener(this); flyAnimator.setAnimationListener(new AnimatorListenerAdapter() { @Override public void onAnimationEnd(Animator animation) { PlaneWar war = (PlaneWar) getParent(); if (war != null) { war.removeView(Enemy.this); } } @Override public void onAnimationCancel(Animator animation) { PlaneWar war = (PlaneWar) getParent(); if (war != null) { war.removeView(Enemy.this); } } }); flyAnimator.setInterpolator(new LinearInterpolator()); flyAnimator.start(duration); } @Override protected int getImageRes() { return R.drawable.enemy1; } @Override public void onFly(float translationY) { Hero hero = planeWar.getHero(); if (hero != null && hero.getVisibility() == View.VISIBLE && getParent()!=null) { if (isShareRect(this, hero) || isInRect(this, hero)) { planeWar.boomEnemy(getTranslationX(), getTranslationY()); flyAnimator.cancel(); planeWar.boomHero(); planeWar.removeBullet(); planeWar.hideHero(); planeWar.saveScore(); showDialog(); } for (int i = 0; i < planeWar.getChildCount(); i++) { View view = planeWar.getChildAt(i); if (view instanceof Bullet) { Bullet bullet = (Bullet) view; if (bullet.isCanShot()) { if (isShareRect(bullet, this) || isInRect(bullet, this)) { setShotCount(getShotCount() + 1); bullet.setCanShot(false); bullet.setVisibility(View.INVISIBLE); bullet.stopAnimation(); } if (getShotCount() >= MAX_SHOT_COUNT) { planeWar.boomEnemy(getTranslationX(), getTranslationY()); flyAnimator.cancel(); planeWar.increaseScore(); break; } } } } } } public boolean isInRect(View v1, View v2) { RectF rect1 = Utils.getTranslationRect(v1); RectF rect2 = Utils.getTranslationRect(v2); return rect1.left >= rect2.left && rect1.top >= rect2.top && rect1.right <= rect2.right && rect1.bottom <= rect2.bottom; } public boolean isShareRect(View v1, View v2) { RectF rect1 = Utils.getTranslationRect(v1); RectF rect2 = Utils.getTranslationRect(v2); boolean isLeftIn = rect1.left >= rect2.left && rect1.left <= rect2.right; boolean isTopIn = rect1.top >= rect2.top && rect1.top <= rect2.bottom; boolean isRightIn = rect1.right >= rect2.left && rect1.right <= rect2.right; boolean isBottomIn = rect1.bottom >= rect2.top && rect1.bottom <= rect2.bottom; return (isLeftIn && isTopIn) || (isLeftIn && isBottomIn) || (isRightIn && isTopIn) || (isRightIn && isBottomIn) || (isTopIn && isLeftIn) || (isTopIn && isRightIn) || (isBottomIn && isLeftIn) || (isBottomIn && isRightIn); } public int getShotCount() { return shotCount; } public void setShotCount(int shotCount) { this.shotCount = shotCount; } @Override public void stopAnimation() { if (flyAnimator != null) { flyAnimator.cancel(); } } private void showDialog() { new Handler().postDelayed(new Runnable() { @Override public void run() { Utils.showGameDialog(getContext(), new OnRestartClickListener() { @Override public void onRestartClick() { planeWar.clearAll(); planeWar.start(); } @Override public void onFinishClick() { planeWar.end(); } }); } }, 1500); } }","dependencies":[{"file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\PlaneWar.java","file_content":"package com.itheima.shotplane; import com.itheima.shotplane.activity.MainActivity; import com.itheima.shotplane.entity.BaseEntity; import com.itheima.shotplane.entity.Bullet; import com.itheima.shotplane.entity.Enemy; import com.itheima.shotplane.entity.Hero; import com.itheima.shotplane.listener.AddBoomListener; import com.itheima.shotplane.listener.AddBulletListener; import com.itheima.shotplane.listener.AddEnemyListener; import com.itheima.shotplane.listener.AddHeroListener; import com.itheima.shotplane.util.SharePrefUtil; import com.itheima.shotplane.util.SharePrefUtil.KEY; import android.content.Context; import android.graphics.Canvas; import android.graphics.Color; import android.graphics.Paint; import android.graphics.Rect; import android.graphics.RectF; import android.graphics.Paint.Align; import android.graphics.Paint.Style; import android.graphics.drawable.Drawable; import android.os.Handler; import android.util.AttributeSet; import android.util.Log; import android.view.MotionEvent; import android.view.View; import android.widget.FrameLayout; public class PlaneWar extends FrameLayout { private String TAG = \"PlaneWar\"; private Paint paint = null; private String str = \"当前得分：%s\"; private int score = 0; private int textHeight = 0; private final int CREATE_ENEMY_DURATION = 1000; private final int CREATE_BULLET_DURATION = 100; private final int MSG_ENEMY = 1; private final int MSG_BULLET = 2; private Handler handler = new Handler() { public void handleMessage(android.os.Message msg) { switch (msg.what) { case MSG_ENEMY: generateEnemy(); break; case MSG_BULLET: generateBullet(); break; } }; }; public PlaneWar(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); init(); } public PlaneWar(Context context, AttributeSet attrs) { super(context, attrs); init(); } public PlaneWar(Context context) { super(context); init(); } private void init() { paint = new Paint(); paint.setTextSize(16); paint.setColor(Color.WHITE); paint.setTextSkewX(-0.15f); textHeight = getTextHeight(str); } public void start() { generateEnemy(); generateHero(); generateBullet(); } private Hero mHero; public Hero getHero() { return mHero; } private void generateHero() { mHero = new Hero(getContext()); mHero.setVisibility(View.INVISIBLE); mHero.getViewTreeObserver().addOnGlobalLayoutListener( new AddHeroListener(mHero)); addView(mHero); } private void generateEnemy() { Enemy enemy = new Enemy(getContext()); enemy.setPlaneWar(this); enemy.getViewTreeObserver().addOnGlobalLayoutListener( new AddEnemyListener(enemy)); addView(enemy); handler.sendEmptyMessageDelayed(MSG_ENEMY, CREATE_ENEMY_DURATION); } private void generateBullet() { Bullet bullet = new Bullet(getContext()); bullet.setHero(mHero); bullet.getViewTreeObserver().addOnGlobalLayoutListener( new AddBulletListener(bullet)); addView(bullet); handler.sendEmptyMessageDelayed(MSG_BULLET, CREATE_BULLET_DURATION); } private float downX, downY; @Override public boolean onTouchEvent(MotionEvent event) { if (mHero.getVisibility() != View.VISIBLE) { return false; } switch (event.getAction()) { case MotionEvent.ACTION_DOWN: downX = event.getX(); downY = event.getY(); moveHeroTo(downX, downY); break; case MotionEvent.ACTION_MOVE: float moveX = event.getX(); float moveY = event.getY(); float deltaX = moveX - downX; float deltaY = moveY - downY; moveHeroBy(deltaX, deltaY); downX = moveX; downY = moveY; break; case MotionEvent.ACTION_UP: break; } return true; } private void moveHeroTo(float x, float y) { float xOffset = x - mHero.getTranslationX() - mHero.getWidth() / 2; float yOffset = y - mHero.getTranslationY() - mHero.getHeight() / 2; moveHeroBy(xOffset, yOffset); } private void moveHeroBy(float xOffset, float yOffset) { float newTranslationX = mHero.getTranslationX() + xOffset; float newTranslationY = mHero.getTranslationY() + yOffset; if (newTranslationX < 0) newTranslationX = 0; if (newTranslationX > (getWidth() - mHero.getWidth())) { newTranslationX = getWidth() - mHero.getWidth(); } if (newTranslationY < 0) newTranslationY = 0; if (newTranslationY > (getHeight() - mHero.getHeight())) { newTranslationY = getHeight() - mHero.getHeight(); } mHero.setTranslationX(newTranslationX); mHero.setTranslationY(newTranslationY); } public void end() { clearAll(); MainActivity mainActivity = (MainActivity) getContext(); mainActivity.finish(); } public void clearAll() { handler.removeMessages(MSG_ENEMY); handler.removeMessages(MSG_BULLET); int childCount = getChildCount(); for (int i = 0; i < childCount; i++) { View view = getChildAt(i); if (view instanceof Enemy) { Enemy enemy = (Enemy) view; enemy.stopAnimation(); } else if (view instanceof Bullet) { Bullet bullet = (Bullet) view; bullet.stopAnimation(); } } removeAllViews(); resetScore(); } public void boomEnemy(float translationX, float translationY) { View v = new View(getContext()); Drawable drawable = getResources().getDrawable(R.drawable.enemy_boom); v.setLayoutParams(new LayoutParams(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight())); v.setBackgroundDrawable(drawable); v.setTranslationX(translationX); v.setTranslationY(translationY); v.getViewTreeObserver().addOnGlobalLayoutListener( new AddBoomListener(v)); addView(v); } public void boomHero() { View v = new View(getContext()); Drawable drawable = getResources().getDrawable(R.drawable.hero_boom); v.setLayoutParams(new LayoutParams(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight())); v.setBackgroundDrawable(drawable); v.setTranslationX(mHero.getTranslationX()); v.setTranslationY(mHero.getTranslationY()); v.getViewTreeObserver().addOnGlobalLayoutListener( new AddBoomListener(v)); addView(v); } public void removeBullet() { handler.removeMessages(MSG_BULLET); int childCount = getChildCount(); for (int i = 0; i < childCount; i++) { View view = getChildAt(i); if (view instanceof Bullet) { Bullet bullet = (Bullet) view; bullet.stopAnimation(); removeView(bullet); } } } public void hideHero() { mHero.setVisibility(View.INVISIBLE); } @Override protected void dispatchDraw(Canvas canvas) { super.dispatchDraw(canvas); canvas.drawText(String.format(str, score), 1, textHeight + 1, paint); } public int getTextHeight(String text) { Rect bounds = new Rect(); paint.getTextBounds(text, 0, text.length(), bounds); return bounds.height(); } public void increaseScore() { score += 100; postInvalidate(); } private void resetScore() { score = 0; postInvalidate(); } public void saveScore() { int localScore = SharePrefUtil.getInt(getContext(), KEY.SCORE, 0); SharePrefUtil.saveInt(getContext(), KEY.SCORE, Math.max(localScore, score)); } }"},{"file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\animator\\FlyAnimator.java","file_content":"package com.itheima.shotplane.animator; import android.view.View; public class FlyAnimator extends BaseAnimator { public FlyAnimator(View target, float startValue, float endValue) { super(target, startValue, endValue); } @Override protected void doAnim(float animatedValue) { target.setTranslationY(animatedValue); if(listener!=null){ listener.onFly(animatedValue); } } private OnEnemyFlyListener listener; public void setOnEnemyFlyListener(OnEnemyFlyListener listener){ this.listener = listener; } public interface OnEnemyFlyListener{ void onFly(float translationY); } }"},{"file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\entity\\BaseEntity.java","file_content":"package com.itheima.shotplane.entity; import android.content.Context; import android.graphics.Bitmap; import android.graphics.BitmapFactory; import android.graphics.Canvas; import android.graphics.Color; import android.graphics.Paint; import android.graphics.Paint.Style; import android.graphics.drawable.AnimationDrawable; import android.graphics.drawable.Drawable; import android.view.View; public abstract class BaseEntity extends View { protected Bitmap bitmap; public BaseEntity(Context context) { super(context); init(); } private void init() { bitmap = BitmapFactory.decodeResource(getResources(), getImageRes()); } @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { setMeasuredDimension(bitmap.getWidth(), bitmap.getHeight()); } @Override protected void onDraw(Canvas canvas) { canvas.drawBitmap(bitmap, 0, 0, null); } protected abstract int getImageRes(); public void stopAnimation(){ } }"},{"file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\entity\\Bullet.java","file_content":"package com.itheima.shotplane.entity; import com.itheima.shotplane.PlaneWar; import com.itheima.shotplane.R; import com.itheima.shotplane.R.drawable; import com.nineoldandroids.animation.Animator; import com.nineoldandroids.animation.AnimatorListenerAdapter; import com.nineoldandroids.view.ViewPropertyAnimator; import android.content.Context; import android.graphics.Bitmap; import android.graphics.BitmapFactory; import android.graphics.Canvas; import android.util.AttributeSet; import android.view.View; import android.view.ViewGroup; import android.view.animation.LinearInterpolator; public class Bullet extends BaseEntity{ public Bullet(Context context) { super(context); } private boolean isCanShot = true; private Hero hero; public void setCanShot(boolean isCanShot){ this.isCanShot = isCanShot; } public boolean isCanShot(){ return isCanShot; } @Override protected int getImageRes() { return R.drawable.bullet; } private ViewPropertyAnimator animator; public void shot(float targetY,long duration) { if(animator==null){ animator = ViewPropertyAnimator.animate(this).translationY(targetY) .setDuration(duration) .setInterpolator(new LinearInterpolator()) .setListener(new AnimatorListenerAdapter() { @Override public void onAnimationEnd(Animator animation) { bitmap.recycle(); PlaneWar war = (PlaneWar) getParent(); if(war!=null){ war.removeView(Bullet.this); } } @Override public void onAnimationCancel(Animator animation) { bitmap.recycle(); PlaneWar war = (PlaneWar) getParent(); if(war!=null){ war.removeView(Bullet.this); } } }); } animator.start(); } public Hero getHero() { return hero; } public void setHero(Hero hero) { this.hero = hero; } @Override public void stopAnimation() { if(animator!=null){ animator.cancel(); } } }"},{"file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\entity\\Hero.java","file_content":"package com.itheima.shotplane.entity; import com.itheima.shotplane.R; import android.content.Context; public class Hero extends BaseEntity{ public Hero(Context context) { super(context); } @Override protected int getImageRes() { return R.drawable.hero1; } }"},{"file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\util\\Utils.java","file_content":"package com.itheima.shotplane.util; import com.itheima.shotplane.dialog.GameDialog; import com.itheima.shotplane.dialog.GameDialog.OnRestartClickListener; import android.content.Context; import android.content.res.Resources; import android.graphics.Bitmap; import android.graphics.Canvas; import android.graphics.RectF; import android.graphics.drawable.BitmapDrawable; import android.graphics.drawable.Drawable; import android.view.View; import android.widget.ImageView; public class Utils { private Utils() { } private static final float DENSITY = Resources.getSystem() .getDisplayMetrics().density; private static final Canvas sCanvas = new Canvas(); public static int dp2Px(int dp) { return Math.round(dp * DENSITY); } public static RectF getTranslationRect(View v) { RectF rect = new RectF(v.getTranslationX(), v.getTranslationY(), v.getTranslationX() + v.getWidth(), v.getTranslationY() + v.getHeight()); return rect; } public static Bitmap createBitmapFromView(View view) { if (view instanceof ImageView) { Drawable drawable = ((ImageView) view).getDrawable(); if (drawable != null && drawable instanceof BitmapDrawable) { return ((BitmapDrawable) drawable).getBitmap(); } } view.clearFocus(); Bitmap bitmap = createBitmapSafely(view.getWidth(), view.getHeight(), Bitmap.Config.ARGB_8888, 1); if (bitmap != null) { synchronized (sCanvas) { Canvas canvas = sCanvas; canvas.setBitmap(bitmap); view.draw(canvas); canvas.setBitmap(null); } } return bitmap; } public static Bitmap createBitmapSafely(int width, int height, Bitmap.Config config, int retryCount) { try { return Bitmap.createBitmap(width, height, config); } catch (OutOfMemoryError e) { e.printStackTrace(); if (retryCount > 0) { System.gc(); return createBitmapSafely(width, height, config, retryCount - 1); } return null; } } private static GameDialog gameDialog = null; public static void showGameDialog(Context context, OnRestartClickListener listener) { gameDialog = new GameDialog(context); gameDialog.setOnRestartClickListener(listener); gameDialog.show(); } }"}]}}
{"project_id":107,"chunk_id":0,"content":{"main_file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\entity\\Hero.java","main_file_content":"package com.itheima.shotplane.entity; import com.itheima.shotplane.R; import android.content.Context; public class Hero extends BaseEntity{ public Hero(Context context) { super(context); } @Override protected int getImageRes() { return R.drawable.hero1; } }","dependencies":[{"file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\entity\\BaseEntity.java","file_content":"package com.itheima.shotplane.entity; import android.content.Context; import android.graphics.Bitmap; import android.graphics.BitmapFactory; import android.graphics.Canvas; import android.graphics.Color; import android.graphics.Paint; import android.graphics.Paint.Style; import android.graphics.drawable.AnimationDrawable; import android.graphics.drawable.Drawable; import android.view.View; public abstract class BaseEntity extends View { protected Bitmap bitmap; public BaseEntity(Context context) { super(context); init(); } private void init() { bitmap = BitmapFactory.decodeResource(getResources(), getImageRes()); } @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { setMeasuredDimension(bitmap.getWidth(), bitmap.getHeight()); } @Override protected void onDraw(Canvas canvas) { canvas.drawBitmap(bitmap, 0, 0, null); } protected abstract int getImageRes(); public void stopAnimation(){ } }"}]}}
{"project_id":107,"chunk_id":0,"content":{"main_file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\listener\\AddBoomListener.java","main_file_content":"package com.itheima.shotplane.listener; import android.graphics.drawable.AnimationDrawable; import android.graphics.drawable.Drawable; import android.os.Handler; import android.view.View; import android.view.ViewGroup; public class AddBoomListener extends AddEntityListener<View>{ public AddBoomListener(View t) { super(t); } @Override protected void onLayoutFinish() { Drawable background = t.getBackground(); if(background instanceof AnimationDrawable){ AnimationDrawable bg = (AnimationDrawable) background; bg.start(); new Handler().postDelayed(new Runnable() { @Override public void run() { ((ViewGroup)t.getParent()).removeView(t); } }, 601); } } }","dependencies":[{"file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\listener\\AddEntityListener.java","file_content":"package com.itheima.shotplane.listener; import com.itheima.shotplane.entity.BaseEntity; import android.view.View; import android.view.ViewTreeObserver.OnGlobalLayoutListener; public abstract class AddEntityListener<T extends View> implements OnGlobalLayoutListener{ protected T t; public AddEntityListener(T t) { super(); this.t = t; } @Override public void onGlobalLayout() { t.getViewTreeObserver().removeGlobalOnLayoutListener(this); onLayoutFinish(); } protected abstract void onLayoutFinish(); }"}]}}
{"project_id":107,"chunk_id":0,"content":{"main_file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\listener\\AddBulletListener.java","main_file_content":"package com.itheima.shotplane.listener; import android.util.Log; import com.itheima.shotplane.entity.Bullet; import com.itheima.shotplane.entity.Hero; public class AddBulletListener extends AddEntityListener<Bullet>{ public AddBulletListener(Bullet t) { super(t); } @Override protected void onLayoutFinish() { Bullet bullet = t; Hero hero = bullet.getHero(); bullet.setTranslationX(hero.getTranslationX()+hero.getWidth()/2); bullet.setTranslationY(hero.getTranslationY()-bullet.getHeight()); float targetY = -bullet.getHeight(); float distance = targetY - bullet.getTranslationY(); long duration = (long) (Math.abs(distance)*3); bullet.shot(targetY,duration); } }","dependencies":[{"file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\entity\\Bullet.java","file_content":"package com.itheima.shotplane.entity; import com.itheima.shotplane.PlaneWar; import com.itheima.shotplane.R; import com.itheima.shotplane.R.drawable; import com.nineoldandroids.animation.Animator; import com.nineoldandroids.animation.AnimatorListenerAdapter; import com.nineoldandroids.view.ViewPropertyAnimator; import android.content.Context; import android.graphics.Bitmap; import android.graphics.BitmapFactory; import android.graphics.Canvas; import android.util.AttributeSet; import android.view.View; import android.view.ViewGroup; import android.view.animation.LinearInterpolator; public class Bullet extends BaseEntity{ public Bullet(Context context) { super(context); } private boolean isCanShot = true; private Hero hero; public void setCanShot(boolean isCanShot){ this.isCanShot = isCanShot; } public boolean isCanShot(){ return isCanShot; } @Override protected int getImageRes() { return R.drawable.bullet; } private ViewPropertyAnimator animator; public void shot(float targetY,long duration) { if(animator==null){ animator = ViewPropertyAnimator.animate(this).translationY(targetY) .setDuration(duration) .setInterpolator(new LinearInterpolator()) .setListener(new AnimatorListenerAdapter() { @Override public void onAnimationEnd(Animator animation) { bitmap.recycle(); PlaneWar war = (PlaneWar) getParent(); if(war!=null){ war.removeView(Bullet.this); } } @Override public void onAnimationCancel(Animator animation) { bitmap.recycle(); PlaneWar war = (PlaneWar) getParent(); if(war!=null){ war.removeView(Bullet.this); } } }); } animator.start(); } public Hero getHero() { return hero; } public void setHero(Hero hero) { this.hero = hero; } @Override public void stopAnimation() { if(animator!=null){ animator.cancel(); } } }"},{"file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\entity\\Hero.java","file_content":"package com.itheima.shotplane.entity; import com.itheima.shotplane.R; import android.content.Context; public class Hero extends BaseEntity{ public Hero(Context context) { super(context); } @Override protected int getImageRes() { return R.drawable.hero1; } }"},{"file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\listener\\AddEntityListener.java","file_content":"package com.itheima.shotplane.listener; import com.itheima.shotplane.entity.BaseEntity; import android.view.View; import android.view.ViewTreeObserver.OnGlobalLayoutListener; public abstract class AddEntityListener<T extends View> implements OnGlobalLayoutListener{ protected T t; public AddEntityListener(T t) { super(); this.t = t; } @Override public void onGlobalLayout() { t.getViewTreeObserver().removeGlobalOnLayoutListener(this); onLayoutFinish(); } protected abstract void onLayoutFinish(); }"}]}}
{"project_id":107,"chunk_id":0,"content":{"main_file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\listener\\AddEnemyListener.java","main_file_content":"package com.itheima.shotplane.listener; import java.util.Random; import com.itheima.shotplane.PlaneWar; import com.itheima.shotplane.entity.Enemy; public class AddEnemyListener extends AddEntityListener<Enemy> { public AddEnemyListener(Enemy t) { super(t); } @Override protected void onLayoutFinish() { Enemy enemy = t; PlaneWar war = (PlaneWar) enemy.getParent(); if (war != null) { Random random = new Random(); enemy.setTranslationY(-1 * enemy.getHeight()); float targetX = random.nextInt((war.getWidth() - enemy.getWidth())); enemy.setTranslationX(targetX); enemy.setDuration(4000 + new Random().nextInt(2000)); enemy.setTargetY(war.getHeight() + enemy.getHeight()); enemy.fly(); } } }","dependencies":[{"file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\PlaneWar.java","file_content":"package com.itheima.shotplane; import com.itheima.shotplane.activity.MainActivity; import com.itheima.shotplane.entity.BaseEntity; import com.itheima.shotplane.entity.Bullet; import com.itheima.shotplane.entity.Enemy; import com.itheima.shotplane.entity.Hero; import com.itheima.shotplane.listener.AddBoomListener; import com.itheima.shotplane.listener.AddBulletListener; import com.itheima.shotplane.listener.AddEnemyListener; import com.itheima.shotplane.listener.AddHeroListener; import com.itheima.shotplane.util.SharePrefUtil; import com.itheima.shotplane.util.SharePrefUtil.KEY; import android.content.Context; import android.graphics.Canvas; import android.graphics.Color; import android.graphics.Paint; import android.graphics.Rect; import android.graphics.RectF; import android.graphics.Paint.Align; import android.graphics.Paint.Style; import android.graphics.drawable.Drawable; import android.os.Handler; import android.util.AttributeSet; import android.util.Log; import android.view.MotionEvent; import android.view.View; import android.widget.FrameLayout; public class PlaneWar extends FrameLayout { private String TAG = \"PlaneWar\"; private Paint paint = null; private String str = \"当前得分：%s\"; private int score = 0; private int textHeight = 0; private final int CREATE_ENEMY_DURATION = 1000; private final int CREATE_BULLET_DURATION = 100; private final int MSG_ENEMY = 1; private final int MSG_BULLET = 2; private Handler handler = new Handler() { public void handleMessage(android.os.Message msg) { switch (msg.what) { case MSG_ENEMY: generateEnemy(); break; case MSG_BULLET: generateBullet(); break; } }; }; public PlaneWar(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); init(); } public PlaneWar(Context context, AttributeSet attrs) { super(context, attrs); init(); } public PlaneWar(Context context) { super(context); init(); } private void init() { paint = new Paint(); paint.setTextSize(16); paint.setColor(Color.WHITE); paint.setTextSkewX(-0.15f); textHeight = getTextHeight(str); } public void start() { generateEnemy(); generateHero(); generateBullet(); } private Hero mHero; public Hero getHero() { return mHero; } private void generateHero() { mHero = new Hero(getContext()); mHero.setVisibility(View.INVISIBLE); mHero.getViewTreeObserver().addOnGlobalLayoutListener( new AddHeroListener(mHero)); addView(mHero); } private void generateEnemy() { Enemy enemy = new Enemy(getContext()); enemy.setPlaneWar(this); enemy.getViewTreeObserver().addOnGlobalLayoutListener( new AddEnemyListener(enemy)); addView(enemy); handler.sendEmptyMessageDelayed(MSG_ENEMY, CREATE_ENEMY_DURATION); } private void generateBullet() { Bullet bullet = new Bullet(getContext()); bullet.setHero(mHero); bullet.getViewTreeObserver().addOnGlobalLayoutListener( new AddBulletListener(bullet)); addView(bullet); handler.sendEmptyMessageDelayed(MSG_BULLET, CREATE_BULLET_DURATION); } private float downX, downY; @Override public boolean onTouchEvent(MotionEvent event) { if (mHero.getVisibility() != View.VISIBLE) { return false; } switch (event.getAction()) { case MotionEvent.ACTION_DOWN: downX = event.getX(); downY = event.getY(); moveHeroTo(downX, downY); break; case MotionEvent.ACTION_MOVE: float moveX = event.getX(); float moveY = event.getY(); float deltaX = moveX - downX; float deltaY = moveY - downY; moveHeroBy(deltaX, deltaY); downX = moveX; downY = moveY; break; case MotionEvent.ACTION_UP: break; } return true; } private void moveHeroTo(float x, float y) { float xOffset = x - mHero.getTranslationX() - mHero.getWidth() / 2; float yOffset = y - mHero.getTranslationY() - mHero.getHeight() / 2; moveHeroBy(xOffset, yOffset); } private void moveHeroBy(float xOffset, float yOffset) { float newTranslationX = mHero.getTranslationX() + xOffset; float newTranslationY = mHero.getTranslationY() + yOffset; if (newTranslationX < 0) newTranslationX = 0; if (newTranslationX > (getWidth() - mHero.getWidth())) { newTranslationX = getWidth() - mHero.getWidth(); } if (newTranslationY < 0) newTranslationY = 0; if (newTranslationY > (getHeight() - mHero.getHeight())) { newTranslationY = getHeight() - mHero.getHeight(); } mHero.setTranslationX(newTranslationX); mHero.setTranslationY(newTranslationY); } public void end() { clearAll(); MainActivity mainActivity = (MainActivity) getContext(); mainActivity.finish(); } public void clearAll() { handler.removeMessages(MSG_ENEMY); handler.removeMessages(MSG_BULLET); int childCount = getChildCount(); for (int i = 0; i < childCount; i++) { View view = getChildAt(i); if (view instanceof Enemy) { Enemy enemy = (Enemy) view; enemy.stopAnimation(); } else if (view instanceof Bullet) { Bullet bullet = (Bullet) view; bullet.stopAnimation(); } } removeAllViews(); resetScore(); } public void boomEnemy(float translationX, float translationY) { View v = new View(getContext()); Drawable drawable = getResources().getDrawable(R.drawable.enemy_boom); v.setLayoutParams(new LayoutParams(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight())); v.setBackgroundDrawable(drawable); v.setTranslationX(translationX); v.setTranslationY(translationY); v.getViewTreeObserver().addOnGlobalLayoutListener( new AddBoomListener(v)); addView(v); } public void boomHero() { View v = new View(getContext()); Drawable drawable = getResources().getDrawable(R.drawable.hero_boom); v.setLayoutParams(new LayoutParams(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight())); v.setBackgroundDrawable(drawable); v.setTranslationX(mHero.getTranslationX()); v.setTranslationY(mHero.getTranslationY()); v.getViewTreeObserver().addOnGlobalLayoutListener( new AddBoomListener(v)); addView(v); } public void removeBullet() { handler.removeMessages(MSG_BULLET); int childCount = getChildCount(); for (int i = 0; i < childCount; i++) { View view = getChildAt(i); if (view instanceof Bullet) { Bullet bullet = (Bullet) view; bullet.stopAnimation(); removeView(bullet); } } } public void hideHero() { mHero.setVisibility(View.INVISIBLE); } @Override protected void dispatchDraw(Canvas canvas) { super.dispatchDraw(canvas); canvas.drawText(String.format(str, score), 1, textHeight + 1, paint); } public int getTextHeight(String text) { Rect bounds = new Rect(); paint.getTextBounds(text, 0, text.length(), bounds); return bounds.height(); } public void increaseScore() { score += 100; postInvalidate(); } private void resetScore() { score = 0; postInvalidate(); } public void saveScore() { int localScore = SharePrefUtil.getInt(getContext(), KEY.SCORE, 0); SharePrefUtil.saveInt(getContext(), KEY.SCORE, Math.max(localScore, score)); } }"},{"file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\entity\\Enemy.java","file_content":"package com.itheima.shotplane.entity; import com.itheima.shotplane.PlaneWar; import com.itheima.shotplane.R; import com.itheima.shotplane.animator.FlyAnimator; import com.itheima.shotplane.animator.FlyAnimator.OnEnemyFlyListener; import com.itheima.shotplane.dialog.GameDialog.OnRestartClickListener; import com.itheima.shotplane.util.Utils; import com.nineoldandroids.animation.Animator; import com.nineoldandroids.animation.AnimatorListenerAdapter; import android.content.Context; import android.graphics.RectF; import android.os.Handler; import android.util.Log; import android.view.View; import android.view.animation.LinearInterpolator; public class Enemy extends BaseEntity implements OnEnemyFlyListener { protected PlaneWar planeWar; protected final int MAX_SHOT_COUNT = 8; public PlaneWar getPlaneWar() { return planeWar; } public void setPlaneWar(PlaneWar planeWar) { this.planeWar = planeWar; } public Enemy(Context context) { super(context); } private long duration; private int targetY; private int shotCount; public long getDuration() { return duration; } public void setDuration(long duration) { this.duration = duration; } public int getTargetY() { return targetY; } public void setTargetY(int targetY) { this.targetY = targetY; } FlyAnimator flyAnimator; public void fly() { flyAnimator = new FlyAnimator(this, getTranslationY(), targetY); flyAnimator.setOnEnemyFlyListener(this); flyAnimator.setAnimationListener(new AnimatorListenerAdapter() { @Override public void onAnimationEnd(Animator animation) { PlaneWar war = (PlaneWar) getParent(); if (war != null) { war.removeView(Enemy.this); } } @Override public void onAnimationCancel(Animator animation) { PlaneWar war = (PlaneWar) getParent(); if (war != null) { war.removeView(Enemy.this); } } }); flyAnimator.setInterpolator(new LinearInterpolator()); flyAnimator.start(duration); } @Override protected int getImageRes() { return R.drawable.enemy1; } @Override public void onFly(float translationY) { Hero hero = planeWar.getHero(); if (hero != null && hero.getVisibility() == View.VISIBLE && getParent()!=null) { if (isShareRect(this, hero) || isInRect(this, hero)) { planeWar.boomEnemy(getTranslationX(), getTranslationY()); flyAnimator.cancel(); planeWar.boomHero(); planeWar.removeBullet(); planeWar.hideHero(); planeWar.saveScore(); showDialog(); } for (int i = 0; i < planeWar.getChildCount(); i++) { View view = planeWar.getChildAt(i); if (view instanceof Bullet) { Bullet bullet = (Bullet) view; if (bullet.isCanShot()) { if (isShareRect(bullet, this) || isInRect(bullet, this)) { setShotCount(getShotCount() + 1); bullet.setCanShot(false); bullet.setVisibility(View.INVISIBLE); bullet.stopAnimation(); } if (getShotCount() >= MAX_SHOT_COUNT) { planeWar.boomEnemy(getTranslationX(), getTranslationY()); flyAnimator.cancel(); planeWar.increaseScore(); break; } } } } } } public boolean isInRect(View v1, View v2) { RectF rect1 = Utils.getTranslationRect(v1); RectF rect2 = Utils.getTranslationRect(v2); return rect1.left >= rect2.left && rect1.top >= rect2.top && rect1.right <= rect2.right && rect1.bottom <= rect2.bottom; } public boolean isShareRect(View v1, View v2) { RectF rect1 = Utils.getTranslationRect(v1); RectF rect2 = Utils.getTranslationRect(v2); boolean isLeftIn = rect1.left >= rect2.left && rect1.left <= rect2.right; boolean isTopIn = rect1.top >= rect2.top && rect1.top <= rect2.bottom; boolean isRightIn = rect1.right >= rect2.left && rect1.right <= rect2.right; boolean isBottomIn = rect1.bottom >= rect2.top && rect1.bottom <= rect2.bottom; return (isLeftIn && isTopIn) || (isLeftIn && isBottomIn) || (isRightIn && isTopIn) || (isRightIn && isBottomIn) || (isTopIn && isLeftIn) || (isTopIn && isRightIn) || (isBottomIn && isLeftIn) || (isBottomIn && isRightIn); } public int getShotCount() { return shotCount; } public void setShotCount(int shotCount) { this.shotCount = shotCount; } @Override public void stopAnimation() { if (flyAnimator != null) { flyAnimator.cancel(); } } private void showDialog() { new Handler().postDelayed(new Runnable() { @Override public void run() { Utils.showGameDialog(getContext(), new OnRestartClickListener() { @Override public void onRestartClick() { planeWar.clearAll(); planeWar.start(); } @Override public void onFinishClick() { planeWar.end(); } }); } }, 1500); } }"},{"file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\listener\\AddEntityListener.java","file_content":"package com.itheima.shotplane.listener; import com.itheima.shotplane.entity.BaseEntity; import android.view.View; import android.view.ViewTreeObserver.OnGlobalLayoutListener; public abstract class AddEntityListener<T extends View> implements OnGlobalLayoutListener{ protected T t; public AddEntityListener(T t) { super(); this.t = t; } @Override public void onGlobalLayout() { t.getViewTreeObserver().removeGlobalOnLayoutListener(this); onLayoutFinish(); } protected abstract void onLayoutFinish(); }"}]}}
{"project_id":107,"chunk_id":0,"content":{"main_file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\listener\\AddEntityListener.java","main_file_content":"package com.itheima.shotplane.listener; import com.itheima.shotplane.entity.BaseEntity; import android.view.View; import android.view.ViewTreeObserver.OnGlobalLayoutListener; public abstract class AddEntityListener<T extends View> implements OnGlobalLayoutListener{ protected T t; public AddEntityListener(T t) { super(); this.t = t; } @Override public void onGlobalLayout() { t.getViewTreeObserver().removeGlobalOnLayoutListener(this); onLayoutFinish(); } protected abstract void onLayoutFinish(); }","dependencies":[]}}
{"project_id":107,"chunk_id":0,"content":{"main_file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\listener\\AddHeroListener.java","main_file_content":"package com.itheima.shotplane.listener; import android.view.View; import android.view.ViewGroup; import com.itheima.shotplane.entity.Hero; public class AddHeroListener extends AddEntityListener<Hero>{ public AddHeroListener(Hero t) { super(t); } @Override protected void onLayoutFinish() { Hero hero = t; int parentWidth = ((ViewGroup)hero.getParent()).getWidth(); int parentHeitht = ((ViewGroup)hero.getParent()).getHeight(); float translationX = parentWidth/2 - hero.getWidth()/2; hero.setTranslationX(translationX); hero.setTranslationY(parentHeitht-hero.getHeight()); hero.setVisibility(View.VISIBLE); } }","dependencies":[{"file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\entity\\Hero.java","file_content":"package com.itheima.shotplane.entity; import com.itheima.shotplane.R; import android.content.Context; public class Hero extends BaseEntity{ public Hero(Context context) { super(context); } @Override protected int getImageRes() { return R.drawable.hero1; } }"},{"file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\listener\\AddEntityListener.java","file_content":"package com.itheima.shotplane.listener; import com.itheima.shotplane.entity.BaseEntity; import android.view.View; import android.view.ViewTreeObserver.OnGlobalLayoutListener; public abstract class AddEntityListener<T extends View> implements OnGlobalLayoutListener{ protected T t; public AddEntityListener(T t) { super(); this.t = t; } @Override public void onGlobalLayout() { t.getViewTreeObserver().removeGlobalOnLayoutListener(this); onLayoutFinish(); } protected abstract void onLayoutFinish(); }"}]}}
{"project_id":107,"chunk_id":0,"content":{"main_file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\util\\SharePrefUtil.java","main_file_content":"package com.itheima.shotplane.util; import android.content.Context; import android.content.SharedPreferences; public class SharePrefUtil { private static String tag = SharePrefUtil.class.getSimpleName(); private final static String SP_NAME = \"config\"; private static SharedPreferences sp; public interface KEY { String SCORE = \"score\"; } public static void saveBoolean(Context context, String key, boolean value) { if (sp == null) sp = context.getSharedPreferences(SP_NAME, 0); sp.edit().putBoolean(key, value).commit(); } public static void saveString(Context context, String key, String value) { if (sp == null) sp = context.getSharedPreferences(SP_NAME, 0); sp.edit().putString(key, value).commit(); } public static void saveLong(Context context, String key, long value) { if (sp == null) sp = context.getSharedPreferences(SP_NAME, 0); sp.edit().putLong(key, value).commit(); } public static void saveInt(Context context, String key, int value) { if (sp == null) sp = context.getSharedPreferences(SP_NAME, 0); sp.edit().putInt(key, value).commit(); } public static void saveFloat(Context context, String key, float value) { if (sp == null) sp = context.getSharedPreferences(SP_NAME, 0); sp.edit().putFloat(key, value).commit(); } public static String getString(Context context, String key, String defValue) { if (sp == null) sp = context.getSharedPreferences(SP_NAME, 0); return sp.getString(key, defValue); } public static int getInt(Context context, String key, int defValue) { if (sp == null) sp = context.getSharedPreferences(SP_NAME, 0); return sp.getInt(key, defValue); } public static long getLong(Context context, String key, long defValue) { if (sp == null) sp = context.getSharedPreferences(SP_NAME, 0); return sp.getLong(key, defValue); } public static float getFloat(Context context, String key, float defValue) { if (sp == null) sp = context.getSharedPreferences(SP_NAME, 0); return sp.getFloat(key, defValue); } public static boolean getBoolean(Context context, String key, boolean defValue) { if (sp == null) sp = context.getSharedPreferences(SP_NAME, 0); return sp.getBoolean(key, defValue); } }","dependencies":[]}}
{"project_id":107,"chunk_id":0,"content":{"main_file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\util\\Utils.java","main_file_content":"package com.itheima.shotplane.util; import com.itheima.shotplane.dialog.GameDialog; import com.itheima.shotplane.dialog.GameDialog.OnRestartClickListener; import android.content.Context; import android.content.res.Resources; import android.graphics.Bitmap; import android.graphics.Canvas; import android.graphics.RectF; import android.graphics.drawable.BitmapDrawable; import android.graphics.drawable.Drawable; import android.view.View; import android.widget.ImageView; public class Utils { private Utils() { } private static final float DENSITY = Resources.getSystem() .getDisplayMetrics().density; private static final Canvas sCanvas = new Canvas(); public static int dp2Px(int dp) { return Math.round(dp * DENSITY); } public static RectF getTranslationRect(View v) { RectF rect = new RectF(v.getTranslationX(), v.getTranslationY(), v.getTranslationX() + v.getWidth(), v.getTranslationY() + v.getHeight()); return rect; } public static Bitmap createBitmapFromView(View view) { if (view instanceof ImageView) { Drawable drawable = ((ImageView) view).getDrawable(); if (drawable != null && drawable instanceof BitmapDrawable) { return ((BitmapDrawable) drawable).getBitmap(); } } view.clearFocus(); Bitmap bitmap = createBitmapSafely(view.getWidth(), view.getHeight(), Bitmap.Config.ARGB_8888, 1); if (bitmap != null) { synchronized (sCanvas) { Canvas canvas = sCanvas; canvas.setBitmap(bitmap); view.draw(canvas); canvas.setBitmap(null); } } return bitmap; } public static Bitmap createBitmapSafely(int width, int height, Bitmap.Config config, int retryCount) { try { return Bitmap.createBitmap(width, height, config); } catch (OutOfMemoryError e) { e.printStackTrace(); if (retryCount > 0) { System.gc(); return createBitmapSafely(width, height, config, retryCount - 1); } return null; } } private static GameDialog gameDialog = null; public static void showGameDialog(Context context, OnRestartClickListener listener) { gameDialog = new GameDialog(context); gameDialog.setOnRestartClickListener(listener); gameDialog.show(); } }","dependencies":[{"file_path":"ShootPlane-master\\PlaneWar\\src\\com\\itheima\\shotplane\\dialog\\GameDialog.java","file_content":"package com.itheima.shotplane.dialog; import com.itheima.shotplane.R; import com.itheima.shotplane.activity.MainActivity; import com.itheima.shotplane.util.SharePrefUtil; import com.itheima.shotplane.util.SharePrefUtil.KEY; import android.app.Dialog; import android.content.Context; import android.os.Bundle; import android.os.Handler; import android.view.View; import android.view.View.OnClickListener; import android.widget.Button; import android.widget.TextView; public class GameDialog extends Dialog implements OnClickListener { public GameDialog(Context context) { this(context, R.style.GameDialog); } public GameDialog(Context context, int theme) { super(context, theme); } private Button btn_restart, btn_finish; private TextView text; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.dialog_game); btn_restart = (Button) findViewById(R.id.btn_restart); btn_finish = (Button) findViewById(R.id.btn_finish); text = (TextView) findViewById(R.id.text); btn_finish.setOnClickListener(this); btn_restart.setOnClickListener(this); int score = SharePrefUtil.getInt(getContext(), KEY.SCORE, 0); text.setText(\"目前最高得分：\"+score); } @Override public void onClick(final View v) { dismiss(); new Handler().postDelayed(new Runnable() { public void run() { switch (v.getId()) { case R.id.btn_restart: if (listener != null) { listener.onRestartClick(); } break; case R.id.btn_finish: if (listener != null) { listener.onFinishClick(); } break; } } }, 1100); } private OnRestartClickListener listener; public void setOnRestartClickListener(OnRestartClickListener listener) { this.listener = listener; } public interface OnRestartClickListener { void onRestartClick(); void onFinishClick(); } }"}]}}
{"project_id":112,"chunk_id":0,"content":{"main_file_path":"Student Result Processing System Java Project\\Sourcde Code\\Source Code\\srp\\src\\AddFacultyDetails.java","main_file_content":"import java.io.*; import javax.servlet.*; import javax.servlet.http.*; import java.sql.*; public class AddFacultyDetails extends HttpServlet { public void doPost(HttpServletRequest request,HttpServletResponse response)throws IOException,ServletException { ServletContext sc=getServletContext(); String driver=sc.getInitParameter(\"driver\"); String url=sc.getInitParameter(\"url\"); String uname=sc.getInitParameter(\"user\"); String pwd=sc.getInitParameter(\"dbpassword\"); String deptname=request.getParameter(\"dname\"); String loc=request.getParameter(\"location\"); System.out.println(\".......10........\"); try { Class.forName(driver); Connection con=DriverManager.getConnection(url,uname,pwd); System.out.println(\".......11........\"); PreparedStatement pstmt=con.prepareStatement(\"insert into faculty_details(faculty_id,faculty_name,subject_dealing,joining_date,mailid)values(?,?,?,?,?)\"); pstmt.setString(1,request.getParameter(\"tid\")); pstmt.setString(2,request.getParameter(\"tname\")); pstmt.setString(3,request.getParameter(\"subjectdealing\")); pstmt.setString(4,request.getParameter(\"joiningdate\")); pstmt.setString(5,request.getParameter(\"mailid\")); int n=pstmt.executeUpdate(); pstmt=con.prepareStatement(\"insert into login_table values(?,?,?)\"); pstmt.setString(1,request.getParameter(\"tid\")); pstmt.setString(2,\"teacher\"); pstmt.setString(3,\"teacher\"); n=pstmt.executeUpdate(); System.out.println(\".......13........\"); if(n>0) { response.sendRedirect(\"./AddFacaultytDetails.jsp?msg=Successfully Added\"); } System.out.println(\".......18........\"); }catch(Exception e) { e.printStackTrace(); } } }","dependencies":[]}}
{"project_id":112,"chunk_id":0,"content":{"main_file_path":"Student Result Processing System Java Project\\Sourcde Code\\Source Code\\srp\\src\\AddNotificationDetails.java","main_file_content":"import java.io.*; import javax.servlet.*; import javax.servlet.http.*; import java.sql.*; public class AddNotificationDetails extends HttpServlet { public void doPost(HttpServletRequest request,HttpServletResponse response)throws IOException,ServletException { ServletContext sc=getServletContext(); String driver=sc.getInitParameter(\"driver\"); String url=sc.getInitParameter(\"url\"); String uname=sc.getInitParameter(\"user\"); String pwd=sc.getInitParameter(\"dbpassword\"); System.out.println(\".......10........\"); try { Class.forName(driver); Connection con=DriverManager.getConnection(url,uname,pwd); System.out.println(\".......11........\"); PreparedStatement pstmt=con.prepareStatement(\"insert into notification_details(n_name,n_date)values(?,?)\"); pstmt.setString(1,request.getParameter(\"notification\")); pstmt.setString(2,request.getParameter(\"ndate\")); int n=pstmt.executeUpdate(); System.out.println(\".......13........\"); if(n==1) { response.sendRedirect(\"./AddNotificationDetails.jsp?msg=Successfully Added\"); } System.out.println(\".......18........\"); }catch(Exception e) { e.printStackTrace(); } } }","dependencies":[]}}
{"project_id":112,"chunk_id":0,"content":{"main_file_path":"Student Result Processing System Java Project\\Sourcde Code\\Source Code\\srp\\src\\AddReportCardDetails.java","main_file_content":"import java.io.*; import javax.servlet.*; import javax.servlet.http.*; import java.sql.*; public class AddReportCardDetails extends HttpServlet { public void doPost(HttpServletRequest request,HttpServletResponse response)throws IOException,ServletException { ServletContext sc=getServletContext(); String driver=sc.getInitParameter(\"driver\"); String url=sc.getInitParameter(\"url\"); String uname=sc.getInitParameter(\"user\"); String pwd=sc.getInitParameter(\"dbpassword\"); String deptname=request.getParameter(\"dname\"); String loc=request.getParameter(\"location\"); System.out.println(\".......99 hai........\"); try { Class.forName(driver); Connection con=DriverManager.getConnection(url,uname,pwd); System.out.println(\".......11........\"+request.getParameter(\"sid\")); System.out.println(\".......12........\"+request.getParameter(\"ename\")); int count=0; PreparedStatement pstmt=con.prepareStatement(\"select count(*) from studentreport1 where student_id=? and test_id=?\"); pstmt.setString(1,request.getParameter(\"sid\")); pstmt.setString(2,request.getParameter(\"ename\")); ResultSet rs=pstmt.executeQuery(); while(rs.next()) { count=rs.getInt(1); } System.out.println(\"--count--\"+count); String subname=request.getParameter(\"subjectname\"); int n=0; if(count==0) { System.out.println(\"--executed1--\"); pstmt=con.prepareStatement(\"insert into studentreport1(student_id,test_id,\"+subname+\",actualmarks)values(?,?,?,?)\"); pstmt.setString(1,request.getParameter(\"sid\")); pstmt.setString(2,request.getParameter(\"ename\")); pstmt.setString(3,request.getParameter(\"totalmarks\")); pstmt.setString(4,request.getParameter(\"amarks\")); n=pstmt.executeUpdate(); } else { System.out.println(\"--executed2--\"); pstmt=con.prepareStatement(\"update studentreport1 set \"+subname+\"=? where student_id=? and test_id=?\"); pstmt.setString(1,request.getParameter(\"totalmarks\")); pstmt.setString(2,request.getParameter(\"sid\")); pstmt.setString(3,request.getParameter(\"ename\")); n=pstmt.executeUpdate(); } if(n>0) { response.sendRedirect(\"./AddReportCardDetails.jsp?msg=Successfully Added\"); } System.out.println(\".......18........\"); }catch(Exception e) { e.printStackTrace(); } } }","dependencies":[]}}
{"project_id":112,"chunk_id":0,"content":{"main_file_path":"Student Result Processing System Java Project\\Sourcde Code\\Source Code\\srp\\src\\AddStudentDetails.java","main_file_content":"import java.io.*; import javax.servlet.*; import javax.servlet.http.*; import java.sql.*; public class AddStudentDetails extends HttpServlet { public void service(HttpServletRequest request,HttpServletResponse response)throws IOException,ServletException { ServletContext sc=getServletContext(); String driver=sc.getInitParameter(\"driver\"); String url=sc.getInitParameter(\"url\"); String uname=sc.getInitParameter(\"user\"); String pwd=sc.getInitParameter(\"dbpassword\"); String deptname=request.getParameter(\"dname\"); String loc=request.getParameter(\"location\"); System.out.println(\".......10........\"); try { Class.forName(driver); Connection con=DriverManager.getConnection(url,uname,pwd); System.out.println(\".......11........\"); PreparedStatement pstmt=con.prepareStatement(\"insert into student_details(Student_id,student_name,currentstandard,currentdivision,parentemailid,joiningdate,reportcardno)values(?,?,?,?,?,?,?)\"); pstmt.setString(1,request.getParameter(\"sid\")); pstmt.setString(2,request.getParameter(\"sname\")); pstmt.setString(3,request.getParameter(\"currentstandard\")); pstmt.setString(4,request.getParameter(\"currentdivision\")); pstmt.setString(5,request.getParameter(\"mailid\")); pstmt.setString(6,request.getParameter(\"joiningdate\")); pstmt.setString(7,request.getParameter(\"cardno\")); int n=pstmt.executeUpdate(); pstmt=con.prepareStatement(\"insert into login_table values(?,?,?)\"); pstmt.setString(1,request.getParameter(\"sid\")); pstmt.setString(2,\"student\"); pstmt.setString(3,\"student\"); n=pstmt.executeUpdate(); System.out.println(\".......13........\"); if(n>0) { response.sendRedirect(\"./AddStudentDetails.jsp?msg=Successfully Added\"); } System.out.println(\".......18........\"); }catch(Exception e) { e.printStackTrace(); } } }","dependencies":[]}}
{"project_id":112,"chunk_id":0,"content":{"main_file_path":"Student Result Processing System Java Project\\Sourcde Code\\Source Code\\srp\\src\\AddStudentRemarks.java","main_file_content":"import java.io.*; import javax.servlet.*; import javax.servlet.http.*; import java.sql.*; public class AddStudentRemarks extends HttpServlet { public void doPost(HttpServletRequest request,HttpServletResponse response)throws IOException,ServletException { ServletContext sc=getServletContext(); String driver=sc.getInitParameter(\"driver\"); String url=sc.getInitParameter(\"url\"); String uname=sc.getInitParameter(\"user\"); String pwd=sc.getInitParameter(\"dbpassword\"); String deptname=request.getParameter(\"dname\"); String loc=request.getParameter(\"location\"); HttpSession hs=request.getSession(); System.out.println(\".......10........\"); try { Class.forName(driver); Connection con=DriverManager.getConnection(url,uname,pwd); System.out.println(\".......11........\"); PreparedStatement pstmt=con.prepareStatement(\"insert into student_remarks(student_id,remarks,date,teacher_id) values(?,?,?,?)\"); pstmt.setString(1,request.getParameter(\"sid\")); pstmt.setString(2,request.getParameter(\"remarks\")); pstmt.setString(3,request.getParameter(\"date\")); pstmt.setString(4,(String)hs.getAttribute(\"userid\")); int n=pstmt.executeUpdate(); System.out.println(\".......13........\"); if(n>0) { response.sendRedirect(\"./AddStudentRemarks.jsp?msg=Successfully Added\"); } System.out.println(\".......18........\"); }catch(Exception e) { e.printStackTrace(); } } }","dependencies":[]}}
{"project_id":112,"chunk_id":0,"content":{"main_file_path":"Student Result Processing System Java Project\\Sourcde Code\\Source Code\\srp\\src\\AddTimeTable.java","main_file_content":"import java.io.*; import javax.servlet.*; import javax.servlet.http.*; import java.sql.*; public class AddTimeTable extends HttpServlet { public void doPost(HttpServletRequest request,HttpServletResponse response)throws IOException,ServletException { ServletContext sc=getServletContext(); String driver=sc.getInitParameter(\"driver\"); String url=sc.getInitParameter(\"url\"); String uname=sc.getInitParameter(\"user\"); String pwd=sc.getInitParameter(\"dbpassword\"); String deptname=request.getParameter(\"dname\"); String loc=request.getParameter(\"location\"); System.out.println(\".......10........\"); try { Class.forName(driver); Connection con=DriverManager.getConnection(url,uname,pwd); System.out.println(\".......11........\"); PreparedStatement pstmt=con.prepareStatement(\"insert into examination_details values(?,?)\"); pstmt.setString(1,request.getParameter(\"examid\")); pstmt.setString(2,request.getParameter(\"time\")); int n=pstmt.executeUpdate(); pstmt.setString(1,request.getParameter(\"examid\")); for(int i=1;i<=6;i++) { pstmt=con.prepareStatement(\"insert into time_details values(?,?,?,?)\"); pstmt.setString(1,request.getParameter(\"examid\")); pstmt.setString(2,request.getParameter(\"s\"+i)); pstmt.setString(3,request.getParameter(\"d\"+i)); pstmt.setInt(4,i); n=pstmt.executeUpdate(); } System.out.println(\".......13........\"); if(n==1) { response.sendRedirect(\"./AddTimeTable.jsp?msg=Successfully Added\"); } System.out.println(\".......18........\"); }catch(Exception e) { e.printStackTrace(); } } }","dependencies":[]}}
{"project_id":112,"chunk_id":0,"content":{"main_file_path":"Student Result Processing System Java Project\\Sourcde Code\\Source Code\\srp\\src\\EditTimeTable.java","main_file_content":"import java.io.*; import java.sql.*; import javax.servlet.*; import javax.servlet.http.*; public class EditTimeTable extends HttpServlet { public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException { String deptname=request.getParameter(\"deptname\"); String loc=request.getParameter(\"location\"); String deptno=request.getParameter(\"deptno\"); Connection con; PreparedStatement pstmt,pstmt1; ServletContext sc=getServletContext(); String driver=sc.getInitParameter(\"driver\"); String url=sc.getInitParameter(\"url\"); String dbpassword=sc.getInitParameter(\"dbpassword\"); String user=sc.getInitParameter(\"user\"); response.setContentType(\"text/html\"); try { System.out.println(\".......1........\"); Class.forName(driver); con=DriverManager.getConnection(url,user,dbpassword); System.out.println(\".......2........\"); System.out.println(deptno); pstmt=con.prepareStatement(\"update examination_details set time=? where examid=?\"); pstmt.setString(1,request.getParameter(\"time\")); pstmt.setString(2,request.getParameter(\"search\")); pstmt.executeUpdate(); System.out.println(\".......3........\"); for(int i=1;i<=6;i++) { pstmt1=con.prepareStatement(\"update time_details set subject=?,date=? where examid=? and incr=?\"); pstmt1.setString(1,request.getParameter(\"s\"+i)); pstmt1.setString(2,request.getParameter(\"d\"+i)); pstmt1.setString(3,request.getParameter(\"search\")); pstmt1.setInt(4,i); pstmt1.executeUpdate(); } System.out.println(\".......4........\"); response.sendRedirect(\"EditTimeTable.jsp\"); System.out.println(\".......5........\"); } catch(Exception e) {System.out.println(\".......6........\"); e.printStackTrace(); } } }","dependencies":[]}}
{"project_id":112,"chunk_id":0,"content":{"main_file_path":"Student Result Processing System Java Project\\Sourcde Code\\Source Code\\srp\\src\\Login.java","main_file_content":"import java.io.*; import javax.servlet.*; import javax.servlet.http.*; import java.sql.*; public class Login extends HttpServlet { public void service(HttpServletRequest request,HttpServletResponse response)throws IOException,ServletException { ServletContext sc=getServletContext(); String driver=sc.getInitParameter(\"driver\"); String url=sc.getInitParameter(\"url\"); String uname=sc.getInitParameter(\"user\"); String pwd=sc.getInitParameter(\"dbpassword\"); String userid=request.getParameter(\"userid\"); String password=request.getParameter(\"password\"); System.out.println(\".......10........\"); try { Class.forName(driver); Connection con=DriverManager.getConnection(url,uname,pwd); System.out.println(\".......11........\"); PreparedStatement pstmt,pstmt1; pstmt=con.prepareStatement(\"select password,role from login_table where login_id=? \"); pstmt.setString(1,userid); ResultSet rs,rs1; rs=pstmt.executeQuery(); System.out.println(\".......13........\"); HttpSession hs=request.getSession(); if(userid.equals(\"admin\") && password.equals(\"12345\")) { System.out.println(\".......14a........\"); hs.setAttribute(\"userid\",\"admin\"); hs.setAttribute(\"role\",\"admin\"); response.sendRedirect(\"AdminHome.jsp\"); } int i=0; while(rs.next()) { i++; System.out.println(\".......password........\"+rs.getString(\"password\")); if(rs.getString(\"password\").equals(password)) { if(rs.getString(2).equals(\"teacher\")) { System.out.println(\"--executed--\"); hs.setAttribute(\"userid\",userid); hs.setAttribute(\"role\", \"teacher\"); pstmt1=con.prepareStatement(\"select faculty_name from faculty_details where faculty_id=?\"); pstmt1.setString(1, userid); rs1=pstmt1.executeQuery(); while(rs1.next()) { hs.setAttribute(\"uname\", rs1.getString(1)); } System.out.println(\"--executed1--\"); response.sendRedirect(\"TeacherHome.jsp\"); System.out.println(\"--executed2--\"); } else if(rs.getString(2).equals(\"student\")) { System.out.println(\"--executed--\"); hs.setAttribute(\"userid\",userid); hs.setAttribute(\"role\", \"student\"); pstmt1=con.prepareStatement(\"select student_name from student_details where student_id=?\"); pstmt1.setString(1,userid); rs1=pstmt1.executeQuery(); while(rs1.next()) { System.out.println(\"uname\"+rs1.getString(1)); hs.setAttribute(\"uname\", rs1.getString(1)); } System.out.println(\"--executed1--\"); response.sendRedirect(\"StudentHome.jsp\"); System.out.println(\"--executed2--\"); } } else { response.sendRedirect(\"./Home.jsp?msg=Check your password.\"); } } }catch(Exception e) { e.printStackTrace(); } } }","dependencies":[]}}
{"project_id":112,"chunk_id":0,"content":{"main_file_path":"Student Result Processing System Java Project\\Sourcde Code\\Source Code\\srp\\src\\PasswordChange.java","main_file_content":"import javax.servlet.*; import javax.servlet.http.*; import java.io.*; import java.sql.Connection; import java.sql.DriverManager; import java.sql.PreparedStatement; public class PasswordChange extends HttpServlet { private static final long serialVersionUID = 1L; public void doPost(HttpServletRequest req,HttpServletResponse res) throws ServletException,IOException { HttpSession hs=req.getSession(false); String userid=(String)hs.getAttribute(\"userid\"); String msg=\"\"; String npass=req.getParameter(\"npass\"); ServletContext sc=getServletContext(); String driver=sc.getInitParameter(\"driver\"); String url=sc.getInitParameter(\"url\"); String uname=sc.getInitParameter(\"user\"); String pwd=sc.getInitParameter(\"dbpassword\"); try { Class.forName(driver); Connection con=DriverManager.getConnection(url,uname,pwd); System.out.println(\".......11........\"); PreparedStatement pstmt=con.prepareStatement(\"update login_table set password=? where login_id=?\"); pstmt.setString(1,npass); pstmt.setString(2,userid); System.out.println(\"userid is \"+userid); int n=0; n=pstmt.executeUpdate(); if(n>0) { res.sendRedirect(\"./Recchange_pass.jsp?cat=\"+req.getParameter(\"cat\")+\"&msg=Password changed successfully\"); } } catch(Exception e) { e.printStackTrace(); } } }","dependencies":[]}}
{"project_id":112,"chunk_id":0,"content":{"main_file_path":"Student Result Processing System Java Project\\Sourcde Code\\Source Code\\srp\\src\\PasswordChange1.java","main_file_content":"import javax.servlet.*; import javax.servlet.http.*; import java.io.*; import java.sql.Connection; import java.sql.DriverManager; import java.sql.PreparedStatement; public class PasswordChange1 extends HttpServlet { private static final long serialVersionUID = 1L; public void doPost(HttpServletRequest req,HttpServletResponse res) throws ServletException,IOException { HttpSession hs=req.getSession(false); String userid=(String)hs.getAttribute(\"userid\"); String msg=\"\"; String npass=req.getParameter(\"npass\"); ServletContext sc=getServletContext(); String driver=sc.getInitParameter(\"driver\"); String url=sc.getInitParameter(\"url\"); String uname=sc.getInitParameter(\"user\"); String pwd=sc.getInitParameter(\"dbpassword\"); try { Class.forName(driver); Connection con=DriverManager.getConnection(url,uname,pwd); System.out.println(\".......11........\"); PreparedStatement pstmt=con.prepareStatement(\"update login_table set password=? where login_id=?\"); pstmt.setString(1,npass); pstmt.setString(2,userid); System.out.println(\"userid is \"+userid); int n=0; n=pstmt.executeUpdate(); if(n>0) { res.sendRedirect(\"./Recchange_pass1.jsp?cat=\"+req.getParameter(\"cat\")+\"&msg=Password changed successfully\"); } } catch(Exception e) { e.printStackTrace(); } } }","dependencies":[]}}
{"project_id":112,"chunk_id":0,"content":{"main_file_path":"Student Result Processing System Java Project\\Sourcde Code\\Source Code\\srp\\src\\UpdateFacultyDetails.java","main_file_content":"import java.io.*; import java.sql.*; import javax.servlet.*; import javax.servlet.http.*; public class UpdateFacultyDetails extends HttpServlet { public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException { String deptname=request.getParameter(\"deptname\"); String loc=request.getParameter(\"location\"); String deptno=request.getParameter(\"deptno\"); Connection con; PreparedStatement pstmt; ServletContext sc=getServletContext(); String driver=sc.getInitParameter(\"driver\"); String url=sc.getInitParameter(\"url\"); String dbpassword=sc.getInitParameter(\"dbpassword\"); String user=sc.getInitParameter(\"user\"); response.setContentType(\"text/html\"); try { System.out.println(\".......1........\"); Class.forName(driver); con=DriverManager.getConnection(url,user,dbpassword); System.out.println(\".......2........\"); System.out.println(deptno); pstmt=con.prepareStatement(\"update faculty_details set faculty_name=?,subject_dealing=?,joining_date=?,mailid=? where faculty_id=?\"); System.out.println(\".......3........\"); pstmt.setString(1,request.getParameter(\"tname\")); pstmt.setString(2,request.getParameter(\"sdealing\")); pstmt.setString(3,request.getParameter(\"jdate\")); pstmt.setString(4,request.getParameter(\"mailid\")); pstmt.setString(5,request.getParameter(\"fno\")); pstmt.execute(); System.out.println(\".......4........\"); response.sendRedirect(\"UpdateFacultyDetails.jsp\"); System.out.println(\".......5........\"); } catch(Exception e) {System.out.println(\".......6........\"); e.printStackTrace(); } } }","dependencies":[]}}
{"project_id":112,"chunk_id":0,"content":{"main_file_path":"Student Result Processing System Java Project\\Sourcde Code\\Source Code\\srp\\src\\UpdateStudentDetails.java","main_file_content":"import java.io.*; import java.sql.*; import javax.servlet.*; import javax.servlet.http.*; public class UpdateStudentDetails extends HttpServlet { public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException { String deptname=request.getParameter(\"deptname\"); String loc=request.getParameter(\"location\"); String deptno=request.getParameter(\"deptno\"); Connection con; PreparedStatement pstmt; ServletContext sc=getServletContext(); String driver=sc.getInitParameter(\"driver\"); String url=sc.getInitParameter(\"url\"); String dbpassword=sc.getInitParameter(\"dbpassword\"); String user=sc.getInitParameter(\"user\"); response.setContentType(\"text/html\"); try { System.out.println(\".......1........\"); Class.forName(driver); con=DriverManager.getConnection(url,user,dbpassword); System.out.println(\".......2........\"); System.out.println(deptno); pstmt=con.prepareStatement(\"update student_details set student_name=?,currentstandard=?,currentdivision=?,parentemailid=?,joiningdate=?,reportcardno=? where student_id=?\"); System.out.println(\".......3........\"); pstmt.setString(1,request.getParameter(\"sname\")); pstmt.setString(2,request.getParameter(\"cstandard\")); pstmt.setString(3,request.getParameter(\"cdivision\")); pstmt.setString(4,request.getParameter(\"mailid\")); pstmt.setString(5,request.getParameter(\"joiningdate\")); pstmt.setString(6,request.getParameter(\"rno\")); pstmt.setString(7,request.getParameter(\"sno\")); pstmt.execute(); System.out.println(\".......4........\"); response.sendRedirect(\"UpdateStudentDetails.jsp\"); System.out.println(\".......5........\"); } catch(Exception e) {System.out.println(\".......6........\"); e.printStackTrace(); } } }","dependencies":[]}}
{"project_id":112,"chunk_id":0,"content":{"main_file_path":"Student Result Processing System Java Project\\Sourcde Code\\Source Code\\srp\\src\\UpdateStudentRemarks.java","main_file_content":"import java.io.*; import java.sql.*; import javax.servlet.*; import javax.servlet.http.*; public class UpdateStudentRemarks extends HttpServlet { public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException { String deptname=request.getParameter(\"deptname\"); String loc=request.getParameter(\"location\"); String deptno=request.getParameter(\"deptno\"); Connection con; PreparedStatement pstmt; ServletContext sc=getServletContext(); String driver=sc.getInitParameter(\"driver\"); String url=sc.getInitParameter(\"url\"); String dbpassword=sc.getInitParameter(\"dbpassword\"); String user=sc.getInitParameter(\"user\"); response.setContentType(\"text/html\"); try { System.out.println(\".......1........\"); Class.forName(driver); con=DriverManager.getConnection(url,user,dbpassword); System.out.println(\".......2........\"); System.out.println(deptno); pstmt=con.prepareStatement(\"update student_remarks set remarks=?,date=? where remark_id=?\"); System.out.println(\".......3........\"); pstmt.setString(1,request.getParameter(\"remark\")); pstmt.setString(2,request.getParameter(\"date\")); pstmt.setString(3,request.getParameter(\"rid\")); pstmt.execute(); System.out.println(\".......4........\"); response.sendRedirect(\"UpdateStudentRemarks.jsp\"); System.out.println(\".......5........\"); } catch(Exception e) {System.out.println(\".......6........\"); e.printStackTrace(); } } }","dependencies":[]}}
{"project_id":113,"chunk_id":0,"content":{"main_file_path":"Student-Management-System-main\\StudentManagementSystem\\Login.java","main_file_content":"package StudentManagement; import java.awt.BorderLayout; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import javax.swing.GroupLayout; import javax.swing.GroupLayout.Alignment; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JTextField; import java.awt.Font; import javax.swing.JPasswordField; import javax.swing.JButton; import java.awt.event.ActionListener; import java.awt.event.ActionEvent; import javax.swing.LayoutStyle.ComponentPlacement; import javax.swing.JDesktopPane; import java.awt.Color; public class Login extends JFrame { private JPanel contentPane; private JTextField username; private JPasswordField password; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { Login frame = new Login(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } public Login() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 459, 450); contentPane = new JPanel(); contentPane.setBackground(Color.LIGHT_GRAY); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); JLabel loginUsername = new JLabel(\"Username\"); loginUsername.setForeground(Color.BLACK); loginUsername.setFont(new Font(\"Perpetua Titling MT\", Font.BOLD, 14)); JLabel loginPassword = new JLabel(\"Password\"); loginPassword.setForeground(Color.BLACK); loginPassword.setFont(new Font(\"Perpetua Titling MT\", Font.BOLD, 14)); username = new JTextField(); username.setColumns(10); password = new JPasswordField(); JButton login = new JButton(\"Login\"); login.setForeground(Color.BLACK); login.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { if(username.getText().equals(\"admin\") && password.getText().equals(\"admin123\")) { Menu menuPage = new Menu(); menuPage.show(); dispose(); } else if(username.getText().isEmpty() || password.getText().isEmpty()) { JOptionPane.showMessageDialog(null, \"Please enter the Username or Password :(\"); } else{ JOptionPane.showMessageDialog(null, \"Incorrect Username or Password :(\"); } } }); login.setFont(new Font(\"Perpetua Titling MT\", Font.BOLD, 14)); JDesktopPane desktopPane = new JDesktopPane(); desktopPane.setBackground(Color.GRAY); GroupLayout gl_contentPane = new GroupLayout(contentPane); gl_contentPane.setHorizontalGroup( gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addContainerGap(65, Short.MAX_VALUE) .addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addComponent(loginPassword) .addGap(18) .addComponent(password)) .addGroup(gl_contentPane.createSequentialGroup() .addComponent(loginUsername) .addGap(18) .addComponent(username, GroupLayout.PREFERRED_SIZE, 216, GroupLayout.PREFERRED_SIZE))) .addGap(25)) .addGroup(gl_contentPane.createSequentialGroup() .addContainerGap() .addComponent(desktopPane, GroupLayout.PREFERRED_SIZE, 408, GroupLayout.PREFERRED_SIZE))) .addContainerGap(15, Short.MAX_VALUE)) .addGroup(gl_contentPane.createSequentialGroup() .addGap(131) .addComponent(login, GroupLayout.PREFERRED_SIZE, 165, GroupLayout.PREFERRED_SIZE) .addContainerGap(137, Short.MAX_VALUE)) ); gl_contentPane.setVerticalGroup( gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addContainerGap() .addComponent(desktopPane, GroupLayout.PREFERRED_SIZE, 122, GroupLayout.PREFERRED_SIZE) .addGap(47) .addGroup(gl_contentPane.createParallelGroup(Alignment.BASELINE) .addComponent(loginUsername) .addComponent(username, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)) .addGap(41) .addGroup(gl_contentPane.createParallelGroup(Alignment.BASELINE) .addComponent(loginPassword) .addComponent(password, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)) .addGap(37) .addComponent(login, GroupLayout.PREFERRED_SIZE, 34, GroupLayout.PREFERRED_SIZE) .addContainerGap(47, Short.MAX_VALUE)) ); JLabel loginpage = new JLabel(\"Login\"); loginpage.setForeground(Color.BLACK); loginpage.setBounds(160, 47, 75, 27); desktopPane.add(loginpage); loginpage.setFont(new Font(\"Perpetua Titling MT\", Font.BOLD, 22)); contentPane.setLayout(gl_contentPane); } }","dependencies":[{"file_path":"Student-Management-System-main\\StudentManagementSystem\\Menu.java","file_content":"package StudentManagement; import java.awt.BorderLayout; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import javax.swing.GroupLayout; import javax.swing.GroupLayout.Alignment; import javax.swing.JLabel; import javax.swing.JOptionPane; import java.awt.Font; import javax.swing.JSplitPane; import javax.swing.JDesktopPane; import javax.swing.JButton; import java.awt.event.ActionListener; import java.awt.event.ActionEvent; import java.awt.Color; public class Menu extends JFrame { private JPanel contentPane; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { Menu frame = new Menu(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } public Menu() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 623); contentPane = new JPanel(); contentPane.setBackground(Color.GRAY); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); JDesktopPane desktopPane = new JDesktopPane(); desktopPane.setBackground(Color.LIGHT_GRAY); JDesktopPane desktopPane_1 = new JDesktopPane(); desktopPane_1.setBackground(Color.LIGHT_GRAY); GroupLayout gl_contentPane = new GroupLayout(contentPane); gl_contentPane.setHorizontalGroup( gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addContainerGap() .addComponent(desktopPane_1, GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)) .addGroup(gl_contentPane.createSequentialGroup() .addGap(36) .addComponent(desktopPane, GroupLayout.PREFERRED_SIZE, 351, GroupLayout.PREFERRED_SIZE))) .addContainerGap()) ); gl_contentPane.setVerticalGroup( gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addContainerGap() .addComponent(desktopPane_1, GroupLayout.PREFERRED_SIZE, 55, GroupLayout.PREFERRED_SIZE) .addGap(26) .addComponent(desktopPane, GroupLayout.PREFERRED_SIZE, 445, GroupLayout.PREFERRED_SIZE) .addContainerGap(37, Short.MAX_VALUE)) ); JButton btnNewButton = new JButton(\"Add Student\"); btnNewButton.setForeground(Color.BLACK); btnNewButton.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { Student studentDetails = new Student(); studentDetails.show(); dispose(); } }); btnNewButton.setBounds(32, 37, 287, 47); desktopPane.add(btnNewButton); JButton btnNewButton_1 = new JButton(\"Remove Existing Student\"); btnNewButton_1.setForeground(Color.BLACK); btnNewButton_1.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { RemoveStudent remove = new RemoveStudent(); remove.show(); dispose(); } }); btnNewButton_1.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); btnNewButton_1.setBounds(32, 113, 287, 52); desktopPane.add(btnNewButton_1); JButton btnNewButton_2 = new JButton(\"View Students\"); btnNewButton_2.setForeground(Color.BLACK); btnNewButton_2.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ViewStudent viewStudent = new ViewStudent(); viewStudent.show(); dispose(); } }); btnNewButton_2.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); btnNewButton_2.setBounds(32, 195, 287, 52); desktopPane.add(btnNewButton_2); JButton btnNewButton_3 = new JButton(\"Update Existing Student\"); btnNewButton_3.setForeground(Color.BLACK); btnNewButton_3.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { UpdateStudent updateStudent = new UpdateStudent(); updateStudent.show(); dispose(); } }); btnNewButton_3.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); btnNewButton_3.setBounds(32, 272, 287, 52); desktopPane.add(btnNewButton_3); JButton btnNewButton_4 = new JButton(\"Logout\"); btnNewButton_4.setForeground(Color.BLACK); btnNewButton_4.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { Login logout = new Login(); logout.show(); dispose(); JOptionPane.showMessageDialog(null, \"Successfully logged out :)\"); } }); btnNewButton_4.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); btnNewButton_4.setBounds(32, 348, 287, 47); desktopPane.add(btnNewButton_4); JLabel lblNewLabel = new JLabel(\"What do you want ?\"); lblNewLabel.setForeground(Color.BLACK); lblNewLabel.setBounds(93, 17, 220, 27); desktopPane_1.add(lblNewLabel); lblNewLabel.setFont(new Font(\"Tahoma\", Font.BOLD, 22)); contentPane.setLayout(gl_contentPane); } }"}]}}
{"project_id":113,"chunk_id":0,"content":{"main_file_path":"Student-Management-System-main\\StudentManagementSystem\\Menu.java","main_file_content":"package StudentManagement; import java.awt.BorderLayout; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import javax.swing.GroupLayout; import javax.swing.GroupLayout.Alignment; import javax.swing.JLabel; import javax.swing.JOptionPane; import java.awt.Font; import javax.swing.JSplitPane; import javax.swing.JDesktopPane; import javax.swing.JButton; import java.awt.event.ActionListener; import java.awt.event.ActionEvent; import java.awt.Color; public class Menu extends JFrame { private JPanel contentPane; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { Menu frame = new Menu(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } public Menu() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 623); contentPane = new JPanel(); contentPane.setBackground(Color.GRAY); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); JDesktopPane desktopPane = new JDesktopPane(); desktopPane.setBackground(Color.LIGHT_GRAY); JDesktopPane desktopPane_1 = new JDesktopPane(); desktopPane_1.setBackground(Color.LIGHT_GRAY); GroupLayout gl_contentPane = new GroupLayout(contentPane); gl_contentPane.setHorizontalGroup( gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addContainerGap() .addComponent(desktopPane_1, GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)) .addGroup(gl_contentPane.createSequentialGroup() .addGap(36) .addComponent(desktopPane, GroupLayout.PREFERRED_SIZE, 351, GroupLayout.PREFERRED_SIZE))) .addContainerGap()) ); gl_contentPane.setVerticalGroup( gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addContainerGap() .addComponent(desktopPane_1, GroupLayout.PREFERRED_SIZE, 55, GroupLayout.PREFERRED_SIZE) .addGap(26) .addComponent(desktopPane, GroupLayout.PREFERRED_SIZE, 445, GroupLayout.PREFERRED_SIZE) .addContainerGap(37, Short.MAX_VALUE)) ); JButton btnNewButton = new JButton(\"Add Student\"); btnNewButton.setForeground(Color.BLACK); btnNewButton.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { Student studentDetails = new Student(); studentDetails.show(); dispose(); } }); btnNewButton.setBounds(32, 37, 287, 47); desktopPane.add(btnNewButton); JButton btnNewButton_1 = new JButton(\"Remove Existing Student\"); btnNewButton_1.setForeground(Color.BLACK); btnNewButton_1.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { RemoveStudent remove = new RemoveStudent(); remove.show(); dispose(); } }); btnNewButton_1.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); btnNewButton_1.setBounds(32, 113, 287, 52); desktopPane.add(btnNewButton_1); JButton btnNewButton_2 = new JButton(\"View Students\"); btnNewButton_2.setForeground(Color.BLACK); btnNewButton_2.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ViewStudent viewStudent = new ViewStudent(); viewStudent.show(); dispose(); } }); btnNewButton_2.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); btnNewButton_2.setBounds(32, 195, 287, 52); desktopPane.add(btnNewButton_2); JButton btnNewButton_3 = new JButton(\"Update Existing Student\"); btnNewButton_3.setForeground(Color.BLACK); btnNewButton_3.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { UpdateStudent updateStudent = new UpdateStudent(); updateStudent.show(); dispose(); } }); btnNewButton_3.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); btnNewButton_3.setBounds(32, 272, 287, 52); desktopPane.add(btnNewButton_3); JButton btnNewButton_4 = new JButton(\"Logout\"); btnNewButton_4.setForeground(Color.BLACK); btnNewButton_4.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { Login logout = new Login(); logout.show(); dispose(); JOptionPane.showMessageDialog(null, \"Successfully logged out :)\"); } }); btnNewButton_4.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); btnNewButton_4.setBounds(32, 348, 287, 47); desktopPane.add(btnNewButton_4); JLabel lblNewLabel = new JLabel(\"What do you want ?\"); lblNewLabel.setForeground(Color.BLACK); lblNewLabel.setBounds(93, 17, 220, 27); desktopPane_1.add(lblNewLabel); lblNewLabel.setFont(new Font(\"Tahoma\", Font.BOLD, 22)); contentPane.setLayout(gl_contentPane); } }","dependencies":[{"file_path":"Student-Management-System-main\\StudentManagementSystem\\Login.java","file_content":"package StudentManagement; import java.awt.BorderLayout; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import javax.swing.GroupLayout; import javax.swing.GroupLayout.Alignment; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JTextField; import java.awt.Font; import javax.swing.JPasswordField; import javax.swing.JButton; import java.awt.event.ActionListener; import java.awt.event.ActionEvent; import javax.swing.LayoutStyle.ComponentPlacement; import javax.swing.JDesktopPane; import java.awt.Color; public class Login extends JFrame { private JPanel contentPane; private JTextField username; private JPasswordField password; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { Login frame = new Login(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } public Login() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 459, 450); contentPane = new JPanel(); contentPane.setBackground(Color.LIGHT_GRAY); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); JLabel loginUsername = new JLabel(\"Username\"); loginUsername.setForeground(Color.BLACK); loginUsername.setFont(new Font(\"Perpetua Titling MT\", Font.BOLD, 14)); JLabel loginPassword = new JLabel(\"Password\"); loginPassword.setForeground(Color.BLACK); loginPassword.setFont(new Font(\"Perpetua Titling MT\", Font.BOLD, 14)); username = new JTextField(); username.setColumns(10); password = new JPasswordField(); JButton login = new JButton(\"Login\"); login.setForeground(Color.BLACK); login.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { if(username.getText().equals(\"admin\") && password.getText().equals(\"admin123\")) { Menu menuPage = new Menu(); menuPage.show(); dispose(); } else if(username.getText().isEmpty() || password.getText().isEmpty()) { JOptionPane.showMessageDialog(null, \"Please enter the Username or Password :(\"); } else{ JOptionPane.showMessageDialog(null, \"Incorrect Username or Password :(\"); } } }); login.setFont(new Font(\"Perpetua Titling MT\", Font.BOLD, 14)); JDesktopPane desktopPane = new JDesktopPane(); desktopPane.setBackground(Color.GRAY); GroupLayout gl_contentPane = new GroupLayout(contentPane); gl_contentPane.setHorizontalGroup( gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addContainerGap(65, Short.MAX_VALUE) .addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addComponent(loginPassword) .addGap(18) .addComponent(password)) .addGroup(gl_contentPane.createSequentialGroup() .addComponent(loginUsername) .addGap(18) .addComponent(username, GroupLayout.PREFERRED_SIZE, 216, GroupLayout.PREFERRED_SIZE))) .addGap(25)) .addGroup(gl_contentPane.createSequentialGroup() .addContainerGap() .addComponent(desktopPane, GroupLayout.PREFERRED_SIZE, 408, GroupLayout.PREFERRED_SIZE))) .addContainerGap(15, Short.MAX_VALUE)) .addGroup(gl_contentPane.createSequentialGroup() .addGap(131) .addComponent(login, GroupLayout.PREFERRED_SIZE, 165, GroupLayout.PREFERRED_SIZE) .addContainerGap(137, Short.MAX_VALUE)) ); gl_contentPane.setVerticalGroup( gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addContainerGap() .addComponent(desktopPane, GroupLayout.PREFERRED_SIZE, 122, GroupLayout.PREFERRED_SIZE) .addGap(47) .addGroup(gl_contentPane.createParallelGroup(Alignment.BASELINE) .addComponent(loginUsername) .addComponent(username, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)) .addGap(41) .addGroup(gl_contentPane.createParallelGroup(Alignment.BASELINE) .addComponent(loginPassword) .addComponent(password, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)) .addGap(37) .addComponent(login, GroupLayout.PREFERRED_SIZE, 34, GroupLayout.PREFERRED_SIZE) .addContainerGap(47, Short.MAX_VALUE)) ); JLabel loginpage = new JLabel(\"Login\"); loginpage.setForeground(Color.BLACK); loginpage.setBounds(160, 47, 75, 27); desktopPane.add(loginpage); loginpage.setFont(new Font(\"Perpetua Titling MT\", Font.BOLD, 22)); contentPane.setLayout(gl_contentPane); } }"},{"file_path":"Student-Management-System-main\\StudentManagementSystem\\RemoveStudent.java","file_content":"package StudentManagement; import java.awt.BorderLayout; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import javax.swing.GroupLayout; import javax.swing.GroupLayout.Alignment; import javax.swing.JTextField; import javax.swing.JLabel; import javax.swing.JOptionPane; import java.awt.Font; import javax.swing.JButton; import javax.swing.JDesktopPane; import javax.swing.LayoutStyle.ComponentPlacement; import java.awt.Color; import java.awt.event.ActionListener; import java.sql.Connection; import java.sql.DriverManager; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.awt.event.ActionEvent; public class RemoveStudent extends JFrame { Connection con = null; PreparedStatement pst = null; ResultSet rs; private JPanel contentPane; private JTextField deleteEntry; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { RemoveStudent frame = new RemoveStudent(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } public RemoveStudent() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 477, 526); contentPane = new JPanel(); contentPane.setBackground(Color.GRAY); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); JDesktopPane desktopPane = new JDesktopPane(); desktopPane.setBackground(Color.LIGHT_GRAY); JDesktopPane desktopPane_1 = new JDesktopPane(); desktopPane_1.setBackground(Color.LIGHT_GRAY); GroupLayout gl_contentPane = new GroupLayout(contentPane); gl_contentPane.setHorizontalGroup( gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addContainerGap() .addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING) .addComponent(desktopPane_1, GroupLayout.PREFERRED_SIZE, 433, GroupLayout.PREFERRED_SIZE) .addComponent(desktopPane, GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)) .addContainerGap()) ); gl_contentPane.setVerticalGroup( gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addContainerGap() .addComponent(desktopPane, GroupLayout.PREFERRED_SIZE, 203, GroupLayout.PREFERRED_SIZE) .addGap(18) .addComponent(desktopPane_1, GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE) .addContainerGap()) ); deleteEntry = new JTextField(); deleteEntry.setBounds(111, 40, 206, 29); desktopPane_1.add(deleteEntry); deleteEntry.setColumns(10); JButton deleteData = new JButton(\"Delete\"); deleteData.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { try { String query = \"DELETE FROM `student` WHERE entrynumber=?\"; con = DriverManager.getConnection(\"jdbc:mysql: pst=con.prepareStatement(query); String pid = deleteEntry.getText(); pst.setString(1, pid); int k = pst.executeUpdate(); if(k==1) { JOptionPane.showMessageDialog(null, \"Deleted Successfully :)\"); dispose(); Menu menu = new Menu(); menu.show(); } } catch(Exception ex) { JOptionPane.showMessageDialog(null, ex); } } }); deleteData.setForeground(Color.BLACK); deleteData.setBounds(130, 111, 167, 37); desktopPane_1.add(deleteData); deleteData.setFont(new Font(\"Tahoma\", Font.BOLD, 14)); JButton btnNewButton_1 = new JButton(\"Cancel\"); btnNewButton_1.setForeground(Color.BLACK); btnNewButton_1.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { Menu menu = new Menu(); menu.show(); dispose(); } }); btnNewButton_1.setFont(new Font(\"Tahoma\", Font.BOLD, 14)); btnNewButton_1.setBounds(130, 171, 167, 37); desktopPane_1.add(btnNewButton_1); JLabel lblNewLabel = new JLabel(\"Enter the \\\"Entry Number\\\" of the student\"); lblNewLabel.setForeground(Color.BLACK); lblNewLabel.setBounds(10, 90, 408, 25); desktopPane.add(lblNewLabel); lblNewLabel.setFont(new Font(\"Tahoma\", Font.BOLD, 20)); contentPane.setLayout(gl_contentPane); } }"},{"file_path":"Student-Management-System-main\\StudentManagementSystem\\Student.java","file_content":"package StudentManagement; import java.awt.EventQueue; import java.awt.Font; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.sql.Connection; import java.sql.DriverManager; import java.sql.PreparedStatement; import javax.swing.GroupLayout; import javax.swing.GroupLayout.Alignment; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JPanel; import javax.swing.JTextField; import javax.swing.LayoutStyle.ComponentPlacement; import javax.swing.border.EmptyBorder; import java.awt.Color; import javax.swing.JDesktopPane; public class Student extends JFrame { private JPanel contentPane; private JTextField sname; private JTextField sentry; private JTextField semail; private JTextField scontact; private JTextField shome; Connection con = null; PreparedStatement pst = null; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { Student frame = new Student(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } public Student() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 588, 620); contentPane = new JPanel(); contentPane.setBackground(Color.LIGHT_GRAY); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); JLabel studentDetails = new JLabel(\"Student Details\"); studentDetails.setForeground(Color.BLACK); studentDetails.setFont(new Font(\"Perpetua Titling MT\", Font.BOLD, 22)); JLabel studentName = new JLabel(\"Student Name\"); studentName.setForeground(Color.BLACK); studentName.setFont(new Font(\"Perpetua Titling MT\", Font.BOLD, 14)); JLabel entryNumber = new JLabel(\"Entry Number\"); entryNumber.setForeground(Color.BLACK); entryNumber.setFont(new Font(\"Perpetua Titling MT\", Font.BOLD, 14)); JLabel emailAddress = new JLabel(\"Email Address\"); emailAddress.setForeground(Color.BLACK); emailAddress.setFont(new Font(\"Perpetua Titling MT\", Font.BOLD, 14)); JLabel contactNumber = new JLabel(\"Contact Number\"); contactNumber.setForeground(Color.BLACK); contactNumber.setFont(new Font(\"Perpetua Titling MT\", Font.BOLD, 14)); sname = new JTextField(); sname.setColumns(10); sentry = new JTextField(); sentry.setColumns(10); semail = new JTextField(); semail.setColumns(10); scontact = new JTextField(); scontact.setColumns(10); JLabel homeCity = new JLabel(\"Home City\"); homeCity.setForeground(Color.BLACK); homeCity.setFont(new Font(\"Perpetua Titling MT\", Font.BOLD, 14)); JButton submit = new JButton(\"Submit\"); submit.setForeground(Color.BLACK); submit.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { try { String query = \"INSERT INTO `student`(`name`, `entrynumber`, `email`, `contactnumber`, `homecity`) VALUES (?, ?, ?, ?, ?)\"; con = DriverManager.getConnection(\"jdbc:mysql: pst=con.prepareStatement(query); pst.setString(1, sname.getText()); pst.setString(2, sentry.getText()); pst.setString(3, semail.getText()); pst.setString(4, scontact.getText()); pst.setString(5, shome.getText()); if(sname.getText().equals(\"\") || sentry.getText().equals(\"\") || semail.getText().equals(\"\") || scontact.getText().equals(\"\") || shome.getText().equals(\"\")) { JOptionPane.showMessageDialog(null, \"Fill all the details :(\"); } else { pst.executeUpdate(); JOptionPane.showMessageDialog(null, \"Student added Successfully :)\"); dispose(); Menu menu = new Menu(); menu.show(); } } catch(Exception ex) { JOptionPane.showMessageDialog(null, ex); } } }); submit.setFont(new Font(\"Tahoma\", Font.BOLD, 14)); shome = new JTextField(); shome.setColumns(10); JDesktopPane desktopPane = new JDesktopPane(); desktopPane.setBackground(Color.GRAY); JButton btnNewButton = new JButton(\"Cancel\"); btnNewButton.setForeground(Color.BLACK); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { Menu menu = new Menu(); menu.show(); dispose(); } }); btnNewButton.setFont(new Font(\"Tahoma\", Font.BOLD, 14)); JDesktopPane desktopPane_1 = new JDesktopPane(); desktopPane_1.setBackground(Color.GRAY); JDesktopPane desktopPane_2 = new JDesktopPane(); desktopPane_2.setBackground(Color.GRAY); JDesktopPane desktopPane_3 = new JDesktopPane(); desktopPane_3.setBackground(Color.GRAY); GroupLayout gl_contentPane = new GroupLayout(contentPane); gl_contentPane.setHorizontalGroup( gl_contentPane.createParallelGroup(Alignment.LEADING) .addComponent(desktopPane, GroupLayout.DEFAULT_SIZE, 573, Short.MAX_VALUE) .addGroup(gl_contentPane.createSequentialGroup() .addComponent(desktopPane_1, GroupLayout.PREFERRED_SIZE, 563, GroupLayout.PREFERRED_SIZE) .addContainerGap()) .addGroup(gl_contentPane.createSequentialGroup() .addComponent(desktopPane_2, GroupLayout.PREFERRED_SIZE, 19, GroupLayout.PREFERRED_SIZE) .addPreferredGap(ComponentPlacement.RELATED) .addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addGap(43) .addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING) .addComponent(entryNumber) .addComponent(studentName, GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE) .addComponent(emailAddress) .addComponent(contactNumber) .addComponent(homeCity)) .addPreferredGap(ComponentPlacement.RELATED) .addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING) .addComponent(scontact, 242, 242, 242) .addComponent(shome, 247, 247, 247) .addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING, false) .addComponent(semail) .addComponent(sname) .addComponent(sentry, GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE))) .addGap(34)) .addGroup(gl_contentPane.createSequentialGroup() .addPreferredGap(ComponentPlacement.RELATED, 125, Short.MAX_VALUE) .addComponent(studentDetails) .addGap(137)) .addGroup(gl_contentPane.createSequentialGroup() .addGap(119) .addGroup(gl_contentPane.createParallelGroup(Alignment.TRAILING, false) .addComponent(btnNewButton, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE) .addComponent(submit, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)) .addGap(128))) .addPreferredGap(ComponentPlacement.RELATED) .addComponent(desktopPane_3, GroupLayout.PREFERRED_SIZE, 17, GroupLayout.PREFERRED_SIZE) .addGap(18)) ); gl_contentPane.setVerticalGroup( gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addComponent(desktopPane, GroupLayout.PREFERRED_SIZE, 21, GroupLayout.PREFERRED_SIZE) .addGap(11) .addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addComponent(studentDetails) .addGap(18) .addGroup(gl_contentPane.createParallelGroup(Alignment.BASELINE) .addComponent(studentName, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE) .addComponent(sname, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE)) .addGap(28) .addGroup(gl_contentPane.createParallelGroup(Alignment.BASELINE) .addComponent(sentry, GroupLayout.PREFERRED_SIZE, 37, GroupLayout.PREFERRED_SIZE) .addComponent(entryNumber)) .addGap(41) .addGroup(gl_contentPane.createParallelGroup(Alignment.BASELINE) .addComponent(semail, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE) .addComponent(emailAddress)) .addGap(37) .addGroup(gl_contentPane.createParallelGroup(Alignment.BASELINE) .addComponent(contactNumber) .addComponent(scontact, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)) .addGap(41) .addGroup(gl_contentPane.createParallelGroup(Alignment.BASELINE) .addComponent(shome, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE) .addComponent(homeCity)) .addGap(43) .addComponent(submit, GroupLayout.PREFERRED_SIZE, 38, GroupLayout.PREFERRED_SIZE) .addGap(18) .addComponent(btnNewButton, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE)) .addGroup(gl_contentPane.createSequentialGroup() .addPreferredGap(ComponentPlacement.RELATED) .addComponent(desktopPane_2, GroupLayout.PREFERRED_SIZE, 506, GroupLayout.PREFERRED_SIZE)) .addGroup(Alignment.TRAILING, gl_contentPane.createSequentialGroup() .addPreferredGap(ComponentPlacement.UNRELATED) .addComponent(desktopPane_3, GroupLayout.PREFERRED_SIZE, 506, GroupLayout.PREFERRED_SIZE) .addPreferredGap(ComponentPlacement.RELATED))) .addGap(13) .addComponent(desktopPane_1, GroupLayout.PREFERRED_SIZE, 25, GroupLayout.PREFERRED_SIZE) .addGap(6)) ); contentPane.setLayout(gl_contentPane); } }"}]}}
{"project_id":113,"chunk_id":1,"content":{"main_file_path":"Student-Management-System-main\\StudentManagementSystem\\Menu.java","main_file_content":"package StudentManagement; import java.awt.BorderLayout; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import javax.swing.GroupLayout; import javax.swing.GroupLayout.Alignment; import javax.swing.JLabel; import javax.swing.JOptionPane; import java.awt.Font; import javax.swing.JSplitPane; import javax.swing.JDesktopPane; import javax.swing.JButton; import java.awt.event.ActionListener; import java.awt.event.ActionEvent; import java.awt.Color; public class Menu extends JFrame { private JPanel contentPane; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { Menu frame = new Menu(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } public Menu() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 623); contentPane = new JPanel(); contentPane.setBackground(Color.GRAY); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); JDesktopPane desktopPane = new JDesktopPane(); desktopPane.setBackground(Color.LIGHT_GRAY); JDesktopPane desktopPane_1 = new JDesktopPane(); desktopPane_1.setBackground(Color.LIGHT_GRAY); GroupLayout gl_contentPane = new GroupLayout(contentPane); gl_contentPane.setHorizontalGroup( gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addContainerGap() .addComponent(desktopPane_1, GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)) .addGroup(gl_contentPane.createSequentialGroup() .addGap(36) .addComponent(desktopPane, GroupLayout.PREFERRED_SIZE, 351, GroupLayout.PREFERRED_SIZE))) .addContainerGap()) ); gl_contentPane.setVerticalGroup( gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addContainerGap() .addComponent(desktopPane_1, GroupLayout.PREFERRED_SIZE, 55, GroupLayout.PREFERRED_SIZE) .addGap(26) .addComponent(desktopPane, GroupLayout.PREFERRED_SIZE, 445, GroupLayout.PREFERRED_SIZE) .addContainerGap(37, Short.MAX_VALUE)) ); JButton btnNewButton = new JButton(\"Add Student\"); btnNewButton.setForeground(Color.BLACK); btnNewButton.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { Student studentDetails = new Student(); studentDetails.show(); dispose(); } }); btnNewButton.setBounds(32, 37, 287, 47); desktopPane.add(btnNewButton); JButton btnNewButton_1 = new JButton(\"Remove Existing Student\"); btnNewButton_1.setForeground(Color.BLACK); btnNewButton_1.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { RemoveStudent remove = new RemoveStudent(); remove.show(); dispose(); } }); btnNewButton_1.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); btnNewButton_1.setBounds(32, 113, 287, 52); desktopPane.add(btnNewButton_1); JButton btnNewButton_2 = new JButton(\"View Students\"); btnNewButton_2.setForeground(Color.BLACK); btnNewButton_2.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ViewStudent viewStudent = new ViewStudent(); viewStudent.show(); dispose(); } }); btnNewButton_2.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); btnNewButton_2.setBounds(32, 195, 287, 52); desktopPane.add(btnNewButton_2); JButton btnNewButton_3 = new JButton(\"Update Existing Student\"); btnNewButton_3.setForeground(Color.BLACK); btnNewButton_3.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { UpdateStudent updateStudent = new UpdateStudent(); updateStudent.show(); dispose(); } }); btnNewButton_3.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); btnNewButton_3.setBounds(32, 272, 287, 52); desktopPane.add(btnNewButton_3); JButton btnNewButton_4 = new JButton(\"Logout\"); btnNewButton_4.setForeground(Color.BLACK); btnNewButton_4.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { Login logout = new Login(); logout.show(); dispose(); JOptionPane.showMessageDialog(null, \"Successfully logged out :)\"); } }); btnNewButton_4.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); btnNewButton_4.setBounds(32, 348, 287, 47); desktopPane.add(btnNewButton_4); JLabel lblNewLabel = new JLabel(\"What do you want ?\"); lblNewLabel.setForeground(Color.BLACK); lblNewLabel.setBounds(93, 17, 220, 27); desktopPane_1.add(lblNewLabel); lblNewLabel.setFont(new Font(\"Tahoma\", Font.BOLD, 22)); contentPane.setLayout(gl_contentPane); } }","dependencies":[{"file_path":"Student-Management-System-main\\StudentManagementSystem\\UpdateStudent.java","file_content":"package StudentManagement; import java.awt.BorderLayout; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import javax.swing.GroupLayout; import javax.swing.GroupLayout.Alignment; import javax.swing.JDesktopPane; import javax.swing.JTextField; import javax.swing.JButton; import java.awt.Font; import javax.swing.JLabel; import javax.swing.JOptionPane; import java.awt.event.ActionListener; import java.sql.Connection; import java.sql.DriverManager; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.awt.event.ActionEvent; import javax.swing.LayoutStyle.ComponentPlacement; import java.awt.Color; public class UpdateStudent extends JFrame { Connection con = null; PreparedStatement pst = null; ResultSet rs; private JPanel contentPane; private JTextField updateEntry; private JTextField nameU; private JTextField entryU; private JTextField emailU; private JTextField contactU; private JTextField homeU; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { UpdateStudent frame = new UpdateStudent(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } public UpdateStudent() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 676, 656); contentPane = new JPanel(); contentPane.setBackground(Color.LIGHT_GRAY); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); JDesktopPane desktopPane = new JDesktopPane(); desktopPane.setBackground(Color.GRAY); nameU = new JTextField(); nameU.setColumns(10); JLabel lblNewLabel_1 = new JLabel(\"Student Name\"); lblNewLabel_1.setForeground(Color.BLACK); lblNewLabel_1.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); JLabel lblNewLabel_1_1 = new JLabel(\"Entry Number\"); lblNewLabel_1_1.setForeground(Color.BLACK); lblNewLabel_1_1.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); JLabel lblNewLabel_1_2 = new JLabel(\"Email Address\"); lblNewLabel_1_2.setForeground(Color.BLACK); lblNewLabel_1_2.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); JLabel lblNewLabel_1_3 = new JLabel(\"Contact Number\"); lblNewLabel_1_3.setForeground(Color.BLACK); lblNewLabel_1_3.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); JLabel lblNewLabel_1_4 = new JLabel(\"Home City\"); lblNewLabel_1_4.setForeground(Color.BLACK); lblNewLabel_1_4.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); entryU = new JTextField(); entryU.setColumns(10); emailU = new JTextField(); emailU.setColumns(10); contactU = new JTextField(); contactU.setColumns(10); homeU = new JTextField(); homeU.setColumns(10); JButton updateBtn = new JButton(\"Update\"); updateBtn.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { try { String query = \"UPDATE `student` SET name=?, entrynumber=?, email=?, contactnumber=?, homecity=? WHERE entrynumber=?\"; con = DriverManager.getConnection(\"jdbc:mysql: pst=con.prepareStatement(query); String pid = updateEntry.getText(); pst.setString(1, nameU.getText()); pst.setString(2, entryU.getText()); pst.setString(3, emailU.getText()); pst.setString(4, contactU.getText()); pst.setString(5, homeU.getText()); pst.setString(6, pid); if(nameU.getText().equals(\"\") || entryU.getText().equals(\"\") || emailU.getText().equals(\"\") || contactU.getText().equals(\"\") || homeU.getText().equals(\"\")) { JOptionPane.showMessageDialog(null, \"Fill all the details :(\"); } else { pst.executeUpdate(); JOptionPane.showMessageDialog(null, \"Updated Successfully :)\"); dispose(); Menu menu = new Menu(); menu.show(); } } catch(Exception ex) { JOptionPane.showMessageDialog(null, ex); } } }); updateBtn.setForeground(Color.BLACK); updateBtn.setFont(new Font(\"Tahoma\", Font.BOLD, 14)); GroupLayout gl_contentPane = new GroupLayout(contentPane); gl_contentPane.setHorizontalGroup( gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addComponent(desktopPane, GroupLayout.PREFERRED_SIZE, 647, GroupLayout.PREFERRED_SIZE) .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)) .addGroup(gl_contentPane.createSequentialGroup() .addGap(127) .addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING) .addComponent(lblNewLabel_1) .addGroup(gl_contentPane.createSequentialGroup() .addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING) .addComponent(lblNewLabel_1_3, GroupLayout.PREFERRED_SIZE, 140, GroupLayout.PREFERRED_SIZE) .addComponent(lblNewLabel_1_2, GroupLayout.PREFERRED_SIZE, 116, GroupLayout.PREFERRED_SIZE) .addComponent(lblNewLabel_1_1, GroupLayout.PREFERRED_SIZE, 116, GroupLayout.PREFERRED_SIZE)) .addPreferredGap(ComponentPlacement.RELATED, 383, Short.MAX_VALUE))) .addGap(22)) .addGroup(gl_contentPane.createSequentialGroup() .addComponent(lblNewLabel_1_4, GroupLayout.PREFERRED_SIZE, 116, GroupLayout.PREFERRED_SIZE) .addPreferredGap(ComponentPlacement.RELATED))) .addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING) .addComponent(entryU, GroupLayout.PREFERRED_SIZE, 207, GroupLayout.PREFERRED_SIZE) .addComponent(nameU, GroupLayout.PREFERRED_SIZE, 207, GroupLayout.PREFERRED_SIZE) .addComponent(emailU, GroupLayout.PREFERRED_SIZE, 207, GroupLayout.PREFERRED_SIZE) .addComponent(contactU, GroupLayout.PREFERRED_SIZE, 207, GroupLayout.PREFERRED_SIZE) .addComponent(homeU, GroupLayout.PREFERRED_SIZE, 207, GroupLayout.PREFERRED_SIZE)) .addGap(114)) .addGroup(gl_contentPane.createSequentialGroup() .addGap(261) .addComponent(updateBtn, GroupLayout.PREFERRED_SIZE, 128, GroupLayout.PREFERRED_SIZE) .addContainerGap(261, Short.MAX_VALUE)) ); gl_contentPane.setVerticalGroup( gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addComponent(desktopPane, GroupLayout.PREFERRED_SIZE, 242, GroupLayout.PREFERRED_SIZE) .addGap(27) .addGroup(gl_contentPane.createParallelGroup(Alignment.TRAILING) .addComponent(lblNewLabel_1) .addComponent(nameU, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)) .addGap(27) .addGroup(gl_contentPane.createParallelGroup(Alignment.TRAILING) .addComponent(lblNewLabel_1_1, GroupLayout.PREFERRED_SIZE, 20, GroupLayout.PREFERRED_SIZE) .addComponent(entryU, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)) .addGap(26) .addGroup(gl_contentPane.createParallelGroup(Alignment.TRAILING) .addComponent(lblNewLabel_1_2, GroupLayout.PREFERRED_SIZE, 20, GroupLayout.PREFERRED_SIZE) .addComponent(emailU, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)) .addGap(29) .addGroup(gl_contentPane.createParallelGroup(Alignment.TRAILING) .addComponent(lblNewLabel_1_3, GroupLayout.PREFERRED_SIZE, 20, GroupLayout.PREFERRED_SIZE) .addComponent(contactU, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)) .addGap(27) .addGroup(gl_contentPane.createParallelGroup(Alignment.TRAILING) .addComponent(homeU, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE) .addComponent(lblNewLabel_1_4, GroupLayout.PREFERRED_SIZE, 20, GroupLayout.PREFERRED_SIZE)) .addPreferredGap(ComponentPlacement.RELATED, 27, Short.MAX_VALUE) .addComponent(updateBtn, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE) .addContainerGap()) ); updateEntry = new JTextField(); updateEntry.setBounds(190, 100, 237, 33); desktopPane.add(updateEntry); updateEntry.setColumns(10); JButton btnNewButton = new JButton(\"Search\"); btnNewButton.setForeground(Color.BLACK); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { String str = updateEntry.getText(); try { con = DriverManager.getConnection(\"jdbc:mysql: pst = con.prepareStatement(\"SELECT * FROM student where entrynumber = ?\"); pst.setString(1, str); rs = pst.executeQuery(); if(rs.next()==true) { String s = rs.getString(1); String s1 = rs.getString(2); String s2 = rs.getString(3); String s3 = rs.getString(4); String s4 = rs.getString(5); nameU.setText(s); entryU.setText(s1); emailU.setText(s2); contactU.setText(s3); homeU.setText(s4); } } catch (SQLException e1) { e1.printStackTrace(); } } }); btnNewButton.setFont(new Font(\"Tahoma\", Font.BOLD, 14)); btnNewButton.setBounds(334, 164, 149, 33); desktopPane.add(btnNewButton); JButton btnCancel = new JButton(\"Cancel\"); btnCancel.setForeground(Color.BLACK); btnCancel.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { Menu menu = new Menu(); menu.show(); dispose(); } }); btnCancel.setFont(new Font(\"Tahoma\", Font.BOLD, 14)); btnCancel.setBounds(143, 164, 149, 33); desktopPane.add(btnCancel); JLabel lblNewLabel = new JLabel(\"Search the \\\"Entry Number\\\"\"); lblNewLabel.setForeground(Color.BLACK); lblNewLabel.setFont(new Font(\"Tahoma\", Font.BOLD, 20)); lblNewLabel.setBounds(180, 56, 283, 33); desktopPane.add(lblNewLabel); contentPane.setLayout(gl_contentPane); } }"},{"file_path":"Student-Management-System-main\\StudentManagementSystem\\ViewStudent.java","file_content":"package StudentManagement; import java.awt.BorderLayout; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import javax.swing.GroupLayout; import javax.swing.GroupLayout.Alignment; import javax.swing.JDesktopPane; import javax.swing.JLabel; import java.awt.Font; import java.awt.Color; import javax.swing.JButton; import java.awt.event.ActionListener; import java.awt.event.ActionEvent; public class ViewStudent extends JFrame { private JPanel contentPane; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { ViewStudent frame = new ViewStudent(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } public ViewStudent() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 782, 611); contentPane = new JPanel(); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); JDesktopPane desktopPane = new JDesktopPane(); desktopPane.setBackground(Color.GRAY); GroupLayout gl_contentPane = new GroupLayout(contentPane); gl_contentPane.setHorizontalGroup( gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addComponent(desktopPane, GroupLayout.PREFERRED_SIZE, 753, GroupLayout.PREFERRED_SIZE) .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)) ); gl_contentPane.setVerticalGroup( gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addComponent(desktopPane, GroupLayout.PREFERRED_SIZE, 139, GroupLayout.PREFERRED_SIZE) .addContainerGap(423, Short.MAX_VALUE)) ); JLabel lblNewLabel = new JLabel(\"Student Details\"); lblNewLabel.setForeground(Color.BLACK); lblNewLabel.setFont(new Font(\"Tahoma\", Font.BOLD, 28)); lblNewLabel.setBounds(255, 27, 225, 52); desktopPane.add(lblNewLabel); JButton btnNewButton = new JButton(\"Go Back\"); btnNewButton.setForeground(Color.BLACK); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { Menu menu = new Menu(); menu.show(); dispose(); } }); btnNewButton.setFont(new Font(\"Tahoma\", Font.BOLD, 14)); btnNewButton.setBounds(10, 96, 113, 32); desktopPane.add(btnNewButton); contentPane.setLayout(gl_contentPane); } }"}]}}
{"project_id":113,"chunk_id":0,"content":{"main_file_path":"Student-Management-System-main\\StudentManagementSystem\\RemoveStudent.java","main_file_content":"package StudentManagement; import java.awt.BorderLayout; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import javax.swing.GroupLayout; import javax.swing.GroupLayout.Alignment; import javax.swing.JTextField; import javax.swing.JLabel; import javax.swing.JOptionPane; import java.awt.Font; import javax.swing.JButton; import javax.swing.JDesktopPane; import javax.swing.LayoutStyle.ComponentPlacement; import java.awt.Color; import java.awt.event.ActionListener; import java.sql.Connection; import java.sql.DriverManager; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.awt.event.ActionEvent; public class RemoveStudent extends JFrame { Connection con = null; PreparedStatement pst = null; ResultSet rs; private JPanel contentPane; private JTextField deleteEntry; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { RemoveStudent frame = new RemoveStudent(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } public RemoveStudent() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 477, 526); contentPane = new JPanel(); contentPane.setBackground(Color.GRAY); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); JDesktopPane desktopPane = new JDesktopPane(); desktopPane.setBackground(Color.LIGHT_GRAY); JDesktopPane desktopPane_1 = new JDesktopPane(); desktopPane_1.setBackground(Color.LIGHT_GRAY); GroupLayout gl_contentPane = new GroupLayout(contentPane); gl_contentPane.setHorizontalGroup( gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addContainerGap() .addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING) .addComponent(desktopPane_1, GroupLayout.PREFERRED_SIZE, 433, GroupLayout.PREFERRED_SIZE) .addComponent(desktopPane, GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)) .addContainerGap()) ); gl_contentPane.setVerticalGroup( gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addContainerGap() .addComponent(desktopPane, GroupLayout.PREFERRED_SIZE, 203, GroupLayout.PREFERRED_SIZE) .addGap(18) .addComponent(desktopPane_1, GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE) .addContainerGap()) ); deleteEntry = new JTextField(); deleteEntry.setBounds(111, 40, 206, 29); desktopPane_1.add(deleteEntry); deleteEntry.setColumns(10); JButton deleteData = new JButton(\"Delete\"); deleteData.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { try { String query = \"DELETE FROM `student` WHERE entrynumber=?\"; con = DriverManager.getConnection(\"jdbc:mysql: pst=con.prepareStatement(query); String pid = deleteEntry.getText(); pst.setString(1, pid); int k = pst.executeUpdate(); if(k==1) { JOptionPane.showMessageDialog(null, \"Deleted Successfully :)\"); dispose(); Menu menu = new Menu(); menu.show(); } } catch(Exception ex) { JOptionPane.showMessageDialog(null, ex); } } }); deleteData.setForeground(Color.BLACK); deleteData.setBounds(130, 111, 167, 37); desktopPane_1.add(deleteData); deleteData.setFont(new Font(\"Tahoma\", Font.BOLD, 14)); JButton btnNewButton_1 = new JButton(\"Cancel\"); btnNewButton_1.setForeground(Color.BLACK); btnNewButton_1.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { Menu menu = new Menu(); menu.show(); dispose(); } }); btnNewButton_1.setFont(new Font(\"Tahoma\", Font.BOLD, 14)); btnNewButton_1.setBounds(130, 171, 167, 37); desktopPane_1.add(btnNewButton_1); JLabel lblNewLabel = new JLabel(\"Enter the \\\"Entry Number\\\" of the student\"); lblNewLabel.setForeground(Color.BLACK); lblNewLabel.setBounds(10, 90, 408, 25); desktopPane.add(lblNewLabel); lblNewLabel.setFont(new Font(\"Tahoma\", Font.BOLD, 20)); contentPane.setLayout(gl_contentPane); } }","dependencies":[{"file_path":"Student-Management-System-main\\StudentManagementSystem\\Menu.java","file_content":"package StudentManagement; import java.awt.BorderLayout; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import javax.swing.GroupLayout; import javax.swing.GroupLayout.Alignment; import javax.swing.JLabel; import javax.swing.JOptionPane; import java.awt.Font; import javax.swing.JSplitPane; import javax.swing.JDesktopPane; import javax.swing.JButton; import java.awt.event.ActionListener; import java.awt.event.ActionEvent; import java.awt.Color; public class Menu extends JFrame { private JPanel contentPane; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { Menu frame = new Menu(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } public Menu() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 623); contentPane = new JPanel(); contentPane.setBackground(Color.GRAY); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); JDesktopPane desktopPane = new JDesktopPane(); desktopPane.setBackground(Color.LIGHT_GRAY); JDesktopPane desktopPane_1 = new JDesktopPane(); desktopPane_1.setBackground(Color.LIGHT_GRAY); GroupLayout gl_contentPane = new GroupLayout(contentPane); gl_contentPane.setHorizontalGroup( gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addContainerGap() .addComponent(desktopPane_1, GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)) .addGroup(gl_contentPane.createSequentialGroup() .addGap(36) .addComponent(desktopPane, GroupLayout.PREFERRED_SIZE, 351, GroupLayout.PREFERRED_SIZE))) .addContainerGap()) ); gl_contentPane.setVerticalGroup( gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addContainerGap() .addComponent(desktopPane_1, GroupLayout.PREFERRED_SIZE, 55, GroupLayout.PREFERRED_SIZE) .addGap(26) .addComponent(desktopPane, GroupLayout.PREFERRED_SIZE, 445, GroupLayout.PREFERRED_SIZE) .addContainerGap(37, Short.MAX_VALUE)) ); JButton btnNewButton = new JButton(\"Add Student\"); btnNewButton.setForeground(Color.BLACK); btnNewButton.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { Student studentDetails = new Student(); studentDetails.show(); dispose(); } }); btnNewButton.setBounds(32, 37, 287, 47); desktopPane.add(btnNewButton); JButton btnNewButton_1 = new JButton(\"Remove Existing Student\"); btnNewButton_1.setForeground(Color.BLACK); btnNewButton_1.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { RemoveStudent remove = new RemoveStudent(); remove.show(); dispose(); } }); btnNewButton_1.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); btnNewButton_1.setBounds(32, 113, 287, 52); desktopPane.add(btnNewButton_1); JButton btnNewButton_2 = new JButton(\"View Students\"); btnNewButton_2.setForeground(Color.BLACK); btnNewButton_2.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ViewStudent viewStudent = new ViewStudent(); viewStudent.show(); dispose(); } }); btnNewButton_2.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); btnNewButton_2.setBounds(32, 195, 287, 52); desktopPane.add(btnNewButton_2); JButton btnNewButton_3 = new JButton(\"Update Existing Student\"); btnNewButton_3.setForeground(Color.BLACK); btnNewButton_3.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { UpdateStudent updateStudent = new UpdateStudent(); updateStudent.show(); dispose(); } }); btnNewButton_3.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); btnNewButton_3.setBounds(32, 272, 287, 52); desktopPane.add(btnNewButton_3); JButton btnNewButton_4 = new JButton(\"Logout\"); btnNewButton_4.setForeground(Color.BLACK); btnNewButton_4.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { Login logout = new Login(); logout.show(); dispose(); JOptionPane.showMessageDialog(null, \"Successfully logged out :)\"); } }); btnNewButton_4.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); btnNewButton_4.setBounds(32, 348, 287, 47); desktopPane.add(btnNewButton_4); JLabel lblNewLabel = new JLabel(\"What do you want ?\"); lblNewLabel.setForeground(Color.BLACK); lblNewLabel.setBounds(93, 17, 220, 27); desktopPane_1.add(lblNewLabel); lblNewLabel.setFont(new Font(\"Tahoma\", Font.BOLD, 22)); contentPane.setLayout(gl_contentPane); } }"}]}}
{"project_id":113,"chunk_id":0,"content":{"main_file_path":"Student-Management-System-main\\StudentManagementSystem\\Student.java","main_file_content":"package StudentManagement; import java.awt.EventQueue; import java.awt.Font; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.sql.Connection; import java.sql.DriverManager; import java.sql.PreparedStatement; import javax.swing.GroupLayout; import javax.swing.GroupLayout.Alignment; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JPanel; import javax.swing.JTextField; import javax.swing.LayoutStyle.ComponentPlacement; import javax.swing.border.EmptyBorder; import java.awt.Color; import javax.swing.JDesktopPane; public class Student extends JFrame { private JPanel contentPane; private JTextField sname; private JTextField sentry; private JTextField semail; private JTextField scontact; private JTextField shome; Connection con = null; PreparedStatement pst = null; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { Student frame = new Student(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } public Student() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 588, 620); contentPane = new JPanel(); contentPane.setBackground(Color.LIGHT_GRAY); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); JLabel studentDetails = new JLabel(\"Student Details\"); studentDetails.setForeground(Color.BLACK); studentDetails.setFont(new Font(\"Perpetua Titling MT\", Font.BOLD, 22)); JLabel studentName = new JLabel(\"Student Name\"); studentName.setForeground(Color.BLACK); studentName.setFont(new Font(\"Perpetua Titling MT\", Font.BOLD, 14)); JLabel entryNumber = new JLabel(\"Entry Number\"); entryNumber.setForeground(Color.BLACK); entryNumber.setFont(new Font(\"Perpetua Titling MT\", Font.BOLD, 14)); JLabel emailAddress = new JLabel(\"Email Address\"); emailAddress.setForeground(Color.BLACK); emailAddress.setFont(new Font(\"Perpetua Titling MT\", Font.BOLD, 14)); JLabel contactNumber = new JLabel(\"Contact Number\"); contactNumber.setForeground(Color.BLACK); contactNumber.setFont(new Font(\"Perpetua Titling MT\", Font.BOLD, 14)); sname = new JTextField(); sname.setColumns(10); sentry = new JTextField(); sentry.setColumns(10); semail = new JTextField(); semail.setColumns(10); scontact = new JTextField(); scontact.setColumns(10); JLabel homeCity = new JLabel(\"Home City\"); homeCity.setForeground(Color.BLACK); homeCity.setFont(new Font(\"Perpetua Titling MT\", Font.BOLD, 14)); JButton submit = new JButton(\"Submit\"); submit.setForeground(Color.BLACK); submit.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { try { String query = \"INSERT INTO `student`(`name`, `entrynumber`, `email`, `contactnumber`, `homecity`) VALUES (?, ?, ?, ?, ?)\"; con = DriverManager.getConnection(\"jdbc:mysql: pst=con.prepareStatement(query); pst.setString(1, sname.getText()); pst.setString(2, sentry.getText()); pst.setString(3, semail.getText()); pst.setString(4, scontact.getText()); pst.setString(5, shome.getText()); if(sname.getText().equals(\"\") || sentry.getText().equals(\"\") || semail.getText().equals(\"\") || scontact.getText().equals(\"\") || shome.getText().equals(\"\")) { JOptionPane.showMessageDialog(null, \"Fill all the details :(\"); } else { pst.executeUpdate(); JOptionPane.showMessageDialog(null, \"Student added Successfully :)\"); dispose(); Menu menu = new Menu(); menu.show(); } } catch(Exception ex) { JOptionPane.showMessageDialog(null, ex); } } }); submit.setFont(new Font(\"Tahoma\", Font.BOLD, 14)); shome = new JTextField(); shome.setColumns(10); JDesktopPane desktopPane = new JDesktopPane(); desktopPane.setBackground(Color.GRAY); JButton btnNewButton = new JButton(\"Cancel\"); btnNewButton.setForeground(Color.BLACK); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { Menu menu = new Menu(); menu.show(); dispose(); } }); btnNewButton.setFont(new Font(\"Tahoma\", Font.BOLD, 14)); JDesktopPane desktopPane_1 = new JDesktopPane(); desktopPane_1.setBackground(Color.GRAY); JDesktopPane desktopPane_2 = new JDesktopPane(); desktopPane_2.setBackground(Color.GRAY); JDesktopPane desktopPane_3 = new JDesktopPane(); desktopPane_3.setBackground(Color.GRAY); GroupLayout gl_contentPane = new GroupLayout(contentPane); gl_contentPane.setHorizontalGroup( gl_contentPane.createParallelGroup(Alignment.LEADING) .addComponent(desktopPane, GroupLayout.DEFAULT_SIZE, 573, Short.MAX_VALUE) .addGroup(gl_contentPane.createSequentialGroup() .addComponent(desktopPane_1, GroupLayout.PREFERRED_SIZE, 563, GroupLayout.PREFERRED_SIZE) .addContainerGap()) .addGroup(gl_contentPane.createSequentialGroup() .addComponent(desktopPane_2, GroupLayout.PREFERRED_SIZE, 19, GroupLayout.PREFERRED_SIZE) .addPreferredGap(ComponentPlacement.RELATED) .addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addGap(43) .addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING) .addComponent(entryNumber) .addComponent(studentName, GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE) .addComponent(emailAddress) .addComponent(contactNumber) .addComponent(homeCity)) .addPreferredGap(ComponentPlacement.RELATED) .addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING) .addComponent(scontact, 242, 242, 242) .addComponent(shome, 247, 247, 247) .addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING, false) .addComponent(semail) .addComponent(sname) .addComponent(sentry, GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE))) .addGap(34)) .addGroup(gl_contentPane.createSequentialGroup() .addPreferredGap(ComponentPlacement.RELATED, 125, Short.MAX_VALUE) .addComponent(studentDetails) .addGap(137)) .addGroup(gl_contentPane.createSequentialGroup() .addGap(119) .addGroup(gl_contentPane.createParallelGroup(Alignment.TRAILING, false) .addComponent(btnNewButton, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE) .addComponent(submit, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)) .addGap(128))) .addPreferredGap(ComponentPlacement.RELATED) .addComponent(desktopPane_3, GroupLayout.PREFERRED_SIZE, 17, GroupLayout.PREFERRED_SIZE) .addGap(18)) ); gl_contentPane.setVerticalGroup( gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addComponent(desktopPane, GroupLayout.PREFERRED_SIZE, 21, GroupLayout.PREFERRED_SIZE) .addGap(11) .addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addComponent(studentDetails) .addGap(18) .addGroup(gl_contentPane.createParallelGroup(Alignment.BASELINE) .addComponent(studentName, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE) .addComponent(sname, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE)) .addGap(28) .addGroup(gl_contentPane.createParallelGroup(Alignment.BASELINE) .addComponent(sentry, GroupLayout.PREFERRED_SIZE, 37, GroupLayout.PREFERRED_SIZE) .addComponent(entryNumber)) .addGap(41) .addGroup(gl_contentPane.createParallelGroup(Alignment.BASELINE) .addComponent(semail, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE) .addComponent(emailAddress)) .addGap(37) .addGroup(gl_contentPane.createParallelGroup(Alignment.BASELINE) .addComponent(contactNumber) .addComponent(scontact, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)) .addGap(41) .addGroup(gl_contentPane.createParallelGroup(Alignment.BASELINE) .addComponent(shome, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE) .addComponent(homeCity)) .addGap(43) .addComponent(submit, GroupLayout.PREFERRED_SIZE, 38, GroupLayout.PREFERRED_SIZE) .addGap(18) .addComponent(btnNewButton, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE)) .addGroup(gl_contentPane.createSequentialGroup() .addPreferredGap(ComponentPlacement.RELATED) .addComponent(desktopPane_2, GroupLayout.PREFERRED_SIZE, 506, GroupLayout.PREFERRED_SIZE)) .addGroup(Alignment.TRAILING, gl_contentPane.createSequentialGroup() .addPreferredGap(ComponentPlacement.UNRELATED) .addComponent(desktopPane_3, GroupLayout.PREFERRED_SIZE, 506, GroupLayout.PREFERRED_SIZE) .addPreferredGap(ComponentPlacement.RELATED))) .addGap(13) .addComponent(desktopPane_1, GroupLayout.PREFERRED_SIZE, 25, GroupLayout.PREFERRED_SIZE) .addGap(6)) ); contentPane.setLayout(gl_contentPane); } }","dependencies":[{"file_path":"Student-Management-System-main\\StudentManagementSystem\\Menu.java","file_content":"package StudentManagement; import java.awt.BorderLayout; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import javax.swing.GroupLayout; import javax.swing.GroupLayout.Alignment; import javax.swing.JLabel; import javax.swing.JOptionPane; import java.awt.Font; import javax.swing.JSplitPane; import javax.swing.JDesktopPane; import javax.swing.JButton; import java.awt.event.ActionListener; import java.awt.event.ActionEvent; import java.awt.Color; public class Menu extends JFrame { private JPanel contentPane; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { Menu frame = new Menu(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } public Menu() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 623); contentPane = new JPanel(); contentPane.setBackground(Color.GRAY); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); JDesktopPane desktopPane = new JDesktopPane(); desktopPane.setBackground(Color.LIGHT_GRAY); JDesktopPane desktopPane_1 = new JDesktopPane(); desktopPane_1.setBackground(Color.LIGHT_GRAY); GroupLayout gl_contentPane = new GroupLayout(contentPane); gl_contentPane.setHorizontalGroup( gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addContainerGap() .addComponent(desktopPane_1, GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)) .addGroup(gl_contentPane.createSequentialGroup() .addGap(36) .addComponent(desktopPane, GroupLayout.PREFERRED_SIZE, 351, GroupLayout.PREFERRED_SIZE))) .addContainerGap()) ); gl_contentPane.setVerticalGroup( gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addContainerGap() .addComponent(desktopPane_1, GroupLayout.PREFERRED_SIZE, 55, GroupLayout.PREFERRED_SIZE) .addGap(26) .addComponent(desktopPane, GroupLayout.PREFERRED_SIZE, 445, GroupLayout.PREFERRED_SIZE) .addContainerGap(37, Short.MAX_VALUE)) ); JButton btnNewButton = new JButton(\"Add Student\"); btnNewButton.setForeground(Color.BLACK); btnNewButton.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { Student studentDetails = new Student(); studentDetails.show(); dispose(); } }); btnNewButton.setBounds(32, 37, 287, 47); desktopPane.add(btnNewButton); JButton btnNewButton_1 = new JButton(\"Remove Existing Student\"); btnNewButton_1.setForeground(Color.BLACK); btnNewButton_1.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { RemoveStudent remove = new RemoveStudent(); remove.show(); dispose(); } }); btnNewButton_1.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); btnNewButton_1.setBounds(32, 113, 287, 52); desktopPane.add(btnNewButton_1); JButton btnNewButton_2 = new JButton(\"View Students\"); btnNewButton_2.setForeground(Color.BLACK); btnNewButton_2.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ViewStudent viewStudent = new ViewStudent(); viewStudent.show(); dispose(); } }); btnNewButton_2.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); btnNewButton_2.setBounds(32, 195, 287, 52); desktopPane.add(btnNewButton_2); JButton btnNewButton_3 = new JButton(\"Update Existing Student\"); btnNewButton_3.setForeground(Color.BLACK); btnNewButton_3.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { UpdateStudent updateStudent = new UpdateStudent(); updateStudent.show(); dispose(); } }); btnNewButton_3.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); btnNewButton_3.setBounds(32, 272, 287, 52); desktopPane.add(btnNewButton_3); JButton btnNewButton_4 = new JButton(\"Logout\"); btnNewButton_4.setForeground(Color.BLACK); btnNewButton_4.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { Login logout = new Login(); logout.show(); dispose(); JOptionPane.showMessageDialog(null, \"Successfully logged out :)\"); } }); btnNewButton_4.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); btnNewButton_4.setBounds(32, 348, 287, 47); desktopPane.add(btnNewButton_4); JLabel lblNewLabel = new JLabel(\"What do you want ?\"); lblNewLabel.setForeground(Color.BLACK); lblNewLabel.setBounds(93, 17, 220, 27); desktopPane_1.add(lblNewLabel); lblNewLabel.setFont(new Font(\"Tahoma\", Font.BOLD, 22)); contentPane.setLayout(gl_contentPane); } }"}]}}
{"project_id":113,"chunk_id":0,"content":{"main_file_path":"Student-Management-System-main\\StudentManagementSystem\\UpdateStudent.java","main_file_content":"package StudentManagement; import java.awt.BorderLayout; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import javax.swing.GroupLayout; import javax.swing.GroupLayout.Alignment; import javax.swing.JDesktopPane; import javax.swing.JTextField; import javax.swing.JButton; import java.awt.Font; import javax.swing.JLabel; import javax.swing.JOptionPane; import java.awt.event.ActionListener; import java.sql.Connection; import java.sql.DriverManager; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.awt.event.ActionEvent; import javax.swing.LayoutStyle.ComponentPlacement; import java.awt.Color; public class UpdateStudent extends JFrame { Connection con = null; PreparedStatement pst = null; ResultSet rs; private JPanel contentPane; private JTextField updateEntry; private JTextField nameU; private JTextField entryU; private JTextField emailU; private JTextField contactU; private JTextField homeU; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { UpdateStudent frame = new UpdateStudent(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } public UpdateStudent() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 676, 656); contentPane = new JPanel(); contentPane.setBackground(Color.LIGHT_GRAY); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); JDesktopPane desktopPane = new JDesktopPane(); desktopPane.setBackground(Color.GRAY); nameU = new JTextField(); nameU.setColumns(10); JLabel lblNewLabel_1 = new JLabel(\"Student Name\"); lblNewLabel_1.setForeground(Color.BLACK); lblNewLabel_1.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); JLabel lblNewLabel_1_1 = new JLabel(\"Entry Number\"); lblNewLabel_1_1.setForeground(Color.BLACK); lblNewLabel_1_1.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); JLabel lblNewLabel_1_2 = new JLabel(\"Email Address\"); lblNewLabel_1_2.setForeground(Color.BLACK); lblNewLabel_1_2.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); JLabel lblNewLabel_1_3 = new JLabel(\"Contact Number\"); lblNewLabel_1_3.setForeground(Color.BLACK); lblNewLabel_1_3.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); JLabel lblNewLabel_1_4 = new JLabel(\"Home City\"); lblNewLabel_1_4.setForeground(Color.BLACK); lblNewLabel_1_4.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); entryU = new JTextField(); entryU.setColumns(10); emailU = new JTextField(); emailU.setColumns(10); contactU = new JTextField(); contactU.setColumns(10); homeU = new JTextField(); homeU.setColumns(10); JButton updateBtn = new JButton(\"Update\"); updateBtn.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { try { String query = \"UPDATE `student` SET name=?, entrynumber=?, email=?, contactnumber=?, homecity=? WHERE entrynumber=?\"; con = DriverManager.getConnection(\"jdbc:mysql: pst=con.prepareStatement(query); String pid = updateEntry.getText(); pst.setString(1, nameU.getText()); pst.setString(2, entryU.getText()); pst.setString(3, emailU.getText()); pst.setString(4, contactU.getText()); pst.setString(5, homeU.getText()); pst.setString(6, pid); if(nameU.getText().equals(\"\") || entryU.getText().equals(\"\") || emailU.getText().equals(\"\") || contactU.getText().equals(\"\") || homeU.getText().equals(\"\")) { JOptionPane.showMessageDialog(null, \"Fill all the details :(\"); } else { pst.executeUpdate(); JOptionPane.showMessageDialog(null, \"Updated Successfully :)\"); dispose(); Menu menu = new Menu(); menu.show(); } } catch(Exception ex) { JOptionPane.showMessageDialog(null, ex); } } }); updateBtn.setForeground(Color.BLACK); updateBtn.setFont(new Font(\"Tahoma\", Font.BOLD, 14)); GroupLayout gl_contentPane = new GroupLayout(contentPane); gl_contentPane.setHorizontalGroup( gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addComponent(desktopPane, GroupLayout.PREFERRED_SIZE, 647, GroupLayout.PREFERRED_SIZE) .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)) .addGroup(gl_contentPane.createSequentialGroup() .addGap(127) .addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING) .addComponent(lblNewLabel_1) .addGroup(gl_contentPane.createSequentialGroup() .addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING) .addComponent(lblNewLabel_1_3, GroupLayout.PREFERRED_SIZE, 140, GroupLayout.PREFERRED_SIZE) .addComponent(lblNewLabel_1_2, GroupLayout.PREFERRED_SIZE, 116, GroupLayout.PREFERRED_SIZE) .addComponent(lblNewLabel_1_1, GroupLayout.PREFERRED_SIZE, 116, GroupLayout.PREFERRED_SIZE)) .addPreferredGap(ComponentPlacement.RELATED, 383, Short.MAX_VALUE))) .addGap(22)) .addGroup(gl_contentPane.createSequentialGroup() .addComponent(lblNewLabel_1_4, GroupLayout.PREFERRED_SIZE, 116, GroupLayout.PREFERRED_SIZE) .addPreferredGap(ComponentPlacement.RELATED))) .addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING) .addComponent(entryU, GroupLayout.PREFERRED_SIZE, 207, GroupLayout.PREFERRED_SIZE) .addComponent(nameU, GroupLayout.PREFERRED_SIZE, 207, GroupLayout.PREFERRED_SIZE) .addComponent(emailU, GroupLayout.PREFERRED_SIZE, 207, GroupLayout.PREFERRED_SIZE) .addComponent(contactU, GroupLayout.PREFERRED_SIZE, 207, GroupLayout.PREFERRED_SIZE) .addComponent(homeU, GroupLayout.PREFERRED_SIZE, 207, GroupLayout.PREFERRED_SIZE)) .addGap(114)) .addGroup(gl_contentPane.createSequentialGroup() .addGap(261) .addComponent(updateBtn, GroupLayout.PREFERRED_SIZE, 128, GroupLayout.PREFERRED_SIZE) .addContainerGap(261, Short.MAX_VALUE)) ); gl_contentPane.setVerticalGroup( gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addComponent(desktopPane, GroupLayout.PREFERRED_SIZE, 242, GroupLayout.PREFERRED_SIZE) .addGap(27) .addGroup(gl_contentPane.createParallelGroup(Alignment.TRAILING) .addComponent(lblNewLabel_1) .addComponent(nameU, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)) .addGap(27) .addGroup(gl_contentPane.createParallelGroup(Alignment.TRAILING) .addComponent(lblNewLabel_1_1, GroupLayout.PREFERRED_SIZE, 20, GroupLayout.PREFERRED_SIZE) .addComponent(entryU, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)) .addGap(26) .addGroup(gl_contentPane.createParallelGroup(Alignment.TRAILING) .addComponent(lblNewLabel_1_2, GroupLayout.PREFERRED_SIZE, 20, GroupLayout.PREFERRED_SIZE) .addComponent(emailU, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)) .addGap(29) .addGroup(gl_contentPane.createParallelGroup(Alignment.TRAILING) .addComponent(lblNewLabel_1_3, GroupLayout.PREFERRED_SIZE, 20, GroupLayout.PREFERRED_SIZE) .addComponent(contactU, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)) .addGap(27) .addGroup(gl_contentPane.createParallelGroup(Alignment.TRAILING) .addComponent(homeU, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE) .addComponent(lblNewLabel_1_4, GroupLayout.PREFERRED_SIZE, 20, GroupLayout.PREFERRED_SIZE)) .addPreferredGap(ComponentPlacement.RELATED, 27, Short.MAX_VALUE) .addComponent(updateBtn, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE) .addContainerGap()) ); updateEntry = new JTextField(); updateEntry.setBounds(190, 100, 237, 33); desktopPane.add(updateEntry); updateEntry.setColumns(10); JButton btnNewButton = new JButton(\"Search\"); btnNewButton.setForeground(Color.BLACK); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { String str = updateEntry.getText(); try { con = DriverManager.getConnection(\"jdbc:mysql: pst = con.prepareStatement(\"SELECT * FROM student where entrynumber = ?\"); pst.setString(1, str); rs = pst.executeQuery(); if(rs.next()==true) { String s = rs.getString(1); String s1 = rs.getString(2); String s2 = rs.getString(3); String s3 = rs.getString(4); String s4 = rs.getString(5); nameU.setText(s); entryU.setText(s1); emailU.setText(s2); contactU.setText(s3); homeU.setText(s4); } } catch (SQLException e1) { e1.printStackTrace(); } } }); btnNewButton.setFont(new Font(\"Tahoma\", Font.BOLD, 14)); btnNewButton.setBounds(334, 164, 149, 33); desktopPane.add(btnNewButton); JButton btnCancel = new JButton(\"Cancel\"); btnCancel.setForeground(Color.BLACK); btnCancel.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { Menu menu = new Menu(); menu.show(); dispose(); } }); btnCancel.setFont(new Font(\"Tahoma\", Font.BOLD, 14)); btnCancel.setBounds(143, 164, 149, 33); desktopPane.add(btnCancel); JLabel lblNewLabel = new JLabel(\"Search the \\\"Entry Number\\\"\"); lblNewLabel.setForeground(Color.BLACK); lblNewLabel.setFont(new Font(\"Tahoma\", Font.BOLD, 20)); lblNewLabel.setBounds(180, 56, 283, 33); desktopPane.add(lblNewLabel); contentPane.setLayout(gl_contentPane); } }","dependencies":[{"file_path":"Student-Management-System-main\\StudentManagementSystem\\Menu.java","file_content":"package StudentManagement; import java.awt.BorderLayout; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import javax.swing.GroupLayout; import javax.swing.GroupLayout.Alignment; import javax.swing.JLabel; import javax.swing.JOptionPane; import java.awt.Font; import javax.swing.JSplitPane; import javax.swing.JDesktopPane; import javax.swing.JButton; import java.awt.event.ActionListener; import java.awt.event.ActionEvent; import java.awt.Color; public class Menu extends JFrame { private JPanel contentPane; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { Menu frame = new Menu(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } public Menu() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 623); contentPane = new JPanel(); contentPane.setBackground(Color.GRAY); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); JDesktopPane desktopPane = new JDesktopPane(); desktopPane.setBackground(Color.LIGHT_GRAY); JDesktopPane desktopPane_1 = new JDesktopPane(); desktopPane_1.setBackground(Color.LIGHT_GRAY); GroupLayout gl_contentPane = new GroupLayout(contentPane); gl_contentPane.setHorizontalGroup( gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addContainerGap() .addComponent(desktopPane_1, GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)) .addGroup(gl_contentPane.createSequentialGroup() .addGap(36) .addComponent(desktopPane, GroupLayout.PREFERRED_SIZE, 351, GroupLayout.PREFERRED_SIZE))) .addContainerGap()) ); gl_contentPane.setVerticalGroup( gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addContainerGap() .addComponent(desktopPane_1, GroupLayout.PREFERRED_SIZE, 55, GroupLayout.PREFERRED_SIZE) .addGap(26) .addComponent(desktopPane, GroupLayout.PREFERRED_SIZE, 445, GroupLayout.PREFERRED_SIZE) .addContainerGap(37, Short.MAX_VALUE)) ); JButton btnNewButton = new JButton(\"Add Student\"); btnNewButton.setForeground(Color.BLACK); btnNewButton.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { Student studentDetails = new Student(); studentDetails.show(); dispose(); } }); btnNewButton.setBounds(32, 37, 287, 47); desktopPane.add(btnNewButton); JButton btnNewButton_1 = new JButton(\"Remove Existing Student\"); btnNewButton_1.setForeground(Color.BLACK); btnNewButton_1.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { RemoveStudent remove = new RemoveStudent(); remove.show(); dispose(); } }); btnNewButton_1.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); btnNewButton_1.setBounds(32, 113, 287, 52); desktopPane.add(btnNewButton_1); JButton btnNewButton_2 = new JButton(\"View Students\"); btnNewButton_2.setForeground(Color.BLACK); btnNewButton_2.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ViewStudent viewStudent = new ViewStudent(); viewStudent.show(); dispose(); } }); btnNewButton_2.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); btnNewButton_2.setBounds(32, 195, 287, 52); desktopPane.add(btnNewButton_2); JButton btnNewButton_3 = new JButton(\"Update Existing Student\"); btnNewButton_3.setForeground(Color.BLACK); btnNewButton_3.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { UpdateStudent updateStudent = new UpdateStudent(); updateStudent.show(); dispose(); } }); btnNewButton_3.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); btnNewButton_3.setBounds(32, 272, 287, 52); desktopPane.add(btnNewButton_3); JButton btnNewButton_4 = new JButton(\"Logout\"); btnNewButton_4.setForeground(Color.BLACK); btnNewButton_4.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { Login logout = new Login(); logout.show(); dispose(); JOptionPane.showMessageDialog(null, \"Successfully logged out :)\"); } }); btnNewButton_4.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); btnNewButton_4.setBounds(32, 348, 287, 47); desktopPane.add(btnNewButton_4); JLabel lblNewLabel = new JLabel(\"What do you want ?\"); lblNewLabel.setForeground(Color.BLACK); lblNewLabel.setBounds(93, 17, 220, 27); desktopPane_1.add(lblNewLabel); lblNewLabel.setFont(new Font(\"Tahoma\", Font.BOLD, 22)); contentPane.setLayout(gl_contentPane); } }"}]}}
{"project_id":113,"chunk_id":0,"content":{"main_file_path":"Student-Management-System-main\\StudentManagementSystem\\ViewStudent.java","main_file_content":"package StudentManagement; import java.awt.BorderLayout; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import javax.swing.GroupLayout; import javax.swing.GroupLayout.Alignment; import javax.swing.JDesktopPane; import javax.swing.JLabel; import java.awt.Font; import java.awt.Color; import javax.swing.JButton; import java.awt.event.ActionListener; import java.awt.event.ActionEvent; public class ViewStudent extends JFrame { private JPanel contentPane; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { ViewStudent frame = new ViewStudent(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } public ViewStudent() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 782, 611); contentPane = new JPanel(); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); JDesktopPane desktopPane = new JDesktopPane(); desktopPane.setBackground(Color.GRAY); GroupLayout gl_contentPane = new GroupLayout(contentPane); gl_contentPane.setHorizontalGroup( gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addComponent(desktopPane, GroupLayout.PREFERRED_SIZE, 753, GroupLayout.PREFERRED_SIZE) .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)) ); gl_contentPane.setVerticalGroup( gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addComponent(desktopPane, GroupLayout.PREFERRED_SIZE, 139, GroupLayout.PREFERRED_SIZE) .addContainerGap(423, Short.MAX_VALUE)) ); JLabel lblNewLabel = new JLabel(\"Student Details\"); lblNewLabel.setForeground(Color.BLACK); lblNewLabel.setFont(new Font(\"Tahoma\", Font.BOLD, 28)); lblNewLabel.setBounds(255, 27, 225, 52); desktopPane.add(lblNewLabel); JButton btnNewButton = new JButton(\"Go Back\"); btnNewButton.setForeground(Color.BLACK); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { Menu menu = new Menu(); menu.show(); dispose(); } }); btnNewButton.setFont(new Font(\"Tahoma\", Font.BOLD, 14)); btnNewButton.setBounds(10, 96, 113, 32); desktopPane.add(btnNewButton); contentPane.setLayout(gl_contentPane); } }","dependencies":[{"file_path":"Student-Management-System-main\\StudentManagementSystem\\Menu.java","file_content":"package StudentManagement; import java.awt.BorderLayout; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import javax.swing.GroupLayout; import javax.swing.GroupLayout.Alignment; import javax.swing.JLabel; import javax.swing.JOptionPane; import java.awt.Font; import javax.swing.JSplitPane; import javax.swing.JDesktopPane; import javax.swing.JButton; import java.awt.event.ActionListener; import java.awt.event.ActionEvent; import java.awt.Color; public class Menu extends JFrame { private JPanel contentPane; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { Menu frame = new Menu(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } public Menu() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 623); contentPane = new JPanel(); contentPane.setBackground(Color.GRAY); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); JDesktopPane desktopPane = new JDesktopPane(); desktopPane.setBackground(Color.LIGHT_GRAY); JDesktopPane desktopPane_1 = new JDesktopPane(); desktopPane_1.setBackground(Color.LIGHT_GRAY); GroupLayout gl_contentPane = new GroupLayout(contentPane); gl_contentPane.setHorizontalGroup( gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addContainerGap() .addComponent(desktopPane_1, GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)) .addGroup(gl_contentPane.createSequentialGroup() .addGap(36) .addComponent(desktopPane, GroupLayout.PREFERRED_SIZE, 351, GroupLayout.PREFERRED_SIZE))) .addContainerGap()) ); gl_contentPane.setVerticalGroup( gl_contentPane.createParallelGroup(Alignment.LEADING) .addGroup(gl_contentPane.createSequentialGroup() .addContainerGap() .addComponent(desktopPane_1, GroupLayout.PREFERRED_SIZE, 55, GroupLayout.PREFERRED_SIZE) .addGap(26) .addComponent(desktopPane, GroupLayout.PREFERRED_SIZE, 445, GroupLayout.PREFERRED_SIZE) .addContainerGap(37, Short.MAX_VALUE)) ); JButton btnNewButton = new JButton(\"Add Student\"); btnNewButton.setForeground(Color.BLACK); btnNewButton.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { Student studentDetails = new Student(); studentDetails.show(); dispose(); } }); btnNewButton.setBounds(32, 37, 287, 47); desktopPane.add(btnNewButton); JButton btnNewButton_1 = new JButton(\"Remove Existing Student\"); btnNewButton_1.setForeground(Color.BLACK); btnNewButton_1.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { RemoveStudent remove = new RemoveStudent(); remove.show(); dispose(); } }); btnNewButton_1.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); btnNewButton_1.setBounds(32, 113, 287, 52); desktopPane.add(btnNewButton_1); JButton btnNewButton_2 = new JButton(\"View Students\"); btnNewButton_2.setForeground(Color.BLACK); btnNewButton_2.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ViewStudent viewStudent = new ViewStudent(); viewStudent.show(); dispose(); } }); btnNewButton_2.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); btnNewButton_2.setBounds(32, 195, 287, 52); desktopPane.add(btnNewButton_2); JButton btnNewButton_3 = new JButton(\"Update Existing Student\"); btnNewButton_3.setForeground(Color.BLACK); btnNewButton_3.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { UpdateStudent updateStudent = new UpdateStudent(); updateStudent.show(); dispose(); } }); btnNewButton_3.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); btnNewButton_3.setBounds(32, 272, 287, 52); desktopPane.add(btnNewButton_3); JButton btnNewButton_4 = new JButton(\"Logout\"); btnNewButton_4.setForeground(Color.BLACK); btnNewButton_4.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { Login logout = new Login(); logout.show(); dispose(); JOptionPane.showMessageDialog(null, \"Successfully logged out :)\"); } }); btnNewButton_4.setFont(new Font(\"Tahoma\", Font.BOLD, 16)); btnNewButton_4.setBounds(32, 348, 287, 47); desktopPane.add(btnNewButton_4); JLabel lblNewLabel = new JLabel(\"What do you want ?\"); lblNewLabel.setForeground(Color.BLACK); lblNewLabel.setBounds(93, 17, 220, 27); desktopPane_1.add(lblNewLabel); lblNewLabel.setFont(new Font(\"Tahoma\", Font.BOLD, 22)); contentPane.setLayout(gl_contentPane); } }"}]}}
{"project_id":114,"chunk_id":0,"content":{"main_file_path":"Student-Management-System-master\\Student_Management_System\\src\\Course.java","main_file_content":"import java.util.ArrayList; public class Course { private String title; private ArrayList<Student> students = new ArrayList<Student>(); public void addStudent(Student aStudent) { students.add(aStudent); } public String printDetails() { String details = \"\"; details += \"Course name: '\"+ title + \"' has the following students:\" +\"\\n\"; if(students.isEmpty()) { details = \"This course has no students enrolled.\"; }else { for(Student student: students) details += student +\"\\n\"; details += \"\"; } return details; } public Course(String title) { this.title = title; } public String getTitle() { return title; } }","dependencies":[{"file_path":"Student-Management-System-master\\Student_Management_System\\src\\Student.java","file_content":"public class Student { private String name; private String id; public Student(String name, String id) { this.name = name; this.id = id; } public String toString() { return (\"Name: \" + name + \", Id: \" + id); } public String getName() { return name; } public String getId() { return id; } }"}]}}
{"project_id":114,"chunk_id":0,"content":{"main_file_path":"Student-Management-System-master\\Student_Management_System\\src\\GUI.java","main_file_content":"import java.awt.CardLayout; import java.awt.Font; import java.awt.event.*; import java.util.ArrayList; import javax.swing.*; public class GUI extends JFrame { private static final long serialVersionUID = 1L; private JTextField nameField, idField; private JLabel name, id, course; private JButton createStudent, createCourse; private JTextField courseField; private JButton addInCourse; private JButton printCourseDetails; private JButton backToMainPanel; private JTextArea detailsArea; CardLayout layout = new CardLayout(); JPanel deck = new JPanel(); JPanel panel = new JPanel(); JPanel secondpanel = new JPanel(); private ArrayList<Course> courses = new ArrayList<Course>(); private ArrayList<Student> student = new ArrayList<Student>(); public GUI() { deck.setLayout(layout); deck.add(panel, \"first\"); deck.add(secondpanel, \"second\"); panel.setLayout(null); name = new JLabel(\"Name:\"); name.setBounds(10, 5, 100, 20); name.setFont(new Font(\"SAN_SERIF\", Font.PLAIN, 16)); panel.add(name); nameField = new JTextField(); nameField.setBounds(80, 5, 150, 20); nameField.setFont(new Font(\"SAN_SERIF\", Font.PLAIN, 16)); panel.add(nameField); id = new JLabel(\"ID:\"); id.setBounds(10, 35, 100, 20); id.setFont(new Font(\"SAN_SERIF\", Font.PLAIN, 16)); panel.add(id); idField = new JTextField(\"\"); idField.setBounds(80, 35, 150, 20); idField.setFont(new Font(\"SAN_SERIF\", Font.PLAIN, 16)); panel.add(idField); createStudent = new JButton(\"Create student\"); createStudent.setBounds(250, 20, 150, 20); createStudent.setFont(new Font(\"SAN_SERIF\", Font.PLAIN, 16)); panel.add(createStudent); course = new JLabel(\"Course:\"); course.setBounds(125, 100, 100, 20); course.setFont(new Font(\"SAN_SERIF\", Font.PLAIN, 16)); panel.add(course); courseField = new JTextField(\"\"); courseField.setBounds(225, 100, 150, 20); courseField.setFont(new Font(\"SAN_SERIF\", Font.PLAIN, 16)); panel.add(courseField); createCourse = new JButton(\"Create new course\"); createCourse.setBounds(125, 150, 250, 20); createCourse.setFont(new Font(\"SAN_SERIF\", Font.PLAIN, 16)); panel.add(createCourse); addInCourse = new JButton(\"Add student in course\"); addInCourse.setBounds(125, 180, 250, 20); addInCourse.setFont(new Font(\"SAN_SERIF\", Font.PLAIN, 16)); panel.add(addInCourse); printCourseDetails = new JButton(\"Print course details\"); printCourseDetails.setBounds(125, 210, 250, 20); printCourseDetails.setFont(new Font(\"SAN_SERIF\", Font.PLAIN, 16)); panel.add(printCourseDetails); createStudent.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { String name = nameField.getText(); String id = idField.getText(); boolean flag = false; if(name.isEmpty() || id.isEmpty()) { if(name.isEmpty()){ JOptionPane.showMessageDialog(null, \"Can't leave Name empty\"); }else { JOptionPane.showMessageDialog(null, \"Can't leave ID empty\"); } } else if(student.isEmpty()){ student.add(new Student(name, id)); System.out.println(\"New student created!\"); } else { for(Student s : student) { if(s.getName().equals(name) && s.getId().equals(id)) { JOptionPane.showMessageDialog(null, \"Student already exists\"); flag = true; break; } } if(!flag) { student.add(new Student(name, id)); System.out.println(\"New student created!\"); } } } }); createCourse.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { String course = courseField.getText(); boolean flag = false; if(course.isEmpty()) { JOptionPane.showMessageDialog(null, \"Can't leave course empty\"); } else if(courses.isEmpty()){ courses.add(new Course(course)); System.out.println(\"New course added\"); } else { for(Course c : courses) { if(c.getTitle().equals(course)){ JOptionPane.showMessageDialog(null, \"Course already exists\"); flag = true; break; } } if(!flag) { courses.add(new Course(course)); System.out.println(\"New course added\"); } } } }); addInCourse.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { String course = courseField.getText(); String name = nameField.getText(); String id = idField.getText(); boolean flag = false; boolean flag1 = false; if(course.isEmpty() || name.isEmpty() || id.isEmpty()) { if(course.isEmpty()) { JOptionPane.showMessageDialog(null, \"Can't leave Course empty\"); } else if(name.isEmpty()){ JOptionPane.showMessageDialog(null, \"Can't leave Name empty\"); } else { JOptionPane.showMessageDialog(null, \"Can't leave ID empty\"); } }else { for(Course c : courses) { if(c.getTitle().equals(course)){ for(Student s : student) { if(s.getName().equals(name) && s.getId().equals(id)) { c.addStudent(s); System.out.println(\"Student added\"); flag1 = true; break; } } flag = true; break; } } if(!flag) { JOptionPane.showMessageDialog(null, \"Course doesn't exist\"); flag1 = true; } if(!flag1) { JOptionPane.showMessageDialog(null, \"Student doesn't exist\"); } } } }); secondpanel.setLayout(null); detailsArea = new JTextArea(); detailsArea.setBounds(10, 5, 475, 220); detailsArea.setEditable(false); detailsArea.setLineWrap(true); detailsArea.setWrapStyleWord(true); detailsArea.setAutoscrolls(true); secondpanel.add(detailsArea); backToMainPanel = new JButton(\"> Back To Main Screen <\"); backToMainPanel.setBounds(100, 235, 300, 30); secondpanel.add(backToMainPanel); printCourseDetails.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { String course = courseField.getText(); boolean flag = false; if(course.isEmpty()) { JOptionPane.showMessageDialog(null, \"Can't leave course empty\"); }else { Course selectedCourse = null; for(Course c : courses) { if(c.getTitle().equals(course)){ selectedCourse = c; flag = true; break; } } if(flag) { detailsArea.setText(selectedCourse.printDetails()); layout.show(deck, \"second\"); }else { JOptionPane.showMessageDialog(null, \"Course doesn't exist\"); } } } }); backToMainPanel.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { layout.show(deck, \"first\"); } }); layout.show(deck, \"first\"); this.add(deck); this.setSize(500, 300); this.setVisible(true); this.setResizable(false); this.setLocationRelativeTo(null); this.setTitle(\"Student form\"); this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); } }","dependencies":[{"file_path":"Student-Management-System-master\\Student_Management_System\\src\\Course.java","file_content":"import java.util.ArrayList; public class Course { private String title; private ArrayList<Student> students = new ArrayList<Student>(); public void addStudent(Student aStudent) { students.add(aStudent); } public String printDetails() { String details = \"\"; details += \"Course name: '\"+ title + \"' has the following students:\" +\"\\n\"; if(students.isEmpty()) { details = \"This course has no students enrolled.\"; }else { for(Student student: students) details += student +\"\\n\"; details += \"\"; } return details; } public Course(String title) { this.title = title; } public String getTitle() { return title; } }"},{"file_path":"Student-Management-System-master\\Student_Management_System\\src\\Student.java","file_content":"public class Student { private String name; private String id; public Student(String name, String id) { this.name = name; this.id = id; } public String toString() { return (\"Name: \" + name + \", Id: \" + id); } public String getName() { return name; } public String getId() { return id; } }"}]}}
{"project_id":114,"chunk_id":0,"content":{"main_file_path":"Student-Management-System-master\\Student_Management_System\\src\\Main.java","main_file_content":"public class Main { public static void main(String[] args) { new GUI(); } }","dependencies":[{"file_path":"Student-Management-System-master\\Student_Management_System\\src\\GUI.java","file_content":"import java.awt.CardLayout; import java.awt.Font; import java.awt.event.*; import java.util.ArrayList; import javax.swing.*; public class GUI extends JFrame { private static final long serialVersionUID = 1L; private JTextField nameField, idField; private JLabel name, id, course; private JButton createStudent, createCourse; private JTextField courseField; private JButton addInCourse; private JButton printCourseDetails; private JButton backToMainPanel; private JTextArea detailsArea; CardLayout layout = new CardLayout(); JPanel deck = new JPanel(); JPanel panel = new JPanel(); JPanel secondpanel = new JPanel(); private ArrayList<Course> courses = new ArrayList<Course>(); private ArrayList<Student> student = new ArrayList<Student>(); public GUI() { deck.setLayout(layout); deck.add(panel, \"first\"); deck.add(secondpanel, \"second\"); panel.setLayout(null); name = new JLabel(\"Name:\"); name.setBounds(10, 5, 100, 20); name.setFont(new Font(\"SAN_SERIF\", Font.PLAIN, 16)); panel.add(name); nameField = new JTextField(); nameField.setBounds(80, 5, 150, 20); nameField.setFont(new Font(\"SAN_SERIF\", Font.PLAIN, 16)); panel.add(nameField); id = new JLabel(\"ID:\"); id.setBounds(10, 35, 100, 20); id.setFont(new Font(\"SAN_SERIF\", Font.PLAIN, 16)); panel.add(id); idField = new JTextField(\"\"); idField.setBounds(80, 35, 150, 20); idField.setFont(new Font(\"SAN_SERIF\", Font.PLAIN, 16)); panel.add(idField); createStudent = new JButton(\"Create student\"); createStudent.setBounds(250, 20, 150, 20); createStudent.setFont(new Font(\"SAN_SERIF\", Font.PLAIN, 16)); panel.add(createStudent); course = new JLabel(\"Course:\"); course.setBounds(125, 100, 100, 20); course.setFont(new Font(\"SAN_SERIF\", Font.PLAIN, 16)); panel.add(course); courseField = new JTextField(\"\"); courseField.setBounds(225, 100, 150, 20); courseField.setFont(new Font(\"SAN_SERIF\", Font.PLAIN, 16)); panel.add(courseField); createCourse = new JButton(\"Create new course\"); createCourse.setBounds(125, 150, 250, 20); createCourse.setFont(new Font(\"SAN_SERIF\", Font.PLAIN, 16)); panel.add(createCourse); addInCourse = new JButton(\"Add student in course\"); addInCourse.setBounds(125, 180, 250, 20); addInCourse.setFont(new Font(\"SAN_SERIF\", Font.PLAIN, 16)); panel.add(addInCourse); printCourseDetails = new JButton(\"Print course details\"); printCourseDetails.setBounds(125, 210, 250, 20); printCourseDetails.setFont(new Font(\"SAN_SERIF\", Font.PLAIN, 16)); panel.add(printCourseDetails); createStudent.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { String name = nameField.getText(); String id = idField.getText(); boolean flag = false; if(name.isEmpty() || id.isEmpty()) { if(name.isEmpty()){ JOptionPane.showMessageDialog(null, \"Can't leave Name empty\"); }else { JOptionPane.showMessageDialog(null, \"Can't leave ID empty\"); } } else if(student.isEmpty()){ student.add(new Student(name, id)); System.out.println(\"New student created!\"); } else { for(Student s : student) { if(s.getName().equals(name) && s.getId().equals(id)) { JOptionPane.showMessageDialog(null, \"Student already exists\"); flag = true; break; } } if(!flag) { student.add(new Student(name, id)); System.out.println(\"New student created!\"); } } } }); createCourse.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { String course = courseField.getText(); boolean flag = false; if(course.isEmpty()) { JOptionPane.showMessageDialog(null, \"Can't leave course empty\"); } else if(courses.isEmpty()){ courses.add(new Course(course)); System.out.println(\"New course added\"); } else { for(Course c : courses) { if(c.getTitle().equals(course)){ JOptionPane.showMessageDialog(null, \"Course already exists\"); flag = true; break; } } if(!flag) { courses.add(new Course(course)); System.out.println(\"New course added\"); } } } }); addInCourse.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { String course = courseField.getText(); String name = nameField.getText(); String id = idField.getText(); boolean flag = false; boolean flag1 = false; if(course.isEmpty() || name.isEmpty() || id.isEmpty()) { if(course.isEmpty()) { JOptionPane.showMessageDialog(null, \"Can't leave Course empty\"); } else if(name.isEmpty()){ JOptionPane.showMessageDialog(null, \"Can't leave Name empty\"); } else { JOptionPane.showMessageDialog(null, \"Can't leave ID empty\"); } }else { for(Course c : courses) { if(c.getTitle().equals(course)){ for(Student s : student) { if(s.getName().equals(name) && s.getId().equals(id)) { c.addStudent(s); System.out.println(\"Student added\"); flag1 = true; break; } } flag = true; break; } } if(!flag) { JOptionPane.showMessageDialog(null, \"Course doesn't exist\"); flag1 = true; } if(!flag1) { JOptionPane.showMessageDialog(null, \"Student doesn't exist\"); } } } }); secondpanel.setLayout(null); detailsArea = new JTextArea(); detailsArea.setBounds(10, 5, 475, 220); detailsArea.setEditable(false); detailsArea.setLineWrap(true); detailsArea.setWrapStyleWord(true); detailsArea.setAutoscrolls(true); secondpanel.add(detailsArea); backToMainPanel = new JButton(\"> Back To Main Screen <\"); backToMainPanel.setBounds(100, 235, 300, 30); secondpanel.add(backToMainPanel); printCourseDetails.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { String course = courseField.getText(); boolean flag = false; if(course.isEmpty()) { JOptionPane.showMessageDialog(null, \"Can't leave course empty\"); }else { Course selectedCourse = null; for(Course c : courses) { if(c.getTitle().equals(course)){ selectedCourse = c; flag = true; break; } } if(flag) { detailsArea.setText(selectedCourse.printDetails()); layout.show(deck, \"second\"); }else { JOptionPane.showMessageDialog(null, \"Course doesn't exist\"); } } } }); backToMainPanel.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { layout.show(deck, \"first\"); } }); layout.show(deck, \"first\"); this.add(deck); this.setSize(500, 300); this.setVisible(true); this.setResizable(false); this.setLocationRelativeTo(null); this.setTitle(\"Student form\"); this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); } }"}]}}
{"project_id":114,"chunk_id":0,"content":{"main_file_path":"Student-Management-System-master\\Student_Management_System\\src\\Student.java","main_file_content":"public class Student { private String name; private String id; public Student(String name, String id) { this.name = name; this.id = id; } public String toString() { return (\"Name: \" + name + \", Id: \" + id); } public String getName() { return name; } public String getId() { return id; } }","dependencies":[]}}
{"project_id":116,"chunk_id":0,"content":{"main_file_path":"techjobs-mvc-master\\src\\main\\java\\org\\launchcode\\TechjobsApplication.java","main_file_content":"package org.launchcode; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class TechjobsApplication { public static void main(String[] args) { SpringApplication.run(TechjobsApplication.class, args); } }","dependencies":[]}}
{"project_id":116,"chunk_id":0,"content":{"main_file_path":"techjobs-mvc-master\\src\\main\\java\\org\\launchcode\\controllers\\HomeController.java","main_file_content":"package org.launchcode.controllers; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.RequestMapping; import java.util.HashMap; @Controller public class HomeController { @RequestMapping(value = \"\") public String index(Model model) { HashMap<String, String> actionChoices = new HashMap<>(); actionChoices.put(\"search\", \"Search\"); actionChoices.put(\"list\", \"List\"); model.addAttribute(\"actions\", actionChoices); return \"index\"; } }","dependencies":[]}}
{"project_id":116,"chunk_id":0,"content":{"main_file_path":"techjobs-mvc-master\\src\\main\\java\\org\\launchcode\\controllers\\ListController.java","main_file_content":"package org.launchcode.controllers; import org.launchcode.models.JobData; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import java.util.ArrayList; import java.util.HashMap; @Controller @RequestMapping(value = \"list\") public class ListController { static HashMap<String, String> columnChoices = new HashMap<>(); public ListController () { columnChoices.put(\"core competency\", \"Skill\"); columnChoices.put(\"employer\", \"Employer\"); columnChoices.put(\"location\", \"Location\"); columnChoices.put(\"position type\", \"Position Type\"); columnChoices.put(\"all\", \"All\"); } @RequestMapping(value = \"\") public String list(Model model) { model.addAttribute(\"columns\", columnChoices); return \"list\"; } @RequestMapping(value = \"values\") public String listColumnValues(Model model, @RequestParam String column) { if (column.equals(\"all\")) { ArrayList<HashMap<String, String>> jobs = JobData.findAll(); model.addAttribute(\"title\", \"All Jobs\"); model.addAttribute(\"jobs\", jobs); return \"list-jobs\"; } else { ArrayList<String> items = JobData.findAll(column); model.addAttribute(\"title\", \"All \" + columnChoices.get(column) + \" Values\"); model.addAttribute(\"column\", column); model.addAttribute(\"items\", items); return \"list-column\"; } } @RequestMapping(value = \"jobs\") public String listJobsByColumnAndValue(Model model, @RequestParam String column, @RequestParam String value) { ArrayList<HashMap<String, String>> jobs = JobData.findByColumnAndValue(column, value); model.addAttribute(\"title\", \"Jobs with \" + columnChoices.get(column) + \": \" + value); model.addAttribute(\"jobs\", jobs); return \"list-jobs\"; } }","dependencies":[{"file_path":"techjobs-mvc-master\\src\\main\\java\\org\\launchcode\\models\\JobData.java","file_content":"package org.launchcode.models; import org.apache.commons.csv.CSVFormat; import org.apache.commons.csv.CSVParser; import org.apache.commons.csv.CSVRecord; import org.springframework.core.io.ClassPathResource; import org.springframework.core.io.Resource; import java.io.*; import java.util.ArrayList; import java.util.Collections; import java.util.HashMap; import java.util.List; public class JobData { private static final String DATA_FILE = \"job_data.csv\"; private static boolean isDataLoaded = false; private static ArrayList<HashMap<String, String>> allJobs; public static ArrayList<String> findAll(String field) { loadData(); ArrayList<String> values = new ArrayList<>(); for (HashMap<String, String> row : allJobs) { String aValue = row.get(field); if (!values.contains(aValue)) { values.add(aValue); } } Collections.sort(values); return values; } public static ArrayList<HashMap<String, String>> findAll() { loadData(); return new ArrayList<>(allJobs); } public static ArrayList<HashMap<String, String>> findByColumnAndValue(String column, String value) { loadData(); ArrayList<HashMap<String, String>> jobs = new ArrayList<>(); for (HashMap<String, String> row : allJobs) { String aValue = row.get(column); if (aValue != null && aValue.toLowerCase().contains(value.toLowerCase())) { jobs.add(row); } } return jobs; } public static ArrayList<HashMap<String, String>> findByValue(String value) { loadData(); ArrayList<HashMap<String, String>> jobs = new ArrayList<>(); for (HashMap<String, String> row : allJobs) { for (String key : row.keySet()) { String aValue = row.get(key); if (aValue.toLowerCase().contains(value.toLowerCase())) { jobs.add(row); break; } } } return jobs; } private static void loadData() { if (isDataLoaded) { return; } try { Resource resource = new ClassPathResource(DATA_FILE); InputStream is = resource.getInputStream(); Reader reader = new InputStreamReader(is); CSVParser parser = CSVFormat.RFC4180.withFirstRecordAsHeader().parse(reader); List<CSVRecord> records = parser.getRecords(); Integer numberOfColumns = records.get(0).size(); String[] headers = parser.getHeaderMap().keySet().toArray(new String[numberOfColumns]); allJobs = new ArrayList<>(); for (CSVRecord record : records) { HashMap<String, String> newJob = new HashMap<>(); for (String headerLabel : headers) { newJob.put(headerLabel, record.get(headerLabel)); } allJobs.add(newJob); } isDataLoaded = true; } catch (IOException e) { System.out.println(\"Failed to load job data\"); e.printStackTrace(); } } }"}]}}
{"project_id":116,"chunk_id":0,"content":{"main_file_path":"techjobs-mvc-master\\src\\main\\java\\org\\launchcode\\controllers\\SearchController.java","main_file_content":"package org.launchcode.controllers; import org.launchcode.models.JobData; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import java.util.ArrayList; import java.util.HashMap; @Controller @RequestMapping(\"search\") public class SearchController { @RequestMapping(value = \"\") public String search(Model model) { model.addAttribute(\"columns\", ListController.columnChoices); return \"search\"; } }","dependencies":[]}}
{"project_id":116,"chunk_id":0,"content":{"main_file_path":"techjobs-mvc-master\\src\\main\\java\\org\\launchcode\\models\\JobData.java","main_file_content":"package org.launchcode.models; import org.apache.commons.csv.CSVFormat; import org.apache.commons.csv.CSVParser; import org.apache.commons.csv.CSVRecord; import org.springframework.core.io.ClassPathResource; import org.springframework.core.io.Resource; import java.io.*; import java.util.ArrayList; import java.util.Collections; import java.util.HashMap; import java.util.List; public class JobData { private static final String DATA_FILE = \"job_data.csv\"; private static boolean isDataLoaded = false; private static ArrayList<HashMap<String, String>> allJobs; public static ArrayList<String> findAll(String field) { loadData(); ArrayList<String> values = new ArrayList<>(); for (HashMap<String, String> row : allJobs) { String aValue = row.get(field); if (!values.contains(aValue)) { values.add(aValue); } } Collections.sort(values); return values; } public static ArrayList<HashMap<String, String>> findAll() { loadData(); return new ArrayList<>(allJobs); } public static ArrayList<HashMap<String, String>> findByColumnAndValue(String column, String value) { loadData(); ArrayList<HashMap<String, String>> jobs = new ArrayList<>(); for (HashMap<String, String> row : allJobs) { String aValue = row.get(column); if (aValue != null && aValue.toLowerCase().contains(value.toLowerCase())) { jobs.add(row); } } return jobs; } public static ArrayList<HashMap<String, String>> findByValue(String value) { loadData(); ArrayList<HashMap<String, String>> jobs = new ArrayList<>(); for (HashMap<String, String> row : allJobs) { for (String key : row.keySet()) { String aValue = row.get(key); if (aValue.toLowerCase().contains(value.toLowerCase())) { jobs.add(row); break; } } } return jobs; } private static void loadData() { if (isDataLoaded) { return; } try { Resource resource = new ClassPathResource(DATA_FILE); InputStream is = resource.getInputStream(); Reader reader = new InputStreamReader(is); CSVParser parser = CSVFormat.RFC4180.withFirstRecordAsHeader().parse(reader); List<CSVRecord> records = parser.getRecords(); Integer numberOfColumns = records.get(0).size(); String[] headers = parser.getHeaderMap().keySet().toArray(new String[numberOfColumns]); allJobs = new ArrayList<>(); for (CSVRecord record : records) { HashMap<String, String> newJob = new HashMap<>(); for (String headerLabel : headers) { newJob.put(headerLabel, record.get(headerLabel)); } allJobs.add(newJob); } isDataLoaded = true; } catch (IOException e) { System.out.println(\"Failed to load job data\"); e.printStackTrace(); } } }","dependencies":[]}}
{"project_id":116,"chunk_id":0,"content":{"main_file_path":"techjobs-mvc-master\\src\\test\\java\\org\\launchcode\\TechjobsApplicationTests.java","main_file_content":"package org.launchcode; import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.test.context.junit4.SpringRunner; @RunWith(SpringRunner.class) @SpringBootTest public class TechjobsApplicationTests { @Test public void contextLoads() { } }","dependencies":[]}}
{"project_id":118,"chunk_id":0,"content":{"main_file_path":"Tic Tac Toe\\Tic Tac Toe.java","main_file_content":"import java.util.*; public class GFG { static String[] board; static String turn; static String checkWinner() { for (int a = 0; a < 8; a++) { String line = null; switch (a) { case 0: line = board[0] + board[1] + board[2]; break; case 1: line = board[3] + board[4] + board[5]; break; case 2: line = board[6] + board[7] + board[8]; break; case 3: line = board[0] + board[3] + board[6]; break; case 4: line = board[1] + board[4] + board[7]; break; case 5: line = board[2] + board[5] + board[8]; break; case 6: line = board[0] + board[4] + board[8]; break; case 7: line = board[2] + board[4] + board[6]; break; } if (line.equals(\"XXX\")) { return \"X\"; } else if (line.equals(\"OOO\")) { return \"O\"; } } for (int a = 0; a < 9; a++) { if (Arrays.asList(board).contains( String.valueOf(a + 1))) { break; } else if (a == 8) { return \"draw\"; } } System.out.println( turn + \"'s turn; enter a slot number to place \" + turn + \" in:\"); return null; } static void printBoard() { System.out.println(\"|---|---|---|\"); System.out.println(\"| \" + board[0] + \" | \" + board[1] + \" | \" + board[2] + \" |\"); System.out.println(\"||\"); System.out.println(\"| \" + board[3] + \" | \" + board[4] + \" | \" + board[5] + \" |\"); System.out.println(\"||\"); System.out.println(\"| \" + board[6] + \" | \" + board[7] + \" | \" + board[8] + \" |\"); System.out.println(\"|---|---|---|\"); } public static void main(String[] args) { Scanner in = new Scanner(System.in); board = new String[9]; turn = \"X\"; String winner = null; for (int a = 0; a < 9; a++) { board[a] = String.valueOf(a + 1); } System.out.println(\"Welcome to 3x3 Tic Tac Toe.\"); printBoard(); System.out.println( \"X will play first. Enter a slot number to place X in:\"); while (winner == null) { int numInput; try { numInput = in.nextInt(); if (!(numInput > 0 && numInput <= 9)) { System.out.println( \"Invalid input; re-enter slot number:\"); continue; } } catch (InputMismatchException e) { System.out.println( \"Invalid input; re-enter slot number:\"); continue; } if (board[numInput - 1].equals( String.valueOf(numInput))) { board[numInput - 1] = turn; if (turn.equals(\"X\")) { turn = \"O\"; } else { turn = \"X\"; } printBoard(); winner = checkWinner(); } else { System.out.println( \"Slot already taken; re-enter slot number:\"); } } if (winner.equalsIgnoreCase(\"draw\")) { System.out.println( \"It's a draw! Thanks for playing.\"); } else { System.out.println( \"Congratulations! \" + winner + \"'s have won! Thanks for playing.\"); } } }","dependencies":[]}}
{"project_id":119,"chunk_id":0,"content":{"main_file_path":"Tic-Tac-Toe-Games-main\\app\\src\\androidTest\\java\\com\\example\\my_tic_tac_toe\\ExampleInstrumentedTest.java","main_file_content":"package com.example.my_tic_tac_toe; import android.content.Context; import androidx.test.platform.app.InstrumentationRegistry; import androidx.test.ext.junit.runners.AndroidJUnit4; import org.junit.Test; import org.junit.runner.RunWith; import static org.junit.Assert.*; @RunWith(AndroidJUnit4.class) public class ExampleInstrumentedTest { @Test public void useAppContext() { Context appContext = InstrumentationRegistry.getInstrumentation().getTargetContext(); assertEquals(\"com.example.my_tic_tac_toe\", appContext.getPackageName()); } }","dependencies":[]}}
{"project_id":119,"chunk_id":0,"content":{"main_file_path":"Tic-Tac-Toe-Games-main\\app\\src\\main\\java\\com\\example\\my_tic_tac_toe\\MainActivity.java","main_file_content":"package com.example.my_tic_tac_toe; import android.os.Bundle; import android.view.View; import android.widget.Button; import android.widget.TextView; import android.widget.Toast; import androidx.appcompat.app.AppCompatActivity; public class MainActivity extends AppCompatActivity implements View.OnClickListener { private Button[][] buttons = new Button[3][3]; private boolean player1Turn = true; private int roundCount; private int player1Points; private int player2Points; private TextView textViewPlayer1; private TextView textViewPlayer2; protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); textViewPlayer1 = findViewById(R.id.text_view_p1); textViewPlayer2 = findViewById(R.id.text_view_p2); for (int i = 0; i < 3; i++) { for (int j = 0; j < 3; j++) { String buttonID = \"button_\" + i + j; int resID = getResources().getIdentifier(buttonID, \"id\", getPackageName()); buttons[i][j] = findViewById(resID); buttons[i][j].setOnClickListener(this); } } Button buttonReset = findViewById(R.id.button_reset); buttonReset.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { resetGame(); } }); } @Override public void onClick(View v) { if (!((Button) v).getText().toString().equals(\"\")) { return; } if (player1Turn) { ((Button) v).setText(\"0\"); } else { ((Button) v).setText(\"X\"); } roundCount++; if (checkForWin()) { if (player1Turn) { player1Wins(); } else { player2Wins(); } } else if (roundCount == 9) { draw(); } else { player1Turn = !player1Turn; } } private boolean checkForWin() { String[][] field = new String[3][3]; for (int i = 0; i < 3; i++) { for (int j = 0; j < 3; j++) { field[i][j] = buttons[i][j].getText().toString(); } } for (int i = 0; i < 3; i++) { if (field[i][0].equals(field[i][1]) && field[i][0].equals(field[i][2]) && !field[i][0].equals(\"\")) { return true; } } for (int i = 0; i < 3; i++) { if (field[0][i].equals(field[1][i]) && field[0][i].equals(field[2][i]) && !field[0][i].equals(\"\")) { return true; } } if (field[0][0].equals(field[1][1]) && field[0][0].equals(field[2][2]) && !field[0][0].equals(\"\")) { return true; } if (field[0][2].equals(field[1][1]) && field[0][2].equals(field[2][0]) && !field[0][2].equals(\"\")) { return true; } return false; } private void player1Wins() { player1Points++; Toast.makeText(this, \"Vamos!! Player 1 wins the match!\", Toast.LENGTH_SHORT).show(); updatePointsText(); resetBoard(); } private void player2Wins() { player2Points++; Toast.makeText(this, \"Vamos!! Player 2 wins the match!\", Toast.LENGTH_SHORT).show(); updatePointsText(); resetBoard(); } private void draw() { Toast.makeText(this, \"Draw!\", Toast.LENGTH_SHORT).show(); resetBoard(); } private void updatePointsText() { textViewPlayer1.setText(\"Player 1: \" + player1Points); textViewPlayer2.setText(\"Player 2: \" + player2Points); } private void resetBoard() { for (int i = 0; i < 3; i++) { for (int j = 0; j < 3; j++) { buttons[i][j].setText(\"\"); } } roundCount = 0; player1Turn = true; } private void resetGame() { player1Points = 0; player2Points = 0; updatePointsText(); resetBoard(); } @Override protected void onSaveInstanceState(Bundle outState) { super.onSaveInstanceState(outState); outState.putInt(\"roundCount\", roundCount); outState.putInt(\"player1Points\", player1Points); outState.putInt(\"player2Points\", player2Points); outState.putBoolean(\"player1Turn\", player1Turn); } @Override protected void onRestoreInstanceState(Bundle savedInstanceState) { super.onRestoreInstanceState(savedInstanceState); roundCount = savedInstanceState.getInt(\"roundCount\"); player1Points = savedInstanceState.getInt(\"player1Points\"); player2Points = savedInstanceState.getInt(\"player2Points\"); player1Turn = savedInstanceState.getBoolean(\"player1Turn\"); } }","dependencies":[]}}
{"project_id":119,"chunk_id":0,"content":{"main_file_path":"Tic-Tac-Toe-Games-main\\app\\src\\test\\java\\com\\example\\my_tic_tac_toe\\ExampleUnitTest.java","main_file_content":"package com.example.my_tic_tac_toe; import org.junit.Test; import static org.junit.Assert.*; public class ExampleUnitTest { @Test public void addition_isCorrect() { assertEquals(4, 2 + 2); } }","dependencies":[]}}
{"project_id":123,"chunk_id":0,"content":{"main_file_path":"Vehicle Management System\\Main.java","main_file_content":"import java.util.Scanner; public class Main { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); VehicleManager vehicleManager = new VehicleManager(); while (true) { System.out.println(\"Vehicle Management System\"); System.out.println(\"1. Add Vehicle\"); System.out.println(\"2. View Vehicles\"); System.out.println(\"3. Exit\"); System.out.print(\"Enter your choice: \"); int choice = scanner.nextInt(); scanner.nextLine(); switch (choice) { case 1: System.out.print(\"Enter make: \"); String make = scanner.nextLine(); System.out.print(\"Enter model: \"); String model = scanner.nextLine(); System.out.print(\"Enter year: \"); int year = scanner.nextInt(); System.out.print(\"Enter price: \"); double price = scanner.nextDouble(); Vehicle newVehicle = new Vehicle(make, model, year, price); vehicleManager.addVehicle(newVehicle); System.out.println(\"Vehicle added successfully!\"); break; case 2: System.out.println(\"All Vehicles:\"); for (Vehicle vehicle : vehicleManager.getAllVehicles()) { System.out.println(vehicle); } break; case 3: System.out.println(\"Exiting...\"); System.exit(0); default: System.out.println(\"Invalid choice. Please try again.\"); } } } }","dependencies":[{"file_path":"Vehicle Management System\\Vehicle.java","file_content":"public class Vehicle { private String make; private String model; private int year; private double price; public Vehicle(String make, String model, int year, double price) { this.make = make; this.model = model; this.year = year; this.price = price; } public String getMake() { return make; } public String getModel() { return model; } public int getYear() { return year; } public double getPrice() { return price; } @Override public String toString() { return \"Make: \" + make + \", Model: \" + model + \", Year: \" + year + \", Price: $\" + price; } }"},{"file_path":"Vehicle Management System\\VehicleManager.java","file_content":"import java.util.ArrayList; import java.util.List; public class VehicleManager { private List<Vehicle> vehicles; public VehicleManager() { vehicles = new ArrayList<>(); } public void addVehicle(Vehicle vehicle) { vehicles.add(vehicle); } public List<Vehicle> getAllVehicles() { return vehicles; } public void removeVehicle(Vehicle vehicle) { vehicles.remove(vehicle); } }"}]}}
{"project_id":123,"chunk_id":0,"content":{"main_file_path":"Vehicle Management System\\Vehicle.java","main_file_content":"public class Vehicle { private String make; private String model; private int year; private double price; public Vehicle(String make, String model, int year, double price) { this.make = make; this.model = model; this.year = year; this.price = price; } public String getMake() { return make; } public String getModel() { return model; } public int getYear() { return year; } public double getPrice() { return price; } @Override public String toString() { return \"Make: \" + make + \", Model: \" + model + \", Year: \" + year + \", Price: $\" + price; } }","dependencies":[]}}
{"project_id":123,"chunk_id":0,"content":{"main_file_path":"Vehicle Management System\\VehicleManager.java","main_file_content":"import java.util.ArrayList; import java.util.List; public class VehicleManager { private List<Vehicle> vehicles; public VehicleManager() { vehicles = new ArrayList<>(); } public void addVehicle(Vehicle vehicle) { vehicles.add(vehicle); } public List<Vehicle> getAllVehicles() { return vehicles; } public void removeVehicle(Vehicle vehicle) { vehicles.remove(vehicle); } }","dependencies":[{"file_path":"Vehicle Management System\\Vehicle.java","file_content":"public class Vehicle { private String make; private String model; private int year; private double price; public Vehicle(String make, String model, int year, double price) { this.make = make; this.model = model; this.year = year; this.price = price; } public String getMake() { return make; } public String getModel() { return model; } public int getYear() { return year; } public double getPrice() { return price; } @Override public String toString() { return \"Make: \" + make + \", Model: \" + model + \", Year: \" + year + \", Price: $\" + price; } }"}]}}
{"project_id":124,"chunk_id":0,"content":{"main_file_path":"Virtual Private Network Java Project\\VPN Code\\centre\\addclient.java","main_file_content":"package centre; import java.util.*; import java.sql.*; import java.lang.*; public class addclient { public Connection con=null; public ResultSet rs=null; public Statement st=null; public String Company,Address,Phone,Mail,Person,Query; public void set(String Company,String Address,String Phone,String Mail,String Person) { this.Company=Company; this.Address=Address; this.Phone=Phone; this.Mail=Mail; this.Person=Person; try { Class.forName(\"sun.jdbc.odbc.JdbcOdbcDriver\"); con=DriverManager.getConnection(\"jdbc:odbc:central\"); }catch(Exception e){} } public void insert() { try { Query=\"insert into ClientDetails values(' \"+Company+\" ',' \"+Address+\" ',' \"+Phone+\" ',' \"+Mail+\" ',' \"+Person+\" ')\"; st=con.createStatement(); st.executeQuery(Query); }catch(Exception e){} } }","dependencies":[]}}
{"project_id":124,"chunk_id":0,"content":{"main_file_path":"Virtual Private Network Java Project\\VPN Code\\centre\\addplacement.java","main_file_content":"package centre; import java.util.*; import java.sql.*; import java.lang.*; public class addplacement { public Connection con=null; public ResultSet rs=null; public Statement st=null; public String name,placement,company,person,dop,Query; public void set(String name,String placement,String company,String person,String dop) { this.name=name; this.placement=placement; this.company=company; this.person=person; this.dop=dop; try { Class.forName(\"sun.jdbc.odbc.JdbcOdbcDriver\"); con=DriverManager.getConnection(\"jdbc:odbc:central\"); }catch(Exception e){} } public void insert() { try { Query=\"insert into PlacementDetails values(' \"+name+\" ',' \"+placement+\" ',' \"+company+\" ',' \"+person+\" ',' \"+dop+\" ')\"; st=con.createStatement(); st.executeQuery(Query); }catch(Exception e){} } }","dependencies":[]}}
{"project_id":124,"chunk_id":0,"content":{"main_file_path":"Virtual Private Network Java Project\\VPN Code\\centre\\dbcourse.java","main_file_content":"package centre; import java.util.*; import java.sql.*; import java.lang.*; public class dbcourse { public Connection con=null; public ResultSet rs=null; public Statement st=null; public String courseno,cname,amount,duration,Query; public void set(String courseno,String cname,String amount,String duration) { this.courseno=courseno; this.cname=cname; this.amount=amount; this.duration=duration; try { Class.forName(\"sun.jdbc.odbc.JdbcOdbcDriver\"); con=DriverManager.getConnection(\"jdbc:odbc:central\"); }catch(Exception e){} } public void insert() { try { Query=\"insert into coursedetails values(' \"+courseno+\" ',' \"+cname+\" ',' \"+amount+\" ',' \"+duration+\" ')\"; st=con.createStatement(); st.executeQuery(Query); }catch(Exception e){} } }","dependencies":[]}}
{"project_id":124,"chunk_id":0,"content":{"main_file_path":"Virtual Private Network Java Project\\VPN Code\\centre\\dbenquiry.java","main_file_content":"package centre; import java.util.*; import java.sql.*; import java.lang.*; public class dbenquiry { public Connection con=null; public ResultSet rs=null; public Statement st=null; public String name,address,phone,mobile,email,qualification,course,timing,reference,Query; public void set(String name,String address,String phone,String mobile,String email,String qualification,String course,String timing,String reference) { this.name=name; this.address=address; this.phone=phone; this.mobile=mobile; this.email=email; this.qualification=qualification; this.course=course; this.timing=timing; this.reference=reference; try { Class.forName(\"sun.jdbc.odbc.JdbcOdbcDriver\"); con=DriverManager.getConnection(\"jdbc:odbc:central\"); }catch(Exception e){} } public void insert() { try { Query=\"insert into Enquiry values(' \"+name+\" ',' \"+address+\" ',' \"+phone+\" ',' \"+mobile+\" ',' \"+email+\" ',' \"+qualification+\" ',' \"+course+\" ',' \"+timing+\" ',' \"+reference+\" ')\"; st=con.createStatement(); st.executeQuery(Query); }catch(Exception e){} } }","dependencies":[]}}
{"project_id":124,"chunk_id":0,"content":{"main_file_path":"Virtual Private Network Java Project\\VPN Code\\centre\\dbregistration.java","main_file_content":"package centre; import java.util.*; import java.sql.*; import java.lang.*; public class dbregistration { public Connection con=null; public ResultSet rs=null; public Statement st=null; public String regno,name,address,doj,phone,mphone,email,coursename,btiming,sdate,duration,regfees,minstall,project,Query; public void set(String regno,String name,String address,String doj,String phone,String mphone,String email,String coursename,String btiming,String sdate,String duration,String regfees,String minstall,String project) { this.regno=regno; this.name=name; this.address=address; this.doj=doj; this.phone=phone; this.mphone=mphone; this.email=email; this.coursename=coursename; this.btiming=btiming; this.sdate=sdate; this.duration=duration; this.regfees=regfees; this.minstall=minstall; this.project=project; try { Class.forName(\"sun.jdbc.odbc.JdbcOdbcDriver\"); con=DriverManager.getConnection(\"jdbc:odbc:central\"); }catch(Exception e){} } public void insert() { try { Query=\"insert into Registration values(' \"+regno+\" ',' \"+name+\" ',' \"+address+\" ',' \"+doj+\" ',' \"+phone+\" ',' \"+mphone+\" ',' \"+email+\" ',' \"+coursename+\" ',' \"+btiming+\" ',' \"+sdate+\" ',' \"+duration+\" ',' \"+regfees+\" ',' \"+minstall+\" ',' \"+project+\" ')\"; st=con.createStatement(); st.executeQuery(Query); }catch(Exception e){} } }","dependencies":[]}}
{"project_id":124,"chunk_id":0,"content":{"main_file_path":"Virtual Private Network Java Project\\VPN Code\\centre\\dbsalary.java","main_file_content":"package centre; import java.util.*; import java.sql.*; import java.lang.*; public class dbsalary { public Connection con=null; public ResultSet rs=null; public Statement st=null; public String empno,empname,doj,pay,Query; public void set(String empno,String empname,String doj,String pay) { this.empno=empno; this.empname=empname; this.doj=doj; this.pay=pay; try { Class.forName(\"sun.jdbc.odbc.JdbcOdbcDriver\"); con=DriverManager.getConnection(\"jdbc:odbc:central\"); }catch(Exception e){} } public void insert() { try { Query=\"insert into salarydetails values(' \"+empno+\" ',' \"+empname+\" ',' \"+doj+\" ',' \"+pay+\" ')\"; st=con.createStatement(); st.executeQuery(Query); }catch(Exception e){} } }","dependencies":[]}}
{"project_id":124,"chunk_id":0,"content":{"main_file_path":"Virtual Private Network Java Project\\VPN Code\\centre\\staffattend.java","main_file_content":"package centre; import java.util.*; import java.sql.*; import java.lang.*; public class staffattend { public Connection con=null; public ResultSet rs=null; public Statement st=null; public String empno,name,Query; public void set(String empno,String name) { this.empno=empno; this.name=name; try { Class.forName(\"sun.jdbc.odbc.JdbcOdbcDriver\"); con=DriverManager.getConnection(\"jdbc:odbc:central\"); }catch(Exception e){} } public void insert() { try { Query=\"insert into StaffAttendence values(' \"+empno+\" ',' \"+name+\" ')\"; st=con.createStatement(); st.executeQuery(Query); }catch(Exception e){} } }","dependencies":[]}}
{"project_id":126,"chunk_id":0,"content":{"main_file_path":"WatchNotificationGenerator-master\\app\\src\\androidTest\\java\\com\\skocur\\watchnotificationgenerator\\ExampleInstrumentedTest.java","main_file_content":"package com.skocur.watchnotificationgenerator; import android.content.Context; import android.support.test.InstrumentationRegistry; import android.support.test.runner.AndroidJUnit4; import org.junit.Test; import org.junit.runner.RunWith; import static org.junit.Assert.*; @RunWith(AndroidJUnit4.class) public class ExampleInstrumentedTest { @Test public void useAppContext() { Context appContext = InstrumentationRegistry.getTargetContext(); assertEquals(\"com.skocur.watchnotificationgenerator\", appContext.getPackageName()); } }","dependencies":[]}}
{"project_id":126,"chunk_id":0,"content":{"main_file_path":"WatchNotificationGenerator-master\\app\\src\\main\\java\\com\\skocur\\watchnotificationgenerator\\HomeActivity.java","main_file_content":"package com.skocur.watchnotificationgenerator; import android.content.Context; import android.content.Intent; import android.os.Bundle; import android.util.Log; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.EditText; import android.widget.TextView; import com.skocur.watchnotificationgenerator.models.Category; import com.skocur.watchnotificationgenerator.sqlutils.DatabaseService; import com.skocur.watchnotificationgenerator.utils.CustomAddAlertDialog; import java.util.List; import java.util.concurrent.ExecutionException; import androidx.annotation.NonNull; import androidx.appcompat.app.AppCompatActivity; import androidx.recyclerview.widget.LinearLayoutManager; import androidx.recyclerview.widget.RecyclerView; public class HomeActivity extends AppCompatActivity { public static DatabaseService databaseService; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_home); databaseService = new DatabaseService(getApplicationContext()); initiateViews(); try { List<Category> categories = databaseService.getAllCategories(); for (Category category : categories) { Log.i(\">>>>>\", category.getCategoryName()); } CategoriesListAdapter categoriesListAdapter = new CategoriesListAdapter( categories ); RecyclerView recyclerView = findViewById(R.id.home_recycler_list); recyclerView.setLayoutManager(new LinearLayoutManager(getApplicationContext())); recyclerView.setAdapter(categoriesListAdapter); } catch (InterruptedException e) { e.printStackTrace(); } catch (ExecutionException e) { e.printStackTrace(); } } class CategoriesListAdapter extends RecyclerView.Adapter<CategoryViewHolder> { private List<Category> mCategories; CategoriesListAdapter(List<Category> categories) { mCategories = categories; } @NonNull @Override public CategoryViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) { View view = LayoutInflater.from(HomeActivity.this.getApplicationContext()) .inflate(R.layout.item_general, parent, false); return new CategoryViewHolder((ViewGroup) view.findViewById(R.id.item_general_container)); } @Override public void onBindViewHolder(@NonNull CategoryViewHolder holder, int position) { Category category = mCategories.get(position); holder.setCategoryTitle(category.categoryName); holder.setCategoryListener(category); } @Override public int getItemCount() { return mCategories.size(); } } class CategoryViewHolder extends RecyclerView.ViewHolder { private ViewGroup mContainer; private TextView mCategoryTitle; CategoryViewHolder(@NonNull ViewGroup itemView) { super(itemView); mContainer = itemView; mCategoryTitle = mContainer.findViewById(R.id.item_general_name); } void setCategoryListener(final Category category) { mContainer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { Context context = HomeActivity.this.getApplicationContext(); Intent intent = new Intent(context, NotificationsActivity.class); intent.putExtra(\"category_name\", category.getCategoryName()); context.startActivity(intent); } }); } void setCategoryTitle(String title) { mCategoryTitle.setText(title); } } private void initiateViews() { findViewById(R.id.activity_home_fab_add_category).setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { CustomAddAlertDialog customAddAlertDialog = new CustomAddAlertDialog(); customAddAlertDialog.alertFor(HomeActivity.this) .setTitle(\"Add category\") .setPositiveButton(new CustomAddAlertDialog.InputReadyListener() { @Override public void onClick(EditText input) { Category category = new Category(); category.setCategoryName(input.getText().toString()); databaseService.addCategory(category); } }).build(); } }); } }","dependencies":[{"file_path":"WatchNotificationGenerator-master\\app\\src\\main\\java\\com\\skocur\\watchnotificationgenerator\\NotificationsActivity.java","file_content":"package com.skocur.watchnotificationgenerator; import androidx.annotation.NonNull; import androidx.appcompat.app.AppCompatActivity; import androidx.core.app.NotificationCompat; import androidx.core.app.NotificationManagerCompat; import androidx.recyclerview.widget.LinearLayoutManager; import androidx.recyclerview.widget.RecyclerView; import android.app.NotificationChannel; import android.app.NotificationManager; import android.content.Intent; import android.os.Build; import android.os.Bundle; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.EditText; import android.widget.ImageView; import android.widget.TextView; import com.skocur.watchnotificationgenerator.models.Notification; import com.skocur.watchnotificationgenerator.utils.CustomAddAlertDialog; import java.util.List; import java.util.concurrent.ExecutionException; public class NotificationsActivity extends AppCompatActivity { private static final String NOTIFICATIONS_CHANNEL = \"s0x\"; private static int NOTIFICATIONS_COUNTER = 0; private String categoryName; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_notifications); createNotificationChannel(); Intent intent = getIntent(); categoryName = intent.getStringExtra(\"category_name\"); initiateViews(); try { NotificationsListAdapter notificationsListAdapter = new NotificationsListAdapter( HomeActivity.databaseService.getAllNotificationsFromCategory(categoryName) ); RecyclerView recyclerView = findViewById(R.id.notifications_recycler_list); recyclerView.setLayoutManager(new LinearLayoutManager(getApplicationContext())); recyclerView.setAdapter(notificationsListAdapter); } catch (InterruptedException e) { e.printStackTrace(); } catch (ExecutionException e) { e.printStackTrace(); } } class NotificationsListAdapter extends RecyclerView.Adapter<NotificationViewHolder> { private List<Notification> mNotifications; NotificationsListAdapter(List<Notification> notifications) { this.mNotifications = notifications; } @NonNull @Override public NotificationViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) { View layoutInflater = LayoutInflater.from(NotificationsActivity.this.getApplicationContext()) .inflate(R.layout.item_general, parent, false); return new NotificationViewHolder((ViewGroup) layoutInflater.findViewById(R.id.item_general_container)); } @Override public void onBindViewHolder(@NonNull NotificationViewHolder holder, int position) { Notification notification = mNotifications.get(position); holder.setItemTitle(notification.getNotificationTitle()); holder.setIconListener(notification); } @Override public int getItemCount() { return mNotifications.size(); } } class NotificationViewHolder extends RecyclerView.ViewHolder { private ViewGroup mViewGroup; private TextView mItemTitle; private ImageView mNewNotification; public NotificationViewHolder(@NonNull ViewGroup container) { super(container); mViewGroup = container; mItemTitle = mViewGroup.findViewById(R.id.item_general_name); mNewNotification = mViewGroup.findViewById(R.id.item_general_create_notification); mNewNotification.setVisibility(View.VISIBLE); } void setIconListener(final Notification notification) { mNewNotification.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { displayNotification(notification); } }); } void setItemTitle(String title) { mItemTitle.setText(title); } private void displayNotification(Notification notification) { NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(NotificationsActivity.this.getApplicationContext(), NOTIFICATIONS_CHANNEL) .setSmallIcon(R.drawable.ic_launcher_background) .setContentTitle(notification.getNotificationTitle()) .setContentText(notification.notificationContent) .setPriority(NotificationCompat.PRIORITY_HIGH) .extend(new NotificationCompat.WearableExtender().setHintShowBackgroundOnly(true)); NotificationManagerCompat notificationManager = NotificationManagerCompat.from(NotificationsActivity.this.getApplicationContext()); notificationManager.notify(NOTIFICATIONS_COUNTER++, mBuilder.build()); } } private void initiateViews() { findViewById(R.id.activity_notifications_fab_add_notification).setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { CustomAddAlertDialog customAddAlertDialog = new CustomAddAlertDialog(); customAddAlertDialog.alertFor(NotificationsActivity.this) .setTitle(\"Add Notification\") .setPositiveButton(new CustomAddAlertDialog.InputReadyListener() { @Override public void onClick(EditText input) { Intent intent = new Intent(NotificationsActivity.this, NewNotificationActivity.class); intent.putExtra(\"notification_name\", input.getText().toString()); intent.putExtra(\"category_name\", categoryName); startActivity(intent); } }).build(); } }); } private void createNotificationChannel() { if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) { CharSequence name = NOTIFICATIONS_CHANNEL; String description = \"Notifications\"; int importance = NotificationManager.IMPORTANCE_DEFAULT; NotificationChannel channel = new NotificationChannel(NOTIFICATIONS_CHANNEL, name, importance); channel.setDescription(description); NotificationManager notificationManager = getApplicationContext().getSystemService(NotificationManager.class); notificationManager.createNotificationChannel(channel); } } }"},{"file_path":"WatchNotificationGenerator-master\\app\\src\\main\\java\\com\\skocur\\watchnotificationgenerator\\models\\Category.java","file_content":"package com.skocur.watchnotificationgenerator.models; import androidx.room.ColumnInfo; import androidx.room.Entity; import androidx.room.PrimaryKey; @Entity public class Category { @PrimaryKey(autoGenerate = true) public int categoryUid; @ColumnInfo(name = \"category_name\") public String categoryName; public String getCategoryName() { return categoryName; } public void setCategoryName(String categoryName) { this.categoryName = categoryName; } public int getCategoryUid() { return categoryUid; } @Override public String toString() { return categoryName; } }"},{"file_path":"WatchNotificationGenerator-master\\app\\src\\main\\java\\com\\skocur\\watchnotificationgenerator\\sqlutils\\DatabaseService.java","file_content":"package com.skocur.watchnotificationgenerator.sqlutils; import android.content.Context; import android.os.AsyncTask; import com.skocur.watchnotificationgenerator.models.Category; import com.skocur.watchnotificationgenerator.models.Notification; import java.util.List; import java.util.concurrent.ExecutionException; import androidx.room.Room; public class DatabaseService { private MainDatabase db; public DatabaseService(Context context){ db = Room.databaseBuilder(context, MainDatabase.class, \"watch-notifications-db\").build(); } public void addNotification(Notification notification) { new NotificationInserterAsyncTask().execute(notification); } public List<Notification> getAllNotifications() throws InterruptedException, ExecutionException { return new NotificationDownloaderAsyncTask().execute().get(); } public List<Notification> getAllNotificationsFromCategory(String category) throws InterruptedException, ExecutionException { return new NotificationCategoryDownloaderAsyncTask().execute(category).get(); } public void addCategory(Category category) { new CategoryInserterAsyncTask().execute(category); } public List<Category> getAllCategories() throws InterruptedException, ExecutionException { return new CategoryDownloaderAsyncTask().execute().get(); } public Category getCategoryForName(String categoryName) throws InterruptedException, ExecutionException { return new CategoryForNameDownloaderAsyncTask().execute(categoryName).get(); } private class NotificationInserterAsyncTask extends AsyncTask<Notification, Void, Void> { @Override protected Void doInBackground(Notification... notifications) { db.notificationDao().insertAll(notifications); return null; } } private class NotificationCategoryDownloaderAsyncTask extends AsyncTask<String, Void, List<Notification>> { @Override protected List<Notification> doInBackground(String... data) { return db.notificationDao().getAllFromCategory(data[0]); } } private class NotificationDownloaderAsyncTask extends AsyncTask<Void, Void, List<Notification>> { @Override protected List<Notification> doInBackground(Void... url) { return db.notificationDao().getAll(); } } private class CategoryInserterAsyncTask extends AsyncTask<Category, Void, Void> { @Override protected Void doInBackground(Category... categories) { db.categoryDao().insertAll(categories); return null; } } private class CategoryDownloaderAsyncTask extends AsyncTask<Void, Void, List<Category>> { @Override protected List<Category> doInBackground(Void... url) { return db.categoryDao().getAllCategories(); } } private class CategoryForNameDownloaderAsyncTask extends AsyncTask<String, Void, Category> { @Override protected Category doInBackground(String... data) { return db.categoryDao().getCategoryForName(data[0]); } } }"},{"file_path":"WatchNotificationGenerator-master\\app\\src\\main\\java\\com\\skocur\\watchnotificationgenerator\\utils\\CustomAddAlertDialog.java","file_content":"package com.skocur.watchnotificationgenerator.utils; import android.app.AlertDialog; import android.content.Context; import android.content.DialogInterface; import android.text.InputType; import android.widget.EditText; import android.widget.LinearLayout; public class CustomAddAlertDialog { private String alertTitle; private Context context; private DialogInterface.OnClickListener onClickListener; private InputReadyListener inputReadyListener; public CustomAddAlertDialog alertFor(Context context) { this.context = context; return this; } public CustomAddAlertDialog setTitle(String alertTitle) { this.alertTitle = alertTitle; return this; } public CustomAddAlertDialog setPositiveButton(InputReadyListener inputReadyListener) { this.inputReadyListener = inputReadyListener; return this; } public void build() { AlertDialog.Builder builder = new AlertDialog.Builder(context); builder.setTitle(alertTitle); LinearLayout container = new LinearLayout(context); container.setOrientation(LinearLayout.VERTICAL); LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT); params.setMargins(30, 5, 30, 5); final EditText input = new EditText(context); input.setInputType(InputType.TYPE_CLASS_TEXT); container.addView(input, params); builder.setView(container); builder.setPositiveButton(\"Add\", new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialogInterface, int i) { inputReadyListener.onClick(input); } }).setNegativeButton(\"Cancel\", new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialogInterface, int i) { dialogInterface.cancel(); } }); builder.show(); } public interface InputReadyListener { void onClick(EditText input); } }"}]}}
{"project_id":126,"chunk_id":0,"content":{"main_file_path":"WatchNotificationGenerator-master\\app\\src\\main\\java\\com\\skocur\\watchnotificationgenerator\\NewNotificationActivity.java","main_file_content":"package com.skocur.watchnotificationgenerator; import androidx.appcompat.app.AppCompatActivity; import android.os.Bundle; import android.util.Log; import android.view.View; import android.widget.EditText; import com.skocur.watchnotificationgenerator.models.Category; import com.skocur.watchnotificationgenerator.models.Notification; import java.util.concurrent.ExecutionException; public class NewNotificationActivity extends AppCompatActivity { private String notificationName; private String categoryName; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_new_notification); notificationName = getIntent().getStringExtra(\"notification_name\"); categoryName = getIntent().getStringExtra(\"category_name\"); initiateViews(); } private void initiateViews() { EditText etNotificationTitle = findViewById(R.id.activity_new_notification_edit_title); etNotificationTitle.setText(notificationName); final EditText etNotificationContent = findViewById(R.id.activity_new_notification_edit_content); findViewById(R.id.activity_new_notification_button_submit).setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { Notification notification = new Notification(); notification.setNotificationTitle(notificationName); notification.setNotificationContent(etNotificationContent.getText().toString()); try { Category category = HomeActivity.databaseService.getCategoryForName(categoryName); notification.setCategoryUid(category.getCategoryUid()); HomeActivity.databaseService.addNotification(notification); finish(); } catch (InterruptedException e) { Log.e(\"!\", e.toString()); } catch (ExecutionException e) { Log.e(\"!\", e.toString()); } } }); } }","dependencies":[{"file_path":"WatchNotificationGenerator-master\\app\\src\\main\\java\\com\\skocur\\watchnotificationgenerator\\models\\Category.java","file_content":"package com.skocur.watchnotificationgenerator.models; import androidx.room.ColumnInfo; import androidx.room.Entity; import androidx.room.PrimaryKey; @Entity public class Category { @PrimaryKey(autoGenerate = true) public int categoryUid; @ColumnInfo(name = \"category_name\") public String categoryName; public String getCategoryName() { return categoryName; } public void setCategoryName(String categoryName) { this.categoryName = categoryName; } public int getCategoryUid() { return categoryUid; } @Override public String toString() { return categoryName; } }"},{"file_path":"WatchNotificationGenerator-master\\app\\src\\main\\java\\com\\skocur\\watchnotificationgenerator\\models\\Notification.java","file_content":"package com.skocur.watchnotificationgenerator.models; import androidx.annotation.NonNull; import androidx.room.ColumnInfo; import androidx.room.Embedded; import androidx.room.Entity; import androidx.room.PrimaryKey; @Entity public class Notification { @PrimaryKey(autoGenerate = true) public int uid; @ColumnInfo(name=\"notification_title\") public String notificationTitle; @ColumnInfo(name = \"notification_content\") public String notificationContent; @ColumnInfo(name = \"category_uid\") public int categoryUid; public int getCategoryUid() { return categoryUid; } public void setCategoryUid(int categoryUid) { this.categoryUid = categoryUid; } public String getNotificationTitle() { return notificationTitle; } public void setNotificationTitle(String notificationTitle) { this.notificationTitle = notificationTitle; } public String getNotificationContent() { return notificationContent; } public void setNotificationContent(String notificationContent) { this.notificationContent = notificationContent; } @NonNull @Override public String toString() { return getCategoryUid() + \" \" + getNotificationTitle() + \" \" + getNotificationContent(); } }"}]}}
{"project_id":126,"chunk_id":0,"content":{"main_file_path":"WatchNotificationGenerator-master\\app\\src\\main\\java\\com\\skocur\\watchnotificationgenerator\\NotificationsActivity.java","main_file_content":"package com.skocur.watchnotificationgenerator; import androidx.annotation.NonNull; import androidx.appcompat.app.AppCompatActivity; import androidx.core.app.NotificationCompat; import androidx.core.app.NotificationManagerCompat; import androidx.recyclerview.widget.LinearLayoutManager; import androidx.recyclerview.widget.RecyclerView; import android.app.NotificationChannel; import android.app.NotificationManager; import android.content.Intent; import android.os.Build; import android.os.Bundle; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.EditText; import android.widget.ImageView; import android.widget.TextView; import com.skocur.watchnotificationgenerator.models.Notification; import com.skocur.watchnotificationgenerator.utils.CustomAddAlertDialog; import java.util.List; import java.util.concurrent.ExecutionException; public class NotificationsActivity extends AppCompatActivity { private static final String NOTIFICATIONS_CHANNEL = \"s0x\"; private static int NOTIFICATIONS_COUNTER = 0; private String categoryName; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_notifications); createNotificationChannel(); Intent intent = getIntent(); categoryName = intent.getStringExtra(\"category_name\"); initiateViews(); try { NotificationsListAdapter notificationsListAdapter = new NotificationsListAdapter( HomeActivity.databaseService.getAllNotificationsFromCategory(categoryName) ); RecyclerView recyclerView = findViewById(R.id.notifications_recycler_list); recyclerView.setLayoutManager(new LinearLayoutManager(getApplicationContext())); recyclerView.setAdapter(notificationsListAdapter); } catch (InterruptedException e) { e.printStackTrace(); } catch (ExecutionException e) { e.printStackTrace(); } } class NotificationsListAdapter extends RecyclerView.Adapter<NotificationViewHolder> { private List<Notification> mNotifications; NotificationsListAdapter(List<Notification> notifications) { this.mNotifications = notifications; } @NonNull @Override public NotificationViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) { View layoutInflater = LayoutInflater.from(NotificationsActivity.this.getApplicationContext()) .inflate(R.layout.item_general, parent, false); return new NotificationViewHolder((ViewGroup) layoutInflater.findViewById(R.id.item_general_container)); } @Override public void onBindViewHolder(@NonNull NotificationViewHolder holder, int position) { Notification notification = mNotifications.get(position); holder.setItemTitle(notification.getNotificationTitle()); holder.setIconListener(notification); } @Override public int getItemCount() { return mNotifications.size(); } } class NotificationViewHolder extends RecyclerView.ViewHolder { private ViewGroup mViewGroup; private TextView mItemTitle; private ImageView mNewNotification; public NotificationViewHolder(@NonNull ViewGroup container) { super(container); mViewGroup = container; mItemTitle = mViewGroup.findViewById(R.id.item_general_name); mNewNotification = mViewGroup.findViewById(R.id.item_general_create_notification); mNewNotification.setVisibility(View.VISIBLE); } void setIconListener(final Notification notification) { mNewNotification.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { displayNotification(notification); } }); } void setItemTitle(String title) { mItemTitle.setText(title); } private void displayNotification(Notification notification) { NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(NotificationsActivity.this.getApplicationContext(), NOTIFICATIONS_CHANNEL) .setSmallIcon(R.drawable.ic_launcher_background) .setContentTitle(notification.getNotificationTitle()) .setContentText(notification.notificationContent) .setPriority(NotificationCompat.PRIORITY_HIGH) .extend(new NotificationCompat.WearableExtender().setHintShowBackgroundOnly(true)); NotificationManagerCompat notificationManager = NotificationManagerCompat.from(NotificationsActivity.this.getApplicationContext()); notificationManager.notify(NOTIFICATIONS_COUNTER++, mBuilder.build()); } } private void initiateViews() { findViewById(R.id.activity_notifications_fab_add_notification).setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { CustomAddAlertDialog customAddAlertDialog = new CustomAddAlertDialog(); customAddAlertDialog.alertFor(NotificationsActivity.this) .setTitle(\"Add Notification\") .setPositiveButton(new CustomAddAlertDialog.InputReadyListener() { @Override public void onClick(EditText input) { Intent intent = new Intent(NotificationsActivity.this, NewNotificationActivity.class); intent.putExtra(\"notification_name\", input.getText().toString()); intent.putExtra(\"category_name\", categoryName); startActivity(intent); } }).build(); } }); } private void createNotificationChannel() { if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) { CharSequence name = NOTIFICATIONS_CHANNEL; String description = \"Notifications\"; int importance = NotificationManager.IMPORTANCE_DEFAULT; NotificationChannel channel = new NotificationChannel(NOTIFICATIONS_CHANNEL, name, importance); channel.setDescription(description); NotificationManager notificationManager = getApplicationContext().getSystemService(NotificationManager.class); notificationManager.createNotificationChannel(channel); } } }","dependencies":[{"file_path":"WatchNotificationGenerator-master\\app\\src\\main\\java\\com\\skocur\\watchnotificationgenerator\\NewNotificationActivity.java","file_content":"package com.skocur.watchnotificationgenerator; import androidx.appcompat.app.AppCompatActivity; import android.os.Bundle; import android.util.Log; import android.view.View; import android.widget.EditText; import com.skocur.watchnotificationgenerator.models.Category; import com.skocur.watchnotificationgenerator.models.Notification; import java.util.concurrent.ExecutionException; public class NewNotificationActivity extends AppCompatActivity { private String notificationName; private String categoryName; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_new_notification); notificationName = getIntent().getStringExtra(\"notification_name\"); categoryName = getIntent().getStringExtra(\"category_name\"); initiateViews(); } private void initiateViews() { EditText etNotificationTitle = findViewById(R.id.activity_new_notification_edit_title); etNotificationTitle.setText(notificationName); final EditText etNotificationContent = findViewById(R.id.activity_new_notification_edit_content); findViewById(R.id.activity_new_notification_button_submit).setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { Notification notification = new Notification(); notification.setNotificationTitle(notificationName); notification.setNotificationContent(etNotificationContent.getText().toString()); try { Category category = HomeActivity.databaseService.getCategoryForName(categoryName); notification.setCategoryUid(category.getCategoryUid()); HomeActivity.databaseService.addNotification(notification); finish(); } catch (InterruptedException e) { Log.e(\"!\", e.toString()); } catch (ExecutionException e) { Log.e(\"!\", e.toString()); } } }); } }"},{"file_path":"WatchNotificationGenerator-master\\app\\src\\main\\java\\com\\skocur\\watchnotificationgenerator\\models\\Notification.java","file_content":"package com.skocur.watchnotificationgenerator.models; import androidx.annotation.NonNull; import androidx.room.ColumnInfo; import androidx.room.Embedded; import androidx.room.Entity; import androidx.room.PrimaryKey; @Entity public class Notification { @PrimaryKey(autoGenerate = true) public int uid; @ColumnInfo(name=\"notification_title\") public String notificationTitle; @ColumnInfo(name = \"notification_content\") public String notificationContent; @ColumnInfo(name = \"category_uid\") public int categoryUid; public int getCategoryUid() { return categoryUid; } public void setCategoryUid(int categoryUid) { this.categoryUid = categoryUid; } public String getNotificationTitle() { return notificationTitle; } public void setNotificationTitle(String notificationTitle) { this.notificationTitle = notificationTitle; } public String getNotificationContent() { return notificationContent; } public void setNotificationContent(String notificationContent) { this.notificationContent = notificationContent; } @NonNull @Override public String toString() { return getCategoryUid() + \" \" + getNotificationTitle() + \" \" + getNotificationContent(); } }"},{"file_path":"WatchNotificationGenerator-master\\app\\src\\main\\java\\com\\skocur\\watchnotificationgenerator\\utils\\CustomAddAlertDialog.java","file_content":"package com.skocur.watchnotificationgenerator.utils; import android.app.AlertDialog; import android.content.Context; import android.content.DialogInterface; import android.text.InputType; import android.widget.EditText; import android.widget.LinearLayout; public class CustomAddAlertDialog { private String alertTitle; private Context context; private DialogInterface.OnClickListener onClickListener; private InputReadyListener inputReadyListener; public CustomAddAlertDialog alertFor(Context context) { this.context = context; return this; } public CustomAddAlertDialog setTitle(String alertTitle) { this.alertTitle = alertTitle; return this; } public CustomAddAlertDialog setPositiveButton(InputReadyListener inputReadyListener) { this.inputReadyListener = inputReadyListener; return this; } public void build() { AlertDialog.Builder builder = new AlertDialog.Builder(context); builder.setTitle(alertTitle); LinearLayout container = new LinearLayout(context); container.setOrientation(LinearLayout.VERTICAL); LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT); params.setMargins(30, 5, 30, 5); final EditText input = new EditText(context); input.setInputType(InputType.TYPE_CLASS_TEXT); container.addView(input, params); builder.setView(container); builder.setPositiveButton(\"Add\", new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialogInterface, int i) { inputReadyListener.onClick(input); } }).setNegativeButton(\"Cancel\", new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialogInterface, int i) { dialogInterface.cancel(); } }); builder.show(); } public interface InputReadyListener { void onClick(EditText input); } }"}]}}
{"project_id":126,"chunk_id":0,"content":{"main_file_path":"WatchNotificationGenerator-master\\app\\src\\main\\java\\com\\skocur\\watchnotificationgenerator\\models\\Category.java","main_file_content":"package com.skocur.watchnotificationgenerator.models; import androidx.room.ColumnInfo; import androidx.room.Entity; import androidx.room.PrimaryKey; @Entity public class Category { @PrimaryKey(autoGenerate = true) public int categoryUid; @ColumnInfo(name = \"category_name\") public String categoryName; public String getCategoryName() { return categoryName; } public void setCategoryName(String categoryName) { this.categoryName = categoryName; } public int getCategoryUid() { return categoryUid; } @Override public String toString() { return categoryName; } }","dependencies":[]}}
{"project_id":126,"chunk_id":0,"content":{"main_file_path":"WatchNotificationGenerator-master\\app\\src\\main\\java\\com\\skocur\\watchnotificationgenerator\\models\\Notification.java","main_file_content":"package com.skocur.watchnotificationgenerator.models; import androidx.annotation.NonNull; import androidx.room.ColumnInfo; import androidx.room.Embedded; import androidx.room.Entity; import androidx.room.PrimaryKey; @Entity public class Notification { @PrimaryKey(autoGenerate = true) public int uid; @ColumnInfo(name=\"notification_title\") public String notificationTitle; @ColumnInfo(name = \"notification_content\") public String notificationContent; @ColumnInfo(name = \"category_uid\") public int categoryUid; public int getCategoryUid() { return categoryUid; } public void setCategoryUid(int categoryUid) { this.categoryUid = categoryUid; } public String getNotificationTitle() { return notificationTitle; } public void setNotificationTitle(String notificationTitle) { this.notificationTitle = notificationTitle; } public String getNotificationContent() { return notificationContent; } public void setNotificationContent(String notificationContent) { this.notificationContent = notificationContent; } @NonNull @Override public String toString() { return getCategoryUid() + \" \" + getNotificationTitle() + \" \" + getNotificationContent(); } }","dependencies":[]}}
{"project_id":126,"chunk_id":0,"content":{"main_file_path":"WatchNotificationGenerator-master\\app\\src\\main\\java\\com\\skocur\\watchnotificationgenerator\\sqlutils\\CategoryDao.java","main_file_content":"package com.skocur.watchnotificationgenerator.sqlutils; import com.skocur.watchnotificationgenerator.models.Category; import java.util.List; import androidx.room.Dao; import androidx.room.Delete; import androidx.room.Insert; import androidx.room.Query; @Dao public interface CategoryDao { @Query(\"SELECT * FROM category\") List<Category> getAllCategories(); @Query(\"SELECT * FROM category \" + \"WHERE category_name LIKE :categoryName\") Category getCategoryForName(String categoryName); @Insert void insertAll(Category... categories); @Delete void delete(Category category); }","dependencies":[{"file_path":"WatchNotificationGenerator-master\\app\\src\\main\\java\\com\\skocur\\watchnotificationgenerator\\models\\Category.java","file_content":"package com.skocur.watchnotificationgenerator.models; import androidx.room.ColumnInfo; import androidx.room.Entity; import androidx.room.PrimaryKey; @Entity public class Category { @PrimaryKey(autoGenerate = true) public int categoryUid; @ColumnInfo(name = \"category_name\") public String categoryName; public String getCategoryName() { return categoryName; } public void setCategoryName(String categoryName) { this.categoryName = categoryName; } public int getCategoryUid() { return categoryUid; } @Override public String toString() { return categoryName; } }"}]}}
{"project_id":126,"chunk_id":0,"content":{"main_file_path":"WatchNotificationGenerator-master\\app\\src\\main\\java\\com\\skocur\\watchnotificationgenerator\\sqlutils\\DatabaseService.java","main_file_content":"package com.skocur.watchnotificationgenerator.sqlutils; import android.content.Context; import android.os.AsyncTask; import com.skocur.watchnotificationgenerator.models.Category; import com.skocur.watchnotificationgenerator.models.Notification; import java.util.List; import java.util.concurrent.ExecutionException; import androidx.room.Room; public class DatabaseService { private MainDatabase db; public DatabaseService(Context context){ db = Room.databaseBuilder(context, MainDatabase.class, \"watch-notifications-db\").build(); } public void addNotification(Notification notification) { new NotificationInserterAsyncTask().execute(notification); } public List<Notification> getAllNotifications() throws InterruptedException, ExecutionException { return new NotificationDownloaderAsyncTask().execute().get(); } public List<Notification> getAllNotificationsFromCategory(String category) throws InterruptedException, ExecutionException { return new NotificationCategoryDownloaderAsyncTask().execute(category).get(); } public void addCategory(Category category) { new CategoryInserterAsyncTask().execute(category); } public List<Category> getAllCategories() throws InterruptedException, ExecutionException { return new CategoryDownloaderAsyncTask().execute().get(); } public Category getCategoryForName(String categoryName) throws InterruptedException, ExecutionException { return new CategoryForNameDownloaderAsyncTask().execute(categoryName).get(); } private class NotificationInserterAsyncTask extends AsyncTask<Notification, Void, Void> { @Override protected Void doInBackground(Notification... notifications) { db.notificationDao().insertAll(notifications); return null; } } private class NotificationCategoryDownloaderAsyncTask extends AsyncTask<String, Void, List<Notification>> { @Override protected List<Notification> doInBackground(String... data) { return db.notificationDao().getAllFromCategory(data[0]); } } private class NotificationDownloaderAsyncTask extends AsyncTask<Void, Void, List<Notification>> { @Override protected List<Notification> doInBackground(Void... url) { return db.notificationDao().getAll(); } } private class CategoryInserterAsyncTask extends AsyncTask<Category, Void, Void> { @Override protected Void doInBackground(Category... categories) { db.categoryDao().insertAll(categories); return null; } } private class CategoryDownloaderAsyncTask extends AsyncTask<Void, Void, List<Category>> { @Override protected List<Category> doInBackground(Void... url) { return db.categoryDao().getAllCategories(); } } private class CategoryForNameDownloaderAsyncTask extends AsyncTask<String, Void, Category> { @Override protected Category doInBackground(String... data) { return db.categoryDao().getCategoryForName(data[0]); } } }","dependencies":[{"file_path":"WatchNotificationGenerator-master\\app\\src\\main\\java\\com\\skocur\\watchnotificationgenerator\\models\\Category.java","file_content":"package com.skocur.watchnotificationgenerator.models; import androidx.room.ColumnInfo; import androidx.room.Entity; import androidx.room.PrimaryKey; @Entity public class Category { @PrimaryKey(autoGenerate = true) public int categoryUid; @ColumnInfo(name = \"category_name\") public String categoryName; public String getCategoryName() { return categoryName; } public void setCategoryName(String categoryName) { this.categoryName = categoryName; } public int getCategoryUid() { return categoryUid; } @Override public String toString() { return categoryName; } }"},{"file_path":"WatchNotificationGenerator-master\\app\\src\\main\\java\\com\\skocur\\watchnotificationgenerator\\models\\Notification.java","file_content":"package com.skocur.watchnotificationgenerator.models; import androidx.annotation.NonNull; import androidx.room.ColumnInfo; import androidx.room.Embedded; import androidx.room.Entity; import androidx.room.PrimaryKey; @Entity public class Notification { @PrimaryKey(autoGenerate = true) public int uid; @ColumnInfo(name=\"notification_title\") public String notificationTitle; @ColumnInfo(name = \"notification_content\") public String notificationContent; @ColumnInfo(name = \"category_uid\") public int categoryUid; public int getCategoryUid() { return categoryUid; } public void setCategoryUid(int categoryUid) { this.categoryUid = categoryUid; } public String getNotificationTitle() { return notificationTitle; } public void setNotificationTitle(String notificationTitle) { this.notificationTitle = notificationTitle; } public String getNotificationContent() { return notificationContent; } public void setNotificationContent(String notificationContent) { this.notificationContent = notificationContent; } @NonNull @Override public String toString() { return getCategoryUid() + \" \" + getNotificationTitle() + \" \" + getNotificationContent(); } }"},{"file_path":"WatchNotificationGenerator-master\\app\\src\\main\\java\\com\\skocur\\watchnotificationgenerator\\sqlutils\\MainDatabase.java","file_content":"package com.skocur.watchnotificationgenerator.sqlutils; import com.skocur.watchnotificationgenerator.models.Category; import com.skocur.watchnotificationgenerator.models.Notification; import androidx.room.Database; import androidx.room.RoomDatabase; @Database(entities = {Notification.class, Category.class}, version = 1) public abstract class MainDatabase extends RoomDatabase { public abstract NotificationDao notificationDao(); public abstract CategoryDao categoryDao(); }"}]}}
{"project_id":126,"chunk_id":0,"content":{"main_file_path":"WatchNotificationGenerator-master\\app\\src\\main\\java\\com\\skocur\\watchnotificationgenerator\\sqlutils\\MainDatabase.java","main_file_content":"package com.skocur.watchnotificationgenerator.sqlutils; import com.skocur.watchnotificationgenerator.models.Category; import com.skocur.watchnotificationgenerator.models.Notification; import androidx.room.Database; import androidx.room.RoomDatabase; @Database(entities = {Notification.class, Category.class}, version = 1) public abstract class MainDatabase extends RoomDatabase { public abstract NotificationDao notificationDao(); public abstract CategoryDao categoryDao(); }","dependencies":[{"file_path":"WatchNotificationGenerator-master\\app\\src\\main\\java\\com\\skocur\\watchnotificationgenerator\\models\\Category.java","file_content":"package com.skocur.watchnotificationgenerator.models; import androidx.room.ColumnInfo; import androidx.room.Entity; import androidx.room.PrimaryKey; @Entity public class Category { @PrimaryKey(autoGenerate = true) public int categoryUid; @ColumnInfo(name = \"category_name\") public String categoryName; public String getCategoryName() { return categoryName; } public void setCategoryName(String categoryName) { this.categoryName = categoryName; } public int getCategoryUid() { return categoryUid; } @Override public String toString() { return categoryName; } }"},{"file_path":"WatchNotificationGenerator-master\\app\\src\\main\\java\\com\\skocur\\watchnotificationgenerator\\models\\Notification.java","file_content":"package com.skocur.watchnotificationgenerator.models; import androidx.annotation.NonNull; import androidx.room.ColumnInfo; import androidx.room.Embedded; import androidx.room.Entity; import androidx.room.PrimaryKey; @Entity public class Notification { @PrimaryKey(autoGenerate = true) public int uid; @ColumnInfo(name=\"notification_title\") public String notificationTitle; @ColumnInfo(name = \"notification_content\") public String notificationContent; @ColumnInfo(name = \"category_uid\") public int categoryUid; public int getCategoryUid() { return categoryUid; } public void setCategoryUid(int categoryUid) { this.categoryUid = categoryUid; } public String getNotificationTitle() { return notificationTitle; } public void setNotificationTitle(String notificationTitle) { this.notificationTitle = notificationTitle; } public String getNotificationContent() { return notificationContent; } public void setNotificationContent(String notificationContent) { this.notificationContent = notificationContent; } @NonNull @Override public String toString() { return getCategoryUid() + \" \" + getNotificationTitle() + \" \" + getNotificationContent(); } }"},{"file_path":"WatchNotificationGenerator-master\\app\\src\\main\\java\\com\\skocur\\watchnotificationgenerator\\sqlutils\\CategoryDao.java","file_content":"package com.skocur.watchnotificationgenerator.sqlutils; import com.skocur.watchnotificationgenerator.models.Category; import java.util.List; import androidx.room.Dao; import androidx.room.Delete; import androidx.room.Insert; import androidx.room.Query; @Dao public interface CategoryDao { @Query(\"SELECT * FROM category\") List<Category> getAllCategories(); @Query(\"SELECT * FROM category \" + \"WHERE category_name LIKE :categoryName\") Category getCategoryForName(String categoryName); @Insert void insertAll(Category... categories); @Delete void delete(Category category); }"},{"file_path":"WatchNotificationGenerator-master\\app\\src\\main\\java\\com\\skocur\\watchnotificationgenerator\\sqlutils\\NotificationDao.java","file_content":"package com.skocur.watchnotificationgenerator.sqlutils; import com.skocur.watchnotificationgenerator.models.Notification; import java.util.List; import androidx.room.Dao; import androidx.room.Delete; import androidx.room.Insert; import androidx.room.Query; @Dao public interface NotificationDao { @Query(\"SELECT * FROM notification\") List<Notification> getAll(); @Query(\"SELECT * FROM notification \" + \"INNER JOIN category ON notification.category_uid = category.categoryUid \" + \"WHERE category.category_name LIKE :category\") List<Notification> getAllFromCategory(String category); @Insert void insertAll(Notification... notifications); @Delete void delete(Notification notification); }"}]}}
{"project_id":126,"chunk_id":0,"content":{"main_file_path":"WatchNotificationGenerator-master\\app\\src\\main\\java\\com\\skocur\\watchnotificationgenerator\\sqlutils\\NotificationDao.java","main_file_content":"package com.skocur.watchnotificationgenerator.sqlutils; import com.skocur.watchnotificationgenerator.models.Notification; import java.util.List; import androidx.room.Dao; import androidx.room.Delete; import androidx.room.Insert; import androidx.room.Query; @Dao public interface NotificationDao { @Query(\"SELECT * FROM notification\") List<Notification> getAll(); @Query(\"SELECT * FROM notification \" + \"INNER JOIN category ON notification.category_uid = category.categoryUid \" + \"WHERE category.category_name LIKE :category\") List<Notification> getAllFromCategory(String category); @Insert void insertAll(Notification... notifications); @Delete void delete(Notification notification); }","dependencies":[{"file_path":"WatchNotificationGenerator-master\\app\\src\\main\\java\\com\\skocur\\watchnotificationgenerator\\models\\Notification.java","file_content":"package com.skocur.watchnotificationgenerator.models; import androidx.annotation.NonNull; import androidx.room.ColumnInfo; import androidx.room.Embedded; import androidx.room.Entity; import androidx.room.PrimaryKey; @Entity public class Notification { @PrimaryKey(autoGenerate = true) public int uid; @ColumnInfo(name=\"notification_title\") public String notificationTitle; @ColumnInfo(name = \"notification_content\") public String notificationContent; @ColumnInfo(name = \"category_uid\") public int categoryUid; public int getCategoryUid() { return categoryUid; } public void setCategoryUid(int categoryUid) { this.categoryUid = categoryUid; } public String getNotificationTitle() { return notificationTitle; } public void setNotificationTitle(String notificationTitle) { this.notificationTitle = notificationTitle; } public String getNotificationContent() { return notificationContent; } public void setNotificationContent(String notificationContent) { this.notificationContent = notificationContent; } @NonNull @Override public String toString() { return getCategoryUid() + \" \" + getNotificationTitle() + \" \" + getNotificationContent(); } }"}]}}
{"project_id":126,"chunk_id":0,"content":{"main_file_path":"WatchNotificationGenerator-master\\app\\src\\main\\java\\com\\skocur\\watchnotificationgenerator\\utils\\CustomAddAlertDialog.java","main_file_content":"package com.skocur.watchnotificationgenerator.utils; import android.app.AlertDialog; import android.content.Context; import android.content.DialogInterface; import android.text.InputType; import android.widget.EditText; import android.widget.LinearLayout; public class CustomAddAlertDialog { private String alertTitle; private Context context; private DialogInterface.OnClickListener onClickListener; private InputReadyListener inputReadyListener; public CustomAddAlertDialog alertFor(Context context) { this.context = context; return this; } public CustomAddAlertDialog setTitle(String alertTitle) { this.alertTitle = alertTitle; return this; } public CustomAddAlertDialog setPositiveButton(InputReadyListener inputReadyListener) { this.inputReadyListener = inputReadyListener; return this; } public void build() { AlertDialog.Builder builder = new AlertDialog.Builder(context); builder.setTitle(alertTitle); LinearLayout container = new LinearLayout(context); container.setOrientation(LinearLayout.VERTICAL); LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT); params.setMargins(30, 5, 30, 5); final EditText input = new EditText(context); input.setInputType(InputType.TYPE_CLASS_TEXT); container.addView(input, params); builder.setView(container); builder.setPositiveButton(\"Add\", new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialogInterface, int i) { inputReadyListener.onClick(input); } }).setNegativeButton(\"Cancel\", new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialogInterface, int i) { dialogInterface.cancel(); } }); builder.show(); } public interface InputReadyListener { void onClick(EditText input); } }","dependencies":[]}}
{"project_id":126,"chunk_id":0,"content":{"main_file_path":"WatchNotificationGenerator-master\\app\\src\\test\\java\\com\\skocur\\watchnotificationgenerator\\ExampleUnitTest.java","main_file_content":"package com.skocur.watchnotificationgenerator; import org.junit.Test; import static org.junit.Assert.*; public class ExampleUnitTest { @Test public void addition_isCorrect() { assertEquals(4, 2 + 2); } }","dependencies":[]}}
{"project_id":127,"chunk_id":0,"content":{"main_file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\QueryBuilder.java","main_file_content":"package com.github.fedy2.weather; import java.util.HashMap; import java.util.Map; import java.util.Map.Entry; import com.github.fedy2.weather.data.unit.DegreeUnit; public class QueryBuilder { private static final String WOEID_PARAMETER_NAME = \"woeid\"; private static final String DEGREES_PARAMETER_CELSIUS = \"u=\\\"c\\\"\"; private static final String DEGREES_PARAMETER_FAHRENHEIT = \"u=\\\"f\\\"\"; private static final String FIRST_PARAMETER_NAME = \"truncate\"; private static final String LAST_PARAMETER_NAME = \"tail\"; private String unitCondition; private String woeidCondition; private Map<String, String> limits; public QueryBuilder() { limits = new HashMap<String, String>(); } public QueryBuilder woeid(String woeid) { woeidCondition = WOEID_PARAMETER_NAME + \"=\" + \"\\\"\" + woeid +\"\\\"\"; return this; } public QueryBuilder location(String location) { woeidCondition = WOEID_PARAMETER_NAME + \" in (select woeid from geo.places where text=\\\"\"+location+\"\\\")\"; return this; } public QueryBuilder unit(DegreeUnit unit) { switch (unit) { case CELSIUS: unitCondition = DEGREES_PARAMETER_CELSIUS; break; case FAHRENHEIT: unitCondition = DEGREES_PARAMETER_FAHRENHEIT; break; } return this; } public QueryBuilder first(int limit) { limits.put(FIRST_PARAMETER_NAME, String.valueOf(limit)); return this; } public QueryBuilder last(int limit) { limits.put(LAST_PARAMETER_NAME, String.valueOf(limit)); return this; } public String build() { StringBuilder query = new StringBuilder(\"SELECT * FROM weather.forecast WHERE \"); query.append(woeidCondition).append(\" \"); if (unitCondition!=null) query.append(\"AND \").append(unitCondition).append(\" \"); for (Entry<String, String> limit:limits.entrySet()) query.append(\"| \").append(limit.getKey()).append(\"(count=\").append(limit.getValue()).append(\") \"); return query.toString(); } }","dependencies":[{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\unit\\DegreeUnit.java","file_content":"package com.github.fedy2.weather.data.unit; public enum DegreeUnit { FAHRENHEIT, CELSIUS; }"}]}}
{"project_id":127,"chunk_id":0,"content":{"main_file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\YahooWeatherService.java","main_file_content":"package com.github.fedy2.weather; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.io.Reader; import java.io.StringWriter; import java.io.UnsupportedEncodingException; import java.io.Writer; import java.net.Proxy; import java.net.URL; import java.net.URLConnection; import java.net.URLEncoder; import java.util.List; import javax.xml.bind.JAXBException; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import com.github.fedy2.weather.binding.RSSParser; import com.github.fedy2.weather.data.Channel; import com.github.fedy2.weather.data.Rss; import com.github.fedy2.weather.data.unit.DegreeUnit; public class YahooWeatherService { private static final String WEATHER_SERVICE_BASE_URL = \"https: private static final int DEFAULT_BUFFER_SIZE = 1024 * 4; public interface LimitDeclaration { List<Channel> first(int count) throws JAXBException, IOException; List<Channel> last(int count) throws JAXBException, IOException; List<Channel> all() throws JAXBException, IOException; } private Logger logger = LoggerFactory.getLogger(YahooWeatherService.class); private RSSParser parser; private Proxy proxy; public YahooWeatherService() throws JAXBException { this.parser = new RSSParser(); this.proxy = Proxy.NO_PROXY; } public YahooWeatherService(Proxy proxy) throws JAXBException { this.parser = new RSSParser(); this.proxy = proxy; } public Channel getForecast(String woeid, DegreeUnit unit) throws JAXBException, IOException { QueryBuilder query = new QueryBuilder(); query.woeid(woeid).unit(unit); List<Channel> channels = execute(query.build()); if (channels.isEmpty()) throw new IllegalStateException(\"No results from the service.\"); return channels.get(0); } public LimitDeclaration getForecastForLocation(String location, DegreeUnit unit) { final QueryBuilder query = new QueryBuilder(); query.location(location).unit(unit); return new LimitDeclaration() { @Override public List<Channel> last(int count) throws JAXBException, IOException { query.last(count); return execute(query.build()); } @Override public List<Channel> first(int count) throws JAXBException, IOException { query.first(count); return execute(query.build()); } @Override public List<Channel> all() throws JAXBException, IOException { return execute(query.build()); } }; } private String composeUrl(String query) { logger.trace(\"query: {}\", query); StringBuilder url = new StringBuilder(WEATHER_SERVICE_BASE_URL); try { url.append(\"?q=\").append(URLEncoder.encode(query, \"UTF-8\")); } catch (UnsupportedEncodingException e) { throw new RuntimeException(\"Url encoding failed\", e); } return url.toString(); } private List<Channel> execute(String query) throws IOException, JAXBException { String url = composeUrl(query); String xml = retrieveRSS(url); Rss rss = parser.parse(xml); return rss.getChannels(); } private String retrieveRSS(String serviceUrl) throws IOException { URL url = new URL(serviceUrl); URLConnection connection = url.openConnection(proxy); InputStream is = connection.getInputStream(); InputStreamReader reader = new InputStreamReader(is); StringWriter writer = new StringWriter(); copy(reader, writer); reader.close(); is.close(); return writer.toString(); } private static long copy(Reader input, Writer output) throws IOException { char[] buffer = new char[DEFAULT_BUFFER_SIZE]; long count = 0; int n = 0; while (-1 != (n = input.read(buffer))) { output.write(buffer, 0, n); count += n; } return count; } }","dependencies":[{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\QueryBuilder.java","file_content":"package com.github.fedy2.weather; import java.util.HashMap; import java.util.Map; import java.util.Map.Entry; import com.github.fedy2.weather.data.unit.DegreeUnit; public class QueryBuilder { private static final String WOEID_PARAMETER_NAME = \"woeid\"; private static final String DEGREES_PARAMETER_CELSIUS = \"u=\\\"c\\\"\"; private static final String DEGREES_PARAMETER_FAHRENHEIT = \"u=\\\"f\\\"\"; private static final String FIRST_PARAMETER_NAME = \"truncate\"; private static final String LAST_PARAMETER_NAME = \"tail\"; private String unitCondition; private String woeidCondition; private Map<String, String> limits; public QueryBuilder() { limits = new HashMap<String, String>(); } public QueryBuilder woeid(String woeid) { woeidCondition = WOEID_PARAMETER_NAME + \"=\" + \"\\\"\" + woeid +\"\\\"\"; return this; } public QueryBuilder location(String location) { woeidCondition = WOEID_PARAMETER_NAME + \" in (select woeid from geo.places where text=\\\"\"+location+\"\\\")\"; return this; } public QueryBuilder unit(DegreeUnit unit) { switch (unit) { case CELSIUS: unitCondition = DEGREES_PARAMETER_CELSIUS; break; case FAHRENHEIT: unitCondition = DEGREES_PARAMETER_FAHRENHEIT; break; } return this; } public QueryBuilder first(int limit) { limits.put(FIRST_PARAMETER_NAME, String.valueOf(limit)); return this; } public QueryBuilder last(int limit) { limits.put(LAST_PARAMETER_NAME, String.valueOf(limit)); return this; } public String build() { StringBuilder query = new StringBuilder(\"SELECT * FROM weather.forecast WHERE \"); query.append(woeidCondition).append(\" \"); if (unitCondition!=null) query.append(\"AND \").append(unitCondition).append(\" \"); for (Entry<String, String> limit:limits.entrySet()) query.append(\"| \").append(limit.getKey()).append(\"(count=\").append(limit.getValue()).append(\") \"); return query.toString(); } }"},{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\binding\\RSSParser.java","file_content":"package com.github.fedy2.weather.binding; import java.io.StringReader; import javax.xml.bind.JAXBContext; import javax.xml.bind.JAXBException; import javax.xml.bind.Unmarshaller; import com.github.fedy2.weather.data.Rss; public class RSSParser { private Unmarshaller unmarshaller; public RSSParser() throws JAXBException { JAXBContext context = JAXBContext.newInstance(Rss.class); unmarshaller = context.createUnmarshaller(); } public Rss parse(String xml) throws JAXBException { return (Rss)unmarshaller.unmarshal(new StringReader(xml)); } }"},{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\Channel.java","file_content":"package com.github.fedy2.weather.data; import java.util.Date; import javax.xml.bind.annotation.XmlAccessType; import javax.xml.bind.annotation.XmlAccessorType; import javax.xml.bind.annotation.XmlElement; import javax.xml.bind.annotation.XmlRootElement; import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter; import com.github.fedy2.weather.binding.Constants; import com.github.fedy2.weather.binding.adapter.RFC822DateAdapter; @XmlAccessorType(XmlAccessType.FIELD) @XmlRootElement public class Channel { @XmlElement private String title; @XmlElement private String link; @XmlElement private String language; @XmlElement private String description; @XmlElement @XmlJavaTypeAdapter(RFC822DateAdapter.class) private Date lastBuildDate; @XmlElement private long ttl; @XmlElement(namespace=Constants.YWEATHER_NAMESPACE_URI) private Location location; @XmlElement(namespace=Constants.YWEATHER_NAMESPACE_URI) private Units units; @XmlElement(namespace=Constants.YWEATHER_NAMESPACE_URI) private Wind wind; @XmlElement(namespace=Constants.YWEATHER_NAMESPACE_URI) private Atmosphere atmosphere; @XmlElement(namespace=Constants.YWEATHER_NAMESPACE_URI) private Astronomy astronomy; @XmlElement private Image image; @XmlElement private Item item; public Channel() {} public String getTitle() { return title; } public String getLink() { return link; } public String getLanguage() { return language; } public String getDescription() { return description; } public Date getLastBuildDate() { return lastBuildDate; } public long getTtl() { return ttl; } public Location getLocation() { return location; } public Units getUnits() { return units; } public Wind getWind() { return wind; } public Atmosphere getAtmosphere() { return atmosphere; } public Astronomy getAstronomy() { return astronomy; } public Image getImage() { return image; } public Item getItem() { return item; } @Override public String toString() { StringBuilder builder = new StringBuilder(); builder.append(\"Channel [title=\"); builder.append(title); builder.append(\", link=\"); builder.append(link); builder.append(\", language=\"); builder.append(language); builder.append(\", description=\"); builder.append(description); builder.append(\", lastBuildDate=\"); builder.append(lastBuildDate); builder.append(\", ttl=\"); builder.append(ttl); builder.append(\", location=\"); builder.append(location); builder.append(\", units=\"); builder.append(units); builder.append(\", wind=\"); builder.append(wind); builder.append(\", atmosphere=\"); builder.append(atmosphere); builder.append(\", astronomy=\"); builder.append(astronomy); builder.append(\", image=\"); builder.append(image); builder.append(\", item=\"); builder.append(item); builder.append(\"]\"); return builder.toString(); } }"},{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\Rss.java","file_content":"package com.github.fedy2.weather.data; import java.util.List; import javax.xml.bind.annotation.XmlAccessType; import javax.xml.bind.annotation.XmlAccessorType; import javax.xml.bind.annotation.XmlElement; import javax.xml.bind.annotation.XmlRootElement; import javax.xml.bind.annotation.XmlSeeAlso; @XmlAccessorType(XmlAccessType.FIELD) @XmlRootElement(name=\"query\") @XmlSeeAlso({Channel.class}) public class Rss { @XmlElement private Wrapper<Channel> results; public Rss() {} public List<Channel> getChannels() { return results.getItems(); } }"},{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\unit\\DegreeUnit.java","file_content":"package com.github.fedy2.weather.data.unit; public enum DegreeUnit { FAHRENHEIT, CELSIUS; }"}]}}
{"project_id":127,"chunk_id":0,"content":{"main_file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\binding\\Constants.java","main_file_content":"package com.github.fedy2.weather.binding; public class Constants { public static final String YWEATHER_NAMESPACE = \"yweather\"; public static final String YWEATHER_NAMESPACE_URI = \"http: public static final String GEO_NAMESPACE_URI = \"http: }","dependencies":[]}}
{"project_id":127,"chunk_id":0,"content":{"main_file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\binding\\RSSParser.java","main_file_content":"package com.github.fedy2.weather.binding; import java.io.StringReader; import javax.xml.bind.JAXBContext; import javax.xml.bind.JAXBException; import javax.xml.bind.Unmarshaller; import com.github.fedy2.weather.data.Rss; public class RSSParser { private Unmarshaller unmarshaller; public RSSParser() throws JAXBException { JAXBContext context = JAXBContext.newInstance(Rss.class); unmarshaller = context.createUnmarshaller(); } public Rss parse(String xml) throws JAXBException { return (Rss)unmarshaller.unmarshal(new StringReader(xml)); } }","dependencies":[{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\Rss.java","file_content":"package com.github.fedy2.weather.data; import java.util.List; import javax.xml.bind.annotation.XmlAccessType; import javax.xml.bind.annotation.XmlAccessorType; import javax.xml.bind.annotation.XmlElement; import javax.xml.bind.annotation.XmlRootElement; import javax.xml.bind.annotation.XmlSeeAlso; @XmlAccessorType(XmlAccessType.FIELD) @XmlRootElement(name=\"query\") @XmlSeeAlso({Channel.class}) public class Rss { @XmlElement private Wrapper<Channel> results; public Rss() {} public List<Channel> getChannels() { return results.getItems(); } }"}]}}
{"project_id":127,"chunk_id":0,"content":{"main_file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\binding\\adapter\\BarometricPressureStateAdapter.java","main_file_content":"package com.github.fedy2.weather.binding.adapter; import javax.xml.bind.annotation.adapters.XmlAdapter; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import com.github.fedy2.weather.data.unit.BarometricPressureState; public class BarometricPressureStateAdapter extends XmlAdapter<Integer, BarometricPressureState> { private static final int FALLING = 2; private static final int RISING = 1; private static final int STEADY = 0; private Logger logger = LoggerFactory.getLogger(BarometricPressureStateAdapter.class); @Override public BarometricPressureState unmarshal(Integer v) throws Exception { switch (v) { case STEADY: return BarometricPressureState.STEADY; case RISING: return BarometricPressureState.RISING; case FALLING: return BarometricPressureState.FALLING; } logger.warn(\"Unknown barometric pressure state \\\"\"+v+\"\\\"\"); return null; } @Override public Integer marshal(BarometricPressureState v) throws Exception { switch (v) { case STEADY: return STEADY; case RISING: return RISING; case FALLING: return FALLING; default: return -1; } } }","dependencies":[{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\unit\\BarometricPressureState.java","file_content":"package com.github.fedy2.weather.data.unit; public enum BarometricPressureState { STEADY, RISING, FALLING; }"}]}}
{"project_id":127,"chunk_id":0,"content":{"main_file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\binding\\adapter\\DateAdapter.java","main_file_content":"package com.github.fedy2.weather.binding.adapter; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import javax.xml.bind.annotation.adapters.XmlAdapter; import java.text.SimpleDateFormat; import java.util.Date; import java.util.Locale; public class DateAdapter extends XmlAdapter<String, Date> { private Logger logger = LoggerFactory.getLogger(DateAdapter.class); private SimpleDateFormat dateFormat = new SimpleDateFormat(\"d MMM yyyy\", Locale.US); @Override public String marshal(Date v) throws Exception { return dateFormat.format(v); } @Override public Date unmarshal(String v) throws Exception { try { return dateFormat.parse(v); } catch (Exception e) { logger.warn(\"Unknown date format \\\"{}\\\"\", v); return null; } } }","dependencies":[]}}
{"project_id":127,"chunk_id":0,"content":{"main_file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\binding\\adapter\\DegreeUnitAdapter.java","main_file_content":"package com.github.fedy2.weather.binding.adapter; import javax.xml.bind.annotation.adapters.XmlAdapter; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import com.github.fedy2.weather.data.unit.DegreeUnit; public class DegreeUnitAdapter extends XmlAdapter<String, DegreeUnit> { private static final String CELSIUS = \"c\"; private static final String FAHRENHEIT = \"f\"; private Logger logger = LoggerFactory.getLogger(DegreeUnitAdapter.class); @Override public DegreeUnit unmarshal(String v) throws Exception { if (FAHRENHEIT.equalsIgnoreCase(v)) return DegreeUnit.FAHRENHEIT; if (CELSIUS.equalsIgnoreCase(v)) return DegreeUnit.CELSIUS; logger.warn(\"Unknown degree unit \\\"{}\\\"\", v); return null; } @Override public String marshal(DegreeUnit v) throws Exception { switch (v) { case CELSIUS: return CELSIUS; case FAHRENHEIT: return FAHRENHEIT; default: return \"\"; } } }","dependencies":[{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\unit\\DegreeUnit.java","file_content":"package com.github.fedy2.weather.data.unit; public enum DegreeUnit { FAHRENHEIT, CELSIUS; }"}]}}
{"project_id":127,"chunk_id":0,"content":{"main_file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\binding\\adapter\\DistanceUnitAdapter.java","main_file_content":"package com.github.fedy2.weather.binding.adapter; import javax.xml.bind.annotation.adapters.XmlAdapter; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import com.github.fedy2.weather.data.unit.DistanceUnit; public class DistanceUnitAdapter extends XmlAdapter<String, DistanceUnit> { private static final String MI = \"mi\"; private static final String KM = \"km\"; private Logger logger = LoggerFactory.getLogger(DistanceUnitAdapter.class); @Override public DistanceUnit unmarshal(String v) throws Exception { if (MI.equalsIgnoreCase(v)) return DistanceUnit.MI; if (KM.equalsIgnoreCase(v)) return DistanceUnit.KM; logger.warn(\"Unknown distance unit \\\"{}\\\"\", v); return null; } @Override public String marshal(DistanceUnit v) throws Exception { switch (v) { case KM: return KM; case MI: return MI; default: return \"\"; } } }","dependencies":[{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\unit\\DistanceUnit.java","file_content":"package com.github.fedy2.weather.data.unit; public enum DistanceUnit { MI, KM; }"}]}}
{"project_id":127,"chunk_id":0,"content":{"main_file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\binding\\adapter\\FloatAdapter.java","main_file_content":"package com.github.fedy2.weather.binding.adapter; import javax.xml.bind.annotation.adapters.XmlAdapter; public class FloatAdapter extends XmlAdapter<String, Float> { @Override public String marshal(Float v) throws Exception { return String.valueOf(v); } @Override public Float unmarshal(String v) throws Exception { if (v == null || v.isEmpty()) return null; return Float.parseFloat(v); } }","dependencies":[]}}
{"project_id":127,"chunk_id":0,"content":{"main_file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\binding\\adapter\\IntegerAdapter.java","main_file_content":"package com.github.fedy2.weather.binding.adapter; import javax.xml.bind.annotation.adapters.XmlAdapter; public class IntegerAdapter extends XmlAdapter<String, Integer> { @Override public String marshal(Integer v) throws Exception { return String.valueOf(v); } @Override public Integer unmarshal(String v) throws Exception { if (v == null || v.isEmpty()) return null; return Integer.parseInt(v); } }","dependencies":[]}}
{"project_id":127,"chunk_id":0,"content":{"main_file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\binding\\adapter\\PressureUnitAdapter.java","main_file_content":"package com.github.fedy2.weather.binding.adapter; import javax.xml.bind.annotation.adapters.XmlAdapter; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import com.github.fedy2.weather.data.unit.PressureUnit; public class PressureUnitAdapter extends XmlAdapter<String, PressureUnit> { private static final String MB = \"mb\"; private static final String IN = \"in\"; private Logger logger = LoggerFactory.getLogger(PressureUnitAdapter.class); @Override public PressureUnit unmarshal(String v) throws Exception { if (IN.equalsIgnoreCase(v)) return PressureUnit.IN; if (MB.equalsIgnoreCase(v)) return PressureUnit.MB; logger.warn(\"Unknown pressure unit \\\"{}\\\"\", v); return null; } @Override public String marshal(PressureUnit v) throws Exception { switch (v) { case IN: return IN; case MB: return MB; default: return \"\"; } } }","dependencies":[{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\unit\\PressureUnit.java","file_content":"package com.github.fedy2.weather.data.unit; public enum PressureUnit { IN, MB; }"}]}}
{"project_id":127,"chunk_id":0,"content":{"main_file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\binding\\adapter\\RFC822DateAdapter.java","main_file_content":"package com.github.fedy2.weather.binding.adapter; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import javax.xml.bind.annotation.adapters.XmlAdapter; import java.text.SimpleDateFormat; import java.util.Date; import java.util.Locale; public class RFC822DateAdapter extends XmlAdapter<String, Date> { private static final SimpleDateFormat rfc822DateFormats[] = new SimpleDateFormat[]{ new SimpleDateFormat(\"EEE, d MMM yy HH:mm:ss z\", Locale.US), new SimpleDateFormat(\"EEE, d MMM yy HH:mm z\", Locale.US), new SimpleDateFormat(\"EEE, d MMM yyyy HH:mm:ss z\", Locale.US), new SimpleDateFormat(\"EEE, d MMM yyyy HH:mm z\", Locale.US), new SimpleDateFormat(\"d MMM yy HH:mm z\", Locale.US), new SimpleDateFormat(\"d MMM yy HH:mm:ss z\", Locale.US), new SimpleDateFormat(\"d MMM yyyy HH:mm z\", Locale.US), new SimpleDateFormat(\"d MMM yyyy HH:mm:ss z\", Locale.US), new SimpleDateFormat(\"EEE, d MMM yyyy hh:mm a z\", Locale.US)}; private Logger logger = LoggerFactory.getLogger(RFC822DateAdapter.class); private SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE, d MMM yy HH:mm:ss z\", Locale.US); @Override public String marshal(Date v) throws Exception { return dateFormat.format(v); } @Override public Date unmarshal(String v) throws Exception { for (SimpleDateFormat format : rfc822DateFormats) { try { return format.parse(v); } catch (Exception e) { } } logger.warn(\"Unknown date format \\\"{}\\\"\", v); return null; } }","dependencies":[]}}
{"project_id":127,"chunk_id":0,"content":{"main_file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\binding\\adapter\\SpeedUnitAdapter.java","main_file_content":"package com.github.fedy2.weather.binding.adapter; import javax.xml.bind.annotation.adapters.XmlAdapter; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import com.github.fedy2.weather.data.unit.SpeedUnit; public class SpeedUnitAdapter extends XmlAdapter<String, SpeedUnit> { private static final String KMH = \"km/h\"; private static final String MPH = \"mph\"; private Logger logger = LoggerFactory.getLogger(SpeedUnitAdapter.class); @Override public SpeedUnit unmarshal(String v) throws Exception { if (MPH.equalsIgnoreCase(v)) return SpeedUnit.MPH; if (KMH.equalsIgnoreCase(v)) return SpeedUnit.KMH; logger.warn(\"Unknown speed unit \\\"{}\\\"\", v); return null; } @Override public String marshal(SpeedUnit v) throws Exception { switch (v) { case KMH: return KMH; case MPH: return MPH; default: return \"\"; } } }","dependencies":[{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\unit\\SpeedUnit.java","file_content":"package com.github.fedy2.weather.data.unit; public enum SpeedUnit { MPH, KMH; }"}]}}
{"project_id":127,"chunk_id":0,"content":{"main_file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\binding\\adapter\\TimeAdapter.java","main_file_content":"package com.github.fedy2.weather.binding.adapter; import java.util.regex.Matcher; import java.util.regex.Pattern; import javax.xml.bind.annotation.adapters.XmlAdapter; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import com.github.fedy2.weather.data.unit.Time; import com.github.fedy2.weather.data.unit.TimeConvention; public class TimeAdapter extends XmlAdapter<String, Time> { private static final String TIME_PATTERN = \"(\\\\d?\\\\d):(\\\\d?\\\\d)\\\\s(am|pm)\"; private static final Pattern PATTERN = Pattern.compile(TIME_PATTERN); private Logger logger = LoggerFactory.getLogger(TimeAdapter.class); @Override public Time unmarshal(String v) throws Exception { if (v != null) { Matcher matcher = PATTERN.matcher(v); if (matcher.groupCount()==3) { matcher.find(); try { String hoursToken = matcher.group(1); int hours = Integer.parseInt(hoursToken); String minutesToken = matcher.group(2); int minutes = Integer.parseInt(minutesToken); String conventionToken = matcher.group(3); TimeConvention convention = TimeConvention.valueOf(conventionToken.toUpperCase()); return new Time(hours, minutes, convention); } catch(NumberFormatException nfe) { logger.warn(\"Error converting time value \"+v, nfe); } } } logger.warn(\"Unparsable time value \\\"{}\\\"\", v); return null; } @Override public String marshal(Time v) throws Exception { StringBuilder sb = new StringBuilder(); sb.append(v.getHours()); sb.append(':'); sb.append(v.getMinutes()); sb.append(' '); sb.append(v.getConvention().toString().toLowerCase()); return sb.toString(); } }","dependencies":[{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\unit\\Time.java","file_content":"package com.github.fedy2.weather.data.unit; public class Time { private int hours; private int minutes; private TimeConvention convention; public Time(int hours, int minutes, TimeConvention convention) { this.hours = hours; this.minutes = minutes; this.convention = convention; } public int getHours() { return hours; } public int getMinutes() { return minutes; } public TimeConvention getConvention() { return convention; } @Override public String toString() { StringBuilder builder = new StringBuilder(); builder.append(\"Time [hours=\"); builder.append(hours); builder.append(\", minutes=\"); builder.append(minutes); builder.append(\", convention=\"); builder.append(convention); builder.append(\"]\"); return builder.toString(); } }"},{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\unit\\TimeConvention.java","file_content":"package com.github.fedy2.weather.data.unit; public enum TimeConvention { AM, PM; }"}]}}
{"project_id":127,"chunk_id":0,"content":{"main_file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\binding\\adapter\\WeekDayAdapter.java","main_file_content":"package com.github.fedy2.weather.binding.adapter; import javax.xml.bind.annotation.adapters.XmlAdapter; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import com.github.fedy2.weather.data.unit.WeekDay; public class WeekDayAdapter extends XmlAdapter<String, WeekDay> { private Logger logger = LoggerFactory.getLogger(WeekDayAdapter.class); @Override public WeekDay unmarshal(String v) throws Exception { try { return WeekDay.valueOf(v.toUpperCase()); } catch (Exception e) { logger.warn(\"Unknow week day \\\"{}\\\"\", v); } return null; } @Override public String marshal(WeekDay v) throws Exception { return v!=null?v.toString():null; } }","dependencies":[{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\unit\\WeekDay.java","file_content":"package com.github.fedy2.weather.data.unit; public enum WeekDay { MON, TUE, WED, THU, FRI, SAT, SUN; }"}]}}
{"project_id":127,"chunk_id":0,"content":{"main_file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\Astronomy.java","main_file_content":"package com.github.fedy2.weather.data; import javax.xml.bind.annotation.XmlAttribute; import javax.xml.bind.annotation.XmlRootElement; import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter; import com.github.fedy2.weather.binding.adapter.TimeAdapter; import com.github.fedy2.weather.data.unit.Time; @XmlRootElement public class Astronomy { @XmlAttribute @XmlJavaTypeAdapter(TimeAdapter.class) private Time sunrise; @XmlAttribute @XmlJavaTypeAdapter(TimeAdapter.class) private Time sunset; public Astronomy() {} public Astronomy(Time sunrise, Time sunset) { this.sunrise = sunrise; this.sunset = sunset; } public Time getSunrise() { return sunrise; } public Time getSunset() { return sunset; } @Override public String toString() { StringBuilder builder = new StringBuilder(); builder.append(\"Astronomy [sunrise=\"); builder.append(sunrise); builder.append(\", sunset=\"); builder.append(sunset); builder.append(\"]\"); return builder.toString(); } }","dependencies":[{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\binding\\adapter\\TimeAdapter.java","file_content":"package com.github.fedy2.weather.binding.adapter; import java.util.regex.Matcher; import java.util.regex.Pattern; import javax.xml.bind.annotation.adapters.XmlAdapter; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import com.github.fedy2.weather.data.unit.Time; import com.github.fedy2.weather.data.unit.TimeConvention; public class TimeAdapter extends XmlAdapter<String, Time> { private static final String TIME_PATTERN = \"(\\\\d?\\\\d):(\\\\d?\\\\d)\\\\s(am|pm)\"; private static final Pattern PATTERN = Pattern.compile(TIME_PATTERN); private Logger logger = LoggerFactory.getLogger(TimeAdapter.class); @Override public Time unmarshal(String v) throws Exception { if (v != null) { Matcher matcher = PATTERN.matcher(v); if (matcher.groupCount()==3) { matcher.find(); try { String hoursToken = matcher.group(1); int hours = Integer.parseInt(hoursToken); String minutesToken = matcher.group(2); int minutes = Integer.parseInt(minutesToken); String conventionToken = matcher.group(3); TimeConvention convention = TimeConvention.valueOf(conventionToken.toUpperCase()); return new Time(hours, minutes, convention); } catch(NumberFormatException nfe) { logger.warn(\"Error converting time value \"+v, nfe); } } } logger.warn(\"Unparsable time value \\\"{}\\\"\", v); return null; } @Override public String marshal(Time v) throws Exception { StringBuilder sb = new StringBuilder(); sb.append(v.getHours()); sb.append(':'); sb.append(v.getMinutes()); sb.append(' '); sb.append(v.getConvention().toString().toLowerCase()); return sb.toString(); } }"},{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\unit\\Time.java","file_content":"package com.github.fedy2.weather.data.unit; public class Time { private int hours; private int minutes; private TimeConvention convention; public Time(int hours, int minutes, TimeConvention convention) { this.hours = hours; this.minutes = minutes; this.convention = convention; } public int getHours() { return hours; } public int getMinutes() { return minutes; } public TimeConvention getConvention() { return convention; } @Override public String toString() { StringBuilder builder = new StringBuilder(); builder.append(\"Time [hours=\"); builder.append(hours); builder.append(\", minutes=\"); builder.append(minutes); builder.append(\", convention=\"); builder.append(convention); builder.append(\"]\"); return builder.toString(); } }"}]}}
{"project_id":127,"chunk_id":0,"content":{"main_file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\Atmosphere.java","main_file_content":"package com.github.fedy2.weather.data; import javax.xml.bind.annotation.XmlAttribute; import javax.xml.bind.annotation.XmlRootElement; import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter; import com.github.fedy2.weather.binding.adapter.BarometricPressureStateAdapter; import com.github.fedy2.weather.binding.adapter.FloatAdapter; import com.github.fedy2.weather.binding.adapter.IntegerAdapter; import com.github.fedy2.weather.data.unit.BarometricPressureState; @XmlRootElement public class Atmosphere { @XmlAttribute(required=false) @XmlJavaTypeAdapter(IntegerAdapter.class) private Integer humidity; @XmlAttribute(required=false) @XmlJavaTypeAdapter(FloatAdapter.class) private Float visibility; @XmlAttribute(required=false) @XmlJavaTypeAdapter(FloatAdapter.class) private Float pressure; @XmlAttribute @XmlJavaTypeAdapter(BarometricPressureStateAdapter.class) private BarometricPressureState rising; public Atmosphere() {} public Atmosphere(Integer humidity, Float visibility, Float pressure, BarometricPressureState rising) { this.humidity = humidity; this.visibility = visibility; this.pressure = pressure; this.rising = rising; } public Integer getHumidity() { return humidity; } public Float getVisibility() { return visibility; } public Float getPressure() { return pressure; } public BarometricPressureState getRising() { return rising; } @Override public String toString() { StringBuilder builder = new StringBuilder(); builder.append(\"Atmosphere [humidity=\"); builder.append(humidity); builder.append(\", visibility=\"); builder.append(visibility); builder.append(\", pressure=\"); builder.append(pressure); builder.append(\", rising=\"); builder.append(rising); builder.append(\"]\"); return builder.toString(); } }","dependencies":[{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\binding\\adapter\\BarometricPressureStateAdapter.java","file_content":"package com.github.fedy2.weather.binding.adapter; import javax.xml.bind.annotation.adapters.XmlAdapter; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import com.github.fedy2.weather.data.unit.BarometricPressureState; public class BarometricPressureStateAdapter extends XmlAdapter<Integer, BarometricPressureState> { private static final int FALLING = 2; private static final int RISING = 1; private static final int STEADY = 0; private Logger logger = LoggerFactory.getLogger(BarometricPressureStateAdapter.class); @Override public BarometricPressureState unmarshal(Integer v) throws Exception { switch (v) { case STEADY: return BarometricPressureState.STEADY; case RISING: return BarometricPressureState.RISING; case FALLING: return BarometricPressureState.FALLING; } logger.warn(\"Unknown barometric pressure state \\\"\"+v+\"\\\"\"); return null; } @Override public Integer marshal(BarometricPressureState v) throws Exception { switch (v) { case STEADY: return STEADY; case RISING: return RISING; case FALLING: return FALLING; default: return -1; } } }"},{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\binding\\adapter\\FloatAdapter.java","file_content":"package com.github.fedy2.weather.binding.adapter; import javax.xml.bind.annotation.adapters.XmlAdapter; public class FloatAdapter extends XmlAdapter<String, Float> { @Override public String marshal(Float v) throws Exception { return String.valueOf(v); } @Override public Float unmarshal(String v) throws Exception { if (v == null || v.isEmpty()) return null; return Float.parseFloat(v); } }"},{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\binding\\adapter\\IntegerAdapter.java","file_content":"package com.github.fedy2.weather.binding.adapter; import javax.xml.bind.annotation.adapters.XmlAdapter; public class IntegerAdapter extends XmlAdapter<String, Integer> { @Override public String marshal(Integer v) throws Exception { return String.valueOf(v); } @Override public Integer unmarshal(String v) throws Exception { if (v == null || v.isEmpty()) return null; return Integer.parseInt(v); } }"},{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\unit\\BarometricPressureState.java","file_content":"package com.github.fedy2.weather.data.unit; public enum BarometricPressureState { STEADY, RISING, FALLING; }"}]}}
{"project_id":127,"chunk_id":0,"content":{"main_file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\Channel.java","main_file_content":"package com.github.fedy2.weather.data; import java.util.Date; import javax.xml.bind.annotation.XmlAccessType; import javax.xml.bind.annotation.XmlAccessorType; import javax.xml.bind.annotation.XmlElement; import javax.xml.bind.annotation.XmlRootElement; import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter; import com.github.fedy2.weather.binding.Constants; import com.github.fedy2.weather.binding.adapter.RFC822DateAdapter; @XmlAccessorType(XmlAccessType.FIELD) @XmlRootElement public class Channel { @XmlElement private String title; @XmlElement private String link; @XmlElement private String language; @XmlElement private String description; @XmlElement @XmlJavaTypeAdapter(RFC822DateAdapter.class) private Date lastBuildDate; @XmlElement private long ttl; @XmlElement(namespace=Constants.YWEATHER_NAMESPACE_URI) private Location location; @XmlElement(namespace=Constants.YWEATHER_NAMESPACE_URI) private Units units; @XmlElement(namespace=Constants.YWEATHER_NAMESPACE_URI) private Wind wind; @XmlElement(namespace=Constants.YWEATHER_NAMESPACE_URI) private Atmosphere atmosphere; @XmlElement(namespace=Constants.YWEATHER_NAMESPACE_URI) private Astronomy astronomy; @XmlElement private Image image; @XmlElement private Item item; public Channel() {} public String getTitle() { return title; } public String getLink() { return link; } public String getLanguage() { return language; } public String getDescription() { return description; } public Date getLastBuildDate() { return lastBuildDate; } public long getTtl() { return ttl; } public Location getLocation() { return location; } public Units getUnits() { return units; } public Wind getWind() { return wind; } public Atmosphere getAtmosphere() { return atmosphere; } public Astronomy getAstronomy() { return astronomy; } public Image getImage() { return image; } public Item getItem() { return item; } @Override public String toString() { StringBuilder builder = new StringBuilder(); builder.append(\"Channel [title=\"); builder.append(title); builder.append(\", link=\"); builder.append(link); builder.append(\", language=\"); builder.append(language); builder.append(\", description=\"); builder.append(description); builder.append(\", lastBuildDate=\"); builder.append(lastBuildDate); builder.append(\", ttl=\"); builder.append(ttl); builder.append(\", location=\"); builder.append(location); builder.append(\", units=\"); builder.append(units); builder.append(\", wind=\"); builder.append(wind); builder.append(\", atmosphere=\"); builder.append(atmosphere); builder.append(\", astronomy=\"); builder.append(astronomy); builder.append(\", image=\"); builder.append(image); builder.append(\", item=\"); builder.append(item); builder.append(\"]\"); return builder.toString(); } }","dependencies":[{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\binding\\adapter\\RFC822DateAdapter.java","file_content":"package com.github.fedy2.weather.binding.adapter; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import javax.xml.bind.annotation.adapters.XmlAdapter; import java.text.SimpleDateFormat; import java.util.Date; import java.util.Locale; public class RFC822DateAdapter extends XmlAdapter<String, Date> { private static final SimpleDateFormat rfc822DateFormats[] = new SimpleDateFormat[]{ new SimpleDateFormat(\"EEE, d MMM yy HH:mm:ss z\", Locale.US), new SimpleDateFormat(\"EEE, d MMM yy HH:mm z\", Locale.US), new SimpleDateFormat(\"EEE, d MMM yyyy HH:mm:ss z\", Locale.US), new SimpleDateFormat(\"EEE, d MMM yyyy HH:mm z\", Locale.US), new SimpleDateFormat(\"d MMM yy HH:mm z\", Locale.US), new SimpleDateFormat(\"d MMM yy HH:mm:ss z\", Locale.US), new SimpleDateFormat(\"d MMM yyyy HH:mm z\", Locale.US), new SimpleDateFormat(\"d MMM yyyy HH:mm:ss z\", Locale.US), new SimpleDateFormat(\"EEE, d MMM yyyy hh:mm a z\", Locale.US)}; private Logger logger = LoggerFactory.getLogger(RFC822DateAdapter.class); private SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE, d MMM yy HH:mm:ss z\", Locale.US); @Override public String marshal(Date v) throws Exception { return dateFormat.format(v); } @Override public Date unmarshal(String v) throws Exception { for (SimpleDateFormat format : rfc822DateFormats) { try { return format.parse(v); } catch (Exception e) { } } logger.warn(\"Unknown date format \\\"{}\\\"\", v); return null; } }"},{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\Astronomy.java","file_content":"package com.github.fedy2.weather.data; import javax.xml.bind.annotation.XmlAttribute; import javax.xml.bind.annotation.XmlRootElement; import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter; import com.github.fedy2.weather.binding.adapter.TimeAdapter; import com.github.fedy2.weather.data.unit.Time; @XmlRootElement public class Astronomy { @XmlAttribute @XmlJavaTypeAdapter(TimeAdapter.class) private Time sunrise; @XmlAttribute @XmlJavaTypeAdapter(TimeAdapter.class) private Time sunset; public Astronomy() {} public Astronomy(Time sunrise, Time sunset) { this.sunrise = sunrise; this.sunset = sunset; } public Time getSunrise() { return sunrise; } public Time getSunset() { return sunset; } @Override public String toString() { StringBuilder builder = new StringBuilder(); builder.append(\"Astronomy [sunrise=\"); builder.append(sunrise); builder.append(\", sunset=\"); builder.append(sunset); builder.append(\"]\"); return builder.toString(); } }"},{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\Atmosphere.java","file_content":"package com.github.fedy2.weather.data; import javax.xml.bind.annotation.XmlAttribute; import javax.xml.bind.annotation.XmlRootElement; import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter; import com.github.fedy2.weather.binding.adapter.BarometricPressureStateAdapter; import com.github.fedy2.weather.binding.adapter.FloatAdapter; import com.github.fedy2.weather.binding.adapter.IntegerAdapter; import com.github.fedy2.weather.data.unit.BarometricPressureState; @XmlRootElement public class Atmosphere { @XmlAttribute(required=false) @XmlJavaTypeAdapter(IntegerAdapter.class) private Integer humidity; @XmlAttribute(required=false) @XmlJavaTypeAdapter(FloatAdapter.class) private Float visibility; @XmlAttribute(required=false) @XmlJavaTypeAdapter(FloatAdapter.class) private Float pressure; @XmlAttribute @XmlJavaTypeAdapter(BarometricPressureStateAdapter.class) private BarometricPressureState rising; public Atmosphere() {} public Atmosphere(Integer humidity, Float visibility, Float pressure, BarometricPressureState rising) { this.humidity = humidity; this.visibility = visibility; this.pressure = pressure; this.rising = rising; } public Integer getHumidity() { return humidity; } public Float getVisibility() { return visibility; } public Float getPressure() { return pressure; } public BarometricPressureState getRising() { return rising; } @Override public String toString() { StringBuilder builder = new StringBuilder(); builder.append(\"Atmosphere [humidity=\"); builder.append(humidity); builder.append(\", visibility=\"); builder.append(visibility); builder.append(\", pressure=\"); builder.append(pressure); builder.append(\", rising=\"); builder.append(rising); builder.append(\"]\"); return builder.toString(); } }"},{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\Image.java","file_content":"package com.github.fedy2.weather.data; import javax.xml.bind.annotation.XmlElement; import javax.xml.bind.annotation.XmlRootElement; @XmlRootElement public class Image { @XmlElement private String title; @XmlElement private String link; @XmlElement private String url; @XmlElement private int width; @XmlElement private int height; public Image() {} public Image(String title, String link, String url, int width, int height) { this.title = title; this.link = link; this.url = url; this.width = width; this.height = height; } public String getTitle() { return title; } public String getLink() { return link; } public String getUrl() { return url; } public int getWidth() { return width; } public int getHeight() { return height; } @Override public String toString() { StringBuilder builder = new StringBuilder(); builder.append(\"Image [title=\"); builder.append(title); builder.append(\", link=\"); builder.append(link); builder.append(\", url=\"); builder.append(url); builder.append(\", width=\"); builder.append(width); builder.append(\", height=\"); builder.append(height); builder.append(\"]\"); return builder.toString(); } }"},{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\Item.java","file_content":"package com.github.fedy2.weather.data; import java.util.Date; import java.util.List; import javax.xml.bind.annotation.XmlElement; import javax.xml.bind.annotation.XmlRootElement; import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter; import com.github.fedy2.weather.binding.Constants; import com.github.fedy2.weather.binding.adapter.RFC822DateAdapter; @XmlRootElement public class Item { @XmlElement private String title; @XmlElement private String link; @XmlElement private String description; @XmlElement private String guid; @XmlElement @XmlJavaTypeAdapter(RFC822DateAdapter.class) private Date pubDate; @XmlElement(namespace=Constants.GEO_NAMESPACE_URI, name=\"lat\") private float geoLat; @XmlElement(namespace=Constants.GEO_NAMESPACE_URI, name=\"long\") private float geoLong; @XmlElement(namespace=Constants.YWEATHER_NAMESPACE_URI) private Condition condition; @XmlElement(namespace=Constants.YWEATHER_NAMESPACE_URI, name=\"forecast\") private List<Forecast> forecasts; public Item() {} public String getTitle() { return title; } public String getLink() { return link; } public String getDescription() { return description; } public String getGuid() { return guid; } public Date getPubDate() { return pubDate; } public float getGeoLat() { return geoLat; } public float getGeoLong() { return geoLong; } public Condition getCondition() { return condition; } public List<Forecast> getForecasts() { return forecasts; } @Override public String toString() { StringBuilder builder = new StringBuilder(); builder.append(\"Item [title=\"); builder.append(title); builder.append(\", link=\"); builder.append(link); builder.append(\", description=\"); builder.append(description); builder.append(\", guid=\"); builder.append(guid); builder.append(\", pubDate=\"); builder.append(pubDate); builder.append(\", geoLat=\"); builder.append(geoLat); builder.append(\", geoLong=\"); builder.append(geoLong); builder.append(\", condition=\"); builder.append(condition); builder.append(\", forecasts=\"); builder.append(forecasts); builder.append(\"]\"); return builder.toString(); } }"},{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\Location.java","file_content":"package com.github.fedy2.weather.data; import javax.xml.bind.annotation.*; @XmlRootElement public class Location { @XmlAttribute private String city; @XmlAttribute private String region; @XmlAttribute private String country; public Location(){} public Location(String city, String region, String country) { this.city = city; this.region = region; this.country = country; } public String getCity() { return city; } public String getRegion() { return region; } public String getCountry() { return country; } @Override public String toString() { StringBuilder builder = new StringBuilder(); builder.append(\"Location [city=\"); builder.append(city); builder.append(\", region=\"); builder.append(region); builder.append(\", country=\"); builder.append(country); builder.append(\"]\"); return builder.toString(); } }"},{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\Units.java","file_content":"package com.github.fedy2.weather.data; import javax.xml.bind.annotation.XmlAttribute; import javax.xml.bind.annotation.XmlRootElement; import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter; import com.github.fedy2.weather.binding.adapter.DegreeUnitAdapter; import com.github.fedy2.weather.binding.adapter.DistanceUnitAdapter; import com.github.fedy2.weather.binding.adapter.PressureUnitAdapter; import com.github.fedy2.weather.binding.adapter.SpeedUnitAdapter; import com.github.fedy2.weather.data.unit.DegreeUnit; import com.github.fedy2.weather.data.unit.DistanceUnit; import com.github.fedy2.weather.data.unit.PressureUnit; import com.github.fedy2.weather.data.unit.SpeedUnit; @XmlRootElement public class Units { @XmlAttribute @XmlJavaTypeAdapter(DegreeUnitAdapter.class) private DegreeUnit temperature; @XmlAttribute @XmlJavaTypeAdapter(DistanceUnitAdapter.class) private DistanceUnit distance; @XmlAttribute @XmlJavaTypeAdapter(PressureUnitAdapter.class) private PressureUnit pressure; @XmlAttribute @XmlJavaTypeAdapter(SpeedUnitAdapter.class) private SpeedUnit speed; public Units(){} public Units(DegreeUnit temperature, DistanceUnit distance, PressureUnit pressure, SpeedUnit speed) { this.temperature = temperature; this.distance = distance; this.pressure = pressure; this.speed = speed; } public DegreeUnit getTemperature() { return temperature; } public DistanceUnit getDistance() { return distance; } public PressureUnit getPressure() { return pressure; } public SpeedUnit getSpeed() { return speed; } @Override public String toString() { StringBuilder builder = new StringBuilder(); builder.append(\"Units [temperature=\"); builder.append(temperature); builder.append(\", distance=\"); builder.append(distance); builder.append(\", pressure=\"); builder.append(pressure); builder.append(\", speed=\"); builder.append(speed); builder.append(\"]\"); return builder.toString(); } }"},{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\Wind.java","file_content":"package com.github.fedy2.weather.data; import javax.xml.bind.annotation.XmlAttribute; import javax.xml.bind.annotation.XmlRootElement; import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter; import com.github.fedy2.weather.binding.adapter.FloatAdapter; import com.github.fedy2.weather.binding.adapter.IntegerAdapter; @XmlRootElement public class Wind { @XmlAttribute(required=false) @XmlJavaTypeAdapter(IntegerAdapter.class) private Integer chill; @XmlAttribute(required=false) @XmlJavaTypeAdapter(IntegerAdapter.class) private Integer direction; @XmlAttribute(required=false) @XmlJavaTypeAdapter(FloatAdapter.class) private Float speed; public Wind() {} public Wind(Integer chill, Integer direction, Float speed) { this.chill = chill; this.direction = direction; this.speed = speed; } public Integer getChill() { return chill; } public Integer getDirection() { return direction; } public Float getSpeed() { return speed; } @Override public String toString() { StringBuilder builder = new StringBuilder(); builder.append(\"Wind [chill=\"); builder.append(chill); builder.append(\", direction=\"); builder.append(direction); builder.append(\", speed=\"); builder.append(speed); builder.append(\"]\"); return builder.toString(); } }"}]}}
{"project_id":127,"chunk_id":0,"content":{"main_file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\Condition.java","main_file_content":"package com.github.fedy2.weather.data; import java.util.Date; import javax.xml.bind.annotation.XmlAttribute; import javax.xml.bind.annotation.XmlRootElement; import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter; import com.github.fedy2.weather.binding.adapter.RFC822DateAdapter; @XmlRootElement public class Condition { @XmlAttribute private String text; @XmlAttribute private int code; @XmlAttribute private int temp; @XmlAttribute @XmlJavaTypeAdapter(RFC822DateAdapter.class) private Date date; public Condition() {} public Condition(String text, int code, int temp, Date date) { this.text = text; this.code = code; this.temp = temp; this.date = date; } public String getText() { return text; } public int getCode() { return code; } public int getTemp() { return temp; } public Date getDate() { return date; } @Override public String toString() { StringBuilder builder = new StringBuilder(); builder.append(\"Condition [text=\"); builder.append(text); builder.append(\", code=\"); builder.append(code); builder.append(\", temp=\"); builder.append(temp); builder.append(\", date=\"); builder.append(date); builder.append(\"]\"); return builder.toString(); } }","dependencies":[{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\binding\\adapter\\RFC822DateAdapter.java","file_content":"package com.github.fedy2.weather.binding.adapter; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import javax.xml.bind.annotation.adapters.XmlAdapter; import java.text.SimpleDateFormat; import java.util.Date; import java.util.Locale; public class RFC822DateAdapter extends XmlAdapter<String, Date> { private static final SimpleDateFormat rfc822DateFormats[] = new SimpleDateFormat[]{ new SimpleDateFormat(\"EEE, d MMM yy HH:mm:ss z\", Locale.US), new SimpleDateFormat(\"EEE, d MMM yy HH:mm z\", Locale.US), new SimpleDateFormat(\"EEE, d MMM yyyy HH:mm:ss z\", Locale.US), new SimpleDateFormat(\"EEE, d MMM yyyy HH:mm z\", Locale.US), new SimpleDateFormat(\"d MMM yy HH:mm z\", Locale.US), new SimpleDateFormat(\"d MMM yy HH:mm:ss z\", Locale.US), new SimpleDateFormat(\"d MMM yyyy HH:mm z\", Locale.US), new SimpleDateFormat(\"d MMM yyyy HH:mm:ss z\", Locale.US), new SimpleDateFormat(\"EEE, d MMM yyyy hh:mm a z\", Locale.US)}; private Logger logger = LoggerFactory.getLogger(RFC822DateAdapter.class); private SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE, d MMM yy HH:mm:ss z\", Locale.US); @Override public String marshal(Date v) throws Exception { return dateFormat.format(v); } @Override public Date unmarshal(String v) throws Exception { for (SimpleDateFormat format : rfc822DateFormats) { try { return format.parse(v); } catch (Exception e) { } } logger.warn(\"Unknown date format \\\"{}\\\"\", v); return null; } }"}]}}
{"project_id":127,"chunk_id":0,"content":{"main_file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\Forecast.java","main_file_content":"package com.github.fedy2.weather.data; import java.util.Date; import javax.xml.bind.annotation.XmlAttribute; import javax.xml.bind.annotation.XmlRootElement; import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter; import com.github.fedy2.weather.binding.adapter.DateAdapter; import com.github.fedy2.weather.binding.adapter.WeekDayAdapter; import com.github.fedy2.weather.data.unit.WeekDay; @XmlRootElement public class Forecast { @XmlAttribute @XmlJavaTypeAdapter(WeekDayAdapter.class) private WeekDay day; @XmlAttribute @XmlJavaTypeAdapter(DateAdapter.class) private Date date; @XmlAttribute private int low; @XmlAttribute private int high; @XmlAttribute private String text; @XmlAttribute private int code; public Forecast(){} public Forecast(WeekDay day, Date date, int low, int high, String text, int code) { this.day = day; this.date = date; this.low = low; this.high = high; this.text = text; this.code = code; } public WeekDay getDay() { return day; } public Date getDate() { return date; } public int getLow() { return low; } public int getHigh() { return high; } public String getText() { return text; } public int getCode() { return code; } @Override public String toString() { StringBuilder builder = new StringBuilder(); builder.append(\"Forecast [day=\"); builder.append(day); builder.append(\", date=\"); builder.append(date); builder.append(\", low=\"); builder.append(low); builder.append(\", high=\"); builder.append(high); builder.append(\", text=\"); builder.append(text); builder.append(\", code=\"); builder.append(code); builder.append(\"]\"); return builder.toString(); } }","dependencies":[{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\binding\\adapter\\DateAdapter.java","file_content":"package com.github.fedy2.weather.binding.adapter; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import javax.xml.bind.annotation.adapters.XmlAdapter; import java.text.SimpleDateFormat; import java.util.Date; import java.util.Locale; public class DateAdapter extends XmlAdapter<String, Date> { private Logger logger = LoggerFactory.getLogger(DateAdapter.class); private SimpleDateFormat dateFormat = new SimpleDateFormat(\"d MMM yyyy\", Locale.US); @Override public String marshal(Date v) throws Exception { return dateFormat.format(v); } @Override public Date unmarshal(String v) throws Exception { try { return dateFormat.parse(v); } catch (Exception e) { logger.warn(\"Unknown date format \\\"{}\\\"\", v); return null; } } }"},{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\binding\\adapter\\WeekDayAdapter.java","file_content":"package com.github.fedy2.weather.binding.adapter; import javax.xml.bind.annotation.adapters.XmlAdapter; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import com.github.fedy2.weather.data.unit.WeekDay; public class WeekDayAdapter extends XmlAdapter<String, WeekDay> { private Logger logger = LoggerFactory.getLogger(WeekDayAdapter.class); @Override public WeekDay unmarshal(String v) throws Exception { try { return WeekDay.valueOf(v.toUpperCase()); } catch (Exception e) { logger.warn(\"Unknow week day \\\"{}\\\"\", v); } return null; } @Override public String marshal(WeekDay v) throws Exception { return v!=null?v.toString():null; } }"},{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\unit\\WeekDay.java","file_content":"package com.github.fedy2.weather.data.unit; public enum WeekDay { MON, TUE, WED, THU, FRI, SAT, SUN; }"}]}}
{"project_id":127,"chunk_id":0,"content":{"main_file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\Image.java","main_file_content":"package com.github.fedy2.weather.data; import javax.xml.bind.annotation.XmlElement; import javax.xml.bind.annotation.XmlRootElement; @XmlRootElement public class Image { @XmlElement private String title; @XmlElement private String link; @XmlElement private String url; @XmlElement private int width; @XmlElement private int height; public Image() {} public Image(String title, String link, String url, int width, int height) { this.title = title; this.link = link; this.url = url; this.width = width; this.height = height; } public String getTitle() { return title; } public String getLink() { return link; } public String getUrl() { return url; } public int getWidth() { return width; } public int getHeight() { return height; } @Override public String toString() { StringBuilder builder = new StringBuilder(); builder.append(\"Image [title=\"); builder.append(title); builder.append(\", link=\"); builder.append(link); builder.append(\", url=\"); builder.append(url); builder.append(\", width=\"); builder.append(width); builder.append(\", height=\"); builder.append(height); builder.append(\"]\"); return builder.toString(); } }","dependencies":[]}}
{"project_id":127,"chunk_id":0,"content":{"main_file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\Item.java","main_file_content":"package com.github.fedy2.weather.data; import java.util.Date; import java.util.List; import javax.xml.bind.annotation.XmlElement; import javax.xml.bind.annotation.XmlRootElement; import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter; import com.github.fedy2.weather.binding.Constants; import com.github.fedy2.weather.binding.adapter.RFC822DateAdapter; @XmlRootElement public class Item { @XmlElement private String title; @XmlElement private String link; @XmlElement private String description; @XmlElement private String guid; @XmlElement @XmlJavaTypeAdapter(RFC822DateAdapter.class) private Date pubDate; @XmlElement(namespace=Constants.GEO_NAMESPACE_URI, name=\"lat\") private float geoLat; @XmlElement(namespace=Constants.GEO_NAMESPACE_URI, name=\"long\") private float geoLong; @XmlElement(namespace=Constants.YWEATHER_NAMESPACE_URI) private Condition condition; @XmlElement(namespace=Constants.YWEATHER_NAMESPACE_URI, name=\"forecast\") private List<Forecast> forecasts; public Item() {} public String getTitle() { return title; } public String getLink() { return link; } public String getDescription() { return description; } public String getGuid() { return guid; } public Date getPubDate() { return pubDate; } public float getGeoLat() { return geoLat; } public float getGeoLong() { return geoLong; } public Condition getCondition() { return condition; } public List<Forecast> getForecasts() { return forecasts; } @Override public String toString() { StringBuilder builder = new StringBuilder(); builder.append(\"Item [title=\"); builder.append(title); builder.append(\", link=\"); builder.append(link); builder.append(\", description=\"); builder.append(description); builder.append(\", guid=\"); builder.append(guid); builder.append(\", pubDate=\"); builder.append(pubDate); builder.append(\", geoLat=\"); builder.append(geoLat); builder.append(\", geoLong=\"); builder.append(geoLong); builder.append(\", condition=\"); builder.append(condition); builder.append(\", forecasts=\"); builder.append(forecasts); builder.append(\"]\"); return builder.toString(); } }","dependencies":[{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\binding\\adapter\\RFC822DateAdapter.java","file_content":"package com.github.fedy2.weather.binding.adapter; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import javax.xml.bind.annotation.adapters.XmlAdapter; import java.text.SimpleDateFormat; import java.util.Date; import java.util.Locale; public class RFC822DateAdapter extends XmlAdapter<String, Date> { private static final SimpleDateFormat rfc822DateFormats[] = new SimpleDateFormat[]{ new SimpleDateFormat(\"EEE, d MMM yy HH:mm:ss z\", Locale.US), new SimpleDateFormat(\"EEE, d MMM yy HH:mm z\", Locale.US), new SimpleDateFormat(\"EEE, d MMM yyyy HH:mm:ss z\", Locale.US), new SimpleDateFormat(\"EEE, d MMM yyyy HH:mm z\", Locale.US), new SimpleDateFormat(\"d MMM yy HH:mm z\", Locale.US), new SimpleDateFormat(\"d MMM yy HH:mm:ss z\", Locale.US), new SimpleDateFormat(\"d MMM yyyy HH:mm z\", Locale.US), new SimpleDateFormat(\"d MMM yyyy HH:mm:ss z\", Locale.US), new SimpleDateFormat(\"EEE, d MMM yyyy hh:mm a z\", Locale.US)}; private Logger logger = LoggerFactory.getLogger(RFC822DateAdapter.class); private SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE, d MMM yy HH:mm:ss z\", Locale.US); @Override public String marshal(Date v) throws Exception { return dateFormat.format(v); } @Override public Date unmarshal(String v) throws Exception { for (SimpleDateFormat format : rfc822DateFormats) { try { return format.parse(v); } catch (Exception e) { } } logger.warn(\"Unknown date format \\\"{}\\\"\", v); return null; } }"},{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\Condition.java","file_content":"package com.github.fedy2.weather.data; import java.util.Date; import javax.xml.bind.annotation.XmlAttribute; import javax.xml.bind.annotation.XmlRootElement; import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter; import com.github.fedy2.weather.binding.adapter.RFC822DateAdapter; @XmlRootElement public class Condition { @XmlAttribute private String text; @XmlAttribute private int code; @XmlAttribute private int temp; @XmlAttribute @XmlJavaTypeAdapter(RFC822DateAdapter.class) private Date date; public Condition() {} public Condition(String text, int code, int temp, Date date) { this.text = text; this.code = code; this.temp = temp; this.date = date; } public String getText() { return text; } public int getCode() { return code; } public int getTemp() { return temp; } public Date getDate() { return date; } @Override public String toString() { StringBuilder builder = new StringBuilder(); builder.append(\"Condition [text=\"); builder.append(text); builder.append(\", code=\"); builder.append(code); builder.append(\", temp=\"); builder.append(temp); builder.append(\", date=\"); builder.append(date); builder.append(\"]\"); return builder.toString(); } }"},{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\Forecast.java","file_content":"package com.github.fedy2.weather.data; import java.util.Date; import javax.xml.bind.annotation.XmlAttribute; import javax.xml.bind.annotation.XmlRootElement; import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter; import com.github.fedy2.weather.binding.adapter.DateAdapter; import com.github.fedy2.weather.binding.adapter.WeekDayAdapter; import com.github.fedy2.weather.data.unit.WeekDay; @XmlRootElement public class Forecast { @XmlAttribute @XmlJavaTypeAdapter(WeekDayAdapter.class) private WeekDay day; @XmlAttribute @XmlJavaTypeAdapter(DateAdapter.class) private Date date; @XmlAttribute private int low; @XmlAttribute private int high; @XmlAttribute private String text; @XmlAttribute private int code; public Forecast(){} public Forecast(WeekDay day, Date date, int low, int high, String text, int code) { this.day = day; this.date = date; this.low = low; this.high = high; this.text = text; this.code = code; } public WeekDay getDay() { return day; } public Date getDate() { return date; } public int getLow() { return low; } public int getHigh() { return high; } public String getText() { return text; } public int getCode() { return code; } @Override public String toString() { StringBuilder builder = new StringBuilder(); builder.append(\"Forecast [day=\"); builder.append(day); builder.append(\", date=\"); builder.append(date); builder.append(\", low=\"); builder.append(low); builder.append(\", high=\"); builder.append(high); builder.append(\", text=\"); builder.append(text); builder.append(\", code=\"); builder.append(code); builder.append(\"]\"); return builder.toString(); } }"}]}}
{"project_id":127,"chunk_id":0,"content":{"main_file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\Location.java","main_file_content":"package com.github.fedy2.weather.data; import javax.xml.bind.annotation.*; @XmlRootElement public class Location { @XmlAttribute private String city; @XmlAttribute private String region; @XmlAttribute private String country; public Location(){} public Location(String city, String region, String country) { this.city = city; this.region = region; this.country = country; } public String getCity() { return city; } public String getRegion() { return region; } public String getCountry() { return country; } @Override public String toString() { StringBuilder builder = new StringBuilder(); builder.append(\"Location [city=\"); builder.append(city); builder.append(\", region=\"); builder.append(region); builder.append(\", country=\"); builder.append(country); builder.append(\"]\"); return builder.toString(); } }","dependencies":[]}}
{"project_id":127,"chunk_id":0,"content":{"main_file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\Rss.java","main_file_content":"package com.github.fedy2.weather.data; import java.util.List; import javax.xml.bind.annotation.XmlAccessType; import javax.xml.bind.annotation.XmlAccessorType; import javax.xml.bind.annotation.XmlElement; import javax.xml.bind.annotation.XmlRootElement; import javax.xml.bind.annotation.XmlSeeAlso; @XmlAccessorType(XmlAccessType.FIELD) @XmlRootElement(name=\"query\") @XmlSeeAlso({Channel.class}) public class Rss { @XmlElement private Wrapper<Channel> results; public Rss() {} public List<Channel> getChannels() { return results.getItems(); } }","dependencies":[{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\Channel.java","file_content":"package com.github.fedy2.weather.data; import java.util.Date; import javax.xml.bind.annotation.XmlAccessType; import javax.xml.bind.annotation.XmlAccessorType; import javax.xml.bind.annotation.XmlElement; import javax.xml.bind.annotation.XmlRootElement; import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter; import com.github.fedy2.weather.binding.Constants; import com.github.fedy2.weather.binding.adapter.RFC822DateAdapter; @XmlAccessorType(XmlAccessType.FIELD) @XmlRootElement public class Channel { @XmlElement private String title; @XmlElement private String link; @XmlElement private String language; @XmlElement private String description; @XmlElement @XmlJavaTypeAdapter(RFC822DateAdapter.class) private Date lastBuildDate; @XmlElement private long ttl; @XmlElement(namespace=Constants.YWEATHER_NAMESPACE_URI) private Location location; @XmlElement(namespace=Constants.YWEATHER_NAMESPACE_URI) private Units units; @XmlElement(namespace=Constants.YWEATHER_NAMESPACE_URI) private Wind wind; @XmlElement(namespace=Constants.YWEATHER_NAMESPACE_URI) private Atmosphere atmosphere; @XmlElement(namespace=Constants.YWEATHER_NAMESPACE_URI) private Astronomy astronomy; @XmlElement private Image image; @XmlElement private Item item; public Channel() {} public String getTitle() { return title; } public String getLink() { return link; } public String getLanguage() { return language; } public String getDescription() { return description; } public Date getLastBuildDate() { return lastBuildDate; } public long getTtl() { return ttl; } public Location getLocation() { return location; } public Units getUnits() { return units; } public Wind getWind() { return wind; } public Atmosphere getAtmosphere() { return atmosphere; } public Astronomy getAstronomy() { return astronomy; } public Image getImage() { return image; } public Item getItem() { return item; } @Override public String toString() { StringBuilder builder = new StringBuilder(); builder.append(\"Channel [title=\"); builder.append(title); builder.append(\", link=\"); builder.append(link); builder.append(\", language=\"); builder.append(language); builder.append(\", description=\"); builder.append(description); builder.append(\", lastBuildDate=\"); builder.append(lastBuildDate); builder.append(\", ttl=\"); builder.append(ttl); builder.append(\", location=\"); builder.append(location); builder.append(\", units=\"); builder.append(units); builder.append(\", wind=\"); builder.append(wind); builder.append(\", atmosphere=\"); builder.append(atmosphere); builder.append(\", astronomy=\"); builder.append(astronomy); builder.append(\", image=\"); builder.append(image); builder.append(\", item=\"); builder.append(item); builder.append(\"]\"); return builder.toString(); } }"}]}}
{"project_id":127,"chunk_id":0,"content":{"main_file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\Units.java","main_file_content":"package com.github.fedy2.weather.data; import javax.xml.bind.annotation.XmlAttribute; import javax.xml.bind.annotation.XmlRootElement; import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter; import com.github.fedy2.weather.binding.adapter.DegreeUnitAdapter; import com.github.fedy2.weather.binding.adapter.DistanceUnitAdapter; import com.github.fedy2.weather.binding.adapter.PressureUnitAdapter; import com.github.fedy2.weather.binding.adapter.SpeedUnitAdapter; import com.github.fedy2.weather.data.unit.DegreeUnit; import com.github.fedy2.weather.data.unit.DistanceUnit; import com.github.fedy2.weather.data.unit.PressureUnit; import com.github.fedy2.weather.data.unit.SpeedUnit; @XmlRootElement public class Units { @XmlAttribute @XmlJavaTypeAdapter(DegreeUnitAdapter.class) private DegreeUnit temperature; @XmlAttribute @XmlJavaTypeAdapter(DistanceUnitAdapter.class) private DistanceUnit distance; @XmlAttribute @XmlJavaTypeAdapter(PressureUnitAdapter.class) private PressureUnit pressure; @XmlAttribute @XmlJavaTypeAdapter(SpeedUnitAdapter.class) private SpeedUnit speed; public Units(){} public Units(DegreeUnit temperature, DistanceUnit distance, PressureUnit pressure, SpeedUnit speed) { this.temperature = temperature; this.distance = distance; this.pressure = pressure; this.speed = speed; } public DegreeUnit getTemperature() { return temperature; } public DistanceUnit getDistance() { return distance; } public PressureUnit getPressure() { return pressure; } public SpeedUnit getSpeed() { return speed; } @Override public String toString() { StringBuilder builder = new StringBuilder(); builder.append(\"Units [temperature=\"); builder.append(temperature); builder.append(\", distance=\"); builder.append(distance); builder.append(\", pressure=\"); builder.append(pressure); builder.append(\", speed=\"); builder.append(speed); builder.append(\"]\"); return builder.toString(); } }","dependencies":[{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\binding\\adapter\\DegreeUnitAdapter.java","file_content":"package com.github.fedy2.weather.binding.adapter; import javax.xml.bind.annotation.adapters.XmlAdapter; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import com.github.fedy2.weather.data.unit.DegreeUnit; public class DegreeUnitAdapter extends XmlAdapter<String, DegreeUnit> { private static final String CELSIUS = \"c\"; private static final String FAHRENHEIT = \"f\"; private Logger logger = LoggerFactory.getLogger(DegreeUnitAdapter.class); @Override public DegreeUnit unmarshal(String v) throws Exception { if (FAHRENHEIT.equalsIgnoreCase(v)) return DegreeUnit.FAHRENHEIT; if (CELSIUS.equalsIgnoreCase(v)) return DegreeUnit.CELSIUS; logger.warn(\"Unknown degree unit \\\"{}\\\"\", v); return null; } @Override public String marshal(DegreeUnit v) throws Exception { switch (v) { case CELSIUS: return CELSIUS; case FAHRENHEIT: return FAHRENHEIT; default: return \"\"; } } }"},{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\binding\\adapter\\DistanceUnitAdapter.java","file_content":"package com.github.fedy2.weather.binding.adapter; import javax.xml.bind.annotation.adapters.XmlAdapter; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import com.github.fedy2.weather.data.unit.DistanceUnit; public class DistanceUnitAdapter extends XmlAdapter<String, DistanceUnit> { private static final String MI = \"mi\"; private static final String KM = \"km\"; private Logger logger = LoggerFactory.getLogger(DistanceUnitAdapter.class); @Override public DistanceUnit unmarshal(String v) throws Exception { if (MI.equalsIgnoreCase(v)) return DistanceUnit.MI; if (KM.equalsIgnoreCase(v)) return DistanceUnit.KM; logger.warn(\"Unknown distance unit \\\"{}\\\"\", v); return null; } @Override public String marshal(DistanceUnit v) throws Exception { switch (v) { case KM: return KM; case MI: return MI; default: return \"\"; } } }"},{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\binding\\adapter\\PressureUnitAdapter.java","file_content":"package com.github.fedy2.weather.binding.adapter; import javax.xml.bind.annotation.adapters.XmlAdapter; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import com.github.fedy2.weather.data.unit.PressureUnit; public class PressureUnitAdapter extends XmlAdapter<String, PressureUnit> { private static final String MB = \"mb\"; private static final String IN = \"in\"; private Logger logger = LoggerFactory.getLogger(PressureUnitAdapter.class); @Override public PressureUnit unmarshal(String v) throws Exception { if (IN.equalsIgnoreCase(v)) return PressureUnit.IN; if (MB.equalsIgnoreCase(v)) return PressureUnit.MB; logger.warn(\"Unknown pressure unit \\\"{}\\\"\", v); return null; } @Override public String marshal(PressureUnit v) throws Exception { switch (v) { case IN: return IN; case MB: return MB; default: return \"\"; } } }"},{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\binding\\adapter\\SpeedUnitAdapter.java","file_content":"package com.github.fedy2.weather.binding.adapter; import javax.xml.bind.annotation.adapters.XmlAdapter; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import com.github.fedy2.weather.data.unit.SpeedUnit; public class SpeedUnitAdapter extends XmlAdapter<String, SpeedUnit> { private static final String KMH = \"km/h\"; private static final String MPH = \"mph\"; private Logger logger = LoggerFactory.getLogger(SpeedUnitAdapter.class); @Override public SpeedUnit unmarshal(String v) throws Exception { if (MPH.equalsIgnoreCase(v)) return SpeedUnit.MPH; if (KMH.equalsIgnoreCase(v)) return SpeedUnit.KMH; logger.warn(\"Unknown speed unit \\\"{}\\\"\", v); return null; } @Override public String marshal(SpeedUnit v) throws Exception { switch (v) { case KMH: return KMH; case MPH: return MPH; default: return \"\"; } } }"},{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\unit\\DegreeUnit.java","file_content":"package com.github.fedy2.weather.data.unit; public enum DegreeUnit { FAHRENHEIT, CELSIUS; }"},{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\unit\\DistanceUnit.java","file_content":"package com.github.fedy2.weather.data.unit; public enum DistanceUnit { MI, KM; }"},{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\unit\\PressureUnit.java","file_content":"package com.github.fedy2.weather.data.unit; public enum PressureUnit { IN, MB; }"},{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\unit\\SpeedUnit.java","file_content":"package com.github.fedy2.weather.data.unit; public enum SpeedUnit { MPH, KMH; }"}]}}
{"project_id":127,"chunk_id":0,"content":{"main_file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\Wind.java","main_file_content":"package com.github.fedy2.weather.data; import javax.xml.bind.annotation.XmlAttribute; import javax.xml.bind.annotation.XmlRootElement; import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter; import com.github.fedy2.weather.binding.adapter.FloatAdapter; import com.github.fedy2.weather.binding.adapter.IntegerAdapter; @XmlRootElement public class Wind { @XmlAttribute(required=false) @XmlJavaTypeAdapter(IntegerAdapter.class) private Integer chill; @XmlAttribute(required=false) @XmlJavaTypeAdapter(IntegerAdapter.class) private Integer direction; @XmlAttribute(required=false) @XmlJavaTypeAdapter(FloatAdapter.class) private Float speed; public Wind() {} public Wind(Integer chill, Integer direction, Float speed) { this.chill = chill; this.direction = direction; this.speed = speed; } public Integer getChill() { return chill; } public Integer getDirection() { return direction; } public Float getSpeed() { return speed; } @Override public String toString() { StringBuilder builder = new StringBuilder(); builder.append(\"Wind [chill=\"); builder.append(chill); builder.append(\", direction=\"); builder.append(direction); builder.append(\", speed=\"); builder.append(speed); builder.append(\"]\"); return builder.toString(); } }","dependencies":[{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\binding\\adapter\\FloatAdapter.java","file_content":"package com.github.fedy2.weather.binding.adapter; import javax.xml.bind.annotation.adapters.XmlAdapter; public class FloatAdapter extends XmlAdapter<String, Float> { @Override public String marshal(Float v) throws Exception { return String.valueOf(v); } @Override public Float unmarshal(String v) throws Exception { if (v == null || v.isEmpty()) return null; return Float.parseFloat(v); } }"},{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\binding\\adapter\\IntegerAdapter.java","file_content":"package com.github.fedy2.weather.binding.adapter; import javax.xml.bind.annotation.adapters.XmlAdapter; public class IntegerAdapter extends XmlAdapter<String, Integer> { @Override public String marshal(Integer v) throws Exception { return String.valueOf(v); } @Override public Integer unmarshal(String v) throws Exception { if (v == null || v.isEmpty()) return null; return Integer.parseInt(v); } }"}]}}
{"project_id":127,"chunk_id":0,"content":{"main_file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\Wrapper.java","main_file_content":"package com.github.fedy2.weather.data; import java.util.ArrayList; import java.util.List; import javax.xml.bind.annotation.XmlAnyElement; import javax.xml.bind.annotation.XmlRootElement; @XmlRootElement public class Wrapper<T> { private List<T> items; public Wrapper() { items = new ArrayList<T>(); } public Wrapper(List<T> items) { this.items = items; } @XmlAnyElement(lax=true) public List<T> getItems() { return items; } }","dependencies":[]}}
{"project_id":127,"chunk_id":0,"content":{"main_file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\unit\\BarometricPressureState.java","main_file_content":"package com.github.fedy2.weather.data.unit; public enum BarometricPressureState { STEADY, RISING, FALLING; }","dependencies":[]}}
{"project_id":127,"chunk_id":0,"content":{"main_file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\unit\\DegreeUnit.java","main_file_content":"package com.github.fedy2.weather.data.unit; public enum DegreeUnit { FAHRENHEIT, CELSIUS; }","dependencies":[]}}
{"project_id":127,"chunk_id":0,"content":{"main_file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\unit\\DistanceUnit.java","main_file_content":"package com.github.fedy2.weather.data.unit; public enum DistanceUnit { MI, KM; }","dependencies":[]}}
{"project_id":127,"chunk_id":0,"content":{"main_file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\unit\\PressureUnit.java","main_file_content":"package com.github.fedy2.weather.data.unit; public enum PressureUnit { IN, MB; }","dependencies":[]}}
{"project_id":127,"chunk_id":0,"content":{"main_file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\unit\\SpeedUnit.java","main_file_content":"package com.github.fedy2.weather.data.unit; public enum SpeedUnit { MPH, KMH; }","dependencies":[]}}
{"project_id":127,"chunk_id":0,"content":{"main_file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\unit\\Time.java","main_file_content":"package com.github.fedy2.weather.data.unit; public class Time { private int hours; private int minutes; private TimeConvention convention; public Time(int hours, int minutes, TimeConvention convention) { this.hours = hours; this.minutes = minutes; this.convention = convention; } public int getHours() { return hours; } public int getMinutes() { return minutes; } public TimeConvention getConvention() { return convention; } @Override public String toString() { StringBuilder builder = new StringBuilder(); builder.append(\"Time [hours=\"); builder.append(hours); builder.append(\", minutes=\"); builder.append(minutes); builder.append(\", convention=\"); builder.append(convention); builder.append(\"]\"); return builder.toString(); } }","dependencies":[{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\unit\\TimeConvention.java","file_content":"package com.github.fedy2.weather.data.unit; public enum TimeConvention { AM, PM; }"}]}}
{"project_id":127,"chunk_id":0,"content":{"main_file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\unit\\TimeConvention.java","main_file_content":"package com.github.fedy2.weather.data.unit; public enum TimeConvention { AM, PM; }","dependencies":[]}}
{"project_id":127,"chunk_id":0,"content":{"main_file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\unit\\WeekDay.java","main_file_content":"package com.github.fedy2.weather.data.unit; public enum WeekDay { MON, TUE, WED, THU, FRI, SAT, SUN; }","dependencies":[]}}
{"project_id":127,"chunk_id":0,"content":{"main_file_path":"weather forecasting app\\src\\test\\java\\com\\github\\fedy2\\weather\\test\\Example.java","main_file_content":"package com.github.fedy2.weather.test; import java.io.IOException; import java.util.List; import javax.xml.bind.JAXBException; import com.github.fedy2.weather.YahooWeatherService; import com.github.fedy2.weather.data.Channel; import com.github.fedy2.weather.data.unit.DegreeUnit; public class Example { public static void main(String[] args) throws JAXBException, IOException { YahooWeatherService service = new YahooWeatherService(); Channel result = service.getForecast(\"670807\", DegreeUnit.CELSIUS); System.out.println(result.getDescription()); System.out.println(result.getTitle()); List<Channel> channels = service.getForecastForLocation(\"Oristano\", DegreeUnit.CELSIUS).first(3); for (Channel channel:channels) System.out.println(channel.getTitle()); } }","dependencies":[{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\YahooWeatherService.java","file_content":"package com.github.fedy2.weather; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.io.Reader; import java.io.StringWriter; import java.io.UnsupportedEncodingException; import java.io.Writer; import java.net.Proxy; import java.net.URL; import java.net.URLConnection; import java.net.URLEncoder; import java.util.List; import javax.xml.bind.JAXBException; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import com.github.fedy2.weather.binding.RSSParser; import com.github.fedy2.weather.data.Channel; import com.github.fedy2.weather.data.Rss; import com.github.fedy2.weather.data.unit.DegreeUnit; public class YahooWeatherService { private static final String WEATHER_SERVICE_BASE_URL = \"https: private static final int DEFAULT_BUFFER_SIZE = 1024 * 4; public interface LimitDeclaration { List<Channel> first(int count) throws JAXBException, IOException; List<Channel> last(int count) throws JAXBException, IOException; List<Channel> all() throws JAXBException, IOException; } private Logger logger = LoggerFactory.getLogger(YahooWeatherService.class); private RSSParser parser; private Proxy proxy; public YahooWeatherService() throws JAXBException { this.parser = new RSSParser(); this.proxy = Proxy.NO_PROXY; } public YahooWeatherService(Proxy proxy) throws JAXBException { this.parser = new RSSParser(); this.proxy = proxy; } public Channel getForecast(String woeid, DegreeUnit unit) throws JAXBException, IOException { QueryBuilder query = new QueryBuilder(); query.woeid(woeid).unit(unit); List<Channel> channels = execute(query.build()); if (channels.isEmpty()) throw new IllegalStateException(\"No results from the service.\"); return channels.get(0); } public LimitDeclaration getForecastForLocation(String location, DegreeUnit unit) { final QueryBuilder query = new QueryBuilder(); query.location(location).unit(unit); return new LimitDeclaration() { @Override public List<Channel> last(int count) throws JAXBException, IOException { query.last(count); return execute(query.build()); } @Override public List<Channel> first(int count) throws JAXBException, IOException { query.first(count); return execute(query.build()); } @Override public List<Channel> all() throws JAXBException, IOException { return execute(query.build()); } }; } private String composeUrl(String query) { logger.trace(\"query: {}\", query); StringBuilder url = new StringBuilder(WEATHER_SERVICE_BASE_URL); try { url.append(\"?q=\").append(URLEncoder.encode(query, \"UTF-8\")); } catch (UnsupportedEncodingException e) { throw new RuntimeException(\"Url encoding failed\", e); } return url.toString(); } private List<Channel> execute(String query) throws IOException, JAXBException { String url = composeUrl(query); String xml = retrieveRSS(url); Rss rss = parser.parse(xml); return rss.getChannels(); } private String retrieveRSS(String serviceUrl) throws IOException { URL url = new URL(serviceUrl); URLConnection connection = url.openConnection(proxy); InputStream is = connection.getInputStream(); InputStreamReader reader = new InputStreamReader(is); StringWriter writer = new StringWriter(); copy(reader, writer); reader.close(); is.close(); return writer.toString(); } private static long copy(Reader input, Writer output) throws IOException { char[] buffer = new char[DEFAULT_BUFFER_SIZE]; long count = 0; int n = 0; while (-1 != (n = input.read(buffer))) { output.write(buffer, 0, n); count += n; } return count; } }"},{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\Channel.java","file_content":"package com.github.fedy2.weather.data; import java.util.Date; import javax.xml.bind.annotation.XmlAccessType; import javax.xml.bind.annotation.XmlAccessorType; import javax.xml.bind.annotation.XmlElement; import javax.xml.bind.annotation.XmlRootElement; import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter; import com.github.fedy2.weather.binding.Constants; import com.github.fedy2.weather.binding.adapter.RFC822DateAdapter; @XmlAccessorType(XmlAccessType.FIELD) @XmlRootElement public class Channel { @XmlElement private String title; @XmlElement private String link; @XmlElement private String language; @XmlElement private String description; @XmlElement @XmlJavaTypeAdapter(RFC822DateAdapter.class) private Date lastBuildDate; @XmlElement private long ttl; @XmlElement(namespace=Constants.YWEATHER_NAMESPACE_URI) private Location location; @XmlElement(namespace=Constants.YWEATHER_NAMESPACE_URI) private Units units; @XmlElement(namespace=Constants.YWEATHER_NAMESPACE_URI) private Wind wind; @XmlElement(namespace=Constants.YWEATHER_NAMESPACE_URI) private Atmosphere atmosphere; @XmlElement(namespace=Constants.YWEATHER_NAMESPACE_URI) private Astronomy astronomy; @XmlElement private Image image; @XmlElement private Item item; public Channel() {} public String getTitle() { return title; } public String getLink() { return link; } public String getLanguage() { return language; } public String getDescription() { return description; } public Date getLastBuildDate() { return lastBuildDate; } public long getTtl() { return ttl; } public Location getLocation() { return location; } public Units getUnits() { return units; } public Wind getWind() { return wind; } public Atmosphere getAtmosphere() { return atmosphere; } public Astronomy getAstronomy() { return astronomy; } public Image getImage() { return image; } public Item getItem() { return item; } @Override public String toString() { StringBuilder builder = new StringBuilder(); builder.append(\"Channel [title=\"); builder.append(title); builder.append(\", link=\"); builder.append(link); builder.append(\", language=\"); builder.append(language); builder.append(\", description=\"); builder.append(description); builder.append(\", lastBuildDate=\"); builder.append(lastBuildDate); builder.append(\", ttl=\"); builder.append(ttl); builder.append(\", location=\"); builder.append(location); builder.append(\", units=\"); builder.append(units); builder.append(\", wind=\"); builder.append(wind); builder.append(\", atmosphere=\"); builder.append(atmosphere); builder.append(\", astronomy=\"); builder.append(astronomy); builder.append(\", image=\"); builder.append(image); builder.append(\", item=\"); builder.append(item); builder.append(\"]\"); return builder.toString(); } }"}]}}
{"project_id":127,"chunk_id":0,"content":{"main_file_path":"weather forecasting app\\src\\test\\java\\com\\github\\fedy2\\weather\\test\\TestJaxB.java","main_file_content":"package com.github.fedy2.weather.test; import java.io.FileNotFoundException; import java.io.FileReader; import javax.xml.bind.JAXBContext; import javax.xml.bind.JAXBException; import javax.xml.bind.Unmarshaller; import com.github.fedy2.weather.data.Channel; import com.github.fedy2.weather.data.Rss; public class TestJaxB { public static void main(String[] args) throws JAXBException, FileNotFoundException { JAXBContext context = JAXBContext.newInstance(Rss.class); Unmarshaller unmarshaller = context.createUnmarshaller(); Rss rss = (Rss)unmarshaller.unmarshal(new FileReader(\"src/test/resources/xml/sample.xml\")); System.out.println(rss.getChannels()); rss = (Rss)unmarshaller.unmarshal(new FileReader(\"src/test/resources/xml/sample-time-parsing.xml\")); for (Channel channel : rss.getChannels()) { System.out.println(\"Sunrise: \" + channel.getAstronomy().getSunrise()); System.out.println(\"Sunset: \" + channel.getAstronomy().getSunset()); } } }","dependencies":[{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\Channel.java","file_content":"package com.github.fedy2.weather.data; import java.util.Date; import javax.xml.bind.annotation.XmlAccessType; import javax.xml.bind.annotation.XmlAccessorType; import javax.xml.bind.annotation.XmlElement; import javax.xml.bind.annotation.XmlRootElement; import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter; import com.github.fedy2.weather.binding.Constants; import com.github.fedy2.weather.binding.adapter.RFC822DateAdapter; @XmlAccessorType(XmlAccessType.FIELD) @XmlRootElement public class Channel { @XmlElement private String title; @XmlElement private String link; @XmlElement private String language; @XmlElement private String description; @XmlElement @XmlJavaTypeAdapter(RFC822DateAdapter.class) private Date lastBuildDate; @XmlElement private long ttl; @XmlElement(namespace=Constants.YWEATHER_NAMESPACE_URI) private Location location; @XmlElement(namespace=Constants.YWEATHER_NAMESPACE_URI) private Units units; @XmlElement(namespace=Constants.YWEATHER_NAMESPACE_URI) private Wind wind; @XmlElement(namespace=Constants.YWEATHER_NAMESPACE_URI) private Atmosphere atmosphere; @XmlElement(namespace=Constants.YWEATHER_NAMESPACE_URI) private Astronomy astronomy; @XmlElement private Image image; @XmlElement private Item item; public Channel() {} public String getTitle() { return title; } public String getLink() { return link; } public String getLanguage() { return language; } public String getDescription() { return description; } public Date getLastBuildDate() { return lastBuildDate; } public long getTtl() { return ttl; } public Location getLocation() { return location; } public Units getUnits() { return units; } public Wind getWind() { return wind; } public Atmosphere getAtmosphere() { return atmosphere; } public Astronomy getAstronomy() { return astronomy; } public Image getImage() { return image; } public Item getItem() { return item; } @Override public String toString() { StringBuilder builder = new StringBuilder(); builder.append(\"Channel [title=\"); builder.append(title); builder.append(\", link=\"); builder.append(link); builder.append(\", language=\"); builder.append(language); builder.append(\", description=\"); builder.append(description); builder.append(\", lastBuildDate=\"); builder.append(lastBuildDate); builder.append(\", ttl=\"); builder.append(ttl); builder.append(\", location=\"); builder.append(location); builder.append(\", units=\"); builder.append(units); builder.append(\", wind=\"); builder.append(wind); builder.append(\", atmosphere=\"); builder.append(atmosphere); builder.append(\", astronomy=\"); builder.append(astronomy); builder.append(\", image=\"); builder.append(image); builder.append(\", item=\"); builder.append(item); builder.append(\"]\"); return builder.toString(); } }"},{"file_path":"weather forecasting app\\src\\main\\java\\com\\github\\fedy2\\weather\\data\\Rss.java","file_content":"package com.github.fedy2.weather.data; import java.util.List; import javax.xml.bind.annotation.XmlAccessType; import javax.xml.bind.annotation.XmlAccessorType; import javax.xml.bind.annotation.XmlElement; import javax.xml.bind.annotation.XmlRootElement; import javax.xml.bind.annotation.XmlSeeAlso; @XmlAccessorType(XmlAccessType.FIELD) @XmlRootElement(name=\"query\") @XmlSeeAlso({Channel.class}) public class Rss { @XmlElement private Wrapper<Channel> results; public Rss() {} public List<Channel> getChannels() { return results.getItems(); } }"}]}}
{"project_id":128,"chunk_id":0,"content":{"main_file_path":"WeatherApp-Android-master\\app\\src\\androidTest\\java\\com\\aniketjain\\weatherapp\\ExampleInstrumentedTest.java","main_file_content":"package com.aniketjain.weatherapp; import android.content.Context; import androidx.test.platform.app.InstrumentationRegistry; import androidx.test.ext.junit.runners.AndroidJUnit4; import org.junit.Test; import org.junit.runner.RunWith; import static org.junit.Assert.*; @RunWith(AndroidJUnit4.class) public class ExampleInstrumentedTest { @Test public void useAppContext() { Context appContext = InstrumentationRegistry.getInstrumentation().getTargetContext(); assertEquals(\"com.aniketjain.weatherapp\", appContext.getPackageName()); } }","dependencies":[]}}
{"project_id":128,"chunk_id":0,"content":{"main_file_path":"WeatherApp-Android-master\\app\\src\\main\\java\\com\\aniketjain\\weatherapp\\HomeActivity.java","main_file_content":"package com.aniketjain.weatherapp; import static com.aniketjain.weatherapp.location.CityFinder.getCityNameUsingNetwork; import static com.aniketjain.weatherapp.location.CityFinder.setLongitudeLatitude; import static com.aniketjain.weatherapp.network.InternetConnectivity.isInternetConnected; import android.Manifest; import android.annotation.SuppressLint; import android.app.Activity; import android.content.Intent; import android.content.IntentSender; import android.content.pm.PackageManager; import android.os.Build; import android.os.Bundle; import android.speech.RecognizerIntent; import android.util.Log; import android.view.View; import android.view.inputmethod.EditorInfo; import android.view.inputmethod.InputMethodManager; import androidx.annotation.NonNull; import androidx.annotation.Nullable; import androidx.appcompat.app.AppCompatActivity; import androidx.core.app.ActivityCompat; import androidx.recyclerview.widget.LinearLayoutManager; import com.android.volley.Request; import com.android.volley.RequestQueue; import com.android.volley.toolbox.JsonObjectRequest; import com.android.volley.toolbox.Volley; import com.aniketjain.weatherapp.adapter.DaysAdapter; import com.aniketjain.weatherapp.databinding.ActivityHomeBinding; import com.aniketjain.weatherapp.location.LocationCord; import com.aniketjain.weatherapp.toast.Toaster; import com.aniketjain.weatherapp.update.UpdateUI; import com.aniketjain.weatherapp.url.URL; import com.google.android.gms.location.FusedLocationProviderClient; import com.google.android.gms.location.LocationServices; import com.google.android.play.core.appupdate.AppUpdateInfo; import com.google.android.play.core.appupdate.AppUpdateManager; import com.google.android.play.core.appupdate.AppUpdateManagerFactory; import com.google.android.play.core.install.model.AppUpdateType; import com.google.android.play.core.install.model.UpdateAvailability; import com.google.android.play.core.tasks.Task; import org.json.JSONException; import java.text.SimpleDateFormat; import java.util.ArrayList; import java.util.Date; import java.util.Locale; import java.util.Objects; public class HomeActivity extends AppCompatActivity { private final int WEATHER_FORECAST_APP_UPDATE_REQ_CODE = 101; private static final int PERMISSION_CODE = 1; private String name, updated_at, description, temperature, min_temperature, max_temperature, pressure, wind_speed, humidity; private int condition; private long update_time, sunset, sunrise; private String city = \"\"; private final int REQUEST_CODE_EXTRA_INPUT = 101; private ActivityHomeBinding binding; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); binding = ActivityHomeBinding.inflate(getLayoutInflater()); View view = binding.getRoot(); setContentView(view); setNavigationBarColor(); checkUpdate(); setRefreshLayoutColor(); listeners(); getDataUsingNetwork(); } @Override protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) { super.onActivityResult(requestCode, resultCode, data); if (requestCode == REQUEST_CODE_EXTRA_INPUT) { if (resultCode == RESULT_OK && data != null) { ArrayList<String> arrayList = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS); binding.layout.cityEt.setText(Objects.requireNonNull(arrayList).get(0).toUpperCase()); searchCity(binding.layout.cityEt.getText().toString()); } } } private void setNavigationBarColor() { if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) { getWindow().setNavigationBarColor(getResources().getColor(R.color.navBarColor)); } } private void setUpDaysRecyclerView() { DaysAdapter daysAdapter = new DaysAdapter(this); binding.dayRv.setLayoutManager( new LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false) ); binding.dayRv.setAdapter(daysAdapter); } @SuppressLint(\"ClickableViewAccessibility\") private void listeners() { binding.layout.mainLayout.setOnTouchListener((view, motionEvent) -> { hideKeyboard(view); return false; }); binding.layout.searchBarIv.setOnClickListener(view -> searchCity(binding.layout.cityEt.getText().toString())); binding.layout.searchBarIv.setOnTouchListener((view, motionEvent) -> { hideKeyboard(view); return false; }); binding.layout.cityEt.setOnEditorActionListener((textView, i, keyEvent) -> { if (i == EditorInfo.IME_ACTION_GO) { searchCity(binding.layout.cityEt.getText().toString()); hideKeyboard(textView); return true; } return false; }); binding.layout.cityEt.setOnFocusChangeListener((view, b) -> { if (!b) { hideKeyboard(view); } }); binding.mainRefreshLayout.setOnRefreshListener(() -> { checkConnection(); Log.i(\"refresh\", \"Refresh Done.\"); binding.mainRefreshLayout.setRefreshing(false); }); binding.layout.micSearchId.setOnClickListener(view -> { Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH); intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM); intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, Locale.getDefault()); intent.putExtra(RecognizerIntent.EXTRA_PROMPT, REQUEST_CODE_EXTRA_INPUT); try { startActivityForResult(intent, REQUEST_CODE_EXTRA_INPUT); } catch (Exception e) { Log.d(\"Error Voice\", \"Mic Error: \" + e); } }); } private void setRefreshLayoutColor() { binding.mainRefreshLayout.setProgressBackgroundColorSchemeColor( getResources().getColor(R.color.textColor) ); binding.mainRefreshLayout.setColorSchemeColors( getResources().getColor(R.color.navBarColor) ); } private void searchCity(String cityName) { if (cityName == null || cityName.isEmpty()) { Toaster.errorToast(this, \"Please enter the city name\"); } else { setLatitudeLongitudeUsingCity(cityName); } } private void getDataUsingNetwork() { FusedLocationProviderClient client = LocationServices.getFusedLocationProviderClient(this); if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) { ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION}, PERMISSION_CODE); } else { client.getLastLocation().addOnSuccessListener(location -> { setLongitudeLatitude(location); city = getCityNameUsingNetwork(this, location); getTodayWeatherInfo(city); }); } } private void setLatitudeLongitudeUsingCity(String cityName) { URL.setCity_url(cityName); RequestQueue requestQueue = Volley.newRequestQueue(HomeActivity.this); JsonObjectRequest jsonObjectRequest = new JsonObjectRequest(Request.Method.GET, URL.getCity_url(), null, response -> { try { LocationCord.lat = response.getJSONObject(\"coord\").getString(\"lat\"); LocationCord.lon = response.getJSONObject(\"coord\").getString(\"lon\"); getTodayWeatherInfo(cityName); binding.layout.cityEt.setText(\"\"); } catch (JSONException e) { e.printStackTrace(); } }, error -> Toaster.errorToast(this, \"Please enter the correct city name\")); requestQueue.add(jsonObjectRequest); } @SuppressLint(\"DefaultLocale\") private void getTodayWeatherInfo(String name) { URL url = new URL(); RequestQueue requestQueue = Volley.newRequestQueue(this); JsonObjectRequest jsonObjectRequest = new JsonObjectRequest(Request.Method.GET, url.getLink(), null, response -> { try { this.name = name; update_time = response.getJSONObject(\"current\").getLong(\"dt\"); updated_at = new SimpleDateFormat(\"EEEE hh:mm a\", Locale.ENGLISH).format(new Date(update_time * 1000)); condition = response.getJSONArray(\"daily\").getJSONObject(0).getJSONArray(\"weather\").getJSONObject(0).getInt(\"id\"); sunrise = response.getJSONArray(\"daily\").getJSONObject(0).getLong(\"sunrise\"); sunset = response.getJSONArray(\"daily\").getJSONObject(0).getLong(\"sunset\"); description = response.getJSONObject(\"current\").getJSONArray(\"weather\").getJSONObject(0).getString(\"main\"); temperature = String.valueOf(Math.round(response.getJSONObject(\"current\").getDouble(\"temp\") - 273.15)); min_temperature = String.format(\"%.0f\", response.getJSONArray(\"daily\").getJSONObject(0).getJSONObject(\"temp\").getDouble(\"min\") - 273.15); max_temperature = String.format(\"%.0f\", response.getJSONArray(\"daily\").getJSONObject(0).getJSONObject(\"temp\").getDouble(\"max\") - 273.15); pressure = response.getJSONArray(\"daily\").getJSONObject(0).getString(\"pressure\"); wind_speed = response.getJSONArray(\"daily\").getJSONObject(0).getString(\"wind_speed\"); humidity = response.getJSONArray(\"daily\").getJSONObject(0).getString(\"humidity\"); updateUI(); hideProgressBar(); setUpDaysRecyclerView(); } catch (JSONException e) { e.printStackTrace(); } }, null); requestQueue.add(jsonObjectRequest); Log.i(\"json_req\", \"Day 0\"); } @SuppressLint(\"SetTextI18n\") private void updateUI() { binding.layout.nameTv.setText(name); updated_at = translate(updated_at); binding.layout.updatedAtTv.setText(updated_at); binding.layout.conditionIv.setImageResource( getResources().getIdentifier( UpdateUI.getIconID(condition, update_time, sunrise, sunset), \"drawable\", getPackageName() )); binding.layout.conditionDescTv.setText(description); binding.layout.tempTv.setText(temperature + \"°C\"); binding.layout.minTempTv.setText(min_temperature + \"°C\"); binding.layout.maxTempTv.setText(max_temperature + \"°C\"); binding.layout.pressureTv.setText(pressure + \" mb\"); binding.layout.windTv.setText(wind_speed + \" km/h\"); binding.layout.humidityTv.setText(humidity + \"%\"); } private String translate(String dayToTranslate) { String[] dayToTranslateSplit = dayToTranslate.split(\" \"); dayToTranslateSplit[0] = UpdateUI.TranslateDay(dayToTranslateSplit[0].trim(), getApplicationContext()); return dayToTranslateSplit[0].concat(\" \" + dayToTranslateSplit[1]); } private void hideProgressBar() { binding.progress.setVisibility(View.GONE); binding.layout.mainLayout.setVisibility(View.VISIBLE); } private void hideMainLayout() { binding.progress.setVisibility(View.VISIBLE); binding.layout.mainLayout.setVisibility(View.GONE); } private void hideKeyboard(View view) { InputMethodManager inputMethodManager = (InputMethodManager) view.getContext().getSystemService(Activity.INPUT_METHOD_SERVICE); inputMethodManager.hideSoftInputFromWindow(view.getWindowToken(), 0); } private void checkConnection() { if (!isInternetConnected(this)) { hideMainLayout(); Toaster.errorToast(this, \"Please check your internet connection\"); } else { hideProgressBar(); getDataUsingNetwork(); } } @Override public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) { super.onRequestPermissionsResult(requestCode, permissions, grantResults); if (requestCode == PERMISSION_CODE) { if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) { Toaster.successToast(this, \"Permission Granted\"); getDataUsingNetwork(); } else { Toaster.errorToast(this, \"Permission Denied\"); finish(); } } } @Override protected void onResume() { super.onResume(); checkConnection(); } private void checkUpdate() { AppUpdateManager appUpdateManager = AppUpdateManagerFactory.create(HomeActivity.this); Task<AppUpdateInfo> appUpdateInfoTask = appUpdateManager.getAppUpdateInfo(); appUpdateInfoTask.addOnSuccessListener(appUpdateInfo -> { if (appUpdateInfo.updateAvailability() == UpdateAvailability.UPDATE_AVAILABLE && appUpdateInfo.isUpdateTypeAllowed(AppUpdateType.IMMEDIATE)) { try { appUpdateManager.startUpdateFlowForResult(appUpdateInfo, AppUpdateType.IMMEDIATE, HomeActivity.this, WEATHER_FORECAST_APP_UPDATE_REQ_CODE); } catch (IntentSender.SendIntentException exception) { Toaster.errorToast(this, \"Update Failed\"); } } }); } }","dependencies":[{"file_path":"WeatherApp-Android-master\\app\\src\\main\\java\\com\\aniketjain\\weatherapp\\adapter\\DaysAdapter.java","file_content":"package com.aniketjain.weatherapp.adapter; import android.annotation.SuppressLint; import android.content.Context; import android.util.Log; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.ImageView; import android.widget.RelativeLayout; import android.widget.TextView; import androidx.annotation.NonNull; import androidx.recyclerview.widget.RecyclerView; import com.android.volley.Request; import com.android.volley.RequestQueue; import com.android.volley.toolbox.JsonObjectRequest; import com.android.volley.toolbox.Volley; import com.aniketjain.weatherapp.R; import com.aniketjain.weatherapp.update.UpdateUI; import com.aniketjain.weatherapp.url.URL; import com.github.ybq.android.spinkit.SpinKitView; import org.json.JSONException; import java.text.SimpleDateFormat; import java.util.Date; import java.util.Locale; public class DaysAdapter extends RecyclerView.Adapter<DaysAdapter.DayViewHolder> { private final Context context; public DaysAdapter(Context context) { this.context = context; } private String updated_at, min, max, pressure, wind_speed, humidity; private int condition; private long update_time, sunset, sunrise; @NonNull @Override public DayViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) { View view = LayoutInflater.from(context).inflate(R.layout.day_item_layout, parent, false); return new DayViewHolder(view); } @Override public void onBindViewHolder(@NonNull DayViewHolder holder, int position) { getDailyWeatherInfo(position + 1, holder); } @Override public int getItemCount() { return 6; } @SuppressLint(\"DefaultLocale\") private void getDailyWeatherInfo(int i, DayViewHolder holder) { URL url = new URL(); RequestQueue requestQueue = Volley.newRequestQueue(context); JsonObjectRequest jsonObjectRequest = new JsonObjectRequest(Request.Method.GET, url.getLink(), null, response -> { try { update_time = response.getJSONObject(\"current\").getLong(\"dt\"); updated_at = new SimpleDateFormat(\"EEEE\", Locale.ENGLISH).format(new Date((update_time * 1000) + (i * 864_000_00L))); condition = response.getJSONArray(\"daily\").getJSONObject(i).getJSONArray(\"weather\").getJSONObject(0).getInt(\"id\"); sunrise = response.getJSONArray(\"daily\").getJSONObject(i).getLong(\"sunrise\"); sunset = response.getJSONArray(\"daily\").getJSONObject(i).getLong(\"sunset\"); min = String.format(\"%.0f\", response.getJSONArray(\"daily\").getJSONObject(i).getJSONObject(\"temp\").getDouble(\"min\") - 273.15); max = String.format(\"%.0f\", response.getJSONArray(\"daily\").getJSONObject(i).getJSONObject(\"temp\").getDouble(\"max\") - 273.15); pressure = response.getJSONArray(\"daily\").getJSONObject(i).getString(\"pressure\"); wind_speed = response.getJSONArray(\"daily\").getJSONObject(i).getString(\"wind_speed\"); humidity = response.getJSONArray(\"daily\").getJSONObject(i).getString(\"humidity\"); updateUI(holder); hideProgressBar(holder); } catch (JSONException e) { e.printStackTrace(); } }, null); requestQueue.add(jsonObjectRequest); Log.i(\"json_req\", \"Day \" + i); } @SuppressLint(\"SetTextI18n\") private void updateUI(DayViewHolder holder) { String day = UpdateUI.TranslateDay(updated_at, context); holder.dTime.setText(day); holder.temp_min.setText(min + \"°C\"); holder.temp_max.setText(max + \"°C\"); holder.pressure.setText(pressure + \" mb\"); holder.wind.setText(wind_speed + \" km/h\"); holder.humidity.setText(humidity + \"%\"); holder.icon.setImageResource( context.getResources().getIdentifier( UpdateUI.getIconID(condition, update_time, sunrise, sunset), \"drawable\", context.getPackageName() )); } private void hideProgressBar(DayViewHolder holder) { holder.progress.setVisibility(View.GONE); holder.layout.setVisibility(View.VISIBLE); } static class DayViewHolder extends RecyclerView.ViewHolder { SpinKitView progress; RelativeLayout layout; TextView dTime, temp_min, temp_max, pressure, wind, humidity; ImageView icon; public DayViewHolder(@NonNull View itemView) { super(itemView); progress = itemView.findViewById(R.id.day_progress_bar); layout = itemView.findViewById(R.id.day_relative_layout); dTime = itemView.findViewById(R.id.day_time); temp_min = itemView.findViewById(R.id.day_min_temp); temp_max = itemView.findViewById(R.id.day_max_temp); pressure = itemView.findViewById(R.id.day_pressure); wind = itemView.findViewById(R.id.day_wind); humidity = itemView.findViewById(R.id.day_humidity); icon = itemView.findViewById(R.id.day_icon); } } }"},{"file_path":"WeatherApp-Android-master\\app\\src\\main\\java\\com\\aniketjain\\weatherapp\\toast\\Toaster.java","file_content":"package com.aniketjain.weatherapp.toast; import android.content.Context; import com.aniketjain.roastedtoast.Toasty; import com.aniketjain.weatherapp.R; public class Toaster { public static void successToast(Context context, String msg) { Toasty.custom( context, msg, R.drawable.ic_baseline_check_24, \"#454B54\", 14, \"#EEEEEE\"); } public static void errorToast(Context context, String msg) { Toasty.custom( context, msg, R.drawable.ic_baseline_error_outline_24, \"#454B54\", 14, \"#EEEEEE\"); } }"},{"file_path":"WeatherApp-Android-master\\app\\src\\main\\java\\com\\aniketjain\\weatherapp\\update\\UpdateUI.java","file_content":"package com.aniketjain.weatherapp.update; import android.content.Context; import com.aniketjain.weatherapp.R; public class UpdateUI { public static String getIconID(int condition, long update_time, long sunrise, long sunset) { if (condition >= 200 && condition <= 232) return \"thunderstorm\"; else if (condition >= 300 && condition <= 321) return \"drizzle\"; else if (condition >= 500 && condition <= 531) return \"rain\"; else if (condition >= 600 && condition <= 622) return \"snow\"; else if (condition >= 701 && condition <= 781) return \"wind\"; else if (condition == 800) { if (update_time >= sunrise && update_time <= sunset) return \"clear_day\"; else return \"clear_night\"; } else if (condition == 801) { if (update_time >= sunrise && update_time <= sunset) return \"few_clouds_day\"; else return \"few_clouds_night\"; } else if (condition == 802) return \"scattered_clouds\"; else if (condition == 803 || condition == 804) return \"broken_clouds\"; return null; } public static String TranslateDay(String dayToBeTranslated, Context context) { switch (dayToBeTranslated.trim()) { case \"Monday\": return context.getResources().getString(R.string.monday); case \"Tuesday\": return context.getResources().getString(R.string.tuesday); case \"Wednesday\": return context.getResources().getString(R.string.wednesday); case \"Thursday\": return context.getResources().getString(R.string.thursday); case \"Friday\": return context.getResources().getString(R.string.friday); case \"Saturday\": return context.getResources().getString(R.string.saturday); case \"Sunday\": return context.getResources().getString(R.string.sunday); } return dayToBeTranslated; } }"},{"file_path":"WeatherApp-Android-master\\app\\src\\main\\java\\com\\aniketjain\\weatherapp\\url\\URL.java","file_content":"package com.aniketjain.weatherapp.url; import com.aniketjain.weatherapp.location.LocationCord; public class URL { private String link; private static String city_url; public URL() { link = \"https: + LocationCord.lat + \"&lon=\" + LocationCord.lon + \"&appid=\" + LocationCord.API_KEY; } public String getLink() { return link; } public static void setCity_url(String cityName) { city_url = \"https: } public static String getCity_url() { return city_url; } }"}]}}
{"project_id":128,"chunk_id":0,"content":{"main_file_path":"WeatherApp-Android-master\\app\\src\\main\\java\\com\\aniketjain\\weatherapp\\SplashScreen.java","main_file_content":"package com.aniketjain.weatherapp; import android.annotation.SuppressLint; import android.content.Intent; import android.os.Bundle; import android.os.Handler; import android.view.WindowManager; import androidx.appcompat.app.AppCompatActivity; import com.aniketjain.weatherapp.databinding.ActivitySplashScreenBinding; @SuppressLint(\"CustomSplashScreen\") public class SplashScreen extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); ActivitySplashScreenBinding binding = ActivitySplashScreenBinding.inflate(getLayoutInflater()); setContentView(binding.getRoot()); getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN); splashScreen(); } private void splashScreen() { int SPLASH_TIME = 4000; new Handler().postDelayed(() -> { Intent intent = new Intent(getApplicationContext(), HomeActivity.class); startActivity(intent); finish(); }, SPLASH_TIME); } }","dependencies":[{"file_path":"WeatherApp-Android-master\\app\\src\\main\\java\\com\\aniketjain\\weatherapp\\HomeActivity.java","file_content":"package com.aniketjain.weatherapp; import static com.aniketjain.weatherapp.location.CityFinder.getCityNameUsingNetwork; import static com.aniketjain.weatherapp.location.CityFinder.setLongitudeLatitude; import static com.aniketjain.weatherapp.network.InternetConnectivity.isInternetConnected; import android.Manifest; import android.annotation.SuppressLint; import android.app.Activity; import android.content.Intent; import android.content.IntentSender; import android.content.pm.PackageManager; import android.os.Build; import android.os.Bundle; import android.speech.RecognizerIntent; import android.util.Log; import android.view.View; import android.view.inputmethod.EditorInfo; import android.view.inputmethod.InputMethodManager; import androidx.annotation.NonNull; import androidx.annotation.Nullable; import androidx.appcompat.app.AppCompatActivity; import androidx.core.app.ActivityCompat; import androidx.recyclerview.widget.LinearLayoutManager; import com.android.volley.Request; import com.android.volley.RequestQueue; import com.android.volley.toolbox.JsonObjectRequest; import com.android.volley.toolbox.Volley; import com.aniketjain.weatherapp.adapter.DaysAdapter; import com.aniketjain.weatherapp.databinding.ActivityHomeBinding; import com.aniketjain.weatherapp.location.LocationCord; import com.aniketjain.weatherapp.toast.Toaster; import com.aniketjain.weatherapp.update.UpdateUI; import com.aniketjain.weatherapp.url.URL; import com.google.android.gms.location.FusedLocationProviderClient; import com.google.android.gms.location.LocationServices; import com.google.android.play.core.appupdate.AppUpdateInfo; import com.google.android.play.core.appupdate.AppUpdateManager; import com.google.android.play.core.appupdate.AppUpdateManagerFactory; import com.google.android.play.core.install.model.AppUpdateType; import com.google.android.play.core.install.model.UpdateAvailability; import com.google.android.play.core.tasks.Task; import org.json.JSONException; import java.text.SimpleDateFormat; import java.util.ArrayList; import java.util.Date; import java.util.Locale; import java.util.Objects; public class HomeActivity extends AppCompatActivity { private final int WEATHER_FORECAST_APP_UPDATE_REQ_CODE = 101; private static final int PERMISSION_CODE = 1; private String name, updated_at, description, temperature, min_temperature, max_temperature, pressure, wind_speed, humidity; private int condition; private long update_time, sunset, sunrise; private String city = \"\"; private final int REQUEST_CODE_EXTRA_INPUT = 101; private ActivityHomeBinding binding; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); binding = ActivityHomeBinding.inflate(getLayoutInflater()); View view = binding.getRoot(); setContentView(view); setNavigationBarColor(); checkUpdate(); setRefreshLayoutColor(); listeners(); getDataUsingNetwork(); } @Override protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) { super.onActivityResult(requestCode, resultCode, data); if (requestCode == REQUEST_CODE_EXTRA_INPUT) { if (resultCode == RESULT_OK && data != null) { ArrayList<String> arrayList = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS); binding.layout.cityEt.setText(Objects.requireNonNull(arrayList).get(0).toUpperCase()); searchCity(binding.layout.cityEt.getText().toString()); } } } private void setNavigationBarColor() { if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) { getWindow().setNavigationBarColor(getResources().getColor(R.color.navBarColor)); } } private void setUpDaysRecyclerView() { DaysAdapter daysAdapter = new DaysAdapter(this); binding.dayRv.setLayoutManager( new LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false) ); binding.dayRv.setAdapter(daysAdapter); } @SuppressLint(\"ClickableViewAccessibility\") private void listeners() { binding.layout.mainLayout.setOnTouchListener((view, motionEvent) -> { hideKeyboard(view); return false; }); binding.layout.searchBarIv.setOnClickListener(view -> searchCity(binding.layout.cityEt.getText().toString())); binding.layout.searchBarIv.setOnTouchListener((view, motionEvent) -> { hideKeyboard(view); return false; }); binding.layout.cityEt.setOnEditorActionListener((textView, i, keyEvent) -> { if (i == EditorInfo.IME_ACTION_GO) { searchCity(binding.layout.cityEt.getText().toString()); hideKeyboard(textView); return true; } return false; }); binding.layout.cityEt.setOnFocusChangeListener((view, b) -> { if (!b) { hideKeyboard(view); } }); binding.mainRefreshLayout.setOnRefreshListener(() -> { checkConnection(); Log.i(\"refresh\", \"Refresh Done.\"); binding.mainRefreshLayout.setRefreshing(false); }); binding.layout.micSearchId.setOnClickListener(view -> { Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH); intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM); intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, Locale.getDefault()); intent.putExtra(RecognizerIntent.EXTRA_PROMPT, REQUEST_CODE_EXTRA_INPUT); try { startActivityForResult(intent, REQUEST_CODE_EXTRA_INPUT); } catch (Exception e) { Log.d(\"Error Voice\", \"Mic Error: \" + e); } }); } private void setRefreshLayoutColor() { binding.mainRefreshLayout.setProgressBackgroundColorSchemeColor( getResources().getColor(R.color.textColor) ); binding.mainRefreshLayout.setColorSchemeColors( getResources().getColor(R.color.navBarColor) ); } private void searchCity(String cityName) { if (cityName == null || cityName.isEmpty()) { Toaster.errorToast(this, \"Please enter the city name\"); } else { setLatitudeLongitudeUsingCity(cityName); } } private void getDataUsingNetwork() { FusedLocationProviderClient client = LocationServices.getFusedLocationProviderClient(this); if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) { ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION}, PERMISSION_CODE); } else { client.getLastLocation().addOnSuccessListener(location -> { setLongitudeLatitude(location); city = getCityNameUsingNetwork(this, location); getTodayWeatherInfo(city); }); } } private void setLatitudeLongitudeUsingCity(String cityName) { URL.setCity_url(cityName); RequestQueue requestQueue = Volley.newRequestQueue(HomeActivity.this); JsonObjectRequest jsonObjectRequest = new JsonObjectRequest(Request.Method.GET, URL.getCity_url(), null, response -> { try { LocationCord.lat = response.getJSONObject(\"coord\").getString(\"lat\"); LocationCord.lon = response.getJSONObject(\"coord\").getString(\"lon\"); getTodayWeatherInfo(cityName); binding.layout.cityEt.setText(\"\"); } catch (JSONException e) { e.printStackTrace(); } }, error -> Toaster.errorToast(this, \"Please enter the correct city name\")); requestQueue.add(jsonObjectRequest); } @SuppressLint(\"DefaultLocale\") private void getTodayWeatherInfo(String name) { URL url = new URL(); RequestQueue requestQueue = Volley.newRequestQueue(this); JsonObjectRequest jsonObjectRequest = new JsonObjectRequest(Request.Method.GET, url.getLink(), null, response -> { try { this.name = name; update_time = response.getJSONObject(\"current\").getLong(\"dt\"); updated_at = new SimpleDateFormat(\"EEEE hh:mm a\", Locale.ENGLISH).format(new Date(update_time * 1000)); condition = response.getJSONArray(\"daily\").getJSONObject(0).getJSONArray(\"weather\").getJSONObject(0).getInt(\"id\"); sunrise = response.getJSONArray(\"daily\").getJSONObject(0).getLong(\"sunrise\"); sunset = response.getJSONArray(\"daily\").getJSONObject(0).getLong(\"sunset\"); description = response.getJSONObject(\"current\").getJSONArray(\"weather\").getJSONObject(0).getString(\"main\"); temperature = String.valueOf(Math.round(response.getJSONObject(\"current\").getDouble(\"temp\") - 273.15)); min_temperature = String.format(\"%.0f\", response.getJSONArray(\"daily\").getJSONObject(0).getJSONObject(\"temp\").getDouble(\"min\") - 273.15); max_temperature = String.format(\"%.0f\", response.getJSONArray(\"daily\").getJSONObject(0).getJSONObject(\"temp\").getDouble(\"max\") - 273.15); pressure = response.getJSONArray(\"daily\").getJSONObject(0).getString(\"pressure\"); wind_speed = response.getJSONArray(\"daily\").getJSONObject(0).getString(\"wind_speed\"); humidity = response.getJSONArray(\"daily\").getJSONObject(0).getString(\"humidity\"); updateUI(); hideProgressBar(); setUpDaysRecyclerView(); } catch (JSONException e) { e.printStackTrace(); } }, null); requestQueue.add(jsonObjectRequest); Log.i(\"json_req\", \"Day 0\"); } @SuppressLint(\"SetTextI18n\") private void updateUI() { binding.layout.nameTv.setText(name); updated_at = translate(updated_at); binding.layout.updatedAtTv.setText(updated_at); binding.layout.conditionIv.setImageResource( getResources().getIdentifier( UpdateUI.getIconID(condition, update_time, sunrise, sunset), \"drawable\", getPackageName() )); binding.layout.conditionDescTv.setText(description); binding.layout.tempTv.setText(temperature + \"°C\"); binding.layout.minTempTv.setText(min_temperature + \"°C\"); binding.layout.maxTempTv.setText(max_temperature + \"°C\"); binding.layout.pressureTv.setText(pressure + \" mb\"); binding.layout.windTv.setText(wind_speed + \" km/h\"); binding.layout.humidityTv.setText(humidity + \"%\"); } private String translate(String dayToTranslate) { String[] dayToTranslateSplit = dayToTranslate.split(\" \"); dayToTranslateSplit[0] = UpdateUI.TranslateDay(dayToTranslateSplit[0].trim(), getApplicationContext()); return dayToTranslateSplit[0].concat(\" \" + dayToTranslateSplit[1]); } private void hideProgressBar() { binding.progress.setVisibility(View.GONE); binding.layout.mainLayout.setVisibility(View.VISIBLE); } private void hideMainLayout() { binding.progress.setVisibility(View.VISIBLE); binding.layout.mainLayout.setVisibility(View.GONE); } private void hideKeyboard(View view) { InputMethodManager inputMethodManager = (InputMethodManager) view.getContext().getSystemService(Activity.INPUT_METHOD_SERVICE); inputMethodManager.hideSoftInputFromWindow(view.getWindowToken(), 0); } private void checkConnection() { if (!isInternetConnected(this)) { hideMainLayout(); Toaster.errorToast(this, \"Please check your internet connection\"); } else { hideProgressBar(); getDataUsingNetwork(); } } @Override public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) { super.onRequestPermissionsResult(requestCode, permissions, grantResults); if (requestCode == PERMISSION_CODE) { if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) { Toaster.successToast(this, \"Permission Granted\"); getDataUsingNetwork(); } else { Toaster.errorToast(this, \"Permission Denied\"); finish(); } } } @Override protected void onResume() { super.onResume(); checkConnection(); } private void checkUpdate() { AppUpdateManager appUpdateManager = AppUpdateManagerFactory.create(HomeActivity.this); Task<AppUpdateInfo> appUpdateInfoTask = appUpdateManager.getAppUpdateInfo(); appUpdateInfoTask.addOnSuccessListener(appUpdateInfo -> { if (appUpdateInfo.updateAvailability() == UpdateAvailability.UPDATE_AVAILABLE && appUpdateInfo.isUpdateTypeAllowed(AppUpdateType.IMMEDIATE)) { try { appUpdateManager.startUpdateFlowForResult(appUpdateInfo, AppUpdateType.IMMEDIATE, HomeActivity.this, WEATHER_FORECAST_APP_UPDATE_REQ_CODE); } catch (IntentSender.SendIntentException exception) { Toaster.errorToast(this, \"Update Failed\"); } } }); } }"}]}}
{"project_id":128,"chunk_id":0,"content":{"main_file_path":"WeatherApp-Android-master\\app\\src\\main\\java\\com\\aniketjain\\weatherapp\\adapter\\DaysAdapter.java","main_file_content":"package com.aniketjain.weatherapp.adapter; import android.annotation.SuppressLint; import android.content.Context; import android.util.Log; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.ImageView; import android.widget.RelativeLayout; import android.widget.TextView; import androidx.annotation.NonNull; import androidx.recyclerview.widget.RecyclerView; import com.android.volley.Request; import com.android.volley.RequestQueue; import com.android.volley.toolbox.JsonObjectRequest; import com.android.volley.toolbox.Volley; import com.aniketjain.weatherapp.R; import com.aniketjain.weatherapp.update.UpdateUI; import com.aniketjain.weatherapp.url.URL; import com.github.ybq.android.spinkit.SpinKitView; import org.json.JSONException; import java.text.SimpleDateFormat; import java.util.Date; import java.util.Locale; public class DaysAdapter extends RecyclerView.Adapter<DaysAdapter.DayViewHolder> { private final Context context; public DaysAdapter(Context context) { this.context = context; } private String updated_at, min, max, pressure, wind_speed, humidity; private int condition; private long update_time, sunset, sunrise; @NonNull @Override public DayViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) { View view = LayoutInflater.from(context).inflate(R.layout.day_item_layout, parent, false); return new DayViewHolder(view); } @Override public void onBindViewHolder(@NonNull DayViewHolder holder, int position) { getDailyWeatherInfo(position + 1, holder); } @Override public int getItemCount() { return 6; } @SuppressLint(\"DefaultLocale\") private void getDailyWeatherInfo(int i, DayViewHolder holder) { URL url = new URL(); RequestQueue requestQueue = Volley.newRequestQueue(context); JsonObjectRequest jsonObjectRequest = new JsonObjectRequest(Request.Method.GET, url.getLink(), null, response -> { try { update_time = response.getJSONObject(\"current\").getLong(\"dt\"); updated_at = new SimpleDateFormat(\"EEEE\", Locale.ENGLISH).format(new Date((update_time * 1000) + (i * 864_000_00L))); condition = response.getJSONArray(\"daily\").getJSONObject(i).getJSONArray(\"weather\").getJSONObject(0).getInt(\"id\"); sunrise = response.getJSONArray(\"daily\").getJSONObject(i).getLong(\"sunrise\"); sunset = response.getJSONArray(\"daily\").getJSONObject(i).getLong(\"sunset\"); min = String.format(\"%.0f\", response.getJSONArray(\"daily\").getJSONObject(i).getJSONObject(\"temp\").getDouble(\"min\") - 273.15); max = String.format(\"%.0f\", response.getJSONArray(\"daily\").getJSONObject(i).getJSONObject(\"temp\").getDouble(\"max\") - 273.15); pressure = response.getJSONArray(\"daily\").getJSONObject(i).getString(\"pressure\"); wind_speed = response.getJSONArray(\"daily\").getJSONObject(i).getString(\"wind_speed\"); humidity = response.getJSONArray(\"daily\").getJSONObject(i).getString(\"humidity\"); updateUI(holder); hideProgressBar(holder); } catch (JSONException e) { e.printStackTrace(); } }, null); requestQueue.add(jsonObjectRequest); Log.i(\"json_req\", \"Day \" + i); } @SuppressLint(\"SetTextI18n\") private void updateUI(DayViewHolder holder) { String day = UpdateUI.TranslateDay(updated_at, context); holder.dTime.setText(day); holder.temp_min.setText(min + \"°C\"); holder.temp_max.setText(max + \"°C\"); holder.pressure.setText(pressure + \" mb\"); holder.wind.setText(wind_speed + \" km/h\"); holder.humidity.setText(humidity + \"%\"); holder.icon.setImageResource( context.getResources().getIdentifier( UpdateUI.getIconID(condition, update_time, sunrise, sunset), \"drawable\", context.getPackageName() )); } private void hideProgressBar(DayViewHolder holder) { holder.progress.setVisibility(View.GONE); holder.layout.setVisibility(View.VISIBLE); } static class DayViewHolder extends RecyclerView.ViewHolder { SpinKitView progress; RelativeLayout layout; TextView dTime, temp_min, temp_max, pressure, wind, humidity; ImageView icon; public DayViewHolder(@NonNull View itemView) { super(itemView); progress = itemView.findViewById(R.id.day_progress_bar); layout = itemView.findViewById(R.id.day_relative_layout); dTime = itemView.findViewById(R.id.day_time); temp_min = itemView.findViewById(R.id.day_min_temp); temp_max = itemView.findViewById(R.id.day_max_temp); pressure = itemView.findViewById(R.id.day_pressure); wind = itemView.findViewById(R.id.day_wind); humidity = itemView.findViewById(R.id.day_humidity); icon = itemView.findViewById(R.id.day_icon); } } }","dependencies":[{"file_path":"WeatherApp-Android-master\\app\\src\\main\\java\\com\\aniketjain\\weatherapp\\update\\UpdateUI.java","file_content":"package com.aniketjain.weatherapp.update; import android.content.Context; import com.aniketjain.weatherapp.R; public class UpdateUI { public static String getIconID(int condition, long update_time, long sunrise, long sunset) { if (condition >= 200 && condition <= 232) return \"thunderstorm\"; else if (condition >= 300 && condition <= 321) return \"drizzle\"; else if (condition >= 500 && condition <= 531) return \"rain\"; else if (condition >= 600 && condition <= 622) return \"snow\"; else if (condition >= 701 && condition <= 781) return \"wind\"; else if (condition == 800) { if (update_time >= sunrise && update_time <= sunset) return \"clear_day\"; else return \"clear_night\"; } else if (condition == 801) { if (update_time >= sunrise && update_time <= sunset) return \"few_clouds_day\"; else return \"few_clouds_night\"; } else if (condition == 802) return \"scattered_clouds\"; else if (condition == 803 || condition == 804) return \"broken_clouds\"; return null; } public static String TranslateDay(String dayToBeTranslated, Context context) { switch (dayToBeTranslated.trim()) { case \"Monday\": return context.getResources().getString(R.string.monday); case \"Tuesday\": return context.getResources().getString(R.string.tuesday); case \"Wednesday\": return context.getResources().getString(R.string.wednesday); case \"Thursday\": return context.getResources().getString(R.string.thursday); case \"Friday\": return context.getResources().getString(R.string.friday); case \"Saturday\": return context.getResources().getString(R.string.saturday); case \"Sunday\": return context.getResources().getString(R.string.sunday); } return dayToBeTranslated; } }"},{"file_path":"WeatherApp-Android-master\\app\\src\\main\\java\\com\\aniketjain\\weatherapp\\url\\URL.java","file_content":"package com.aniketjain.weatherapp.url; import com.aniketjain.weatherapp.location.LocationCord; public class URL { private String link; private static String city_url; public URL() { link = \"https: + LocationCord.lat + \"&lon=\" + LocationCord.lon + \"&appid=\" + LocationCord.API_KEY; } public String getLink() { return link; } public static void setCity_url(String cityName) { city_url = \"https: } public static String getCity_url() { return city_url; } }"}]}}
{"project_id":128,"chunk_id":0,"content":{"main_file_path":"WeatherApp-Android-master\\app\\src\\main\\java\\com\\aniketjain\\weatherapp\\location\\CityFinder.java","main_file_content":"package com.aniketjain.weatherapp.location; import android.content.Context; import android.location.Address; import android.location.Geocoder; import android.location.Location; import android.util.Log; import java.util.List; import java.util.Locale; public class CityFinder { public static void setLongitudeLatitude(Location location) { try { LocationCord.lat = String.valueOf(location.getLatitude()); LocationCord.lon = String.valueOf(location.getLongitude()); Log.d(\"location_lat\", LocationCord.lat); Log.d(\"location_lon\", LocationCord.lon); } catch (NullPointerException e) { e.printStackTrace(); } } public static String getCityNameUsingNetwork(Context context, Location location) { String city = \"\"; try { Geocoder geocoder = new Geocoder(context, Locale.getDefault()); List<Address> addresses = geocoder.getFromLocation(location.getLatitude(), location.getLongitude(), 1); city = addresses.get(0).getLocality(); Log.d(\"city\", city); } catch (Exception e) { Log.d(\"city\", \"Error to find the city.\"); } return city; } }","dependencies":[]}}
{"project_id":128,"chunk_id":0,"content":{"main_file_path":"WeatherApp-Android-master\\app\\src\\main\\java\\com\\aniketjain\\weatherapp\\location\\LocationCord.java","main_file_content":"package com.aniketjain.weatherapp.location; public class LocationCord { public static String lat = \"\"; public static String lon = \"\"; public final static String API_KEY = \"0bc14881636d2234e8c17736a470535f\"; }","dependencies":[]}}
{"project_id":128,"chunk_id":0,"content":{"main_file_path":"WeatherApp-Android-master\\app\\src\\main\\java\\com\\aniketjain\\weatherapp\\network\\InternetConnectivity.java","main_file_content":"package com.aniketjain.weatherapp.network; import android.content.Context; import android.net.ConnectivityManager; import android.net.NetworkInfo; public class InternetConnectivity { public static boolean isInternetConnected(Context context) { ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE); return connectivityManager.getNetworkInfo(ConnectivityManager.TYPE_MOBILE).getState() == NetworkInfo.State.CONNECTED || connectivityManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI).getState() == NetworkInfo.State.CONNECTED; } }","dependencies":[]}}
{"project_id":128,"chunk_id":0,"content":{"main_file_path":"WeatherApp-Android-master\\app\\src\\main\\java\\com\\aniketjain\\weatherapp\\toast\\Toaster.java","main_file_content":"package com.aniketjain.weatherapp.toast; import android.content.Context; import com.aniketjain.roastedtoast.Toasty; import com.aniketjain.weatherapp.R; public class Toaster { public static void successToast(Context context, String msg) { Toasty.custom( context, msg, R.drawable.ic_baseline_check_24, \"#454B54\", 14, \"#EEEEEE\"); } public static void errorToast(Context context, String msg) { Toasty.custom( context, msg, R.drawable.ic_baseline_error_outline_24, \"#454B54\", 14, \"#EEEEEE\"); } }","dependencies":[]}}
{"project_id":128,"chunk_id":0,"content":{"main_file_path":"WeatherApp-Android-master\\app\\src\\main\\java\\com\\aniketjain\\weatherapp\\update\\UpdateUI.java","main_file_content":"package com.aniketjain.weatherapp.update; import android.content.Context; import com.aniketjain.weatherapp.R; public class UpdateUI { public static String getIconID(int condition, long update_time, long sunrise, long sunset) { if (condition >= 200 && condition <= 232) return \"thunderstorm\"; else if (condition >= 300 && condition <= 321) return \"drizzle\"; else if (condition >= 500 && condition <= 531) return \"rain\"; else if (condition >= 600 && condition <= 622) return \"snow\"; else if (condition >= 701 && condition <= 781) return \"wind\"; else if (condition == 800) { if (update_time >= sunrise && update_time <= sunset) return \"clear_day\"; else return \"clear_night\"; } else if (condition == 801) { if (update_time >= sunrise && update_time <= sunset) return \"few_clouds_day\"; else return \"few_clouds_night\"; } else if (condition == 802) return \"scattered_clouds\"; else if (condition == 803 || condition == 804) return \"broken_clouds\"; return null; } public static String TranslateDay(String dayToBeTranslated, Context context) { switch (dayToBeTranslated.trim()) { case \"Monday\": return context.getResources().getString(R.string.monday); case \"Tuesday\": return context.getResources().getString(R.string.tuesday); case \"Wednesday\": return context.getResources().getString(R.string.wednesday); case \"Thursday\": return context.getResources().getString(R.string.thursday); case \"Friday\": return context.getResources().getString(R.string.friday); case \"Saturday\": return context.getResources().getString(R.string.saturday); case \"Sunday\": return context.getResources().getString(R.string.sunday); } return dayToBeTranslated; } }","dependencies":[]}}
{"project_id":128,"chunk_id":0,"content":{"main_file_path":"WeatherApp-Android-master\\app\\src\\main\\java\\com\\aniketjain\\weatherapp\\url\\URL.java","main_file_content":"package com.aniketjain.weatherapp.url; import com.aniketjain.weatherapp.location.LocationCord; public class URL { private String link; private static String city_url; public URL() { link = \"https: + LocationCord.lat + \"&lon=\" + LocationCord.lon + \"&appid=\" + LocationCord.API_KEY; } public String getLink() { return link; } public static void setCity_url(String cityName) { city_url = \"https: } public static String getCity_url() { return city_url; } }","dependencies":[]}}
{"project_id":128,"chunk_id":0,"content":{"main_file_path":"WeatherApp-Android-master\\app\\src\\test\\java\\com\\aniketjain\\weatherapp\\ExampleUnitTest.java","main_file_content":"package com.aniketjain.weatherapp; import org.junit.Test; import static org.junit.Assert.*; public class ExampleUnitTest { @Test public void addition_isCorrect() { assertEquals(4, 2 + 2); } }","dependencies":[]}}
{"project_id":129,"chunk_id":0,"content":{"main_file_path":"web-server-master\\lightweight-webserver\\src\\main\\java\\xdvrx1_serverProject\\ClientRequest.java","main_file_content":"package xdvrx1_serverProject; import java.io.*; import java.net.*; import java.util.logging.*; public class ClientRequest implements Runnable { private String defaultPage = \"index.html\"; private File rootDirectory; private Socket connection; private final static Logger requestLogger = Logger.getLogger(ClientRequest.class.getCanonicalName()); public ClientRequest(File rootDirectory, String defaultPage, Socket connection) { if (rootDirectory.isFile()) { throw new IllegalArgumentException(\"rootDirectory must be\" + \"a directory, not a file\"); } try { rootDirectory = rootDirectory.getCanonicalFile(); } catch (IOException ex) { requestLogger.log(Level.WARNING, \"IOException\", ex); } this.rootDirectory = rootDirectory; if (defaultPage != null) { this.defaultPage = defaultPage; } this.connection = connection; } @Override public void run() { try { OutputStream raw = new BufferedOutputStream(connection.getOutputStream()); Writer out = new OutputStreamWriter(raw); BufferedWriter bufferedOut = new BufferedWriter(out); BufferedInputStream bis = new BufferedInputStream(connection.getInputStream()); Reader in = new InputStreamReader(bis, \"US-ASCII\"); ReadInputStream readInputStream = new ReadInputStream(); StringBuffer userRequest = readInputStream.readUserRequest(bis, in, connection); String userRequestToString = userRequest.toString(); int indexOfFirst = userRequestToString.indexOf(\"\\r\\n\"); String firstLine = userRequestToString .substring(0,indexOfFirst); requestLogger .info(connection .getRemoteSocketAddress() + \" \" + firstLine); String[] token = firstLine.split(\"\\\\s+\"); String method = token[0]; String http_version = \"\"; if (method.equals(\"GET\")) { GETMethod getMethod = new GETMethod(); byte[] _data = getMethod.processGET(rootDirectory, token, defaultPage, http_version, out); raw.write(_data); raw.flush(); } else if(method.equals(\"POST\")) { POSTMethod postMethod = new POSTMethod(); String requestBody = postMethod.returnPOSTData(userRequestToString); bufferedOut.write(\"data recorded:\"); bufferedOut.newLine(); bufferedOut.write(requestBody); bufferedOut.flush(); } else { if (http_version.startsWith(\"HTTP/\")) { ServerHeader.serverHeader(out, \"HTTP/1.0 501 Not Implemented\", \"text/html; charset=utf-8\", NotSupportedMessage.content.length()); } out.write(NotSupportedMessage.content); out.flush(); } } catch (IOException ex) { requestLogger .log(Level.WARNING, \"Can't talk to: \" + connection.getRemoteSocketAddress(), ex); } finally { try { connection.close(); } catch (IOException ex) { requestLogger.log(Level.WARNING, \"IO exception\", ex); } } } }","dependencies":[{"file_path":"web-server-master\\lightweight-webserver\\src\\main\\java\\xdvrx1_serverProject\\GETMethod.java","file_content":"package xdvrx1_serverProject; import java.nio.file.Files; import java.io.*; import java.net.*; class GETMethod { byte[] processGET(File rootDirectory, String[] token, String defaultPage, String http_version, Writer out) { try { String fileName = token[1]; if (fileName.endsWith(\"/\")) { fileName = fileName + defaultPage; } String contentType = URLConnection.getFileNameMap().getContentTypeFor(fileName); if (token.length > 2) { http_version = token[2]; } File actualFile = new File(rootDirectory, fileName.substring(1, fileName.length())); String root = rootDirectory.getPath(); if (actualFile.canRead() && actualFile.getCanonicalPath().startsWith(root)) { byte[] _data = Files.readAllBytes(actualFile.toPath()); if (http_version.startsWith(\"HTTP/\")) { ServerHeader .serverHeader(out, \"HTTP/1.0 200 OK\", contentType, _data.length); } return _data; } else { if (http_version.startsWith(\"HTTP/\")) { ServerHeader .serverHeader(out, \"HTTP/1.0 404 File Not Found\", \"text/html; charset=utf-8\", FileNotFoundMessage.content.length()); } out.write(FileNotFoundMessage.content); out.flush(); return null; } } catch (IOException ioe) { System.out.println(ioe.getMessage()); return null; } } }"},{"file_path":"web-server-master\\lightweight-webserver\\src\\main\\java\\xdvrx1_serverProject\\POSTMethod.java","file_content":"package xdvrx1_serverProject; class POSTMethod { String returnPOSTData(String userRequestToString) { String requestBody = userRequestToString .substring(userRequestToString.lastIndexOf(\"\\r\\n\\r\\n\") + 4); return requestBody; } }"},{"file_path":"web-server-master\\lightweight-webserver\\src\\main\\java\\xdvrx1_serverProject\\ReadInputStream.java","file_content":"package xdvrx1_serverProject; import java.io.*; import java.net.*; class ReadInputStream { StringBuffer readUserRequest(BufferedInputStream bis, Reader in, Socket connection) { StringBuffer userRequest = new StringBuffer(); try { int bufferSize = bis.available(); while (true) { if (userRequest.length() > bufferSize-1) { if (connection.isConnected()) { connection.shutdownInput(); } break; } int c = in.read(); userRequest.append((char) c); if (c == '\\n' || c == '\\r' || c == -1) continue; } return userRequest; } catch (IOException ioe) { System.out.println(ioe.getMessage()); return null; } } }"},{"file_path":"web-server-master\\lightweight-webserver\\src\\main\\java\\xdvrx1_serverProject\\ServerHeader.java","file_content":"package xdvrx1_serverProject; import java.util.*; import java.io.*; class ServerHeader { static void serverHeader(Writer out, String responseCode, String contentType, int length) throws IOException { Date current = new Date(); out.write(responseCode + \"\\r\\n\"); out.write(\"Date: \" + current + \"\\r\\n\"); out.write(\"Server: `xdvrx1_Server` 3.0\\r\\n\"); out.write(\"Content-length: \" + length + \"\\r\\n\"); out.write(\"Content-type: \" + contentType + \"\\r\\n\\r\\n\"); out.flush(); } }"}]}}
{"project_id":129,"chunk_id":0,"content":{"main_file_path":"web-server-master\\lightweight-webserver\\src\\main\\java\\xdvrx1_serverProject\\FileNotFoundMessage.java","main_file_content":"package xdvrx1_serverProject; class FileNotFoundMessage { static final String content = new StringBuilder(\"<html>\\r\\n\") .append(\"<head><title>File Not Found</title>\\r\\n\") .append(\"</head>\\r\\n\") .append(\"<body>\") .append(\"<h1>HTTP Error 404: File Not Found [Try again later]</h1>\\r\\n\") .append(\"</body></html>\\r\\n\") .toString(); }","dependencies":[]}}
{"project_id":129,"chunk_id":0,"content":{"main_file_path":"web-server-master\\lightweight-webserver\\src\\main\\java\\xdvrx1_serverProject\\FileWebServer.java","main_file_content":"package xdvrx1_serverProject; import java.util.concurrent.*; import java.io.*; import java.net.*; import java.util.logging.*; public class FileWebServer { private final File rootDirectory; private final int port; private static final int pool_count = 1000; private static final String defaultPage = \"index.html\"; private static final Logger serverLogger = Logger.getLogger(FileWebServer .class.getCanonicalName()); public FileWebServer(File rootDirectory, int port) throws IOException { if (!rootDirectory.isDirectory()) { throw new IOException(rootDirectory + \" is not a directory\"); } this.rootDirectory = rootDirectory; this.port = port; } public void start() throws IOException { ExecutorService pool = Executors.newFixedThreadPool(pool_count); try (ServerSocket server = new ServerSocket(port)) { serverLogger.info(\"Listening on port \" + server.getLocalPort()); serverLogger.info(\"@DocumentRoot\"); while (true) { try { Socket request = server.accept(); Runnable r = new ClientRequest(rootDirectory, defaultPage, request); pool.submit(r); } catch (IOException ex) { serverLogger.log(Level.WARNING, \"Error accepting connection\", ex); } } } } }","dependencies":[{"file_path":"web-server-master\\lightweight-webserver\\src\\main\\java\\xdvrx1_serverProject\\ClientRequest.java","file_content":"package xdvrx1_serverProject; import java.io.*; import java.net.*; import java.util.logging.*; public class ClientRequest implements Runnable { private String defaultPage = \"index.html\"; private File rootDirectory; private Socket connection; private final static Logger requestLogger = Logger.getLogger(ClientRequest.class.getCanonicalName()); public ClientRequest(File rootDirectory, String defaultPage, Socket connection) { if (rootDirectory.isFile()) { throw new IllegalArgumentException(\"rootDirectory must be\" + \"a directory, not a file\"); } try { rootDirectory = rootDirectory.getCanonicalFile(); } catch (IOException ex) { requestLogger.log(Level.WARNING, \"IOException\", ex); } this.rootDirectory = rootDirectory; if (defaultPage != null) { this.defaultPage = defaultPage; } this.connection = connection; } @Override public void run() { try { OutputStream raw = new BufferedOutputStream(connection.getOutputStream()); Writer out = new OutputStreamWriter(raw); BufferedWriter bufferedOut = new BufferedWriter(out); BufferedInputStream bis = new BufferedInputStream(connection.getInputStream()); Reader in = new InputStreamReader(bis, \"US-ASCII\"); ReadInputStream readInputStream = new ReadInputStream(); StringBuffer userRequest = readInputStream.readUserRequest(bis, in, connection); String userRequestToString = userRequest.toString(); int indexOfFirst = userRequestToString.indexOf(\"\\r\\n\"); String firstLine = userRequestToString .substring(0,indexOfFirst); requestLogger .info(connection .getRemoteSocketAddress() + \" \" + firstLine); String[] token = firstLine.split(\"\\\\s+\"); String method = token[0]; String http_version = \"\"; if (method.equals(\"GET\")) { GETMethod getMethod = new GETMethod(); byte[] _data = getMethod.processGET(rootDirectory, token, defaultPage, http_version, out); raw.write(_data); raw.flush(); } else if(method.equals(\"POST\")) { POSTMethod postMethod = new POSTMethod(); String requestBody = postMethod.returnPOSTData(userRequestToString); bufferedOut.write(\"data recorded:\"); bufferedOut.newLine(); bufferedOut.write(requestBody); bufferedOut.flush(); } else { if (http_version.startsWith(\"HTTP/\")) { ServerHeader.serverHeader(out, \"HTTP/1.0 501 Not Implemented\", \"text/html; charset=utf-8\", NotSupportedMessage.content.length()); } out.write(NotSupportedMessage.content); out.flush(); } } catch (IOException ex) { requestLogger .log(Level.WARNING, \"Can't talk to: \" + connection.getRemoteSocketAddress(), ex); } finally { try { connection.close(); } catch (IOException ex) { requestLogger.log(Level.WARNING, \"IO exception\", ex); } } } }"}]}}
{"project_id":129,"chunk_id":0,"content":{"main_file_path":"web-server-master\\lightweight-webserver\\src\\main\\java\\xdvrx1_serverProject\\GETMethod.java","main_file_content":"package xdvrx1_serverProject; import java.nio.file.Files; import java.io.*; import java.net.*; class GETMethod { byte[] processGET(File rootDirectory, String[] token, String defaultPage, String http_version, Writer out) { try { String fileName = token[1]; if (fileName.endsWith(\"/\")) { fileName = fileName + defaultPage; } String contentType = URLConnection.getFileNameMap().getContentTypeFor(fileName); if (token.length > 2) { http_version = token[2]; } File actualFile = new File(rootDirectory, fileName.substring(1, fileName.length())); String root = rootDirectory.getPath(); if (actualFile.canRead() && actualFile.getCanonicalPath().startsWith(root)) { byte[] _data = Files.readAllBytes(actualFile.toPath()); if (http_version.startsWith(\"HTTP/\")) { ServerHeader .serverHeader(out, \"HTTP/1.0 200 OK\", contentType, _data.length); } return _data; } else { if (http_version.startsWith(\"HTTP/\")) { ServerHeader .serverHeader(out, \"HTTP/1.0 404 File Not Found\", \"text/html; charset=utf-8\", FileNotFoundMessage.content.length()); } out.write(FileNotFoundMessage.content); out.flush(); return null; } } catch (IOException ioe) { System.out.println(ioe.getMessage()); return null; } } }","dependencies":[{"file_path":"web-server-master\\lightweight-webserver\\src\\main\\java\\xdvrx1_serverProject\\ServerHeader.java","file_content":"package xdvrx1_serverProject; import java.util.*; import java.io.*; class ServerHeader { static void serverHeader(Writer out, String responseCode, String contentType, int length) throws IOException { Date current = new Date(); out.write(responseCode + \"\\r\\n\"); out.write(\"Date: \" + current + \"\\r\\n\"); out.write(\"Server: `xdvrx1_Server` 3.0\\r\\n\"); out.write(\"Content-length: \" + length + \"\\r\\n\"); out.write(\"Content-type: \" + contentType + \"\\r\\n\\r\\n\"); out.flush(); } }"}]}}
{"project_id":129,"chunk_id":0,"content":{"main_file_path":"web-server-master\\lightweight-webserver\\src\\main\\java\\xdvrx1_serverProject\\MainMethod.java","main_file_content":"package xdvrx1_serverProject; import java.io.*; class MainMethod { public static void main(String[] args) { ServerApp serverApp = new ServerApp(); serverApp.build(); } }","dependencies":[{"file_path":"web-server-master\\lightweight-webserver\\src\\main\\java\\xdvrx1_serverProject\\ServerApp.java","file_content":"package xdvrx1_serverProject; import java.io.*; class ServerApp { public void build() { try { File currentDir = new File(\".\"); FileWebServer filewebserver = new FileWebServer(currentDir, 80); filewebserver.start(); } catch (IOException ex) { System.out.println(ex.getMessage()); } } }"}]}}
{"project_id":129,"chunk_id":0,"content":{"main_file_path":"web-server-master\\lightweight-webserver\\src\\main\\java\\xdvrx1_serverProject\\NotSupportedMessage.java","main_file_content":"package xdvrx1_serverProject; class NotSupportedMessage { static final String content = new StringBuilder(\"<html>\\r\\n\") .append(\"<head><title>Not Implemented</title>\\r\\n\") .append(\"</head>\\r\\n\") .append(\"<body>\") .append(\"<h1>HTTP Error 501: Not Yet Supported Method</h1>\\r\\n\") .append(\"</body></html>\\r\\n\") .toString(); }","dependencies":[]}}
{"project_id":129,"chunk_id":0,"content":{"main_file_path":"web-server-master\\lightweight-webserver\\src\\main\\java\\xdvrx1_serverProject\\POSTMethod.java","main_file_content":"package xdvrx1_serverProject; class POSTMethod { String returnPOSTData(String userRequestToString) { String requestBody = userRequestToString .substring(userRequestToString.lastIndexOf(\"\\r\\n\\r\\n\") + 4); return requestBody; } }","dependencies":[]}}
{"project_id":129,"chunk_id":0,"content":{"main_file_path":"web-server-master\\lightweight-webserver\\src\\main\\java\\xdvrx1_serverProject\\ReadInputStream.java","main_file_content":"package xdvrx1_serverProject; import java.io.*; import java.net.*; class ReadInputStream { StringBuffer readUserRequest(BufferedInputStream bis, Reader in, Socket connection) { StringBuffer userRequest = new StringBuffer(); try { int bufferSize = bis.available(); while (true) { if (userRequest.length() > bufferSize-1) { if (connection.isConnected()) { connection.shutdownInput(); } break; } int c = in.read(); userRequest.append((char) c); if (c == '\\n' || c == '\\r' || c == -1) continue; } return userRequest; } catch (IOException ioe) { System.out.println(ioe.getMessage()); return null; } } }","dependencies":[]}}
{"project_id":129,"chunk_id":0,"content":{"main_file_path":"web-server-master\\lightweight-webserver\\src\\main\\java\\xdvrx1_serverProject\\ServerApp.java","main_file_content":"package xdvrx1_serverProject; import java.io.*; class ServerApp { public void build() { try { File currentDir = new File(\".\"); FileWebServer filewebserver = new FileWebServer(currentDir, 80); filewebserver.start(); } catch (IOException ex) { System.out.println(ex.getMessage()); } } }","dependencies":[{"file_path":"web-server-master\\lightweight-webserver\\src\\main\\java\\xdvrx1_serverProject\\FileWebServer.java","file_content":"package xdvrx1_serverProject; import java.util.concurrent.*; import java.io.*; import java.net.*; import java.util.logging.*; public class FileWebServer { private final File rootDirectory; private final int port; private static final int pool_count = 1000; private static final String defaultPage = \"index.html\"; private static final Logger serverLogger = Logger.getLogger(FileWebServer .class.getCanonicalName()); public FileWebServer(File rootDirectory, int port) throws IOException { if (!rootDirectory.isDirectory()) { throw new IOException(rootDirectory + \" is not a directory\"); } this.rootDirectory = rootDirectory; this.port = port; } public void start() throws IOException { ExecutorService pool = Executors.newFixedThreadPool(pool_count); try (ServerSocket server = new ServerSocket(port)) { serverLogger.info(\"Listening on port \" + server.getLocalPort()); serverLogger.info(\"@DocumentRoot\"); while (true) { try { Socket request = server.accept(); Runnable r = new ClientRequest(rootDirectory, defaultPage, request); pool.submit(r); } catch (IOException ex) { serverLogger.log(Level.WARNING, \"Error accepting connection\", ex); } } } } }"}]}}
{"project_id":129,"chunk_id":0,"content":{"main_file_path":"web-server-master\\lightweight-webserver\\src\\main\\java\\xdvrx1_serverProject\\ServerHeader.java","main_file_content":"package xdvrx1_serverProject; import java.util.*; import java.io.*; class ServerHeader { static void serverHeader(Writer out, String responseCode, String contentType, int length) throws IOException { Date current = new Date(); out.write(responseCode + \"\\r\\n\"); out.write(\"Date: \" + current + \"\\r\\n\"); out.write(\"Server: `xdvrx1_Server` 3.0\\r\\n\"); out.write(\"Content-length: \" + length + \"\\r\\n\"); out.write(\"Content-type: \" + contentType + \"\\r\\n\\r\\n\"); out.flush(); } }","dependencies":[]}}
{"project_id":129,"chunk_id":0,"content":{"main_file_path":"web-server-master\\lightweight-webserver\\src\\test\\java\\xdvrx1_serverProject\\ClientRequestTest.java","main_file_content":"package xdvrx1_serverProject; import java.io.*; import java.net.*; import org.junit.*; public class ClientRequestTest { File rootDirectory; String defaultPage; Socket connection; File tempFile; ClientRequest clientRequest; @Before public void setUp() throws Exception { rootDirectory = new File(\".\"); defaultPage = \"index.html\"; connection = new Socket(); tempFile = File.createTempFile(\"sample\", null); clientRequest = new ClientRequest(rootDirectory, defaultPage, connection); } @Test public void testObjectShouldNotBeNull() throws IOException { Assert.assertNotNull(clientRequest); } @Test(expected = IllegalArgumentException.class) public void testConstructorShouldThrowException() { ClientRequest clientRequest2 = new ClientRequest(tempFile, defaultPage, connection); } @Test public void testConstructorShouldNotThrowException() { ClientRequest clientRequest3 = new ClientRequest(rootDirectory, defaultPage, connection); } @After public void tearDown() throws Exception { tempFile.deleteOnExit(); } }","dependencies":[{"file_path":"web-server-master\\lightweight-webserver\\src\\main\\java\\xdvrx1_serverProject\\ClientRequest.java","file_content":"package xdvrx1_serverProject; import java.io.*; import java.net.*; import java.util.logging.*; public class ClientRequest implements Runnable { private String defaultPage = \"index.html\"; private File rootDirectory; private Socket connection; private final static Logger requestLogger = Logger.getLogger(ClientRequest.class.getCanonicalName()); public ClientRequest(File rootDirectory, String defaultPage, Socket connection) { if (rootDirectory.isFile()) { throw new IllegalArgumentException(\"rootDirectory must be\" + \"a directory, not a file\"); } try { rootDirectory = rootDirectory.getCanonicalFile(); } catch (IOException ex) { requestLogger.log(Level.WARNING, \"IOException\", ex); } this.rootDirectory = rootDirectory; if (defaultPage != null) { this.defaultPage = defaultPage; } this.connection = connection; } @Override public void run() { try { OutputStream raw = new BufferedOutputStream(connection.getOutputStream()); Writer out = new OutputStreamWriter(raw); BufferedWriter bufferedOut = new BufferedWriter(out); BufferedInputStream bis = new BufferedInputStream(connection.getInputStream()); Reader in = new InputStreamReader(bis, \"US-ASCII\"); ReadInputStream readInputStream = new ReadInputStream(); StringBuffer userRequest = readInputStream.readUserRequest(bis, in, connection); String userRequestToString = userRequest.toString(); int indexOfFirst = userRequestToString.indexOf(\"\\r\\n\"); String firstLine = userRequestToString .substring(0,indexOfFirst); requestLogger .info(connection .getRemoteSocketAddress() + \" \" + firstLine); String[] token = firstLine.split(\"\\\\s+\"); String method = token[0]; String http_version = \"\"; if (method.equals(\"GET\")) { GETMethod getMethod = new GETMethod(); byte[] _data = getMethod.processGET(rootDirectory, token, defaultPage, http_version, out); raw.write(_data); raw.flush(); } else if(method.equals(\"POST\")) { POSTMethod postMethod = new POSTMethod(); String requestBody = postMethod.returnPOSTData(userRequestToString); bufferedOut.write(\"data recorded:\"); bufferedOut.newLine(); bufferedOut.write(requestBody); bufferedOut.flush(); } else { if (http_version.startsWith(\"HTTP/\")) { ServerHeader.serverHeader(out, \"HTTP/1.0 501 Not Implemented\", \"text/html; charset=utf-8\", NotSupportedMessage.content.length()); } out.write(NotSupportedMessage.content); out.flush(); } } catch (IOException ex) { requestLogger .log(Level.WARNING, \"Can't talk to: \" + connection.getRemoteSocketAddress(), ex); } finally { try { connection.close(); } catch (IOException ex) { requestLogger.log(Level.WARNING, \"IO exception\", ex); } } } }"}]}}
{"project_id":129,"chunk_id":0,"content":{"main_file_path":"web-server-master\\lightweight-webserver\\src\\test\\java\\xdvrx1_serverProject\\FileWebServerTest.java","main_file_content":"package xdvrx1_serverProject; import java.io.*; import org.junit.*; public class FileWebServerTest { File rootDirectory; FileWebServer fileWebServer; File tempFile; @Before public void setUp() throws Exception { rootDirectory = new File(\".\"); fileWebServer = new FileWebServer(rootDirectory, 80); tempFile = File.createTempFile(\"sample\", null); } @Test public void testObjectShouldNotBeNull() { Assert.assertNotNull(fileWebServer); } @Test(expected = IOException.class) public void testConstructorShouldThrowException() throws IOException { FileWebServer fileWebServer2 = new FileWebServer(tempFile, 80); } @Test public void testConstructorShouldNotThrowException() throws IOException { FileWebServer fileWebServer3 = new FileWebServer(rootDirectory, 80); } @After public void tearDown() throws Exception { tempFile.deleteOnExit(); } }","dependencies":[{"file_path":"web-server-master\\lightweight-webserver\\src\\main\\java\\xdvrx1_serverProject\\FileWebServer.java","file_content":"package xdvrx1_serverProject; import java.util.concurrent.*; import java.io.*; import java.net.*; import java.util.logging.*; public class FileWebServer { private final File rootDirectory; private final int port; private static final int pool_count = 1000; private static final String defaultPage = \"index.html\"; private static final Logger serverLogger = Logger.getLogger(FileWebServer .class.getCanonicalName()); public FileWebServer(File rootDirectory, int port) throws IOException { if (!rootDirectory.isDirectory()) { throw new IOException(rootDirectory + \" is not a directory\"); } this.rootDirectory = rootDirectory; this.port = port; } public void start() throws IOException { ExecutorService pool = Executors.newFixedThreadPool(pool_count); try (ServerSocket server = new ServerSocket(port)) { serverLogger.info(\"Listening on port \" + server.getLocalPort()); serverLogger.info(\"@DocumentRoot\"); while (true) { try { Socket request = server.accept(); Runnable r = new ClientRequest(rootDirectory, defaultPage, request); pool.submit(r); } catch (IOException ex) { serverLogger.log(Level.WARNING, \"Error accepting connection\", ex); } } } } }"}]}}
{"project_id":129,"chunk_id":0,"content":{"main_file_path":"web-server-master\\lightweight-webserver\\src\\test\\java\\xdvrx1_serverProject\\GETMethodTest.java","main_file_content":"package xdvrx1_serverProject; import java.nio.file.Files; import java.io.*; import java.net.*; import org.junit.*; public class GETMethodTest { File rootDirectory; String defaultPage; String http_version; GETMethod getMethod; String firstLine; String[] token; File tempFile; OutputStream out; Writer out2; File rootDirectoryX; @Before public void setUp() throws Exception { rootDirectoryX = new File(\".\"); String absolutePath = rootDirectoryX.getCanonicalPath(); rootDirectory = new File(absolutePath); firstLine = \"GET /README.md HTTP/1.1\"; token = firstLine.split(\"\\\\s+\"); defaultPage = \"index.html\"; http_version = null; tempFile = File.createTempFile(\"tempFileXX\", \".txt\"); out = new FileOutputStream(tempFile); out = new BufferedOutputStream(out); out2 = new OutputStreamWriter(out, \"US-ASCII\"); getMethod = new GETMethod(); } @Test public void testObjectShouldNotBeNull() { Assert.assertNotNull(getMethod); Assert.assertNotNull(getMethod .processGET(rootDirectory, token, defaultPage, http_version, out2)); } @Test public void testMethodShouldReturnNull() { Assert.assertNull(getMethod. processGET(rootDirectoryX, token, defaultPage, http_version, out2)); } @After public void tearDown() throws Exception { tempFile.deleteOnExit(); } }","dependencies":[{"file_path":"web-server-master\\lightweight-webserver\\src\\main\\java\\xdvrx1_serverProject\\GETMethod.java","file_content":"package xdvrx1_serverProject; import java.nio.file.Files; import java.io.*; import java.net.*; class GETMethod { byte[] processGET(File rootDirectory, String[] token, String defaultPage, String http_version, Writer out) { try { String fileName = token[1]; if (fileName.endsWith(\"/\")) { fileName = fileName + defaultPage; } String contentType = URLConnection.getFileNameMap().getContentTypeFor(fileName); if (token.length > 2) { http_version = token[2]; } File actualFile = new File(rootDirectory, fileName.substring(1, fileName.length())); String root = rootDirectory.getPath(); if (actualFile.canRead() && actualFile.getCanonicalPath().startsWith(root)) { byte[] _data = Files.readAllBytes(actualFile.toPath()); if (http_version.startsWith(\"HTTP/\")) { ServerHeader .serverHeader(out, \"HTTP/1.0 200 OK\", contentType, _data.length); } return _data; } else { if (http_version.startsWith(\"HTTP/\")) { ServerHeader .serverHeader(out, \"HTTP/1.0 404 File Not Found\", \"text/html; charset=utf-8\", FileNotFoundMessage.content.length()); } out.write(FileNotFoundMessage.content); out.flush(); return null; } } catch (IOException ioe) { System.out.println(ioe.getMessage()); return null; } } }"}]}}
{"project_id":129,"chunk_id":0,"content":{"main_file_path":"web-server-master\\lightweight-webserver\\src\\test\\java\\xdvrx1_serverProject\\POSTMethodTest.java","main_file_content":"package xdvrx1_serverProject; import org.junit.*; public class POSTMethodTest { POSTMethod postMethod = new POSTMethod(); String userRequestToString = \"first line\" + \"\\r\\n\" + \"second line\" + \"\\r\\n\" + \"third line\" + \"\\r\\n\\r\\n\" + \"Hello World\"; @Test public void testTheLineEndingsOfClientRequest() { Assert.assertEquals(\"Hello World\", postMethod.returnPOSTData(userRequestToString)); } }","dependencies":[{"file_path":"web-server-master\\lightweight-webserver\\src\\main\\java\\xdvrx1_serverProject\\POSTMethod.java","file_content":"package xdvrx1_serverProject; class POSTMethod { String returnPOSTData(String userRequestToString) { String requestBody = userRequestToString .substring(userRequestToString.lastIndexOf(\"\\r\\n\\r\\n\") + 4); return requestBody; } }"}]}}
{"project_id":129,"chunk_id":0,"content":{"main_file_path":"web-server-master\\lightweight-webserver\\src\\test\\java\\xdvrx1_serverProject\\ReadInputStreamTest.java","main_file_content":"package xdvrx1_serverProject; import java.io.*; import java.net.*; import org.junit.*; public class ReadInputStreamTest { File rootDirectory = new File(\".\"); File tempFile; String defaultPage; Socket connection; InputStream is; OutputStream out; FileInputStream fin; BufferedInputStream bis; Reader in; Writer out2; ReadInputStream readInputStream; @Before public void setUp() throws Exception { tempFile = File.createTempFile(\"tempFileX\", \".txt\"); out = new FileOutputStream(tempFile); out = new BufferedOutputStream(out); out2 = new OutputStreamWriter(out, \"US-ASCII\"); out2.append('a'); out2.append('b'); out2.append('c'); out2.append('\\r'); out2.append('\\n'); out2.append(' '); out2.flush(); is = new FileInputStream(tempFile); bis = new BufferedInputStream(is); in = new InputStreamReader(bis, \"US-ASCII\"); readInputStream = new ReadInputStream(); defaultPage = \"index.html\"; connection = new Socket(); } @Test public void testMethodShouldReturnNotNull() { Assert.assertNotNull(readInputStream. readUserRequest(bis, in, connection)); } @Test public void testMethodShouldReturnAnObject() { StringBuffer expectedResult = new StringBuffer(); expectedResult.append('a'); expectedResult.append('b'); expectedResult.append('c'); expectedResult.append('\\r'); expectedResult.append('\\n'); expectedResult.append(' '); Assert.assertEquals(expectedResult.toString(), readInputStream. readUserRequest(bis, in, connection).toString()); } @Test(expected = IOException.class) public void testMethodShouldThrowException() throws IOException { in.close(); StringBuffer bufferResult = readInputStream.readUserRequest(bis, in, connection); if (bufferResult == null) throw new IOException(\"IOException\"); } @After public void tearDown() throws Exception { tempFile.deleteOnExit(); } }","dependencies":[{"file_path":"web-server-master\\lightweight-webserver\\src\\main\\java\\xdvrx1_serverProject\\ReadInputStream.java","file_content":"package xdvrx1_serverProject; import java.io.*; import java.net.*; class ReadInputStream { StringBuffer readUserRequest(BufferedInputStream bis, Reader in, Socket connection) { StringBuffer userRequest = new StringBuffer(); try { int bufferSize = bis.available(); while (true) { if (userRequest.length() > bufferSize-1) { if (connection.isConnected()) { connection.shutdownInput(); } break; } int c = in.read(); userRequest.append((char) c); if (c == '\\n' || c == '\\r' || c == -1) continue; } return userRequest; } catch (IOException ioe) { System.out.println(ioe.getMessage()); return null; } } }"}]}}
{"project_id":130,"chunk_id":0,"content":{"main_file_path":"Wild Animal Detection\\app\\src\\main\\java\\com\\throwntech\\staysafe\\activity_contacts_1.java","main_file_content":"package com.throwntech.staysafe; import android.os.Bundle; import androidx.appcompat.app.AppCompatActivity; public class activity_contacts_1 extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_contacts_1); } }","dependencies":[]}}
{"project_id":130,"chunk_id":0,"content":{"main_file_path":"Wild Animal Detection\\app\\src\\main\\java\\com\\throwntech\\staysafe\\activity_contacts_2.java","main_file_content":"package com.throwntech.staysafe; import android.os.Bundle; import androidx.appcompat.app.AppCompatActivity; public class activity_contacts_2 extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_contacts_2); } }","dependencies":[]}}
{"project_id":130,"chunk_id":0,"content":{"main_file_path":"Wild Animal Detection\\app\\src\\main\\java\\com\\throwntech\\staysafe\\activity_contacts_3.java","main_file_content":"package com.throwntech.staysafe; import android.os.Bundle; import androidx.appcompat.app.AppCompatActivity; public class activity_contacts_3 extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_contacts_3); } }","dependencies":[]}}
{"project_id":130,"chunk_id":0,"content":{"main_file_path":"Wild Animal Detection\\app\\src\\main\\java\\com\\throwntech\\staysafe\\MainActivity.java","main_file_content":"package com.throwntech.staysafe; import android.app.Dialog; import android.content.Intent; import android.os.Build; import android.os.CountDownTimer; import android.os.Bundle; import androidx.annotation.RequiresApi; import androidx.appcompat.app.AppCompatActivity; import android.util.Log; import android.widget.Toast; import com.google.android.gms.common.ConnectionResult; import com.google.android.gms.common.GoogleApiAvailability; import java.util.Objects; public class MainActivity extends AppCompatActivity { private static final String TAG = \"MainActivity\"; private static final int ERROR_DIALOG_REQUEST = 9001; @RequiresApi(api = Build.VERSION_CODES.KITKAT) @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Objects.requireNonNull(getSupportActionBar()).hide(); setContentView(R.layout.main_activity); if(isServicesOK()){ init(); } } public void init(){ CountDownTimer timer = new CountDownTimer(3000, 1000) { @Override public void onTick(long l) { } @Override public void onFinish() { Intent mapIntent = new Intent(MainActivity.this, MapActivity.class); startActivity(mapIntent); finish(); } }; timer.start(); } public boolean isServicesOK(){ Log.d(TAG, \"isServicesOK: Checking google services version\"); int available = GoogleApiAvailability.getInstance().isGooglePlayServicesAvailable(MainActivity.this); if(available == ConnectionResult.SUCCESS){ Log.d(TAG, \"isServicesOK: Google Play Services is working.\"); return true; } else if(GoogleApiAvailability.getInstance().isUserResolvableError(available)){ Log.d(TAG, \"isServicesOK: An error occurred but we can fix it\"); Dialog dialog = GoogleApiAvailability.getInstance().getErrorDialog(MainActivity.this, available, ERROR_DIALOG_REQUEST); dialog.show(); } else{ Toast.makeText(this, \"You can not make map requests\",Toast.LENGTH_SHORT).show(); } return false; } }","dependencies":[{"file_path":"Wild Animal Detection\\app\\src\\main\\java\\com\\throwntech\\staysafe\\MapActivity.java","file_content":"package com.throwntech.staysafe; import android.Manifest; import android.annotation.SuppressLint; import android.app.NotificationChannel; import android.app.NotificationManager; import android.app.PendingIntent; import android.content.Context; import android.content.Intent; import android.content.pm.PackageManager; import android.graphics.Bitmap; import android.graphics.BitmapFactory; import android.graphics.Canvas; import android.graphics.drawable.Drawable; import android.location.Location; import android.location.LocationManager; import android.net.Uri; import android.os.Build; import android.os.Bundle; import android.util.Log; import android.view.View; import android.widget.Button; import android.widget.TextView; import android.widget.Toast; import androidx.annotation.NonNull; import androidx.annotation.Nullable; import androidx.appcompat.app.AppCompatActivity; import androidx.cardview.widget.CardView; import androidx.core.app.ActivityCompat; import androidx.core.app.NotificationCompat; import androidx.core.content.ContextCompat; import com.google.android.gms.location.FusedLocationProviderClient; import com.google.android.gms.location.LocationServices; import com.google.android.gms.maps.CameraUpdateFactory; import com.google.android.gms.maps.GoogleMap; import com.google.android.gms.maps.OnMapReadyCallback; import com.google.android.gms.maps.SupportMapFragment; import com.google.android.gms.maps.model.BitmapDescriptor; import com.google.android.gms.maps.model.BitmapDescriptorFactory; import com.google.android.gms.maps.model.LatLng; import com.google.android.gms.maps.model.Marker; import com.google.android.gms.maps.model.MarkerOptions; import com.google.android.gms.tasks.OnCompleteListener; import com.google.android.gms.tasks.Task; import com.google.firebase.database.ChildEventListener; import com.google.firebase.database.DataSnapshot; import com.google.firebase.database.DatabaseError; import com.google.firebase.database.DatabaseReference; import com.google.firebase.database.FirebaseDatabase; import java.text.SimpleDateFormat; import java.util.Date; import java.util.HashMap; import static com.google.android.gms.maps.GoogleMap.OnMapClickListener; import static com.google.android.gms.maps.GoogleMap.OnMarkerClickListener; import static com.throwntech.staysafe.R.drawable.ic_red_alert; public class MapActivity extends AppCompatActivity implements OnMapReadyCallback, OnMarkerClickListener { private static final String TAG = \"MapActivity\"; private static final String FINE_LOCATION = Manifest.permission.ACCESS_FINE_LOCATION; private static final String COARSE_LOCATION = Manifest.permission.ACCESS_COARSE_LOCATION; private static final int LOCATION_PERMISSION_REQUEST_CODE = 1; private static final int REQUEST_PHONE_CALL = 1; LocationManager lm; private Boolean mLocationPermissionGranted = false; private GoogleMap mMap; private HashMap<Long, Marker> markerHashMap; private CardView cardView; private BitmapDescriptor getMarkerIconFromDrawable(Drawable drawable) { Canvas canvas = new Canvas(); Bitmap bitmap = Bitmap.createBitmap(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight(), Bitmap.Config.ARGB_8888); canvas.setBitmap(bitmap); drawable.setBounds(0, 0, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight()); drawable.draw(canvas); return BitmapDescriptorFactory.fromBitmap(bitmap); } private void displayNotification(String area, double latitude, double longitude) { NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(this, CHANNEL_ID).setSmallIcon(ic_red_alert).setAutoCancel(true) .setLargeIcon(BitmapFactory.decodeResource(this.getResources(), R.drawable.icon)).setContentTitle(\"Warning\") .setContentText(\"Leopard detected near \" + area).setColor(1255082051).setPriority(NotificationCompat.PRIORITY_DEFAULT); PendingIntent contentIntent = PendingIntent.getActivity(this, 0, new Intent(this, MapActivity.class), PendingIntent.FLAG_UPDATE_CURRENT); mBuilder.setContentIntent(contentIntent); NotificationManager mNotificationManager = (NotificationManager) this.getSystemService(Context.NOTIFICATION_SERVICE); mNotificationManager.notify(1, mBuilder.build()); } private void getDeviceLocation() { Log.d(TAG, \"getDeviceLocation: going to institute's location\"); FusedLocationProviderClient mFusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(this); if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) { Toast.makeText(MapActivity.this, \"Grant location permission for better functionality.\", Toast.LENGTH_SHORT).show(); ActivityCompat.requestPermissions(MapActivity.this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, 1); if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED || ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) == PackageManager.PERMISSION_GRANTED) { if (mMap != null) { mMap.setMyLocationEnabled(true); } } } final LatLng latLng = new LatLng(23.1767917, 80.0236891); float zoom = 15f; mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(latLng, zoom)); if (mLocationPermissionGranted) { Task location = mFusedLocationProviderClient.getLastLocation(); location.addOnCompleteListener(new OnCompleteListener() { @Override public void onComplete(@NonNull Task task) { if (task.isSuccessful() && lm.isProviderEnabled(LocationManager.GPS_PROVIDER)) { Log.d(TAG, \"onComplete: got the location\"); Location currentLocation = (Location) task.getResult(); assert currentLocation != null; final double latmax = 23.187010; final double latmin = 23.164480; final double lngmax = 80.040768; final double lngmin = 80.008818; final double currLat = currentLocation.getLatitude(); final double currLng = currentLocation.getLongitude(); if (currLat >= latmin && currLat <= latmin && currLng >= lngmax && currLng >= lngmin) { final LatLng latLng = new LatLng(currentLocation.getLatitude(), currentLocation.getLongitude()); float zoom = 15f; mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(latLng, zoom)); } if ((ActivityCompat.checkSelfPermission(MapActivity.this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) || (ActivityCompat.checkSelfPermission(MapActivity.this, Manifest.permission.ACCESS_COARSE_LOCATION) == PackageManager.PERMISSION_GRANTED)) { mMap.setMyLocationEnabled(true); } } else { Log.d(TAG, \"onComplete: current location is null\"); Toast.makeText(MapActivity.this, \"Couldn't find the current location\", Toast.LENGTH_SHORT).show(); } } }); } } private void markerAdder(long id, String level, double longitude, double latitude) { if (!markerHashMap.containsKey(id)) { Marker marker; String str = Long.toString(id); if (level.equals(\"1\")) { Drawable alert = getResources().getDrawable(ic_red_alert); BitmapDescriptor markerIcon = getMarkerIconFromDrawable(alert); marker = mMap.addMarker(new MarkerOptions().position(new LatLng(longitude, latitude)).title(\"Camera ID: \" + str).icon(markerIcon)); markerHashMap.put(id, marker); } } else { Marker marker = markerHashMap.get(id); assert marker != null; if (level.equals(\"0\")) { marker.remove(); cardView.setVisibility(View.INVISIBLE); markerHashMap.remove(id); } } } @Override public void onMapReady(GoogleMap googleMap) { Toast.makeText(this, \"Map is ready\", Toast.LENGTH_SHORT).show(); Log.d(TAG, \"onMapReady: Map is ready here\"); mMap = googleMap; mMap.setOnMarkerClickListener(this); mMap.setOnMapClickListener(new OnMapClickListener() { @Override public void onMapClick(LatLng latLng) { Log.d(TAG, \"onMapClick: Map clicked\"); cardView.setVisibility(View.GONE); } }); addingInitFirebaseData(mMap); addingFirebaseData(mMap); getDeviceLocation(); Drawable alert = getResources().getDrawable(R.drawable.ic_checkpost); BitmapDescriptor markerIcon = getMarkerIconFromDrawable(alert); mMap.addMarker(new MarkerOptions().position(new LatLng(23.179882, 80.026603)).icon(markerIcon).title(\"Main Gate\")); mMap.addMarker(new MarkerOptions().position(new LatLng(23.179194, 80.022584)).icon(markerIcon).title(\"Nescafé\")); mMap.addMarker(new MarkerOptions().position(new LatLng(23.177254, 80.019757)).icon(markerIcon).title(\"Behind Hall 4\")); mMap.addMarker(new MarkerOptions().position(new LatLng(23.174870, 80.020809)).icon(markerIcon).title(\"Hall 7\")); mMap.addMarker(new MarkerOptions().position(new LatLng(23.176032, 80.016745)).icon(markerIcon).title(\"Security Office\")); mMap.addMarker(new MarkerOptions().position(new LatLng(23.176844, 80.021178)).icon(markerIcon).title(\"Central Mess\")); mMap.addMarker(new MarkerOptions().position(new LatLng(23.176057, 80.022696)).icon(markerIcon).title(\"SAC\")); mMap.addMarker(new MarkerOptions().position(new LatLng(23.178452, 80.024609)).icon(markerIcon).title(\"Hexagon\")); mMap.addMarker(new MarkerOptions().position(new LatLng(23.176806, 80.024721)).icon(markerIcon).title(\"Auditorium\")); mMap.addMarker(new MarkerOptions().position(new LatLng(23.175971, 80.024081)).icon(markerIcon).title(\"Power House\")); mMap.addMarker(new MarkerOptions().position(new LatLng(23.175690, 80.027027)).icon(markerIcon).title(\"Near New CC\")); mMap.addMarker(new MarkerOptions().position(new LatLng(23.176048, 80.027722)).icon(markerIcon).title(\"PHC\")); mMap.addMarker(new MarkerOptions().position(new LatLng(23.179325, 80.027275)).icon(markerIcon).title(\"Admin. Office\")); mMap.addMarker(new MarkerOptions().position(new LatLng(23.178192, 80.026231)).icon(markerIcon).title(\"ECE Lab\")); mMap.addMarker(new MarkerOptions().position(new LatLng(23.174448, 80.027921)).icon(markerIcon).title(\"Visitor's Hostel\")); mMap.addMarker(new MarkerOptions().position(new LatLng(23.171737, 80.033542)).icon(markerIcon).title(\"NR\")); mMap.addMarker(new MarkerOptions().position(new LatLng(23.172652, 80.032960)).icon(markerIcon).title(\"NR\")); } private void addingInitFirebaseData(final GoogleMap googleMap){ FirebaseDatabase firebaseDatabase = FirebaseDatabase.getInstance(); DatabaseReference reference = firebaseDatabase.getReference(\"alerts\"); reference.addChildEventListener(new ChildEventListener() { @Override public void onChildAdded(@NonNull final DataSnapshot dataSnapshot, @Nullable String s) { Log.d(TAG, dataSnapshot.toString()); String level; level = dataSnapshot.child(\"leopard/level\").getValue().toString(); if (level.equals(\"1\")) { double latitude, longitude; long id; id = (Long) dataSnapshot.child(\"id\").getValue(); latitude = (Double) dataSnapshot.child(\"latitude\").getValue(); longitude = (Double) dataSnapshot.child(\"longitude\").getValue(); markerAdder(id, level, latitude, longitude); new android.os.Handler().postDelayed( new Runnable() { public void run() { Log.i(\"tag\", \"Updating Firebase Database in 5 minutes\"); dataSnapshot.getRef().child(\"leopard\").child(\"level\").setValue(\"0\"); } }, 300000 ); } } @Override public void onChildChanged(DataSnapshot dataSnapshot, String s) { } @Override public void onChildRemoved(@NonNull DataSnapshot dataSnapshot) { } @Override public void onChildMoved(@NonNull DataSnapshot dataSnapshot, @Nullable String s) { } @Override public void onCancelled(@NonNull DatabaseError databaseError) { } }); } private static final String CHANNEL_ID=\"ALERT\"; private static final String CHANNEL_NAME=\"STAYSAFE\"; private static final String CHANNEL_DESC=\"LEOPARD DETECTED\"; Button sos_button; Button contact_Button; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); getSupportActionBar().hide(); setContentView(R.layout.map_activity); if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.O){ NotificationChannel channel = new NotificationChannel(CHANNEL_ID,CHANNEL_NAME,NotificationManager.IMPORTANCE_DEFAULT); channel.setDescription(CHANNEL_DESC); NotificationManager manager =getSystemService(NotificationManager.class); assert manager != null; manager.createNotificationChannel(channel); lm = (LocationManager)this.getSystemService(MapActivity.this.LOCATION_SERVICE); } getLocationPermission(); markerHashMap = new HashMap<>(); sos_button = findViewById(R.id.button1); sos_button.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { @SuppressLint(\"SimpleDateFormat\") SimpleDateFormat stf = new SimpleDateFormat(\"k\" ); String currentTime = stf.format(new Date()); Log.d(\"date\", currentTime); int time_check = Integer.parseInt(currentTime); @SuppressLint(\"SimpleDateFormat\") SimpleDateFormat sdf = new SimpleDateFormat(\"dd\"); String currentDate = sdf.format(new Date()); Log.d(\"date\", currentDate); int date_check = Integer.parseInt(currentDate); String phone; if (date_check <= 10) { if (time_check >= 6 && time_check <= 12) { phone = \"+91 11111 11111\"; } else if (time_check > 12 && time_check <= 22) { phone = \"+91 22222 22222\"; } else { phone = \"+91 33333 33333\"; } } else if (date_check <= 20){ if (time_check >= 6 && time_check <= 12) { phone = \"+91 33333 33333\"; } else if (time_check > 12 && time_check <= 22) { phone = \"+91 11111 11111\"; } else { phone = \"+91 22222 22222\"; } } else { if (time_check >= 6 && time_check <= 12) { phone = \"+91 22222 22222\"; } else if (time_check > 12 && time_check <= 22) { phone = \"+91 33333 33333\"; } else { phone = \"+91 11111 11111\"; } } String s = \"tel: \" + phone; Intent intent = new Intent(Intent.ACTION_CALL); intent.setData(Uri.parse(s)); if (ContextCompat.checkSelfPermission(MapActivity.this, Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED) { ActivityCompat.requestPermissions(MapActivity.this, new String[]{Manifest.permission.CALL_PHONE}, REQUEST_PHONE_CALL); if (ContextCompat.checkSelfPermission(MapActivity.this, Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED) { startActivity(intent); } } else { startActivity(intent); } } }); contact_Button = findViewById(R.id.button2); contact_Button.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { openActivity2(); } void openActivity2() { @SuppressLint(\"SimpleDateFormat\") SimpleDateFormat sdf = new SimpleDateFormat(\"dd\"); String currentDateAndTime = sdf.format(new Date()); Log.d(\"date\", currentDateAndTime); int date_check = Integer.parseInt(currentDateAndTime); if (date_check <= 10) { Intent intent1 = new Intent(MapActivity.this, activity_contacts_1.class); startActivity(intent1); } else if (date_check <= 20) { Intent intent2 = new Intent(MapActivity.this, activity_contacts_2.class); startActivity(intent2); } else { Intent intent3 = new Intent(MapActivity.this, activity_contacts_3.class); startActivity(intent3); } } }); } private void initMap(){ Log.d(TAG, \"initMap: Initializing the map\"); final SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.map); assert mapFragment != null; mapFragment.getMapAsync(MapActivity.this); cardView = findViewById(R.id.card_view); } private void getLocationPermission(){ Log.d(TAG, \"getLocationPermission: Getting location permissions\"); String[] permissions = {FINE_LOCATION, COARSE_LOCATION}; int LOCATION_PERMISSION_REQUEST_CODE = 1234; if(ContextCompat.checkSelfPermission(this.getApplicationContext(),FINE_LOCATION) == PackageManager.PERMISSION_GRANTED){ if(ContextCompat.checkSelfPermission(this.getApplicationContext(),COARSE_LOCATION) == PackageManager.PERMISSION_GRANTED) { mLocationPermissionGranted = true; initMap(); } else { ActivityCompat.requestPermissions(this, permissions, LOCATION_PERMISSION_REQUEST_CODE); } } else { ActivityCompat.requestPermissions(this, permissions, LOCATION_PERMISSION_REQUEST_CODE); } } @Override public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) { Log.d(TAG, \"onRequestPermissionsResult: called.\"); mLocationPermissionGranted = false; if (requestCode == 1234) { if (grantResults.length > 0) { for (int grantResult : grantResults) { if (grantResult != PackageManager.PERMISSION_GRANTED) { mLocationPermissionGranted = false; Log.d(TAG, \"onRequestPermissionsResult: permission failed\"); return; } } mLocationPermissionGranted = true; Log.d(TAG, \"onRequestPermissionsResult: permission granted\"); initMap(); } } } public void addingFirebaseData(final GoogleMap googleMap){ final FirebaseDatabase firebaseDatabase = FirebaseDatabase.getInstance(); final DatabaseReference reference = firebaseDatabase.getReference(\"alerts\"); reference.addChildEventListener(new ChildEventListener() { @Override public void onChildAdded(DataSnapshot dataSnapshot, String s) { } @Override public void onChildChanged(final DataSnapshot dataSnapshot, String s) { Log.d(TAG, dataSnapshot.toString()); double latitude, longitude; long id; String level, area; id = (Long)dataSnapshot.child(\"id\").getValue(); latitude = (Double)dataSnapshot.child(\"latitude\").getValue(); longitude = (Double)dataSnapshot.child(\"longitude\").getValue(); level = dataSnapshot.child(\"leopard/level\").getValue().toString(); area = dataSnapshot.child(\"area\").getValue().toString(); Log.d(TAG, \"onChildAdded:\" + \"id: \" + id + latitude + longitude + level + area); markerAdder(id, level, latitude, longitude); if (level.equals(\"1\")) { displayNotification(area, latitude, longitude); new android.os.Handler().postDelayed( new Runnable() { public void run() { Log.i(\"tag\", \"Updating Firebase Database in 5 minutes\"); dataSnapshot.getRef().child(\"leopard\").child(\"level\").setValue(\"0\"); } }, 10000 ); } } @Override public void onChildRemoved(DataSnapshot dataSnapshot) { } @Override public void onChildMoved(DataSnapshot dataSnapshot, String s) { } @Override public void onCancelled(DatabaseError databaseError) { } }); } @Override public boolean onMarkerClick(Marker marker) { Log.d(TAG, \"onMarkerClick: \" + marker.getTitle()); final TextView judgement, area, id; judgement = findViewById(R.id.judgement_card); area = findViewById(R.id.area_card); id = findViewById(R.id.id_card); final String id_cs = marker.getTitle(); if (id_cs.contains(\"Camera ID: \")) { final String id_s = id_cs.substring(11); FirebaseDatabase database = FirebaseDatabase.getInstance(); DatabaseReference reference = database.getReference(\"alerts\"); reference.addChildEventListener(new ChildEventListener() { @Override public void onChildAdded(DataSnapshot dataSnapshot, String s) { if (id_s.equals(dataSnapshot.child(\"id\").getValue().toString())) { String p = dataSnapshot.child(\"leopard\").child(\"level\").getValue().toString(); if (p.equals(\"1\")) { cardView.setVisibility(View.VISIBLE); judgement.setText(\"Leopard Detected\"); } area.setText(dataSnapshot.child(\"area\").getValue().toString()); id.setText(dataSnapshot.child(\"id\").getValue().toString()); Log.d(TAG, \"onChildAdded: \" + dataSnapshot.getValue().toString()); } } @Override public void onChildChanged(DataSnapshot dataSnapshot, String s) { } @Override public void onChildRemoved(DataSnapshot dataSnapshot) { } @Override public void onChildMoved(DataSnapshot dataSnapshot, String s) { } @Override public void onCancelled(DatabaseError databaseError) { } }); } return false; } }"}]}}
{"project_id":130,"chunk_id":0,"content":{"main_file_path":"Wild Animal Detection\\app\\src\\main\\java\\com\\throwntech\\staysafe\\MapActivity.java","main_file_content":"package com.throwntech.staysafe; import android.Manifest; import android.annotation.SuppressLint; import android.app.NotificationChannel; import android.app.NotificationManager; import android.app.PendingIntent; import android.content.Context; import android.content.Intent; import android.content.pm.PackageManager; import android.graphics.Bitmap; import android.graphics.BitmapFactory; import android.graphics.Canvas; import android.graphics.drawable.Drawable; import android.location.Location; import android.location.LocationManager; import android.net.Uri; import android.os.Build; import android.os.Bundle; import android.util.Log; import android.view.View; import android.widget.Button; import android.widget.TextView; import android.widget.Toast; import androidx.annotation.NonNull; import androidx.annotation.Nullable; import androidx.appcompat.app.AppCompatActivity; import androidx.cardview.widget.CardView; import androidx.core.app.ActivityCompat; import androidx.core.app.NotificationCompat; import androidx.core.content.ContextCompat; import com.google.android.gms.location.FusedLocationProviderClient; import com.google.android.gms.location.LocationServices; import com.google.android.gms.maps.CameraUpdateFactory; import com.google.android.gms.maps.GoogleMap; import com.google.android.gms.maps.OnMapReadyCallback; import com.google.android.gms.maps.SupportMapFragment; import com.google.android.gms.maps.model.BitmapDescriptor; import com.google.android.gms.maps.model.BitmapDescriptorFactory; import com.google.android.gms.maps.model.LatLng; import com.google.android.gms.maps.model.Marker; import com.google.android.gms.maps.model.MarkerOptions; import com.google.android.gms.tasks.OnCompleteListener; import com.google.android.gms.tasks.Task; import com.google.firebase.database.ChildEventListener; import com.google.firebase.database.DataSnapshot; import com.google.firebase.database.DatabaseError; import com.google.firebase.database.DatabaseReference; import com.google.firebase.database.FirebaseDatabase; import java.text.SimpleDateFormat; import java.util.Date; import java.util.HashMap; import static com.google.android.gms.maps.GoogleMap.OnMapClickListener; import static com.google.android.gms.maps.GoogleMap.OnMarkerClickListener; import static com.throwntech.staysafe.R.drawable.ic_red_alert; public class MapActivity extends AppCompatActivity implements OnMapReadyCallback, OnMarkerClickListener { private static final String TAG = \"MapActivity\"; private static final String FINE_LOCATION = Manifest.permission.ACCESS_FINE_LOCATION; private static final String COARSE_LOCATION = Manifest.permission.ACCESS_COARSE_LOCATION; private static final int LOCATION_PERMISSION_REQUEST_CODE = 1; private static final int REQUEST_PHONE_CALL = 1; LocationManager lm; private Boolean mLocationPermissionGranted = false; private GoogleMap mMap; private HashMap<Long, Marker> markerHashMap; private CardView cardView; private BitmapDescriptor getMarkerIconFromDrawable(Drawable drawable) { Canvas canvas = new Canvas(); Bitmap bitmap = Bitmap.createBitmap(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight(), Bitmap.Config.ARGB_8888); canvas.setBitmap(bitmap); drawable.setBounds(0, 0, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight()); drawable.draw(canvas); return BitmapDescriptorFactory.fromBitmap(bitmap); } private void displayNotification(String area, double latitude, double longitude) { NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(this, CHANNEL_ID).setSmallIcon(ic_red_alert).setAutoCancel(true) .setLargeIcon(BitmapFactory.decodeResource(this.getResources(), R.drawable.icon)).setContentTitle(\"Warning\") .setContentText(\"Leopard detected near \" + area).setColor(1255082051).setPriority(NotificationCompat.PRIORITY_DEFAULT); PendingIntent contentIntent = PendingIntent.getActivity(this, 0, new Intent(this, MapActivity.class), PendingIntent.FLAG_UPDATE_CURRENT); mBuilder.setContentIntent(contentIntent); NotificationManager mNotificationManager = (NotificationManager) this.getSystemService(Context.NOTIFICATION_SERVICE); mNotificationManager.notify(1, mBuilder.build()); } private void getDeviceLocation() { Log.d(TAG, \"getDeviceLocation: going to institute's location\"); FusedLocationProviderClient mFusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(this); if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) { Toast.makeText(MapActivity.this, \"Grant location permission for better functionality.\", Toast.LENGTH_SHORT).show(); ActivityCompat.requestPermissions(MapActivity.this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, 1); if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED || ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) == PackageManager.PERMISSION_GRANTED) { if (mMap != null) { mMap.setMyLocationEnabled(true); } } } final LatLng latLng = new LatLng(23.1767917, 80.0236891); float zoom = 15f; mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(latLng, zoom)); if (mLocationPermissionGranted) { Task location = mFusedLocationProviderClient.getLastLocation(); location.addOnCompleteListener(new OnCompleteListener() { @Override public void onComplete(@NonNull Task task) { if (task.isSuccessful() && lm.isProviderEnabled(LocationManager.GPS_PROVIDER)) { Log.d(TAG, \"onComplete: got the location\"); Location currentLocation = (Location) task.getResult(); assert currentLocation != null; final double latmax = 23.187010; final double latmin = 23.164480; final double lngmax = 80.040768; final double lngmin = 80.008818; final double currLat = currentLocation.getLatitude(); final double currLng = currentLocation.getLongitude(); if (currLat >= latmin && currLat <= latmin && currLng >= lngmax && currLng >= lngmin) { final LatLng latLng = new LatLng(currentLocation.getLatitude(), currentLocation.getLongitude()); float zoom = 15f; mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(latLng, zoom)); } if ((ActivityCompat.checkSelfPermission(MapActivity.this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) || (ActivityCompat.checkSelfPermission(MapActivity.this, Manifest.permission.ACCESS_COARSE_LOCATION) == PackageManager.PERMISSION_GRANTED)) { mMap.setMyLocationEnabled(true); } } else { Log.d(TAG, \"onComplete: current location is null\"); Toast.makeText(MapActivity.this, \"Couldn't find the current location\", Toast.LENGTH_SHORT).show(); } } }); } } private void markerAdder(long id, String level, double longitude, double latitude) { if (!markerHashMap.containsKey(id)) { Marker marker; String str = Long.toString(id); if (level.equals(\"1\")) { Drawable alert = getResources().getDrawable(ic_red_alert); BitmapDescriptor markerIcon = getMarkerIconFromDrawable(alert); marker = mMap.addMarker(new MarkerOptions().position(new LatLng(longitude, latitude)).title(\"Camera ID: \" + str).icon(markerIcon)); markerHashMap.put(id, marker); } } else { Marker marker = markerHashMap.get(id); assert marker != null; if (level.equals(\"0\")) { marker.remove(); cardView.setVisibility(View.INVISIBLE); markerHashMap.remove(id); } } } @Override public void onMapReady(GoogleMap googleMap) { Toast.makeText(this, \"Map is ready\", Toast.LENGTH_SHORT).show(); Log.d(TAG, \"onMapReady: Map is ready here\"); mMap = googleMap; mMap.setOnMarkerClickListener(this); mMap.setOnMapClickListener(new OnMapClickListener() { @Override public void onMapClick(LatLng latLng) { Log.d(TAG, \"onMapClick: Map clicked\"); cardView.setVisibility(View.GONE); } }); addingInitFirebaseData(mMap); addingFirebaseData(mMap); getDeviceLocation(); Drawable alert = getResources().getDrawable(R.drawable.ic_checkpost); BitmapDescriptor markerIcon = getMarkerIconFromDrawable(alert); mMap.addMarker(new MarkerOptions().position(new LatLng(23.179882, 80.026603)).icon(markerIcon).title(\"Main Gate\")); mMap.addMarker(new MarkerOptions().position(new LatLng(23.179194, 80.022584)).icon(markerIcon).title(\"Nescafé\")); mMap.addMarker(new MarkerOptions().position(new LatLng(23.177254, 80.019757)).icon(markerIcon).title(\"Behind Hall 4\")); mMap.addMarker(new MarkerOptions().position(new LatLng(23.174870, 80.020809)).icon(markerIcon).title(\"Hall 7\")); mMap.addMarker(new MarkerOptions().position(new LatLng(23.176032, 80.016745)).icon(markerIcon).title(\"Security Office\")); mMap.addMarker(new MarkerOptions().position(new LatLng(23.176844, 80.021178)).icon(markerIcon).title(\"Central Mess\")); mMap.addMarker(new MarkerOptions().position(new LatLng(23.176057, 80.022696)).icon(markerIcon).title(\"SAC\")); mMap.addMarker(new MarkerOptions().position(new LatLng(23.178452, 80.024609)).icon(markerIcon).title(\"Hexagon\")); mMap.addMarker(new MarkerOptions().position(new LatLng(23.176806, 80.024721)).icon(markerIcon).title(\"Auditorium\")); mMap.addMarker(new MarkerOptions().position(new LatLng(23.175971, 80.024081)).icon(markerIcon).title(\"Power House\")); mMap.addMarker(new MarkerOptions().position(new LatLng(23.175690, 80.027027)).icon(markerIcon).title(\"Near New CC\")); mMap.addMarker(new MarkerOptions().position(new LatLng(23.176048, 80.027722)).icon(markerIcon).title(\"PHC\")); mMap.addMarker(new MarkerOptions().position(new LatLng(23.179325, 80.027275)).icon(markerIcon).title(\"Admin. Office\")); mMap.addMarker(new MarkerOptions().position(new LatLng(23.178192, 80.026231)).icon(markerIcon).title(\"ECE Lab\")); mMap.addMarker(new MarkerOptions().position(new LatLng(23.174448, 80.027921)).icon(markerIcon).title(\"Visitor's Hostel\")); mMap.addMarker(new MarkerOptions().position(new LatLng(23.171737, 80.033542)).icon(markerIcon).title(\"NR\")); mMap.addMarker(new MarkerOptions().position(new LatLng(23.172652, 80.032960)).icon(markerIcon).title(\"NR\")); } private void addingInitFirebaseData(final GoogleMap googleMap){ FirebaseDatabase firebaseDatabase = FirebaseDatabase.getInstance(); DatabaseReference reference = firebaseDatabase.getReference(\"alerts\"); reference.addChildEventListener(new ChildEventListener() { @Override public void onChildAdded(@NonNull final DataSnapshot dataSnapshot, @Nullable String s) { Log.d(TAG, dataSnapshot.toString()); String level; level = dataSnapshot.child(\"leopard/level\").getValue().toString(); if (level.equals(\"1\")) { double latitude, longitude; long id; id = (Long) dataSnapshot.child(\"id\").getValue(); latitude = (Double) dataSnapshot.child(\"latitude\").getValue(); longitude = (Double) dataSnapshot.child(\"longitude\").getValue(); markerAdder(id, level, latitude, longitude); new android.os.Handler().postDelayed( new Runnable() { public void run() { Log.i(\"tag\", \"Updating Firebase Database in 5 minutes\"); dataSnapshot.getRef().child(\"leopard\").child(\"level\").setValue(\"0\"); } }, 300000 ); } } @Override public void onChildChanged(DataSnapshot dataSnapshot, String s) { } @Override public void onChildRemoved(@NonNull DataSnapshot dataSnapshot) { } @Override public void onChildMoved(@NonNull DataSnapshot dataSnapshot, @Nullable String s) { } @Override public void onCancelled(@NonNull DatabaseError databaseError) { } }); } private static final String CHANNEL_ID=\"ALERT\"; private static final String CHANNEL_NAME=\"STAYSAFE\"; private static final String CHANNEL_DESC=\"LEOPARD DETECTED\"; Button sos_button; Button contact_Button; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); getSupportActionBar().hide(); setContentView(R.layout.map_activity); if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.O){ NotificationChannel channel = new NotificationChannel(CHANNEL_ID,CHANNEL_NAME,NotificationManager.IMPORTANCE_DEFAULT); channel.setDescription(CHANNEL_DESC); NotificationManager manager =getSystemService(NotificationManager.class); assert manager != null; manager.createNotificationChannel(channel); lm = (LocationManager)this.getSystemService(MapActivity.this.LOCATION_SERVICE); } getLocationPermission(); markerHashMap = new HashMap<>(); sos_button = findViewById(R.id.button1); sos_button.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { @SuppressLint(\"SimpleDateFormat\") SimpleDateFormat stf = new SimpleDateFormat(\"k\" ); String currentTime = stf.format(new Date()); Log.d(\"date\", currentTime); int time_check = Integer.parseInt(currentTime); @SuppressLint(\"SimpleDateFormat\") SimpleDateFormat sdf = new SimpleDateFormat(\"dd\"); String currentDate = sdf.format(new Date()); Log.d(\"date\", currentDate); int date_check = Integer.parseInt(currentDate); String phone; if (date_check <= 10) { if (time_check >= 6 && time_check <= 12) { phone = \"+91 11111 11111\"; } else if (time_check > 12 && time_check <= 22) { phone = \"+91 22222 22222\"; } else { phone = \"+91 33333 33333\"; } } else if (date_check <= 20){ if (time_check >= 6 && time_check <= 12) { phone = \"+91 33333 33333\"; } else if (time_check > 12 && time_check <= 22) { phone = \"+91 11111 11111\"; } else { phone = \"+91 22222 22222\"; } } else { if (time_check >= 6 && time_check <= 12) { phone = \"+91 22222 22222\"; } else if (time_check > 12 && time_check <= 22) { phone = \"+91 33333 33333\"; } else { phone = \"+91 11111 11111\"; } } String s = \"tel: \" + phone; Intent intent = new Intent(Intent.ACTION_CALL); intent.setData(Uri.parse(s)); if (ContextCompat.checkSelfPermission(MapActivity.this, Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED) { ActivityCompat.requestPermissions(MapActivity.this, new String[]{Manifest.permission.CALL_PHONE}, REQUEST_PHONE_CALL); if (ContextCompat.checkSelfPermission(MapActivity.this, Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED) { startActivity(intent); } } else { startActivity(intent); } } }); contact_Button = findViewById(R.id.button2); contact_Button.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { openActivity2(); } void openActivity2() { @SuppressLint(\"SimpleDateFormat\") SimpleDateFormat sdf = new SimpleDateFormat(\"dd\"); String currentDateAndTime = sdf.format(new Date()); Log.d(\"date\", currentDateAndTime); int date_check = Integer.parseInt(currentDateAndTime); if (date_check <= 10) { Intent intent1 = new Intent(MapActivity.this, activity_contacts_1.class); startActivity(intent1); } else if (date_check <= 20) { Intent intent2 = new Intent(MapActivity.this, activity_contacts_2.class); startActivity(intent2); } else { Intent intent3 = new Intent(MapActivity.this, activity_contacts_3.class); startActivity(intent3); } } }); } private void initMap(){ Log.d(TAG, \"initMap: Initializing the map\"); final SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.map); assert mapFragment != null; mapFragment.getMapAsync(MapActivity.this); cardView = findViewById(R.id.card_view); } private void getLocationPermission(){ Log.d(TAG, \"getLocationPermission: Getting location permissions\"); String[] permissions = {FINE_LOCATION, COARSE_LOCATION}; int LOCATION_PERMISSION_REQUEST_CODE = 1234; if(ContextCompat.checkSelfPermission(this.getApplicationContext(),FINE_LOCATION) == PackageManager.PERMISSION_GRANTED){ if(ContextCompat.checkSelfPermission(this.getApplicationContext(),COARSE_LOCATION) == PackageManager.PERMISSION_GRANTED) { mLocationPermissionGranted = true; initMap(); } else { ActivityCompat.requestPermissions(this, permissions, LOCATION_PERMISSION_REQUEST_CODE); } } else { ActivityCompat.requestPermissions(this, permissions, LOCATION_PERMISSION_REQUEST_CODE); } } @Override public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) { Log.d(TAG, \"onRequestPermissionsResult: called.\"); mLocationPermissionGranted = false; if (requestCode == 1234) { if (grantResults.length > 0) { for (int grantResult : grantResults) { if (grantResult != PackageManager.PERMISSION_GRANTED) { mLocationPermissionGranted = false; Log.d(TAG, \"onRequestPermissionsResult: permission failed\"); return; } } mLocationPermissionGranted = true; Log.d(TAG, \"onRequestPermissionsResult: permission granted\"); initMap(); } } } public void addingFirebaseData(final GoogleMap googleMap){ final FirebaseDatabase firebaseDatabase = FirebaseDatabase.getInstance(); final DatabaseReference reference = firebaseDatabase.getReference(\"alerts\"); reference.addChildEventListener(new ChildEventListener() { @Override public void onChildAdded(DataSnapshot dataSnapshot, String s) { } @Override public void onChildChanged(final DataSnapshot dataSnapshot, String s) { Log.d(TAG, dataSnapshot.toString()); double latitude, longitude; long id; String level, area; id = (Long)dataSnapshot.child(\"id\").getValue(); latitude = (Double)dataSnapshot.child(\"latitude\").getValue(); longitude = (Double)dataSnapshot.child(\"longitude\").getValue(); level = dataSnapshot.child(\"leopard/level\").getValue().toString(); area = dataSnapshot.child(\"area\").getValue().toString(); Log.d(TAG, \"onChildAdded:\" + \"id: \" + id + latitude + longitude + level + area); markerAdder(id, level, latitude, longitude); if (level.equals(\"1\")) { displayNotification(area, latitude, longitude); new android.os.Handler().postDelayed( new Runnable() { public void run() { Log.i(\"tag\", \"Updating Firebase Database in 5 minutes\"); dataSnapshot.getRef().child(\"leopard\").child(\"level\").setValue(\"0\"); } }, 10000 ); } } @Override public void onChildRemoved(DataSnapshot dataSnapshot) { } @Override public void onChildMoved(DataSnapshot dataSnapshot, String s) { } @Override public void onCancelled(DatabaseError databaseError) { } }); } @Override public boolean onMarkerClick(Marker marker) { Log.d(TAG, \"onMarkerClick: \" + marker.getTitle()); final TextView judgement, area, id; judgement = findViewById(R.id.judgement_card); area = findViewById(R.id.area_card); id = findViewById(R.id.id_card); final String id_cs = marker.getTitle(); if (id_cs.contains(\"Camera ID: \")) { final String id_s = id_cs.substring(11); FirebaseDatabase database = FirebaseDatabase.getInstance(); DatabaseReference reference = database.getReference(\"alerts\"); reference.addChildEventListener(new ChildEventListener() { @Override public void onChildAdded(DataSnapshot dataSnapshot, String s) { if (id_s.equals(dataSnapshot.child(\"id\").getValue().toString())) { String p = dataSnapshot.child(\"leopard\").child(\"level\").getValue().toString(); if (p.equals(\"1\")) { cardView.setVisibility(View.VISIBLE); judgement.setText(\"Leopard Detected\"); } area.setText(dataSnapshot.child(\"area\").getValue().toString()); id.setText(dataSnapshot.child(\"id\").getValue().toString()); Log.d(TAG, \"onChildAdded: \" + dataSnapshot.getValue().toString()); } } @Override public void onChildChanged(DataSnapshot dataSnapshot, String s) { } @Override public void onChildRemoved(DataSnapshot dataSnapshot) { } @Override public void onChildMoved(DataSnapshot dataSnapshot, String s) { } @Override public void onCancelled(DatabaseError databaseError) { } }); } return false; } }","dependencies":[{"file_path":"Wild Animal Detection\\app\\src\\main\\java\\com\\throwntech\\staysafe\\activity_contacts_1.java","file_content":"package com.throwntech.staysafe; import android.os.Bundle; import androidx.appcompat.app.AppCompatActivity; public class activity_contacts_1 extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_contacts_1); } }"},{"file_path":"Wild Animal Detection\\app\\src\\main\\java\\com\\throwntech\\staysafe\\activity_contacts_2.java","file_content":"package com.throwntech.staysafe; import android.os.Bundle; import androidx.appcompat.app.AppCompatActivity; public class activity_contacts_2 extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_contacts_2); } }"},{"file_path":"Wild Animal Detection\\app\\src\\main\\java\\com\\throwntech\\staysafe\\activity_contacts_3.java","file_content":"package com.throwntech.staysafe; import android.os.Bundle; import androidx.appcompat.app.AppCompatActivity; public class activity_contacts_3 extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_contacts_3); } }"}]}}
{"project_id":131,"chunk_id":0,"content":{"main_file_path":"WORD-COUNTER-main\\Word Counter.java","main_file_content":"package application; import java.io.File; import java.util.Scanner; import javafx.application.Application; import javafx.event.ActionEvent; import javafx.event.EventHandler; import javafx.scene.Group; import javafx.scene.Scene; import javafx.scene.control.Button; import javafx.scene.control.Label; import javafx.scene.paint.Color; import javafx.scene.text.Font; import javafx.scene.text.FontPosture; import javafx.scene.text.FontWeight; import javafx.scene.text.Text; import javafx.stage.FileChooser; import javafx.stage.Stage; public class Main extends Application { @Override public void start(Stage stage) { FileChooser fil_chooser = new FileChooser(); Text text = new Text(); text.setFont(Font.font(\"verdana\", FontWeight.BOLD, FontPosture.REGULAR, 40)); text.setFill(Color.BROWN); text.setX(50); text.setY(35); text.setText(\"Word Counter\"); Text text1 = new Text(); text1.setText( \"\\n\\nSelect a file.\\n\\nIt will calculate number of words.\\n\\nNumber of lines.\\n\\nNumber of digits,special characters.\\n\\n\"); text1.setFont(Font.font(\"verdana\", FontWeight.BOLD, FontPosture.REGULAR, 14)); text1.setFill(Color.BLACK); text1.setX(50); text1.setY(100); Button button = new Button(\"Open File\"); Label v, line, cons, words, digit, spch; EventHandler<ActionEvent> event = new EventHandler<ActionEvent>() { public void handle(ActionEvent e) { File file = fil_chooser.showOpenDialog(stage); String filevar = file.getAbsolutePath(); int vo = 0, con = 0, li = 0, wo = 0, dig = 0, sp = 0; try { File myObj = new File(filevar); Scanner sc = new Scanner(myObj); while (sc.hasNextLine()) { String str = sc.nextLine(); li++; for (int i = 0; i < str.length(); i++) { char ch = str.charAt(i); if ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z')) { if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') { vo++; } else con++; } else if (ch >= '0' && ch <= '9') dig++; else if (ch == ' ') { wo++; } else sp++; } } sc.close(); } catch (Exception e1) { System.out.println(\"An error occurred.\"); e1.printStackTrace(); } wo = wo + 1; Label v = new Label(\"The total Vowels are :\" + vo); Label line = new Label(\"The total Lines are : \" + li); Label cons = new Label(\"The total Consonents are :\" + con); Label words = new Label(\"The total Words are :\" + wo); Label digit = new Label(\"The total digit's are :\" + dig); Label spch = new Label(\"The total special character's are :\" + sp); Group root1 = new Group(v, line, cons, words, digit, spch); line.setTextFill(Color.BROWN); line.setFont(new Font(\"Arial\", 20)); line.setTranslateX(60); line.setTranslateY(30); v.setTranslateX(60); v.setTranslateY(80); v.setTextFill(Color.BROWN); v.setFont(new Font(\"Arial\", 20)); cons.setTranslateX(60); cons.setTranslateY(130); cons.setTextFill(Color.BROWN); cons.setFont(new Font(\"Arial\", 20)); words.setTranslateX(60); words.setTranslateY(180); words.setTextFill(Color.BROWN); words.setFont(new Font(\"Arial\", 20)); digit.setTranslateX(60); digit.setTranslateY(230); digit.setTextFill(Color.BROWN); digit.setFont(new Font(\"Arial\", 20)); spch.setTranslateX(60); spch.setTranslateY(280); spch.setTextFill(Color.BROWN); spch.setFont(new Font(\"Arial\", 20)); Scene scene2 = new Scene(root1, 400, 400, Color.BEIGE); stage.setScene(scene2); } }; button.setOnAction(event); button.setTranslateX(160); button.setTranslateY(290); EventHandler<ActionEvent> event1 = new EventHandler<ActionEvent>() { public void handle(ActionEvent e) { File file = fil_chooser.showSaveDialog(stage); if (file != null) { Label non = new Label(\"No file is selected\"); Group root1 = new Group(non); non.setTranslateX(300); non.setTranslateY(290); Scene scene2 = new Scene(root1, 400, 400, Color.BEIGE); } } }; Group root = new Group(text, text1, button); Scene scene1 = new Scene(root, 400, 350, Color.BEIGE); stage.setTitle(\"Word Counter\"); stage.setScene(scene1); stage.setResizable(false); stage.show(); } public static void main(String[] args) { launch(args); } }","dependencies":[]}}
{"project_id":132,"chunk_id":0,"content":{"main_file_path":"Xwiggy\\xwiggy-back\\.mvn\\wrapper\\MavenWrapperDownloader.java","main_file_content":"import java.io.File; import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException; import java.net.URL; import java.nio.channels.Channels; import java.nio.channels.ReadableByteChannel; import java.util.Properties; public class MavenWrapperDownloader { private static final String DEFAULT_DOWNLOAD_URL = \"https: private static final String MAVEN_WRAPPER_PROPERTIES_PATH = \".mvn/wrapper/maven-wrapper.properties\"; private static final String MAVEN_WRAPPER_JAR_PATH = \".mvn/wrapper/maven-wrapper.jar\"; private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\"; public static void main(String args[]) { System.out.println(\"- Downloader started\"); File baseDirectory = new File(args[0]); System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath()); File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH); String url = DEFAULT_DOWNLOAD_URL; if (mavenWrapperPropertyFile.exists()) { FileInputStream mavenWrapperPropertyFileInputStream = null; try { mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile); Properties mavenWrapperProperties = new Properties(); mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream); url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url); } catch (IOException e) { System.out.println(\"- ERROR loading '\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"'\"); } finally { try { if (mavenWrapperPropertyFileInputStream != null) { mavenWrapperPropertyFileInputStream.close(); } } catch (IOException e) { } } } System.out.println(\"- Downloading from: : \" + url); File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH); if (!outputFile.getParentFile().exists()) { if (!outputFile.getParentFile().mkdirs()) { System.out.println( \"- ERROR creating output direcrory '\" + outputFile.getParentFile().getAbsolutePath() + \"'\"); } } System.out.println(\"- Downloading to: \" + outputFile.getAbsolutePath()); try { downloadFileFromURL(url, outputFile); System.out.println(\"Done\"); System.exit(0); } catch (Throwable e) { System.out.println(\"- Error downloading\"); e.printStackTrace(); System.exit(1); } } private static void downloadFileFromURL(String urlString, File destination) throws Exception { URL website = new URL(urlString); ReadableByteChannel rbc; rbc = Channels.newChannel(website.openStream()); FileOutputStream fos = new FileOutputStream(destination); fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE); fos.close(); rbc.close(); } }","dependencies":[]}}
{"project_id":132,"chunk_id":0,"content":{"main_file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\XwiggyApplication.java","main_file_content":"package com.xwiggy.food; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class XwiggyApplication { public static void main(String[] args) { SpringApplication.run(XwiggyApplication.class, args); } }","dependencies":[]}}
{"project_id":132,"chunk_id":0,"content":{"main_file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\controller\\CartController.java","main_file_content":"package com.xwiggy.food.controller; import com.xwiggy.food.dao.CartDaoImpl; import com.xwiggy.food.model.Cart; import com.xwiggy.food.model.NewCart; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.*; import org.springframework.web.multipart.MultipartFile; import java.io.IOException; @RestController @CrossOrigin public class CartController { @Autowired CartDaoImpl cartDao; @PostMapping(\"/cart\") public int getTotal(@RequestBody NewCart[] cart, Model model){ cartDao.saveToCart(cart); return cartDao.claculateTotal(cart); } @RequestMapping(\"/changeDB\") public boolean changeDB(){ cartDao.updateDB(); return true; } @PostMapping(\"/addToCart\") public NewCart[] increaseQuantity(@RequestBody NewCart[] cart, Model model){ cartDao.addItems(cart); return cart; } @PostMapping(\"/addNewItem\") public boolean addNewItem(@RequestParam(\"file\") MultipartFile file, @RequestParam(\"newFoodItem\") String newFoodData) throws IOException { return cartDao.addNewItem(file,newFoodData); } @PostMapping(\"/addNewItemUrl\") public boolean addNewItemByUrl(@RequestParam(\"newFoodItem\") String newFoodData) throws IOException { return cartDao.addNewItemWithUrl(newFoodData); } @PostMapping(\"/checkItemId\") public boolean checkItemId(@RequestBody String itemId, Model model){ return !cartDao.itemIdAvailable(itemId); } }","dependencies":[{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\dao\\CartDaoImpl.java","file_content":"package com.xwiggy.food.dao; import com.fasterxml.jackson.databind.ObjectMapper; import com.xwiggy.food.model.Cart; import com.xwiggy.food.model.Food; import com.xwiggy.food.model.NewCart; import com.xwiggy.food.model.NewFood; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.stereotype.Service; import org.springframework.web.multipart.MultipartFile; import java.io.IOException; import java.nio.file.Path; import java.nio.file.Paths; import java.util.List; @Service public class CartDaoImpl{ @Autowired CartDao cartDao; @Autowired FoodDao foodDao; @Value(\"${fileStorage}\") private String storagePath; public void saveToCart(NewCart[] newCarts){ cartDao.deleteAll(); cartDao.flush(); Cart cart= new Cart(1,0,0,0,0,0); cart.setQuantity1(newCarts[0].getQuantity()); cart.setQuantity2(newCarts[1].getQuantity()); cart.setQuantity3(newCarts[2].getQuantity()); if(newCarts.length>3) cart.setQuantity4(newCarts[3].getQuantity()); if(newCarts.length>4) cart.setQuantity5(newCarts[4].getQuantity()); if(newCarts.length>5) cart.setQuantity6(newCarts[6].getQuantity()); cartDao.save(cart); } public void updateDB(){ List<Cart> carts =cartDao.findAll(); Cart cart = carts.get(1); List<Food> foods = foodDao.findAll(); foods.get(0).setQuantity(foods.get(0).getQuantity()-cart.getQuantity1()); foods.get(1).setQuantity(foods.get(1).getQuantity()-cart.getQuantity2()); foods.get(2).setQuantity(foods.get(2).getQuantity()-cart.getQuantity3()); if(foods.size()>3) foods.get(3).setQuantity(foods.get(3).getQuantity()-cart.getQuantity4()); if(foods.size()>4) foods.get(4).setQuantity(foods.get(4).getQuantity()-cart.getQuantity5()); if(foods.size()>5) foods.get(5).setQuantity(foods.get(5).getQuantity()-cart.getQuantity6()); foodDao.saveAll(foods); } public List<Cart> getAllCart(){ return cartDao.findAll(); } public void addItems(NewCart[] cart){ List<Food> foods = foodDao.findAll(); for(int i=0;i<foods.size();i++){ foods.get(i).setQuantity(foods.get(i).getQuantity()+cart[i].getQuantity()); } foodDao.saveAll(foods); } public boolean addNewItem(MultipartFile file, String newFoodData) throws IOException { NewFood newFood = new ObjectMapper().readValue(newFoodData,NewFood.class); if(!file.isEmpty()) if(saveFileToAssets(file)) { foodDao.save(new Food(newFood.getId(),newFood.getName(),newFood.getPrice(),newFood.getQuantityAvailable(),\"/assets/\"+file.getOriginalFilename(),\"\",\"\")); } return true; } public boolean addNewItemWithUrl(String newFoodData) throws IOException { NewFood newFood = new ObjectMapper().readValue(newFoodData,NewFood.class); foodDao.save(new Food(newFood.getId(),newFood.getName(),newFood.getPrice(),newFood.getQuantityAvailable(),newFood.getFileDataF(),\"\",\"\")); return true; } private boolean saveFileToAssets(MultipartFile file) throws IOException { Path filepath = Paths.get(storagePath, file.getOriginalFilename()); file.transferTo(filepath); return true; } public int claculateTotal(NewCart[] newCart){ int total=0; List<Food> foods = foodDao.findAll(); for(int i=0;i<foods.size();i++) { total+=foods.get(i).getPrice()*newCart[i].getQuantity(); } return total; } public boolean itemIdAvailable(String itemId) { return foodDao.findById(itemId).isPresent(); } }"},{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\model\\NewCart.java","file_content":"package com.xwiggy.food.model; public class NewCart { private int quantity; public NewCart(){} public NewCart(int quantity) { this.quantity = quantity; } public int getQuantity() { return quantity; } public void setQuantity(int quantity) { this.quantity = quantity; } @Override public String toString() { return \"NewCart{\" + \"quantity=\" + quantity + '}'; } }"}]}}
{"project_id":132,"chunk_id":0,"content":{"main_file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\controller\\ContactController.java","main_file_content":"package com.xwiggy.food.controller; import com.xwiggy.food.dao.ContactDaoImpl; import com.xwiggy.food.model.Contact; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.CrossOrigin; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RestController; @RestController @CrossOrigin public class ContactController { @Autowired ContactDaoImpl contactDao; @PostMapping(\"/contact\") public boolean contactUs(@RequestBody Contact contact, Model model){ return contactDao.saveMessage(contact); } }","dependencies":[{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\dao\\ContactDaoImpl.java","file_content":"package com.xwiggy.food.dao; import com.xwiggy.food.model.Contact; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; @Service public class ContactDaoImpl{ @Autowired ContactDao contactDao; public boolean saveMessage(Contact contact){ contactDao.save(contact); return true; } }"},{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\model\\Contact.java","file_content":"package com.xwiggy.food.model; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; @Entity public class Contact { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private int id; private String name; private String email; private String message; public Contact(){} public Contact(String name, String email, String message) { this.name = name; this.email = email; this.message = message; } public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getMessage() { return message; } public void setMessage(String message) { this.message = message; } @Override public String toString() { return \"Contact{\" + \"id=\" + id + \", name='\" + name + '\\'' + \", email='\" + email + '\\'' + \", message='\" + message + '\\'' + '}'; } }"}]}}
{"project_id":132,"chunk_id":0,"content":{"main_file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\controller\\FoodController.java","main_file_content":"package com.xwiggy.food.controller; import com.xwiggy.food.dao.FoodDaoImpl; import com.xwiggy.food.model.Food; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.*; import java.util.List; @RestController @CrossOrigin public class FoodController { @Autowired FoodDaoImpl foodDao; @RequestMapping(value = \"/menu\") public List<Food> getMenu(Model model) { List<Food> foodItems ; foodItems = foodDao.getFoodList(); return foodItems; } }","dependencies":[{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\dao\\FoodDaoImpl.java","file_content":"package com.xwiggy.food.dao; import com.xwiggy.food.model.Food; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import java.util.List; @Service public class FoodDaoImpl { @Autowired private FoodDao foodDao; public List<Food> getFoodList(){ List<Food> food; food = foodDao.findAll(); return food; } public Food validateFoodInfo(String productId){ Food food = null; food = foodDao.findById(productId).get(); return food; } }"},{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\model\\Food.java","file_content":"package com.xwiggy.food.model; import javax.persistence.Entity; import javax.persistence.Id; @Entity public class Food { @Id private String id; private String item; private int price; private int quantity; private String url; private String formID; private String cartID; public Food(){} public Food(String id, String item, int price,int quantity, String url, String formID, String cartID) { this.id = id; this.item = item; this.price = price; this.quantity=quantity; this.url=url; this.formID=formID; this.cartID=cartID; } public String getFormID() { return formID; } public void setFormID(String formID) { this.formID = formID; } public String getCartID() { return cartID; } public void setCartID(String cartID) { this.cartID = cartID; } public String getUrl(){ return url; } public void setUrl(String url){ this.url=url; } public String getId() { return id; } public void setId(String id) { this.id = id; } public String getItem() { return item; } public void setItem(String item) { this.item = item; } public int getPrice() { return price; } public void setPrice(int price) { this.price = price; } public int getQuantity() { return quantity; } public void setQuantity(int quantity) { this.quantity = quantity; } @Override public String toString() { return \"Food{\" + \"id='\" + id + '\\'' + \", item='\" + item + '\\'' + \", price=\" + price + \", quantity=\" + quantity + \", url='\" + url + '\\'' + \", formID='\" + formID + '\\'' + \", cartID='\" + cartID + '\\'' + '}'; } }"}]}}
{"project_id":132,"chunk_id":0,"content":{"main_file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\controller\\LoginController.java","main_file_content":"package com.xwiggy.food.controller; import com.xwiggy.food.dao.UserDaoImpl; import com.xwiggy.food.model.Login; import com.xwiggy.food.model.User; import com.xwiggy.food.utility.StrongAES; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.*; @RestController @CrossOrigin public class LoginController { @Autowired private UserDaoImpl userDao; @RequestMapping(\"/login\") public Login showLogin() { return new Login(); } @PostMapping(\"/login\") public User loginProcess(@RequestBody Login login, Model model) { User user = null; user = userDao.validateUser(login); if(user!=null) user.setPassword(null); return user; } @RequestMapping(\"/xx\") private String xx(){ return new StrongAES().encrypt(\"\"); } }","dependencies":[{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\dao\\UserDaoImpl.java","file_content":"package com.xwiggy.food.dao; import com.xwiggy.food.model.Login; import com.xwiggy.food.model.User; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; @Service public class UserDaoImpl{ @Autowired private UserDao userDao; public void register(User user) { userDao.save(user); } public User validateUser(Login login) { User user = null; if (userDao.findById(login.getUsername()).isPresent()) { user = userDao.findById(login.getUsername()).get(); if(!user.getPassword().equals(login.getPassword())) user=null; } return user; } public Boolean usernameExists(String username){ return userDao.findById(username).isPresent(); } }"},{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\model\\Login.java","file_content":"package com.xwiggy.food.model; public class Login { private String username; private String password; public Login(){} public Login(String username, String password) { this.username = username; this.password = password; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } @Override public String toString() { return \"Login{\" + \"username='\" + username + '\\'' + \", password='\" + password + '\\'' + '}'; } }"},{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\model\\User.java","file_content":"package com.xwiggy.food.model; import javax.persistence.Entity; import javax.persistence.Id; @Entity public class User { @Id private String username; private String password; private String firstname; private String lastname; private String email; private String address; private int phone; private boolean merchant; public User() { } public User(String username, String password, String firstname, String lastname, String email, String address, int phone, boolean merchant) { this.username = username; this.password = password; this.firstname = firstname; this.lastname = lastname; this.email = email; this.address = address; this.phone = phone; this.merchant=merchant; } public boolean isMerchant() { return merchant; } public void setMerchant(boolean merchant) { this.merchant = merchant; } public String getUsername() { return username; } public void setUsername(String username) { System.out.println(\"username: \" + username); this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public String getFirstname() { return firstname; } public void setFirstname(String firstname) { System.out.println(\"firstname: \" + firstname); this.firstname = firstname; } public String getLastname() { return lastname; } public void setLastname(String lastname) { System.out.println(\"lastname: \" + lastname); this.lastname = lastname; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getAddress() { return address; } public void setAddress(String address) { this.address = address; } public int getPhone() { return phone; } public void setPhone(int phone) { this.phone = phone; } @Override public String toString() { return \"User{\" + \"username='\" + username + '\\'' + \", password='\" + password + '\\'' + \", firstname='\" + firstname + '\\'' + \", lastname='\" + lastname + '\\'' + \", email='\" + email + '\\'' + \", address='\" + address + '\\'' + \", phone=\" + phone + \", merchant=\" + merchant + '}'; } }"},{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\utility\\StrongAES.java","file_content":"package com.xwiggy.food.utility; import org.springframework.beans.factory.annotation.Value; public class StrongAES { @Value(\"${AES.Key}\") private String AESKey; public String encrypt(String password){ return this.AESKey; } } class Check{ public static void main(String[] args) { StrongAES strongAES = new StrongAES(); System.out.println(strongAES.encrypt(\"aman\")); } }"}]}}
{"project_id":132,"chunk_id":0,"content":{"main_file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\controller\\RegistrationController.java","main_file_content":"package com.xwiggy.food.controller; import com.xwiggy.food.dao.UserDaoImpl; import com.xwiggy.food.model.User; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.*; @RestController @CrossOrigin() public class RegistrationController { @Autowired private UserDaoImpl userDao; @RequestMapping(\"/api/register\") public User showRegister() { return new User(); } @PostMapping(\"/register\") public User addUser(@RequestBody User user, Model model) { System.out.println(user.toString()); userDao.register(user); return user; } @PostMapping(\"/checkUserName\") public boolean checkAvailability(@RequestBody String username, Model model){ return userDao.usernameExists(username); } }","dependencies":[{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\dao\\UserDaoImpl.java","file_content":"package com.xwiggy.food.dao; import com.xwiggy.food.model.Login; import com.xwiggy.food.model.User; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; @Service public class UserDaoImpl{ @Autowired private UserDao userDao; public void register(User user) { userDao.save(user); } public User validateUser(Login login) { User user = null; if (userDao.findById(login.getUsername()).isPresent()) { user = userDao.findById(login.getUsername()).get(); if(!user.getPassword().equals(login.getPassword())) user=null; } return user; } public Boolean usernameExists(String username){ return userDao.findById(username).isPresent(); } }"},{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\model\\User.java","file_content":"package com.xwiggy.food.model; import javax.persistence.Entity; import javax.persistence.Id; @Entity public class User { @Id private String username; private String password; private String firstname; private String lastname; private String email; private String address; private int phone; private boolean merchant; public User() { } public User(String username, String password, String firstname, String lastname, String email, String address, int phone, boolean merchant) { this.username = username; this.password = password; this.firstname = firstname; this.lastname = lastname; this.email = email; this.address = address; this.phone = phone; this.merchant=merchant; } public boolean isMerchant() { return merchant; } public void setMerchant(boolean merchant) { this.merchant = merchant; } public String getUsername() { return username; } public void setUsername(String username) { System.out.println(\"username: \" + username); this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public String getFirstname() { return firstname; } public void setFirstname(String firstname) { System.out.println(\"firstname: \" + firstname); this.firstname = firstname; } public String getLastname() { return lastname; } public void setLastname(String lastname) { System.out.println(\"lastname: \" + lastname); this.lastname = lastname; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getAddress() { return address; } public void setAddress(String address) { this.address = address; } public int getPhone() { return phone; } public void setPhone(int phone) { this.phone = phone; } @Override public String toString() { return \"User{\" + \"username='\" + username + '\\'' + \", password='\" + password + '\\'' + \", firstname='\" + firstname + '\\'' + \", lastname='\" + lastname + '\\'' + \", email='\" + email + '\\'' + \", address='\" + address + '\\'' + \", phone=\" + phone + \", merchant=\" + merchant + '}'; } }"}]}}
{"project_id":132,"chunk_id":0,"content":{"main_file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\dao\\CartDao.java","main_file_content":"package com.xwiggy.food.dao; import com.xwiggy.food.model.Cart; import org.springframework.data.jpa.repository.JpaRepository; public interface CartDao extends JpaRepository<Cart,Integer> { }","dependencies":[{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\model\\Cart.java","file_content":"package com.xwiggy.food.model; import javax.persistence.Entity; import javax.persistence.Id; @Entity public class Cart { @Id private int quantity1; private int quantity2; private int quantity3; private int quantity4; private int quantity5; private int quantity6; public Cart(){} public Cart(int quantity1, int quantity2, int quantity3, int quantity4, int quantity5, int quantity6) { this.quantity1 = quantity1; this.quantity2 = quantity2; this.quantity3 = quantity3; this.quantity4 = quantity4; this.quantity5 = quantity5; this.quantity6 = quantity6; } public int getQuantity1() { return quantity1; } public void setQuantity1(int quantity1) { this.quantity1 = quantity1; } public int getQuantity2() { return quantity2; } public void setQuantity2(int quantity2) { this.quantity2 = quantity2; } public int getQuantity3() { return quantity3; } public void setQuantity3(int quantity3) { this.quantity3 = quantity3; } public int getQuantity4() { return quantity4; } public void setQuantity4(int quantity4) { this.quantity4 = quantity4; } public int getQuantity5() { return quantity5; } public void setQuantity5(int quantity5) { this.quantity5 = quantity5; } public int getQuantity6() { return quantity6; } public void setQuantity6(int quantity6) { this.quantity6 = quantity6; } @Override public String toString() { return \"Cart{\" + \"quantity1=\" + quantity1 + \", quantity2=\" + quantity2 + \", quantity3=\" + quantity3 + \", quantity4=\" + quantity4 + \", quantity5=\" + quantity5 + \", quantity6=\" + quantity6 + '}'; } }"}]}}
{"project_id":132,"chunk_id":0,"content":{"main_file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\dao\\CartDaoImpl.java","main_file_content":"package com.xwiggy.food.dao; import com.fasterxml.jackson.databind.ObjectMapper; import com.xwiggy.food.model.Cart; import com.xwiggy.food.model.Food; import com.xwiggy.food.model.NewCart; import com.xwiggy.food.model.NewFood; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.stereotype.Service; import org.springframework.web.multipart.MultipartFile; import java.io.IOException; import java.nio.file.Path; import java.nio.file.Paths; import java.util.List; @Service public class CartDaoImpl{ @Autowired CartDao cartDao; @Autowired FoodDao foodDao; @Value(\"${fileStorage}\") private String storagePath; public void saveToCart(NewCart[] newCarts){ cartDao.deleteAll(); cartDao.flush(); Cart cart= new Cart(1,0,0,0,0,0); cart.setQuantity1(newCarts[0].getQuantity()); cart.setQuantity2(newCarts[1].getQuantity()); cart.setQuantity3(newCarts[2].getQuantity()); if(newCarts.length>3) cart.setQuantity4(newCarts[3].getQuantity()); if(newCarts.length>4) cart.setQuantity5(newCarts[4].getQuantity()); if(newCarts.length>5) cart.setQuantity6(newCarts[6].getQuantity()); cartDao.save(cart); } public void updateDB(){ List<Cart> carts =cartDao.findAll(); Cart cart = carts.get(1); List<Food> foods = foodDao.findAll(); foods.get(0).setQuantity(foods.get(0).getQuantity()-cart.getQuantity1()); foods.get(1).setQuantity(foods.get(1).getQuantity()-cart.getQuantity2()); foods.get(2).setQuantity(foods.get(2).getQuantity()-cart.getQuantity3()); if(foods.size()>3) foods.get(3).setQuantity(foods.get(3).getQuantity()-cart.getQuantity4()); if(foods.size()>4) foods.get(4).setQuantity(foods.get(4).getQuantity()-cart.getQuantity5()); if(foods.size()>5) foods.get(5).setQuantity(foods.get(5).getQuantity()-cart.getQuantity6()); foodDao.saveAll(foods); } public List<Cart> getAllCart(){ return cartDao.findAll(); } public void addItems(NewCart[] cart){ List<Food> foods = foodDao.findAll(); for(int i=0;i<foods.size();i++){ foods.get(i).setQuantity(foods.get(i).getQuantity()+cart[i].getQuantity()); } foodDao.saveAll(foods); } public boolean addNewItem(MultipartFile file, String newFoodData) throws IOException { NewFood newFood = new ObjectMapper().readValue(newFoodData,NewFood.class); if(!file.isEmpty()) if(saveFileToAssets(file)) { foodDao.save(new Food(newFood.getId(),newFood.getName(),newFood.getPrice(),newFood.getQuantityAvailable(),\"/assets/\"+file.getOriginalFilename(),\"\",\"\")); } return true; } public boolean addNewItemWithUrl(String newFoodData) throws IOException { NewFood newFood = new ObjectMapper().readValue(newFoodData,NewFood.class); foodDao.save(new Food(newFood.getId(),newFood.getName(),newFood.getPrice(),newFood.getQuantityAvailable(),newFood.getFileDataF(),\"\",\"\")); return true; } private boolean saveFileToAssets(MultipartFile file) throws IOException { Path filepath = Paths.get(storagePath, file.getOriginalFilename()); file.transferTo(filepath); return true; } public int claculateTotal(NewCart[] newCart){ int total=0; List<Food> foods = foodDao.findAll(); for(int i=0;i<foods.size();i++) { total+=foods.get(i).getPrice()*newCart[i].getQuantity(); } return total; } public boolean itemIdAvailable(String itemId) { return foodDao.findById(itemId).isPresent(); } }","dependencies":[{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\dao\\CartDao.java","file_content":"package com.xwiggy.food.dao; import com.xwiggy.food.model.Cart; import org.springframework.data.jpa.repository.JpaRepository; public interface CartDao extends JpaRepository<Cart,Integer> { }"},{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\dao\\FoodDao.java","file_content":"package com.xwiggy.food.dao; import com.xwiggy.food.model.Food; import org.springframework.data.jpa.repository.JpaRepository; public interface FoodDao extends JpaRepository<Food,String> { }"},{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\model\\Cart.java","file_content":"package com.xwiggy.food.model; import javax.persistence.Entity; import javax.persistence.Id; @Entity public class Cart { @Id private int quantity1; private int quantity2; private int quantity3; private int quantity4; private int quantity5; private int quantity6; public Cart(){} public Cart(int quantity1, int quantity2, int quantity3, int quantity4, int quantity5, int quantity6) { this.quantity1 = quantity1; this.quantity2 = quantity2; this.quantity3 = quantity3; this.quantity4 = quantity4; this.quantity5 = quantity5; this.quantity6 = quantity6; } public int getQuantity1() { return quantity1; } public void setQuantity1(int quantity1) { this.quantity1 = quantity1; } public int getQuantity2() { return quantity2; } public void setQuantity2(int quantity2) { this.quantity2 = quantity2; } public int getQuantity3() { return quantity3; } public void setQuantity3(int quantity3) { this.quantity3 = quantity3; } public int getQuantity4() { return quantity4; } public void setQuantity4(int quantity4) { this.quantity4 = quantity4; } public int getQuantity5() { return quantity5; } public void setQuantity5(int quantity5) { this.quantity5 = quantity5; } public int getQuantity6() { return quantity6; } public void setQuantity6(int quantity6) { this.quantity6 = quantity6; } @Override public String toString() { return \"Cart{\" + \"quantity1=\" + quantity1 + \", quantity2=\" + quantity2 + \", quantity3=\" + quantity3 + \", quantity4=\" + quantity4 + \", quantity5=\" + quantity5 + \", quantity6=\" + quantity6 + '}'; } }"},{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\model\\Food.java","file_content":"package com.xwiggy.food.model; import javax.persistence.Entity; import javax.persistence.Id; @Entity public class Food { @Id private String id; private String item; private int price; private int quantity; private String url; private String formID; private String cartID; public Food(){} public Food(String id, String item, int price,int quantity, String url, String formID, String cartID) { this.id = id; this.item = item; this.price = price; this.quantity=quantity; this.url=url; this.formID=formID; this.cartID=cartID; } public String getFormID() { return formID; } public void setFormID(String formID) { this.formID = formID; } public String getCartID() { return cartID; } public void setCartID(String cartID) { this.cartID = cartID; } public String getUrl(){ return url; } public void setUrl(String url){ this.url=url; } public String getId() { return id; } public void setId(String id) { this.id = id; } public String getItem() { return item; } public void setItem(String item) { this.item = item; } public int getPrice() { return price; } public void setPrice(int price) { this.price = price; } public int getQuantity() { return quantity; } public void setQuantity(int quantity) { this.quantity = quantity; } @Override public String toString() { return \"Food{\" + \"id='\" + id + '\\'' + \", item='\" + item + '\\'' + \", price=\" + price + \", quantity=\" + quantity + \", url='\" + url + '\\'' + \", formID='\" + formID + '\\'' + \", cartID='\" + cartID + '\\'' + '}'; } }"},{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\model\\NewCart.java","file_content":"package com.xwiggy.food.model; public class NewCart { private int quantity; public NewCart(){} public NewCart(int quantity) { this.quantity = quantity; } public int getQuantity() { return quantity; } public void setQuantity(int quantity) { this.quantity = quantity; } @Override public String toString() { return \"NewCart{\" + \"quantity=\" + quantity + '}'; } }"},{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\model\\NewFood.java","file_content":"package com.xwiggy.food.model; public class NewFood { private String id; private String name; private int price; private int quantityAvailable; private String fileDataF; public NewFood(){} public NewFood(String id, String name, int price, int quantityAvailable, String fileDataF) { this.id = id; this.name = name; this.price = price; this.quantityAvailable = quantityAvailable; this.fileDataF = fileDataF; } public String getId() { return id; } public void setId(String id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getPrice() { return price; } public void setPrice(int price) { this.price = price; } public int getQuantityAvailable() { return quantityAvailable; } public void setQuantityAvailable(int quantityAvailable) { this.quantityAvailable = quantityAvailable; } public String getFileDataF() { return fileDataF; } public void setFileDataF(String fileDataF) { this.fileDataF = fileDataF; } @Override public String toString() { return \"NewFood{\" + \"id='\" + id + '\\'' + \", name='\" + name + '\\'' + \", price=\" + price + \", quantityAvailable=\" + quantityAvailable + \", fileDataF=\" + fileDataF + '}'; } }"}]}}
{"project_id":132,"chunk_id":0,"content":{"main_file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\dao\\ContactDao.java","main_file_content":"package com.xwiggy.food.dao; import com.xwiggy.food.model.Contact; import org.springframework.data.jpa.repository.JpaRepository; public interface ContactDao extends JpaRepository<Contact,Integer> { }","dependencies":[{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\model\\Contact.java","file_content":"package com.xwiggy.food.model; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; @Entity public class Contact { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private int id; private String name; private String email; private String message; public Contact(){} public Contact(String name, String email, String message) { this.name = name; this.email = email; this.message = message; } public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getMessage() { return message; } public void setMessage(String message) { this.message = message; } @Override public String toString() { return \"Contact{\" + \"id=\" + id + \", name='\" + name + '\\'' + \", email='\" + email + '\\'' + \", message='\" + message + '\\'' + '}'; } }"}]}}
{"project_id":132,"chunk_id":0,"content":{"main_file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\dao\\ContactDaoImpl.java","main_file_content":"package com.xwiggy.food.dao; import com.xwiggy.food.model.Contact; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; @Service public class ContactDaoImpl{ @Autowired ContactDao contactDao; public boolean saveMessage(Contact contact){ contactDao.save(contact); return true; } }","dependencies":[{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\dao\\ContactDao.java","file_content":"package com.xwiggy.food.dao; import com.xwiggy.food.model.Contact; import org.springframework.data.jpa.repository.JpaRepository; public interface ContactDao extends JpaRepository<Contact,Integer> { }"},{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\model\\Contact.java","file_content":"package com.xwiggy.food.model; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; @Entity public class Contact { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private int id; private String name; private String email; private String message; public Contact(){} public Contact(String name, String email, String message) { this.name = name; this.email = email; this.message = message; } public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getMessage() { return message; } public void setMessage(String message) { this.message = message; } @Override public String toString() { return \"Contact{\" + \"id=\" + id + \", name='\" + name + '\\'' + \", email='\" + email + '\\'' + \", message='\" + message + '\\'' + '}'; } }"}]}}
{"project_id":132,"chunk_id":0,"content":{"main_file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\dao\\FoodDao.java","main_file_content":"package com.xwiggy.food.dao; import com.xwiggy.food.model.Food; import org.springframework.data.jpa.repository.JpaRepository; public interface FoodDao extends JpaRepository<Food,String> { }","dependencies":[{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\model\\Food.java","file_content":"package com.xwiggy.food.model; import javax.persistence.Entity; import javax.persistence.Id; @Entity public class Food { @Id private String id; private String item; private int price; private int quantity; private String url; private String formID; private String cartID; public Food(){} public Food(String id, String item, int price,int quantity, String url, String formID, String cartID) { this.id = id; this.item = item; this.price = price; this.quantity=quantity; this.url=url; this.formID=formID; this.cartID=cartID; } public String getFormID() { return formID; } public void setFormID(String formID) { this.formID = formID; } public String getCartID() { return cartID; } public void setCartID(String cartID) { this.cartID = cartID; } public String getUrl(){ return url; } public void setUrl(String url){ this.url=url; } public String getId() { return id; } public void setId(String id) { this.id = id; } public String getItem() { return item; } public void setItem(String item) { this.item = item; } public int getPrice() { return price; } public void setPrice(int price) { this.price = price; } public int getQuantity() { return quantity; } public void setQuantity(int quantity) { this.quantity = quantity; } @Override public String toString() { return \"Food{\" + \"id='\" + id + '\\'' + \", item='\" + item + '\\'' + \", price=\" + price + \", quantity=\" + quantity + \", url='\" + url + '\\'' + \", formID='\" + formID + '\\'' + \", cartID='\" + cartID + '\\'' + '}'; } }"}]}}
{"project_id":132,"chunk_id":0,"content":{"main_file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\dao\\FoodDaoImpl.java","main_file_content":"package com.xwiggy.food.dao; import com.xwiggy.food.model.Food; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import java.util.List; @Service public class FoodDaoImpl { @Autowired private FoodDao foodDao; public List<Food> getFoodList(){ List<Food> food; food = foodDao.findAll(); return food; } public Food validateFoodInfo(String productId){ Food food = null; food = foodDao.findById(productId).get(); return food; } }","dependencies":[{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\dao\\FoodDao.java","file_content":"package com.xwiggy.food.dao; import com.xwiggy.food.model.Food; import org.springframework.data.jpa.repository.JpaRepository; public interface FoodDao extends JpaRepository<Food,String> { }"},{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\model\\Food.java","file_content":"package com.xwiggy.food.model; import javax.persistence.Entity; import javax.persistence.Id; @Entity public class Food { @Id private String id; private String item; private int price; private int quantity; private String url; private String formID; private String cartID; public Food(){} public Food(String id, String item, int price,int quantity, String url, String formID, String cartID) { this.id = id; this.item = item; this.price = price; this.quantity=quantity; this.url=url; this.formID=formID; this.cartID=cartID; } public String getFormID() { return formID; } public void setFormID(String formID) { this.formID = formID; } public String getCartID() { return cartID; } public void setCartID(String cartID) { this.cartID = cartID; } public String getUrl(){ return url; } public void setUrl(String url){ this.url=url; } public String getId() { return id; } public void setId(String id) { this.id = id; } public String getItem() { return item; } public void setItem(String item) { this.item = item; } public int getPrice() { return price; } public void setPrice(int price) { this.price = price; } public int getQuantity() { return quantity; } public void setQuantity(int quantity) { this.quantity = quantity; } @Override public String toString() { return \"Food{\" + \"id='\" + id + '\\'' + \", item='\" + item + '\\'' + \", price=\" + price + \", quantity=\" + quantity + \", url='\" + url + '\\'' + \", formID='\" + formID + '\\'' + \", cartID='\" + cartID + '\\'' + '}'; } }"}]}}
{"project_id":132,"chunk_id":0,"content":{"main_file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\dao\\UserDao.java","main_file_content":"package com.xwiggy.food.dao; import com.xwiggy.food.model.User; import org.springframework.data.jpa.repository.JpaRepository; public interface UserDao extends JpaRepository<User,String> { }","dependencies":[{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\model\\User.java","file_content":"package com.xwiggy.food.model; import javax.persistence.Entity; import javax.persistence.Id; @Entity public class User { @Id private String username; private String password; private String firstname; private String lastname; private String email; private String address; private int phone; private boolean merchant; public User() { } public User(String username, String password, String firstname, String lastname, String email, String address, int phone, boolean merchant) { this.username = username; this.password = password; this.firstname = firstname; this.lastname = lastname; this.email = email; this.address = address; this.phone = phone; this.merchant=merchant; } public boolean isMerchant() { return merchant; } public void setMerchant(boolean merchant) { this.merchant = merchant; } public String getUsername() { return username; } public void setUsername(String username) { System.out.println(\"username: \" + username); this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public String getFirstname() { return firstname; } public void setFirstname(String firstname) { System.out.println(\"firstname: \" + firstname); this.firstname = firstname; } public String getLastname() { return lastname; } public void setLastname(String lastname) { System.out.println(\"lastname: \" + lastname); this.lastname = lastname; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getAddress() { return address; } public void setAddress(String address) { this.address = address; } public int getPhone() { return phone; } public void setPhone(int phone) { this.phone = phone; } @Override public String toString() { return \"User{\" + \"username='\" + username + '\\'' + \", password='\" + password + '\\'' + \", firstname='\" + firstname + '\\'' + \", lastname='\" + lastname + '\\'' + \", email='\" + email + '\\'' + \", address='\" + address + '\\'' + \", phone=\" + phone + \", merchant=\" + merchant + '}'; } }"}]}}
{"project_id":132,"chunk_id":0,"content":{"main_file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\dao\\UserDaoImpl.java","main_file_content":"package com.xwiggy.food.dao; import com.xwiggy.food.model.Login; import com.xwiggy.food.model.User; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; @Service public class UserDaoImpl{ @Autowired private UserDao userDao; public void register(User user) { userDao.save(user); } public User validateUser(Login login) { User user = null; if (userDao.findById(login.getUsername()).isPresent()) { user = userDao.findById(login.getUsername()).get(); if(!user.getPassword().equals(login.getPassword())) user=null; } return user; } public Boolean usernameExists(String username){ return userDao.findById(username).isPresent(); } }","dependencies":[{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\dao\\UserDao.java","file_content":"package com.xwiggy.food.dao; import com.xwiggy.food.model.User; import org.springframework.data.jpa.repository.JpaRepository; public interface UserDao extends JpaRepository<User,String> { }"},{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\model\\Login.java","file_content":"package com.xwiggy.food.model; public class Login { private String username; private String password; public Login(){} public Login(String username, String password) { this.username = username; this.password = password; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } @Override public String toString() { return \"Login{\" + \"username='\" + username + '\\'' + \", password='\" + password + '\\'' + '}'; } }"},{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\model\\User.java","file_content":"package com.xwiggy.food.model; import javax.persistence.Entity; import javax.persistence.Id; @Entity public class User { @Id private String username; private String password; private String firstname; private String lastname; private String email; private String address; private int phone; private boolean merchant; public User() { } public User(String username, String password, String firstname, String lastname, String email, String address, int phone, boolean merchant) { this.username = username; this.password = password; this.firstname = firstname; this.lastname = lastname; this.email = email; this.address = address; this.phone = phone; this.merchant=merchant; } public boolean isMerchant() { return merchant; } public void setMerchant(boolean merchant) { this.merchant = merchant; } public String getUsername() { return username; } public void setUsername(String username) { System.out.println(\"username: \" + username); this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public String getFirstname() { return firstname; } public void setFirstname(String firstname) { System.out.println(\"firstname: \" + firstname); this.firstname = firstname; } public String getLastname() { return lastname; } public void setLastname(String lastname) { System.out.println(\"lastname: \" + lastname); this.lastname = lastname; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getAddress() { return address; } public void setAddress(String address) { this.address = address; } public int getPhone() { return phone; } public void setPhone(int phone) { this.phone = phone; } @Override public String toString() { return \"User{\" + \"username='\" + username + '\\'' + \", password='\" + password + '\\'' + \", firstname='\" + firstname + '\\'' + \", lastname='\" + lastname + '\\'' + \", email='\" + email + '\\'' + \", address='\" + address + '\\'' + \", phone=\" + phone + \", merchant=\" + merchant + '}'; } }"}]}}
{"project_id":132,"chunk_id":0,"content":{"main_file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\model\\Cart.java","main_file_content":"package com.xwiggy.food.model; import javax.persistence.Entity; import javax.persistence.Id; @Entity public class Cart { @Id private int quantity1; private int quantity2; private int quantity3; private int quantity4; private int quantity5; private int quantity6; public Cart(){} public Cart(int quantity1, int quantity2, int quantity3, int quantity4, int quantity5, int quantity6) { this.quantity1 = quantity1; this.quantity2 = quantity2; this.quantity3 = quantity3; this.quantity4 = quantity4; this.quantity5 = quantity5; this.quantity6 = quantity6; } public int getQuantity1() { return quantity1; } public void setQuantity1(int quantity1) { this.quantity1 = quantity1; } public int getQuantity2() { return quantity2; } public void setQuantity2(int quantity2) { this.quantity2 = quantity2; } public int getQuantity3() { return quantity3; } public void setQuantity3(int quantity3) { this.quantity3 = quantity3; } public int getQuantity4() { return quantity4; } public void setQuantity4(int quantity4) { this.quantity4 = quantity4; } public int getQuantity5() { return quantity5; } public void setQuantity5(int quantity5) { this.quantity5 = quantity5; } public int getQuantity6() { return quantity6; } public void setQuantity6(int quantity6) { this.quantity6 = quantity6; } @Override public String toString() { return \"Cart{\" + \"quantity1=\" + quantity1 + \", quantity2=\" + quantity2 + \", quantity3=\" + quantity3 + \", quantity4=\" + quantity4 + \", quantity5=\" + quantity5 + \", quantity6=\" + quantity6 + '}'; } }","dependencies":[]}}
{"project_id":132,"chunk_id":0,"content":{"main_file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\model\\Contact.java","main_file_content":"package com.xwiggy.food.model; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; @Entity public class Contact { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private int id; private String name; private String email; private String message; public Contact(){} public Contact(String name, String email, String message) { this.name = name; this.email = email; this.message = message; } public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getMessage() { return message; } public void setMessage(String message) { this.message = message; } @Override public String toString() { return \"Contact{\" + \"id=\" + id + \", name='\" + name + '\\'' + \", email='\" + email + '\\'' + \", message='\" + message + '\\'' + '}'; } }","dependencies":[]}}
{"project_id":132,"chunk_id":0,"content":{"main_file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\model\\Food.java","main_file_content":"package com.xwiggy.food.model; import javax.persistence.Entity; import javax.persistence.Id; @Entity public class Food { @Id private String id; private String item; private int price; private int quantity; private String url; private String formID; private String cartID; public Food(){} public Food(String id, String item, int price,int quantity, String url, String formID, String cartID) { this.id = id; this.item = item; this.price = price; this.quantity=quantity; this.url=url; this.formID=formID; this.cartID=cartID; } public String getFormID() { return formID; } public void setFormID(String formID) { this.formID = formID; } public String getCartID() { return cartID; } public void setCartID(String cartID) { this.cartID = cartID; } public String getUrl(){ return url; } public void setUrl(String url){ this.url=url; } public String getId() { return id; } public void setId(String id) { this.id = id; } public String getItem() { return item; } public void setItem(String item) { this.item = item; } public int getPrice() { return price; } public void setPrice(int price) { this.price = price; } public int getQuantity() { return quantity; } public void setQuantity(int quantity) { this.quantity = quantity; } @Override public String toString() { return \"Food{\" + \"id='\" + id + '\\'' + \", item='\" + item + '\\'' + \", price=\" + price + \", quantity=\" + quantity + \", url='\" + url + '\\'' + \", formID='\" + formID + '\\'' + \", cartID='\" + cartID + '\\'' + '}'; } }","dependencies":[]}}
{"project_id":132,"chunk_id":0,"content":{"main_file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\model\\Login.java","main_file_content":"package com.xwiggy.food.model; public class Login { private String username; private String password; public Login(){} public Login(String username, String password) { this.username = username; this.password = password; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } @Override public String toString() { return \"Login{\" + \"username='\" + username + '\\'' + \", password='\" + password + '\\'' + '}'; } }","dependencies":[]}}
{"project_id":132,"chunk_id":0,"content":{"main_file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\model\\NewCart.java","main_file_content":"package com.xwiggy.food.model; public class NewCart { private int quantity; public NewCart(){} public NewCart(int quantity) { this.quantity = quantity; } public int getQuantity() { return quantity; } public void setQuantity(int quantity) { this.quantity = quantity; } @Override public String toString() { return \"NewCart{\" + \"quantity=\" + quantity + '}'; } }","dependencies":[]}}
{"project_id":132,"chunk_id":0,"content":{"main_file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\model\\NewFood.java","main_file_content":"package com.xwiggy.food.model; public class NewFood { private String id; private String name; private int price; private int quantityAvailable; private String fileDataF; public NewFood(){} public NewFood(String id, String name, int price, int quantityAvailable, String fileDataF) { this.id = id; this.name = name; this.price = price; this.quantityAvailable = quantityAvailable; this.fileDataF = fileDataF; } public String getId() { return id; } public void setId(String id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getPrice() { return price; } public void setPrice(int price) { this.price = price; } public int getQuantityAvailable() { return quantityAvailable; } public void setQuantityAvailable(int quantityAvailable) { this.quantityAvailable = quantityAvailable; } public String getFileDataF() { return fileDataF; } public void setFileDataF(String fileDataF) { this.fileDataF = fileDataF; } @Override public String toString() { return \"NewFood{\" + \"id='\" + id + '\\'' + \", name='\" + name + '\\'' + \", price=\" + price + \", quantityAvailable=\" + quantityAvailable + \", fileDataF=\" + fileDataF + '}'; } }","dependencies":[]}}
{"project_id":132,"chunk_id":0,"content":{"main_file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\model\\User.java","main_file_content":"package com.xwiggy.food.model; import javax.persistence.Entity; import javax.persistence.Id; @Entity public class User { @Id private String username; private String password; private String firstname; private String lastname; private String email; private String address; private int phone; private boolean merchant; public User() { } public User(String username, String password, String firstname, String lastname, String email, String address, int phone, boolean merchant) { this.username = username; this.password = password; this.firstname = firstname; this.lastname = lastname; this.email = email; this.address = address; this.phone = phone; this.merchant=merchant; } public boolean isMerchant() { return merchant; } public void setMerchant(boolean merchant) { this.merchant = merchant; } public String getUsername() { return username; } public void setUsername(String username) { System.out.println(\"username: \" + username); this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public String getFirstname() { return firstname; } public void setFirstname(String firstname) { System.out.println(\"firstname: \" + firstname); this.firstname = firstname; } public String getLastname() { return lastname; } public void setLastname(String lastname) { System.out.println(\"lastname: \" + lastname); this.lastname = lastname; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getAddress() { return address; } public void setAddress(String address) { this.address = address; } public int getPhone() { return phone; } public void setPhone(int phone) { this.phone = phone; } @Override public String toString() { return \"User{\" + \"username='\" + username + '\\'' + \", password='\" + password + '\\'' + \", firstname='\" + firstname + '\\'' + \", lastname='\" + lastname + '\\'' + \", email='\" + email + '\\'' + \", address='\" + address + '\\'' + \", phone=\" + phone + \", merchant=\" + merchant + '}'; } }","dependencies":[]}}
{"project_id":132,"chunk_id":0,"content":{"main_file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\utility\\StrongAES.java","main_file_content":"package com.xwiggy.food.utility; import org.springframework.beans.factory.annotation.Value; public class StrongAES { @Value(\"${AES.Key}\") private String AESKey; public String encrypt(String password){ return this.AESKey; } } class Check{ public static void main(String[] args) { StrongAES strongAES = new StrongAES(); System.out.println(strongAES.encrypt(\"aman\")); } }","dependencies":[]}}
{"project_id":132,"chunk_id":0,"content":{"main_file_path":"Xwiggy\\xwiggy-back\\src\\test\\java\\com\\xwiggy\\food\\ApiTests.java","main_file_content":"package com.xwiggy.food; import com.fasterxml.jackson.databind.ObjectMapper; import com.xwiggy.food.controller.CartController; import com.xwiggy.food.controller.FoodController; import com.xwiggy.food.controller.LoginController; import com.xwiggy.food.controller.RegistrationController; import com.xwiggy.food.dao.CartDaoImpl; import com.xwiggy.food.dao.FoodDaoImpl; import com.xwiggy.food.dao.UserDao; import com.xwiggy.food.dao.UserDaoImpl; import com.xwiggy.food.model.Cart; import com.xwiggy.food.model.Login; import com.xwiggy.food.model.User; import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest; import org.springframework.boot.test.mock.mockito.MockBean; import org.springframework.http.MediaType; import org.springframework.test.context.junit4.SpringRunner; import org.springframework.test.web.servlet.MockMvc; import org.springframework.test.web.servlet.request.MockMvcRequestBuilders; import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print; import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status; @RunWith(SpringRunner.class) @WebMvcTest({LoginController.class,RegistrationController.class, FoodController.class, CartController.class}) public class ApiTests { @Autowired private MockMvc mvc; @MockBean UserDao userDao; @MockBean UserDaoImpl userDaoImpl; @MockBean FoodDaoImpl foodDao; @MockBean CartDaoImpl cartDao; @Test public void getLoginApi() throws Exception{ mvc.perform(MockMvcRequestBuilders .get(\"/login\") .accept(MediaType.APPLICATION_JSON)) .andDo(print()) .andExpect(status().isOk()); } @Test public void getRegisterApi() throws Exception{ mvc.perform(MockMvcRequestBuilders .get(\"/api/register\") .accept(MediaType.APPLICATION_JSON)) .andDo(print()) .andExpect(status().isOk()); } @Test public void postRegisterAPI() throws Exception { mvc.perform( MockMvcRequestBuilders .post(\"/register\") .content(asJsonString(new User(\"aman\",\"abcd1234\",\"bbbb\",\"bbbb\",\"b@gmail.com\",\"bbbb\",1234,true))) .contentType(MediaType.APPLICATION_JSON) .accept(MediaType.APPLICATION_JSON)) .andExpect(status().isOk()); } @Test public void postCheckUsernameApi() throws Exception{ mvc.perform( MockMvcRequestBuilders .post(\"/checkUserName\") .content(\"amank\").contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk()); } @Test public void getMenuApi() throws Exception{ mvc.perform(MockMvcRequestBuilders .get(\"/menu\") .accept(MediaType.APPLICATION_JSON)) .andDo(print()) .andExpect(status().isOk()); } @Test public void getChangeDBCartApi() throws Exception{ mvc.perform(MockMvcRequestBuilders .get(\"/changeDB\") .accept(MediaType.APPLICATION_JSON)) .andDo(print()) .andExpect(status().isOk()); } public static String asJsonString(final Object obj) { try { final ObjectMapper mapper = new ObjectMapper(); final String jsonContent = mapper.writeValueAsString(obj); return jsonContent; } catch (Exception e) { throw new RuntimeException(e); } } }","dependencies":[{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\controller\\CartController.java","file_content":"package com.xwiggy.food.controller; import com.xwiggy.food.dao.CartDaoImpl; import com.xwiggy.food.model.Cart; import com.xwiggy.food.model.NewCart; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.*; import org.springframework.web.multipart.MultipartFile; import java.io.IOException; @RestController @CrossOrigin public class CartController { @Autowired CartDaoImpl cartDao; @PostMapping(\"/cart\") public int getTotal(@RequestBody NewCart[] cart, Model model){ cartDao.saveToCart(cart); return cartDao.claculateTotal(cart); } @RequestMapping(\"/changeDB\") public boolean changeDB(){ cartDao.updateDB(); return true; } @PostMapping(\"/addToCart\") public NewCart[] increaseQuantity(@RequestBody NewCart[] cart, Model model){ cartDao.addItems(cart); return cart; } @PostMapping(\"/addNewItem\") public boolean addNewItem(@RequestParam(\"file\") MultipartFile file, @RequestParam(\"newFoodItem\") String newFoodData) throws IOException { return cartDao.addNewItem(file,newFoodData); } @PostMapping(\"/addNewItemUrl\") public boolean addNewItemByUrl(@RequestParam(\"newFoodItem\") String newFoodData) throws IOException { return cartDao.addNewItemWithUrl(newFoodData); } @PostMapping(\"/checkItemId\") public boolean checkItemId(@RequestBody String itemId, Model model){ return !cartDao.itemIdAvailable(itemId); } }"},{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\controller\\FoodController.java","file_content":"package com.xwiggy.food.controller; import com.xwiggy.food.dao.FoodDaoImpl; import com.xwiggy.food.model.Food; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.*; import java.util.List; @RestController @CrossOrigin public class FoodController { @Autowired FoodDaoImpl foodDao; @RequestMapping(value = \"/menu\") public List<Food> getMenu(Model model) { List<Food> foodItems ; foodItems = foodDao.getFoodList(); return foodItems; } }"},{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\controller\\LoginController.java","file_content":"package com.xwiggy.food.controller; import com.xwiggy.food.dao.UserDaoImpl; import com.xwiggy.food.model.Login; import com.xwiggy.food.model.User; import com.xwiggy.food.utility.StrongAES; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.*; @RestController @CrossOrigin public class LoginController { @Autowired private UserDaoImpl userDao; @RequestMapping(\"/login\") public Login showLogin() { return new Login(); } @PostMapping(\"/login\") public User loginProcess(@RequestBody Login login, Model model) { User user = null; user = userDao.validateUser(login); if(user!=null) user.setPassword(null); return user; } @RequestMapping(\"/xx\") private String xx(){ return new StrongAES().encrypt(\"\"); } }"},{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\controller\\RegistrationController.java","file_content":"package com.xwiggy.food.controller; import com.xwiggy.food.dao.UserDaoImpl; import com.xwiggy.food.model.User; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.*; @RestController @CrossOrigin() public class RegistrationController { @Autowired private UserDaoImpl userDao; @RequestMapping(\"/api/register\") public User showRegister() { return new User(); } @PostMapping(\"/register\") public User addUser(@RequestBody User user, Model model) { System.out.println(user.toString()); userDao.register(user); return user; } @PostMapping(\"/checkUserName\") public boolean checkAvailability(@RequestBody String username, Model model){ return userDao.usernameExists(username); } }"},{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\dao\\CartDaoImpl.java","file_content":"package com.xwiggy.food.dao; import com.fasterxml.jackson.databind.ObjectMapper; import com.xwiggy.food.model.Cart; import com.xwiggy.food.model.Food; import com.xwiggy.food.model.NewCart; import com.xwiggy.food.model.NewFood; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.stereotype.Service; import org.springframework.web.multipart.MultipartFile; import java.io.IOException; import java.nio.file.Path; import java.nio.file.Paths; import java.util.List; @Service public class CartDaoImpl{ @Autowired CartDao cartDao; @Autowired FoodDao foodDao; @Value(\"${fileStorage}\") private String storagePath; public void saveToCart(NewCart[] newCarts){ cartDao.deleteAll(); cartDao.flush(); Cart cart= new Cart(1,0,0,0,0,0); cart.setQuantity1(newCarts[0].getQuantity()); cart.setQuantity2(newCarts[1].getQuantity()); cart.setQuantity3(newCarts[2].getQuantity()); if(newCarts.length>3) cart.setQuantity4(newCarts[3].getQuantity()); if(newCarts.length>4) cart.setQuantity5(newCarts[4].getQuantity()); if(newCarts.length>5) cart.setQuantity6(newCarts[6].getQuantity()); cartDao.save(cart); } public void updateDB(){ List<Cart> carts =cartDao.findAll(); Cart cart = carts.get(1); List<Food> foods = foodDao.findAll(); foods.get(0).setQuantity(foods.get(0).getQuantity()-cart.getQuantity1()); foods.get(1).setQuantity(foods.get(1).getQuantity()-cart.getQuantity2()); foods.get(2).setQuantity(foods.get(2).getQuantity()-cart.getQuantity3()); if(foods.size()>3) foods.get(3).setQuantity(foods.get(3).getQuantity()-cart.getQuantity4()); if(foods.size()>4) foods.get(4).setQuantity(foods.get(4).getQuantity()-cart.getQuantity5()); if(foods.size()>5) foods.get(5).setQuantity(foods.get(5).getQuantity()-cart.getQuantity6()); foodDao.saveAll(foods); } public List<Cart> getAllCart(){ return cartDao.findAll(); } public void addItems(NewCart[] cart){ List<Food> foods = foodDao.findAll(); for(int i=0;i<foods.size();i++){ foods.get(i).setQuantity(foods.get(i).getQuantity()+cart[i].getQuantity()); } foodDao.saveAll(foods); } public boolean addNewItem(MultipartFile file, String newFoodData) throws IOException { NewFood newFood = new ObjectMapper().readValue(newFoodData,NewFood.class); if(!file.isEmpty()) if(saveFileToAssets(file)) { foodDao.save(new Food(newFood.getId(),newFood.getName(),newFood.getPrice(),newFood.getQuantityAvailable(),\"/assets/\"+file.getOriginalFilename(),\"\",\"\")); } return true; } public boolean addNewItemWithUrl(String newFoodData) throws IOException { NewFood newFood = new ObjectMapper().readValue(newFoodData,NewFood.class); foodDao.save(new Food(newFood.getId(),newFood.getName(),newFood.getPrice(),newFood.getQuantityAvailable(),newFood.getFileDataF(),\"\",\"\")); return true; } private boolean saveFileToAssets(MultipartFile file) throws IOException { Path filepath = Paths.get(storagePath, file.getOriginalFilename()); file.transferTo(filepath); return true; } public int claculateTotal(NewCart[] newCart){ int total=0; List<Food> foods = foodDao.findAll(); for(int i=0;i<foods.size();i++) { total+=foods.get(i).getPrice()*newCart[i].getQuantity(); } return total; } public boolean itemIdAvailable(String itemId) { return foodDao.findById(itemId).isPresent(); } }"},{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\dao\\FoodDaoImpl.java","file_content":"package com.xwiggy.food.dao; import com.xwiggy.food.model.Food; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import java.util.List; @Service public class FoodDaoImpl { @Autowired private FoodDao foodDao; public List<Food> getFoodList(){ List<Food> food; food = foodDao.findAll(); return food; } public Food validateFoodInfo(String productId){ Food food = null; food = foodDao.findById(productId).get(); return food; } }"},{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\dao\\UserDao.java","file_content":"package com.xwiggy.food.dao; import com.xwiggy.food.model.User; import org.springframework.data.jpa.repository.JpaRepository; public interface UserDao extends JpaRepository<User,String> { }"},{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\dao\\UserDaoImpl.java","file_content":"package com.xwiggy.food.dao; import com.xwiggy.food.model.Login; import com.xwiggy.food.model.User; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; @Service public class UserDaoImpl{ @Autowired private UserDao userDao; public void register(User user) { userDao.save(user); } public User validateUser(Login login) { User user = null; if (userDao.findById(login.getUsername()).isPresent()) { user = userDao.findById(login.getUsername()).get(); if(!user.getPassword().equals(login.getPassword())) user=null; } return user; } public Boolean usernameExists(String username){ return userDao.findById(username).isPresent(); } }"},{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\model\\User.java","file_content":"package com.xwiggy.food.model; import javax.persistence.Entity; import javax.persistence.Id; @Entity public class User { @Id private String username; private String password; private String firstname; private String lastname; private String email; private String address; private int phone; private boolean merchant; public User() { } public User(String username, String password, String firstname, String lastname, String email, String address, int phone, boolean merchant) { this.username = username; this.password = password; this.firstname = firstname; this.lastname = lastname; this.email = email; this.address = address; this.phone = phone; this.merchant=merchant; } public boolean isMerchant() { return merchant; } public void setMerchant(boolean merchant) { this.merchant = merchant; } public String getUsername() { return username; } public void setUsername(String username) { System.out.println(\"username: \" + username); this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public String getFirstname() { return firstname; } public void setFirstname(String firstname) { System.out.println(\"firstname: \" + firstname); this.firstname = firstname; } public String getLastname() { return lastname; } public void setLastname(String lastname) { System.out.println(\"lastname: \" + lastname); this.lastname = lastname; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getAddress() { return address; } public void setAddress(String address) { this.address = address; } public int getPhone() { return phone; } public void setPhone(int phone) { this.phone = phone; } @Override public String toString() { return \"User{\" + \"username='\" + username + '\\'' + \", password='\" + password + '\\'' + \", firstname='\" + firstname + '\\'' + \", lastname='\" + lastname + '\\'' + \", email='\" + email + '\\'' + \", address='\" + address + '\\'' + \", phone=\" + phone + \", merchant=\" + merchant + '}'; } }"}]}}
{"project_id":132,"chunk_id":0,"content":{"main_file_path":"Xwiggy\\xwiggy-back\\src\\test\\java\\com\\xwiggy\\food\\XwiggyApplicationTests.java","main_file_content":"package com.xwiggy.food; import com.xwiggy.food.dao.CartDaoImpl; import com.xwiggy.food.dao.FoodDaoImpl; import com.xwiggy.food.dao.UserDao; import com.xwiggy.food.dao.UserDaoImpl; import com.xwiggy.food.model.Cart; import com.xwiggy.food.model.Food; import com.xwiggy.food.model.Login; import com.xwiggy.food.model.User; import org.junit.Assert; import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.test.context.junit4.SpringRunner; import java.util.List; @RunWith(SpringRunner.class) @SpringBootTest public class XwiggyApplicationTests { @Autowired UserDao userDao; @Autowired UserDaoImpl userDaoImpl; @Autowired FoodDaoImpl foodDao; @Autowired CartDaoImpl cartDao; @Test public void contextLoads() { Login login = new Login(); login.setUsername(\"amank\"); login.setPassword(\"abcd1234\"); User user = userDaoImpl.validateUser(login); Assert.assertEquals(\"Aman\",user.getFirstname()); Assert.assertEquals(\"Kumar\",user.getLastname()); Assert.assertEquals(\"aman@gmail.com\",user.getEmail()); Assert.assertEquals(9585418,user.getPhone()); } @Test public void checkFoodTable(){ Food food = new Food(); food.setId(\"abc\"); Food food1 = foodDao.validateFoodInfo(food.getId()); Assert.assertEquals(\"Coffee\",food1.getItem()); Assert.assertEquals(50,food1.getPrice()); } @Test public void checkCartDb(){ List<Cart> carts = cartDao.getAllCart(); Cart zero = carts.get(0); Assert.assertEquals(0,zero.getQuantity1()); Assert.assertEquals(0,zero.getQuantity2()); Assert.assertEquals(0,zero.getQuantity3()); } }","dependencies":[{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\dao\\CartDaoImpl.java","file_content":"package com.xwiggy.food.dao; import com.fasterxml.jackson.databind.ObjectMapper; import com.xwiggy.food.model.Cart; import com.xwiggy.food.model.Food; import com.xwiggy.food.model.NewCart; import com.xwiggy.food.model.NewFood; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.stereotype.Service; import org.springframework.web.multipart.MultipartFile; import java.io.IOException; import java.nio.file.Path; import java.nio.file.Paths; import java.util.List; @Service public class CartDaoImpl{ @Autowired CartDao cartDao; @Autowired FoodDao foodDao; @Value(\"${fileStorage}\") private String storagePath; public void saveToCart(NewCart[] newCarts){ cartDao.deleteAll(); cartDao.flush(); Cart cart= new Cart(1,0,0,0,0,0); cart.setQuantity1(newCarts[0].getQuantity()); cart.setQuantity2(newCarts[1].getQuantity()); cart.setQuantity3(newCarts[2].getQuantity()); if(newCarts.length>3) cart.setQuantity4(newCarts[3].getQuantity()); if(newCarts.length>4) cart.setQuantity5(newCarts[4].getQuantity()); if(newCarts.length>5) cart.setQuantity6(newCarts[6].getQuantity()); cartDao.save(cart); } public void updateDB(){ List<Cart> carts =cartDao.findAll(); Cart cart = carts.get(1); List<Food> foods = foodDao.findAll(); foods.get(0).setQuantity(foods.get(0).getQuantity()-cart.getQuantity1()); foods.get(1).setQuantity(foods.get(1).getQuantity()-cart.getQuantity2()); foods.get(2).setQuantity(foods.get(2).getQuantity()-cart.getQuantity3()); if(foods.size()>3) foods.get(3).setQuantity(foods.get(3).getQuantity()-cart.getQuantity4()); if(foods.size()>4) foods.get(4).setQuantity(foods.get(4).getQuantity()-cart.getQuantity5()); if(foods.size()>5) foods.get(5).setQuantity(foods.get(5).getQuantity()-cart.getQuantity6()); foodDao.saveAll(foods); } public List<Cart> getAllCart(){ return cartDao.findAll(); } public void addItems(NewCart[] cart){ List<Food> foods = foodDao.findAll(); for(int i=0;i<foods.size();i++){ foods.get(i).setQuantity(foods.get(i).getQuantity()+cart[i].getQuantity()); } foodDao.saveAll(foods); } public boolean addNewItem(MultipartFile file, String newFoodData) throws IOException { NewFood newFood = new ObjectMapper().readValue(newFoodData,NewFood.class); if(!file.isEmpty()) if(saveFileToAssets(file)) { foodDao.save(new Food(newFood.getId(),newFood.getName(),newFood.getPrice(),newFood.getQuantityAvailable(),\"/assets/\"+file.getOriginalFilename(),\"\",\"\")); } return true; } public boolean addNewItemWithUrl(String newFoodData) throws IOException { NewFood newFood = new ObjectMapper().readValue(newFoodData,NewFood.class); foodDao.save(new Food(newFood.getId(),newFood.getName(),newFood.getPrice(),newFood.getQuantityAvailable(),newFood.getFileDataF(),\"\",\"\")); return true; } private boolean saveFileToAssets(MultipartFile file) throws IOException { Path filepath = Paths.get(storagePath, file.getOriginalFilename()); file.transferTo(filepath); return true; } public int claculateTotal(NewCart[] newCart){ int total=0; List<Food> foods = foodDao.findAll(); for(int i=0;i<foods.size();i++) { total+=foods.get(i).getPrice()*newCart[i].getQuantity(); } return total; } public boolean itemIdAvailable(String itemId) { return foodDao.findById(itemId).isPresent(); } }"},{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\dao\\FoodDaoImpl.java","file_content":"package com.xwiggy.food.dao; import com.xwiggy.food.model.Food; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import java.util.List; @Service public class FoodDaoImpl { @Autowired private FoodDao foodDao; public List<Food> getFoodList(){ List<Food> food; food = foodDao.findAll(); return food; } public Food validateFoodInfo(String productId){ Food food = null; food = foodDao.findById(productId).get(); return food; } }"},{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\dao\\UserDao.java","file_content":"package com.xwiggy.food.dao; import com.xwiggy.food.model.User; import org.springframework.data.jpa.repository.JpaRepository; public interface UserDao extends JpaRepository<User,String> { }"},{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\dao\\UserDaoImpl.java","file_content":"package com.xwiggy.food.dao; import com.xwiggy.food.model.Login; import com.xwiggy.food.model.User; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; @Service public class UserDaoImpl{ @Autowired private UserDao userDao; public void register(User user) { userDao.save(user); } public User validateUser(Login login) { User user = null; if (userDao.findById(login.getUsername()).isPresent()) { user = userDao.findById(login.getUsername()).get(); if(!user.getPassword().equals(login.getPassword())) user=null; } return user; } public Boolean usernameExists(String username){ return userDao.findById(username).isPresent(); } }"},{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\model\\Cart.java","file_content":"package com.xwiggy.food.model; import javax.persistence.Entity; import javax.persistence.Id; @Entity public class Cart { @Id private int quantity1; private int quantity2; private int quantity3; private int quantity4; private int quantity5; private int quantity6; public Cart(){} public Cart(int quantity1, int quantity2, int quantity3, int quantity4, int quantity5, int quantity6) { this.quantity1 = quantity1; this.quantity2 = quantity2; this.quantity3 = quantity3; this.quantity4 = quantity4; this.quantity5 = quantity5; this.quantity6 = quantity6; } public int getQuantity1() { return quantity1; } public void setQuantity1(int quantity1) { this.quantity1 = quantity1; } public int getQuantity2() { return quantity2; } public void setQuantity2(int quantity2) { this.quantity2 = quantity2; } public int getQuantity3() { return quantity3; } public void setQuantity3(int quantity3) { this.quantity3 = quantity3; } public int getQuantity4() { return quantity4; } public void setQuantity4(int quantity4) { this.quantity4 = quantity4; } public int getQuantity5() { return quantity5; } public void setQuantity5(int quantity5) { this.quantity5 = quantity5; } public int getQuantity6() { return quantity6; } public void setQuantity6(int quantity6) { this.quantity6 = quantity6; } @Override public String toString() { return \"Cart{\" + \"quantity1=\" + quantity1 + \", quantity2=\" + quantity2 + \", quantity3=\" + quantity3 + \", quantity4=\" + quantity4 + \", quantity5=\" + quantity5 + \", quantity6=\" + quantity6 + '}'; } }"},{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\model\\Food.java","file_content":"package com.xwiggy.food.model; import javax.persistence.Entity; import javax.persistence.Id; @Entity public class Food { @Id private String id; private String item; private int price; private int quantity; private String url; private String formID; private String cartID; public Food(){} public Food(String id, String item, int price,int quantity, String url, String formID, String cartID) { this.id = id; this.item = item; this.price = price; this.quantity=quantity; this.url=url; this.formID=formID; this.cartID=cartID; } public String getFormID() { return formID; } public void setFormID(String formID) { this.formID = formID; } public String getCartID() { return cartID; } public void setCartID(String cartID) { this.cartID = cartID; } public String getUrl(){ return url; } public void setUrl(String url){ this.url=url; } public String getId() { return id; } public void setId(String id) { this.id = id; } public String getItem() { return item; } public void setItem(String item) { this.item = item; } public int getPrice() { return price; } public void setPrice(int price) { this.price = price; } public int getQuantity() { return quantity; } public void setQuantity(int quantity) { this.quantity = quantity; } @Override public String toString() { return \"Food{\" + \"id='\" + id + '\\'' + \", item='\" + item + '\\'' + \", price=\" + price + \", quantity=\" + quantity + \", url='\" + url + '\\'' + \", formID='\" + formID + '\\'' + \", cartID='\" + cartID + '\\'' + '}'; } }"},{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\model\\Login.java","file_content":"package com.xwiggy.food.model; public class Login { private String username; private String password; public Login(){} public Login(String username, String password) { this.username = username; this.password = password; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } @Override public String toString() { return \"Login{\" + \"username='\" + username + '\\'' + \", password='\" + password + '\\'' + '}'; } }"},{"file_path":"Xwiggy\\xwiggy-back\\src\\main\\java\\com\\xwiggy\\food\\model\\User.java","file_content":"package com.xwiggy.food.model; import javax.persistence.Entity; import javax.persistence.Id; @Entity public class User { @Id private String username; private String password; private String firstname; private String lastname; private String email; private String address; private int phone; private boolean merchant; public User() { } public User(String username, String password, String firstname, String lastname, String email, String address, int phone, boolean merchant) { this.username = username; this.password = password; this.firstname = firstname; this.lastname = lastname; this.email = email; this.address = address; this.phone = phone; this.merchant=merchant; } public boolean isMerchant() { return merchant; } public void setMerchant(boolean merchant) { this.merchant = merchant; } public String getUsername() { return username; } public void setUsername(String username) { System.out.println(\"username: \" + username); this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public String getFirstname() { return firstname; } public void setFirstname(String firstname) { System.out.println(\"firstname: \" + firstname); this.firstname = firstname; } public String getLastname() { return lastname; } public void setLastname(String lastname) { System.out.println(\"lastname: \" + lastname); this.lastname = lastname; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getAddress() { return address; } public void setAddress(String address) { this.address = address; } public int getPhone() { return phone; } public void setPhone(int phone) { this.phone = phone; } @Override public String toString() { return \"User{\" + \"username='\" + username + '\\'' + \", password='\" + password + '\\'' + \", firstname='\" + firstname + '\\'' + \", lastname='\" + lastname + '\\'' + \", email='\" + email + '\\'' + \", address='\" + address + '\\'' + \", phone=\" + phone + \", merchant=\" + merchant + '}'; } }"}]}}
