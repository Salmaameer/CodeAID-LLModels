{"project_id":184,"chunk_id":0,"content":{"main_file_path":"Linked-Lists-Everywhere-master/src/main/java/interfases/LinkedList.java","main_file_content":"package interfases; import java.util.NoSuchElementException; public interface LinkedList<T> extends Iterable<T>, Cloneable { int length(); Node<T> getFirstNode() throws NoSuchElementException; Node<T> getLastNode() throws NoSuchElementException; Node<T> getNodeBefore(Node<T> target); Node<T> getNodeAfter(Node<T> target); void addFirstNode(Node<T> newNode); void addLastNode(Node<T> newNode); void addNodeAfter(Node<T> target, Node<T> newNode); void addNodeBefore(Node<T> target, Node<T> newNode); void removeNode(Node<T> target); Node<T> createNewNode(); Iterable<Node<T>> nodes(); }","dependencies":[]}}
{"project_id":184,"chunk_id":0,"content":{"main_file_path":"Linked-Lists-Everywhere-master/src/main/java/interfases/Node.java","main_file_content":"package interfases; public interface Node<T> { T getElement(); void setElement(T e); public void clean(); Node<T> getNext(); }","dependencies":[]}}
{"project_id":184,"chunk_id":0,"content":{"main_file_path":"Linked-Lists-Everywhere-master/src/main/java/interfases/IndexList.java","main_file_content":"package interfases; public interface IndexList<T> extends Cloneable { public int size(); public boolean isEmpty(); public void add(int i, T e) throws IndexOutOfBoundsException; public void add(T e); public T get(int i) throws IndexOutOfBoundsException; public T remove(int i) throws IndexOutOfBoundsException; public T set(int i, T e) throws IndexOutOfBoundsException; }","dependencies":[]}}
{"project_id":184,"chunk_id":0,"content":{"main_file_path":"Linked-Lists-Everywhere-master/src/main/java/indexlist/LLIndexList.java","main_file_content":"package indexlist; import interfases.IndexList; import interfases.LinkedList; import interfases.Node; public class LLIndexList<T> implements IndexList<T> { private LinkedList<T> internalLL; public LLIndexList(LinkedList<T> theList) { internalLL = theList; } public int size() { return internalLL.length(); } public boolean isEmpty() { return this.size() == 0; } private Node<T> getDataNodeAtPosition(int posIndex) { Node<T> target = internalLL.getFirstNode(); for (int p=1; p<= posIndex; p++) target = internalLL.getNodeAfter(target); return target; } public void add(int index, T e) throws IndexOutOfBoundsException { if (index < 0 || index > internalLL.length()) throw new IndexOutOfBoundsException(\"add: index=\" + index + \" is out of bounds. size = \" + internalLL.length()); Node<T> newNode = internalLL.createNewNode(); newNode.setElement(e); if (index==0) internalLL.addFirstNode(newNode); else { Node<T> previousNode = getDataNodeAtPosition(index-1); internalLL.addNodeAfter(previousNode, newNode); } } public void add(T e) { Node<T> newNode = internalLL.createNewNode(); newNode.setElement(e); Node<T> previousNode = internalLL.getLastNode(); internalLL.addNodeAfter(previousNode, newNode); } public T get(int index) throws IndexOutOfBoundsException { if (index < 0 || index >= internalLL.length()) throw new IndexOutOfBoundsException(\"get: index=\" + index + \" is out of bounds.\"); Node<T> targetINode = this.getDataNodeAtPosition(index); return targetINode.getElement(); } public T remove(int index) throws IndexOutOfBoundsException { if (index < 0 || index >= internalLL.length()) throw new IndexOutOfBoundsException(\"remove: index=\" + index + \" is out of bounds.\"); Node<T> ntr = this.getDataNodeAtPosition(index); T etr = ntr.getElement(); this.internalLL.removeNode(ntr); return etr; } public T set(int index, T e) throws IndexOutOfBoundsException { if (index < 0 || index >= internalLL.length()) throw new IndexOutOfBoundsException(\"set: index=\" + index + \" is out of bounds.\"); Node<T> ntc = this.getDataNodeAtPosition(index); T etr = ntc.getElement(); ntc.setElement(e); return etr; } }","dependencies":[{"file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/interfases/IndexList.java","file_content":"package interfases; public interface IndexList<T> extends Cloneable { public int size(); public boolean isEmpty(); public void add(int i, T e) throws IndexOutOfBoundsException; public void add(T e); public T get(int i) throws IndexOutOfBoundsException; public T remove(int i) throws IndexOutOfBoundsException; public T set(int i, T e) throws IndexOutOfBoundsException; }"}]}}
{"project_id":184,"chunk_id":0,"content":{"main_file_path":"Linked-Lists-Everywhere-master/src/main/java/linkedLists/SLList.java","main_file_content":"package linkedLists; import interfases.LinkedList; import interfases.Node; import java.util.Iterator; import java.util.NoSuchElementException; public class SLList<T> extends AbstractSLList<T> { private SNode<T> first; private int length; public SLList() { first = null; length = 0; } public void addFirstNode(Node<T> nuevo) { ((SNode<T>) nuevo).setNext(first); first = (SNode<T>) nuevo; length++; } public void addLastNode(Node<T> nuevo) { SNode<T> sNuevo = (SNode<T>) nuevo; sNuevo.setNext(null); if (length == 0) first = sNuevo; else { SNode<T> p = first; while (p.getNext() != null) p = p.getNext(); p.setNext(sNuevo); } length++; } public void addNodeAfter(Node<T> target, Node<T> nuevo) { ((SNode<T>) nuevo).setNext((SNode<T>) target.getNext()); ((SNode<T>) target).setNext((SNode<T>) nuevo); length++; } public void addNodeBefore(Node<T> target, Node<T> nuevo) { if (target == first) this.addFirstNode(nuevo); else { Node<T> prevNode = findNodePrevTo(target); this.addNodeAfter(prevNode, nuevo); } } private Node<T> findNodePrevTo(Node<T> target) { if (target == first) return null; else { SNode<T> prev = first; while (prev != null && prev.getNext() != target) prev = prev.getNext(); return prev; } } public Node<T> getLastNode() { if (first == null) return null; else { SNode<T> curr = first; while (curr.getNext() != null) curr = curr.getNext(); return curr; } } public Node<T> getNodeAfter(Node<T> target) { return ((SNode<T>) target).getNext(); } public Node<T> getNodeBefore(Node<T> target) { if (target == first) return null; else return findNodePrevTo(target); } public int length() { return this.length; } public void removeNode(Node<T> target) { if (target == first) first = first.getNext(); else { SNode<T> prevNode = (SNode<T>) this.getNodeBefore(target); prevNode.setNext((SNode<T>) target.getNext()); } target.clean(); length--; } public Node<T> getFirstNode() throws NoSuchElementException { if (first == null) throw new NoSuchElementException(\"getFirstNode() : linked list is empty...\"); return first; } private void destroy() { while (first != null) { SNode<T> nnode = first.getNext(); first.setElement(null); first.setNext(null); first = nnode; } } public void makeEmpty() { destroy(); length = 0; } public Node<T> createNewNode() { return new SNode<>(); } @Override public Iterable<Node<T>> nodes() { return new NodesIterable(); } @Override public Iterator<T> iterator() { return new ElementsIterator(); } private class NodesIterable implements Iterable<Node<T>> { @Override public Iterator<Node<T>> iterator() { return new NodesIterator(); } } private class ElementsIterator implements Iterator<T> { NodesIterator nodesIter = new NodesIterator(); @Override public boolean hasNext() { return nodesIter.hasNext(); } @Override public T next() { return nodesIter.next().getElement(); } public void remove() { nodesIter.remove(); } } private class NodesIterator implements Iterator<Node<T>> { private SNode<T> curr = first; private SNode<T> ptntr = null; private boolean canRemove = false; public boolean hasNext() { return curr != null; } public SNode<T> next() { if (!hasNext()) throw new NoSuchElementException(\"Iterator is completed.\"); if (canRemove) ptntr = (ptntr == null ? first : ptntr.getNext()); canRemove = true; SNode<T> ntr = curr; curr = curr.getNext(); return ntr; } public void remove() { if (!canRemove) throw new IllegalStateException(\"Not valid to remove.\"); if (ptntr == null) first = first.getNext(); else ptntr.setNext(ptntr.getNext().getNext()); length--; canRemove = false; } } @Override public LinkedList<T> clone() { LinkedList<T> listClone = new SLList<>(); for (T e : this) { Node<T> tempNode = listClone.createNewNode(); tempNode.setElement(e); listClone.addLastNode(tempNode); } return listClone; } }","dependencies":[{"file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/linkedLists/AbstractSLList.java","file_content":"package linkedLists; import interfases.LinkedList; import interfases.Node; public abstract class AbstractSLList<T> implements LinkedList<T> { protected static class SNode<T> implements Node<T> { private T element; private SNode<T> next; public SNode() { element = null; next = null; } public SNode(T data, SNode<T> next) { this.element = data; this.next = next; } public SNode(T data) { this.element = data; next = null; } public T getElement() { return element; } public void setElement(T data) { this.element = data; } public SNode<T> getNext() { return next; } public void setNext(SNode<T> next) { this.next = next; } public void clean() { element = null; next = null; } } }"},{"file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/linkedLists/SLList.java","file_content":"package linkedLists; import interfases.LinkedList; import interfases.Node; import java.util.Iterator; import java.util.NoSuchElementException; public class SLList<T> extends AbstractSLList<T> { private SNode<T> first; private int length; public SLList() { first = null; length = 0; } public void addFirstNode(Node<T> nuevo) { ((SNode<T>) nuevo).setNext(first); first = (SNode<T>) nuevo; length++; } public void addLastNode(Node<T> nuevo) { SNode<T> sNuevo = (SNode<T>) nuevo; sNuevo.setNext(null); if (length == 0) first = sNuevo; else { SNode<T> p = first; while (p.getNext() != null) p = p.getNext(); p.setNext(sNuevo); } length++; } public void addNodeAfter(Node<T> target, Node<T> nuevo) { ((SNode<T>) nuevo).setNext((SNode<T>) target.getNext()); ((SNode<T>) target).setNext((SNode<T>) nuevo); length++; } public void addNodeBefore(Node<T> target, Node<T> nuevo) { if (target == first) this.addFirstNode(nuevo); else { Node<T> prevNode = findNodePrevTo(target); this.addNodeAfter(prevNode, nuevo); } } private Node<T> findNodePrevTo(Node<T> target) { if (target == first) return null; else { SNode<T> prev = first; while (prev != null && prev.getNext() != target) prev = prev.getNext(); return prev; } } public Node<T> getLastNode() { if (first == null) return null; else { SNode<T> curr = first; while (curr.getNext() != null) curr = curr.getNext(); return curr; } } public Node<T> getNodeAfter(Node<T> target) { return ((SNode<T>) target).getNext(); } public Node<T> getNodeBefore(Node<T> target) { if (target == first) return null; else return findNodePrevTo(target); } public int length() { return this.length; } public void removeNode(Node<T> target) { if (target == first) first = first.getNext(); else { SNode<T> prevNode = (SNode<T>) this.getNodeBefore(target); prevNode.setNext((SNode<T>) target.getNext()); } target.clean(); length--; } public Node<T> getFirstNode() throws NoSuchElementException { if (first == null) throw new NoSuchElementException(\"getFirstNode() : linked list is empty...\"); return first; } private void destroy() { while (first != null) { SNode<T> nnode = first.getNext(); first.setElement(null); first.setNext(null); first = nnode; } } public void makeEmpty() { destroy(); length = 0; } public Node<T> createNewNode() { return new SNode<>(); } @Override public Iterable<Node<T>> nodes() { return new NodesIterable(); } @Override public Iterator<T> iterator() { return new ElementsIterator(); } private class NodesIterable implements Iterable<Node<T>> { @Override public Iterator<Node<T>> iterator() { return new NodesIterator(); } } private class ElementsIterator implements Iterator<T> { NodesIterator nodesIter = new NodesIterator(); @Override public boolean hasNext() { return nodesIter.hasNext(); } @Override public T next() { return nodesIter.next().getElement(); } public void remove() { nodesIter.remove(); } } private class NodesIterator implements Iterator<Node<T>> { private SNode<T> curr = first; private SNode<T> ptntr = null; private boolean canRemove = false; public boolean hasNext() { return curr != null; } public SNode<T> next() { if (!hasNext()) throw new NoSuchElementException(\"Iterator is completed.\"); if (canRemove) ptntr = (ptntr == null ? first : ptntr.getNext()); canRemove = true; SNode<T> ntr = curr; curr = curr.getNext(); return ntr; } public void remove() { if (!canRemove) throw new IllegalStateException(\"Not valid to remove.\"); if (ptntr == null) first = first.getNext(); else ptntr.setNext(ptntr.getNext().getNext()); length--; canRemove = false; } } @Override public LinkedList<T> clone() { LinkedList<T> listClone = new SLList<>(); for (T e : this) { Node<T> tempNode = listClone.createNewNode(); tempNode.setElement(e); listClone.addLastNode(tempNode); } return listClone; } }"}]}}
{"project_id":184,"chunk_id":0,"content":{"main_file_path":"Linked-Lists-Everywhere-master/src/main/java/linkedLists/AbstractSLList.java","main_file_content":"package linkedLists; import interfases.LinkedList; import interfases.Node; public abstract class AbstractSLList<T> implements LinkedList<T> { protected static class SNode<T> implements Node<T> { private T element; private SNode<T> next; public SNode() { element = null; next = null; } public SNode(T data, SNode<T> next) { this.element = data; this.next = next; } public SNode(T data) { this.element = data; next = null; } public T getElement() { return element; } public void setElement(T data) { this.element = data; } public SNode<T> getNext() { return next; } public void setNext(SNode<T> next) { this.next = next; } public void clean() { element = null; next = null; } } }","dependencies":[{"file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/interfases/LinkedList.java","file_content":"package interfases; import java.util.NoSuchElementException; public interface LinkedList<T> extends Iterable<T>, Cloneable { int length(); Node<T> getFirstNode() throws NoSuchElementException; Node<T> getLastNode() throws NoSuchElementException; Node<T> getNodeBefore(Node<T> target); Node<T> getNodeAfter(Node<T> target); void addFirstNode(Node<T> newNode); void addLastNode(Node<T> newNode); void addNodeAfter(Node<T> target, Node<T> newNode); void addNodeBefore(Node<T> target, Node<T> newNode); void removeNode(Node<T> target); Node<T> createNewNode(); Iterable<Node<T>> nodes(); }"},{"file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/interfases/Node.java","file_content":"package interfases; public interface Node<T> { T getElement(); void setElement(T e); public void clean(); Node<T> getNext(); }"}]}}
{"project_id":184,"chunk_id":0,"content":{"main_file_path":"Linked-Lists-Everywhere-master/src/main/java/linkedLists/DLDHDTList.java","main_file_content":"package linkedLists; import interfases.LinkedList; import interfases.Node; import java.util.Iterator; import java.util.NoSuchElementException; public class DLDHDTList<T> extends AbstractDLList<T> { private DNode<T> header, trailer; private int length; public DLDHDTList() { header = new DNode<>(); trailer =new DNode<>(); header.setNext(trailer); trailer.setPrev(header); length = 0; } public void addFirstNode(Node<T> newNode) { addNodeAfter(header, newNode); } public void addLastNode(Node<T> newNode) { DNode<T> dNewNode = (DNode<T>) newNode; DNode<T> nBefore = trailer.getPrev(); nBefore.setNext(dNewNode); trailer.setPrev(dNewNode); dNewNode.setPrev(nBefore); dNewNode.setNext(trailer); length++; } public void addNodeAfter(Node<T> target, Node<T> newNode) { DNode<T> dNewNode = (DNode<T>) newNode; DNode<T> nBefore = (DNode<T>) target; DNode<T> nAfter = nBefore.getNext(); nBefore.setNext(dNewNode); nAfter.setPrev(dNewNode); dNewNode.setPrev(nBefore); dNewNode.setNext(nAfter); length++; } public void addNodeBefore(Node<T> target, Node<T> nuevo) { DNode<T> targetNode = (DNode<T>) target; DNode<T> newNode = (DNode<T>) nuevo; newNode.setPrev(targetNode.getPrev()); newNode.setNext(targetNode); targetNode.setPrev(newNode); targetNode.setNext(targetNode.getNext()); length++; } public Node<T> createNewNode() { return new DNode<>(); } public Node<T> getFirstNode() throws NoSuchElementException { if (length == 0) throw new NoSuchElementException(\"getFirstNode: The list is empty\"); return header.getNext(); } public Node<T> getLastNode() throws NoSuchElementException { if (length == 0) throw new NoSuchElementException(\"getFirstNode: The list is empty\"); return trailer.getPrev(); } public Node<T> getNodeAfter(Node<T> target) { if (length == 0) throw new NoSuchElementException(\"getNodeAfter: list is empty\"); return ((DNode<T>) target).getNext(); } public Node<T> getNodeBefore(Node<T> target) { if (length == 0) throw new NoSuchElementException(\"getNodeBefore: list is empty\"); return ((DNode<T>) target).getPrev(); } public int length() { return length; } public void removeNode(Node<T> target) { DNode<T> tNode = (DNode<T>) target; tNode.getPrev().setNext(tNode.getNext()); tNode.getNext().setPrev(tNode.getPrev()); length--; tNode.clean(); } private void destroy() { while (header != null) { DNode<T> nodeToBeDestroyed = header.getNext(); header.clean(); header = nodeToBeDestroyed; } } public void makeEmpty() { DNode<T> dummyTrailerNode = header; while(trailer.getNext() != null) { dummyTrailerNode.setNext(null); } } @Override public Iterable<Node<T>> nodes() { return new DLDHDTList<T>.NodesIterable(); } private class NodesIterable implements Iterable<Node<T>> { @Override public Iterator<Node<T>> iterator() { return new DLDHDTList<T>.NodesIterator(); } } @Override public Iterator<T> iterator() { return new DLDHDTList<T>.ElementsIterator(); } private class ElementsIterator implements Iterator<T> { DLDHDTList<T>.NodesIterator nodesIter = new DLDHDTList<T>.NodesIterator(); @Override public boolean hasNext() { return nodesIter.hasNext(); } @Override public T next() { return nodesIter.next().getElement(); } public void remove() { nodesIter.remove(); } } @Override public LinkedList<T> clone() { LinkedList<T> listClone = new DLDHDTList<>(); for (T e : this) { Node<T> tempNode = listClone.createNewNode(); tempNode.setElement(e); listClone.addLastNode(tempNode); } return listClone; } private class NodesIterator implements Iterator<Node<T>> { private DNode<T> curr = header.getNext(); private DNode<T> ptntr = null; private boolean canRemove = false; public boolean hasNext() { return curr != null; } public DLDHDTList.DNode<T> next() { if (!hasNext()) throw new NoSuchElementException(\"Iterator is completed.\"); if (canRemove) ptntr = (ptntr == null ? curr : ptntr.getNext()); canRemove = true; DLDHDTList.DNode<T> ntr = curr; curr = curr.getNext(); return ntr; } public void remove() { if (!canRemove) throw new IllegalStateException(\"Not valid to remove.\"); if (ptntr == null) curr = curr.getNext(); else ptntr.setNext(ptntr.getNext().getNext()); length--; canRemove = false; } } }","dependencies":[{"file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/linkedLists/AbstractDLList.java","file_content":"package linkedLists; import interfases.LinkedList; import interfases.Node; public abstract class AbstractDLList<T> implements LinkedList<T> { protected static class DNode<T> implements Node<T> { private T element; private DNode<T> prev, next; public DNode() { this(null, null, null); } public DNode(T e) { this(e, null, null); } public DNode(T e, DNode<T> p, DNode<T> n) { element = e; prev = p; next = n; } public DNode<T> getPrev() { return prev; } public void setPrev(DNode<T> prev) { this.prev = prev; } public DNode<T> getNext() { return next; } public void setNext(DNode<T> next) { this.next = next; } public T getElement() { return element; } public void setElement(T data) { element = data; } public void clean() { element = null; prev = next = null; } } }"},{"file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/linkedLists/DLDHDTList.java","file_content":"package linkedLists; import interfases.LinkedList; import interfases.Node; import java.util.Iterator; import java.util.NoSuchElementException; public class DLDHDTList<T> extends AbstractDLList<T> { private DNode<T> header, trailer; private int length; public DLDHDTList() { header = new DNode<>(); trailer =new DNode<>(); header.setNext(trailer); trailer.setPrev(header); length = 0; } public void addFirstNode(Node<T> newNode) { addNodeAfter(header, newNode); } public void addLastNode(Node<T> newNode) { DNode<T> dNewNode = (DNode<T>) newNode; DNode<T> nBefore = trailer.getPrev(); nBefore.setNext(dNewNode); trailer.setPrev(dNewNode); dNewNode.setPrev(nBefore); dNewNode.setNext(trailer); length++; } public void addNodeAfter(Node<T> target, Node<T> newNode) { DNode<T> dNewNode = (DNode<T>) newNode; DNode<T> nBefore = (DNode<T>) target; DNode<T> nAfter = nBefore.getNext(); nBefore.setNext(dNewNode); nAfter.setPrev(dNewNode); dNewNode.setPrev(nBefore); dNewNode.setNext(nAfter); length++; } public void addNodeBefore(Node<T> target, Node<T> nuevo) { DNode<T> targetNode = (DNode<T>) target; DNode<T> newNode = (DNode<T>) nuevo; newNode.setPrev(targetNode.getPrev()); newNode.setNext(targetNode); targetNode.setPrev(newNode); targetNode.setNext(targetNode.getNext()); length++; } public Node<T> createNewNode() { return new DNode<>(); } public Node<T> getFirstNode() throws NoSuchElementException { if (length == 0) throw new NoSuchElementException(\"getFirstNode: The list is empty\"); return header.getNext(); } public Node<T> getLastNode() throws NoSuchElementException { if (length == 0) throw new NoSuchElementException(\"getFirstNode: The list is empty\"); return trailer.getPrev(); } public Node<T> getNodeAfter(Node<T> target) { if (length == 0) throw new NoSuchElementException(\"getNodeAfter: list is empty\"); return ((DNode<T>) target).getNext(); } public Node<T> getNodeBefore(Node<T> target) { if (length == 0) throw new NoSuchElementException(\"getNodeBefore: list is empty\"); return ((DNode<T>) target).getPrev(); } public int length() { return length; } public void removeNode(Node<T> target) { DNode<T> tNode = (DNode<T>) target; tNode.getPrev().setNext(tNode.getNext()); tNode.getNext().setPrev(tNode.getPrev()); length--; tNode.clean(); } private void destroy() { while (header != null) { DNode<T> nodeToBeDestroyed = header.getNext(); header.clean(); header = nodeToBeDestroyed; } } public void makeEmpty() { DNode<T> dummyTrailerNode = header; while(trailer.getNext() != null) { dummyTrailerNode.setNext(null); } } @Override public Iterable<Node<T>> nodes() { return new DLDHDTList<T>.NodesIterable(); } private class NodesIterable implements Iterable<Node<T>> { @Override public Iterator<Node<T>> iterator() { return new DLDHDTList<T>.NodesIterator(); } } @Override public Iterator<T> iterator() { return new DLDHDTList<T>.ElementsIterator(); } private class ElementsIterator implements Iterator<T> { DLDHDTList<T>.NodesIterator nodesIter = new DLDHDTList<T>.NodesIterator(); @Override public boolean hasNext() { return nodesIter.hasNext(); } @Override public T next() { return nodesIter.next().getElement(); } public void remove() { nodesIter.remove(); } } @Override public LinkedList<T> clone() { LinkedList<T> listClone = new DLDHDTList<>(); for (T e : this) { Node<T> tempNode = listClone.createNewNode(); tempNode.setElement(e); listClone.addLastNode(tempNode); } return listClone; } private class NodesIterator implements Iterator<Node<T>> { private DNode<T> curr = header.getNext(); private DNode<T> ptntr = null; private boolean canRemove = false; public boolean hasNext() { return curr != null; } public DLDHDTList.DNode<T> next() { if (!hasNext()) throw new NoSuchElementException(\"Iterator is completed.\"); if (canRemove) ptntr = (ptntr == null ? curr : ptntr.getNext()); canRemove = true; DLDHDTList.DNode<T> ntr = curr; curr = curr.getNext(); return ntr; } public void remove() { if (!canRemove) throw new IllegalStateException(\"Not valid to remove.\"); if (ptntr == null) curr = curr.getNext(); else ptntr.setNext(ptntr.getNext().getNext()); length--; canRemove = false; } } }"}]}}
{"project_id":184,"chunk_id":0,"content":{"main_file_path":"Linked-Lists-Everywhere-master/src/main/java/linkedLists/SLFLList.java","main_file_content":"package linkedLists; import interfases.LinkedList; import interfases.Node; import java.util.Iterator; import java.util.NoSuchElementException; public class SLFLList<T> extends AbstractSLList<T> { private SNode<T> first, last; int length; public SLFLList() { first = last = null; length = 0; } public void addFirstNode(Node<T> newNode) { if (length == 0) { first = last = (SNode<T>) newNode; } else { ((SNode<T>) newNode).setNext(first); first = (SNode<T>) newNode; } length++; } public void addNodeAfter(Node<T> target, Node<T> newNode) { if (target.equals(last)) { last = (SNode<T>) newNode; ((SNode<T>) target).setNext(last); } else { ((SNode<T>) newNode).setNext(((SNode<T>) target).getNext()); ((SNode<T>) target).setNext((SNode<T>) newNode); } length++; } private Node<T> findNodePrevTo(Node<T> target) { if (target == first) return null; else { SNode<T> prev = first; while (prev != null && prev.getNext() != target) prev = prev.getNext(); return prev; } } public void addNodeBefore(Node<T> target, Node<T> newNode) { if (target == first) this.addFirstNode(newNode); else { Node<T> prevNode = findNodePrevTo(target); assert prevNode != null; this.addNodeAfter(prevNode, newNode); } } public Node<T> getFirstNode() throws NoSuchElementException { if (first == null) throw new NoSuchElementException(\"getFirstNode() : linked list is empty...\"); return first; } public Node<T> getLastNode() { if (last == null) throw new NoSuchElementException(\"getLastNode() : linked list is empty...\"); return last; } public Node<T> getNodeAfter(Node<T> target) { if (length == 0) throw new NoSuchElementException(\"getNodeAfter: list is empty\"); if (target.equals(last)) return null; return ((SNode<T>) target).getNext(); } public Node<T> getNodeBefore(Node<T> target) { if(length == 0) throw new NoSuchElementException(\"getNodeBefore: list is empty\"); if (target.equals(first)) { return null; } else if (target.equals(last)) { return last; } else { SNode<T> prev = first; while (prev != null && prev.getNext() != target) prev = prev.getNext(); return prev; } } public int length() { return length; } public void removeNode(Node<T> target) { SNode<T> newTarget = (SNode<T>) target; SNode<T> previous; if(target == first) { first = first.getNext(); } else if(target == last) { previous = (SNode<T>) this.getNodeBefore(newTarget); previous.setNext(null); last = previous; } else { previous = (SNode<T>) this.getNodeBefore(newTarget); previous.setNext(newTarget.getNext()); } newTarget.setElement(null); newTarget.setNext(null); length--; } public Node<T> createNewNode() { return new SNode<>(); } @Override public Iterator<T> iterator() { return new ElementsIterator(); } @Override public void addLastNode(Node<T> newNode) { SNode<T> daNode = (SNode<T>) newNode; daNode.setNext(null); if (first == null) { first = daNode; } else { last.setNext(daNode); } last = daNode; length++; } @Override public Iterable<Node<T>> nodes() { return new NodesIterable(); } private class NodesIterable implements Iterable<Node<T>> { @Override public Iterator<Node<T>> iterator() { return new NodesIterator(); } } private class NodesIterator implements Iterator<Node<T>> { private SNode<T> curr = first; private SNode<T> ptntr = null; private boolean canRemove = false; public boolean hasNext() { return curr != null; } public SNode<T> next() { if (!hasNext()) throw new NoSuchElementException(\"Iterator is completed.\"); if (canRemove) ptntr = (ptntr == null ? first : ptntr.getNext()); canRemove = true; SNode<T> ntr = curr; curr = curr.getNext(); return ntr; } public void remove() { if (!canRemove) throw new IllegalStateException(\"Not valid to remove.\"); if (ptntr == null) first = first.getNext(); else ptntr.setNext(ptntr.getNext().getNext()); length--; canRemove = false; } } private class ElementsIterator implements Iterator<T> { @Override public boolean hasNext() { return false; } @Override public T next() { return null; } } @Override public LinkedList<T> clone() { LinkedList<T> listClone = new SLFLList<>(); for (T e : this) { Node<T> tempNode = listClone.createNewNode(); tempNode.setElement(e); listClone.addLastNode(tempNode); } return listClone; } }","dependencies":[{"file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/linkedLists/AbstractSLList.java","file_content":"package linkedLists; import interfases.LinkedList; import interfases.Node; public abstract class AbstractSLList<T> implements LinkedList<T> { protected static class SNode<T> implements Node<T> { private T element; private SNode<T> next; public SNode() { element = null; next = null; } public SNode(T data, SNode<T> next) { this.element = data; this.next = next; } public SNode(T data) { this.element = data; next = null; } public T getElement() { return element; } public void setElement(T data) { this.element = data; } public SNode<T> getNext() { return next; } public void setNext(SNode<T> next) { this.next = next; } public void clean() { element = null; next = null; } } }"},{"file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/linkedLists/SLFLList.java","file_content":"package linkedLists; import interfases.LinkedList; import interfases.Node; import java.util.Iterator; import java.util.NoSuchElementException; public class SLFLList<T> extends AbstractSLList<T> { private SNode<T> first, last; int length; public SLFLList() { first = last = null; length = 0; } public void addFirstNode(Node<T> newNode) { if (length == 0) { first = last = (SNode<T>) newNode; } else { ((SNode<T>) newNode).setNext(first); first = (SNode<T>) newNode; } length++; } public void addNodeAfter(Node<T> target, Node<T> newNode) { if (target.equals(last)) { last = (SNode<T>) newNode; ((SNode<T>) target).setNext(last); } else { ((SNode<T>) newNode).setNext(((SNode<T>) target).getNext()); ((SNode<T>) target).setNext((SNode<T>) newNode); } length++; } private Node<T> findNodePrevTo(Node<T> target) { if (target == first) return null; else { SNode<T> prev = first; while (prev != null && prev.getNext() != target) prev = prev.getNext(); return prev; } } public void addNodeBefore(Node<T> target, Node<T> newNode) { if (target == first) this.addFirstNode(newNode); else { Node<T> prevNode = findNodePrevTo(target); assert prevNode != null; this.addNodeAfter(prevNode, newNode); } } public Node<T> getFirstNode() throws NoSuchElementException { if (first == null) throw new NoSuchElementException(\"getFirstNode() : linked list is empty...\"); return first; } public Node<T> getLastNode() { if (last == null) throw new NoSuchElementException(\"getLastNode() : linked list is empty...\"); return last; } public Node<T> getNodeAfter(Node<T> target) { if (length == 0) throw new NoSuchElementException(\"getNodeAfter: list is empty\"); if (target.equals(last)) return null; return ((SNode<T>) target).getNext(); } public Node<T> getNodeBefore(Node<T> target) { if(length == 0) throw new NoSuchElementException(\"getNodeBefore: list is empty\"); if (target.equals(first)) { return null; } else if (target.equals(last)) { return last; } else { SNode<T> prev = first; while (prev != null && prev.getNext() != target) prev = prev.getNext(); return prev; } } public int length() { return length; } public void removeNode(Node<T> target) { SNode<T> newTarget = (SNode<T>) target; SNode<T> previous; if(target == first) { first = first.getNext(); } else if(target == last) { previous = (SNode<T>) this.getNodeBefore(newTarget); previous.setNext(null); last = previous; } else { previous = (SNode<T>) this.getNodeBefore(newTarget); previous.setNext(newTarget.getNext()); } newTarget.setElement(null); newTarget.setNext(null); length--; } public Node<T> createNewNode() { return new SNode<>(); } @Override public Iterator<T> iterator() { return new ElementsIterator(); } @Override public void addLastNode(Node<T> newNode) { SNode<T> daNode = (SNode<T>) newNode; daNode.setNext(null); if (first == null) { first = daNode; } else { last.setNext(daNode); } last = daNode; length++; } @Override public Iterable<Node<T>> nodes() { return new NodesIterable(); } private class NodesIterable implements Iterable<Node<T>> { @Override public Iterator<Node<T>> iterator() { return new NodesIterator(); } } private class NodesIterator implements Iterator<Node<T>> { private SNode<T> curr = first; private SNode<T> ptntr = null; private boolean canRemove = false; public boolean hasNext() { return curr != null; } public SNode<T> next() { if (!hasNext()) throw new NoSuchElementException(\"Iterator is completed.\"); if (canRemove) ptntr = (ptntr == null ? first : ptntr.getNext()); canRemove = true; SNode<T> ntr = curr; curr = curr.getNext(); return ntr; } public void remove() { if (!canRemove) throw new IllegalStateException(\"Not valid to remove.\"); if (ptntr == null) first = first.getNext(); else ptntr.setNext(ptntr.getNext().getNext()); length--; canRemove = false; } } private class ElementsIterator implements Iterator<T> { @Override public boolean hasNext() { return false; } @Override public T next() { return null; } } @Override public LinkedList<T> clone() { LinkedList<T> listClone = new SLFLList<>(); for (T e : this) { Node<T> tempNode = listClone.createNewNode(); tempNode.setElement(e); listClone.addLastNode(tempNode); } return listClone; } }"}]}}
{"project_id":184,"chunk_id":0,"content":{"main_file_path":"Linked-Lists-Everywhere-master/src/main/java/linkedLists/AbstractDLList.java","main_file_content":"package linkedLists; import interfases.LinkedList; import interfases.Node; public abstract class AbstractDLList<T> implements LinkedList<T> { protected static class DNode<T> implements Node<T> { private T element; private DNode<T> prev, next; public DNode() { this(null, null, null); } public DNode(T e) { this(e, null, null); } public DNode(T e, DNode<T> p, DNode<T> n) { element = e; prev = p; next = n; } public DNode<T> getPrev() { return prev; } public void setPrev(DNode<T> prev) { this.prev = prev; } public DNode<T> getNext() { return next; } public void setNext(DNode<T> next) { this.next = next; } public T getElement() { return element; } public void setElement(T data) { element = data; } public void clean() { element = null; prev = next = null; } } }","dependencies":[{"file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/interfases/LinkedList.java","file_content":"package interfases; import java.util.NoSuchElementException; public interface LinkedList<T> extends Iterable<T>, Cloneable { int length(); Node<T> getFirstNode() throws NoSuchElementException; Node<T> getLastNode() throws NoSuchElementException; Node<T> getNodeBefore(Node<T> target); Node<T> getNodeAfter(Node<T> target); void addFirstNode(Node<T> newNode); void addLastNode(Node<T> newNode); void addNodeAfter(Node<T> target, Node<T> newNode); void addNodeBefore(Node<T> target, Node<T> newNode); void removeNode(Node<T> target); Node<T> createNewNode(); Iterable<Node<T>> nodes(); }"},{"file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/interfases/Node.java","file_content":"package interfases; public interface Node<T> { T getElement(); void setElement(T e); public void clean(); Node<T> getNext(); }"}]}}
{"project_id":184,"chunk_id":0,"content":{"main_file_path":"Linked-Lists-Everywhere-master/src/test/java/CloneTester.java","main_file_content":"import linkedLists.DLDHDTList; import linkedLists.SLFLList; import linkedLists.SLList; public class CloneTester { public static void main(String[] args) throws CloneNotSupportedException { SLList<Integer> SLList = new SLList<>(); SLList<Integer> cloneSLList = (linkedLists.SLList<Integer>) SLList.clone(); SLFLList<Integer> SLFLList = new SLFLList<>(); SLFLList<Integer> cloneSLFLList = (linkedLists.SLFLList<Integer>) SLFLList.clone(); DLDHDTList<Integer> DLDHDTList = new DLDHDTList<>(); DLDHDTList<Integer> cloneDLDHDTList = (linkedLists.DLDHDTList<Integer>) DLDHDTList.clone(); } }","dependencies":[{"file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/linkedLists/DLDHDTList.java","file_content":"package linkedLists; import interfases.LinkedList; import interfases.Node; import java.util.Iterator; import java.util.NoSuchElementException; public class DLDHDTList<T> extends AbstractDLList<T> { private DNode<T> header, trailer; private int length; public DLDHDTList() { header = new DNode<>(); trailer =new DNode<>(); header.setNext(trailer); trailer.setPrev(header); length = 0; } public void addFirstNode(Node<T> newNode) { addNodeAfter(header, newNode); } public void addLastNode(Node<T> newNode) { DNode<T> dNewNode = (DNode<T>) newNode; DNode<T> nBefore = trailer.getPrev(); nBefore.setNext(dNewNode); trailer.setPrev(dNewNode); dNewNode.setPrev(nBefore); dNewNode.setNext(trailer); length++; } public void addNodeAfter(Node<T> target, Node<T> newNode) { DNode<T> dNewNode = (DNode<T>) newNode; DNode<T> nBefore = (DNode<T>) target; DNode<T> nAfter = nBefore.getNext(); nBefore.setNext(dNewNode); nAfter.setPrev(dNewNode); dNewNode.setPrev(nBefore); dNewNode.setNext(nAfter); length++; } public void addNodeBefore(Node<T> target, Node<T> nuevo) { DNode<T> targetNode = (DNode<T>) target; DNode<T> newNode = (DNode<T>) nuevo; newNode.setPrev(targetNode.getPrev()); newNode.setNext(targetNode); targetNode.setPrev(newNode); targetNode.setNext(targetNode.getNext()); length++; } public Node<T> createNewNode() { return new DNode<>(); } public Node<T> getFirstNode() throws NoSuchElementException { if (length == 0) throw new NoSuchElementException(\"getFirstNode: The list is empty\"); return header.getNext(); } public Node<T> getLastNode() throws NoSuchElementException { if (length == 0) throw new NoSuchElementException(\"getFirstNode: The list is empty\"); return trailer.getPrev(); } public Node<T> getNodeAfter(Node<T> target) { if (length == 0) throw new NoSuchElementException(\"getNodeAfter: list is empty\"); return ((DNode<T>) target).getNext(); } public Node<T> getNodeBefore(Node<T> target) { if (length == 0) throw new NoSuchElementException(\"getNodeBefore: list is empty\"); return ((DNode<T>) target).getPrev(); } public int length() { return length; } public void removeNode(Node<T> target) { DNode<T> tNode = (DNode<T>) target; tNode.getPrev().setNext(tNode.getNext()); tNode.getNext().setPrev(tNode.getPrev()); length--; tNode.clean(); } private void destroy() { while (header != null) { DNode<T> nodeToBeDestroyed = header.getNext(); header.clean(); header = nodeToBeDestroyed; } } public void makeEmpty() { DNode<T> dummyTrailerNode = header; while(trailer.getNext() != null) { dummyTrailerNode.setNext(null); } } @Override public Iterable<Node<T>> nodes() { return new DLDHDTList<T>.NodesIterable(); } private class NodesIterable implements Iterable<Node<T>> { @Override public Iterator<Node<T>> iterator() { return new DLDHDTList<T>.NodesIterator(); } } @Override public Iterator<T> iterator() { return new DLDHDTList<T>.ElementsIterator(); } private class ElementsIterator implements Iterator<T> { DLDHDTList<T>.NodesIterator nodesIter = new DLDHDTList<T>.NodesIterator(); @Override public boolean hasNext() { return nodesIter.hasNext(); } @Override public T next() { return nodesIter.next().getElement(); } public void remove() { nodesIter.remove(); } } @Override public LinkedList<T> clone() { LinkedList<T> listClone = new DLDHDTList<>(); for (T e : this) { Node<T> tempNode = listClone.createNewNode(); tempNode.setElement(e); listClone.addLastNode(tempNode); } return listClone; } private class NodesIterator implements Iterator<Node<T>> { private DNode<T> curr = header.getNext(); private DNode<T> ptntr = null; private boolean canRemove = false; public boolean hasNext() { return curr != null; } public DLDHDTList.DNode<T> next() { if (!hasNext()) throw new NoSuchElementException(\"Iterator is completed.\"); if (canRemove) ptntr = (ptntr == null ? curr : ptntr.getNext()); canRemove = true; DLDHDTList.DNode<T> ntr = curr; curr = curr.getNext(); return ntr; } public void remove() { if (!canRemove) throw new IllegalStateException(\"Not valid to remove.\"); if (ptntr == null) curr = curr.getNext(); else ptntr.setNext(ptntr.getNext().getNext()); length--; canRemove = false; } } }"},{"file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/linkedLists/SLFLList.java","file_content":"package linkedLists; import interfases.LinkedList; import interfases.Node; import java.util.Iterator; import java.util.NoSuchElementException; public class SLFLList<T> extends AbstractSLList<T> { private SNode<T> first, last; int length; public SLFLList() { first = last = null; length = 0; } public void addFirstNode(Node<T> newNode) { if (length == 0) { first = last = (SNode<T>) newNode; } else { ((SNode<T>) newNode).setNext(first); first = (SNode<T>) newNode; } length++; } public void addNodeAfter(Node<T> target, Node<T> newNode) { if (target.equals(last)) { last = (SNode<T>) newNode; ((SNode<T>) target).setNext(last); } else { ((SNode<T>) newNode).setNext(((SNode<T>) target).getNext()); ((SNode<T>) target).setNext((SNode<T>) newNode); } length++; } private Node<T> findNodePrevTo(Node<T> target) { if (target == first) return null; else { SNode<T> prev = first; while (prev != null && prev.getNext() != target) prev = prev.getNext(); return prev; } } public void addNodeBefore(Node<T> target, Node<T> newNode) { if (target == first) this.addFirstNode(newNode); else { Node<T> prevNode = findNodePrevTo(target); assert prevNode != null; this.addNodeAfter(prevNode, newNode); } } public Node<T> getFirstNode() throws NoSuchElementException { if (first == null) throw new NoSuchElementException(\"getFirstNode() : linked list is empty...\"); return first; } public Node<T> getLastNode() { if (last == null) throw new NoSuchElementException(\"getLastNode() : linked list is empty...\"); return last; } public Node<T> getNodeAfter(Node<T> target) { if (length == 0) throw new NoSuchElementException(\"getNodeAfter: list is empty\"); if (target.equals(last)) return null; return ((SNode<T>) target).getNext(); } public Node<T> getNodeBefore(Node<T> target) { if(length == 0) throw new NoSuchElementException(\"getNodeBefore: list is empty\"); if (target.equals(first)) { return null; } else if (target.equals(last)) { return last; } else { SNode<T> prev = first; while (prev != null && prev.getNext() != target) prev = prev.getNext(); return prev; } } public int length() { return length; } public void removeNode(Node<T> target) { SNode<T> newTarget = (SNode<T>) target; SNode<T> previous; if(target == first) { first = first.getNext(); } else if(target == last) { previous = (SNode<T>) this.getNodeBefore(newTarget); previous.setNext(null); last = previous; } else { previous = (SNode<T>) this.getNodeBefore(newTarget); previous.setNext(newTarget.getNext()); } newTarget.setElement(null); newTarget.setNext(null); length--; } public Node<T> createNewNode() { return new SNode<>(); } @Override public Iterator<T> iterator() { return new ElementsIterator(); } @Override public void addLastNode(Node<T> newNode) { SNode<T> daNode = (SNode<T>) newNode; daNode.setNext(null); if (first == null) { first = daNode; } else { last.setNext(daNode); } last = daNode; length++; } @Override public Iterable<Node<T>> nodes() { return new NodesIterable(); } private class NodesIterable implements Iterable<Node<T>> { @Override public Iterator<Node<T>> iterator() { return new NodesIterator(); } } private class NodesIterator implements Iterator<Node<T>> { private SNode<T> curr = first; private SNode<T> ptntr = null; private boolean canRemove = false; public boolean hasNext() { return curr != null; } public SNode<T> next() { if (!hasNext()) throw new NoSuchElementException(\"Iterator is completed.\"); if (canRemove) ptntr = (ptntr == null ? first : ptntr.getNext()); canRemove = true; SNode<T> ntr = curr; curr = curr.getNext(); return ntr; } public void remove() { if (!canRemove) throw new IllegalStateException(\"Not valid to remove.\"); if (ptntr == null) first = first.getNext(); else ptntr.setNext(ptntr.getNext().getNext()); length--; canRemove = false; } } private class ElementsIterator implements Iterator<T> { @Override public boolean hasNext() { return false; } @Override public T next() { return null; } } @Override public LinkedList<T> clone() { LinkedList<T> listClone = new SLFLList<>(); for (T e : this) { Node<T> tempNode = listClone.createNewNode(); tempNode.setElement(e); listClone.addLastNode(tempNode); } return listClone; } }"},{"file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/linkedLists/SLList.java","file_content":"package linkedLists; import interfases.LinkedList; import interfases.Node; import java.util.Iterator; import java.util.NoSuchElementException; public class SLList<T> extends AbstractSLList<T> { private SNode<T> first; private int length; public SLList() { first = null; length = 0; } public void addFirstNode(Node<T> nuevo) { ((SNode<T>) nuevo).setNext(first); first = (SNode<T>) nuevo; length++; } public void addLastNode(Node<T> nuevo) { SNode<T> sNuevo = (SNode<T>) nuevo; sNuevo.setNext(null); if (length == 0) first = sNuevo; else { SNode<T> p = first; while (p.getNext() != null) p = p.getNext(); p.setNext(sNuevo); } length++; } public void addNodeAfter(Node<T> target, Node<T> nuevo) { ((SNode<T>) nuevo).setNext((SNode<T>) target.getNext()); ((SNode<T>) target).setNext((SNode<T>) nuevo); length++; } public void addNodeBefore(Node<T> target, Node<T> nuevo) { if (target == first) this.addFirstNode(nuevo); else { Node<T> prevNode = findNodePrevTo(target); this.addNodeAfter(prevNode, nuevo); } } private Node<T> findNodePrevTo(Node<T> target) { if (target == first) return null; else { SNode<T> prev = first; while (prev != null && prev.getNext() != target) prev = prev.getNext(); return prev; } } public Node<T> getLastNode() { if (first == null) return null; else { SNode<T> curr = first; while (curr.getNext() != null) curr = curr.getNext(); return curr; } } public Node<T> getNodeAfter(Node<T> target) { return ((SNode<T>) target).getNext(); } public Node<T> getNodeBefore(Node<T> target) { if (target == first) return null; else return findNodePrevTo(target); } public int length() { return this.length; } public void removeNode(Node<T> target) { if (target == first) first = first.getNext(); else { SNode<T> prevNode = (SNode<T>) this.getNodeBefore(target); prevNode.setNext((SNode<T>) target.getNext()); } target.clean(); length--; } public Node<T> getFirstNode() throws NoSuchElementException { if (first == null) throw new NoSuchElementException(\"getFirstNode() : linked list is empty...\"); return first; } private void destroy() { while (first != null) { SNode<T> nnode = first.getNext(); first.setElement(null); first.setNext(null); first = nnode; } } public void makeEmpty() { destroy(); length = 0; } public Node<T> createNewNode() { return new SNode<>(); } @Override public Iterable<Node<T>> nodes() { return new NodesIterable(); } @Override public Iterator<T> iterator() { return new ElementsIterator(); } private class NodesIterable implements Iterable<Node<T>> { @Override public Iterator<Node<T>> iterator() { return new NodesIterator(); } } private class ElementsIterator implements Iterator<T> { NodesIterator nodesIter = new NodesIterator(); @Override public boolean hasNext() { return nodesIter.hasNext(); } @Override public T next() { return nodesIter.next().getElement(); } public void remove() { nodesIter.remove(); } } private class NodesIterator implements Iterator<Node<T>> { private SNode<T> curr = first; private SNode<T> ptntr = null; private boolean canRemove = false; public boolean hasNext() { return curr != null; } public SNode<T> next() { if (!hasNext()) throw new NoSuchElementException(\"Iterator is completed.\"); if (canRemove) ptntr = (ptntr == null ? first : ptntr.getNext()); canRemove = true; SNode<T> ntr = curr; curr = curr.getNext(); return ntr; } public void remove() { if (!canRemove) throw new IllegalStateException(\"Not valid to remove.\"); if (ptntr == null) first = first.getNext(); else ptntr.setNext(ptntr.getNext().getNext()); length--; canRemove = false; } } @Override public LinkedList<T> clone() { LinkedList<T> listClone = new SLList<>(); for (T e : this) { Node<T> tempNode = listClone.createNewNode(); tempNode.setElement(e); listClone.addLastNode(tempNode); } return listClone; } }"}]}}
{"project_id":184,"chunk_id":0,"content":{"main_file_path":"Linked-Lists-Everywhere-master/src/test/java/IndexListTester.java","main_file_content":"import indexlist.LLIndexList; import interfases.IndexList; import linkedLists.DLDHDTList; import linkedLists.SLFLList; import linkedLists.SLList; public class IndexListTester { public static void main(String[] args) { listTester(\"Testing the singly linked list (SLList): \", new LLIndexList<Integer>(new SLList<>())); System.out.println(\"\\n*******************************************************************************************\\n\"); listTester(\"Testing the singly linked list (SLFLList): \", new LLIndexList<Integer>(new SLFLList<>())); System.out.println(\"\\n*******************************************************************************************\\n\"); listTester(\"Testing the singly linked list (DLDHDTList): \", new LLIndexList<Integer>(new DLDHDTList<>())); } private static void listTester(String msg, IndexList<Integer> list) { System.out.println(msg); try { list.add(1, 400); } catch (Exception e) { System.out.println(e); } showListAfterAdding(list, 0, 435); showListAfterAdding(list, 1, 200); list.add(0, 435); list.add(1, 200); for (int i=20, j=1; i< 50; i+=5, j++) { list.add(j, i); } showList(list); showListAfterDeleting(list, 4); showListAfterDeleting(list, 2); showListAfterDeleting(list, 30); showListAfterReplacing(list, 3, 400); showListAfterReplacing(list, 0, 30); showListAfterAdding(list, 3, 700); while (!list.isEmpty()) { showListAfterDeleting(list, list.size()); showListAfterDeleting(list, 0); } showListAfterAdding(list, 0, 700); showListAfterAdding(list, 1, 800); showListAfterAdding(list, 2, 900); showListAfterAdding(list, 2, 1000); showListAfterAdding(list, 1, 1001); showListAfterAdding(list, 3, 1002); showListAfterAdding(list, 3, 700); showListAfterAdding(list, 1, 800); showListAfterAdding(list, 2, 900); showListAfterAdding(list, 2, 1000); showListAfterAdding(list, 1, 1001); showListAfterAdding(list, 3, 1002); showListAfterDeleting(list, 2); showListAfterDeleting(list, 2); showListAfterDeleting(list, 2); showListAfterDeleting(list, 2); showListAfterDeleting(list, 2); } private static void showElement(IndexList<Integer> list, int position) { try { System.out.println(\" --Element in position \" + position + \" is: \"+ list.get(position)); } catch (Exception e) { System.out.println(e); } } private static void showSize(IndexList<Integer> list) { System.out.println(\"\\nSize of the list is: \"+list.size()); } private static void showList(IndexList<Integer> list) { System.out.println(\"\\n*** The \"+ list.size()+ \" elements in the list are: \"); int lpindex = list.size(); for (int i=0; i< lpindex; i++) showElement(list,i); } private static void showListAfterDeleting(IndexList<Integer> list, int pos) { System.out.println(\"\\n -- deleting element at position \"+pos); try { Integer etr = list.remove(pos); System.out.println(\" -- value of deleted element was \"+ etr); showList(list); } catch (Exception e) { System.out.println(e); } } private static void showListAfterAdding(IndexList<Integer> list, int pos, Integer element) { System.out.println(\"\\n -- adding value \" + element+\" at position \"+pos); try { list.add(pos, element); showList(list); } catch (Exception e) { System.out.println(e); } } private static void showListAfterReplacing(IndexList<Integer> list, int pos, Integer element) { System.out.println(\"\\n -- replacing value at position \"+pos+\" by \"+element); try { Integer etr = list.set(pos, element); System.out.println(\" -- value of replaced element was \"+ etr); showList(list); } catch (Exception e) { System.out.println(e); } } }","dependencies":[{"file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/indexlist/LLIndexList.java","file_content":"package indexlist; import interfases.IndexList; import interfases.LinkedList; import interfases.Node; public class LLIndexList<T> implements IndexList<T> { private LinkedList<T> internalLL; public LLIndexList(LinkedList<T> theList) { internalLL = theList; } public int size() { return internalLL.length(); } public boolean isEmpty() { return this.size() == 0; } private Node<T> getDataNodeAtPosition(int posIndex) { Node<T> target = internalLL.getFirstNode(); for (int p=1; p<= posIndex; p++) target = internalLL.getNodeAfter(target); return target; } public void add(int index, T e) throws IndexOutOfBoundsException { if (index < 0 || index > internalLL.length()) throw new IndexOutOfBoundsException(\"add: index=\" + index + \" is out of bounds. size = \" + internalLL.length()); Node<T> newNode = internalLL.createNewNode(); newNode.setElement(e); if (index==0) internalLL.addFirstNode(newNode); else { Node<T> previousNode = getDataNodeAtPosition(index-1); internalLL.addNodeAfter(previousNode, newNode); } } public void add(T e) { Node<T> newNode = internalLL.createNewNode(); newNode.setElement(e); Node<T> previousNode = internalLL.getLastNode(); internalLL.addNodeAfter(previousNode, newNode); } public T get(int index) throws IndexOutOfBoundsException { if (index < 0 || index >= internalLL.length()) throw new IndexOutOfBoundsException(\"get: index=\" + index + \" is out of bounds.\"); Node<T> targetINode = this.getDataNodeAtPosition(index); return targetINode.getElement(); } public T remove(int index) throws IndexOutOfBoundsException { if (index < 0 || index >= internalLL.length()) throw new IndexOutOfBoundsException(\"remove: index=\" + index + \" is out of bounds.\"); Node<T> ntr = this.getDataNodeAtPosition(index); T etr = ntr.getElement(); this.internalLL.removeNode(ntr); return etr; } public T set(int index, T e) throws IndexOutOfBoundsException { if (index < 0 || index >= internalLL.length()) throw new IndexOutOfBoundsException(\"set: index=\" + index + \" is out of bounds.\"); Node<T> ntc = this.getDataNodeAtPosition(index); T etr = ntc.getElement(); ntc.setElement(e); return etr; } }"},{"file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/linkedLists/DLDHDTList.java","file_content":"package linkedLists; import interfases.LinkedList; import interfases.Node; import java.util.Iterator; import java.util.NoSuchElementException; public class DLDHDTList<T> extends AbstractDLList<T> { private DNode<T> header, trailer; private int length; public DLDHDTList() { header = new DNode<>(); trailer =new DNode<>(); header.setNext(trailer); trailer.setPrev(header); length = 0; } public void addFirstNode(Node<T> newNode) { addNodeAfter(header, newNode); } public void addLastNode(Node<T> newNode) { DNode<T> dNewNode = (DNode<T>) newNode; DNode<T> nBefore = trailer.getPrev(); nBefore.setNext(dNewNode); trailer.setPrev(dNewNode); dNewNode.setPrev(nBefore); dNewNode.setNext(trailer); length++; } public void addNodeAfter(Node<T> target, Node<T> newNode) { DNode<T> dNewNode = (DNode<T>) newNode; DNode<T> nBefore = (DNode<T>) target; DNode<T> nAfter = nBefore.getNext(); nBefore.setNext(dNewNode); nAfter.setPrev(dNewNode); dNewNode.setPrev(nBefore); dNewNode.setNext(nAfter); length++; } public void addNodeBefore(Node<T> target, Node<T> nuevo) { DNode<T> targetNode = (DNode<T>) target; DNode<T> newNode = (DNode<T>) nuevo; newNode.setPrev(targetNode.getPrev()); newNode.setNext(targetNode); targetNode.setPrev(newNode); targetNode.setNext(targetNode.getNext()); length++; } public Node<T> createNewNode() { return new DNode<>(); } public Node<T> getFirstNode() throws NoSuchElementException { if (length == 0) throw new NoSuchElementException(\"getFirstNode: The list is empty\"); return header.getNext(); } public Node<T> getLastNode() throws NoSuchElementException { if (length == 0) throw new NoSuchElementException(\"getFirstNode: The list is empty\"); return trailer.getPrev(); } public Node<T> getNodeAfter(Node<T> target) { if (length == 0) throw new NoSuchElementException(\"getNodeAfter: list is empty\"); return ((DNode<T>) target).getNext(); } public Node<T> getNodeBefore(Node<T> target) { if (length == 0) throw new NoSuchElementException(\"getNodeBefore: list is empty\"); return ((DNode<T>) target).getPrev(); } public int length() { return length; } public void removeNode(Node<T> target) { DNode<T> tNode = (DNode<T>) target; tNode.getPrev().setNext(tNode.getNext()); tNode.getNext().setPrev(tNode.getPrev()); length--; tNode.clean(); } private void destroy() { while (header != null) { DNode<T> nodeToBeDestroyed = header.getNext(); header.clean(); header = nodeToBeDestroyed; } } public void makeEmpty() { DNode<T> dummyTrailerNode = header; while(trailer.getNext() != null) { dummyTrailerNode.setNext(null); } } @Override public Iterable<Node<T>> nodes() { return new DLDHDTList<T>.NodesIterable(); } private class NodesIterable implements Iterable<Node<T>> { @Override public Iterator<Node<T>> iterator() { return new DLDHDTList<T>.NodesIterator(); } } @Override public Iterator<T> iterator() { return new DLDHDTList<T>.ElementsIterator(); } private class ElementsIterator implements Iterator<T> { DLDHDTList<T>.NodesIterator nodesIter = new DLDHDTList<T>.NodesIterator(); @Override public boolean hasNext() { return nodesIter.hasNext(); } @Override public T next() { return nodesIter.next().getElement(); } public void remove() { nodesIter.remove(); } } @Override public LinkedList<T> clone() { LinkedList<T> listClone = new DLDHDTList<>(); for (T e : this) { Node<T> tempNode = listClone.createNewNode(); tempNode.setElement(e); listClone.addLastNode(tempNode); } return listClone; } private class NodesIterator implements Iterator<Node<T>> { private DNode<T> curr = header.getNext(); private DNode<T> ptntr = null; private boolean canRemove = false; public boolean hasNext() { return curr != null; } public DLDHDTList.DNode<T> next() { if (!hasNext()) throw new NoSuchElementException(\"Iterator is completed.\"); if (canRemove) ptntr = (ptntr == null ? curr : ptntr.getNext()); canRemove = true; DLDHDTList.DNode<T> ntr = curr; curr = curr.getNext(); return ntr; } public void remove() { if (!canRemove) throw new IllegalStateException(\"Not valid to remove.\"); if (ptntr == null) curr = curr.getNext(); else ptntr.setNext(ptntr.getNext().getNext()); length--; canRemove = false; } } }"},{"file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/linkedLists/SLFLList.java","file_content":"package linkedLists; import interfases.LinkedList; import interfases.Node; import java.util.Iterator; import java.util.NoSuchElementException; public class SLFLList<T> extends AbstractSLList<T> { private SNode<T> first, last; int length; public SLFLList() { first = last = null; length = 0; } public void addFirstNode(Node<T> newNode) { if (length == 0) { first = last = (SNode<T>) newNode; } else { ((SNode<T>) newNode).setNext(first); first = (SNode<T>) newNode; } length++; } public void addNodeAfter(Node<T> target, Node<T> newNode) { if (target.equals(last)) { last = (SNode<T>) newNode; ((SNode<T>) target).setNext(last); } else { ((SNode<T>) newNode).setNext(((SNode<T>) target).getNext()); ((SNode<T>) target).setNext((SNode<T>) newNode); } length++; } private Node<T> findNodePrevTo(Node<T> target) { if (target == first) return null; else { SNode<T> prev = first; while (prev != null && prev.getNext() != target) prev = prev.getNext(); return prev; } } public void addNodeBefore(Node<T> target, Node<T> newNode) { if (target == first) this.addFirstNode(newNode); else { Node<T> prevNode = findNodePrevTo(target); assert prevNode != null; this.addNodeAfter(prevNode, newNode); } } public Node<T> getFirstNode() throws NoSuchElementException { if (first == null) throw new NoSuchElementException(\"getFirstNode() : linked list is empty...\"); return first; } public Node<T> getLastNode() { if (last == null) throw new NoSuchElementException(\"getLastNode() : linked list is empty...\"); return last; } public Node<T> getNodeAfter(Node<T> target) { if (length == 0) throw new NoSuchElementException(\"getNodeAfter: list is empty\"); if (target.equals(last)) return null; return ((SNode<T>) target).getNext(); } public Node<T> getNodeBefore(Node<T> target) { if(length == 0) throw new NoSuchElementException(\"getNodeBefore: list is empty\"); if (target.equals(first)) { return null; } else if (target.equals(last)) { return last; } else { SNode<T> prev = first; while (prev != null && prev.getNext() != target) prev = prev.getNext(); return prev; } } public int length() { return length; } public void removeNode(Node<T> target) { SNode<T> newTarget = (SNode<T>) target; SNode<T> previous; if(target == first) { first = first.getNext(); } else if(target == last) { previous = (SNode<T>) this.getNodeBefore(newTarget); previous.setNext(null); last = previous; } else { previous = (SNode<T>) this.getNodeBefore(newTarget); previous.setNext(newTarget.getNext()); } newTarget.setElement(null); newTarget.setNext(null); length--; } public Node<T> createNewNode() { return new SNode<>(); } @Override public Iterator<T> iterator() { return new ElementsIterator(); } @Override public void addLastNode(Node<T> newNode) { SNode<T> daNode = (SNode<T>) newNode; daNode.setNext(null); if (first == null) { first = daNode; } else { last.setNext(daNode); } last = daNode; length++; } @Override public Iterable<Node<T>> nodes() { return new NodesIterable(); } private class NodesIterable implements Iterable<Node<T>> { @Override public Iterator<Node<T>> iterator() { return new NodesIterator(); } } private class NodesIterator implements Iterator<Node<T>> { private SNode<T> curr = first; private SNode<T> ptntr = null; private boolean canRemove = false; public boolean hasNext() { return curr != null; } public SNode<T> next() { if (!hasNext()) throw new NoSuchElementException(\"Iterator is completed.\"); if (canRemove) ptntr = (ptntr == null ? first : ptntr.getNext()); canRemove = true; SNode<T> ntr = curr; curr = curr.getNext(); return ntr; } public void remove() { if (!canRemove) throw new IllegalStateException(\"Not valid to remove.\"); if (ptntr == null) first = first.getNext(); else ptntr.setNext(ptntr.getNext().getNext()); length--; canRemove = false; } } private class ElementsIterator implements Iterator<T> { @Override public boolean hasNext() { return false; } @Override public T next() { return null; } } @Override public LinkedList<T> clone() { LinkedList<T> listClone = new SLFLList<>(); for (T e : this) { Node<T> tempNode = listClone.createNewNode(); tempNode.setElement(e); listClone.addLastNode(tempNode); } return listClone; } }"},{"file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/linkedLists/SLList.java","file_content":"package linkedLists; import interfases.LinkedList; import interfases.Node; import java.util.Iterator; import java.util.NoSuchElementException; public class SLList<T> extends AbstractSLList<T> { private SNode<T> first; private int length; public SLList() { first = null; length = 0; } public void addFirstNode(Node<T> nuevo) { ((SNode<T>) nuevo).setNext(first); first = (SNode<T>) nuevo; length++; } public void addLastNode(Node<T> nuevo) { SNode<T> sNuevo = (SNode<T>) nuevo; sNuevo.setNext(null); if (length == 0) first = sNuevo; else { SNode<T> p = first; while (p.getNext() != null) p = p.getNext(); p.setNext(sNuevo); } length++; } public void addNodeAfter(Node<T> target, Node<T> nuevo) { ((SNode<T>) nuevo).setNext((SNode<T>) target.getNext()); ((SNode<T>) target).setNext((SNode<T>) nuevo); length++; } public void addNodeBefore(Node<T> target, Node<T> nuevo) { if (target == first) this.addFirstNode(nuevo); else { Node<T> prevNode = findNodePrevTo(target); this.addNodeAfter(prevNode, nuevo); } } private Node<T> findNodePrevTo(Node<T> target) { if (target == first) return null; else { SNode<T> prev = first; while (prev != null && prev.getNext() != target) prev = prev.getNext(); return prev; } } public Node<T> getLastNode() { if (first == null) return null; else { SNode<T> curr = first; while (curr.getNext() != null) curr = curr.getNext(); return curr; } } public Node<T> getNodeAfter(Node<T> target) { return ((SNode<T>) target).getNext(); } public Node<T> getNodeBefore(Node<T> target) { if (target == first) return null; else return findNodePrevTo(target); } public int length() { return this.length; } public void removeNode(Node<T> target) { if (target == first) first = first.getNext(); else { SNode<T> prevNode = (SNode<T>) this.getNodeBefore(target); prevNode.setNext((SNode<T>) target.getNext()); } target.clean(); length--; } public Node<T> getFirstNode() throws NoSuchElementException { if (first == null) throw new NoSuchElementException(\"getFirstNode() : linked list is empty...\"); return first; } private void destroy() { while (first != null) { SNode<T> nnode = first.getNext(); first.setElement(null); first.setNext(null); first = nnode; } } public void makeEmpty() { destroy(); length = 0; } public Node<T> createNewNode() { return new SNode<>(); } @Override public Iterable<Node<T>> nodes() { return new NodesIterable(); } @Override public Iterator<T> iterator() { return new ElementsIterator(); } private class NodesIterable implements Iterable<Node<T>> { @Override public Iterator<Node<T>> iterator() { return new NodesIterator(); } } private class ElementsIterator implements Iterator<T> { NodesIterator nodesIter = new NodesIterator(); @Override public boolean hasNext() { return nodesIter.hasNext(); } @Override public T next() { return nodesIter.next().getElement(); } public void remove() { nodesIter.remove(); } } private class NodesIterator implements Iterator<Node<T>> { private SNode<T> curr = first; private SNode<T> ptntr = null; private boolean canRemove = false; public boolean hasNext() { return curr != null; } public SNode<T> next() { if (!hasNext()) throw new NoSuchElementException(\"Iterator is completed.\"); if (canRemove) ptntr = (ptntr == null ? first : ptntr.getNext()); canRemove = true; SNode<T> ntr = curr; curr = curr.getNext(); return ntr; } public void remove() { if (!canRemove) throw new IllegalStateException(\"Not valid to remove.\"); if (ptntr == null) first = first.getNext(); else ptntr.setNext(ptntr.getNext().getNext()); length--; canRemove = false; } } @Override public LinkedList<T> clone() { LinkedList<T> listClone = new SLList<>(); for (T e : this) { Node<T> tempNode = listClone.createNewNode(); tempNode.setElement(e); listClone.addLastNode(tempNode); } return listClone; } }"}]}}
{"project_id":184,"chunk_id":0,"content":{"main_file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/interfases/LinkedList.java","main_file_content":"package interfases; import java.util.NoSuchElementException; public interface LinkedList<T> extends Iterable<T>, Cloneable { int length(); Node<T> getFirstNode() throws NoSuchElementException; Node<T> getLastNode() throws NoSuchElementException; Node<T> getNodeBefore(Node<T> target); Node<T> getNodeAfter(Node<T> target); void addFirstNode(Node<T> newNode); void addLastNode(Node<T> newNode); void addNodeAfter(Node<T> target, Node<T> newNode); void addNodeBefore(Node<T> target, Node<T> newNode); void removeNode(Node<T> target); Node<T> createNewNode(); Iterable<Node<T>> nodes(); }","dependencies":[]}}
{"project_id":184,"chunk_id":0,"content":{"main_file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/interfases/Node.java","main_file_content":"package interfases; public interface Node<T> { T getElement(); void setElement(T e); public void clean(); Node<T> getNext(); }","dependencies":[]}}
{"project_id":184,"chunk_id":0,"content":{"main_file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/interfases/IndexList.java","main_file_content":"package interfases; public interface IndexList<T> extends Cloneable { public int size(); public boolean isEmpty(); public void add(int i, T e) throws IndexOutOfBoundsException; public void add(T e); public T get(int i) throws IndexOutOfBoundsException; public T remove(int i) throws IndexOutOfBoundsException; public T set(int i, T e) throws IndexOutOfBoundsException; }","dependencies":[]}}
{"project_id":184,"chunk_id":0,"content":{"main_file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/indexlist/LLIndexList.java","main_file_content":"package indexlist; import interfases.IndexList; import interfases.LinkedList; import interfases.Node; public class LLIndexList<T> implements IndexList<T> { private LinkedList<T> internalLL; public LLIndexList(LinkedList<T> theList) { internalLL = theList; } public int size() { return internalLL.length(); } public boolean isEmpty() { return this.size() == 0; } private Node<T> getDataNodeAtPosition(int posIndex) { Node<T> target = internalLL.getFirstNode(); for (int p=1; p<= posIndex; p++) target = internalLL.getNodeAfter(target); return target; } public void add(int index, T e) throws IndexOutOfBoundsException { if (index < 0 || index > internalLL.length()) throw new IndexOutOfBoundsException(\"add: index=\" + index + \" is out of bounds. size = \" + internalLL.length()); Node<T> newNode = internalLL.createNewNode(); newNode.setElement(e); if (index==0) internalLL.addFirstNode(newNode); else { Node<T> previousNode = getDataNodeAtPosition(index-1); internalLL.addNodeAfter(previousNode, newNode); } } public void add(T e) { Node<T> newNode = internalLL.createNewNode(); newNode.setElement(e); Node<T> previousNode = internalLL.getLastNode(); internalLL.addNodeAfter(previousNode, newNode); } public T get(int index) throws IndexOutOfBoundsException { if (index < 0 || index >= internalLL.length()) throw new IndexOutOfBoundsException(\"get: index=\" + index + \" is out of bounds.\"); Node<T> targetINode = this.getDataNodeAtPosition(index); return targetINode.getElement(); } public T remove(int index) throws IndexOutOfBoundsException { if (index < 0 || index >= internalLL.length()) throw new IndexOutOfBoundsException(\"remove: index=\" + index + \" is out of bounds.\"); Node<T> ntr = this.getDataNodeAtPosition(index); T etr = ntr.getElement(); this.internalLL.removeNode(ntr); return etr; } public T set(int index, T e) throws IndexOutOfBoundsException { if (index < 0 || index >= internalLL.length()) throw new IndexOutOfBoundsException(\"set: index=\" + index + \" is out of bounds.\"); Node<T> ntc = this.getDataNodeAtPosition(index); T etr = ntc.getElement(); ntc.setElement(e); return etr; } }","dependencies":[{"file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/interfases/IndexList.java","file_content":"package interfases; public interface IndexList<T> extends Cloneable { public int size(); public boolean isEmpty(); public void add(int i, T e) throws IndexOutOfBoundsException; public void add(T e); public T get(int i) throws IndexOutOfBoundsException; public T remove(int i) throws IndexOutOfBoundsException; public T set(int i, T e) throws IndexOutOfBoundsException; }"}]}}
{"project_id":184,"chunk_id":0,"content":{"main_file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/linkedLists/SLList.java","main_file_content":"package linkedLists; import interfases.LinkedList; import interfases.Node; import java.util.Iterator; import java.util.NoSuchElementException; public class SLList<T> extends AbstractSLList<T> { private SNode<T> first; private int length; public SLList() { first = null; length = 0; } public void addFirstNode(Node<T> nuevo) { ((SNode<T>) nuevo).setNext(first); first = (SNode<T>) nuevo; length++; } public void addLastNode(Node<T> nuevo) { SNode<T> sNuevo = (SNode<T>) nuevo; sNuevo.setNext(null); if (length == 0) first = sNuevo; else { SNode<T> p = first; while (p.getNext() != null) p = p.getNext(); p.setNext(sNuevo); } length++; } public void addNodeAfter(Node<T> target, Node<T> nuevo) { ((SNode<T>) nuevo).setNext((SNode<T>) target.getNext()); ((SNode<T>) target).setNext((SNode<T>) nuevo); length++; } public void addNodeBefore(Node<T> target, Node<T> nuevo) { if (target == first) this.addFirstNode(nuevo); else { Node<T> prevNode = findNodePrevTo(target); this.addNodeAfter(prevNode, nuevo); } } private Node<T> findNodePrevTo(Node<T> target) { if (target == first) return null; else { SNode<T> prev = first; while (prev != null && prev.getNext() != target) prev = prev.getNext(); return prev; } } public Node<T> getLastNode() { if (first == null) return null; else { SNode<T> curr = first; while (curr.getNext() != null) curr = curr.getNext(); return curr; } } public Node<T> getNodeAfter(Node<T> target) { return ((SNode<T>) target).getNext(); } public Node<T> getNodeBefore(Node<T> target) { if (target == first) return null; else return findNodePrevTo(target); } public int length() { return this.length; } public void removeNode(Node<T> target) { if (target == first) first = first.getNext(); else { SNode<T> prevNode = (SNode<T>) this.getNodeBefore(target); prevNode.setNext((SNode<T>) target.getNext()); } target.clean(); length--; } public Node<T> getFirstNode() throws NoSuchElementException { if (first == null) throw new NoSuchElementException(\"getFirstNode() : linked list is empty...\"); return first; } private void destroy() { while (first != null) { SNode<T> nnode = first.getNext(); first.setElement(null); first.setNext(null); first = nnode; } } public void makeEmpty() { destroy(); length = 0; } public Node<T> createNewNode() { return new SNode<>(); } @Override public Iterable<Node<T>> nodes() { return new NodesIterable(); } @Override public Iterator<T> iterator() { return new ElementsIterator(); } private class NodesIterable implements Iterable<Node<T>> { @Override public Iterator<Node<T>> iterator() { return new NodesIterator(); } } private class ElementsIterator implements Iterator<T> { NodesIterator nodesIter = new NodesIterator(); @Override public boolean hasNext() { return nodesIter.hasNext(); } @Override public T next() { return nodesIter.next().getElement(); } public void remove() { nodesIter.remove(); } } private class NodesIterator implements Iterator<Node<T>> { private SNode<T> curr = first; private SNode<T> ptntr = null; private boolean canRemove = false; public boolean hasNext() { return curr != null; } public SNode<T> next() { if (!hasNext()) throw new NoSuchElementException(\"Iterator is completed.\"); if (canRemove) ptntr = (ptntr == null ? first : ptntr.getNext()); canRemove = true; SNode<T> ntr = curr; curr = curr.getNext(); return ntr; } public void remove() { if (!canRemove) throw new IllegalStateException(\"Not valid to remove.\"); if (ptntr == null) first = first.getNext(); else ptntr.setNext(ptntr.getNext().getNext()); length--; canRemove = false; } } @Override public LinkedList<T> clone() { LinkedList<T> listClone = new SLList<>(); for (T e : this) { Node<T> tempNode = listClone.createNewNode(); tempNode.setElement(e); listClone.addLastNode(tempNode); } return listClone; } }","dependencies":[{"file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/linkedLists/AbstractSLList.java","file_content":"package linkedLists; import interfases.LinkedList; import interfases.Node; public abstract class AbstractSLList<T> implements LinkedList<T> { protected static class SNode<T> implements Node<T> { private T element; private SNode<T> next; public SNode() { element = null; next = null; } public SNode(T data, SNode<T> next) { this.element = data; this.next = next; } public SNode(T data) { this.element = data; next = null; } public T getElement() { return element; } public void setElement(T data) { this.element = data; } public SNode<T> getNext() { return next; } public void setNext(SNode<T> next) { this.next = next; } public void clean() { element = null; next = null; } } }"}]}}
{"project_id":184,"chunk_id":0,"content":{"main_file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/linkedLists/AbstractSLList.java","main_file_content":"package linkedLists; import interfases.LinkedList; import interfases.Node; public abstract class AbstractSLList<T> implements LinkedList<T> { protected static class SNode<T> implements Node<T> { private T element; private SNode<T> next; public SNode() { element = null; next = null; } public SNode(T data, SNode<T> next) { this.element = data; this.next = next; } public SNode(T data) { this.element = data; next = null; } public T getElement() { return element; } public void setElement(T data) { this.element = data; } public SNode<T> getNext() { return next; } public void setNext(SNode<T> next) { this.next = next; } public void clean() { element = null; next = null; } } }","dependencies":[{"file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/interfases/LinkedList.java","file_content":"package interfases; import java.util.NoSuchElementException; public interface LinkedList<T> extends Iterable<T>, Cloneable { int length(); Node<T> getFirstNode() throws NoSuchElementException; Node<T> getLastNode() throws NoSuchElementException; Node<T> getNodeBefore(Node<T> target); Node<T> getNodeAfter(Node<T> target); void addFirstNode(Node<T> newNode); void addLastNode(Node<T> newNode); void addNodeAfter(Node<T> target, Node<T> newNode); void addNodeBefore(Node<T> target, Node<T> newNode); void removeNode(Node<T> target); Node<T> createNewNode(); Iterable<Node<T>> nodes(); }"},{"file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/interfases/Node.java","file_content":"package interfases; public interface Node<T> { T getElement(); void setElement(T e); public void clean(); Node<T> getNext(); }"}]}}
{"project_id":184,"chunk_id":0,"content":{"main_file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/linkedLists/DLDHDTList.java","main_file_content":"package linkedLists; import interfases.LinkedList; import interfases.Node; import java.util.Iterator; import java.util.NoSuchElementException; public class DLDHDTList<T> extends AbstractDLList<T> { private DNode<T> header, trailer; private int length; public DLDHDTList() { header = new DNode<>(); trailer =new DNode<>(); header.setNext(trailer); trailer.setPrev(header); length = 0; } public void addFirstNode(Node<T> newNode) { addNodeAfter(header, newNode); } public void addLastNode(Node<T> newNode) { DNode<T> dNewNode = (DNode<T>) newNode; DNode<T> nBefore = trailer.getPrev(); nBefore.setNext(dNewNode); trailer.setPrev(dNewNode); dNewNode.setPrev(nBefore); dNewNode.setNext(trailer); length++; } public void addNodeAfter(Node<T> target, Node<T> newNode) { DNode<T> dNewNode = (DNode<T>) newNode; DNode<T> nBefore = (DNode<T>) target; DNode<T> nAfter = nBefore.getNext(); nBefore.setNext(dNewNode); nAfter.setPrev(dNewNode); dNewNode.setPrev(nBefore); dNewNode.setNext(nAfter); length++; } public void addNodeBefore(Node<T> target, Node<T> nuevo) { DNode<T> targetNode = (DNode<T>) target; DNode<T> newNode = (DNode<T>) nuevo; newNode.setPrev(targetNode.getPrev()); newNode.setNext(targetNode); targetNode.setPrev(newNode); targetNode.setNext(targetNode.getNext()); length++; } public Node<T> createNewNode() { return new DNode<>(); } public Node<T> getFirstNode() throws NoSuchElementException { if (length == 0) throw new NoSuchElementException(\"getFirstNode: The list is empty\"); return header.getNext(); } public Node<T> getLastNode() throws NoSuchElementException { if (length == 0) throw new NoSuchElementException(\"getFirstNode: The list is empty\"); return trailer.getPrev(); } public Node<T> getNodeAfter(Node<T> target) { if (length == 0) throw new NoSuchElementException(\"getNodeAfter: list is empty\"); return ((DNode<T>) target).getNext(); } public Node<T> getNodeBefore(Node<T> target) { if (length == 0) throw new NoSuchElementException(\"getNodeBefore: list is empty\"); return ((DNode<T>) target).getPrev(); } public int length() { return length; } public void removeNode(Node<T> target) { DNode<T> tNode = (DNode<T>) target; tNode.getPrev().setNext(tNode.getNext()); tNode.getNext().setPrev(tNode.getPrev()); length--; tNode.clean(); } private void destroy() { while (header != null) { DNode<T> nodeToBeDestroyed = header.getNext(); header.clean(); header = nodeToBeDestroyed; } } public void makeEmpty() { DNode<T> dummyTrailerNode = header; while(trailer.getNext() != null) { dummyTrailerNode.setNext(null); } } @Override public Iterable<Node<T>> nodes() { return new DLDHDTList<T>.NodesIterable(); } private class NodesIterable implements Iterable<Node<T>> { @Override public Iterator<Node<T>> iterator() { return new DLDHDTList<T>.NodesIterator(); } } @Override public Iterator<T> iterator() { return new DLDHDTList<T>.ElementsIterator(); } private class ElementsIterator implements Iterator<T> { DLDHDTList<T>.NodesIterator nodesIter = new DLDHDTList<T>.NodesIterator(); @Override public boolean hasNext() { return nodesIter.hasNext(); } @Override public T next() { return nodesIter.next().getElement(); } public void remove() { nodesIter.remove(); } } @Override public LinkedList<T> clone() { LinkedList<T> listClone = new DLDHDTList<>(); for (T e : this) { Node<T> tempNode = listClone.createNewNode(); tempNode.setElement(e); listClone.addLastNode(tempNode); } return listClone; } private class NodesIterator implements Iterator<Node<T>> { private DNode<T> curr = header.getNext(); private DNode<T> ptntr = null; private boolean canRemove = false; public boolean hasNext() { return curr != null; } public DLDHDTList.DNode<T> next() { if (!hasNext()) throw new NoSuchElementException(\"Iterator is completed.\"); if (canRemove) ptntr = (ptntr == null ? curr : ptntr.getNext()); canRemove = true; DLDHDTList.DNode<T> ntr = curr; curr = curr.getNext(); return ntr; } public void remove() { if (!canRemove) throw new IllegalStateException(\"Not valid to remove.\"); if (ptntr == null) curr = curr.getNext(); else ptntr.setNext(ptntr.getNext().getNext()); length--; canRemove = false; } } }","dependencies":[{"file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/linkedLists/AbstractDLList.java","file_content":"package linkedLists; import interfases.LinkedList; import interfases.Node; public abstract class AbstractDLList<T> implements LinkedList<T> { protected static class DNode<T> implements Node<T> { private T element; private DNode<T> prev, next; public DNode() { this(null, null, null); } public DNode(T e) { this(e, null, null); } public DNode(T e, DNode<T> p, DNode<T> n) { element = e; prev = p; next = n; } public DNode<T> getPrev() { return prev; } public void setPrev(DNode<T> prev) { this.prev = prev; } public DNode<T> getNext() { return next; } public void setNext(DNode<T> next) { this.next = next; } public T getElement() { return element; } public void setElement(T data) { element = data; } public void clean() { element = null; prev = next = null; } } }"}]}}
{"project_id":184,"chunk_id":0,"content":{"main_file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/linkedLists/SLFLList.java","main_file_content":"package linkedLists; import interfases.LinkedList; import interfases.Node; import java.util.Iterator; import java.util.NoSuchElementException; public class SLFLList<T> extends AbstractSLList<T> { private SNode<T> first, last; int length; public SLFLList() { first = last = null; length = 0; } public void addFirstNode(Node<T> newNode) { if (length == 0) { first = last = (SNode<T>) newNode; } else { ((SNode<T>) newNode).setNext(first); first = (SNode<T>) newNode; } length++; } public void addNodeAfter(Node<T> target, Node<T> newNode) { if (target.equals(last)) { last = (SNode<T>) newNode; ((SNode<T>) target).setNext(last); } else { ((SNode<T>) newNode).setNext(((SNode<T>) target).getNext()); ((SNode<T>) target).setNext((SNode<T>) newNode); } length++; } private Node<T> findNodePrevTo(Node<T> target) { if (target == first) return null; else { SNode<T> prev = first; while (prev != null && prev.getNext() != target) prev = prev.getNext(); return prev; } } public void addNodeBefore(Node<T> target, Node<T> newNode) { if (target == first) this.addFirstNode(newNode); else { Node<T> prevNode = findNodePrevTo(target); assert prevNode != null; this.addNodeAfter(prevNode, newNode); } } public Node<T> getFirstNode() throws NoSuchElementException { if (first == null) throw new NoSuchElementException(\"getFirstNode() : linked list is empty...\"); return first; } public Node<T> getLastNode() { if (last == null) throw new NoSuchElementException(\"getLastNode() : linked list is empty...\"); return last; } public Node<T> getNodeAfter(Node<T> target) { if (length == 0) throw new NoSuchElementException(\"getNodeAfter: list is empty\"); if (target.equals(last)) return null; return ((SNode<T>) target).getNext(); } public Node<T> getNodeBefore(Node<T> target) { if(length == 0) throw new NoSuchElementException(\"getNodeBefore: list is empty\"); if (target.equals(first)) { return null; } else if (target.equals(last)) { return last; } else { SNode<T> prev = first; while (prev != null && prev.getNext() != target) prev = prev.getNext(); return prev; } } public int length() { return length; } public void removeNode(Node<T> target) { SNode<T> newTarget = (SNode<T>) target; SNode<T> previous; if(target == first) { first = first.getNext(); } else if(target == last) { previous = (SNode<T>) this.getNodeBefore(newTarget); previous.setNext(null); last = previous; } else { previous = (SNode<T>) this.getNodeBefore(newTarget); previous.setNext(newTarget.getNext()); } newTarget.setElement(null); newTarget.setNext(null); length--; } public Node<T> createNewNode() { return new SNode<>(); } @Override public Iterator<T> iterator() { return new ElementsIterator(); } @Override public void addLastNode(Node<T> newNode) { SNode<T> daNode = (SNode<T>) newNode; daNode.setNext(null); if (first == null) { first = daNode; } else { last.setNext(daNode); } last = daNode; length++; } @Override public Iterable<Node<T>> nodes() { return new NodesIterable(); } private class NodesIterable implements Iterable<Node<T>> { @Override public Iterator<Node<T>> iterator() { return new NodesIterator(); } } private class NodesIterator implements Iterator<Node<T>> { private SNode<T> curr = first; private SNode<T> ptntr = null; private boolean canRemove = false; public boolean hasNext() { return curr != null; } public SNode<T> next() { if (!hasNext()) throw new NoSuchElementException(\"Iterator is completed.\"); if (canRemove) ptntr = (ptntr == null ? first : ptntr.getNext()); canRemove = true; SNode<T> ntr = curr; curr = curr.getNext(); return ntr; } public void remove() { if (!canRemove) throw new IllegalStateException(\"Not valid to remove.\"); if (ptntr == null) first = first.getNext(); else ptntr.setNext(ptntr.getNext().getNext()); length--; canRemove = false; } } private class ElementsIterator implements Iterator<T> { @Override public boolean hasNext() { return false; } @Override public T next() { return null; } } @Override public LinkedList<T> clone() { LinkedList<T> listClone = new SLFLList<>(); for (T e : this) { Node<T> tempNode = listClone.createNewNode(); tempNode.setElement(e); listClone.addLastNode(tempNode); } return listClone; } }","dependencies":[{"file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/linkedLists/AbstractSLList.java","file_content":"package linkedLists; import interfases.LinkedList; import interfases.Node; public abstract class AbstractSLList<T> implements LinkedList<T> { protected static class SNode<T> implements Node<T> { private T element; private SNode<T> next; public SNode() { element = null; next = null; } public SNode(T data, SNode<T> next) { this.element = data; this.next = next; } public SNode(T data) { this.element = data; next = null; } public T getElement() { return element; } public void setElement(T data) { this.element = data; } public SNode<T> getNext() { return next; } public void setNext(SNode<T> next) { this.next = next; } public void clean() { element = null; next = null; } } }"}]}}
{"project_id":184,"chunk_id":0,"content":{"main_file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/linkedLists/AbstractDLList.java","main_file_content":"package linkedLists; import interfases.LinkedList; import interfases.Node; public abstract class AbstractDLList<T> implements LinkedList<T> { protected static class DNode<T> implements Node<T> { private T element; private DNode<T> prev, next; public DNode() { this(null, null, null); } public DNode(T e) { this(e, null, null); } public DNode(T e, DNode<T> p, DNode<T> n) { element = e; prev = p; next = n; } public DNode<T> getPrev() { return prev; } public void setPrev(DNode<T> prev) { this.prev = prev; } public DNode<T> getNext() { return next; } public void setNext(DNode<T> next) { this.next = next; } public T getElement() { return element; } public void setElement(T data) { element = data; } public void clean() { element = null; prev = next = null; } } }","dependencies":[{"file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/interfases/LinkedList.java","file_content":"package interfases; import java.util.NoSuchElementException; public interface LinkedList<T> extends Iterable<T>, Cloneable { int length(); Node<T> getFirstNode() throws NoSuchElementException; Node<T> getLastNode() throws NoSuchElementException; Node<T> getNodeBefore(Node<T> target); Node<T> getNodeAfter(Node<T> target); void addFirstNode(Node<T> newNode); void addLastNode(Node<T> newNode); void addNodeAfter(Node<T> target, Node<T> newNode); void addNodeBefore(Node<T> target, Node<T> newNode); void removeNode(Node<T> target); Node<T> createNewNode(); Iterable<Node<T>> nodes(); }"},{"file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/interfases/Node.java","file_content":"package interfases; public interface Node<T> { T getElement(); void setElement(T e); public void clean(); Node<T> getNext(); }"}]}}
{"project_id":184,"chunk_id":0,"content":{"main_file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/test/java/CloneTester.java","main_file_content":"import linkedLists.DLDHDTList; import linkedLists.SLFLList; import linkedLists.SLList; public class CloneTester { public static void main(String[] args) throws CloneNotSupportedException { SLList<Integer> SLList = new SLList<>(); SLList<Integer> cloneSLList = (linkedLists.SLList<Integer>) SLList.clone(); SLFLList<Integer> SLFLList = new SLFLList<>(); SLFLList<Integer> cloneSLFLList = (linkedLists.SLFLList<Integer>) SLFLList.clone(); DLDHDTList<Integer> DLDHDTList = new DLDHDTList<>(); DLDHDTList<Integer> cloneDLDHDTList = (linkedLists.DLDHDTList<Integer>) DLDHDTList.clone(); } }","dependencies":[{"file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/linkedLists/DLDHDTList.java","file_content":"package linkedLists; import interfases.LinkedList; import interfases.Node; import java.util.Iterator; import java.util.NoSuchElementException; public class DLDHDTList<T> extends AbstractDLList<T> { private DNode<T> header, trailer; private int length; public DLDHDTList() { header = new DNode<>(); trailer =new DNode<>(); header.setNext(trailer); trailer.setPrev(header); length = 0; } public void addFirstNode(Node<T> newNode) { addNodeAfter(header, newNode); } public void addLastNode(Node<T> newNode) { DNode<T> dNewNode = (DNode<T>) newNode; DNode<T> nBefore = trailer.getPrev(); nBefore.setNext(dNewNode); trailer.setPrev(dNewNode); dNewNode.setPrev(nBefore); dNewNode.setNext(trailer); length++; } public void addNodeAfter(Node<T> target, Node<T> newNode) { DNode<T> dNewNode = (DNode<T>) newNode; DNode<T> nBefore = (DNode<T>) target; DNode<T> nAfter = nBefore.getNext(); nBefore.setNext(dNewNode); nAfter.setPrev(dNewNode); dNewNode.setPrev(nBefore); dNewNode.setNext(nAfter); length++; } public void addNodeBefore(Node<T> target, Node<T> nuevo) { DNode<T> targetNode = (DNode<T>) target; DNode<T> newNode = (DNode<T>) nuevo; newNode.setPrev(targetNode.getPrev()); newNode.setNext(targetNode); targetNode.setPrev(newNode); targetNode.setNext(targetNode.getNext()); length++; } public Node<T> createNewNode() { return new DNode<>(); } public Node<T> getFirstNode() throws NoSuchElementException { if (length == 0) throw new NoSuchElementException(\"getFirstNode: The list is empty\"); return header.getNext(); } public Node<T> getLastNode() throws NoSuchElementException { if (length == 0) throw new NoSuchElementException(\"getFirstNode: The list is empty\"); return trailer.getPrev(); } public Node<T> getNodeAfter(Node<T> target) { if (length == 0) throw new NoSuchElementException(\"getNodeAfter: list is empty\"); return ((DNode<T>) target).getNext(); } public Node<T> getNodeBefore(Node<T> target) { if (length == 0) throw new NoSuchElementException(\"getNodeBefore: list is empty\"); return ((DNode<T>) target).getPrev(); } public int length() { return length; } public void removeNode(Node<T> target) { DNode<T> tNode = (DNode<T>) target; tNode.getPrev().setNext(tNode.getNext()); tNode.getNext().setPrev(tNode.getPrev()); length--; tNode.clean(); } private void destroy() { while (header != null) { DNode<T> nodeToBeDestroyed = header.getNext(); header.clean(); header = nodeToBeDestroyed; } } public void makeEmpty() { DNode<T> dummyTrailerNode = header; while(trailer.getNext() != null) { dummyTrailerNode.setNext(null); } } @Override public Iterable<Node<T>> nodes() { return new DLDHDTList<T>.NodesIterable(); } private class NodesIterable implements Iterable<Node<T>> { @Override public Iterator<Node<T>> iterator() { return new DLDHDTList<T>.NodesIterator(); } } @Override public Iterator<T> iterator() { return new DLDHDTList<T>.ElementsIterator(); } private class ElementsIterator implements Iterator<T> { DLDHDTList<T>.NodesIterator nodesIter = new DLDHDTList<T>.NodesIterator(); @Override public boolean hasNext() { return nodesIter.hasNext(); } @Override public T next() { return nodesIter.next().getElement(); } public void remove() { nodesIter.remove(); } } @Override public LinkedList<T> clone() { LinkedList<T> listClone = new DLDHDTList<>(); for (T e : this) { Node<T> tempNode = listClone.createNewNode(); tempNode.setElement(e); listClone.addLastNode(tempNode); } return listClone; } private class NodesIterator implements Iterator<Node<T>> { private DNode<T> curr = header.getNext(); private DNode<T> ptntr = null; private boolean canRemove = false; public boolean hasNext() { return curr != null; } public DLDHDTList.DNode<T> next() { if (!hasNext()) throw new NoSuchElementException(\"Iterator is completed.\"); if (canRemove) ptntr = (ptntr == null ? curr : ptntr.getNext()); canRemove = true; DLDHDTList.DNode<T> ntr = curr; curr = curr.getNext(); return ntr; } public void remove() { if (!canRemove) throw new IllegalStateException(\"Not valid to remove.\"); if (ptntr == null) curr = curr.getNext(); else ptntr.setNext(ptntr.getNext().getNext()); length--; canRemove = false; } } }"},{"file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/linkedLists/SLFLList.java","file_content":"package linkedLists; import interfases.LinkedList; import interfases.Node; import java.util.Iterator; import java.util.NoSuchElementException; public class SLFLList<T> extends AbstractSLList<T> { private SNode<T> first, last; int length; public SLFLList() { first = last = null; length = 0; } public void addFirstNode(Node<T> newNode) { if (length == 0) { first = last = (SNode<T>) newNode; } else { ((SNode<T>) newNode).setNext(first); first = (SNode<T>) newNode; } length++; } public void addNodeAfter(Node<T> target, Node<T> newNode) { if (target.equals(last)) { last = (SNode<T>) newNode; ((SNode<T>) target).setNext(last); } else { ((SNode<T>) newNode).setNext(((SNode<T>) target).getNext()); ((SNode<T>) target).setNext((SNode<T>) newNode); } length++; } private Node<T> findNodePrevTo(Node<T> target) { if (target == first) return null; else { SNode<T> prev = first; while (prev != null && prev.getNext() != target) prev = prev.getNext(); return prev; } } public void addNodeBefore(Node<T> target, Node<T> newNode) { if (target == first) this.addFirstNode(newNode); else { Node<T> prevNode = findNodePrevTo(target); assert prevNode != null; this.addNodeAfter(prevNode, newNode); } } public Node<T> getFirstNode() throws NoSuchElementException { if (first == null) throw new NoSuchElementException(\"getFirstNode() : linked list is empty...\"); return first; } public Node<T> getLastNode() { if (last == null) throw new NoSuchElementException(\"getLastNode() : linked list is empty...\"); return last; } public Node<T> getNodeAfter(Node<T> target) { if (length == 0) throw new NoSuchElementException(\"getNodeAfter: list is empty\"); if (target.equals(last)) return null; return ((SNode<T>) target).getNext(); } public Node<T> getNodeBefore(Node<T> target) { if(length == 0) throw new NoSuchElementException(\"getNodeBefore: list is empty\"); if (target.equals(first)) { return null; } else if (target.equals(last)) { return last; } else { SNode<T> prev = first; while (prev != null && prev.getNext() != target) prev = prev.getNext(); return prev; } } public int length() { return length; } public void removeNode(Node<T> target) { SNode<T> newTarget = (SNode<T>) target; SNode<T> previous; if(target == first) { first = first.getNext(); } else if(target == last) { previous = (SNode<T>) this.getNodeBefore(newTarget); previous.setNext(null); last = previous; } else { previous = (SNode<T>) this.getNodeBefore(newTarget); previous.setNext(newTarget.getNext()); } newTarget.setElement(null); newTarget.setNext(null); length--; } public Node<T> createNewNode() { return new SNode<>(); } @Override public Iterator<T> iterator() { return new ElementsIterator(); } @Override public void addLastNode(Node<T> newNode) { SNode<T> daNode = (SNode<T>) newNode; daNode.setNext(null); if (first == null) { first = daNode; } else { last.setNext(daNode); } last = daNode; length++; } @Override public Iterable<Node<T>> nodes() { return new NodesIterable(); } private class NodesIterable implements Iterable<Node<T>> { @Override public Iterator<Node<T>> iterator() { return new NodesIterator(); } } private class NodesIterator implements Iterator<Node<T>> { private SNode<T> curr = first; private SNode<T> ptntr = null; private boolean canRemove = false; public boolean hasNext() { return curr != null; } public SNode<T> next() { if (!hasNext()) throw new NoSuchElementException(\"Iterator is completed.\"); if (canRemove) ptntr = (ptntr == null ? first : ptntr.getNext()); canRemove = true; SNode<T> ntr = curr; curr = curr.getNext(); return ntr; } public void remove() { if (!canRemove) throw new IllegalStateException(\"Not valid to remove.\"); if (ptntr == null) first = first.getNext(); else ptntr.setNext(ptntr.getNext().getNext()); length--; canRemove = false; } } private class ElementsIterator implements Iterator<T> { @Override public boolean hasNext() { return false; } @Override public T next() { return null; } } @Override public LinkedList<T> clone() { LinkedList<T> listClone = new SLFLList<>(); for (T e : this) { Node<T> tempNode = listClone.createNewNode(); tempNode.setElement(e); listClone.addLastNode(tempNode); } return listClone; } }"},{"file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/linkedLists/SLList.java","file_content":"package linkedLists; import interfases.LinkedList; import interfases.Node; import java.util.Iterator; import java.util.NoSuchElementException; public class SLList<T> extends AbstractSLList<T> { private SNode<T> first; private int length; public SLList() { first = null; length = 0; } public void addFirstNode(Node<T> nuevo) { ((SNode<T>) nuevo).setNext(first); first = (SNode<T>) nuevo; length++; } public void addLastNode(Node<T> nuevo) { SNode<T> sNuevo = (SNode<T>) nuevo; sNuevo.setNext(null); if (length == 0) first = sNuevo; else { SNode<T> p = first; while (p.getNext() != null) p = p.getNext(); p.setNext(sNuevo); } length++; } public void addNodeAfter(Node<T> target, Node<T> nuevo) { ((SNode<T>) nuevo).setNext((SNode<T>) target.getNext()); ((SNode<T>) target).setNext((SNode<T>) nuevo); length++; } public void addNodeBefore(Node<T> target, Node<T> nuevo) { if (target == first) this.addFirstNode(nuevo); else { Node<T> prevNode = findNodePrevTo(target); this.addNodeAfter(prevNode, nuevo); } } private Node<T> findNodePrevTo(Node<T> target) { if (target == first) return null; else { SNode<T> prev = first; while (prev != null && prev.getNext() != target) prev = prev.getNext(); return prev; } } public Node<T> getLastNode() { if (first == null) return null; else { SNode<T> curr = first; while (curr.getNext() != null) curr = curr.getNext(); return curr; } } public Node<T> getNodeAfter(Node<T> target) { return ((SNode<T>) target).getNext(); } public Node<T> getNodeBefore(Node<T> target) { if (target == first) return null; else return findNodePrevTo(target); } public int length() { return this.length; } public void removeNode(Node<T> target) { if (target == first) first = first.getNext(); else { SNode<T> prevNode = (SNode<T>) this.getNodeBefore(target); prevNode.setNext((SNode<T>) target.getNext()); } target.clean(); length--; } public Node<T> getFirstNode() throws NoSuchElementException { if (first == null) throw new NoSuchElementException(\"getFirstNode() : linked list is empty...\"); return first; } private void destroy() { while (first != null) { SNode<T> nnode = first.getNext(); first.setElement(null); first.setNext(null); first = nnode; } } public void makeEmpty() { destroy(); length = 0; } public Node<T> createNewNode() { return new SNode<>(); } @Override public Iterable<Node<T>> nodes() { return new NodesIterable(); } @Override public Iterator<T> iterator() { return new ElementsIterator(); } private class NodesIterable implements Iterable<Node<T>> { @Override public Iterator<Node<T>> iterator() { return new NodesIterator(); } } private class ElementsIterator implements Iterator<T> { NodesIterator nodesIter = new NodesIterator(); @Override public boolean hasNext() { return nodesIter.hasNext(); } @Override public T next() { return nodesIter.next().getElement(); } public void remove() { nodesIter.remove(); } } private class NodesIterator implements Iterator<Node<T>> { private SNode<T> curr = first; private SNode<T> ptntr = null; private boolean canRemove = false; public boolean hasNext() { return curr != null; } public SNode<T> next() { if (!hasNext()) throw new NoSuchElementException(\"Iterator is completed.\"); if (canRemove) ptntr = (ptntr == null ? first : ptntr.getNext()); canRemove = true; SNode<T> ntr = curr; curr = curr.getNext(); return ntr; } public void remove() { if (!canRemove) throw new IllegalStateException(\"Not valid to remove.\"); if (ptntr == null) first = first.getNext(); else ptntr.setNext(ptntr.getNext().getNext()); length--; canRemove = false; } } @Override public LinkedList<T> clone() { LinkedList<T> listClone = new SLList<>(); for (T e : this) { Node<T> tempNode = listClone.createNewNode(); tempNode.setElement(e); listClone.addLastNode(tempNode); } return listClone; } }"}]}}
{"project_id":184,"chunk_id":0,"content":{"main_file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/test/java/IndexListTester.java","main_file_content":"import indexlist.LLIndexList; import interfases.IndexList; import linkedLists.DLDHDTList; import linkedLists.SLFLList; import linkedLists.SLList; public class IndexListTester { public static void main(String[] args) { listTester(\"Testing the singly linked list (SLList): \", new LLIndexList<Integer>(new SLList<>())); System.out.println(\"\\n*******************************************************************************************\\n\"); listTester(\"Testing the singly linked list (SLFLList): \", new LLIndexList<Integer>(new SLFLList<>())); System.out.println(\"\\n*******************************************************************************************\\n\"); listTester(\"Testing the singly linked list (DLDHDTList): \", new LLIndexList<Integer>(new DLDHDTList<>())); } private static void listTester(String msg, IndexList<Integer> list) { System.out.println(msg); try { list.add(1, 400); } catch (Exception e) { System.out.println(e); } showListAfterAdding(list, 0, 435); showListAfterAdding(list, 1, 200); list.add(0, 435); list.add(1, 200); for (int i=20, j=1; i< 50; i+=5, j++) { list.add(j, i); } showList(list); showListAfterDeleting(list, 4); showListAfterDeleting(list, 2); showListAfterDeleting(list, 30); showListAfterReplacing(list, 3, 400); showListAfterReplacing(list, 0, 30); showListAfterAdding(list, 3, 700); while (!list.isEmpty()) { showListAfterDeleting(list, list.size()); showListAfterDeleting(list, 0); } showListAfterAdding(list, 0, 700); showListAfterAdding(list, 1, 800); showListAfterAdding(list, 2, 900); showListAfterAdding(list, 2, 1000); showListAfterAdding(list, 1, 1001); showListAfterAdding(list, 3, 1002); showListAfterAdding(list, 3, 700); showListAfterAdding(list, 1, 800); showListAfterAdding(list, 2, 900); showListAfterAdding(list, 2, 1000); showListAfterAdding(list, 1, 1001); showListAfterAdding(list, 3, 1002); showListAfterDeleting(list, 2); showListAfterDeleting(list, 2); showListAfterDeleting(list, 2); showListAfterDeleting(list, 2); showListAfterDeleting(list, 2); } private static void showElement(IndexList<Integer> list, int position) { try { System.out.println(\" --Element in position \" + position + \" is: \"+ list.get(position)); } catch (Exception e) { System.out.println(e); } } private static void showSize(IndexList<Integer> list) { System.out.println(\"\\nSize of the list is: \"+list.size()); } private static void showList(IndexList<Integer> list) { System.out.println(\"\\n*** The \"+ list.size()+ \" elements in the list are: \"); int lpindex = list.size(); for (int i=0; i< lpindex; i++) showElement(list,i); } private static void showListAfterDeleting(IndexList<Integer> list, int pos) { System.out.println(\"\\n -- deleting element at position \"+pos); try { Integer etr = list.remove(pos); System.out.println(\" -- value of deleted element was \"+ etr); showList(list); } catch (Exception e) { System.out.println(e); } } private static void showListAfterAdding(IndexList<Integer> list, int pos, Integer element) { System.out.println(\"\\n -- adding value \" + element+\" at position \"+pos); try { list.add(pos, element); showList(list); } catch (Exception e) { System.out.println(e); } } private static void showListAfterReplacing(IndexList<Integer> list, int pos, Integer element) { System.out.println(\"\\n -- replacing value at position \"+pos+\" by \"+element); try { Integer etr = list.set(pos, element); System.out.println(\" -- value of replaced element was \"+ etr); showList(list); } catch (Exception e) { System.out.println(e); } } }","dependencies":[{"file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/indexlist/LLIndexList.java","file_content":"package indexlist; import interfases.IndexList; import interfases.LinkedList; import interfases.Node; public class LLIndexList<T> implements IndexList<T> { private LinkedList<T> internalLL; public LLIndexList(LinkedList<T> theList) { internalLL = theList; } public int size() { return internalLL.length(); } public boolean isEmpty() { return this.size() == 0; } private Node<T> getDataNodeAtPosition(int posIndex) { Node<T> target = internalLL.getFirstNode(); for (int p=1; p<= posIndex; p++) target = internalLL.getNodeAfter(target); return target; } public void add(int index, T e) throws IndexOutOfBoundsException { if (index < 0 || index > internalLL.length()) throw new IndexOutOfBoundsException(\"add: index=\" + index + \" is out of bounds. size = \" + internalLL.length()); Node<T> newNode = internalLL.createNewNode(); newNode.setElement(e); if (index==0) internalLL.addFirstNode(newNode); else { Node<T> previousNode = getDataNodeAtPosition(index-1); internalLL.addNodeAfter(previousNode, newNode); } } public void add(T e) { Node<T> newNode = internalLL.createNewNode(); newNode.setElement(e); Node<T> previousNode = internalLL.getLastNode(); internalLL.addNodeAfter(previousNode, newNode); } public T get(int index) throws IndexOutOfBoundsException { if (index < 0 || index >= internalLL.length()) throw new IndexOutOfBoundsException(\"get: index=\" + index + \" is out of bounds.\"); Node<T> targetINode = this.getDataNodeAtPosition(index); return targetINode.getElement(); } public T remove(int index) throws IndexOutOfBoundsException { if (index < 0 || index >= internalLL.length()) throw new IndexOutOfBoundsException(\"remove: index=\" + index + \" is out of bounds.\"); Node<T> ntr = this.getDataNodeAtPosition(index); T etr = ntr.getElement(); this.internalLL.removeNode(ntr); return etr; } public T set(int index, T e) throws IndexOutOfBoundsException { if (index < 0 || index >= internalLL.length()) throw new IndexOutOfBoundsException(\"set: index=\" + index + \" is out of bounds.\"); Node<T> ntc = this.getDataNodeAtPosition(index); T etr = ntc.getElement(); ntc.setElement(e); return etr; } }"},{"file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/linkedLists/DLDHDTList.java","file_content":"package linkedLists; import interfases.LinkedList; import interfases.Node; import java.util.Iterator; import java.util.NoSuchElementException; public class DLDHDTList<T> extends AbstractDLList<T> { private DNode<T> header, trailer; private int length; public DLDHDTList() { header = new DNode<>(); trailer =new DNode<>(); header.setNext(trailer); trailer.setPrev(header); length = 0; } public void addFirstNode(Node<T> newNode) { addNodeAfter(header, newNode); } public void addLastNode(Node<T> newNode) { DNode<T> dNewNode = (DNode<T>) newNode; DNode<T> nBefore = trailer.getPrev(); nBefore.setNext(dNewNode); trailer.setPrev(dNewNode); dNewNode.setPrev(nBefore); dNewNode.setNext(trailer); length++; } public void addNodeAfter(Node<T> target, Node<T> newNode) { DNode<T> dNewNode = (DNode<T>) newNode; DNode<T> nBefore = (DNode<T>) target; DNode<T> nAfter = nBefore.getNext(); nBefore.setNext(dNewNode); nAfter.setPrev(dNewNode); dNewNode.setPrev(nBefore); dNewNode.setNext(nAfter); length++; } public void addNodeBefore(Node<T> target, Node<T> nuevo) { DNode<T> targetNode = (DNode<T>) target; DNode<T> newNode = (DNode<T>) nuevo; newNode.setPrev(targetNode.getPrev()); newNode.setNext(targetNode); targetNode.setPrev(newNode); targetNode.setNext(targetNode.getNext()); length++; } public Node<T> createNewNode() { return new DNode<>(); } public Node<T> getFirstNode() throws NoSuchElementException { if (length == 0) throw new NoSuchElementException(\"getFirstNode: The list is empty\"); return header.getNext(); } public Node<T> getLastNode() throws NoSuchElementException { if (length == 0) throw new NoSuchElementException(\"getFirstNode: The list is empty\"); return trailer.getPrev(); } public Node<T> getNodeAfter(Node<T> target) { if (length == 0) throw new NoSuchElementException(\"getNodeAfter: list is empty\"); return ((DNode<T>) target).getNext(); } public Node<T> getNodeBefore(Node<T> target) { if (length == 0) throw new NoSuchElementException(\"getNodeBefore: list is empty\"); return ((DNode<T>) target).getPrev(); } public int length() { return length; } public void removeNode(Node<T> target) { DNode<T> tNode = (DNode<T>) target; tNode.getPrev().setNext(tNode.getNext()); tNode.getNext().setPrev(tNode.getPrev()); length--; tNode.clean(); } private void destroy() { while (header != null) { DNode<T> nodeToBeDestroyed = header.getNext(); header.clean(); header = nodeToBeDestroyed; } } public void makeEmpty() { DNode<T> dummyTrailerNode = header; while(trailer.getNext() != null) { dummyTrailerNode.setNext(null); } } @Override public Iterable<Node<T>> nodes() { return new DLDHDTList<T>.NodesIterable(); } private class NodesIterable implements Iterable<Node<T>> { @Override public Iterator<Node<T>> iterator() { return new DLDHDTList<T>.NodesIterator(); } } @Override public Iterator<T> iterator() { return new DLDHDTList<T>.ElementsIterator(); } private class ElementsIterator implements Iterator<T> { DLDHDTList<T>.NodesIterator nodesIter = new DLDHDTList<T>.NodesIterator(); @Override public boolean hasNext() { return nodesIter.hasNext(); } @Override public T next() { return nodesIter.next().getElement(); } public void remove() { nodesIter.remove(); } } @Override public LinkedList<T> clone() { LinkedList<T> listClone = new DLDHDTList<>(); for (T e : this) { Node<T> tempNode = listClone.createNewNode(); tempNode.setElement(e); listClone.addLastNode(tempNode); } return listClone; } private class NodesIterator implements Iterator<Node<T>> { private DNode<T> curr = header.getNext(); private DNode<T> ptntr = null; private boolean canRemove = false; public boolean hasNext() { return curr != null; } public DLDHDTList.DNode<T> next() { if (!hasNext()) throw new NoSuchElementException(\"Iterator is completed.\"); if (canRemove) ptntr = (ptntr == null ? curr : ptntr.getNext()); canRemove = true; DLDHDTList.DNode<T> ntr = curr; curr = curr.getNext(); return ntr; } public void remove() { if (!canRemove) throw new IllegalStateException(\"Not valid to remove.\"); if (ptntr == null) curr = curr.getNext(); else ptntr.setNext(ptntr.getNext().getNext()); length--; canRemove = false; } } }"},{"file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/linkedLists/SLFLList.java","file_content":"package linkedLists; import interfases.LinkedList; import interfases.Node; import java.util.Iterator; import java.util.NoSuchElementException; public class SLFLList<T> extends AbstractSLList<T> { private SNode<T> first, last; int length; public SLFLList() { first = last = null; length = 0; } public void addFirstNode(Node<T> newNode) { if (length == 0) { first = last = (SNode<T>) newNode; } else { ((SNode<T>) newNode).setNext(first); first = (SNode<T>) newNode; } length++; } public void addNodeAfter(Node<T> target, Node<T> newNode) { if (target.equals(last)) { last = (SNode<T>) newNode; ((SNode<T>) target).setNext(last); } else { ((SNode<T>) newNode).setNext(((SNode<T>) target).getNext()); ((SNode<T>) target).setNext((SNode<T>) newNode); } length++; } private Node<T> findNodePrevTo(Node<T> target) { if (target == first) return null; else { SNode<T> prev = first; while (prev != null && prev.getNext() != target) prev = prev.getNext(); return prev; } } public void addNodeBefore(Node<T> target, Node<T> newNode) { if (target == first) this.addFirstNode(newNode); else { Node<T> prevNode = findNodePrevTo(target); assert prevNode != null; this.addNodeAfter(prevNode, newNode); } } public Node<T> getFirstNode() throws NoSuchElementException { if (first == null) throw new NoSuchElementException(\"getFirstNode() : linked list is empty...\"); return first; } public Node<T> getLastNode() { if (last == null) throw new NoSuchElementException(\"getLastNode() : linked list is empty...\"); return last; } public Node<T> getNodeAfter(Node<T> target) { if (length == 0) throw new NoSuchElementException(\"getNodeAfter: list is empty\"); if (target.equals(last)) return null; return ((SNode<T>) target).getNext(); } public Node<T> getNodeBefore(Node<T> target) { if(length == 0) throw new NoSuchElementException(\"getNodeBefore: list is empty\"); if (target.equals(first)) { return null; } else if (target.equals(last)) { return last; } else { SNode<T> prev = first; while (prev != null && prev.getNext() != target) prev = prev.getNext(); return prev; } } public int length() { return length; } public void removeNode(Node<T> target) { SNode<T> newTarget = (SNode<T>) target; SNode<T> previous; if(target == first) { first = first.getNext(); } else if(target == last) { previous = (SNode<T>) this.getNodeBefore(newTarget); previous.setNext(null); last = previous; } else { previous = (SNode<T>) this.getNodeBefore(newTarget); previous.setNext(newTarget.getNext()); } newTarget.setElement(null); newTarget.setNext(null); length--; } public Node<T> createNewNode() { return new SNode<>(); } @Override public Iterator<T> iterator() { return new ElementsIterator(); } @Override public void addLastNode(Node<T> newNode) { SNode<T> daNode = (SNode<T>) newNode; daNode.setNext(null); if (first == null) { first = daNode; } else { last.setNext(daNode); } last = daNode; length++; } @Override public Iterable<Node<T>> nodes() { return new NodesIterable(); } private class NodesIterable implements Iterable<Node<T>> { @Override public Iterator<Node<T>> iterator() { return new NodesIterator(); } } private class NodesIterator implements Iterator<Node<T>> { private SNode<T> curr = first; private SNode<T> ptntr = null; private boolean canRemove = false; public boolean hasNext() { return curr != null; } public SNode<T> next() { if (!hasNext()) throw new NoSuchElementException(\"Iterator is completed.\"); if (canRemove) ptntr = (ptntr == null ? first : ptntr.getNext()); canRemove = true; SNode<T> ntr = curr; curr = curr.getNext(); return ntr; } public void remove() { if (!canRemove) throw new IllegalStateException(\"Not valid to remove.\"); if (ptntr == null) first = first.getNext(); else ptntr.setNext(ptntr.getNext().getNext()); length--; canRemove = false; } } private class ElementsIterator implements Iterator<T> { @Override public boolean hasNext() { return false; } @Override public T next() { return null; } } @Override public LinkedList<T> clone() { LinkedList<T> listClone = new SLFLList<>(); for (T e : this) { Node<T> tempNode = listClone.createNewNode(); tempNode.setElement(e); listClone.addLastNode(tempNode); } return listClone; } }"},{"file_path":"Linked-Lists-Everywhere-master/Linked-Lists-Everywhere-master/src/main/java/linkedLists/SLList.java","file_content":"package linkedLists; import interfases.LinkedList; import interfases.Node; import java.util.Iterator; import java.util.NoSuchElementException; public class SLList<T> extends AbstractSLList<T> { private SNode<T> first; private int length; public SLList() { first = null; length = 0; } public void addFirstNode(Node<T> nuevo) { ((SNode<T>) nuevo).setNext(first); first = (SNode<T>) nuevo; length++; } public void addLastNode(Node<T> nuevo) { SNode<T> sNuevo = (SNode<T>) nuevo; sNuevo.setNext(null); if (length == 0) first = sNuevo; else { SNode<T> p = first; while (p.getNext() != null) p = p.getNext(); p.setNext(sNuevo); } length++; } public void addNodeAfter(Node<T> target, Node<T> nuevo) { ((SNode<T>) nuevo).setNext((SNode<T>) target.getNext()); ((SNode<T>) target).setNext((SNode<T>) nuevo); length++; } public void addNodeBefore(Node<T> target, Node<T> nuevo) { if (target == first) this.addFirstNode(nuevo); else { Node<T> prevNode = findNodePrevTo(target); this.addNodeAfter(prevNode, nuevo); } } private Node<T> findNodePrevTo(Node<T> target) { if (target == first) return null; else { SNode<T> prev = first; while (prev != null && prev.getNext() != target) prev = prev.getNext(); return prev; } } public Node<T> getLastNode() { if (first == null) return null; else { SNode<T> curr = first; while (curr.getNext() != null) curr = curr.getNext(); return curr; } } public Node<T> getNodeAfter(Node<T> target) { return ((SNode<T>) target).getNext(); } public Node<T> getNodeBefore(Node<T> target) { if (target == first) return null; else return findNodePrevTo(target); } public int length() { return this.length; } public void removeNode(Node<T> target) { if (target == first) first = first.getNext(); else { SNode<T> prevNode = (SNode<T>) this.getNodeBefore(target); prevNode.setNext((SNode<T>) target.getNext()); } target.clean(); length--; } public Node<T> getFirstNode() throws NoSuchElementException { if (first == null) throw new NoSuchElementException(\"getFirstNode() : linked list is empty...\"); return first; } private void destroy() { while (first != null) { SNode<T> nnode = first.getNext(); first.setElement(null); first.setNext(null); first = nnode; } } public void makeEmpty() { destroy(); length = 0; } public Node<T> createNewNode() { return new SNode<>(); } @Override public Iterable<Node<T>> nodes() { return new NodesIterable(); } @Override public Iterator<T> iterator() { return new ElementsIterator(); } private class NodesIterable implements Iterable<Node<T>> { @Override public Iterator<Node<T>> iterator() { return new NodesIterator(); } } private class ElementsIterator implements Iterator<T> { NodesIterator nodesIter = new NodesIterator(); @Override public boolean hasNext() { return nodesIter.hasNext(); } @Override public T next() { return nodesIter.next().getElement(); } public void remove() { nodesIter.remove(); } } private class NodesIterator implements Iterator<Node<T>> { private SNode<T> curr = first; private SNode<T> ptntr = null; private boolean canRemove = false; public boolean hasNext() { return curr != null; } public SNode<T> next() { if (!hasNext()) throw new NoSuchElementException(\"Iterator is completed.\"); if (canRemove) ptntr = (ptntr == null ? first : ptntr.getNext()); canRemove = true; SNode<T> ntr = curr; curr = curr.getNext(); return ntr; } public void remove() { if (!canRemove) throw new IllegalStateException(\"Not valid to remove.\"); if (ptntr == null) first = first.getNext(); else ptntr.setNext(ptntr.getNext().getNext()); length--; canRemove = false; } } @Override public LinkedList<T> clone() { LinkedList<T> listClone = new SLList<>(); for (T e : this) { Node<T> tempNode = listClone.createNewNode(); tempNode.setElement(e); listClone.addLastNode(tempNode); } return listClone; } }"}]}}
{"project_id":192,"chunk_id":0,"content":{"main_file_path":"spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/Application.java","main_file_content":"package com.github.pires.example; import org.springframework.boot.autoconfigure.EnableAutoConfiguration; import org.springframework.boot.builder.SpringApplicationBuilder; import org.springframework.context.annotation.ComponentScan; @EnableAutoConfiguration @ComponentScan public class Application { public static void main(String... args) { new SpringApplicationBuilder() .sources(Application.class) .showBanner(false) .run(args); } }","dependencies":[{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/Application.java","file_content":"package com.github.pires.example; import org.springframework.boot.autoconfigure.EnableAutoConfiguration; import org.springframework.boot.builder.SpringApplicationBuilder; import org.springframework.context.annotation.ComponentScan; @EnableAutoConfiguration @ComponentScan public class Application { public static void main(String... args) { new SpringApplicationBuilder() .sources(Application.class) .showBanner(false) .run(args); } }"}]}}
{"project_id":192,"chunk_id":0,"content":{"main_file_path":"spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/ApplicationExceptionHandler.java","main_file_content":"package com.github.pires.example; import org.apache.shiro.authc.AuthenticationException; import org.apache.shiro.authc.IncorrectCredentialsException; import org.apache.shiro.authc.UnknownAccountException; import org.apache.shiro.authz.UnauthenticatedException; import org.apache.shiro.authz.UnauthorizedException; import org.springframework.http.HttpStatus; import org.springframework.web.bind.annotation.ControllerAdvice; import org.springframework.web.bind.annotation.ExceptionHandler; import org.springframework.web.bind.annotation.ResponseStatus; @ControllerAdvice public class ApplicationExceptionHandler { @ResponseStatus(HttpStatus.UNAUTHORIZED) @ExceptionHandler( {AuthenticationException.class, UnknownAccountException.class, UnauthenticatedException.class, IncorrectCredentialsException.class, UnauthorizedException.class}) public void unauthorized() { } }","dependencies":[]}}
{"project_id":192,"chunk_id":0,"content":{"main_file_path":"spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/ShiroConfiguration.java","main_file_content":"package com.github.pires.example; import com.github.pires.example.shiro.HazelcastSessionDao; import com.github.pires.example.shiro.OrientDbRealm; import org.apache.shiro.authc.credential.DefaultPasswordService; import org.apache.shiro.authc.credential.PasswordMatcher; import org.apache.shiro.session.mgt.eis.SessionDAO; import org.apache.shiro.spring.LifecycleBeanPostProcessor; import org.apache.shiro.spring.web.ShiroFilterFactoryBean; import org.apache.shiro.web.mgt.DefaultWebSecurityManager; import org.apache.shiro.web.session.mgt.DefaultWebSessionManager; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.DependsOn; @Configuration public class ShiroConfiguration { @Bean public ShiroFilterFactoryBean shiroFilter() { ShiroFilterFactoryBean factoryBean = new ShiroFilterFactoryBean(); factoryBean.setSecurityManager(securityManager()); return factoryBean; } @Bean(name = \"securityManager\") public DefaultWebSecurityManager securityManager() { final DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager(); securityManager.setRealm(realm()); securityManager.setSessionManager(sessionManager()); return securityManager; } @Bean public DefaultWebSessionManager sessionManager() { final DefaultWebSessionManager sessionManager = new DefaultWebSessionManager(); sessionManager.setSessionDAO(sessionDao()); sessionManager.setGlobalSessionTimeout(43200000); return sessionManager; } @Bean public SessionDAO sessionDao() { return new HazelcastSessionDao(); } @Bean(name = \"realm\") @DependsOn(\"lifecycleBeanPostProcessor\") public OrientDbRealm realm() { final OrientDbRealm realm = new OrientDbRealm(); realm.setCredentialsMatcher(credentialsMatcher()); return realm; } @Bean(name = \"credentialsMatcher\") public PasswordMatcher credentialsMatcher() { final PasswordMatcher credentialsMatcher = new PasswordMatcher(); credentialsMatcher.setPasswordService(passwordService()); return credentialsMatcher; } @Bean(name = \"passwordService\") public DefaultPasswordService passwordService() { return new DefaultPasswordService(); } @Bean public LifecycleBeanPostProcessor lifecycleBeanPostProcessor() { return new LifecycleBeanPostProcessor(); } }","dependencies":[{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/shiro/HazelcastSessionDao.java","file_content":"package com.github.pires.example.shiro; import com.hazelcast.config.Config; import com.hazelcast.config.GroupConfig; import com.hazelcast.config.JoinConfig; import com.hazelcast.config.MulticastConfig; import com.hazelcast.config.NetworkConfig; import com.hazelcast.config.SSLConfig; import com.hazelcast.config.TcpIpConfig; import com.hazelcast.core.Hazelcast; import com.hazelcast.core.HazelcastInstance; import com.hazelcast.core.IMap; import java.io.Serializable; import java.util.Collection; import java.util.UUID; import org.apache.shiro.session.Session; import org.apache.shiro.session.UnknownSessionException; import org.apache.shiro.session.mgt.eis.AbstractSessionDAO; import org.slf4j.Logger; import org.slf4j.LoggerFactory; public class HazelcastSessionDao extends AbstractSessionDAO { private static final Logger log = LoggerFactory .getLogger(HazelcastSessionDao.class); private static final String HC_MAP = \"sessions\"; private static final String HC_GROUP_NAME = \"hc\"; private static final String HC_GROUP_PASSWORD = \"oursessionssecret\"; private static final int HC_PORT = 5701; private static final String HC_MULTICAST_GROUP = \"224.2.2.3\"; private static final int HC_MULTICAST_PORT = 54327; private String hcInstanceName = UUID.randomUUID().toString(); private IMap<Serializable, Session> map; public HazelcastSessionDao() { log.info(\"Initializing Hazelcast Shiro session persistence..\"); final Config cfg = new Config(); cfg.setInstanceName(hcInstanceName); cfg.setGroupConfig(new GroupConfig(HC_GROUP_NAME, HC_GROUP_PASSWORD)); final NetworkConfig netCfg = new NetworkConfig(); netCfg.setPortAutoIncrement(true); netCfg.setPort(HC_PORT); final MulticastConfig mcCfg = new MulticastConfig(); mcCfg.setEnabled(false); mcCfg.setMulticastGroup(HC_MULTICAST_GROUP); mcCfg.setMulticastPort(HC_MULTICAST_PORT); final TcpIpConfig tcpCfg = new TcpIpConfig(); tcpCfg.addMember(\"127.0.0.1\"); tcpCfg.setEnabled(false); final JoinConfig joinCfg = new JoinConfig(); joinCfg.setMulticastConfig(mcCfg); joinCfg.setTcpIpConfig(tcpCfg); netCfg.setJoin(joinCfg); netCfg.setSSLConfig(new SSLConfig().setEnabled(false)); map = Hazelcast.newHazelcastInstance(cfg).getMap(HC_MAP); log.info(\"Hazelcast Shiro session persistence initialized.\"); } @Override protected Serializable doCreate(Session session) { final Serializable sessionId = generateSessionId(session); log.debug(\"Creating a new session identified by[{}]\", sessionId); assignSessionId(session, sessionId); map.put(session.getId(), session); return sessionId; } @Override protected Session doReadSession(Serializable sessionId) { log.debug(\"Reading a session identified by[{}]\", sessionId); return map.get(sessionId); } @Override public void update(Session session) throws UnknownSessionException { log.debug(\"Updating a session identified by[{}]\", session.getId()); map.replace(session.getId(), session); } @Override public void delete(Session session) { log.debug(\"Deleting a session identified by[{}]\", session.getId()); map.remove(session.getId()); } @Override public Collection<Session> getActiveSessions() { return map.values(); } public Collection<Session> getSessionsForAuthenticationEntity( final String email) { log.debug(\"Looking up for sessions related to [{}]\", email); final SessionAttributePredicate<String> predicate = new SessionAttributePredicate<>(\"email\", email); return map.values(predicate); } public void destroy() { log.info(\"Shutting down Hazelcast instance [{}]..\", hcInstanceName); final HazelcastInstance instance = Hazelcast.getHazelcastInstanceByName( hcInstanceName); if (instance != null) { instance.shutdown(); } } }"},{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/shiro/OrientDbRealm.java","file_content":"package com.github.pires.example.shiro; import com.github.pires.example.model.Permission; import com.github.pires.example.model.Role; import com.github.pires.example.model.User; import com.github.pires.example.repository.UserRepository; import java.util.LinkedHashSet; import java.util.Set; import org.apache.shiro.authc.AuthenticationException; import org.apache.shiro.authc.AuthenticationInfo; import org.apache.shiro.authc.AuthenticationToken; import org.apache.shiro.authc.SimpleAuthenticationInfo; import org.apache.shiro.authc.UnknownAccountException; import org.apache.shiro.authc.UsernamePasswordToken; import org.apache.shiro.authz.AuthorizationInfo; import org.apache.shiro.authz.SimpleAuthorizationInfo; import org.apache.shiro.realm.AuthorizingRealm; import org.apache.shiro.subject.PrincipalCollection; import org.apache.shiro.util.ByteSource; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Component; @Component public class OrientDbRealm extends AuthorizingRealm { @Autowired private UserRepository userRepository; @Override protected AuthenticationInfo doGetAuthenticationInfo( final AuthenticationToken token) throws AuthenticationException { final UsernamePasswordToken credentials = (UsernamePasswordToken) token; final String email = credentials.getUsername(); if (email == null) { throw new UnknownAccountException(\"Email not provided\"); } final User user = userRepository.findByEmailAndActive(email, true); if (user == null) { throw new UnknownAccountException(\"Account does not exist\"); } return new SimpleAuthenticationInfo(email, user.getPassword().toCharArray(), ByteSource.Util.bytes(email), getName()); } @Override protected AuthorizationInfo doGetAuthorizationInfo( final PrincipalCollection principals) { final String email = (String) principals.getPrimaryPrincipal(); final User user = userRepository.findByEmailAndActive(email, true); if (user == null) { throw new UnknownAccountException(\"Account does not exist\"); } final int totalRoles = user.getRoles().size(); final Set<String> roleNames = new LinkedHashSet<>(totalRoles); final Set<String> permissionNames = new LinkedHashSet<>(); if (totalRoles > 0) { for (Role role : user.getRoles()) { roleNames.add(role.getName()); for (Permission permission : role.getPermissions()) { permissionNames.add(permission.getName()); } } } final SimpleAuthorizationInfo info = new SimpleAuthorizationInfo(roleNames); info.setStringPermissions(permissionNames); return info; } }"}]}}
{"project_id":192,"chunk_id":0,"content":{"main_file_path":"spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/OrientDbConfiguration.java","main_file_content":"package com.github.pires.example; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Configuration; import org.springframework.data.orient.commons.repository.config.EnableOrientRepositories; import org.springframework.data.orient.object.OrientObjectDatabaseFactory; import org.springframework.data.orient.object.repository.support.OrientObjectRepositoryFactoryBean; import org.springframework.transaction.annotation.Transactional; import javax.annotation.PostConstruct; @Configuration @EnableOrientRepositories(basePackages = \"com.github.pires.example.repository\", repositoryFactoryBeanClass = OrientObjectRepositoryFactoryBean.class) public class OrientDbConfiguration { @Autowired private OrientObjectDatabaseFactory factory; @PostConstruct @Transactional public void registerEntities() { factory.db().getEntityManager().registerEntityClasses(\"com.github.pires.example.model\"); } }","dependencies":[]}}
{"project_id":192,"chunk_id":0,"content":{"main_file_path":"spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/repository/RoleRepository.java","main_file_content":"package com.github.pires.example.repository; import com.github.pires.example.model.Role; import org.springframework.data.orient.object.repository.OrientObjectRepository; public interface RoleRepository extends OrientObjectRepository<Role> { }","dependencies":[{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/model/Role.java","file_content":"package com.github.pires.example.model; import com.fasterxml.jackson.annotation.JsonIgnore; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import java.util.ArrayList; import java.util.List; import javax.persistence.Id; import javax.persistence.ManyToMany; import javax.persistence.Version; @JsonIgnoreProperties(value = {\"handler\"}) public class Role { @Id private String id; @Version @JsonIgnore private Long version; private String name; private String description; @ManyToMany private List<Permission> permissions; public String getId() { return id; } public void setId(String id) { this.id = id; } public Long getVersion() { return version; } public void setVersion(Long version) { this.version = version; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } public List<Permission> getPermissions() { if (permissions == null) this.permissions = new ArrayList<>(); return permissions; } public void setPermissions(List<Permission> permissions) { this.permissions = permissions; } }"}]}}
{"project_id":192,"chunk_id":0,"content":{"main_file_path":"spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/repository/UserRepository.java","main_file_content":"package com.github.pires.example.repository; import com.github.pires.example.model.User; import org.springframework.data.orient.object.repository.OrientObjectRepository; public interface UserRepository extends OrientObjectRepository<User> { User findByEmail(String email); User findByEmailAndActive(String email, boolean active); }","dependencies":[{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/model/User.java","file_content":"package com.github.pires.example.model; import com.fasterxml.jackson.annotation.JsonIgnore; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import java.util.ArrayList; import java.util.List; import javax.persistence.Id; import javax.persistence.OneToMany; import javax.persistence.Version; @JsonIgnoreProperties(value = {\"handler\"}) public class User { @Id private String id; @Version @JsonIgnore private Long version; private Long created; private String email; private String name; private Boolean active; private String password; @OneToMany private List<Role> roles; public String getId() { return id; } public void setId(String id) { this.id = id; } public Long getVersion() { return version; } public void setVersion(Long version) { this.version = version; } public Long getCreated() { return created; } public void setCreated(Long created) { this.created = created; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getName() { return name; } public void setName(String name) { this.name = name; } public Boolean getActive() { return active; } public void setActive(Boolean active) { this.active = active; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public List<Role> getRoles() { if (roles == null) { this.roles = new ArrayList<>(); } return roles; } public void setRoles(List<Role> roles) { this.roles = roles; } }"}]}}
{"project_id":192,"chunk_id":0,"content":{"main_file_path":"spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/repository/PermissionRepository.java","main_file_content":"package com.github.pires.example.repository; import com.github.pires.example.model.Permission; import org.springframework.data.orient.object.repository.OrientObjectRepository; public interface PermissionRepository extends OrientObjectRepository<Permission> { }","dependencies":[{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/model/Permission.java","file_content":"package com.github.pires.example.model; import com.fasterxml.jackson.annotation.JsonIgnore; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import javax.persistence.Id; import javax.persistence.Version; @JsonIgnoreProperties(value = {\"handler\"}) public class Permission { @Id private String id; @Version @JsonIgnore private Long version; private String name; private String description; public String getId() { return id; } public void setId(String id) { this.id = id; } public Long getVersion() { return version; } public void setVersion(Long version) { this.version = version; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } }"}]}}
{"project_id":192,"chunk_id":0,"content":{"main_file_path":"spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/model/User.java","main_file_content":"package com.github.pires.example.model; import com.fasterxml.jackson.annotation.JsonIgnore; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import java.util.ArrayList; import java.util.List; import javax.persistence.Id; import javax.persistence.OneToMany; import javax.persistence.Version; @JsonIgnoreProperties(value = {\"handler\"}) public class User { @Id private String id; @Version @JsonIgnore private Long version; private Long created; private String email; private String name; private Boolean active; private String password; @OneToMany private List<Role> roles; public String getId() { return id; } public void setId(String id) { this.id = id; } public Long getVersion() { return version; } public void setVersion(Long version) { this.version = version; } public Long getCreated() { return created; } public void setCreated(Long created) { this.created = created; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getName() { return name; } public void setName(String name) { this.name = name; } public Boolean getActive() { return active; } public void setActive(Boolean active) { this.active = active; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public List<Role> getRoles() { if (roles == null) { this.roles = new ArrayList<>(); } return roles; } public void setRoles(List<Role> roles) { this.roles = roles; } }","dependencies":[{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/model/Role.java","file_content":"package com.github.pires.example.model; import com.fasterxml.jackson.annotation.JsonIgnore; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import java.util.ArrayList; import java.util.List; import javax.persistence.Id; import javax.persistence.ManyToMany; import javax.persistence.Version; @JsonIgnoreProperties(value = {\"handler\"}) public class Role { @Id private String id; @Version @JsonIgnore private Long version; private String name; private String description; @ManyToMany private List<Permission> permissions; public String getId() { return id; } public void setId(String id) { this.id = id; } public Long getVersion() { return version; } public void setVersion(Long version) { this.version = version; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } public List<Permission> getPermissions() { if (permissions == null) this.permissions = new ArrayList<>(); return permissions; } public void setPermissions(List<Permission> permissions) { this.permissions = permissions; } }"}]}}
{"project_id":192,"chunk_id":0,"content":{"main_file_path":"spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/model/Permission.java","main_file_content":"package com.github.pires.example.model; import com.fasterxml.jackson.annotation.JsonIgnore; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import javax.persistence.Id; import javax.persistence.Version; @JsonIgnoreProperties(value = {\"handler\"}) public class Permission { @Id private String id; @Version @JsonIgnore private Long version; private String name; private String description; public String getId() { return id; } public void setId(String id) { this.id = id; } public Long getVersion() { return version; } public void setVersion(Long version) { this.version = version; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } }","dependencies":[]}}
{"project_id":192,"chunk_id":0,"content":{"main_file_path":"spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/model/Role.java","main_file_content":"package com.github.pires.example.model; import com.fasterxml.jackson.annotation.JsonIgnore; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import java.util.ArrayList; import java.util.List; import javax.persistence.Id; import javax.persistence.ManyToMany; import javax.persistence.Version; @JsonIgnoreProperties(value = {\"handler\"}) public class Role { @Id private String id; @Version @JsonIgnore private Long version; private String name; private String description; @ManyToMany private List<Permission> permissions; public String getId() { return id; } public void setId(String id) { this.id = id; } public Long getVersion() { return version; } public void setVersion(Long version) { this.version = version; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } public List<Permission> getPermissions() { if (permissions == null) this.permissions = new ArrayList<>(); return permissions; } public void setPermissions(List<Permission> permissions) { this.permissions = permissions; } }","dependencies":[{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/model/Permission.java","file_content":"package com.github.pires.example.model; import com.fasterxml.jackson.annotation.JsonIgnore; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import javax.persistence.Id; import javax.persistence.Version; @JsonIgnoreProperties(value = {\"handler\"}) public class Permission { @Id private String id; @Version @JsonIgnore private Long version; private String name; private String description; public String getId() { return id; } public void setId(String id) { this.id = id; } public Long getVersion() { return version; } public void setVersion(Long version) { this.version = version; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } }"}]}}
{"project_id":192,"chunk_id":0,"content":{"main_file_path":"spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/rest/EmailAlreadyInUseException.java","main_file_content":"package com.github.pires.example.rest; import org.springframework.http.HttpStatus; import org.springframework.web.bind.annotation.ResponseStatus; @ResponseStatus(HttpStatus.PRECONDITION_FAILED) public class EmailAlreadyInUseException extends RuntimeException { }","dependencies":[]}}
{"project_id":192,"chunk_id":0,"content":{"main_file_path":"spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/rest/UserController.java","main_file_content":"package com.github.pires.example.rest; import com.github.pires.example.model.Permission; import com.github.pires.example.model.Role; import com.github.pires.example.model.User; import com.github.pires.example.repository.PermissionRepository; import com.github.pires.example.repository.RoleRepository; import com.github.pires.example.repository.UserRepository; import java.util.List; import org.apache.shiro.SecurityUtils; import org.apache.shiro.authc.UsernamePasswordToken; import org.apache.shiro.authc.credential.DefaultPasswordService; import org.apache.shiro.authz.annotation.RequiresAuthentication; import org.apache.shiro.authz.annotation.RequiresRoles; import org.apache.shiro.subject.Subject; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import static org.springframework.web.bind.annotation.RequestMethod.GET; import static org.springframework.web.bind.annotation.RequestMethod.POST; import static org.springframework.web.bind.annotation.RequestMethod.PUT; import org.springframework.web.bind.annotation.RestController; @RestController @RequestMapping(\"/users\") public class UserController { private static final Logger log = LoggerFactory. getLogger(UserController.class); @Autowired private DefaultPasswordService passwordService; @Autowired private UserRepository userRepo; @Autowired private RoleRepository roleRepo; @Autowired private PermissionRepository permissionRepo; @RequestMapping(value = \"/auth\", method = POST) public void authenticate(@RequestBody final UsernamePasswordToken credentials) { log.info(\"Authenticating {}\", credentials.getUsername()); final Subject subject = SecurityUtils.getSubject(); subject.login(credentials); subject.getSession().setAttribute(\"email\", credentials.getUsername()); } @RequestMapping(method = GET) @RequiresAuthentication @RequiresRoles(\"ADMIN\") public List<User> getAll() { return userRepo.findAll(); } @RequestMapping(value = \"do_something\", method = GET) @RequiresAuthentication @RequiresRoles(\"DO_SOMETHING\") public List<User> dontHavePermission() { return userRepo.findAll(); } @RequestMapping(method = PUT) public void initScenario() { log.info(\"Initializing scenario..\"); userRepo.deleteAll(); roleRepo.deleteAll(); permissionRepo.deleteAll(); final Permission p1 = new Permission(); p1.setName(\"VIEW_ALL_USERS\"); permissionRepo.save(p1); final Permission p2 = new Permission(); p2.setName(\"DO_SOMETHING\"); permissionRepo.save(p2); final Role roleAdmin = new Role(); roleAdmin.setName(\"ADMIN\"); roleAdmin.getPermissions().add(p1); roleRepo.save(roleAdmin); final User user = new User(); user.setActive(true); user.setCreated(System.currentTimeMillis()); user.setEmail(\"pjpires@gmail.com\"); user.setName(\"Paulo Pires\"); user.setPassword(passwordService.encryptPassword(\"123qwe\")); user.getRoles().add(roleAdmin); userRepo.save(user); log.info(\"Scenario initiated.\"); } }","dependencies":[{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/model/Permission.java","file_content":"package com.github.pires.example.model; import com.fasterxml.jackson.annotation.JsonIgnore; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import javax.persistence.Id; import javax.persistence.Version; @JsonIgnoreProperties(value = {\"handler\"}) public class Permission { @Id private String id; @Version @JsonIgnore private Long version; private String name; private String description; public String getId() { return id; } public void setId(String id) { this.id = id; } public Long getVersion() { return version; } public void setVersion(Long version) { this.version = version; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } }"},{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/model/Role.java","file_content":"package com.github.pires.example.model; import com.fasterxml.jackson.annotation.JsonIgnore; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import java.util.ArrayList; import java.util.List; import javax.persistence.Id; import javax.persistence.ManyToMany; import javax.persistence.Version; @JsonIgnoreProperties(value = {\"handler\"}) public class Role { @Id private String id; @Version @JsonIgnore private Long version; private String name; private String description; @ManyToMany private List<Permission> permissions; public String getId() { return id; } public void setId(String id) { this.id = id; } public Long getVersion() { return version; } public void setVersion(Long version) { this.version = version; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } public List<Permission> getPermissions() { if (permissions == null) this.permissions = new ArrayList<>(); return permissions; } public void setPermissions(List<Permission> permissions) { this.permissions = permissions; } }"},{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/model/User.java","file_content":"package com.github.pires.example.model; import com.fasterxml.jackson.annotation.JsonIgnore; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import java.util.ArrayList; import java.util.List; import javax.persistence.Id; import javax.persistence.OneToMany; import javax.persistence.Version; @JsonIgnoreProperties(value = {\"handler\"}) public class User { @Id private String id; @Version @JsonIgnore private Long version; private Long created; private String email; private String name; private Boolean active; private String password; @OneToMany private List<Role> roles; public String getId() { return id; } public void setId(String id) { this.id = id; } public Long getVersion() { return version; } public void setVersion(Long version) { this.version = version; } public Long getCreated() { return created; } public void setCreated(Long created) { this.created = created; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getName() { return name; } public void setName(String name) { this.name = name; } public Boolean getActive() { return active; } public void setActive(Boolean active) { this.active = active; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public List<Role> getRoles() { if (roles == null) { this.roles = new ArrayList<>(); } return roles; } public void setRoles(List<Role> roles) { this.roles = roles; } }"},{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/repository/PermissionRepository.java","file_content":"package com.github.pires.example.repository; import com.github.pires.example.model.Permission; import org.springframework.data.orient.object.repository.OrientObjectRepository; public interface PermissionRepository extends OrientObjectRepository<Permission> { }"},{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/repository/RoleRepository.java","file_content":"package com.github.pires.example.repository; import com.github.pires.example.model.Role; import org.springframework.data.orient.object.repository.OrientObjectRepository; public interface RoleRepository extends OrientObjectRepository<Role> { }"},{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/repository/UserRepository.java","file_content":"package com.github.pires.example.repository; import com.github.pires.example.model.User; import org.springframework.data.orient.object.repository.OrientObjectRepository; public interface UserRepository extends OrientObjectRepository<User> { User findByEmail(String email); User findByEmailAndActive(String email, boolean active); }"},{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/rest/UserController.java","file_content":"package com.github.pires.example.rest; import com.github.pires.example.model.Permission; import com.github.pires.example.model.Role; import com.github.pires.example.model.User; import com.github.pires.example.repository.PermissionRepository; import com.github.pires.example.repository.RoleRepository; import com.github.pires.example.repository.UserRepository; import java.util.List; import org.apache.shiro.SecurityUtils; import org.apache.shiro.authc.UsernamePasswordToken; import org.apache.shiro.authc.credential.DefaultPasswordService; import org.apache.shiro.authz.annotation.RequiresAuthentication; import org.apache.shiro.authz.annotation.RequiresRoles; import org.apache.shiro.subject.Subject; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import static org.springframework.web.bind.annotation.RequestMethod.GET; import static org.springframework.web.bind.annotation.RequestMethod.POST; import static org.springframework.web.bind.annotation.RequestMethod.PUT; import org.springframework.web.bind.annotation.RestController; @RestController @RequestMapping(\"/users\") public class UserController { private static final Logger log = LoggerFactory. getLogger(UserController.class); @Autowired private DefaultPasswordService passwordService; @Autowired private UserRepository userRepo; @Autowired private RoleRepository roleRepo; @Autowired private PermissionRepository permissionRepo; @RequestMapping(value = \"/auth\", method = POST) public void authenticate(@RequestBody final UsernamePasswordToken credentials) { log.info(\"Authenticating {}\", credentials.getUsername()); final Subject subject = SecurityUtils.getSubject(); subject.login(credentials); subject.getSession().setAttribute(\"email\", credentials.getUsername()); } @RequestMapping(method = GET) @RequiresAuthentication @RequiresRoles(\"ADMIN\") public List<User> getAll() { return userRepo.findAll(); } @RequestMapping(value = \"do_something\", method = GET) @RequiresAuthentication @RequiresRoles(\"DO_SOMETHING\") public List<User> dontHavePermission() { return userRepo.findAll(); } @RequestMapping(method = PUT) public void initScenario() { log.info(\"Initializing scenario..\"); userRepo.deleteAll(); roleRepo.deleteAll(); permissionRepo.deleteAll(); final Permission p1 = new Permission(); p1.setName(\"VIEW_ALL_USERS\"); permissionRepo.save(p1); final Permission p2 = new Permission(); p2.setName(\"DO_SOMETHING\"); permissionRepo.save(p2); final Role roleAdmin = new Role(); roleAdmin.setName(\"ADMIN\"); roleAdmin.getPermissions().add(p1); roleRepo.save(roleAdmin); final User user = new User(); user.setActive(true); user.setCreated(System.currentTimeMillis()); user.setEmail(\"pjpires@gmail.com\"); user.setName(\"Paulo Pires\"); user.setPassword(passwordService.encryptPassword(\"123qwe\")); user.getRoles().add(roleAdmin); userRepo.save(user); log.info(\"Scenario initiated.\"); } }"}]}}
{"project_id":192,"chunk_id":0,"content":{"main_file_path":"spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/shiro/SessionAttributePredicate.java","main_file_content":"package com.github.pires.example.shiro; import com.hazelcast.query.Predicate; import java.io.Serializable; import java.util.Map; import org.apache.shiro.session.Session; public class SessionAttributePredicate<T> implements Predicate<Serializable, Session> { private final String attributeName; private final T attributeValue; public SessionAttributePredicate(String attributeName, T attributeValue) { this.attributeName = attributeName; this.attributeValue = attributeValue; } public String getAttributeName() { return attributeName; } public T getAttributeValue() { return attributeValue; } @Override public boolean apply(Map.Entry<Serializable, Session> sessionEntry) { final T attribute = (T) sessionEntry.getValue().getAttribute(attributeName); return attribute.equals(attributeValue); } }","dependencies":[]}}
{"project_id":192,"chunk_id":0,"content":{"main_file_path":"spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/shiro/OrientDbRealm.java","main_file_content":"package com.github.pires.example.shiro; import com.github.pires.example.model.Permission; import com.github.pires.example.model.Role; import com.github.pires.example.model.User; import com.github.pires.example.repository.UserRepository; import java.util.LinkedHashSet; import java.util.Set; import org.apache.shiro.authc.AuthenticationException; import org.apache.shiro.authc.AuthenticationInfo; import org.apache.shiro.authc.AuthenticationToken; import org.apache.shiro.authc.SimpleAuthenticationInfo; import org.apache.shiro.authc.UnknownAccountException; import org.apache.shiro.authc.UsernamePasswordToken; import org.apache.shiro.authz.AuthorizationInfo; import org.apache.shiro.authz.SimpleAuthorizationInfo; import org.apache.shiro.realm.AuthorizingRealm; import org.apache.shiro.subject.PrincipalCollection; import org.apache.shiro.util.ByteSource; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Component; @Component public class OrientDbRealm extends AuthorizingRealm { @Autowired private UserRepository userRepository; @Override protected AuthenticationInfo doGetAuthenticationInfo( final AuthenticationToken token) throws AuthenticationException { final UsernamePasswordToken credentials = (UsernamePasswordToken) token; final String email = credentials.getUsername(); if (email == null) { throw new UnknownAccountException(\"Email not provided\"); } final User user = userRepository.findByEmailAndActive(email, true); if (user == null) { throw new UnknownAccountException(\"Account does not exist\"); } return new SimpleAuthenticationInfo(email, user.getPassword().toCharArray(), ByteSource.Util.bytes(email), getName()); } @Override protected AuthorizationInfo doGetAuthorizationInfo( final PrincipalCollection principals) { final String email = (String) principals.getPrimaryPrincipal(); final User user = userRepository.findByEmailAndActive(email, true); if (user == null) { throw new UnknownAccountException(\"Account does not exist\"); } final int totalRoles = user.getRoles().size(); final Set<String> roleNames = new LinkedHashSet<>(totalRoles); final Set<String> permissionNames = new LinkedHashSet<>(); if (totalRoles > 0) { for (Role role : user.getRoles()) { roleNames.add(role.getName()); for (Permission permission : role.getPermissions()) { permissionNames.add(permission.getName()); } } } final SimpleAuthorizationInfo info = new SimpleAuthorizationInfo(roleNames); info.setStringPermissions(permissionNames); return info; } }","dependencies":[{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/model/Permission.java","file_content":"package com.github.pires.example.model; import com.fasterxml.jackson.annotation.JsonIgnore; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import javax.persistence.Id; import javax.persistence.Version; @JsonIgnoreProperties(value = {\"handler\"}) public class Permission { @Id private String id; @Version @JsonIgnore private Long version; private String name; private String description; public String getId() { return id; } public void setId(String id) { this.id = id; } public Long getVersion() { return version; } public void setVersion(Long version) { this.version = version; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } }"},{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/model/Role.java","file_content":"package com.github.pires.example.model; import com.fasterxml.jackson.annotation.JsonIgnore; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import java.util.ArrayList; import java.util.List; import javax.persistence.Id; import javax.persistence.ManyToMany; import javax.persistence.Version; @JsonIgnoreProperties(value = {\"handler\"}) public class Role { @Id private String id; @Version @JsonIgnore private Long version; private String name; private String description; @ManyToMany private List<Permission> permissions; public String getId() { return id; } public void setId(String id) { this.id = id; } public Long getVersion() { return version; } public void setVersion(Long version) { this.version = version; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } public List<Permission> getPermissions() { if (permissions == null) this.permissions = new ArrayList<>(); return permissions; } public void setPermissions(List<Permission> permissions) { this.permissions = permissions; } }"},{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/model/User.java","file_content":"package com.github.pires.example.model; import com.fasterxml.jackson.annotation.JsonIgnore; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import java.util.ArrayList; import java.util.List; import javax.persistence.Id; import javax.persistence.OneToMany; import javax.persistence.Version; @JsonIgnoreProperties(value = {\"handler\"}) public class User { @Id private String id; @Version @JsonIgnore private Long version; private Long created; private String email; private String name; private Boolean active; private String password; @OneToMany private List<Role> roles; public String getId() { return id; } public void setId(String id) { this.id = id; } public Long getVersion() { return version; } public void setVersion(Long version) { this.version = version; } public Long getCreated() { return created; } public void setCreated(Long created) { this.created = created; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getName() { return name; } public void setName(String name) { this.name = name; } public Boolean getActive() { return active; } public void setActive(Boolean active) { this.active = active; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public List<Role> getRoles() { if (roles == null) { this.roles = new ArrayList<>(); } return roles; } public void setRoles(List<Role> roles) { this.roles = roles; } }"},{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/repository/UserRepository.java","file_content":"package com.github.pires.example.repository; import com.github.pires.example.model.User; import org.springframework.data.orient.object.repository.OrientObjectRepository; public interface UserRepository extends OrientObjectRepository<User> { User findByEmail(String email); User findByEmailAndActive(String email, boolean active); }"}]}}
{"project_id":192,"chunk_id":0,"content":{"main_file_path":"spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/shiro/HazelcastSessionDao.java","main_file_content":"package com.github.pires.example.shiro; import com.hazelcast.config.Config; import com.hazelcast.config.GroupConfig; import com.hazelcast.config.JoinConfig; import com.hazelcast.config.MulticastConfig; import com.hazelcast.config.NetworkConfig; import com.hazelcast.config.SSLConfig; import com.hazelcast.config.TcpIpConfig; import com.hazelcast.core.Hazelcast; import com.hazelcast.core.HazelcastInstance; import com.hazelcast.core.IMap; import java.io.Serializable; import java.util.Collection; import java.util.UUID; import org.apache.shiro.session.Session; import org.apache.shiro.session.UnknownSessionException; import org.apache.shiro.session.mgt.eis.AbstractSessionDAO; import org.slf4j.Logger; import org.slf4j.LoggerFactory; public class HazelcastSessionDao extends AbstractSessionDAO { private static final Logger log = LoggerFactory .getLogger(HazelcastSessionDao.class); private static final String HC_MAP = \"sessions\"; private static final String HC_GROUP_NAME = \"hc\"; private static final String HC_GROUP_PASSWORD = \"oursessionssecret\"; private static final int HC_PORT = 5701; private static final String HC_MULTICAST_GROUP = \"224.2.2.3\"; private static final int HC_MULTICAST_PORT = 54327; private String hcInstanceName = UUID.randomUUID().toString(); private IMap<Serializable, Session> map; public HazelcastSessionDao() { log.info(\"Initializing Hazelcast Shiro session persistence..\"); final Config cfg = new Config(); cfg.setInstanceName(hcInstanceName); cfg.setGroupConfig(new GroupConfig(HC_GROUP_NAME, HC_GROUP_PASSWORD)); final NetworkConfig netCfg = new NetworkConfig(); netCfg.setPortAutoIncrement(true); netCfg.setPort(HC_PORT); final MulticastConfig mcCfg = new MulticastConfig(); mcCfg.setEnabled(false); mcCfg.setMulticastGroup(HC_MULTICAST_GROUP); mcCfg.setMulticastPort(HC_MULTICAST_PORT); final TcpIpConfig tcpCfg = new TcpIpConfig(); tcpCfg.addMember(\"127.0.0.1\"); tcpCfg.setEnabled(false); final JoinConfig joinCfg = new JoinConfig(); joinCfg.setMulticastConfig(mcCfg); joinCfg.setTcpIpConfig(tcpCfg); netCfg.setJoin(joinCfg); netCfg.setSSLConfig(new SSLConfig().setEnabled(false)); map = Hazelcast.newHazelcastInstance(cfg).getMap(HC_MAP); log.info(\"Hazelcast Shiro session persistence initialized.\"); } @Override protected Serializable doCreate(Session session) { final Serializable sessionId = generateSessionId(session); log.debug(\"Creating a new session identified by[{}]\", sessionId); assignSessionId(session, sessionId); map.put(session.getId(), session); return sessionId; } @Override protected Session doReadSession(Serializable sessionId) { log.debug(\"Reading a session identified by[{}]\", sessionId); return map.get(sessionId); } @Override public void update(Session session) throws UnknownSessionException { log.debug(\"Updating a session identified by[{}]\", session.getId()); map.replace(session.getId(), session); } @Override public void delete(Session session) { log.debug(\"Deleting a session identified by[{}]\", session.getId()); map.remove(session.getId()); } @Override public Collection<Session> getActiveSessions() { return map.values(); } public Collection<Session> getSessionsForAuthenticationEntity( final String email) { log.debug(\"Looking up for sessions related to [{}]\", email); final SessionAttributePredicate<String> predicate = new SessionAttributePredicate<>(\"email\", email); return map.values(predicate); } public void destroy() { log.info(\"Shutting down Hazelcast instance [{}]..\", hcInstanceName); final HazelcastInstance instance = Hazelcast.getHazelcastInstanceByName( hcInstanceName); if (instance != null) { instance.shutdown(); } } }","dependencies":[{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/shiro/HazelcastSessionDao.java","file_content":"package com.github.pires.example.shiro; import com.hazelcast.config.Config; import com.hazelcast.config.GroupConfig; import com.hazelcast.config.JoinConfig; import com.hazelcast.config.MulticastConfig; import com.hazelcast.config.NetworkConfig; import com.hazelcast.config.SSLConfig; import com.hazelcast.config.TcpIpConfig; import com.hazelcast.core.Hazelcast; import com.hazelcast.core.HazelcastInstance; import com.hazelcast.core.IMap; import java.io.Serializable; import java.util.Collection; import java.util.UUID; import org.apache.shiro.session.Session; import org.apache.shiro.session.UnknownSessionException; import org.apache.shiro.session.mgt.eis.AbstractSessionDAO; import org.slf4j.Logger; import org.slf4j.LoggerFactory; public class HazelcastSessionDao extends AbstractSessionDAO { private static final Logger log = LoggerFactory .getLogger(HazelcastSessionDao.class); private static final String HC_MAP = \"sessions\"; private static final String HC_GROUP_NAME = \"hc\"; private static final String HC_GROUP_PASSWORD = \"oursessionssecret\"; private static final int HC_PORT = 5701; private static final String HC_MULTICAST_GROUP = \"224.2.2.3\"; private static final int HC_MULTICAST_PORT = 54327; private String hcInstanceName = UUID.randomUUID().toString(); private IMap<Serializable, Session> map; public HazelcastSessionDao() { log.info(\"Initializing Hazelcast Shiro session persistence..\"); final Config cfg = new Config(); cfg.setInstanceName(hcInstanceName); cfg.setGroupConfig(new GroupConfig(HC_GROUP_NAME, HC_GROUP_PASSWORD)); final NetworkConfig netCfg = new NetworkConfig(); netCfg.setPortAutoIncrement(true); netCfg.setPort(HC_PORT); final MulticastConfig mcCfg = new MulticastConfig(); mcCfg.setEnabled(false); mcCfg.setMulticastGroup(HC_MULTICAST_GROUP); mcCfg.setMulticastPort(HC_MULTICAST_PORT); final TcpIpConfig tcpCfg = new TcpIpConfig(); tcpCfg.addMember(\"127.0.0.1\"); tcpCfg.setEnabled(false); final JoinConfig joinCfg = new JoinConfig(); joinCfg.setMulticastConfig(mcCfg); joinCfg.setTcpIpConfig(tcpCfg); netCfg.setJoin(joinCfg); netCfg.setSSLConfig(new SSLConfig().setEnabled(false)); map = Hazelcast.newHazelcastInstance(cfg).getMap(HC_MAP); log.info(\"Hazelcast Shiro session persistence initialized.\"); } @Override protected Serializable doCreate(Session session) { final Serializable sessionId = generateSessionId(session); log.debug(\"Creating a new session identified by[{}]\", sessionId); assignSessionId(session, sessionId); map.put(session.getId(), session); return sessionId; } @Override protected Session doReadSession(Serializable sessionId) { log.debug(\"Reading a session identified by[{}]\", sessionId); return map.get(sessionId); } @Override public void update(Session session) throws UnknownSessionException { log.debug(\"Updating a session identified by[{}]\", session.getId()); map.replace(session.getId(), session); } @Override public void delete(Session session) { log.debug(\"Deleting a session identified by[{}]\", session.getId()); map.remove(session.getId()); } @Override public Collection<Session> getActiveSessions() { return map.values(); } public Collection<Session> getSessionsForAuthenticationEntity( final String email) { log.debug(\"Looking up for sessions related to [{}]\", email); final SessionAttributePredicate<String> predicate = new SessionAttributePredicate<>(\"email\", email); return map.values(predicate); } public void destroy() { log.info(\"Shutting down Hazelcast instance [{}]..\", hcInstanceName); final HazelcastInstance instance = Hazelcast.getHazelcastInstanceByName( hcInstanceName); if (instance != null) { instance.shutdown(); } } }"},{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/shiro/SessionAttributePredicate.java","file_content":"package com.github.pires.example.shiro; import com.hazelcast.query.Predicate; import java.io.Serializable; import java.util.Map; import org.apache.shiro.session.Session; public class SessionAttributePredicate<T> implements Predicate<Serializable, Session> { private final String attributeName; private final T attributeValue; public SessionAttributePredicate(String attributeName, T attributeValue) { this.attributeName = attributeName; this.attributeValue = attributeValue; } public String getAttributeName() { return attributeName; } public T getAttributeValue() { return attributeValue; } @Override public boolean apply(Map.Entry<Serializable, Session> sessionEntry) { final T attribute = (T) sessionEntry.getValue().getAttribute(attributeName); return attribute.equals(attributeValue); } }"}]}}
{"project_id":192,"chunk_id":0,"content":{"main_file_path":"spring-boot-shiro-orientdb-master/src/test/java/com/github/pires/example/rest/UserControllerTest.java","main_file_content":"package com.github.pires.example.rest; import com.fasterxml.jackson.core.JsonProcessingException; import com.fasterxml.jackson.databind.ObjectMapper; import com.github.pires.example.Application; import com.github.pires.example.OrientDbConfiguration; import com.github.pires.example.ShiroConfiguration; import com.github.pires.example.model.Permission; import com.github.pires.example.model.Role; import com.github.pires.example.model.User; import com.github.pires.example.repository.PermissionRepository; import com.github.pires.example.repository.RoleRepository; import com.github.pires.example.repository.UserRepository; import java.util.Arrays; import org.apache.shiro.authc.UsernamePasswordToken; import org.apache.shiro.authc.credential.DefaultPasswordService; import static org.hamcrest.CoreMatchers.equalTo; import static org.hamcrest.MatcherAssert.assertThat; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.IntegrationTest; import org.springframework.boot.test.SpringApplicationConfiguration; import org.springframework.boot.test.TestRestTemplate; import org.springframework.boot.test.TestRestTemplate.HttpClientOption; import org.springframework.http.HttpEntity; import org.springframework.http.HttpHeaders; import org.springframework.http.HttpMethod; import org.springframework.http.HttpStatus; import org.springframework.http.MediaType; import org.springframework.http.ResponseEntity; import org.springframework.test.context.TestExecutionListeners; import org.springframework.test.context.support.DependencyInjectionTestExecutionListener; import org.springframework.test.context.testng.AbstractTestNGSpringContextTests; import org.springframework.test.context.web.WebAppConfiguration; import static org.testng.AssertJUnit.assertEquals; import org.testng.annotations.BeforeClass; import org.testng.annotations.Test; @SpringApplicationConfiguration(classes = {Application.class, OrientDbConfiguration.class, ShiroConfiguration.class}) @WebAppConfiguration @IntegrationTest @TestExecutionListeners(inheritListeners = false, listeners = {DependencyInjectionTestExecutionListener.class}) public class UserControllerTest extends AbstractTestNGSpringContextTests { private final String BASE_URL = \"http: private final String USER_NAME = \"Paulo Pires\"; private final String USER_EMAIL = \"pjpires@gmail.com\"; private final String USER_PWD = \"123qwe\"; @Autowired private DefaultPasswordService passwordService; @Autowired private UserRepository userRepo; @Autowired private RoleRepository roleRepo; @Autowired private PermissionRepository permissionRepo; @BeforeClass public void setUp() { userRepo.deleteAll(); roleRepo.deleteAll(); permissionRepo.deleteAll(); final Permission p1 = new Permission(); p1.setName(\"VIEW_USER_ROLES\"); permissionRepo.save(p1); final Role roleAdmin = new Role(); roleAdmin.setName(\"ADMIN\"); roleAdmin.getPermissions().add(p1); roleRepo.save(roleAdmin); final User user = new User(); user.setActive(true); user.setCreated(System.currentTimeMillis()); user.setEmail(USER_EMAIL); user.setName(USER_NAME); user.setPassword(passwordService.encryptPassword(USER_PWD)); user.getRoles().add(roleAdmin); userRepo.save(user); } @Test public void test_count() { assertEquals(1, userRepo.count()); } @Test public void test_authenticate_success() throws JsonProcessingException { HttpHeaders headers = new HttpHeaders(); headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON)); headers.setContentType(MediaType.APPLICATION_JSON); final String json = new ObjectMapper().writeValueAsString( new UsernamePasswordToken(USER_EMAIL, USER_PWD)); System.out.println(json); final ResponseEntity<String> response = new TestRestTemplate( HttpClientOption.ENABLE_COOKIES).exchange(BASE_URL.concat(\"/auth\"), HttpMethod.POST, new HttpEntity<>(json, headers), String.class); assertThat(response.getStatusCode(), equalTo(HttpStatus.OK)); } @Test public void test_authenticate_failure() throws JsonProcessingException { HttpHeaders headers = new HttpHeaders(); headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON)); headers.setContentType(MediaType.APPLICATION_JSON); final String json = new ObjectMapper().writeValueAsString( new UsernamePasswordToken(USER_EMAIL, \"wrong password\")); System.out.println(json); final ResponseEntity<String> response = new TestRestTemplate( HttpClientOption.ENABLE_COOKIES).exchange(BASE_URL.concat(\"/auth\"), HttpMethod.POST, new HttpEntity<>(json, headers), String.class); assertThat(response.getStatusCode(), equalTo(HttpStatus.UNAUTHORIZED)); } }","dependencies":[{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/Application.java","file_content":"package com.github.pires.example; import org.springframework.boot.autoconfigure.EnableAutoConfiguration; import org.springframework.boot.builder.SpringApplicationBuilder; import org.springframework.context.annotation.ComponentScan; @EnableAutoConfiguration @ComponentScan public class Application { public static void main(String... args) { new SpringApplicationBuilder() .sources(Application.class) .showBanner(false) .run(args); } }"},{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/OrientDbConfiguration.java","file_content":"package com.github.pires.example; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Configuration; import org.springframework.data.orient.commons.repository.config.EnableOrientRepositories; import org.springframework.data.orient.object.OrientObjectDatabaseFactory; import org.springframework.data.orient.object.repository.support.OrientObjectRepositoryFactoryBean; import org.springframework.transaction.annotation.Transactional; import javax.annotation.PostConstruct; @Configuration @EnableOrientRepositories(basePackages = \"com.github.pires.example.repository\", repositoryFactoryBeanClass = OrientObjectRepositoryFactoryBean.class) public class OrientDbConfiguration { @Autowired private OrientObjectDatabaseFactory factory; @PostConstruct @Transactional public void registerEntities() { factory.db().getEntityManager().registerEntityClasses(\"com.github.pires.example.model\"); } }"},{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/ShiroConfiguration.java","file_content":"package com.github.pires.example; import com.github.pires.example.shiro.HazelcastSessionDao; import com.github.pires.example.shiro.OrientDbRealm; import org.apache.shiro.authc.credential.DefaultPasswordService; import org.apache.shiro.authc.credential.PasswordMatcher; import org.apache.shiro.session.mgt.eis.SessionDAO; import org.apache.shiro.spring.LifecycleBeanPostProcessor; import org.apache.shiro.spring.web.ShiroFilterFactoryBean; import org.apache.shiro.web.mgt.DefaultWebSecurityManager; import org.apache.shiro.web.session.mgt.DefaultWebSessionManager; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.DependsOn; @Configuration public class ShiroConfiguration { @Bean public ShiroFilterFactoryBean shiroFilter() { ShiroFilterFactoryBean factoryBean = new ShiroFilterFactoryBean(); factoryBean.setSecurityManager(securityManager()); return factoryBean; } @Bean(name = \"securityManager\") public DefaultWebSecurityManager securityManager() { final DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager(); securityManager.setRealm(realm()); securityManager.setSessionManager(sessionManager()); return securityManager; } @Bean public DefaultWebSessionManager sessionManager() { final DefaultWebSessionManager sessionManager = new DefaultWebSessionManager(); sessionManager.setSessionDAO(sessionDao()); sessionManager.setGlobalSessionTimeout(43200000); return sessionManager; } @Bean public SessionDAO sessionDao() { return new HazelcastSessionDao(); } @Bean(name = \"realm\") @DependsOn(\"lifecycleBeanPostProcessor\") public OrientDbRealm realm() { final OrientDbRealm realm = new OrientDbRealm(); realm.setCredentialsMatcher(credentialsMatcher()); return realm; } @Bean(name = \"credentialsMatcher\") public PasswordMatcher credentialsMatcher() { final PasswordMatcher credentialsMatcher = new PasswordMatcher(); credentialsMatcher.setPasswordService(passwordService()); return credentialsMatcher; } @Bean(name = \"passwordService\") public DefaultPasswordService passwordService() { return new DefaultPasswordService(); } @Bean public LifecycleBeanPostProcessor lifecycleBeanPostProcessor() { return new LifecycleBeanPostProcessor(); } }"},{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/model/Permission.java","file_content":"package com.github.pires.example.model; import com.fasterxml.jackson.annotation.JsonIgnore; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import javax.persistence.Id; import javax.persistence.Version; @JsonIgnoreProperties(value = {\"handler\"}) public class Permission { @Id private String id; @Version @JsonIgnore private Long version; private String name; private String description; public String getId() { return id; } public void setId(String id) { this.id = id; } public Long getVersion() { return version; } public void setVersion(Long version) { this.version = version; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } }"},{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/model/Role.java","file_content":"package com.github.pires.example.model; import com.fasterxml.jackson.annotation.JsonIgnore; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import java.util.ArrayList; import java.util.List; import javax.persistence.Id; import javax.persistence.ManyToMany; import javax.persistence.Version; @JsonIgnoreProperties(value = {\"handler\"}) public class Role { @Id private String id; @Version @JsonIgnore private Long version; private String name; private String description; @ManyToMany private List<Permission> permissions; public String getId() { return id; } public void setId(String id) { this.id = id; } public Long getVersion() { return version; } public void setVersion(Long version) { this.version = version; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } public List<Permission> getPermissions() { if (permissions == null) this.permissions = new ArrayList<>(); return permissions; } public void setPermissions(List<Permission> permissions) { this.permissions = permissions; } }"},{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/model/User.java","file_content":"package com.github.pires.example.model; import com.fasterxml.jackson.annotation.JsonIgnore; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import java.util.ArrayList; import java.util.List; import javax.persistence.Id; import javax.persistence.OneToMany; import javax.persistence.Version; @JsonIgnoreProperties(value = {\"handler\"}) public class User { @Id private String id; @Version @JsonIgnore private Long version; private Long created; private String email; private String name; private Boolean active; private String password; @OneToMany private List<Role> roles; public String getId() { return id; } public void setId(String id) { this.id = id; } public Long getVersion() { return version; } public void setVersion(Long version) { this.version = version; } public Long getCreated() { return created; } public void setCreated(Long created) { this.created = created; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getName() { return name; } public void setName(String name) { this.name = name; } public Boolean getActive() { return active; } public void setActive(Boolean active) { this.active = active; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public List<Role> getRoles() { if (roles == null) { this.roles = new ArrayList<>(); } return roles; } public void setRoles(List<Role> roles) { this.roles = roles; } }"},{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/repository/PermissionRepository.java","file_content":"package com.github.pires.example.repository; import com.github.pires.example.model.Permission; import org.springframework.data.orient.object.repository.OrientObjectRepository; public interface PermissionRepository extends OrientObjectRepository<Permission> { }"},{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/repository/RoleRepository.java","file_content":"package com.github.pires.example.repository; import com.github.pires.example.model.Role; import org.springframework.data.orient.object.repository.OrientObjectRepository; public interface RoleRepository extends OrientObjectRepository<Role> { }"},{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/repository/UserRepository.java","file_content":"package com.github.pires.example.repository; import com.github.pires.example.model.User; import org.springframework.data.orient.object.repository.OrientObjectRepository; public interface UserRepository extends OrientObjectRepository<User> { User findByEmail(String email); User findByEmailAndActive(String email, boolean active); }"}]}}
{"project_id":192,"chunk_id":0,"content":{"main_file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/Application.java","main_file_content":"package com.github.pires.example; import org.springframework.boot.autoconfigure.EnableAutoConfiguration; import org.springframework.boot.builder.SpringApplicationBuilder; import org.springframework.context.annotation.ComponentScan; @EnableAutoConfiguration @ComponentScan public class Application { public static void main(String... args) { new SpringApplicationBuilder() .sources(Application.class) .showBanner(false) .run(args); } }","dependencies":[]}}
{"project_id":192,"chunk_id":0,"content":{"main_file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/ApplicationExceptionHandler.java","main_file_content":"package com.github.pires.example; import org.apache.shiro.authc.AuthenticationException; import org.apache.shiro.authc.IncorrectCredentialsException; import org.apache.shiro.authc.UnknownAccountException; import org.apache.shiro.authz.UnauthenticatedException; import org.apache.shiro.authz.UnauthorizedException; import org.springframework.http.HttpStatus; import org.springframework.web.bind.annotation.ControllerAdvice; import org.springframework.web.bind.annotation.ExceptionHandler; import org.springframework.web.bind.annotation.ResponseStatus; @ControllerAdvice public class ApplicationExceptionHandler { @ResponseStatus(HttpStatus.UNAUTHORIZED) @ExceptionHandler( {AuthenticationException.class, UnknownAccountException.class, UnauthenticatedException.class, IncorrectCredentialsException.class, UnauthorizedException.class}) public void unauthorized() { } }","dependencies":[]}}
{"project_id":192,"chunk_id":0,"content":{"main_file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/ShiroConfiguration.java","main_file_content":"package com.github.pires.example; import com.github.pires.example.shiro.HazelcastSessionDao; import com.github.pires.example.shiro.OrientDbRealm; import org.apache.shiro.authc.credential.DefaultPasswordService; import org.apache.shiro.authc.credential.PasswordMatcher; import org.apache.shiro.session.mgt.eis.SessionDAO; import org.apache.shiro.spring.LifecycleBeanPostProcessor; import org.apache.shiro.spring.web.ShiroFilterFactoryBean; import org.apache.shiro.web.mgt.DefaultWebSecurityManager; import org.apache.shiro.web.session.mgt.DefaultWebSessionManager; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.DependsOn; @Configuration public class ShiroConfiguration { @Bean public ShiroFilterFactoryBean shiroFilter() { ShiroFilterFactoryBean factoryBean = new ShiroFilterFactoryBean(); factoryBean.setSecurityManager(securityManager()); return factoryBean; } @Bean(name = \"securityManager\") public DefaultWebSecurityManager securityManager() { final DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager(); securityManager.setRealm(realm()); securityManager.setSessionManager(sessionManager()); return securityManager; } @Bean public DefaultWebSessionManager sessionManager() { final DefaultWebSessionManager sessionManager = new DefaultWebSessionManager(); sessionManager.setSessionDAO(sessionDao()); sessionManager.setGlobalSessionTimeout(43200000); return sessionManager; } @Bean public SessionDAO sessionDao() { return new HazelcastSessionDao(); } @Bean(name = \"realm\") @DependsOn(\"lifecycleBeanPostProcessor\") public OrientDbRealm realm() { final OrientDbRealm realm = new OrientDbRealm(); realm.setCredentialsMatcher(credentialsMatcher()); return realm; } @Bean(name = \"credentialsMatcher\") public PasswordMatcher credentialsMatcher() { final PasswordMatcher credentialsMatcher = new PasswordMatcher(); credentialsMatcher.setPasswordService(passwordService()); return credentialsMatcher; } @Bean(name = \"passwordService\") public DefaultPasswordService passwordService() { return new DefaultPasswordService(); } @Bean public LifecycleBeanPostProcessor lifecycleBeanPostProcessor() { return new LifecycleBeanPostProcessor(); } }","dependencies":[{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/shiro/HazelcastSessionDao.java","file_content":"package com.github.pires.example.shiro; import com.hazelcast.config.Config; import com.hazelcast.config.GroupConfig; import com.hazelcast.config.JoinConfig; import com.hazelcast.config.MulticastConfig; import com.hazelcast.config.NetworkConfig; import com.hazelcast.config.SSLConfig; import com.hazelcast.config.TcpIpConfig; import com.hazelcast.core.Hazelcast; import com.hazelcast.core.HazelcastInstance; import com.hazelcast.core.IMap; import java.io.Serializable; import java.util.Collection; import java.util.UUID; import org.apache.shiro.session.Session; import org.apache.shiro.session.UnknownSessionException; import org.apache.shiro.session.mgt.eis.AbstractSessionDAO; import org.slf4j.Logger; import org.slf4j.LoggerFactory; public class HazelcastSessionDao extends AbstractSessionDAO { private static final Logger log = LoggerFactory .getLogger(HazelcastSessionDao.class); private static final String HC_MAP = \"sessions\"; private static final String HC_GROUP_NAME = \"hc\"; private static final String HC_GROUP_PASSWORD = \"oursessionssecret\"; private static final int HC_PORT = 5701; private static final String HC_MULTICAST_GROUP = \"224.2.2.3\"; private static final int HC_MULTICAST_PORT = 54327; private String hcInstanceName = UUID.randomUUID().toString(); private IMap<Serializable, Session> map; public HazelcastSessionDao() { log.info(\"Initializing Hazelcast Shiro session persistence..\"); final Config cfg = new Config(); cfg.setInstanceName(hcInstanceName); cfg.setGroupConfig(new GroupConfig(HC_GROUP_NAME, HC_GROUP_PASSWORD)); final NetworkConfig netCfg = new NetworkConfig(); netCfg.setPortAutoIncrement(true); netCfg.setPort(HC_PORT); final MulticastConfig mcCfg = new MulticastConfig(); mcCfg.setEnabled(false); mcCfg.setMulticastGroup(HC_MULTICAST_GROUP); mcCfg.setMulticastPort(HC_MULTICAST_PORT); final TcpIpConfig tcpCfg = new TcpIpConfig(); tcpCfg.addMember(\"127.0.0.1\"); tcpCfg.setEnabled(false); final JoinConfig joinCfg = new JoinConfig(); joinCfg.setMulticastConfig(mcCfg); joinCfg.setTcpIpConfig(tcpCfg); netCfg.setJoin(joinCfg); netCfg.setSSLConfig(new SSLConfig().setEnabled(false)); map = Hazelcast.newHazelcastInstance(cfg).getMap(HC_MAP); log.info(\"Hazelcast Shiro session persistence initialized.\"); } @Override protected Serializable doCreate(Session session) { final Serializable sessionId = generateSessionId(session); log.debug(\"Creating a new session identified by[{}]\", sessionId); assignSessionId(session, sessionId); map.put(session.getId(), session); return sessionId; } @Override protected Session doReadSession(Serializable sessionId) { log.debug(\"Reading a session identified by[{}]\", sessionId); return map.get(sessionId); } @Override public void update(Session session) throws UnknownSessionException { log.debug(\"Updating a session identified by[{}]\", session.getId()); map.replace(session.getId(), session); } @Override public void delete(Session session) { log.debug(\"Deleting a session identified by[{}]\", session.getId()); map.remove(session.getId()); } @Override public Collection<Session> getActiveSessions() { return map.values(); } public Collection<Session> getSessionsForAuthenticationEntity( final String email) { log.debug(\"Looking up for sessions related to [{}]\", email); final SessionAttributePredicate<String> predicate = new SessionAttributePredicate<>(\"email\", email); return map.values(predicate); } public void destroy() { log.info(\"Shutting down Hazelcast instance [{}]..\", hcInstanceName); final HazelcastInstance instance = Hazelcast.getHazelcastInstanceByName( hcInstanceName); if (instance != null) { instance.shutdown(); } } }"},{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/shiro/OrientDbRealm.java","file_content":"package com.github.pires.example.shiro; import com.github.pires.example.model.Permission; import com.github.pires.example.model.Role; import com.github.pires.example.model.User; import com.github.pires.example.repository.UserRepository; import java.util.LinkedHashSet; import java.util.Set; import org.apache.shiro.authc.AuthenticationException; import org.apache.shiro.authc.AuthenticationInfo; import org.apache.shiro.authc.AuthenticationToken; import org.apache.shiro.authc.SimpleAuthenticationInfo; import org.apache.shiro.authc.UnknownAccountException; import org.apache.shiro.authc.UsernamePasswordToken; import org.apache.shiro.authz.AuthorizationInfo; import org.apache.shiro.authz.SimpleAuthorizationInfo; import org.apache.shiro.realm.AuthorizingRealm; import org.apache.shiro.subject.PrincipalCollection; import org.apache.shiro.util.ByteSource; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Component; @Component public class OrientDbRealm extends AuthorizingRealm { @Autowired private UserRepository userRepository; @Override protected AuthenticationInfo doGetAuthenticationInfo( final AuthenticationToken token) throws AuthenticationException { final UsernamePasswordToken credentials = (UsernamePasswordToken) token; final String email = credentials.getUsername(); if (email == null) { throw new UnknownAccountException(\"Email not provided\"); } final User user = userRepository.findByEmailAndActive(email, true); if (user == null) { throw new UnknownAccountException(\"Account does not exist\"); } return new SimpleAuthenticationInfo(email, user.getPassword().toCharArray(), ByteSource.Util.bytes(email), getName()); } @Override protected AuthorizationInfo doGetAuthorizationInfo( final PrincipalCollection principals) { final String email = (String) principals.getPrimaryPrincipal(); final User user = userRepository.findByEmailAndActive(email, true); if (user == null) { throw new UnknownAccountException(\"Account does not exist\"); } final int totalRoles = user.getRoles().size(); final Set<String> roleNames = new LinkedHashSet<>(totalRoles); final Set<String> permissionNames = new LinkedHashSet<>(); if (totalRoles > 0) { for (Role role : user.getRoles()) { roleNames.add(role.getName()); for (Permission permission : role.getPermissions()) { permissionNames.add(permission.getName()); } } } final SimpleAuthorizationInfo info = new SimpleAuthorizationInfo(roleNames); info.setStringPermissions(permissionNames); return info; } }"}]}}
{"project_id":192,"chunk_id":0,"content":{"main_file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/OrientDbConfiguration.java","main_file_content":"package com.github.pires.example; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Configuration; import org.springframework.data.orient.commons.repository.config.EnableOrientRepositories; import org.springframework.data.orient.object.OrientObjectDatabaseFactory; import org.springframework.data.orient.object.repository.support.OrientObjectRepositoryFactoryBean; import org.springframework.transaction.annotation.Transactional; import javax.annotation.PostConstruct; @Configuration @EnableOrientRepositories(basePackages = \"com.github.pires.example.repository\", repositoryFactoryBeanClass = OrientObjectRepositoryFactoryBean.class) public class OrientDbConfiguration { @Autowired private OrientObjectDatabaseFactory factory; @PostConstruct @Transactional public void registerEntities() { factory.db().getEntityManager().registerEntityClasses(\"com.github.pires.example.model\"); } }","dependencies":[]}}
{"project_id":192,"chunk_id":0,"content":{"main_file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/repository/RoleRepository.java","main_file_content":"package com.github.pires.example.repository; import com.github.pires.example.model.Role; import org.springframework.data.orient.object.repository.OrientObjectRepository; public interface RoleRepository extends OrientObjectRepository<Role> { }","dependencies":[{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/model/Role.java","file_content":"package com.github.pires.example.model; import com.fasterxml.jackson.annotation.JsonIgnore; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import java.util.ArrayList; import java.util.List; import javax.persistence.Id; import javax.persistence.ManyToMany; import javax.persistence.Version; @JsonIgnoreProperties(value = {\"handler\"}) public class Role { @Id private String id; @Version @JsonIgnore private Long version; private String name; private String description; @ManyToMany private List<Permission> permissions; public String getId() { return id; } public void setId(String id) { this.id = id; } public Long getVersion() { return version; } public void setVersion(Long version) { this.version = version; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } public List<Permission> getPermissions() { if (permissions == null) this.permissions = new ArrayList<>(); return permissions; } public void setPermissions(List<Permission> permissions) { this.permissions = permissions; } }"}]}}
{"project_id":192,"chunk_id":0,"content":{"main_file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/repository/UserRepository.java","main_file_content":"package com.github.pires.example.repository; import com.github.pires.example.model.User; import org.springframework.data.orient.object.repository.OrientObjectRepository; public interface UserRepository extends OrientObjectRepository<User> { User findByEmail(String email); User findByEmailAndActive(String email, boolean active); }","dependencies":[{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/model/User.java","file_content":"package com.github.pires.example.model; import com.fasterxml.jackson.annotation.JsonIgnore; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import java.util.ArrayList; import java.util.List; import javax.persistence.Id; import javax.persistence.OneToMany; import javax.persistence.Version; @JsonIgnoreProperties(value = {\"handler\"}) public class User { @Id private String id; @Version @JsonIgnore private Long version; private Long created; private String email; private String name; private Boolean active; private String password; @OneToMany private List<Role> roles; public String getId() { return id; } public void setId(String id) { this.id = id; } public Long getVersion() { return version; } public void setVersion(Long version) { this.version = version; } public Long getCreated() { return created; } public void setCreated(Long created) { this.created = created; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getName() { return name; } public void setName(String name) { this.name = name; } public Boolean getActive() { return active; } public void setActive(Boolean active) { this.active = active; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public List<Role> getRoles() { if (roles == null) { this.roles = new ArrayList<>(); } return roles; } public void setRoles(List<Role> roles) { this.roles = roles; } }"}]}}
{"project_id":192,"chunk_id":0,"content":{"main_file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/repository/PermissionRepository.java","main_file_content":"package com.github.pires.example.repository; import com.github.pires.example.model.Permission; import org.springframework.data.orient.object.repository.OrientObjectRepository; public interface PermissionRepository extends OrientObjectRepository<Permission> { }","dependencies":[{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/model/Permission.java","file_content":"package com.github.pires.example.model; import com.fasterxml.jackson.annotation.JsonIgnore; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import javax.persistence.Id; import javax.persistence.Version; @JsonIgnoreProperties(value = {\"handler\"}) public class Permission { @Id private String id; @Version @JsonIgnore private Long version; private String name; private String description; public String getId() { return id; } public void setId(String id) { this.id = id; } public Long getVersion() { return version; } public void setVersion(Long version) { this.version = version; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } }"}]}}
{"project_id":192,"chunk_id":0,"content":{"main_file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/model/User.java","main_file_content":"package com.github.pires.example.model; import com.fasterxml.jackson.annotation.JsonIgnore; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import java.util.ArrayList; import java.util.List; import javax.persistence.Id; import javax.persistence.OneToMany; import javax.persistence.Version; @JsonIgnoreProperties(value = {\"handler\"}) public class User { @Id private String id; @Version @JsonIgnore private Long version; private Long created; private String email; private String name; private Boolean active; private String password; @OneToMany private List<Role> roles; public String getId() { return id; } public void setId(String id) { this.id = id; } public Long getVersion() { return version; } public void setVersion(Long version) { this.version = version; } public Long getCreated() { return created; } public void setCreated(Long created) { this.created = created; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getName() { return name; } public void setName(String name) { this.name = name; } public Boolean getActive() { return active; } public void setActive(Boolean active) { this.active = active; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public List<Role> getRoles() { if (roles == null) { this.roles = new ArrayList<>(); } return roles; } public void setRoles(List<Role> roles) { this.roles = roles; } }","dependencies":[{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/model/Role.java","file_content":"package com.github.pires.example.model; import com.fasterxml.jackson.annotation.JsonIgnore; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import java.util.ArrayList; import java.util.List; import javax.persistence.Id; import javax.persistence.ManyToMany; import javax.persistence.Version; @JsonIgnoreProperties(value = {\"handler\"}) public class Role { @Id private String id; @Version @JsonIgnore private Long version; private String name; private String description; @ManyToMany private List<Permission> permissions; public String getId() { return id; } public void setId(String id) { this.id = id; } public Long getVersion() { return version; } public void setVersion(Long version) { this.version = version; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } public List<Permission> getPermissions() { if (permissions == null) this.permissions = new ArrayList<>(); return permissions; } public void setPermissions(List<Permission> permissions) { this.permissions = permissions; } }"}]}}
{"project_id":192,"chunk_id":0,"content":{"main_file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/model/Permission.java","main_file_content":"package com.github.pires.example.model; import com.fasterxml.jackson.annotation.JsonIgnore; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import javax.persistence.Id; import javax.persistence.Version; @JsonIgnoreProperties(value = {\"handler\"}) public class Permission { @Id private String id; @Version @JsonIgnore private Long version; private String name; private String description; public String getId() { return id; } public void setId(String id) { this.id = id; } public Long getVersion() { return version; } public void setVersion(Long version) { this.version = version; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } }","dependencies":[]}}
{"project_id":192,"chunk_id":0,"content":{"main_file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/model/Role.java","main_file_content":"package com.github.pires.example.model; import com.fasterxml.jackson.annotation.JsonIgnore; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import java.util.ArrayList; import java.util.List; import javax.persistence.Id; import javax.persistence.ManyToMany; import javax.persistence.Version; @JsonIgnoreProperties(value = {\"handler\"}) public class Role { @Id private String id; @Version @JsonIgnore private Long version; private String name; private String description; @ManyToMany private List<Permission> permissions; public String getId() { return id; } public void setId(String id) { this.id = id; } public Long getVersion() { return version; } public void setVersion(Long version) { this.version = version; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } public List<Permission> getPermissions() { if (permissions == null) this.permissions = new ArrayList<>(); return permissions; } public void setPermissions(List<Permission> permissions) { this.permissions = permissions; } }","dependencies":[{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/model/Permission.java","file_content":"package com.github.pires.example.model; import com.fasterxml.jackson.annotation.JsonIgnore; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import javax.persistence.Id; import javax.persistence.Version; @JsonIgnoreProperties(value = {\"handler\"}) public class Permission { @Id private String id; @Version @JsonIgnore private Long version; private String name; private String description; public String getId() { return id; } public void setId(String id) { this.id = id; } public Long getVersion() { return version; } public void setVersion(Long version) { this.version = version; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } }"}]}}
{"project_id":192,"chunk_id":0,"content":{"main_file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/rest/EmailAlreadyInUseException.java","main_file_content":"package com.github.pires.example.rest; import org.springframework.http.HttpStatus; import org.springframework.web.bind.annotation.ResponseStatus; @ResponseStatus(HttpStatus.PRECONDITION_FAILED) public class EmailAlreadyInUseException extends RuntimeException { }","dependencies":[]}}
{"project_id":192,"chunk_id":0,"content":{"main_file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/rest/UserController.java","main_file_content":"package com.github.pires.example.rest; import com.github.pires.example.model.Permission; import com.github.pires.example.model.Role; import com.github.pires.example.model.User; import com.github.pires.example.repository.PermissionRepository; import com.github.pires.example.repository.RoleRepository; import com.github.pires.example.repository.UserRepository; import java.util.List; import org.apache.shiro.SecurityUtils; import org.apache.shiro.authc.UsernamePasswordToken; import org.apache.shiro.authc.credential.DefaultPasswordService; import org.apache.shiro.authz.annotation.RequiresAuthentication; import org.apache.shiro.authz.annotation.RequiresRoles; import org.apache.shiro.subject.Subject; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import static org.springframework.web.bind.annotation.RequestMethod.GET; import static org.springframework.web.bind.annotation.RequestMethod.POST; import static org.springframework.web.bind.annotation.RequestMethod.PUT; import org.springframework.web.bind.annotation.RestController; @RestController @RequestMapping(\"/users\") public class UserController { private static final Logger log = LoggerFactory. getLogger(UserController.class); @Autowired private DefaultPasswordService passwordService; @Autowired private UserRepository userRepo; @Autowired private RoleRepository roleRepo; @Autowired private PermissionRepository permissionRepo; @RequestMapping(value = \"/auth\", method = POST) public void authenticate(@RequestBody final UsernamePasswordToken credentials) { log.info(\"Authenticating {}\", credentials.getUsername()); final Subject subject = SecurityUtils.getSubject(); subject.login(credentials); subject.getSession().setAttribute(\"email\", credentials.getUsername()); } @RequestMapping(method = GET) @RequiresAuthentication @RequiresRoles(\"ADMIN\") public List<User> getAll() { return userRepo.findAll(); } @RequestMapping(value = \"do_something\", method = GET) @RequiresAuthentication @RequiresRoles(\"DO_SOMETHING\") public List<User> dontHavePermission() { return userRepo.findAll(); } @RequestMapping(method = PUT) public void initScenario() { log.info(\"Initializing scenario..\"); userRepo.deleteAll(); roleRepo.deleteAll(); permissionRepo.deleteAll(); final Permission p1 = new Permission(); p1.setName(\"VIEW_ALL_USERS\"); permissionRepo.save(p1); final Permission p2 = new Permission(); p2.setName(\"DO_SOMETHING\"); permissionRepo.save(p2); final Role roleAdmin = new Role(); roleAdmin.setName(\"ADMIN\"); roleAdmin.getPermissions().add(p1); roleRepo.save(roleAdmin); final User user = new User(); user.setActive(true); user.setCreated(System.currentTimeMillis()); user.setEmail(\"pjpires@gmail.com\"); user.setName(\"Paulo Pires\"); user.setPassword(passwordService.encryptPassword(\"123qwe\")); user.getRoles().add(roleAdmin); userRepo.save(user); log.info(\"Scenario initiated.\"); } }","dependencies":[{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/model/Permission.java","file_content":"package com.github.pires.example.model; import com.fasterxml.jackson.annotation.JsonIgnore; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import javax.persistence.Id; import javax.persistence.Version; @JsonIgnoreProperties(value = {\"handler\"}) public class Permission { @Id private String id; @Version @JsonIgnore private Long version; private String name; private String description; public String getId() { return id; } public void setId(String id) { this.id = id; } public Long getVersion() { return version; } public void setVersion(Long version) { this.version = version; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } }"},{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/model/Role.java","file_content":"package com.github.pires.example.model; import com.fasterxml.jackson.annotation.JsonIgnore; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import java.util.ArrayList; import java.util.List; import javax.persistence.Id; import javax.persistence.ManyToMany; import javax.persistence.Version; @JsonIgnoreProperties(value = {\"handler\"}) public class Role { @Id private String id; @Version @JsonIgnore private Long version; private String name; private String description; @ManyToMany private List<Permission> permissions; public String getId() { return id; } public void setId(String id) { this.id = id; } public Long getVersion() { return version; } public void setVersion(Long version) { this.version = version; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } public List<Permission> getPermissions() { if (permissions == null) this.permissions = new ArrayList<>(); return permissions; } public void setPermissions(List<Permission> permissions) { this.permissions = permissions; } }"},{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/model/User.java","file_content":"package com.github.pires.example.model; import com.fasterxml.jackson.annotation.JsonIgnore; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import java.util.ArrayList; import java.util.List; import javax.persistence.Id; import javax.persistence.OneToMany; import javax.persistence.Version; @JsonIgnoreProperties(value = {\"handler\"}) public class User { @Id private String id; @Version @JsonIgnore private Long version; private Long created; private String email; private String name; private Boolean active; private String password; @OneToMany private List<Role> roles; public String getId() { return id; } public void setId(String id) { this.id = id; } public Long getVersion() { return version; } public void setVersion(Long version) { this.version = version; } public Long getCreated() { return created; } public void setCreated(Long created) { this.created = created; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getName() { return name; } public void setName(String name) { this.name = name; } public Boolean getActive() { return active; } public void setActive(Boolean active) { this.active = active; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public List<Role> getRoles() { if (roles == null) { this.roles = new ArrayList<>(); } return roles; } public void setRoles(List<Role> roles) { this.roles = roles; } }"},{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/repository/PermissionRepository.java","file_content":"package com.github.pires.example.repository; import com.github.pires.example.model.Permission; import org.springframework.data.orient.object.repository.OrientObjectRepository; public interface PermissionRepository extends OrientObjectRepository<Permission> { }"},{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/repository/RoleRepository.java","file_content":"package com.github.pires.example.repository; import com.github.pires.example.model.Role; import org.springframework.data.orient.object.repository.OrientObjectRepository; public interface RoleRepository extends OrientObjectRepository<Role> { }"},{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/repository/UserRepository.java","file_content":"package com.github.pires.example.repository; import com.github.pires.example.model.User; import org.springframework.data.orient.object.repository.OrientObjectRepository; public interface UserRepository extends OrientObjectRepository<User> { User findByEmail(String email); User findByEmailAndActive(String email, boolean active); }"}]}}
{"project_id":192,"chunk_id":0,"content":{"main_file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/shiro/SessionAttributePredicate.java","main_file_content":"package com.github.pires.example.shiro; import com.hazelcast.query.Predicate; import java.io.Serializable; import java.util.Map; import org.apache.shiro.session.Session; public class SessionAttributePredicate<T> implements Predicate<Serializable, Session> { private final String attributeName; private final T attributeValue; public SessionAttributePredicate(String attributeName, T attributeValue) { this.attributeName = attributeName; this.attributeValue = attributeValue; } public String getAttributeName() { return attributeName; } public T getAttributeValue() { return attributeValue; } @Override public boolean apply(Map.Entry<Serializable, Session> sessionEntry) { final T attribute = (T) sessionEntry.getValue().getAttribute(attributeName); return attribute.equals(attributeValue); } }","dependencies":[]}}
{"project_id":192,"chunk_id":0,"content":{"main_file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/shiro/OrientDbRealm.java","main_file_content":"package com.github.pires.example.shiro; import com.github.pires.example.model.Permission; import com.github.pires.example.model.Role; import com.github.pires.example.model.User; import com.github.pires.example.repository.UserRepository; import java.util.LinkedHashSet; import java.util.Set; import org.apache.shiro.authc.AuthenticationException; import org.apache.shiro.authc.AuthenticationInfo; import org.apache.shiro.authc.AuthenticationToken; import org.apache.shiro.authc.SimpleAuthenticationInfo; import org.apache.shiro.authc.UnknownAccountException; import org.apache.shiro.authc.UsernamePasswordToken; import org.apache.shiro.authz.AuthorizationInfo; import org.apache.shiro.authz.SimpleAuthorizationInfo; import org.apache.shiro.realm.AuthorizingRealm; import org.apache.shiro.subject.PrincipalCollection; import org.apache.shiro.util.ByteSource; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Component; @Component public class OrientDbRealm extends AuthorizingRealm { @Autowired private UserRepository userRepository; @Override protected AuthenticationInfo doGetAuthenticationInfo( final AuthenticationToken token) throws AuthenticationException { final UsernamePasswordToken credentials = (UsernamePasswordToken) token; final String email = credentials.getUsername(); if (email == null) { throw new UnknownAccountException(\"Email not provided\"); } final User user = userRepository.findByEmailAndActive(email, true); if (user == null) { throw new UnknownAccountException(\"Account does not exist\"); } return new SimpleAuthenticationInfo(email, user.getPassword().toCharArray(), ByteSource.Util.bytes(email), getName()); } @Override protected AuthorizationInfo doGetAuthorizationInfo( final PrincipalCollection principals) { final String email = (String) principals.getPrimaryPrincipal(); final User user = userRepository.findByEmailAndActive(email, true); if (user == null) { throw new UnknownAccountException(\"Account does not exist\"); } final int totalRoles = user.getRoles().size(); final Set<String> roleNames = new LinkedHashSet<>(totalRoles); final Set<String> permissionNames = new LinkedHashSet<>(); if (totalRoles > 0) { for (Role role : user.getRoles()) { roleNames.add(role.getName()); for (Permission permission : role.getPermissions()) { permissionNames.add(permission.getName()); } } } final SimpleAuthorizationInfo info = new SimpleAuthorizationInfo(roleNames); info.setStringPermissions(permissionNames); return info; } }","dependencies":[{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/model/Permission.java","file_content":"package com.github.pires.example.model; import com.fasterxml.jackson.annotation.JsonIgnore; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import javax.persistence.Id; import javax.persistence.Version; @JsonIgnoreProperties(value = {\"handler\"}) public class Permission { @Id private String id; @Version @JsonIgnore private Long version; private String name; private String description; public String getId() { return id; } public void setId(String id) { this.id = id; } public Long getVersion() { return version; } public void setVersion(Long version) { this.version = version; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } }"},{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/model/Role.java","file_content":"package com.github.pires.example.model; import com.fasterxml.jackson.annotation.JsonIgnore; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import java.util.ArrayList; import java.util.List; import javax.persistence.Id; import javax.persistence.ManyToMany; import javax.persistence.Version; @JsonIgnoreProperties(value = {\"handler\"}) public class Role { @Id private String id; @Version @JsonIgnore private Long version; private String name; private String description; @ManyToMany private List<Permission> permissions; public String getId() { return id; } public void setId(String id) { this.id = id; } public Long getVersion() { return version; } public void setVersion(Long version) { this.version = version; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } public List<Permission> getPermissions() { if (permissions == null) this.permissions = new ArrayList<>(); return permissions; } public void setPermissions(List<Permission> permissions) { this.permissions = permissions; } }"},{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/model/User.java","file_content":"package com.github.pires.example.model; import com.fasterxml.jackson.annotation.JsonIgnore; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import java.util.ArrayList; import java.util.List; import javax.persistence.Id; import javax.persistence.OneToMany; import javax.persistence.Version; @JsonIgnoreProperties(value = {\"handler\"}) public class User { @Id private String id; @Version @JsonIgnore private Long version; private Long created; private String email; private String name; private Boolean active; private String password; @OneToMany private List<Role> roles; public String getId() { return id; } public void setId(String id) { this.id = id; } public Long getVersion() { return version; } public void setVersion(Long version) { this.version = version; } public Long getCreated() { return created; } public void setCreated(Long created) { this.created = created; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getName() { return name; } public void setName(String name) { this.name = name; } public Boolean getActive() { return active; } public void setActive(Boolean active) { this.active = active; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public List<Role> getRoles() { if (roles == null) { this.roles = new ArrayList<>(); } return roles; } public void setRoles(List<Role> roles) { this.roles = roles; } }"},{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/repository/UserRepository.java","file_content":"package com.github.pires.example.repository; import com.github.pires.example.model.User; import org.springframework.data.orient.object.repository.OrientObjectRepository; public interface UserRepository extends OrientObjectRepository<User> { User findByEmail(String email); User findByEmailAndActive(String email, boolean active); }"}]}}
{"project_id":192,"chunk_id":0,"content":{"main_file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/shiro/HazelcastSessionDao.java","main_file_content":"package com.github.pires.example.shiro; import com.hazelcast.config.Config; import com.hazelcast.config.GroupConfig; import com.hazelcast.config.JoinConfig; import com.hazelcast.config.MulticastConfig; import com.hazelcast.config.NetworkConfig; import com.hazelcast.config.SSLConfig; import com.hazelcast.config.TcpIpConfig; import com.hazelcast.core.Hazelcast; import com.hazelcast.core.HazelcastInstance; import com.hazelcast.core.IMap; import java.io.Serializable; import java.util.Collection; import java.util.UUID; import org.apache.shiro.session.Session; import org.apache.shiro.session.UnknownSessionException; import org.apache.shiro.session.mgt.eis.AbstractSessionDAO; import org.slf4j.Logger; import org.slf4j.LoggerFactory; public class HazelcastSessionDao extends AbstractSessionDAO { private static final Logger log = LoggerFactory .getLogger(HazelcastSessionDao.class); private static final String HC_MAP = \"sessions\"; private static final String HC_GROUP_NAME = \"hc\"; private static final String HC_GROUP_PASSWORD = \"oursessionssecret\"; private static final int HC_PORT = 5701; private static final String HC_MULTICAST_GROUP = \"224.2.2.3\"; private static final int HC_MULTICAST_PORT = 54327; private String hcInstanceName = UUID.randomUUID().toString(); private IMap<Serializable, Session> map; public HazelcastSessionDao() { log.info(\"Initializing Hazelcast Shiro session persistence..\"); final Config cfg = new Config(); cfg.setInstanceName(hcInstanceName); cfg.setGroupConfig(new GroupConfig(HC_GROUP_NAME, HC_GROUP_PASSWORD)); final NetworkConfig netCfg = new NetworkConfig(); netCfg.setPortAutoIncrement(true); netCfg.setPort(HC_PORT); final MulticastConfig mcCfg = new MulticastConfig(); mcCfg.setEnabled(false); mcCfg.setMulticastGroup(HC_MULTICAST_GROUP); mcCfg.setMulticastPort(HC_MULTICAST_PORT); final TcpIpConfig tcpCfg = new TcpIpConfig(); tcpCfg.addMember(\"127.0.0.1\"); tcpCfg.setEnabled(false); final JoinConfig joinCfg = new JoinConfig(); joinCfg.setMulticastConfig(mcCfg); joinCfg.setTcpIpConfig(tcpCfg); netCfg.setJoin(joinCfg); netCfg.setSSLConfig(new SSLConfig().setEnabled(false)); map = Hazelcast.newHazelcastInstance(cfg).getMap(HC_MAP); log.info(\"Hazelcast Shiro session persistence initialized.\"); } @Override protected Serializable doCreate(Session session) { final Serializable sessionId = generateSessionId(session); log.debug(\"Creating a new session identified by[{}]\", sessionId); assignSessionId(session, sessionId); map.put(session.getId(), session); return sessionId; } @Override protected Session doReadSession(Serializable sessionId) { log.debug(\"Reading a session identified by[{}]\", sessionId); return map.get(sessionId); } @Override public void update(Session session) throws UnknownSessionException { log.debug(\"Updating a session identified by[{}]\", session.getId()); map.replace(session.getId(), session); } @Override public void delete(Session session) { log.debug(\"Deleting a session identified by[{}]\", session.getId()); map.remove(session.getId()); } @Override public Collection<Session> getActiveSessions() { return map.values(); } public Collection<Session> getSessionsForAuthenticationEntity( final String email) { log.debug(\"Looking up for sessions related to [{}]\", email); final SessionAttributePredicate<String> predicate = new SessionAttributePredicate<>(\"email\", email); return map.values(predicate); } public void destroy() { log.info(\"Shutting down Hazelcast instance [{}]..\", hcInstanceName); final HazelcastInstance instance = Hazelcast.getHazelcastInstanceByName( hcInstanceName); if (instance != null) { instance.shutdown(); } } }","dependencies":[{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/shiro/SessionAttributePredicate.java","file_content":"package com.github.pires.example.shiro; import com.hazelcast.query.Predicate; import java.io.Serializable; import java.util.Map; import org.apache.shiro.session.Session; public class SessionAttributePredicate<T> implements Predicate<Serializable, Session> { private final String attributeName; private final T attributeValue; public SessionAttributePredicate(String attributeName, T attributeValue) { this.attributeName = attributeName; this.attributeValue = attributeValue; } public String getAttributeName() { return attributeName; } public T getAttributeValue() { return attributeValue; } @Override public boolean apply(Map.Entry<Serializable, Session> sessionEntry) { final T attribute = (T) sessionEntry.getValue().getAttribute(attributeName); return attribute.equals(attributeValue); } }"}]}}
{"project_id":192,"chunk_id":0,"content":{"main_file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/test/java/com/github/pires/example/rest/UserControllerTest.java","main_file_content":"package com.github.pires.example.rest; import com.fasterxml.jackson.core.JsonProcessingException; import com.fasterxml.jackson.databind.ObjectMapper; import com.github.pires.example.Application; import com.github.pires.example.OrientDbConfiguration; import com.github.pires.example.ShiroConfiguration; import com.github.pires.example.model.Permission; import com.github.pires.example.model.Role; import com.github.pires.example.model.User; import com.github.pires.example.repository.PermissionRepository; import com.github.pires.example.repository.RoleRepository; import com.github.pires.example.repository.UserRepository; import java.util.Arrays; import org.apache.shiro.authc.UsernamePasswordToken; import org.apache.shiro.authc.credential.DefaultPasswordService; import static org.hamcrest.CoreMatchers.equalTo; import static org.hamcrest.MatcherAssert.assertThat; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.IntegrationTest; import org.springframework.boot.test.SpringApplicationConfiguration; import org.springframework.boot.test.TestRestTemplate; import org.springframework.boot.test.TestRestTemplate.HttpClientOption; import org.springframework.http.HttpEntity; import org.springframework.http.HttpHeaders; import org.springframework.http.HttpMethod; import org.springframework.http.HttpStatus; import org.springframework.http.MediaType; import org.springframework.http.ResponseEntity; import org.springframework.test.context.TestExecutionListeners; import org.springframework.test.context.support.DependencyInjectionTestExecutionListener; import org.springframework.test.context.testng.AbstractTestNGSpringContextTests; import org.springframework.test.context.web.WebAppConfiguration; import static org.testng.AssertJUnit.assertEquals; import org.testng.annotations.BeforeClass; import org.testng.annotations.Test; @SpringApplicationConfiguration(classes = {Application.class, OrientDbConfiguration.class, ShiroConfiguration.class}) @WebAppConfiguration @IntegrationTest @TestExecutionListeners(inheritListeners = false, listeners = {DependencyInjectionTestExecutionListener.class}) public class UserControllerTest extends AbstractTestNGSpringContextTests { private final String BASE_URL = \"http: private final String USER_NAME = \"Paulo Pires\"; private final String USER_EMAIL = \"pjpires@gmail.com\"; private final String USER_PWD = \"123qwe\"; @Autowired private DefaultPasswordService passwordService; @Autowired private UserRepository userRepo; @Autowired private RoleRepository roleRepo; @Autowired private PermissionRepository permissionRepo; @BeforeClass public void setUp() { userRepo.deleteAll(); roleRepo.deleteAll(); permissionRepo.deleteAll(); final Permission p1 = new Permission(); p1.setName(\"VIEW_USER_ROLES\"); permissionRepo.save(p1); final Role roleAdmin = new Role(); roleAdmin.setName(\"ADMIN\"); roleAdmin.getPermissions().add(p1); roleRepo.save(roleAdmin); final User user = new User(); user.setActive(true); user.setCreated(System.currentTimeMillis()); user.setEmail(USER_EMAIL); user.setName(USER_NAME); user.setPassword(passwordService.encryptPassword(USER_PWD)); user.getRoles().add(roleAdmin); userRepo.save(user); } @Test public void test_count() { assertEquals(1, userRepo.count()); } @Test public void test_authenticate_success() throws JsonProcessingException { HttpHeaders headers = new HttpHeaders(); headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON)); headers.setContentType(MediaType.APPLICATION_JSON); final String json = new ObjectMapper().writeValueAsString( new UsernamePasswordToken(USER_EMAIL, USER_PWD)); System.out.println(json); final ResponseEntity<String> response = new TestRestTemplate( HttpClientOption.ENABLE_COOKIES).exchange(BASE_URL.concat(\"/auth\"), HttpMethod.POST, new HttpEntity<>(json, headers), String.class); assertThat(response.getStatusCode(), equalTo(HttpStatus.OK)); } @Test public void test_authenticate_failure() throws JsonProcessingException { HttpHeaders headers = new HttpHeaders(); headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON)); headers.setContentType(MediaType.APPLICATION_JSON); final String json = new ObjectMapper().writeValueAsString( new UsernamePasswordToken(USER_EMAIL, \"wrong password\")); System.out.println(json); final ResponseEntity<String> response = new TestRestTemplate( HttpClientOption.ENABLE_COOKIES).exchange(BASE_URL.concat(\"/auth\"), HttpMethod.POST, new HttpEntity<>(json, headers), String.class); assertThat(response.getStatusCode(), equalTo(HttpStatus.UNAUTHORIZED)); } }","dependencies":[{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/Application.java","file_content":"package com.github.pires.example; import org.springframework.boot.autoconfigure.EnableAutoConfiguration; import org.springframework.boot.builder.SpringApplicationBuilder; import org.springframework.context.annotation.ComponentScan; @EnableAutoConfiguration @ComponentScan public class Application { public static void main(String... args) { new SpringApplicationBuilder() .sources(Application.class) .showBanner(false) .run(args); } }"},{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/OrientDbConfiguration.java","file_content":"package com.github.pires.example; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Configuration; import org.springframework.data.orient.commons.repository.config.EnableOrientRepositories; import org.springframework.data.orient.object.OrientObjectDatabaseFactory; import org.springframework.data.orient.object.repository.support.OrientObjectRepositoryFactoryBean; import org.springframework.transaction.annotation.Transactional; import javax.annotation.PostConstruct; @Configuration @EnableOrientRepositories(basePackages = \"com.github.pires.example.repository\", repositoryFactoryBeanClass = OrientObjectRepositoryFactoryBean.class) public class OrientDbConfiguration { @Autowired private OrientObjectDatabaseFactory factory; @PostConstruct @Transactional public void registerEntities() { factory.db().getEntityManager().registerEntityClasses(\"com.github.pires.example.model\"); } }"},{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/ShiroConfiguration.java","file_content":"package com.github.pires.example; import com.github.pires.example.shiro.HazelcastSessionDao; import com.github.pires.example.shiro.OrientDbRealm; import org.apache.shiro.authc.credential.DefaultPasswordService; import org.apache.shiro.authc.credential.PasswordMatcher; import org.apache.shiro.session.mgt.eis.SessionDAO; import org.apache.shiro.spring.LifecycleBeanPostProcessor; import org.apache.shiro.spring.web.ShiroFilterFactoryBean; import org.apache.shiro.web.mgt.DefaultWebSecurityManager; import org.apache.shiro.web.session.mgt.DefaultWebSessionManager; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.DependsOn; @Configuration public class ShiroConfiguration { @Bean public ShiroFilterFactoryBean shiroFilter() { ShiroFilterFactoryBean factoryBean = new ShiroFilterFactoryBean(); factoryBean.setSecurityManager(securityManager()); return factoryBean; } @Bean(name = \"securityManager\") public DefaultWebSecurityManager securityManager() { final DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager(); securityManager.setRealm(realm()); securityManager.setSessionManager(sessionManager()); return securityManager; } @Bean public DefaultWebSessionManager sessionManager() { final DefaultWebSessionManager sessionManager = new DefaultWebSessionManager(); sessionManager.setSessionDAO(sessionDao()); sessionManager.setGlobalSessionTimeout(43200000); return sessionManager; } @Bean public SessionDAO sessionDao() { return new HazelcastSessionDao(); } @Bean(name = \"realm\") @DependsOn(\"lifecycleBeanPostProcessor\") public OrientDbRealm realm() { final OrientDbRealm realm = new OrientDbRealm(); realm.setCredentialsMatcher(credentialsMatcher()); return realm; } @Bean(name = \"credentialsMatcher\") public PasswordMatcher credentialsMatcher() { final PasswordMatcher credentialsMatcher = new PasswordMatcher(); credentialsMatcher.setPasswordService(passwordService()); return credentialsMatcher; } @Bean(name = \"passwordService\") public DefaultPasswordService passwordService() { return new DefaultPasswordService(); } @Bean public LifecycleBeanPostProcessor lifecycleBeanPostProcessor() { return new LifecycleBeanPostProcessor(); } }"},{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/model/Permission.java","file_content":"package com.github.pires.example.model; import com.fasterxml.jackson.annotation.JsonIgnore; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import javax.persistence.Id; import javax.persistence.Version; @JsonIgnoreProperties(value = {\"handler\"}) public class Permission { @Id private String id; @Version @JsonIgnore private Long version; private String name; private String description; public String getId() { return id; } public void setId(String id) { this.id = id; } public Long getVersion() { return version; } public void setVersion(Long version) { this.version = version; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } }"},{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/model/Role.java","file_content":"package com.github.pires.example.model; import com.fasterxml.jackson.annotation.JsonIgnore; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import java.util.ArrayList; import java.util.List; import javax.persistence.Id; import javax.persistence.ManyToMany; import javax.persistence.Version; @JsonIgnoreProperties(value = {\"handler\"}) public class Role { @Id private String id; @Version @JsonIgnore private Long version; private String name; private String description; @ManyToMany private List<Permission> permissions; public String getId() { return id; } public void setId(String id) { this.id = id; } public Long getVersion() { return version; } public void setVersion(Long version) { this.version = version; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } public List<Permission> getPermissions() { if (permissions == null) this.permissions = new ArrayList<>(); return permissions; } public void setPermissions(List<Permission> permissions) { this.permissions = permissions; } }"},{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/model/User.java","file_content":"package com.github.pires.example.model; import com.fasterxml.jackson.annotation.JsonIgnore; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import java.util.ArrayList; import java.util.List; import javax.persistence.Id; import javax.persistence.OneToMany; import javax.persistence.Version; @JsonIgnoreProperties(value = {\"handler\"}) public class User { @Id private String id; @Version @JsonIgnore private Long version; private Long created; private String email; private String name; private Boolean active; private String password; @OneToMany private List<Role> roles; public String getId() { return id; } public void setId(String id) { this.id = id; } public Long getVersion() { return version; } public void setVersion(Long version) { this.version = version; } public Long getCreated() { return created; } public void setCreated(Long created) { this.created = created; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getName() { return name; } public void setName(String name) { this.name = name; } public Boolean getActive() { return active; } public void setActive(Boolean active) { this.active = active; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public List<Role> getRoles() { if (roles == null) { this.roles = new ArrayList<>(); } return roles; } public void setRoles(List<Role> roles) { this.roles = roles; } }"},{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/repository/PermissionRepository.java","file_content":"package com.github.pires.example.repository; import com.github.pires.example.model.Permission; import org.springframework.data.orient.object.repository.OrientObjectRepository; public interface PermissionRepository extends OrientObjectRepository<Permission> { }"},{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/repository/RoleRepository.java","file_content":"package com.github.pires.example.repository; import com.github.pires.example.model.Role; import org.springframework.data.orient.object.repository.OrientObjectRepository; public interface RoleRepository extends OrientObjectRepository<Role> { }"},{"file_path":"spring-boot-shiro-orientdb-master/spring-boot-shiro-orientdb-master/src/main/java/com/github/pires/example/repository/UserRepository.java","file_content":"package com.github.pires.example.repository; import com.github.pires.example.model.User; import org.springframework.data.orient.object.repository.OrientObjectRepository; public interface UserRepository extends OrientObjectRepository<User> { User findByEmail(String email); User findByEmailAndActive(String email, boolean active); }"}]}}
{"project_id":194,"chunk_id":0,"content":{"main_file_path":"rv-adapter-endless-master/rv-adapter-endless-master/library/src/main/java/com/rockerhieu/rvadapter/endless/EndlessRecyclerViewAdapter.java","main_file_content":"package com.rockerhieu.rvadapter.endless; import android.support.annotation.LayoutRes; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import com.rockerhieu.rvadapter.RecyclerViewAdapterWrapper; import java.util.concurrent.atomic.AtomicBoolean; import static android.support.v7.widget.RecyclerView.Adapter; import static android.support.v7.widget.RecyclerView.ViewHolder; public class EndlessRecyclerViewAdapter extends RecyclerViewAdapterWrapper { public static final int TYPE_PENDING = 999; private final AtomicBoolean keepOnAppending; private final AtomicBoolean dataPending; private final RequestToLoadMoreListener requestToLoadMoreListener; private boolean shouldNotifyAdapter = false; private ViewHolder pendingViewHolder; private int pendingViewId = R.layout.item_loading; public EndlessRecyclerViewAdapter(Adapter wrapped, RequestToLoadMoreListener requestToLoadMoreListener) { this(wrapped, requestToLoadMoreListener, true); } public EndlessRecyclerViewAdapter(Adapter wrapped, RequestToLoadMoreListener requestToLoadMoreListener, boolean keepOnAppending) { super(wrapped); this.requestToLoadMoreListener = requestToLoadMoreListener; this.keepOnAppending = new AtomicBoolean(keepOnAppending); dataPending = new AtomicBoolean(false); } public void setPendingViewId(@LayoutRes int layoutId) { if (pendingViewHolder != null) { throw new IllegalStateException(\"Cannot change pendingViewId once ViewHolder is created.\"); } pendingViewId = layoutId; } public void setPendingViewHolder(ViewHolder holder) { if (pendingViewHolder != null) { throw new IllegalStateException(\"Cannot change pendingViewHolder once it is created.\"); } pendingViewHolder = holder; } public void notifyAutomatically(boolean enable) { shouldNotifyAdapter = enable; } public void onDataReady(boolean keepOnAppending) { dataPending.set(false); setKeepOnAppending(keepOnAppending); } public void restartAppending() { dataPending.set(false); setKeepOnAppending(true); } private void setKeepOnAppending(boolean newValue) { keepOnAppending.set(newValue); if (shouldNotifyAdapter) { getWrappedAdapter().notifyDataSetChanged(); } else { notifyItemChanged(getWrappedAdapter().getItemCount()); } } private ViewHolder getPendingViewHolder(ViewGroup parent) { if (pendingViewHolder == null) { pendingViewHolder = new PendingViewHolder(LayoutInflater.from(parent.getContext()) .inflate(pendingViewId, parent, false)); } return pendingViewHolder; } @Override public int getItemCount() { return super.getItemCount() + (keepOnAppending.get() ? 1 : 0); } @Override public int getItemViewType(int position) { if (position == getWrappedAdapter().getItemCount()) { return TYPE_PENDING; } return super.getItemViewType(position); } @Override public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) { if (viewType == TYPE_PENDING) { return getPendingViewHolder(parent); } return super.onCreateViewHolder(parent, viewType); } @Override public void onBindViewHolder(ViewHolder holder, int position) { if (getItemViewType(position) == TYPE_PENDING) { if (!dataPending.get()) { dataPending.set(true); requestToLoadMoreListener.onLoadMoreRequested(); } } else { super.onBindViewHolder(holder, position); } } public interface RequestToLoadMoreListener { void onLoadMoreRequested(); } static class PendingViewHolder extends ViewHolder { public PendingViewHolder(View itemView) { super(itemView); } } }","dependencies":[]}}
{"project_id":194,"chunk_id":0,"content":{"main_file_path":"rv-adapter-endless-master/rv-adapter-endless-master/library/src/androidTest/java/com/rockerhieu/rvadapter/library/ApplicationTest.java","main_file_content":"package com.rockerhieu.rvadapter.library; import android.app.Application; import android.test.ApplicationTestCase; public class ApplicationTest extends ApplicationTestCase<Application> { public ApplicationTest() { super(Application.class); } }","dependencies":[]}}
{"project_id":194,"chunk_id":0,"content":{"main_file_path":"rv-adapter-endless-master/rv-adapter-endless-master/example/src/main/java/com/rockerhieu/rvadapter/endless/example/MainActivity.java","main_file_content":"package com.rockerhieu.rvadapter.endless.example; import android.app.Activity; import android.os.AsyncTask; import android.os.Bundle; import android.support.v7.widget.LinearLayoutManager; import android.support.v7.widget.RecyclerView; import android.view.View; import com.rockerhieu.rvadapter.endless.EndlessRecyclerViewAdapter; import com.rockerhieu.rvadapter.endless.example.adapter.SimpleStringAdapter; import com.rockerhieu.rvadapter.endless.example.decorator.DividerItemDecoration; import java.util.Arrays; import java.util.List; import java.util.Random; public class MainActivity extends Activity implements EndlessRecyclerViewAdapter.RequestToLoadMoreListener { private EndlessRecyclerViewAdapter endlessRecyclerViewAdapter; private SimpleStringAdapter adapter; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); final RecyclerView rv = (RecyclerView) findViewById(R.id.recycler_view); rv.setLayoutManager(new LinearLayoutManager(this)); rv.setHasFixedSize(true); adapter = new SimpleStringAdapter(null); endlessRecyclerViewAdapter = new EndlessRecyclerViewAdapter(adapter, this); endlessRecyclerViewAdapter.setPendingViewId(R.layout.custom_pending_view); rv.setAdapter(endlessRecyclerViewAdapter); rv.addItemDecoration(new DividerItemDecoration(this, DividerItemDecoration.VERTICAL_LIST)); } @Override public void onLoadMoreRequested() { new AsyncTask<Void, Void, List>() { @Override protected List doInBackground(Void... params) { try { Thread.sleep(2000); } catch (InterruptedException e) { e.printStackTrace(); } return Arrays.asList( randomCheese(), randomCheese(), randomCheese(), randomCheese(), randomCheese(), randomCheese(), randomCheese(), randomCheese(), randomCheese(), randomCheese()); } @Override protected void onPostExecute(List list) { adapter.appendItems(list); if (adapter.getItemCount() >= 50) { endlessRecyclerViewAdapter.onDataReady(false); } else { endlessRecyclerViewAdapter.onDataReady(true); } } }.execute(); } public void onResetClicked(View view) { adapter.clear(); endlessRecyclerViewAdapter.restartAppending(); } static Random random = new Random(); static String randomCheese() { return Cheeses.sCheeseStrings[random.nextInt(Cheeses.sCheeseStrings.length)]; } }","dependencies":[{"file_path":"rv-adapter-endless-master/example/src/main/java/com/rockerhieu/rvadapter/endless/example/adapter/SimpleStringAdapter.java","file_content":"package com.rockerhieu.rvadapter.endless.example.adapter; import android.support.v7.widget.RecyclerView; import android.view.ViewGroup; import android.widget.TextView; import java.util.ArrayList; import java.util.Collections; import java.util.List; public class SimpleStringAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> { private ArrayList<String> mValues; public static class ItemViewHolder extends RecyclerView.ViewHolder { public String mBoundString; public TextView mTextView; public ItemViewHolder(TextView v) { super(v); mTextView = v; } @Override public String toString() { return super.toString() + \" '\" + mTextView.getText(); } } public SimpleStringAdapter(String[] strings) { mValues = new ArrayList<>(); if (strings != null) { Collections.addAll(mValues, strings); } } @Override public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) { return new ItemViewHolder(new TextView(parent.getContext())); } @Override public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) { if (holder instanceof ItemViewHolder) { ItemViewHolder itemViewHolder = (ItemViewHolder) holder; itemViewHolder.mBoundString = mValues.get(position); itemViewHolder.mTextView.setText(position + \":\" + mValues.get(position)); itemViewHolder.mTextView.setMinHeight((50 + mValues.get(position).length() * 10)); } } @Override public int getItemCount() { return mValues.size(); } public void appendItems(List<String> items) { mValues.addAll(items); notifyItemRangeInserted(getItemCount(), items.size()); } public void clear() { mValues.clear(); notifyDataSetChanged(); } }"},{"file_path":"rv-adapter-endless-master/example/src/main/java/com/rockerhieu/rvadapter/endless/example/decorator/DividerItemDecoration.java","file_content":"package com.rockerhieu.rvadapter.endless.example.decorator; import android.content.Context; import android.content.res.TypedArray; import android.graphics.Canvas; import android.graphics.Rect; import android.graphics.drawable.Drawable; import android.support.v4.view.ViewCompat; import android.support.v7.widget.LinearLayoutManager; import android.support.v7.widget.RecyclerView; import android.view.View; public class DividerItemDecoration extends RecyclerView.ItemDecoration { private static final int[] ATTRS = new int[]{ android.R.attr.listDivider }; public static final int HORIZONTAL_LIST = LinearLayoutManager.HORIZONTAL; public static final int VERTICAL_LIST = LinearLayoutManager.VERTICAL; private Drawable mDivider; private int mOrientation; public DividerItemDecoration(Context context, int orientation) { final TypedArray a = context.obtainStyledAttributes(ATTRS); mDivider = a.getDrawable(0); a.recycle(); setOrientation(orientation); } public void setOrientation(int orientation) { if (orientation != HORIZONTAL_LIST && orientation != VERTICAL_LIST) { throw new IllegalArgumentException(\"invalid orientation\"); } mOrientation = orientation; } @Override public void onDraw(Canvas c, RecyclerView parent) { if (mOrientation == VERTICAL_LIST) { drawVertical(c, parent); } else { drawHorizontal(c, parent); } } public void drawVertical(Canvas c, RecyclerView parent) { final int left = parent.getPaddingLeft(); final int right = parent.getWidth() - parent.getPaddingRight(); final int childCount = parent.getChildCount(); for (int i = 0; i < childCount; i++) { final View child = parent.getChildAt(i); final RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child .getLayoutParams(); final int top = child.getBottom() + params.bottomMargin + Math.round(ViewCompat.getTranslationY(child)); final int bottom = top + mDivider.getIntrinsicHeight(); mDivider.setBounds(left, top, right, bottom); mDivider.draw(c); } } public void drawHorizontal(Canvas c, RecyclerView parent) { final int top = parent.getPaddingTop(); final int bottom = parent.getHeight() - parent.getPaddingBottom(); final int childCount = parent.getChildCount(); for (int i = 0; i < childCount; i++) { final View child = parent.getChildAt(i); final RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child .getLayoutParams(); final int left = child.getRight() + params.rightMargin + Math.round(ViewCompat.getTranslationX(child)); final int right = left + mDivider.getIntrinsicHeight(); mDivider.setBounds(left, top, right, bottom); mDivider.draw(c); } } @Override public void getItemOffsets(Rect outRect, int itemPosition, RecyclerView parent) { if (mOrientation == VERTICAL_LIST) { outRect.set(0, 0, 0, mDivider.getIntrinsicHeight()); } else { outRect.set(0, 0, mDivider.getIntrinsicWidth(), 0); } } }"},{"file_path":"rv-adapter-endless-master/library/src/main/java/com/rockerhieu/rvadapter/endless/EndlessRecyclerViewAdapter.java","file_content":"package com.rockerhieu.rvadapter.endless; import android.support.annotation.LayoutRes; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import com.rockerhieu.rvadapter.RecyclerViewAdapterWrapper; import java.util.concurrent.atomic.AtomicBoolean; import static android.support.v7.widget.RecyclerView.Adapter; import static android.support.v7.widget.RecyclerView.ViewHolder; public class EndlessRecyclerViewAdapter extends RecyclerViewAdapterWrapper { public static final int TYPE_PENDING = 999; private final AtomicBoolean keepOnAppending; private final AtomicBoolean dataPending; private final RequestToLoadMoreListener requestToLoadMoreListener; private boolean shouldNotifyAdapter = false; private ViewHolder pendingViewHolder; private int pendingViewId = R.layout.item_loading; public EndlessRecyclerViewAdapter(Adapter wrapped, RequestToLoadMoreListener requestToLoadMoreListener) { this(wrapped, requestToLoadMoreListener, true); } public EndlessRecyclerViewAdapter(Adapter wrapped, RequestToLoadMoreListener requestToLoadMoreListener, boolean keepOnAppending) { super(wrapped); this.requestToLoadMoreListener = requestToLoadMoreListener; this.keepOnAppending = new AtomicBoolean(keepOnAppending); dataPending = new AtomicBoolean(false); } public void setPendingViewId(@LayoutRes int layoutId) { if (pendingViewHolder != null) { throw new IllegalStateException(\"Cannot change pendingViewId once ViewHolder is created.\"); } pendingViewId = layoutId; } public void setPendingViewHolder(ViewHolder holder) { if (pendingViewHolder != null) { throw new IllegalStateException(\"Cannot change pendingViewHolder once it is created.\"); } pendingViewHolder = holder; } public void notifyAutomatically(boolean enable) { shouldNotifyAdapter = enable; } public void onDataReady(boolean keepOnAppending) { dataPending.set(false); setKeepOnAppending(keepOnAppending); } public void restartAppending() { dataPending.set(false); setKeepOnAppending(true); } private void setKeepOnAppending(boolean newValue) { keepOnAppending.set(newValue); if (shouldNotifyAdapter) { getWrappedAdapter().notifyDataSetChanged(); } else { notifyItemChanged(getWrappedAdapter().getItemCount()); } } private ViewHolder getPendingViewHolder(ViewGroup parent) { if (pendingViewHolder == null) { pendingViewHolder = new PendingViewHolder(LayoutInflater.from(parent.getContext()) .inflate(pendingViewId, parent, false)); } return pendingViewHolder; } @Override public int getItemCount() { return super.getItemCount() + (keepOnAppending.get() ? 1 : 0); } @Override public int getItemViewType(int position) { if (position == getWrappedAdapter().getItemCount()) { return TYPE_PENDING; } return super.getItemViewType(position); } @Override public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) { if (viewType == TYPE_PENDING) { return getPendingViewHolder(parent); } return super.onCreateViewHolder(parent, viewType); } @Override public void onBindViewHolder(ViewHolder holder, int position) { if (getItemViewType(position) == TYPE_PENDING) { if (!dataPending.get()) { dataPending.set(true); requestToLoadMoreListener.onLoadMoreRequested(); } } else { super.onBindViewHolder(holder, position); } } public interface RequestToLoadMoreListener { void onLoadMoreRequested(); } static class PendingViewHolder extends ViewHolder { public PendingViewHolder(View itemView) { super(itemView); } } }"}]}}
{"project_id":194,"chunk_id":0,"content":{"main_file_path":"rv-adapter-endless-master/rv-adapter-endless-master/example/src/main/java/com/rockerhieu/rvadapter/endless/example/Cheeses.java","main_file_content":"package com.rockerhieu.rvadapter.endless.example; public class Cheeses { public static final String[] sCheeseStrings = { \"Abbaye de Belloc\", \"Abbaye du Mont des Cats\", \"Abertam\", \"Abondance\", \"Ackawi\", \"Acorn\", \"Adelost\", \"Affidelice au Chablis\", \"Afuega'l Pitu\", \"Airag\", \"Airedale\", \"Aisy Cendre\", \"Allgauer Emmentaler\", \"Alverca\", \"Ambert\", \"American Cheese\", \"Ami du Chambertin\", \"Anejo Enchilado\", \"Anneau du Vic-Bilh\", \"Anthoriro\", \"Appenzell\", \"Aragon\", \"Ardi Gasna\", \"Ardrahan\", \"Armenian String\", \"Aromes au Gene de Marc\", \"Asadero\", \"Asiago\", \"Aubisque Pyrenees\", \"Autun\", \"Avaxtskyr\", \"Baby Swiss\", \"Babybel\", \"Baguette Laonnaise\", \"Bakers\", \"Baladi\", \"Balaton\", \"Bandal\", \"Banon\", \"Barry's Bay Cheddar\", \"Basing\", \"Basket Cheese\", \"Bath Cheese\", \"Bavarian Bergkase\", \"Baylough\", \"Beaufort\", \"Beauvoorde\", \"Beenleigh Blue\", \"Beer Cheese\", \"Bel Paese\", \"Bergader\", \"Bergere Bleue\", \"Berkswell\", \"Beyaz Peynir\", \"Bierkase\", \"Bishop Kennedy\", \"Blarney\", \"Bleu d'Auvergne\", \"Bleu de Gex\", \"Bleu de Laqueuille\", \"Bleu de Septmoncel\", \"Bleu Des Causses\", \"Blue\", \"Blue Castello\", \"Blue Rathgore\", \"Blue Vein (Australian)\", \"Blue Vein Cheeses\", \"Bocconcini\", \"Bocconcini (Australian)\", \"Boeren Leidenkaas\", \"Bonchester\", \"Bosworth\", \"Bougon\", \"Boule Du Roves\", \"Boulette d'Avesnes\", \"Boursault\", \"Boursin\", \"Bouyssou\", \"Bra\", \"Braudostur\", \"Breakfast Cheese\", \"Brebis du Lavort\", \"Brebis du Lochois\", \"Brebis du Puyfaucon\", \"Bresse Bleu\", \"Brick\", \"Brie\", \"Brie de Meaux\", \"Brie de Melun\", \"Brillat-Savarin\", \"Brin\", \"Brin d' Amour\", \"Brin d'Amour\", \"Brinza (Burduf Brinza)\", \"Briquette de Brebis\", \"Briquette du Forez\", \"Broccio\", \"Broccio Demi-Affine\", \"Brousse du Rove\", \"Bruder Basil\", \"Brusselae Kaas (Fromage de Bruxelles)\", \"Bryndza\", \"Buchette d'Anjou\", \"Buffalo\", \"Burgos\", \"Butte\", \"Butterkase\", \"Button (Innes)\", \"Buxton Blue\", \"Cabecou\", \"Caboc\", \"Cabrales\", \"Cachaille\", \"Caciocavallo\", \"Caciotta\", \"Caerphilly\", \"Cairnsmore\", \"Calenzana\", \"Cambazola\", \"Camembert de Normandie\", \"Canadian Cheddar\", \"Canestrato\", \"Cantal\", \"Caprice des Dieux\", \"Capricorn Goat\", \"Capriole Banon\", \"Carre de l'Est\", \"Casciotta di Urbino\", \"Cashel Blue\", \"Castellano\", \"Castelleno\", \"Castelmagno\", \"Castelo Branco\", \"Castigliano\", \"Cathelain\", \"Celtic Promise\", \"Cendre d'Olivet\", \"Cerney\", \"Chabichou\", \"Chabichou du Poitou\", \"Chabis de Gatine\", \"Chaource\", \"Charolais\", \"Chaumes\", \"Cheddar\", \"Cheddar Clothbound\", \"Cheshire\", \"Chevres\", \"Chevrotin des Aravis\", \"Chontaleno\", \"Civray\", \"Coeur de Camembert au Calvados\", \"Coeur de Chevre\", \"Colby\", \"Cold Pack\", \"Comte\", \"Coolea\", \"Cooleney\", \"Coquetdale\", \"Corleggy\", \"Cornish Pepper\", \"Cotherstone\", \"Cotija\", \"Cottage Cheese\", \"Cottage Cheese (Australian)\", \"Cougar Gold\", \"Coulommiers\", \"Coverdale\", \"Crayeux de Roncq\", \"Cream Cheese\", \"Cream Havarti\", \"Crema Agria\", \"Crema Mexicana\", \"Creme Fraiche\", \"Crescenza\", \"Croghan\", \"Crottin de Chavignol\", \"Crottin du Chavignol\", \"Crowdie\", \"Crowley\", \"Cuajada\", \"Curd\", \"Cure Nantais\", \"Curworthy\", \"Cwmtawe Pecorino\", \"Cypress Grove Chevre\", \"Danablu (Danish Blue)\", \"Danbo\", \"Danish Fontina\", \"Daralagjazsky\", \"Dauphin\", \"Delice des Fiouves\", \"Denhany Dorset Drum\", \"Derby\", \"Dessertnyj Belyj\", \"Devon Blue\", \"Devon Garland\", \"Dolcelatte\", \"Doolin\", \"Doppelrhamstufel\", \"Dorset Blue Vinney\", \"Double Gloucester\", \"Double Worcester\", \"Dreux a la Feuille\", \"Dry Jack\", \"Duddleswell\", \"Dunbarra\", \"Dunlop\", \"Dunsyre Blue\", \"Duroblando\", \"Durrus\", \"Dutch Mimolette (Commissiekaas)\", \"Edam\", \"Edelpilz\", \"Emental Grand Cru\", \"Emlett\", \"Emmental\", \"Epoisses de Bourgogne\", \"Esbareich\", \"Esrom\", \"Etorki\", \"Evansdale Farmhouse Brie\", \"Evora De L'Alentejo\", \"Exmoor Blue\", \"Explorateur\", \"Feta\", \"Feta (Australian)\", \"Figue\", \"Filetta\", \"Fin-de-Siecle\", \"Finlandia Swiss\", \"Finn\", \"Fiore Sardo\", \"Fleur du Maquis\", \"Flor de Guia\", \"Flower Marie\", \"Folded\", \"Folded cheese with mint\", \"Fondant de Brebis\", \"Fontainebleau\", \"Fontal\", \"Fontina Val d'Aosta\", \"Formaggio di capra\", \"Fougerus\", \"Four Herb Gouda\", \"Fourme d' Ambert\", \"Fourme de Haute Loire\", \"Fourme de Montbrison\", \"Fresh Jack\", \"Fresh Mozzarella\", \"Fresh Ricotta\", \"Fresh Truffles\", \"Fribourgeois\", \"Friesekaas\", \"Friesian\", \"Friesla\", \"Frinault\", \"Fromage a Raclette\", \"Fromage Corse\", \"Fromage de Montagne de Savoie\", \"Fromage Frais\", \"Fruit Cream Cheese\", \"Frying Cheese\", \"Fynbo\", \"Gabriel\", \"Galette du Paludier\", \"Galette Lyonnaise\", \"Galloway Goat's Milk Gems\", \"Gammelost\", \"Gaperon a l'Ail\", \"Garrotxa\", \"Gastanberra\", \"Geitost\", \"Gippsland Blue\", \"Gjetost\", \"Gloucester\", \"Golden Cross\", \"Gorgonzola\", \"Gornyaltajski\", \"Gospel Green\", \"Gouda\", \"Goutu\", \"Gowrie\", \"Grabetto\", \"Graddost\", \"Grafton Village Cheddar\", \"Grana\", \"Grana Padano\", \"Grand Vatel\", \"Grataron d' Areches\", \"Gratte-Paille\", \"Graviera\", \"Greuilh\", \"Greve\", \"Gris de Lille\", \"Gruyere\", \"Gubbeen\", \"Guerbigny\", \"Halloumi\", \"Halloumy (Australian)\", \"Haloumi-Style Cheese\", \"Harbourne Blue\", \"Havarti\", \"Heidi Gruyere\", \"Hereford Hop\", \"Herrgardsost\", \"Herriot Farmhouse\", \"Herve\", \"Hipi Iti\", \"Hubbardston Blue Cow\", \"Hushallsost\", \"Iberico\", \"Idaho Goatster\", \"Idiazabal\", \"Il Boschetto al Tartufo\", \"Ile d'Yeu\", \"Isle of Mull\", \"Jarlsberg\", \"Jermi Tortes\", \"Jibneh Arabieh\", \"Jindi Brie\", \"Jubilee Blue\", \"Juustoleipa\", \"Kadchgall\", \"Kaseri\", \"Kashta\", \"Kefalotyri\", \"Kenafa\", \"Kernhem\", \"Kervella Affine\", \"Kikorangi\", \"King Island Cape Wickham Brie\", \"King River Gold\", \"Klosterkaese\", \"Knockalara\", \"Kugelkase\", \"L'Aveyronnais\", \"L'Ecir de l'Aubrac\", \"La Taupiniere\", \"La Vache Qui Rit\", \"Laguiole\", \"Lairobell\", \"Lajta\", \"Lanark Blue\", \"Lancashire\", \"Langres\", \"Lappi\", \"Laruns\", \"Lavistown\", \"Le Brin\", \"Le Fium Orbo\", \"Le Lacandou\", \"Le Roule\", \"Leafield\", \"Lebbene\", \"Leerdammer\", \"Leicester\", \"Leyden\", \"Limburger\", \"Lincolnshire Poacher\", \"Lingot Saint Bousquet d'Orb\", \"Liptauer\", \"Little Rydings\", \"Livarot\", \"Llanboidy\", \"Llanglofan Farmhouse\", \"Loch Arthur Farmhouse\", \"Loddiswell Avondale\", \"Longhorn\", \"Lou Palou\", \"Lou Pevre\", \"Lyonnais\", \"Maasdam\", \"Macconais\", \"Mahoe Aged Gouda\", \"Mahon\", \"Malvern\", \"Mamirolle\", \"Manchego\", \"Manouri\", \"Manur\", \"Marble Cheddar\", \"Marbled Cheeses\", \"Maredsous\", \"Margotin\", \"Maribo\", \"Maroilles\", \"Mascares\", \"Mascarpone\", \"Mascarpone (Australian)\", \"Mascarpone Torta\", \"Matocq\", \"Maytag Blue\", \"Meira\", \"Menallack Farmhouse\", \"Menonita\", \"Meredith Blue\", \"Mesost\", \"Metton (Cancoillotte)\", \"Meyer Vintage Gouda\", \"Mihalic Peynir\", \"Milleens\", \"Mimolette\", \"Mine-Gabhar\", \"Mini Baby Bells\", \"Mixte\", \"Molbo\", \"Monastery Cheeses\", \"Mondseer\", \"Mont D'or Lyonnais\", \"Montasio\", \"Monterey Jack\", \"Monterey Jack Dry\", \"Morbier\", \"Morbier Cru de Montagne\", \"Mothais a la Feuille\", \"Mozzarella\", \"Mozzarella (Australian)\", \"Mozzarella di Bufala\", \"Mozzarella Fresh, in water\", \"Mozzarella Rolls\", \"Munster\", \"Murol\", \"Mycella\", \"Myzithra\", \"Naboulsi\", \"Nantais\", \"Neufchatel\", \"Neufchatel (Australian)\", \"Niolo\", \"Nokkelost\", \"Northumberland\", \"Oaxaca\", \"Olde York\", \"Olivet au Foin\", \"Olivet Bleu\", \"Olivet Cendre\", \"Orkney Extra Mature Cheddar\", \"Orla\", \"Oschtjepka\", \"Ossau Fermier\", \"Ossau-Iraty\", \"Oszczypek\", \"Oxford Blue\", \"P'tit Berrichon\", \"Palet de Babligny\", \"Paneer\", \"Panela\", \"Pannerone\", \"Pant ys Gawn\", \"Parmesan (Parmigiano)\", \"Parmigiano Reggiano\", \"Pas de l'Escalette\", \"Passendale\", \"Pasteurized Processed\", \"Pate de Fromage\", \"Patefine Fort\", \"Pave d'Affinois\", \"Pave d'Auge\", \"Pave de Chirac\", \"Pave du Berry\", \"Pecorino\", \"Pecorino in Walnut Leaves\", \"Pecorino Romano\", \"Peekskill Pyramid\", \"Pelardon des Cevennes\", \"Pelardon des Corbieres\", \"Penamellera\", \"Penbryn\", \"Pencarreg\", \"Perail de Brebis\", \"Petit Morin\", \"Petit Pardou\", \"Petit-Suisse\", \"Picodon de Chevre\", \"Picos de Europa\", \"Piora\", \"Pithtviers au Foin\", \"Plateau de Herve\", \"Plymouth Cheese\", \"Podhalanski\", \"Poivre d'Ane\", \"Polkolbin\", \"Pont l'Eveque\", \"Port Nicholson\", \"Port-Salut\", \"Postel\", \"Pouligny-Saint-Pierre\", \"Pourly\", \"Prastost\", \"Pressato\", \"Prince-Jean\", \"Processed Cheddar\", \"Provolone\", \"Provolone (Australian)\", \"Pyengana Cheddar\", \"Pyramide\", \"Quark\", \"Quark (Australian)\", \"Quartirolo Lombardo\", \"Quatre-Vents\", \"Quercy Petit\", \"Queso Blanco\", \"Queso Blanco con Frutas --Pina y Mango\", \"Queso de Murcia\", \"Queso del Montsec\", \"Queso del Tietar\", \"Queso Fresco\", \"Queso Fresco (Adobera)\", \"Queso Iberico\", \"Queso Jalapeno\", \"Queso Majorero\", \"Queso Media Luna\", \"Queso Para Frier\", \"Queso Quesadilla\", \"Rabacal\", \"Raclette\", \"Ragusano\", \"Raschera\", \"Reblochon\", \"Red Leicester\", \"Regal de la Dombes\", \"Reggianito\", \"Remedou\", \"Requeson\", \"Richelieu\", \"Ricotta\", \"Ricotta (Australian)\", \"Ricotta Salata\", \"Ridder\", \"Rigotte\", \"Rocamadour\", \"Rollot\", \"Romano\", \"Romans Part Dieu\", \"Roncal\", \"Roquefort\", \"Roule\", \"Rouleau De Beaulieu\", \"Royalp Tilsit\", \"Rubens\", \"Rustinu\", \"Saaland Pfarr\", \"Saanenkaese\", \"Saga\", \"Sage Derby\", \"Sainte Maure\", \"Saint-Marcellin\", \"Saint-Nectaire\", \"Saint-Paulin\", \"Salers\", \"Samso\", \"San Simon\", \"Sancerre\", \"Sap Sago\", \"Sardo\", \"Sardo Egyptian\", \"Sbrinz\", \"Scamorza\", \"Schabzieger\", \"Schloss\", \"Selles sur Cher\", \"Selva\", \"Serat\", \"Seriously Strong Cheddar\", \"Serra da Estrela\", \"Sharpam\", \"Shelburne Cheddar\", \"Shropshire Blue\", \"Siraz\", \"Sirene\", \"Smoked Gouda\", \"Somerset Brie\", \"Sonoma Jack\", \"Sottocenare al Tartufo\", \"Soumaintrain\", \"Sourire Lozerien\", \"Spenwood\", \"Sraffordshire Organic\", \"St. Agur Blue Cheese\", \"Stilton\", \"Stinking Bishop\", \"String\", \"Sussex Slipcote\", \"Sveciaost\", \"Swaledale\", \"Sweet Style Swiss\", \"Swiss\", \"Syrian (Armenian String)\", \"Tala\", \"Taleggio\", \"Tamie\", \"Tasmania Highland Chevre Log\", \"Taupiniere\", \"Teifi\", \"Telemea\", \"Testouri\", \"Tete de Moine\", \"Tetilla\", \"Texas Goat Cheese\", \"Tibet\", \"Tillamook Cheddar\", \"Tilsit\", \"Timboon Brie\", \"Toma\", \"Tomme Brulee\", \"Tomme d'Abondance\", \"Tomme de Chevre\", \"Tomme de Romans\", \"Tomme de Savoie\", \"Tomme des Chouans\", \"Tommes\", \"Torta del Casar\", \"Toscanello\", \"Touree de L'Aubier\", \"Tourmalet\", \"Trappe (Veritable)\", \"Trois Cornes De Vendee\", \"Tronchon\", \"Trou du Cru\", \"Truffe\", \"Tupi\", \"Turunmaa\", \"Tymsboro\", \"Tyn Grug\", \"Tyning\", \"Ubriaco\", \"Ulloa\", \"Vacherin-Fribourgeois\", \"Valencay\", \"Vasterbottenost\", \"Venaco\", \"Vendomois\", \"Vieux Corse\", \"Vignotte\", \"Vulscombe\", \"Waimata Farmhouse Blue\", \"Washed Rind Cheese (Australian)\", \"Waterloo\", \"Weichkaese\", \"Wellington\", \"Wensleydale\", \"White Stilton\", \"Whitestone Farmhouse\", \"Wigmore\", \"Woodside Cabecou\", \"Xanadu\", \"Xynotyro\", \"Yarg Cornish\", \"Yarra Valley Pyramid\", \"Yorkshire Blue\", \"Zamorano\", \"Zanetti Grana Padano\", \"Zanetti Parmigiano Reggiano\" }; }","dependencies":[]}}
{"project_id":194,"chunk_id":0,"content":{"main_file_path":"rv-adapter-endless-master/rv-adapter-endless-master/example/src/main/java/com/rockerhieu/rvadapter/endless/example/decorator/DividerItemDecoration.java","main_file_content":"package com.rockerhieu.rvadapter.endless.example.decorator; import android.content.Context; import android.content.res.TypedArray; import android.graphics.Canvas; import android.graphics.Rect; import android.graphics.drawable.Drawable; import android.support.v4.view.ViewCompat; import android.support.v7.widget.LinearLayoutManager; import android.support.v7.widget.RecyclerView; import android.view.View; public class DividerItemDecoration extends RecyclerView.ItemDecoration { private static final int[] ATTRS = new int[]{ android.R.attr.listDivider }; public static final int HORIZONTAL_LIST = LinearLayoutManager.HORIZONTAL; public static final int VERTICAL_LIST = LinearLayoutManager.VERTICAL; private Drawable mDivider; private int mOrientation; public DividerItemDecoration(Context context, int orientation) { final TypedArray a = context.obtainStyledAttributes(ATTRS); mDivider = a.getDrawable(0); a.recycle(); setOrientation(orientation); } public void setOrientation(int orientation) { if (orientation != HORIZONTAL_LIST && orientation != VERTICAL_LIST) { throw new IllegalArgumentException(\"invalid orientation\"); } mOrientation = orientation; } @Override public void onDraw(Canvas c, RecyclerView parent) { if (mOrientation == VERTICAL_LIST) { drawVertical(c, parent); } else { drawHorizontal(c, parent); } } public void drawVertical(Canvas c, RecyclerView parent) { final int left = parent.getPaddingLeft(); final int right = parent.getWidth() - parent.getPaddingRight(); final int childCount = parent.getChildCount(); for (int i = 0; i < childCount; i++) { final View child = parent.getChildAt(i); final RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child .getLayoutParams(); final int top = child.getBottom() + params.bottomMargin + Math.round(ViewCompat.getTranslationY(child)); final int bottom = top + mDivider.getIntrinsicHeight(); mDivider.setBounds(left, top, right, bottom); mDivider.draw(c); } } public void drawHorizontal(Canvas c, RecyclerView parent) { final int top = parent.getPaddingTop(); final int bottom = parent.getHeight() - parent.getPaddingBottom(); final int childCount = parent.getChildCount(); for (int i = 0; i < childCount; i++) { final View child = parent.getChildAt(i); final RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child .getLayoutParams(); final int left = child.getRight() + params.rightMargin + Math.round(ViewCompat.getTranslationX(child)); final int right = left + mDivider.getIntrinsicHeight(); mDivider.setBounds(left, top, right, bottom); mDivider.draw(c); } } @Override public void getItemOffsets(Rect outRect, int itemPosition, RecyclerView parent) { if (mOrientation == VERTICAL_LIST) { outRect.set(0, 0, 0, mDivider.getIntrinsicHeight()); } else { outRect.set(0, 0, mDivider.getIntrinsicWidth(), 0); } } }","dependencies":[]}}
{"project_id":194,"chunk_id":0,"content":{"main_file_path":"rv-adapter-endless-master/rv-adapter-endless-master/example/src/main/java/com/rockerhieu/rvadapter/endless/example/adapter/SimpleStringAdapter.java","main_file_content":"package com.rockerhieu.rvadapter.endless.example.adapter; import android.support.v7.widget.RecyclerView; import android.view.ViewGroup; import android.widget.TextView; import java.util.ArrayList; import java.util.Collections; import java.util.List; public class SimpleStringAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> { private ArrayList<String> mValues; public static class ItemViewHolder extends RecyclerView.ViewHolder { public String mBoundString; public TextView mTextView; public ItemViewHolder(TextView v) { super(v); mTextView = v; } @Override public String toString() { return super.toString() + \" '\" + mTextView.getText(); } } public SimpleStringAdapter(String[] strings) { mValues = new ArrayList<>(); if (strings != null) { Collections.addAll(mValues, strings); } } @Override public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) { return new ItemViewHolder(new TextView(parent.getContext())); } @Override public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) { if (holder instanceof ItemViewHolder) { ItemViewHolder itemViewHolder = (ItemViewHolder) holder; itemViewHolder.mBoundString = mValues.get(position); itemViewHolder.mTextView.setText(position + \":\" + mValues.get(position)); itemViewHolder.mTextView.setMinHeight((50 + mValues.get(position).length() * 10)); } } @Override public int getItemCount() { return mValues.size(); } public void appendItems(List<String> items) { mValues.addAll(items); notifyItemRangeInserted(getItemCount(), items.size()); } public void clear() { mValues.clear(); notifyDataSetChanged(); } }","dependencies":[]}}
{"project_id":194,"chunk_id":0,"content":{"main_file_path":"rv-adapter-endless-master/rv-adapter-endless-master/example/src/androidTest/java/com/rockerhieu/rvadapter/endless/example/ApplicationTest.java","main_file_content":"package com.rockerhieu.rvadapter.endless.example; import android.app.Application; import android.test.ApplicationTestCase; public class ApplicationTest extends ApplicationTestCase<Application> { public ApplicationTest() { super(Application.class); } }","dependencies":[]}}
{"project_id":194,"chunk_id":0,"content":{"main_file_path":"rv-adapter-endless-master/library/src/main/java/com/rockerhieu/rvadapter/endless/EndlessRecyclerViewAdapter.java","main_file_content":"package com.rockerhieu.rvadapter.endless; import android.support.annotation.LayoutRes; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import com.rockerhieu.rvadapter.RecyclerViewAdapterWrapper; import java.util.concurrent.atomic.AtomicBoolean; import static android.support.v7.widget.RecyclerView.Adapter; import static android.support.v7.widget.RecyclerView.ViewHolder; public class EndlessRecyclerViewAdapter extends RecyclerViewAdapterWrapper { public static final int TYPE_PENDING = 999; private final AtomicBoolean keepOnAppending; private final AtomicBoolean dataPending; private final RequestToLoadMoreListener requestToLoadMoreListener; private boolean shouldNotifyAdapter = false; private ViewHolder pendingViewHolder; private int pendingViewId = R.layout.item_loading; public EndlessRecyclerViewAdapter(Adapter wrapped, RequestToLoadMoreListener requestToLoadMoreListener) { this(wrapped, requestToLoadMoreListener, true); } public EndlessRecyclerViewAdapter(Adapter wrapped, RequestToLoadMoreListener requestToLoadMoreListener, boolean keepOnAppending) { super(wrapped); this.requestToLoadMoreListener = requestToLoadMoreListener; this.keepOnAppending = new AtomicBoolean(keepOnAppending); dataPending = new AtomicBoolean(false); } public void setPendingViewId(@LayoutRes int layoutId) { if (pendingViewHolder != null) { throw new IllegalStateException(\"Cannot change pendingViewId once ViewHolder is created.\"); } pendingViewId = layoutId; } public void setPendingViewHolder(ViewHolder holder) { if (pendingViewHolder != null) { throw new IllegalStateException(\"Cannot change pendingViewHolder once it is created.\"); } pendingViewHolder = holder; } public void notifyAutomatically(boolean enable) { shouldNotifyAdapter = enable; } public void onDataReady(boolean keepOnAppending) { dataPending.set(false); setKeepOnAppending(keepOnAppending); } public void restartAppending() { dataPending.set(false); setKeepOnAppending(true); } private void setKeepOnAppending(boolean newValue) { keepOnAppending.set(newValue); if (shouldNotifyAdapter) { getWrappedAdapter().notifyDataSetChanged(); } else { notifyItemChanged(getWrappedAdapter().getItemCount()); } } private ViewHolder getPendingViewHolder(ViewGroup parent) { if (pendingViewHolder == null) { pendingViewHolder = new PendingViewHolder(LayoutInflater.from(parent.getContext()) .inflate(pendingViewId, parent, false)); } return pendingViewHolder; } @Override public int getItemCount() { return super.getItemCount() + (keepOnAppending.get() ? 1 : 0); } @Override public int getItemViewType(int position) { if (position == getWrappedAdapter().getItemCount()) { return TYPE_PENDING; } return super.getItemViewType(position); } @Override public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) { if (viewType == TYPE_PENDING) { return getPendingViewHolder(parent); } return super.onCreateViewHolder(parent, viewType); } @Override public void onBindViewHolder(ViewHolder holder, int position) { if (getItemViewType(position) == TYPE_PENDING) { if (!dataPending.get()) { dataPending.set(true); requestToLoadMoreListener.onLoadMoreRequested(); } } else { super.onBindViewHolder(holder, position); } } public interface RequestToLoadMoreListener { void onLoadMoreRequested(); } static class PendingViewHolder extends ViewHolder { public PendingViewHolder(View itemView) { super(itemView); } } }","dependencies":[]}}
{"project_id":194,"chunk_id":0,"content":{"main_file_path":"rv-adapter-endless-master/library/src/androidTest/java/com/rockerhieu/rvadapter/library/ApplicationTest.java","main_file_content":"package com.rockerhieu.rvadapter.library; import android.app.Application; import android.test.ApplicationTestCase; public class ApplicationTest extends ApplicationTestCase<Application> { public ApplicationTest() { super(Application.class); } }","dependencies":[]}}
{"project_id":194,"chunk_id":0,"content":{"main_file_path":"rv-adapter-endless-master/example/src/main/java/com/rockerhieu/rvadapter/endless/example/MainActivity.java","main_file_content":"package com.rockerhieu.rvadapter.endless.example; import android.app.Activity; import android.os.AsyncTask; import android.os.Bundle; import android.support.v7.widget.LinearLayoutManager; import android.support.v7.widget.RecyclerView; import android.view.View; import com.rockerhieu.rvadapter.endless.EndlessRecyclerViewAdapter; import com.rockerhieu.rvadapter.endless.example.adapter.SimpleStringAdapter; import com.rockerhieu.rvadapter.endless.example.decorator.DividerItemDecoration; import java.util.Arrays; import java.util.List; import java.util.Random; public class MainActivity extends Activity implements EndlessRecyclerViewAdapter.RequestToLoadMoreListener { private EndlessRecyclerViewAdapter endlessRecyclerViewAdapter; private SimpleStringAdapter adapter; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); final RecyclerView rv = (RecyclerView) findViewById(R.id.recycler_view); rv.setLayoutManager(new LinearLayoutManager(this)); rv.setHasFixedSize(true); adapter = new SimpleStringAdapter(null); endlessRecyclerViewAdapter = new EndlessRecyclerViewAdapter(adapter, this); endlessRecyclerViewAdapter.setPendingViewId(R.layout.custom_pending_view); rv.setAdapter(endlessRecyclerViewAdapter); rv.addItemDecoration(new DividerItemDecoration(this, DividerItemDecoration.VERTICAL_LIST)); } @Override public void onLoadMoreRequested() { new AsyncTask<Void, Void, List>() { @Override protected List doInBackground(Void... params) { try { Thread.sleep(2000); } catch (InterruptedException e) { e.printStackTrace(); } return Arrays.asList( randomCheese(), randomCheese(), randomCheese(), randomCheese(), randomCheese(), randomCheese(), randomCheese(), randomCheese(), randomCheese(), randomCheese()); } @Override protected void onPostExecute(List list) { adapter.appendItems(list); if (adapter.getItemCount() >= 50) { endlessRecyclerViewAdapter.onDataReady(false); } else { endlessRecyclerViewAdapter.onDataReady(true); } } }.execute(); } public void onResetClicked(View view) { adapter.clear(); endlessRecyclerViewAdapter.restartAppending(); } static Random random = new Random(); static String randomCheese() { return Cheeses.sCheeseStrings[random.nextInt(Cheeses.sCheeseStrings.length)]; } }","dependencies":[{"file_path":"rv-adapter-endless-master/example/src/main/java/com/rockerhieu/rvadapter/endless/example/adapter/SimpleStringAdapter.java","file_content":"package com.rockerhieu.rvadapter.endless.example.adapter; import android.support.v7.widget.RecyclerView; import android.view.ViewGroup; import android.widget.TextView; import java.util.ArrayList; import java.util.Collections; import java.util.List; public class SimpleStringAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> { private ArrayList<String> mValues; public static class ItemViewHolder extends RecyclerView.ViewHolder { public String mBoundString; public TextView mTextView; public ItemViewHolder(TextView v) { super(v); mTextView = v; } @Override public String toString() { return super.toString() + \" '\" + mTextView.getText(); } } public SimpleStringAdapter(String[] strings) { mValues = new ArrayList<>(); if (strings != null) { Collections.addAll(mValues, strings); } } @Override public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) { return new ItemViewHolder(new TextView(parent.getContext())); } @Override public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) { if (holder instanceof ItemViewHolder) { ItemViewHolder itemViewHolder = (ItemViewHolder) holder; itemViewHolder.mBoundString = mValues.get(position); itemViewHolder.mTextView.setText(position + \":\" + mValues.get(position)); itemViewHolder.mTextView.setMinHeight((50 + mValues.get(position).length() * 10)); } } @Override public int getItemCount() { return mValues.size(); } public void appendItems(List<String> items) { mValues.addAll(items); notifyItemRangeInserted(getItemCount(), items.size()); } public void clear() { mValues.clear(); notifyDataSetChanged(); } }"},{"file_path":"rv-adapter-endless-master/example/src/main/java/com/rockerhieu/rvadapter/endless/example/decorator/DividerItemDecoration.java","file_content":"package com.rockerhieu.rvadapter.endless.example.decorator; import android.content.Context; import android.content.res.TypedArray; import android.graphics.Canvas; import android.graphics.Rect; import android.graphics.drawable.Drawable; import android.support.v4.view.ViewCompat; import android.support.v7.widget.LinearLayoutManager; import android.support.v7.widget.RecyclerView; import android.view.View; public class DividerItemDecoration extends RecyclerView.ItemDecoration { private static final int[] ATTRS = new int[]{ android.R.attr.listDivider }; public static final int HORIZONTAL_LIST = LinearLayoutManager.HORIZONTAL; public static final int VERTICAL_LIST = LinearLayoutManager.VERTICAL; private Drawable mDivider; private int mOrientation; public DividerItemDecoration(Context context, int orientation) { final TypedArray a = context.obtainStyledAttributes(ATTRS); mDivider = a.getDrawable(0); a.recycle(); setOrientation(orientation); } public void setOrientation(int orientation) { if (orientation != HORIZONTAL_LIST && orientation != VERTICAL_LIST) { throw new IllegalArgumentException(\"invalid orientation\"); } mOrientation = orientation; } @Override public void onDraw(Canvas c, RecyclerView parent) { if (mOrientation == VERTICAL_LIST) { drawVertical(c, parent); } else { drawHorizontal(c, parent); } } public void drawVertical(Canvas c, RecyclerView parent) { final int left = parent.getPaddingLeft(); final int right = parent.getWidth() - parent.getPaddingRight(); final int childCount = parent.getChildCount(); for (int i = 0; i < childCount; i++) { final View child = parent.getChildAt(i); final RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child .getLayoutParams(); final int top = child.getBottom() + params.bottomMargin + Math.round(ViewCompat.getTranslationY(child)); final int bottom = top + mDivider.getIntrinsicHeight(); mDivider.setBounds(left, top, right, bottom); mDivider.draw(c); } } public void drawHorizontal(Canvas c, RecyclerView parent) { final int top = parent.getPaddingTop(); final int bottom = parent.getHeight() - parent.getPaddingBottom(); final int childCount = parent.getChildCount(); for (int i = 0; i < childCount; i++) { final View child = parent.getChildAt(i); final RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child .getLayoutParams(); final int left = child.getRight() + params.rightMargin + Math.round(ViewCompat.getTranslationX(child)); final int right = left + mDivider.getIntrinsicHeight(); mDivider.setBounds(left, top, right, bottom); mDivider.draw(c); } } @Override public void getItemOffsets(Rect outRect, int itemPosition, RecyclerView parent) { if (mOrientation == VERTICAL_LIST) { outRect.set(0, 0, 0, mDivider.getIntrinsicHeight()); } else { outRect.set(0, 0, mDivider.getIntrinsicWidth(), 0); } } }"},{"file_path":"rv-adapter-endless-master/library/src/main/java/com/rockerhieu/rvadapter/endless/EndlessRecyclerViewAdapter.java","file_content":"package com.rockerhieu.rvadapter.endless; import android.support.annotation.LayoutRes; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import com.rockerhieu.rvadapter.RecyclerViewAdapterWrapper; import java.util.concurrent.atomic.AtomicBoolean; import static android.support.v7.widget.RecyclerView.Adapter; import static android.support.v7.widget.RecyclerView.ViewHolder; public class EndlessRecyclerViewAdapter extends RecyclerViewAdapterWrapper { public static final int TYPE_PENDING = 999; private final AtomicBoolean keepOnAppending; private final AtomicBoolean dataPending; private final RequestToLoadMoreListener requestToLoadMoreListener; private boolean shouldNotifyAdapter = false; private ViewHolder pendingViewHolder; private int pendingViewId = R.layout.item_loading; public EndlessRecyclerViewAdapter(Adapter wrapped, RequestToLoadMoreListener requestToLoadMoreListener) { this(wrapped, requestToLoadMoreListener, true); } public EndlessRecyclerViewAdapter(Adapter wrapped, RequestToLoadMoreListener requestToLoadMoreListener, boolean keepOnAppending) { super(wrapped); this.requestToLoadMoreListener = requestToLoadMoreListener; this.keepOnAppending = new AtomicBoolean(keepOnAppending); dataPending = new AtomicBoolean(false); } public void setPendingViewId(@LayoutRes int layoutId) { if (pendingViewHolder != null) { throw new IllegalStateException(\"Cannot change pendingViewId once ViewHolder is created.\"); } pendingViewId = layoutId; } public void setPendingViewHolder(ViewHolder holder) { if (pendingViewHolder != null) { throw new IllegalStateException(\"Cannot change pendingViewHolder once it is created.\"); } pendingViewHolder = holder; } public void notifyAutomatically(boolean enable) { shouldNotifyAdapter = enable; } public void onDataReady(boolean keepOnAppending) { dataPending.set(false); setKeepOnAppending(keepOnAppending); } public void restartAppending() { dataPending.set(false); setKeepOnAppending(true); } private void setKeepOnAppending(boolean newValue) { keepOnAppending.set(newValue); if (shouldNotifyAdapter) { getWrappedAdapter().notifyDataSetChanged(); } else { notifyItemChanged(getWrappedAdapter().getItemCount()); } } private ViewHolder getPendingViewHolder(ViewGroup parent) { if (pendingViewHolder == null) { pendingViewHolder = new PendingViewHolder(LayoutInflater.from(parent.getContext()) .inflate(pendingViewId, parent, false)); } return pendingViewHolder; } @Override public int getItemCount() { return super.getItemCount() + (keepOnAppending.get() ? 1 : 0); } @Override public int getItemViewType(int position) { if (position == getWrappedAdapter().getItemCount()) { return TYPE_PENDING; } return super.getItemViewType(position); } @Override public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) { if (viewType == TYPE_PENDING) { return getPendingViewHolder(parent); } return super.onCreateViewHolder(parent, viewType); } @Override public void onBindViewHolder(ViewHolder holder, int position) { if (getItemViewType(position) == TYPE_PENDING) { if (!dataPending.get()) { dataPending.set(true); requestToLoadMoreListener.onLoadMoreRequested(); } } else { super.onBindViewHolder(holder, position); } } public interface RequestToLoadMoreListener { void onLoadMoreRequested(); } static class PendingViewHolder extends ViewHolder { public PendingViewHolder(View itemView) { super(itemView); } } }"}]}}
{"project_id":194,"chunk_id":0,"content":{"main_file_path":"rv-adapter-endless-master/example/src/main/java/com/rockerhieu/rvadapter/endless/example/Cheeses.java","main_file_content":"package com.rockerhieu.rvadapter.endless.example; public class Cheeses { public static final String[] sCheeseStrings = { \"Abbaye de Belloc\", \"Abbaye du Mont des Cats\", \"Abertam\", \"Abondance\", \"Ackawi\", \"Acorn\", \"Adelost\", \"Affidelice au Chablis\", \"Afuega'l Pitu\", \"Airag\", \"Airedale\", \"Aisy Cendre\", \"Allgauer Emmentaler\", \"Alverca\", \"Ambert\", \"American Cheese\", \"Ami du Chambertin\", \"Anejo Enchilado\", \"Anneau du Vic-Bilh\", \"Anthoriro\", \"Appenzell\", \"Aragon\", \"Ardi Gasna\", \"Ardrahan\", \"Armenian String\", \"Aromes au Gene de Marc\", \"Asadero\", \"Asiago\", \"Aubisque Pyrenees\", \"Autun\", \"Avaxtskyr\", \"Baby Swiss\", \"Babybel\", \"Baguette Laonnaise\", \"Bakers\", \"Baladi\", \"Balaton\", \"Bandal\", \"Banon\", \"Barry's Bay Cheddar\", \"Basing\", \"Basket Cheese\", \"Bath Cheese\", \"Bavarian Bergkase\", \"Baylough\", \"Beaufort\", \"Beauvoorde\", \"Beenleigh Blue\", \"Beer Cheese\", \"Bel Paese\", \"Bergader\", \"Bergere Bleue\", \"Berkswell\", \"Beyaz Peynir\", \"Bierkase\", \"Bishop Kennedy\", \"Blarney\", \"Bleu d'Auvergne\", \"Bleu de Gex\", \"Bleu de Laqueuille\", \"Bleu de Septmoncel\", \"Bleu Des Causses\", \"Blue\", \"Blue Castello\", \"Blue Rathgore\", \"Blue Vein (Australian)\", \"Blue Vein Cheeses\", \"Bocconcini\", \"Bocconcini (Australian)\", \"Boeren Leidenkaas\", \"Bonchester\", \"Bosworth\", \"Bougon\", \"Boule Du Roves\", \"Boulette d'Avesnes\", \"Boursault\", \"Boursin\", \"Bouyssou\", \"Bra\", \"Braudostur\", \"Breakfast Cheese\", \"Brebis du Lavort\", \"Brebis du Lochois\", \"Brebis du Puyfaucon\", \"Bresse Bleu\", \"Brick\", \"Brie\", \"Brie de Meaux\", \"Brie de Melun\", \"Brillat-Savarin\", \"Brin\", \"Brin d' Amour\", \"Brin d'Amour\", \"Brinza (Burduf Brinza)\", \"Briquette de Brebis\", \"Briquette du Forez\", \"Broccio\", \"Broccio Demi-Affine\", \"Brousse du Rove\", \"Bruder Basil\", \"Brusselae Kaas (Fromage de Bruxelles)\", \"Bryndza\", \"Buchette d'Anjou\", \"Buffalo\", \"Burgos\", \"Butte\", \"Butterkase\", \"Button (Innes)\", \"Buxton Blue\", \"Cabecou\", \"Caboc\", \"Cabrales\", \"Cachaille\", \"Caciocavallo\", \"Caciotta\", \"Caerphilly\", \"Cairnsmore\", \"Calenzana\", \"Cambazola\", \"Camembert de Normandie\", \"Canadian Cheddar\", \"Canestrato\", \"Cantal\", \"Caprice des Dieux\", \"Capricorn Goat\", \"Capriole Banon\", \"Carre de l'Est\", \"Casciotta di Urbino\", \"Cashel Blue\", \"Castellano\", \"Castelleno\", \"Castelmagno\", \"Castelo Branco\", \"Castigliano\", \"Cathelain\", \"Celtic Promise\", \"Cendre d'Olivet\", \"Cerney\", \"Chabichou\", \"Chabichou du Poitou\", \"Chabis de Gatine\", \"Chaource\", \"Charolais\", \"Chaumes\", \"Cheddar\", \"Cheddar Clothbound\", \"Cheshire\", \"Chevres\", \"Chevrotin des Aravis\", \"Chontaleno\", \"Civray\", \"Coeur de Camembert au Calvados\", \"Coeur de Chevre\", \"Colby\", \"Cold Pack\", \"Comte\", \"Coolea\", \"Cooleney\", \"Coquetdale\", \"Corleggy\", \"Cornish Pepper\", \"Cotherstone\", \"Cotija\", \"Cottage Cheese\", \"Cottage Cheese (Australian)\", \"Cougar Gold\", \"Coulommiers\", \"Coverdale\", \"Crayeux de Roncq\", \"Cream Cheese\", \"Cream Havarti\", \"Crema Agria\", \"Crema Mexicana\", \"Creme Fraiche\", \"Crescenza\", \"Croghan\", \"Crottin de Chavignol\", \"Crottin du Chavignol\", \"Crowdie\", \"Crowley\", \"Cuajada\", \"Curd\", \"Cure Nantais\", \"Curworthy\", \"Cwmtawe Pecorino\", \"Cypress Grove Chevre\", \"Danablu (Danish Blue)\", \"Danbo\", \"Danish Fontina\", \"Daralagjazsky\", \"Dauphin\", \"Delice des Fiouves\", \"Denhany Dorset Drum\", \"Derby\", \"Dessertnyj Belyj\", \"Devon Blue\", \"Devon Garland\", \"Dolcelatte\", \"Doolin\", \"Doppelrhamstufel\", \"Dorset Blue Vinney\", \"Double Gloucester\", \"Double Worcester\", \"Dreux a la Feuille\", \"Dry Jack\", \"Duddleswell\", \"Dunbarra\", \"Dunlop\", \"Dunsyre Blue\", \"Duroblando\", \"Durrus\", \"Dutch Mimolette (Commissiekaas)\", \"Edam\", \"Edelpilz\", \"Emental Grand Cru\", \"Emlett\", \"Emmental\", \"Epoisses de Bourgogne\", \"Esbareich\", \"Esrom\", \"Etorki\", \"Evansdale Farmhouse Brie\", \"Evora De L'Alentejo\", \"Exmoor Blue\", \"Explorateur\", \"Feta\", \"Feta (Australian)\", \"Figue\", \"Filetta\", \"Fin-de-Siecle\", \"Finlandia Swiss\", \"Finn\", \"Fiore Sardo\", \"Fleur du Maquis\", \"Flor de Guia\", \"Flower Marie\", \"Folded\", \"Folded cheese with mint\", \"Fondant de Brebis\", \"Fontainebleau\", \"Fontal\", \"Fontina Val d'Aosta\", \"Formaggio di capra\", \"Fougerus\", \"Four Herb Gouda\", \"Fourme d' Ambert\", \"Fourme de Haute Loire\", \"Fourme de Montbrison\", \"Fresh Jack\", \"Fresh Mozzarella\", \"Fresh Ricotta\", \"Fresh Truffles\", \"Fribourgeois\", \"Friesekaas\", \"Friesian\", \"Friesla\", \"Frinault\", \"Fromage a Raclette\", \"Fromage Corse\", \"Fromage de Montagne de Savoie\", \"Fromage Frais\", \"Fruit Cream Cheese\", \"Frying Cheese\", \"Fynbo\", \"Gabriel\", \"Galette du Paludier\", \"Galette Lyonnaise\", \"Galloway Goat's Milk Gems\", \"Gammelost\", \"Gaperon a l'Ail\", \"Garrotxa\", \"Gastanberra\", \"Geitost\", \"Gippsland Blue\", \"Gjetost\", \"Gloucester\", \"Golden Cross\", \"Gorgonzola\", \"Gornyaltajski\", \"Gospel Green\", \"Gouda\", \"Goutu\", \"Gowrie\", \"Grabetto\", \"Graddost\", \"Grafton Village Cheddar\", \"Grana\", \"Grana Padano\", \"Grand Vatel\", \"Grataron d' Areches\", \"Gratte-Paille\", \"Graviera\", \"Greuilh\", \"Greve\", \"Gris de Lille\", \"Gruyere\", \"Gubbeen\", \"Guerbigny\", \"Halloumi\", \"Halloumy (Australian)\", \"Haloumi-Style Cheese\", \"Harbourne Blue\", \"Havarti\", \"Heidi Gruyere\", \"Hereford Hop\", \"Herrgardsost\", \"Herriot Farmhouse\", \"Herve\", \"Hipi Iti\", \"Hubbardston Blue Cow\", \"Hushallsost\", \"Iberico\", \"Idaho Goatster\", \"Idiazabal\", \"Il Boschetto al Tartufo\", \"Ile d'Yeu\", \"Isle of Mull\", \"Jarlsberg\", \"Jermi Tortes\", \"Jibneh Arabieh\", \"Jindi Brie\", \"Jubilee Blue\", \"Juustoleipa\", \"Kadchgall\", \"Kaseri\", \"Kashta\", \"Kefalotyri\", \"Kenafa\", \"Kernhem\", \"Kervella Affine\", \"Kikorangi\", \"King Island Cape Wickham Brie\", \"King River Gold\", \"Klosterkaese\", \"Knockalara\", \"Kugelkase\", \"L'Aveyronnais\", \"L'Ecir de l'Aubrac\", \"La Taupiniere\", \"La Vache Qui Rit\", \"Laguiole\", \"Lairobell\", \"Lajta\", \"Lanark Blue\", \"Lancashire\", \"Langres\", \"Lappi\", \"Laruns\", \"Lavistown\", \"Le Brin\", \"Le Fium Orbo\", \"Le Lacandou\", \"Le Roule\", \"Leafield\", \"Lebbene\", \"Leerdammer\", \"Leicester\", \"Leyden\", \"Limburger\", \"Lincolnshire Poacher\", \"Lingot Saint Bousquet d'Orb\", \"Liptauer\", \"Little Rydings\", \"Livarot\", \"Llanboidy\", \"Llanglofan Farmhouse\", \"Loch Arthur Farmhouse\", \"Loddiswell Avondale\", \"Longhorn\", \"Lou Palou\", \"Lou Pevre\", \"Lyonnais\", \"Maasdam\", \"Macconais\", \"Mahoe Aged Gouda\", \"Mahon\", \"Malvern\", \"Mamirolle\", \"Manchego\", \"Manouri\", \"Manur\", \"Marble Cheddar\", \"Marbled Cheeses\", \"Maredsous\", \"Margotin\", \"Maribo\", \"Maroilles\", \"Mascares\", \"Mascarpone\", \"Mascarpone (Australian)\", \"Mascarpone Torta\", \"Matocq\", \"Maytag Blue\", \"Meira\", \"Menallack Farmhouse\", \"Menonita\", \"Meredith Blue\", \"Mesost\", \"Metton (Cancoillotte)\", \"Meyer Vintage Gouda\", \"Mihalic Peynir\", \"Milleens\", \"Mimolette\", \"Mine-Gabhar\", \"Mini Baby Bells\", \"Mixte\", \"Molbo\", \"Monastery Cheeses\", \"Mondseer\", \"Mont D'or Lyonnais\", \"Montasio\", \"Monterey Jack\", \"Monterey Jack Dry\", \"Morbier\", \"Morbier Cru de Montagne\", \"Mothais a la Feuille\", \"Mozzarella\", \"Mozzarella (Australian)\", \"Mozzarella di Bufala\", \"Mozzarella Fresh, in water\", \"Mozzarella Rolls\", \"Munster\", \"Murol\", \"Mycella\", \"Myzithra\", \"Naboulsi\", \"Nantais\", \"Neufchatel\", \"Neufchatel (Australian)\", \"Niolo\", \"Nokkelost\", \"Northumberland\", \"Oaxaca\", \"Olde York\", \"Olivet au Foin\", \"Olivet Bleu\", \"Olivet Cendre\", \"Orkney Extra Mature Cheddar\", \"Orla\", \"Oschtjepka\", \"Ossau Fermier\", \"Ossau-Iraty\", \"Oszczypek\", \"Oxford Blue\", \"P'tit Berrichon\", \"Palet de Babligny\", \"Paneer\", \"Panela\", \"Pannerone\", \"Pant ys Gawn\", \"Parmesan (Parmigiano)\", \"Parmigiano Reggiano\", \"Pas de l'Escalette\", \"Passendale\", \"Pasteurized Processed\", \"Pate de Fromage\", \"Patefine Fort\", \"Pave d'Affinois\", \"Pave d'Auge\", \"Pave de Chirac\", \"Pave du Berry\", \"Pecorino\", \"Pecorino in Walnut Leaves\", \"Pecorino Romano\", \"Peekskill Pyramid\", \"Pelardon des Cevennes\", \"Pelardon des Corbieres\", \"Penamellera\", \"Penbryn\", \"Pencarreg\", \"Perail de Brebis\", \"Petit Morin\", \"Petit Pardou\", \"Petit-Suisse\", \"Picodon de Chevre\", \"Picos de Europa\", \"Piora\", \"Pithtviers au Foin\", \"Plateau de Herve\", \"Plymouth Cheese\", \"Podhalanski\", \"Poivre d'Ane\", \"Polkolbin\", \"Pont l'Eveque\", \"Port Nicholson\", \"Port-Salut\", \"Postel\", \"Pouligny-Saint-Pierre\", \"Pourly\", \"Prastost\", \"Pressato\", \"Prince-Jean\", \"Processed Cheddar\", \"Provolone\", \"Provolone (Australian)\", \"Pyengana Cheddar\", \"Pyramide\", \"Quark\", \"Quark (Australian)\", \"Quartirolo Lombardo\", \"Quatre-Vents\", \"Quercy Petit\", \"Queso Blanco\", \"Queso Blanco con Frutas --Pina y Mango\", \"Queso de Murcia\", \"Queso del Montsec\", \"Queso del Tietar\", \"Queso Fresco\", \"Queso Fresco (Adobera)\", \"Queso Iberico\", \"Queso Jalapeno\", \"Queso Majorero\", \"Queso Media Luna\", \"Queso Para Frier\", \"Queso Quesadilla\", \"Rabacal\", \"Raclette\", \"Ragusano\", \"Raschera\", \"Reblochon\", \"Red Leicester\", \"Regal de la Dombes\", \"Reggianito\", \"Remedou\", \"Requeson\", \"Richelieu\", \"Ricotta\", \"Ricotta (Australian)\", \"Ricotta Salata\", \"Ridder\", \"Rigotte\", \"Rocamadour\", \"Rollot\", \"Romano\", \"Romans Part Dieu\", \"Roncal\", \"Roquefort\", \"Roule\", \"Rouleau De Beaulieu\", \"Royalp Tilsit\", \"Rubens\", \"Rustinu\", \"Saaland Pfarr\", \"Saanenkaese\", \"Saga\", \"Sage Derby\", \"Sainte Maure\", \"Saint-Marcellin\", \"Saint-Nectaire\", \"Saint-Paulin\", \"Salers\", \"Samso\", \"San Simon\", \"Sancerre\", \"Sap Sago\", \"Sardo\", \"Sardo Egyptian\", \"Sbrinz\", \"Scamorza\", \"Schabzieger\", \"Schloss\", \"Selles sur Cher\", \"Selva\", \"Serat\", \"Seriously Strong Cheddar\", \"Serra da Estrela\", \"Sharpam\", \"Shelburne Cheddar\", \"Shropshire Blue\", \"Siraz\", \"Sirene\", \"Smoked Gouda\", \"Somerset Brie\", \"Sonoma Jack\", \"Sottocenare al Tartufo\", \"Soumaintrain\", \"Sourire Lozerien\", \"Spenwood\", \"Sraffordshire Organic\", \"St. Agur Blue Cheese\", \"Stilton\", \"Stinking Bishop\", \"String\", \"Sussex Slipcote\", \"Sveciaost\", \"Swaledale\", \"Sweet Style Swiss\", \"Swiss\", \"Syrian (Armenian String)\", \"Tala\", \"Taleggio\", \"Tamie\", \"Tasmania Highland Chevre Log\", \"Taupiniere\", \"Teifi\", \"Telemea\", \"Testouri\", \"Tete de Moine\", \"Tetilla\", \"Texas Goat Cheese\", \"Tibet\", \"Tillamook Cheddar\", \"Tilsit\", \"Timboon Brie\", \"Toma\", \"Tomme Brulee\", \"Tomme d'Abondance\", \"Tomme de Chevre\", \"Tomme de Romans\", \"Tomme de Savoie\", \"Tomme des Chouans\", \"Tommes\", \"Torta del Casar\", \"Toscanello\", \"Touree de L'Aubier\", \"Tourmalet\", \"Trappe (Veritable)\", \"Trois Cornes De Vendee\", \"Tronchon\", \"Trou du Cru\", \"Truffe\", \"Tupi\", \"Turunmaa\", \"Tymsboro\", \"Tyn Grug\", \"Tyning\", \"Ubriaco\", \"Ulloa\", \"Vacherin-Fribourgeois\", \"Valencay\", \"Vasterbottenost\", \"Venaco\", \"Vendomois\", \"Vieux Corse\", \"Vignotte\", \"Vulscombe\", \"Waimata Farmhouse Blue\", \"Washed Rind Cheese (Australian)\", \"Waterloo\", \"Weichkaese\", \"Wellington\", \"Wensleydale\", \"White Stilton\", \"Whitestone Farmhouse\", \"Wigmore\", \"Woodside Cabecou\", \"Xanadu\", \"Xynotyro\", \"Yarg Cornish\", \"Yarra Valley Pyramid\", \"Yorkshire Blue\", \"Zamorano\", \"Zanetti Grana Padano\", \"Zanetti Parmigiano Reggiano\" }; }","dependencies":[]}}
{"project_id":194,"chunk_id":0,"content":{"main_file_path":"rv-adapter-endless-master/example/src/main/java/com/rockerhieu/rvadapter/endless/example/decorator/DividerItemDecoration.java","main_file_content":"package com.rockerhieu.rvadapter.endless.example.decorator; import android.content.Context; import android.content.res.TypedArray; import android.graphics.Canvas; import android.graphics.Rect; import android.graphics.drawable.Drawable; import android.support.v4.view.ViewCompat; import android.support.v7.widget.LinearLayoutManager; import android.support.v7.widget.RecyclerView; import android.view.View; public class DividerItemDecoration extends RecyclerView.ItemDecoration { private static final int[] ATTRS = new int[]{ android.R.attr.listDivider }; public static final int HORIZONTAL_LIST = LinearLayoutManager.HORIZONTAL; public static final int VERTICAL_LIST = LinearLayoutManager.VERTICAL; private Drawable mDivider; private int mOrientation; public DividerItemDecoration(Context context, int orientation) { final TypedArray a = context.obtainStyledAttributes(ATTRS); mDivider = a.getDrawable(0); a.recycle(); setOrientation(orientation); } public void setOrientation(int orientation) { if (orientation != HORIZONTAL_LIST && orientation != VERTICAL_LIST) { throw new IllegalArgumentException(\"invalid orientation\"); } mOrientation = orientation; } @Override public void onDraw(Canvas c, RecyclerView parent) { if (mOrientation == VERTICAL_LIST) { drawVertical(c, parent); } else { drawHorizontal(c, parent); } } public void drawVertical(Canvas c, RecyclerView parent) { final int left = parent.getPaddingLeft(); final int right = parent.getWidth() - parent.getPaddingRight(); final int childCount = parent.getChildCount(); for (int i = 0; i < childCount; i++) { final View child = parent.getChildAt(i); final RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child .getLayoutParams(); final int top = child.getBottom() + params.bottomMargin + Math.round(ViewCompat.getTranslationY(child)); final int bottom = top + mDivider.getIntrinsicHeight(); mDivider.setBounds(left, top, right, bottom); mDivider.draw(c); } } public void drawHorizontal(Canvas c, RecyclerView parent) { final int top = parent.getPaddingTop(); final int bottom = parent.getHeight() - parent.getPaddingBottom(); final int childCount = parent.getChildCount(); for (int i = 0; i < childCount; i++) { final View child = parent.getChildAt(i); final RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child .getLayoutParams(); final int left = child.getRight() + params.rightMargin + Math.round(ViewCompat.getTranslationX(child)); final int right = left + mDivider.getIntrinsicHeight(); mDivider.setBounds(left, top, right, bottom); mDivider.draw(c); } } @Override public void getItemOffsets(Rect outRect, int itemPosition, RecyclerView parent) { if (mOrientation == VERTICAL_LIST) { outRect.set(0, 0, 0, mDivider.getIntrinsicHeight()); } else { outRect.set(0, 0, mDivider.getIntrinsicWidth(), 0); } } }","dependencies":[]}}
{"project_id":194,"chunk_id":0,"content":{"main_file_path":"rv-adapter-endless-master/example/src/main/java/com/rockerhieu/rvadapter/endless/example/adapter/SimpleStringAdapter.java","main_file_content":"package com.rockerhieu.rvadapter.endless.example.adapter; import android.support.v7.widget.RecyclerView; import android.view.ViewGroup; import android.widget.TextView; import java.util.ArrayList; import java.util.Collections; import java.util.List; public class SimpleStringAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> { private ArrayList<String> mValues; public static class ItemViewHolder extends RecyclerView.ViewHolder { public String mBoundString; public TextView mTextView; public ItemViewHolder(TextView v) { super(v); mTextView = v; } @Override public String toString() { return super.toString() + \" '\" + mTextView.getText(); } } public SimpleStringAdapter(String[] strings) { mValues = new ArrayList<>(); if (strings != null) { Collections.addAll(mValues, strings); } } @Override public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) { return new ItemViewHolder(new TextView(parent.getContext())); } @Override public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) { if (holder instanceof ItemViewHolder) { ItemViewHolder itemViewHolder = (ItemViewHolder) holder; itemViewHolder.mBoundString = mValues.get(position); itemViewHolder.mTextView.setText(position + \":\" + mValues.get(position)); itemViewHolder.mTextView.setMinHeight((50 + mValues.get(position).length() * 10)); } } @Override public int getItemCount() { return mValues.size(); } public void appendItems(List<String> items) { mValues.addAll(items); notifyItemRangeInserted(getItemCount(), items.size()); } public void clear() { mValues.clear(); notifyDataSetChanged(); } }","dependencies":[]}}
{"project_id":194,"chunk_id":0,"content":{"main_file_path":"rv-adapter-endless-master/example/src/androidTest/java/com/rockerhieu/rvadapter/endless/example/ApplicationTest.java","main_file_content":"package com.rockerhieu.rvadapter.endless.example; import android.app.Application; import android.test.ApplicationTestCase; public class ApplicationTest extends ApplicationTestCase<Application> { public ApplicationTest() { super(Application.class); } }","dependencies":[]}}
{"project_id":197,"chunk_id":0,"content":{"main_file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/JavanoidOO.java","main_file_content":"package engtelecom.poo; import java.awt.Color; import java.awt.Graphics; import java.awt.Graphics2D; import java.awt.Image; import java.awt.MediaTracker; import java.awt.RenderingHints; import java.awt.Toolkit; import java.awt.event.KeyListener; import java.net.URL; import java.util.ArrayList; import javax.swing.ImageIcon; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.Timer; import engtelecom.poo.areas.Area; import engtelecom.poo.areas.AreaJogo; import engtelecom.poo.areas.AreaPainel; import engtelecom.poo.areas.AreaPlacar; public class JavanoidOO extends JPanel { private static final int FPS = 60; public final static int LARGURA_TELA = 800; public final static int ALTURA_TELA = 600; public static final int AREA_JOGO_X = 0; public static final int AREA_JOGO_Y = 0; public static final int AREA_JOGO_LARGURA = 500; public static final int AREA_JOGO_ALTURA = 600; public static final Color AREA_JOGO_COR = Color.BLACK; public static final int AREA_PLACAR_X = 500; public static final int AREA_PLACAR_Y = 0; public static final int AREA_PLACAR_LARGURA = 300; public static final int AREA_PLACAR_ALTURA = 600; public static final Color AREA_PLACAR_COR = Color.LIGHT_GRAY; public final static int AREA_PAINEL_X = 0; public final static int AREA_PAINEL_Y = 0; public final static int AREA_PAINEL_LARGURA = 800; public final static int AREA_PAINEL_ALTURA = 600; public final static Color AREA_PAINEL_COR = Color.LIGHT_GRAY; private ArrayList<Area> areas; private Timer timer; public JavanoidOO() { areas = new ArrayList<>(); areas.add(new AreaJogo(AREA_JOGO_X, AREA_JOGO_Y, AREA_JOGO_LARGURA, AREA_JOGO_ALTURA)); areas.add( new AreaPlacar(AREA_PLACAR_X, AREA_PLACAR_Y, AREA_PLACAR_LARGURA, AREA_PLACAR_ALTURA)); areas.add( new AreaPainel(AREA_PAINEL_X, AREA_PAINEL_Y, AREA_PAINEL_LARGURA, AREA_PAINEL_ALTURA)); } public void iniciar() { JFrame frame = new JFrame(); frame.setSize(LARGURA_TELA, ALTURA_TELA); frame.setTitle(\"JavanoidOO\"); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setResizable(false); frame.setLocationRelativeTo(null); frame.add(this); frame.addKeyListener((KeyListener) areas.get(0)); frame.setFocusable(true); frame.setVisible(true); this.timer = new Timer(1000 / FPS, e -> { repaint(); }); this.timer.start(); } @Override public void paint(Graphics g) { var g2d = (Graphics2D) g; g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON); g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY); for (var area : areas) { area.desenharArea(g2d); } Toolkit.getDefaultToolkit().sync(); } public Image carregarImagem(String arquivo) { try { var ii = new ImageIcon(getClass().getResource(\"/\" + arquivo)); if ((ii == null) || (ii.getImageLoadStatus() != MediaTracker.COMPLETE)) { URL url = getClass().getResource(\"/\" + arquivo); if (url == null) throw new IllegalArgumentException(\"Imagem \" + arquivo + \" não encontrada\"); ii = new ImageIcon(url); } return ii.getImage(); } catch (Exception e) { System.err.println(\"Erro ao carregar imagem: \" + e.getMessage()); e.printStackTrace(); return null; } } }","dependencies":[{"file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/areas/Area.java","file_content":"package engtelecom.poo.areas; import java.awt.Color; import java.awt.Font; import java.awt.FontFormatException; import java.awt.Graphics2D; import java.io.IOException; import java.io.InputStream; import java.awt.Image; import java.awt.MediaTracker; import java.net.URL; import javax.swing.ImageIcon; public abstract class Area { protected int coordenadaX; protected int coordenadaY; protected int largura; protected int altura; protected Image imagem; public Area(int coordenadaX, int coordenadaY, int largura, int altura) { this.coordenadaX = coordenadaX; this.coordenadaY = coordenadaY; this.largura = largura; this.altura = altura; } public abstract void desenharArea(Graphics2D g2d); public Font carregaFonteDoDisco(String nome, float tamanho) { InputStream is = getClass().getResourceAsStream(\"/fontes/\" + nome); try { var font = Font.createFont(Font.TRUETYPE_FONT, is).deriveFont(tamanho); return font; } catch (FontFormatException | IOException e) { System.err.println(\"erro ao ler font do disco: \" + e); } return null; } public Image carregarImagem(String arquivo) { try { var ii = new ImageIcon(getClass().getResource(\"/\" + arquivo)); if ((ii == null) || (ii.getImageLoadStatus() != MediaTracker.COMPLETE)) { URL url = getClass().getResource(\"/\" + arquivo); if (url == null) throw new IllegalArgumentException(\"Imagem \" + arquivo + \" não encontrada\"); ii = new ImageIcon(url); } return ii.getImage(); } catch (Exception e) { System.err.println(\"Erro ao carregar imagem: \" + e.getMessage()); e.printStackTrace(); return null; } } }"},{"file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/areas/AreaJogo.java","file_content":"package engtelecom.poo.areas; import java.awt.Color; import java.awt.Graphics2D; import java.awt.Rectangle; import engtelecom.poo.JavanoidOO; import engtelecom.poo.Mapa; import engtelecom.poo.elementos.Bolinha; import engtelecom.poo.elementos.Elemento; import engtelecom.poo.elementos.Plataforma; import engtelecom.poo.elementos.Poder; import engtelecom.poo.elementos.Tijolo; import engtelecom.poo.elementos.TipoPoder; import engtelecom.poo.elementos.TipoTijolo; import java.awt.event.KeyEvent; import java.awt.event.KeyListener; import java.util.ArrayList; public class AreaJogo extends Area implements KeyListener { private Mapa mapa; private ArrayList<Elemento> elementos; private boolean pausado; private boolean somLigado; private boolean fimDeJogo; public AreaJogo(int coordenadaX, int coordenadaY, int largura, int altura) { super(coordenadaX, coordenadaY, largura, altura); inicializarElementos(); inicializarMapa(); inicializarConfiguracoes(); } private void inicializarElementos() { elementos = new ArrayList<>(); elementos.add(new Bolinha()); elementos.add(new Plataforma()); } private void inicializarMapa() { mapa = new Mapa(largura, altura); Bolinha bolinha = (Bolinha) elementos.get(0); bolinha.resetarPosicao(); } private void inicializarConfiguracoes() { pausado = false; somLigado = true; fimDeJogo = false; } @Override public void desenharArea(Graphics2D g2d) { this.imagem = carregarImagem(\"imagens/area-jogo.png\"); g2d.drawImage(imagem, this.coordenadaX, this.coordenadaY, this.largura, this.altura, null); if (!this.pausado && !verificaTerminoJogo()) { mapa.desenharMatriz(g2d); desenharElementos(g2d); } else { desenharMensagem(g2d); } } private boolean verificaTerminoJogo() { if (AreaPlacar.fatorVida == 0) { this.fimDeJogo = true; mapa.resetarNivel(); } return fimDeJogo; } private void desenharMensagem(Graphics2D g2d) { g2d.setColor(Color.LIGHT_GRAY); var fonte = carregaFonteDoDisco(\"f1.ttf\", 55f); g2d.setFont(fonte); String mensagem; if (fimDeJogo) { mensagem = \"game over\"; } else { mensagem = \"game paused\"; } g2d.drawString(mensagem, JavanoidOO.AREA_JOGO_X + (JavanoidOO.AREA_JOGO_LARGURA / 8), JavanoidOO.AREA_JOGO_ALTURA / 2); } private void desenharElementos(Graphics2D g2d) { for (var elemento : elementos) { elemento.desenhar(g2d); } verificarColisoes(); movimentarBolinhaEmJogo(); } private void verificarColisoes() { Bolinha bolinha = (Bolinha) elementos.get(0); Plataforma plataforma = (Plataforma) elementos.get(1); colisaoBolinhaPlataforma(bolinha, plataforma); colisaoPlataformaPoderes(plataforma); colisaoBolinhaTijolos(bolinha); } private void movimentarBolinhaEmJogo() { Bolinha bolinha = (Bolinha) elementos.get(0); bolinha.movimentar(); if (bolinha.getCoordenadaX() < 0 || bolinha.getCoordenadaX() + bolinha.getLargura() > this.largura) { bolinha.setVelocidadeX(bolinha.getVelocidadeX() * -1); } if (bolinha.getCoordenadaY() < 0 || bolinha.getCoordenadaY() + bolinha.getAltura() > this.altura) { bolinha.setVelocidadeY(bolinha.getVelocidadeY() * -1); } if (passouBordaJogo(bolinha)) { AreaPlacar.removerVida(); bolinha.resetarPosicao(); verificaTerminoJogo(); } } private boolean passouBordaJogo(Bolinha b) { return b.getCoordenadaY() + b.getAltura() > this.altura; } private void movimentarPlataformaEmJogo(Plataforma plataforma) { plataforma.movimentar(); if (plataforma.getCoordenadaX() < this.coordenadaX) { plataforma.setCoordenadaX(0); } if (plataforma.getCoordenadaX() + plataforma.getLargura() > this.largura) { plataforma.setCoordenadaX(this.largura - plataforma.getLargura()); } } public boolean processarColisaoBolinhaTijolo(Bolinha bolinha, Tijolo tijolo) { if (colisaoBlocoFixo(bolinha, tijolo)) { int margem = 5; if (bolinha.getCoordenadaX() + bolinha.getLargura() - margem <= tijolo.getCoordenadaX() || bolinha.getCoordenadaX() + margem >= tijolo.getCoordenadaX() + tijolo.getLargura()) { bolinha.setVelocidadeX(bolinha.getVelocidadeX() * -1); } else { bolinha.setVelocidadeY(bolinha.getVelocidadeY() * -1); } return true; } return false; } private void colisaoBolinhaTijolos(Bolinha bolinha) { boolean todosTijolosDestruidos = true; for (int i = 0; i < mapa.getNumeroLinhas(); i++) { for (int j = 0; j < mapa.getNumeroColunas(); j++) { Tijolo tijolo = mapa.getTijolo(i, j); int valor = tijolo.getModelo().valor; if (tijolo.getDurabilidadeAtual() > 0) { if (processarColisaoBolinhaTijolo(bolinha, tijolo)) { tijolo.diminuirDurabilidadeAtual(); if (tijolo.getDurabilidadeAtual() == 0) { AreaPlacar.adicionarPontuacao(valor); } else if (tijolo.getModelo() == TipoTijolo.INDESTRUTIVEL) { AreaPlacar.adicionarPontuacao(valor); } } if (tijolo.getModelo() != TipoTijolo.INDESTRUTIVEL) { todosTijolosDestruidos = false; } } } } if (todosTijolosDestruidos) { mapa.avancarNivel(); } } private boolean colisaoBolinhaPlataforma(Bolinha bolinha, Plataforma plataforma) { if (colisaoBlocoFixo(bolinha, plataforma)) { bolinha.setCoordenadaY(plataforma.getCoordenadaY() - bolinha.getAltura()); bolinha.setVelocidadeY(bolinha.getVelocidadeY() * -1); return true; } return false; } private void colisaoPlataformaPoderes(Plataforma plataforma) { for (int i = 0; i < mapa.getNumeroLinhas(); i++) { for (int j = 0; j < mapa.getNumeroColunas(); j++) { Tijolo tijoloSelecionado = this.mapa.getTijolo(i, j); if (tijoloSelecionado != null && tijoloSelecionado.getPoder() != null) { Poder poder = tijoloSelecionado.getPoder(); if (colisaoBlocoFixo(plataforma, poder) && !poder.jaFoiCapturado()) { aplicaEfeitoPoder(plataforma, poder); poder.capturar(); poder.desligarEstadoDesenho(); } } } } } private void aplicaEfeitoPoder(Plataforma plataforma, Poder poder) { TipoPoder tipo = poder.getTipoPoder(); switch (tipo) { case MAX_VELOCIDADE: plataforma.aumentarTamanho(); break; case MIN_VELOCIDADE: plataforma.diminuirTamanho(); break; case VIDA_EXTRA: AreaPlacar.adicionarVida(); break; } } private boolean colisaoBlocoFixo(Elemento elementoA, Elemento elementoB) { Rectangle a = new Rectangle(elementoA.getCoordenadaX(), elementoA.getCoordenadaY(), elementoA.getLargura(), elementoA.getAltura()); Rectangle b = new Rectangle(elementoB.getCoordenadaX(), elementoB.getCoordenadaY(), elementoB.getLargura(), elementoB.getAltura()); return a.intersects(b); } public void processaTeclaPressionada(KeyEvent e) { Plataforma plataforma = (Plataforma) elementos.get(1); int keyCode = e.getKeyCode(); switch (keyCode) { case KeyEvent.VK_RIGHT: plataforma.setVelocidadeX(10); movimentarPlataformaEmJogo(plataforma); break; case KeyEvent.VK_LEFT: plataforma.setVelocidadeX(-10); movimentarPlataformaEmJogo(plataforma); break; case KeyEvent.VK_Q: System.exit(0); break; case KeyEvent.VK_S: this.somLigado = !this.somLigado; System.out.println(\"Som ligado: \" + this.somLigado); break; case KeyEvent.VK_SPACE: this.pausado = !this.pausado; break; } } public void processaTeclaSolta(KeyEvent e) { Plataforma plataforma = (Plataforma) elementos.get(1); switch (e.getKeyCode()) { case KeyEvent.VK_RIGHT: case KeyEvent.VK_LEFT: plataforma.setVelocidadeX(0); break; } } @Override public void keyPressed(KeyEvent e) { processaTeclaPressionada(e); } @Override public void keyReleased(KeyEvent e) { processaTeclaSolta(e); } @Override public void keyTyped(KeyEvent e) { } }"},{"file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/areas/AreaPainel.java","file_content":"package engtelecom.poo.areas; import java.awt.Color; import java.awt.Graphics2D; import java.io.BufferedWriter; import java.io.File; import java.io.FileWriter; import java.util.ArrayList; import java.util.Scanner; import javax.swing.JOptionPane; public class AreaPainel extends Area { private ArrayList<Integer> melhoresPontuacoes; private ArrayList<String> melhoresJogadores; private boolean atualizacaoLiberada = true; private boolean nomeInserido = false; private boolean placarFinalDesenhado = false; public AreaPainel(int coordenadaX, int coordenadaY, int largura, int altura) { super(coordenadaX, coordenadaY, largura, altura); this.melhoresPontuacoes = new ArrayList<>(); this.melhoresJogadores = new ArrayList<>(); } @Override public void desenharArea(Graphics2D g2d) { if (AreaPlacar.fatorVida == 0 && atualizacaoLiberada && !nomeInserido && !placarFinalDesenhado) { ler(\"melhoresJogadores.csv\"); if (novaMelhorPontuacao()) { this.atualizacaoLiberada = false; String nomeJogadorAtual = receberNome(); atualizaMelhoresJogadores(nomeJogadorAtual); this.atualizacaoLiberada = true; if (!placarFinalDesenhado) { desenharMelhoresJogadores(g2d); placarFinalDesenhado = true; } nomeInserido = true; } else { this.nomeInserido = true; this.atualizacaoLiberada = true; if (!placarFinalDesenhado) { desenharMelhoresJogadores(g2d); placarFinalDesenhado = true; } } } if (placarFinalDesenhado) { desenharMelhoresJogadores(g2d); } } public String receberNome() { String nome = JOptionPane.showInputDialog(\"Enter your name\"); if (nome == null || nome.trim().isEmpty()) { JOptionPane.showMessageDialog(null, \"Mystery Player\"); return \"Mystery Player\"; } else { JOptionPane.showMessageDialog(null, nome); return nome; } } private void desenharMelhoresJogadores(Graphics2D g2d) { this.imagem = carregarImagem(\"imagens/area-painel.png\"); g2d.drawImage(imagem, this.coordenadaX, this.coordenadaY, this.largura, this.altura, null); g2d.setColor(Color.WHITE); var fonte = carregaFonteDoDisco(\"f1.ttf\", 40f); g2d.setFont(fonte); String titulo = \"BestOO Players\"; int larguraTitulo = g2d.getFontMetrics().stringWidth(titulo); int coordenadaXTitulo = this.coordenadaX + (this.largura - larguraTitulo) / 2; int coordenadaYTitulo = this.coordenadaY + altura / 3; g2d.drawString(titulo, coordenadaXTitulo, coordenadaYTitulo); int coordenadaY = this.coordenadaY + altura / 2; for (int i = 0; i < this.melhoresJogadores.size(); i++) { String mensagem = this.melhoresJogadores.get(i) + \" \" + this.melhoresPontuacoes.get(i); int larguraMensagem = g2d.getFontMetrics().stringWidth(mensagem); int coordenadaX = this.coordenadaX + (this.largura - larguraMensagem) / 2; g2d.drawString(mensagem, coordenadaX, coordenadaY); coordenadaY += 50; } } private void atualizaMelhoresJogadores(String nome) { String jogadorAtual = nome; int pontuacaoAtual = AreaPlacar.fatorPontuacao; melhoresJogadores.add(jogadorAtual); melhoresPontuacoes.add(pontuacaoAtual); ordenarMelhoresJogadores(); if (melhoresJogadores.size() > 5) { melhoresJogadores.remove(5); melhoresPontuacoes.remove(5); } salvarMelhoresEmArquivo(\"melhoresJogadores.csv\"); } private void ordenarMelhoresJogadores() { for (int i = 1; i < melhoresPontuacoes.size(); i++) { int pontuacaoAtual = melhoresPontuacoes.get(i); String jogadorAtual = melhoresJogadores.get(i); int j = i - 1; while (j >= 0 && melhoresPontuacoes.get(j) < pontuacaoAtual) { melhoresPontuacoes.set(j + 1, melhoresPontuacoes.get(j)); melhoresJogadores.set(j + 1, melhoresJogadores.get(j)); j--; } melhoresPontuacoes.set(j + 1, pontuacaoAtual); melhoresJogadores.set(j + 1, jogadorAtual); } } private void salvarMelhoresEmArquivo(String nomeArquivo) { try (FileWriter fw = new FileWriter(nomeArquivo, false); BufferedWriter bw = new BufferedWriter(fw)) { for (int i = 0; i < this.melhoresJogadores.size(); i++) { bw.write(this.melhoresJogadores.get(i) + \",\" + this.melhoresPontuacoes.get(i)); bw.newLine(); } } catch (Exception e) { System.err.println(\"erro ao salvar melhores jogadores: \" + e.getMessage()); } } public boolean novaMelhorPontuacao() { boolean resposta = false; for (var pontuacao : melhoresPontuacoes) { if (AreaPlacar.fatorPontuacao >= pontuacao) { resposta = true; break; } } return resposta; } public void ler(String nomeDoArquivo) { File arquivo = new File(nomeDoArquivo); if (!arquivo.exists()) { criarArquivo(nomeDoArquivo); } try (Scanner linha = new Scanner(arquivo)) { while (linha.hasNextLine()) { String s = linha.nextLine(); String[] campos = s.split(\",\"); this.melhoresJogadores.add(campos[0]); this.melhoresPontuacoes.add(Integer.parseInt(campos[1])); } } catch (Exception e) { System.err.println(\"erro ao ler arquivo melhores jogadores: \" + e.getMessage()); } } private void criarArquivo(String nomeDoArquivo) { File arquivo = new File(nomeDoArquivo); try (FileWriter fw = new FileWriter(arquivo); BufferedWriter bw = new BufferedWriter(fw)) { for (int i = 0; i < 5; i++) { bw.write(\"Unregistered,0\"); bw.newLine(); } } catch (Exception e) { System.err.println(\"erro ao criar o arquivo: \" + e.getMessage()); } } }"}]}}
{"project_id":197,"chunk_id":1,"content":{"main_file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/JavanoidOO.java","main_file_content":"package engtelecom.poo; import java.awt.Color; import java.awt.Graphics; import java.awt.Graphics2D; import java.awt.Image; import java.awt.MediaTracker; import java.awt.RenderingHints; import java.awt.Toolkit; import java.awt.event.KeyListener; import java.net.URL; import java.util.ArrayList; import javax.swing.ImageIcon; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.Timer; import engtelecom.poo.areas.Area; import engtelecom.poo.areas.AreaJogo; import engtelecom.poo.areas.AreaPainel; import engtelecom.poo.areas.AreaPlacar; public class JavanoidOO extends JPanel { private static final int FPS = 60; public final static int LARGURA_TELA = 800; public final static int ALTURA_TELA = 600; public static final int AREA_JOGO_X = 0; public static final int AREA_JOGO_Y = 0; public static final int AREA_JOGO_LARGURA = 500; public static final int AREA_JOGO_ALTURA = 600; public static final Color AREA_JOGO_COR = Color.BLACK; public static final int AREA_PLACAR_X = 500; public static final int AREA_PLACAR_Y = 0; public static final int AREA_PLACAR_LARGURA = 300; public static final int AREA_PLACAR_ALTURA = 600; public static final Color AREA_PLACAR_COR = Color.LIGHT_GRAY; public final static int AREA_PAINEL_X = 0; public final static int AREA_PAINEL_Y = 0; public final static int AREA_PAINEL_LARGURA = 800; public final static int AREA_PAINEL_ALTURA = 600; public final static Color AREA_PAINEL_COR = Color.LIGHT_GRAY; private ArrayList<Area> areas; private Timer timer; public JavanoidOO() { areas = new ArrayList<>(); areas.add(new AreaJogo(AREA_JOGO_X, AREA_JOGO_Y, AREA_JOGO_LARGURA, AREA_JOGO_ALTURA)); areas.add( new AreaPlacar(AREA_PLACAR_X, AREA_PLACAR_Y, AREA_PLACAR_LARGURA, AREA_PLACAR_ALTURA)); areas.add( new AreaPainel(AREA_PAINEL_X, AREA_PAINEL_Y, AREA_PAINEL_LARGURA, AREA_PAINEL_ALTURA)); } public void iniciar() { JFrame frame = new JFrame(); frame.setSize(LARGURA_TELA, ALTURA_TELA); frame.setTitle(\"JavanoidOO\"); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setResizable(false); frame.setLocationRelativeTo(null); frame.add(this); frame.addKeyListener((KeyListener) areas.get(0)); frame.setFocusable(true); frame.setVisible(true); this.timer = new Timer(1000 / FPS, e -> { repaint(); }); this.timer.start(); } @Override public void paint(Graphics g) { var g2d = (Graphics2D) g; g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON); g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY); for (var area : areas) { area.desenharArea(g2d); } Toolkit.getDefaultToolkit().sync(); } public Image carregarImagem(String arquivo) { try { var ii = new ImageIcon(getClass().getResource(\"/\" + arquivo)); if ((ii == null) || (ii.getImageLoadStatus() != MediaTracker.COMPLETE)) { URL url = getClass().getResource(\"/\" + arquivo); if (url == null) throw new IllegalArgumentException(\"Imagem \" + arquivo + \" não encontrada\"); ii = new ImageIcon(url); } return ii.getImage(); } catch (Exception e) { System.err.println(\"Erro ao carregar imagem: \" + e.getMessage()); e.printStackTrace(); return null; } } }","dependencies":[{"file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/areas/AreaPlacar.java","file_content":"package engtelecom.poo.areas; import java.awt.Color; import java.awt.Graphics2D; import java.awt.AlphaComposite; import java.awt.Font; import java.awt.RenderingHints; public class AreaPlacar extends Area { private final int PONTUACAO_COORDENADA_X; private final int PONTUACAO_COORDENADA_Y; private final int PONTUACAO_LARGURA; private final int PONTUACAO_ALTURA; private final int VIDAS_COORDENADA_X; private final int VIDAS_COORDENADA_Y; private final int VIDAS_LARGURA; private final int VIDAS_ALTURA; public static int fatorPontuacao; public static int fatorVida; public AreaPlacar(int coordenadaX, int coordenadaY, int largura, int altura) { super(coordenadaX, coordenadaY, largura, altura); int margem = 20; this.PONTUACAO_COORDENADA_X = this.coordenadaX + margem; this.PONTUACAO_COORDENADA_Y = coordenadaY + altura / 6; this.PONTUACAO_ALTURA = altura / 6; this.PONTUACAO_LARGURA = this.largura - margem * 3; this.VIDAS_COORDENADA_X = this.coordenadaX + margem; this.VIDAS_COORDENADA_Y = coordenadaY + altura / 2; this.VIDAS_ALTURA = altura / 6; this.VIDAS_LARGURA = this.largura - margem * 3; AreaPlacar.fatorPontuacao = 0; AreaPlacar.fatorVida = 3; } public static void adicionarVida() { AreaPlacar.fatorVida++; } public static void removerVida() { AreaPlacar.fatorVida--; } public static void adicionarPontuacao(int pontos) { AreaPlacar.fatorPontuacao += pontos; } @Override public void desenharArea(Graphics2D g2d) { this.imagem = carregarImagem(\"imagens/area-placar.png\"); g2d.drawImage(imagem, this.coordenadaX, this.coordenadaY, this.largura, this.altura, null); desenhaInformacao(g2d, \"Score\", PONTUACAO_COORDENADA_X, PONTUACAO_COORDENADA_Y, PONTUACAO_LARGURA, PONTUACAO_ALTURA); desenhaInformacao(g2d, \"Balls\", VIDAS_COORDENADA_X, VIDAS_COORDENADA_Y, VIDAS_LARGURA, VIDAS_ALTURA); desenhaBlocoPlacar(g2d, AreaPlacar.fatorPontuacao, PONTUACAO_COORDENADA_X, PONTUACAO_COORDENADA_Y, PONTUACAO_LARGURA, PONTUACAO_ALTURA); desenhaBlocoPlacar(g2d, AreaPlacar.fatorVida, VIDAS_COORDENADA_X, VIDAS_COORDENADA_Y, VIDAS_LARGURA, VIDAS_ALTURA); } private void desenhaBlocoPlacar(Graphics2D g2d, int informacao, int coordenadaX, int coordenadaY, int largura, int altura) { float transparencia = 0.5f; AlphaComposite alphaComposite = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, transparencia); g2d.setComposite(alphaComposite); int xCentralizado = coordenadaX + (largura - g2d.getFontMetrics().stringWidth(String.valueOf(informacao))) / 2; int yCentralizado = coordenadaY + altura / 2 + g2d.getFontMetrics().getHeight() / 4; g2d.setColor(new Color(128, 128, 128, 128)); g2d.fillRect(coordenadaX, coordenadaY, largura, altura); g2d.setComposite(AlphaComposite.SrcOver); g2d.setColor(Color.BLACK); Font fonte = carregaFonteDoDisco(\"f1.ttf\", 40f); g2d.setFont(fonte); String mensagem = String.valueOf(informacao); g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON); g2d.drawString(mensagem, xCentralizado, yCentralizado); } private void desenhaInformacao(Graphics2D g2d, String campo, int coordenadaX, int coordenadaY, int largura, int altura) { g2d.setColor(Color.BLACK); var fonte = carregaFonteDoDisco(\"f1.ttf\", 40f); g2d.setFont(fonte); int xCentralizado = coordenadaX + (largura - g2d.getFontMetrics().stringWidth(campo)) / 2; g2d.drawString(campo, xCentralizado, coordenadaY - 10); } }"}]}}
{"project_id":197,"chunk_id":0,"content":{"main_file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/Mapa.java","main_file_content":"package engtelecom.poo; import java.awt.Graphics2D; import java.io.FileNotFoundException; import java.io.IOException; import java.io.InputStream; import java.util.ArrayList; import java.util.Random; import java.util.Scanner; import engtelecom.poo.elementos.Poder; import engtelecom.poo.elementos.Tijolo; import engtelecom.poo.elementos.TipoTijolo; public class Mapa { private Tijolo[][] tijolos; private ArrayList<Integer> tipoTijolos; private int numeroPoderes; private int numeroColunas; private int numeroLinhas; private int fatorX; private int fatorY; private int nivel; private final static int MAX_NIVEL = 4; private final static int MIN_NIVEL = 1; public Mapa(int coordenadaX, int coordenadaY) { this.nivel = MIN_NIVEL; this.tipoTijolos = new ArrayList<>(); selecionaMapa(); } private void selecionaMapa() { String caminhoArquivo = \"\"; switch (this.nivel) { case 1: caminhoArquivo = \"/niveis/n1.csv\"; break; case 2: caminhoArquivo = \"/niveis/n2.csv\"; break; case 3: caminhoArquivo = \"/niveis/n3.csv\"; break; case 4: caminhoArquivo = \"/niveis/n4.csv\"; } try { ler(caminhoArquivo); } catch (IOException e) { e.printStackTrace(); } } public void avancarNivel() { if (this.nivel < MAX_NIVEL) { this.nivel++; } else { this.nivel = MIN_NIVEL; } selecionaMapa(); } public void resetarNivel() { this.nivel = MIN_NIVEL; selecionaMapa(); } private void ler(String nomeDoArquivo) throws IOException { try (InputStream is = this.getClass().getResourceAsStream(nomeDoArquivo); Scanner linha = new Scanner(is)) { String s = linha.nextLine(); String[] numeroElementos = s.split(\",\"); this.numeroPoderes = Integer.parseInt(numeroElementos[0]); String s2 = linha.nextLine(); String[] tipoTijolos = s2.split(\",\"); for (var tijolo : tipoTijolos) { this.tipoTijolos.add(Integer.parseInt(tijolo)); } String s3 = linha.nextLine(); String[] fatores = s3.split(\",\"); this.fatorX = Integer.parseInt(fatores[0]); this.fatorY = Integer.parseInt(fatores[1]); String s4 = linha.nextLine(); String[] matriz = s4.split(\",\"); this.numeroLinhas = Integer.parseInt(matriz[0]); this.numeroColunas = Integer.parseInt(matriz[1]); preencherMapa(); } catch (FileNotFoundException e) { System.err.println(\"arquivo não encontrado: \" + e); } } private void sorteiaPoderesNosTijolos() { Random rand = new Random(); int numeroSorteios = this.numeroPoderes; while (numeroSorteios > 0) { int coluna = rand.nextInt(this.numeroColunas); int linha = rand.nextInt(this.numeroLinhas); Tijolo tijoloSorteado = this.tijolos[linha][coluna]; if (tijoloSorteado != null && tijoloSorteado.getPoder() == null && tijoloSorteado.getModelo() != TipoTijolo.INDESTRUTIVEL) { int poderId = rand.nextInt(3) + 1; tijoloSorteado.setPoder(new Poder(poderId, tijoloSorteado.getCoordenadaX(), tijoloSorteado.getCoordenadaY(), Poder.VELOCIDADE_X_INICIAL, Poder.VELOCIDADE_Y_INICIAL, Poder.ALTURA_PODER, Poder.LARGURA_PODER)); numeroSorteios--; } } } private void removerTijolo(int i, int j) { this.tijolos[i][j] = null; } private void preencherMapa() { int indiceTijolo = 0; this.tijolos = new Tijolo[numeroLinhas][numeroColunas]; for (int i = 0; i < numeroLinhas; i++) { for (int j = 0; j < numeroColunas; j++) { adicionarTijolo(i, j, indiceTijolo); indiceTijolo++; } } sorteiaPoderesNosTijolos(); } private void adicionarTijolo(int i, int j, int indiceTijolo) { int modelo = tipoTijolos.get(indiceTijolo); this.tijolos[i][j] = new Tijolo( indiceTijolo, modelo, fatorX + j * (fatorX), fatorY + i * (+fatorY), Tijolo.ALTURA_TIJOLO, Tijolo.LARGURA_TIJOLO); } public void desenharMatriz(Graphics2D g2d) { for (int i = 0; i < numeroLinhas; i++) { for (int j = 0; j < numeroColunas; j++) { if (this.tijolos[i][j] != null) { this.tijolos[i][j].desenhar(g2d); if (this.tijolos[i][j].getPoder() != null) { this.tijolos[i][j].getPoder().desenhar(g2d); } } } } } public Tijolo getTijolo(int i, int j) { return tijolos[i][j]; } public int getNumeroLinhas() { return this.numeroLinhas; } public int getNumeroColunas() { return this.numeroColunas; } }","dependencies":[{"file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/elementos/Poder.java","file_content":"package engtelecom.poo.elementos; import java.awt.Color; import java.awt.Graphics2D; public class Poder extends Elemento implements Movimenta { public static final int VELOCIDADE_X_INICIAL = 0; public static final int VELOCIDADE_Y_INICIAL = 2; public static final int ALTURA_PODER = 25; public static final int LARGURA_PODER = 25; public static final Color COR_PODER = Color.RED; private TipoPoder tipoPoder; private boolean apareceNaTela; private boolean capturado; public Poder(int id, int coordenadaX, int coordenadaY, int velocidadeX, int velocidadeY, int altura, int largura) { super(coordenadaX, coordenadaY, velocidadeX, velocidadeY, ALTURA_PODER, LARGURA_PODER); this.tipoPoder = TipoPoder.getById(id); this.apareceNaTela = false; this.capturado = false; } public void setPoder(int id) { this.tipoPoder = TipoPoder.getById(id); } @Override public void desenhar(Graphics2D g2d) { if (apareceNaTela) { movimentar(); this.imagem = carregarImagem(\"imagens/base-poder.png\"); g2d.drawImage(imagem, this.coordenadaX, this.coordenadaY, this.largura, this.altura, null); this.imagem = carregarImagem(this.tipoPoder.caminho); g2d.drawImage(imagem, this.coordenadaX, this.coordenadaY, this.largura, this.altura, null); } } @Override public void movimentar() { if (apareceNaTela) { coordenadaY += velocidadeY; } } public void ligarEstadoDesenho() { this.apareceNaTela = true; } public void desligarEstadoDesenho() { this.apareceNaTela = false; } public TipoPoder getTipoPoder() { return this.tipoPoder; } public void capturar() { this.capturado = true; } public boolean jaFoiCapturado() { if (this.capturado) { return true; } return false; } }"},{"file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/elementos/Tijolo.java","file_content":"package engtelecom.poo.elementos; import java.awt.Color; import java.awt.Graphics2D; import java.awt.Image; public class Tijolo extends Elemento { private TipoTijolo modelo; private Poder poder; private int durabilidadeAtual; private int posicao; private Image imagem; public static final int LARGURA_TIJOLO = 60; public static final int ALTURA_TIJOLO = 30; public Tijolo(int posicao, int id, int coordenadaX, int coordenadaY, int altura, int largura) { super(coordenadaX, coordenadaY, altura, largura); this.modelo = TipoTijolo.getById(id); this.durabilidadeAtual = modelo.durabilidadeTotal; this.posicao = posicao; } public int getPosicao() { return posicao; } private void derrubarPoder() { Poder p = this.poder; if (p != null) { this.poder.ligarEstadoDesenho(); this.poder.movimentar(); } } public boolean diminuirDurabilidadeAtual() { if (durabilidadeAtual > 0) { durabilidadeAtual--; if (durabilidadeAtual == 0) { derrubarPoder(); } return true; } return false; } public void setPoder(Poder poder) { this.poder = poder; } public int getDurabilidadeAtual() { return durabilidadeAtual; } public TipoTijolo getModelo() { return this.modelo; } @Override public void desenhar(Graphics2D g2d) { if (durabilidadeAtual > 0) { this.imagem = carregarImagem(this.modelo.caminho); g2d.drawImage(imagem, this.coordenadaX, this.coordenadaY, this.largura, this.altura, null); } if (this.poder != null) { this.poder.desenhar(g2d); } } public Poder getPoder() { return this.poder; } }"}]}}
{"project_id":197,"chunk_id":0,"content":{"main_file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/App.java","main_file_content":"package engtelecom.poo; public class App { public static void main(String[] args) { JavanoidOO jogo = new JavanoidOO(); jogo.iniciar(); } }","dependencies":[{"file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/JavanoidOO.java","file_content":"package engtelecom.poo; import java.awt.Color; import java.awt.Graphics; import java.awt.Graphics2D; import java.awt.Image; import java.awt.MediaTracker; import java.awt.RenderingHints; import java.awt.Toolkit; import java.awt.event.KeyListener; import java.net.URL; import java.util.ArrayList; import javax.swing.ImageIcon; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.Timer; import engtelecom.poo.areas.Area; import engtelecom.poo.areas.AreaJogo; import engtelecom.poo.areas.AreaPainel; import engtelecom.poo.areas.AreaPlacar; public class JavanoidOO extends JPanel { private static final int FPS = 60; public final static int LARGURA_TELA = 800; public final static int ALTURA_TELA = 600; public static final int AREA_JOGO_X = 0; public static final int AREA_JOGO_Y = 0; public static final int AREA_JOGO_LARGURA = 500; public static final int AREA_JOGO_ALTURA = 600; public static final Color AREA_JOGO_COR = Color.BLACK; public static final int AREA_PLACAR_X = 500; public static final int AREA_PLACAR_Y = 0; public static final int AREA_PLACAR_LARGURA = 300; public static final int AREA_PLACAR_ALTURA = 600; public static final Color AREA_PLACAR_COR = Color.LIGHT_GRAY; public final static int AREA_PAINEL_X = 0; public final static int AREA_PAINEL_Y = 0; public final static int AREA_PAINEL_LARGURA = 800; public final static int AREA_PAINEL_ALTURA = 600; public final static Color AREA_PAINEL_COR = Color.LIGHT_GRAY; private ArrayList<Area> areas; private Timer timer; public JavanoidOO() { areas = new ArrayList<>(); areas.add(new AreaJogo(AREA_JOGO_X, AREA_JOGO_Y, AREA_JOGO_LARGURA, AREA_JOGO_ALTURA)); areas.add( new AreaPlacar(AREA_PLACAR_X, AREA_PLACAR_Y, AREA_PLACAR_LARGURA, AREA_PLACAR_ALTURA)); areas.add( new AreaPainel(AREA_PAINEL_X, AREA_PAINEL_Y, AREA_PAINEL_LARGURA, AREA_PAINEL_ALTURA)); } public void iniciar() { JFrame frame = new JFrame(); frame.setSize(LARGURA_TELA, ALTURA_TELA); frame.setTitle(\"JavanoidOO\"); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setResizable(false); frame.setLocationRelativeTo(null); frame.add(this); frame.addKeyListener((KeyListener) areas.get(0)); frame.setFocusable(true); frame.setVisible(true); this.timer = new Timer(1000 / FPS, e -> { repaint(); }); this.timer.start(); } @Override public void paint(Graphics g) { var g2d = (Graphics2D) g; g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON); g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY); for (var area : areas) { area.desenharArea(g2d); } Toolkit.getDefaultToolkit().sync(); } public Image carregarImagem(String arquivo) { try { var ii = new ImageIcon(getClass().getResource(\"/\" + arquivo)); if ((ii == null) || (ii.getImageLoadStatus() != MediaTracker.COMPLETE)) { URL url = getClass().getResource(\"/\" + arquivo); if (url == null) throw new IllegalArgumentException(\"Imagem \" + arquivo + \" não encontrada\"); ii = new ImageIcon(url); } return ii.getImage(); } catch (Exception e) { System.err.println(\"Erro ao carregar imagem: \" + e.getMessage()); e.printStackTrace(); return null; } } }"}]}}
{"project_id":197,"chunk_id":0,"content":{"main_file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/areas/AreaJogo.java","main_file_content":"package engtelecom.poo.areas; import java.awt.Color; import java.awt.Graphics2D; import java.awt.Rectangle; import engtelecom.poo.JavanoidOO; import engtelecom.poo.Mapa; import engtelecom.poo.elementos.Bolinha; import engtelecom.poo.elementos.Elemento; import engtelecom.poo.elementos.Plataforma; import engtelecom.poo.elementos.Poder; import engtelecom.poo.elementos.Tijolo; import engtelecom.poo.elementos.TipoPoder; import engtelecom.poo.elementos.TipoTijolo; import java.awt.event.KeyEvent; import java.awt.event.KeyListener; import java.util.ArrayList; public class AreaJogo extends Area implements KeyListener { private Mapa mapa; private ArrayList<Elemento> elementos; private boolean pausado; private boolean somLigado; private boolean fimDeJogo; public AreaJogo(int coordenadaX, int coordenadaY, int largura, int altura) { super(coordenadaX, coordenadaY, largura, altura); inicializarElementos(); inicializarMapa(); inicializarConfiguracoes(); } private void inicializarElementos() { elementos = new ArrayList<>(); elementos.add(new Bolinha()); elementos.add(new Plataforma()); } private void inicializarMapa() { mapa = new Mapa(largura, altura); Bolinha bolinha = (Bolinha) elementos.get(0); bolinha.resetarPosicao(); } private void inicializarConfiguracoes() { pausado = false; somLigado = true; fimDeJogo = false; } @Override public void desenharArea(Graphics2D g2d) { this.imagem = carregarImagem(\"imagens/area-jogo.png\"); g2d.drawImage(imagem, this.coordenadaX, this.coordenadaY, this.largura, this.altura, null); if (!this.pausado && !verificaTerminoJogo()) { mapa.desenharMatriz(g2d); desenharElementos(g2d); } else { desenharMensagem(g2d); } } private boolean verificaTerminoJogo() { if (AreaPlacar.fatorVida == 0) { this.fimDeJogo = true; mapa.resetarNivel(); } return fimDeJogo; } private void desenharMensagem(Graphics2D g2d) { g2d.setColor(Color.LIGHT_GRAY); var fonte = carregaFonteDoDisco(\"f1.ttf\", 55f); g2d.setFont(fonte); String mensagem; if (fimDeJogo) { mensagem = \"game over\"; } else { mensagem = \"game paused\"; } g2d.drawString(mensagem, JavanoidOO.AREA_JOGO_X + (JavanoidOO.AREA_JOGO_LARGURA / 8), JavanoidOO.AREA_JOGO_ALTURA / 2); } private void desenharElementos(Graphics2D g2d) { for (var elemento : elementos) { elemento.desenhar(g2d); } verificarColisoes(); movimentarBolinhaEmJogo(); } private void verificarColisoes() { Bolinha bolinha = (Bolinha) elementos.get(0); Plataforma plataforma = (Plataforma) elementos.get(1); colisaoBolinhaPlataforma(bolinha, plataforma); colisaoPlataformaPoderes(plataforma); colisaoBolinhaTijolos(bolinha); } private void movimentarBolinhaEmJogo() { Bolinha bolinha = (Bolinha) elementos.get(0); bolinha.movimentar(); if (bolinha.getCoordenadaX() < 0 || bolinha.getCoordenadaX() + bolinha.getLargura() > this.largura) { bolinha.setVelocidadeX(bolinha.getVelocidadeX() * -1); } if (bolinha.getCoordenadaY() < 0 || bolinha.getCoordenadaY() + bolinha.getAltura() > this.altura) { bolinha.setVelocidadeY(bolinha.getVelocidadeY() * -1); } if (passouBordaJogo(bolinha)) { AreaPlacar.removerVida(); bolinha.resetarPosicao(); verificaTerminoJogo(); } } private boolean passouBordaJogo(Bolinha b) { return b.getCoordenadaY() + b.getAltura() > this.altura; } private void movimentarPlataformaEmJogo(Plataforma plataforma) { plataforma.movimentar(); if (plataforma.getCoordenadaX() < this.coordenadaX) { plataforma.setCoordenadaX(0); } if (plataforma.getCoordenadaX() + plataforma.getLargura() > this.largura) { plataforma.setCoordenadaX(this.largura - plataforma.getLargura()); } } public boolean processarColisaoBolinhaTijolo(Bolinha bolinha, Tijolo tijolo) { if (colisaoBlocoFixo(bolinha, tijolo)) { int margem = 5; if (bolinha.getCoordenadaX() + bolinha.getLargura() - margem <= tijolo.getCoordenadaX() || bolinha.getCoordenadaX() + margem >= tijolo.getCoordenadaX() + tijolo.getLargura()) { bolinha.setVelocidadeX(bolinha.getVelocidadeX() * -1); } else { bolinha.setVelocidadeY(bolinha.getVelocidadeY() * -1); } return true; } return false; } private void colisaoBolinhaTijolos(Bolinha bolinha) { boolean todosTijolosDestruidos = true; for (int i = 0; i < mapa.getNumeroLinhas(); i++) { for (int j = 0; j < mapa.getNumeroColunas(); j++) { Tijolo tijolo = mapa.getTijolo(i, j); int valor = tijolo.getModelo().valor; if (tijolo.getDurabilidadeAtual() > 0) { if (processarColisaoBolinhaTijolo(bolinha, tijolo)) { tijolo.diminuirDurabilidadeAtual(); if (tijolo.getDurabilidadeAtual() == 0) { AreaPlacar.adicionarPontuacao(valor); } else if (tijolo.getModelo() == TipoTijolo.INDESTRUTIVEL) { AreaPlacar.adicionarPontuacao(valor); } } if (tijolo.getModelo() != TipoTijolo.INDESTRUTIVEL) { todosTijolosDestruidos = false; } } } } if (todosTijolosDestruidos) { mapa.avancarNivel(); } } private boolean colisaoBolinhaPlataforma(Bolinha bolinha, Plataforma plataforma) { if (colisaoBlocoFixo(bolinha, plataforma)) { bolinha.setCoordenadaY(plataforma.getCoordenadaY() - bolinha.getAltura()); bolinha.setVelocidadeY(bolinha.getVelocidadeY() * -1); return true; } return false; } private void colisaoPlataformaPoderes(Plataforma plataforma) { for (int i = 0; i < mapa.getNumeroLinhas(); i++) { for (int j = 0; j < mapa.getNumeroColunas(); j++) { Tijolo tijoloSelecionado = this.mapa.getTijolo(i, j); if (tijoloSelecionado != null && tijoloSelecionado.getPoder() != null) { Poder poder = tijoloSelecionado.getPoder(); if (colisaoBlocoFixo(plataforma, poder) && !poder.jaFoiCapturado()) { aplicaEfeitoPoder(plataforma, poder); poder.capturar(); poder.desligarEstadoDesenho(); } } } } } private void aplicaEfeitoPoder(Plataforma plataforma, Poder poder) { TipoPoder tipo = poder.getTipoPoder(); switch (tipo) { case MAX_VELOCIDADE: plataforma.aumentarTamanho(); break; case MIN_VELOCIDADE: plataforma.diminuirTamanho(); break; case VIDA_EXTRA: AreaPlacar.adicionarVida(); break; } } private boolean colisaoBlocoFixo(Elemento elementoA, Elemento elementoB) { Rectangle a = new Rectangle(elementoA.getCoordenadaX(), elementoA.getCoordenadaY(), elementoA.getLargura(), elementoA.getAltura()); Rectangle b = new Rectangle(elementoB.getCoordenadaX(), elementoB.getCoordenadaY(), elementoB.getLargura(), elementoB.getAltura()); return a.intersects(b); } public void processaTeclaPressionada(KeyEvent e) { Plataforma plataforma = (Plataforma) elementos.get(1); int keyCode = e.getKeyCode(); switch (keyCode) { case KeyEvent.VK_RIGHT: plataforma.setVelocidadeX(10); movimentarPlataformaEmJogo(plataforma); break; case KeyEvent.VK_LEFT: plataforma.setVelocidadeX(-10); movimentarPlataformaEmJogo(plataforma); break; case KeyEvent.VK_Q: System.exit(0); break; case KeyEvent.VK_S: this.somLigado = !this.somLigado; System.out.println(\"Som ligado: \" + this.somLigado); break; case KeyEvent.VK_SPACE: this.pausado = !this.pausado; break; } } public void processaTeclaSolta(KeyEvent e) { Plataforma plataforma = (Plataforma) elementos.get(1); switch (e.getKeyCode()) { case KeyEvent.VK_RIGHT: case KeyEvent.VK_LEFT: plataforma.setVelocidadeX(0); break; } } @Override public void keyPressed(KeyEvent e) { processaTeclaPressionada(e); } @Override public void keyReleased(KeyEvent e) { processaTeclaSolta(e); } @Override public void keyTyped(KeyEvent e) { } }","dependencies":[{"file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/Mapa.java","file_content":"package engtelecom.poo; import java.awt.Graphics2D; import java.io.FileNotFoundException; import java.io.IOException; import java.io.InputStream; import java.util.ArrayList; import java.util.Random; import java.util.Scanner; import engtelecom.poo.elementos.Poder; import engtelecom.poo.elementos.Tijolo; import engtelecom.poo.elementos.TipoTijolo; public class Mapa { private Tijolo[][] tijolos; private ArrayList<Integer> tipoTijolos; private int numeroPoderes; private int numeroColunas; private int numeroLinhas; private int fatorX; private int fatorY; private int nivel; private final static int MAX_NIVEL = 4; private final static int MIN_NIVEL = 1; public Mapa(int coordenadaX, int coordenadaY) { this.nivel = MIN_NIVEL; this.tipoTijolos = new ArrayList<>(); selecionaMapa(); } private void selecionaMapa() { String caminhoArquivo = \"\"; switch (this.nivel) { case 1: caminhoArquivo = \"/niveis/n1.csv\"; break; case 2: caminhoArquivo = \"/niveis/n2.csv\"; break; case 3: caminhoArquivo = \"/niveis/n3.csv\"; break; case 4: caminhoArquivo = \"/niveis/n4.csv\"; } try { ler(caminhoArquivo); } catch (IOException e) { e.printStackTrace(); } } public void avancarNivel() { if (this.nivel < MAX_NIVEL) { this.nivel++; } else { this.nivel = MIN_NIVEL; } selecionaMapa(); } public void resetarNivel() { this.nivel = MIN_NIVEL; selecionaMapa(); } private void ler(String nomeDoArquivo) throws IOException { try (InputStream is = this.getClass().getResourceAsStream(nomeDoArquivo); Scanner linha = new Scanner(is)) { String s = linha.nextLine(); String[] numeroElementos = s.split(\",\"); this.numeroPoderes = Integer.parseInt(numeroElementos[0]); String s2 = linha.nextLine(); String[] tipoTijolos = s2.split(\",\"); for (var tijolo : tipoTijolos) { this.tipoTijolos.add(Integer.parseInt(tijolo)); } String s3 = linha.nextLine(); String[] fatores = s3.split(\",\"); this.fatorX = Integer.parseInt(fatores[0]); this.fatorY = Integer.parseInt(fatores[1]); String s4 = linha.nextLine(); String[] matriz = s4.split(\",\"); this.numeroLinhas = Integer.parseInt(matriz[0]); this.numeroColunas = Integer.parseInt(matriz[1]); preencherMapa(); } catch (FileNotFoundException e) { System.err.println(\"arquivo não encontrado: \" + e); } } private void sorteiaPoderesNosTijolos() { Random rand = new Random(); int numeroSorteios = this.numeroPoderes; while (numeroSorteios > 0) { int coluna = rand.nextInt(this.numeroColunas); int linha = rand.nextInt(this.numeroLinhas); Tijolo tijoloSorteado = this.tijolos[linha][coluna]; if (tijoloSorteado != null && tijoloSorteado.getPoder() == null && tijoloSorteado.getModelo() != TipoTijolo.INDESTRUTIVEL) { int poderId = rand.nextInt(3) + 1; tijoloSorteado.setPoder(new Poder(poderId, tijoloSorteado.getCoordenadaX(), tijoloSorteado.getCoordenadaY(), Poder.VELOCIDADE_X_INICIAL, Poder.VELOCIDADE_Y_INICIAL, Poder.ALTURA_PODER, Poder.LARGURA_PODER)); numeroSorteios--; } } } private void removerTijolo(int i, int j) { this.tijolos[i][j] = null; } private void preencherMapa() { int indiceTijolo = 0; this.tijolos = new Tijolo[numeroLinhas][numeroColunas]; for (int i = 0; i < numeroLinhas; i++) { for (int j = 0; j < numeroColunas; j++) { adicionarTijolo(i, j, indiceTijolo); indiceTijolo++; } } sorteiaPoderesNosTijolos(); } private void adicionarTijolo(int i, int j, int indiceTijolo) { int modelo = tipoTijolos.get(indiceTijolo); this.tijolos[i][j] = new Tijolo( indiceTijolo, modelo, fatorX + j * (fatorX), fatorY + i * (+fatorY), Tijolo.ALTURA_TIJOLO, Tijolo.LARGURA_TIJOLO); } public void desenharMatriz(Graphics2D g2d) { for (int i = 0; i < numeroLinhas; i++) { for (int j = 0; j < numeroColunas; j++) { if (this.tijolos[i][j] != null) { this.tijolos[i][j].desenhar(g2d); if (this.tijolos[i][j].getPoder() != null) { this.tijolos[i][j].getPoder().desenhar(g2d); } } } } } public Tijolo getTijolo(int i, int j) { return tijolos[i][j]; } public int getNumeroLinhas() { return this.numeroLinhas; } public int getNumeroColunas() { return this.numeroColunas; } }"},{"file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/areas/Area.java","file_content":"package engtelecom.poo.areas; import java.awt.Color; import java.awt.Font; import java.awt.FontFormatException; import java.awt.Graphics2D; import java.io.IOException; import java.io.InputStream; import java.awt.Image; import java.awt.MediaTracker; import java.net.URL; import javax.swing.ImageIcon; public abstract class Area { protected int coordenadaX; protected int coordenadaY; protected int largura; protected int altura; protected Image imagem; public Area(int coordenadaX, int coordenadaY, int largura, int altura) { this.coordenadaX = coordenadaX; this.coordenadaY = coordenadaY; this.largura = largura; this.altura = altura; } public abstract void desenharArea(Graphics2D g2d); public Font carregaFonteDoDisco(String nome, float tamanho) { InputStream is = getClass().getResourceAsStream(\"/fontes/\" + nome); try { var font = Font.createFont(Font.TRUETYPE_FONT, is).deriveFont(tamanho); return font; } catch (FontFormatException | IOException e) { System.err.println(\"erro ao ler font do disco: \" + e); } return null; } public Image carregarImagem(String arquivo) { try { var ii = new ImageIcon(getClass().getResource(\"/\" + arquivo)); if ((ii == null) || (ii.getImageLoadStatus() != MediaTracker.COMPLETE)) { URL url = getClass().getResource(\"/\" + arquivo); if (url == null) throw new IllegalArgumentException(\"Imagem \" + arquivo + \" não encontrada\"); ii = new ImageIcon(url); } return ii.getImage(); } catch (Exception e) { System.err.println(\"Erro ao carregar imagem: \" + e.getMessage()); e.printStackTrace(); return null; } } }"},{"file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/areas/AreaPlacar.java","file_content":"package engtelecom.poo.areas; import java.awt.Color; import java.awt.Graphics2D; import java.awt.AlphaComposite; import java.awt.Font; import java.awt.RenderingHints; public class AreaPlacar extends Area { private final int PONTUACAO_COORDENADA_X; private final int PONTUACAO_COORDENADA_Y; private final int PONTUACAO_LARGURA; private final int PONTUACAO_ALTURA; private final int VIDAS_COORDENADA_X; private final int VIDAS_COORDENADA_Y; private final int VIDAS_LARGURA; private final int VIDAS_ALTURA; public static int fatorPontuacao; public static int fatorVida; public AreaPlacar(int coordenadaX, int coordenadaY, int largura, int altura) { super(coordenadaX, coordenadaY, largura, altura); int margem = 20; this.PONTUACAO_COORDENADA_X = this.coordenadaX + margem; this.PONTUACAO_COORDENADA_Y = coordenadaY + altura / 6; this.PONTUACAO_ALTURA = altura / 6; this.PONTUACAO_LARGURA = this.largura - margem * 3; this.VIDAS_COORDENADA_X = this.coordenadaX + margem; this.VIDAS_COORDENADA_Y = coordenadaY + altura / 2; this.VIDAS_ALTURA = altura / 6; this.VIDAS_LARGURA = this.largura - margem * 3; AreaPlacar.fatorPontuacao = 0; AreaPlacar.fatorVida = 3; } public static void adicionarVida() { AreaPlacar.fatorVida++; } public static void removerVida() { AreaPlacar.fatorVida--; } public static void adicionarPontuacao(int pontos) { AreaPlacar.fatorPontuacao += pontos; } @Override public void desenharArea(Graphics2D g2d) { this.imagem = carregarImagem(\"imagens/area-placar.png\"); g2d.drawImage(imagem, this.coordenadaX, this.coordenadaY, this.largura, this.altura, null); desenhaInformacao(g2d, \"Score\", PONTUACAO_COORDENADA_X, PONTUACAO_COORDENADA_Y, PONTUACAO_LARGURA, PONTUACAO_ALTURA); desenhaInformacao(g2d, \"Balls\", VIDAS_COORDENADA_X, VIDAS_COORDENADA_Y, VIDAS_LARGURA, VIDAS_ALTURA); desenhaBlocoPlacar(g2d, AreaPlacar.fatorPontuacao, PONTUACAO_COORDENADA_X, PONTUACAO_COORDENADA_Y, PONTUACAO_LARGURA, PONTUACAO_ALTURA); desenhaBlocoPlacar(g2d, AreaPlacar.fatorVida, VIDAS_COORDENADA_X, VIDAS_COORDENADA_Y, VIDAS_LARGURA, VIDAS_ALTURA); } private void desenhaBlocoPlacar(Graphics2D g2d, int informacao, int coordenadaX, int coordenadaY, int largura, int altura) { float transparencia = 0.5f; AlphaComposite alphaComposite = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, transparencia); g2d.setComposite(alphaComposite); int xCentralizado = coordenadaX + (largura - g2d.getFontMetrics().stringWidth(String.valueOf(informacao))) / 2; int yCentralizado = coordenadaY + altura / 2 + g2d.getFontMetrics().getHeight() / 4; g2d.setColor(new Color(128, 128, 128, 128)); g2d.fillRect(coordenadaX, coordenadaY, largura, altura); g2d.setComposite(AlphaComposite.SrcOver); g2d.setColor(Color.BLACK); Font fonte = carregaFonteDoDisco(\"f1.ttf\", 40f); g2d.setFont(fonte); String mensagem = String.valueOf(informacao); g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON); g2d.drawString(mensagem, xCentralizado, yCentralizado); } private void desenhaInformacao(Graphics2D g2d, String campo, int coordenadaX, int coordenadaY, int largura, int altura) { g2d.setColor(Color.BLACK); var fonte = carregaFonteDoDisco(\"f1.ttf\", 40f); g2d.setFont(fonte); int xCentralizado = coordenadaX + (largura - g2d.getFontMetrics().stringWidth(campo)) / 2; g2d.drawString(campo, xCentralizado, coordenadaY - 10); } }"}]}}
{"project_id":197,"chunk_id":1,"content":{"main_file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/areas/AreaJogo.java","main_file_content":"package engtelecom.poo.areas; import java.awt.Color; import java.awt.Graphics2D; import java.awt.Rectangle; import engtelecom.poo.JavanoidOO; import engtelecom.poo.Mapa; import engtelecom.poo.elementos.Bolinha; import engtelecom.poo.elementos.Elemento; import engtelecom.poo.elementos.Plataforma; import engtelecom.poo.elementos.Poder; import engtelecom.poo.elementos.Tijolo; import engtelecom.poo.elementos.TipoPoder; import engtelecom.poo.elementos.TipoTijolo; import java.awt.event.KeyEvent; import java.awt.event.KeyListener; import java.util.ArrayList; public class AreaJogo extends Area implements KeyListener { private Mapa mapa; private ArrayList<Elemento> elementos; private boolean pausado; private boolean somLigado; private boolean fimDeJogo; public AreaJogo(int coordenadaX, int coordenadaY, int largura, int altura) { super(coordenadaX, coordenadaY, largura, altura); inicializarElementos(); inicializarMapa(); inicializarConfiguracoes(); } private void inicializarElementos() { elementos = new ArrayList<>(); elementos.add(new Bolinha()); elementos.add(new Plataforma()); } private void inicializarMapa() { mapa = new Mapa(largura, altura); Bolinha bolinha = (Bolinha) elementos.get(0); bolinha.resetarPosicao(); } private void inicializarConfiguracoes() { pausado = false; somLigado = true; fimDeJogo = false; } @Override public void desenharArea(Graphics2D g2d) { this.imagem = carregarImagem(\"imagens/area-jogo.png\"); g2d.drawImage(imagem, this.coordenadaX, this.coordenadaY, this.largura, this.altura, null); if (!this.pausado && !verificaTerminoJogo()) { mapa.desenharMatriz(g2d); desenharElementos(g2d); } else { desenharMensagem(g2d); } } private boolean verificaTerminoJogo() { if (AreaPlacar.fatorVida == 0) { this.fimDeJogo = true; mapa.resetarNivel(); } return fimDeJogo; } private void desenharMensagem(Graphics2D g2d) { g2d.setColor(Color.LIGHT_GRAY); var fonte = carregaFonteDoDisco(\"f1.ttf\", 55f); g2d.setFont(fonte); String mensagem; if (fimDeJogo) { mensagem = \"game over\"; } else { mensagem = \"game paused\"; } g2d.drawString(mensagem, JavanoidOO.AREA_JOGO_X + (JavanoidOO.AREA_JOGO_LARGURA / 8), JavanoidOO.AREA_JOGO_ALTURA / 2); } private void desenharElementos(Graphics2D g2d) { for (var elemento : elementos) { elemento.desenhar(g2d); } verificarColisoes(); movimentarBolinhaEmJogo(); } private void verificarColisoes() { Bolinha bolinha = (Bolinha) elementos.get(0); Plataforma plataforma = (Plataforma) elementos.get(1); colisaoBolinhaPlataforma(bolinha, plataforma); colisaoPlataformaPoderes(plataforma); colisaoBolinhaTijolos(bolinha); } private void movimentarBolinhaEmJogo() { Bolinha bolinha = (Bolinha) elementos.get(0); bolinha.movimentar(); if (bolinha.getCoordenadaX() < 0 || bolinha.getCoordenadaX() + bolinha.getLargura() > this.largura) { bolinha.setVelocidadeX(bolinha.getVelocidadeX() * -1); } if (bolinha.getCoordenadaY() < 0 || bolinha.getCoordenadaY() + bolinha.getAltura() > this.altura) { bolinha.setVelocidadeY(bolinha.getVelocidadeY() * -1); } if (passouBordaJogo(bolinha)) { AreaPlacar.removerVida(); bolinha.resetarPosicao(); verificaTerminoJogo(); } } private boolean passouBordaJogo(Bolinha b) { return b.getCoordenadaY() + b.getAltura() > this.altura; } private void movimentarPlataformaEmJogo(Plataforma plataforma) { plataforma.movimentar(); if (plataforma.getCoordenadaX() < this.coordenadaX) { plataforma.setCoordenadaX(0); } if (plataforma.getCoordenadaX() + plataforma.getLargura() > this.largura) { plataforma.setCoordenadaX(this.largura - plataforma.getLargura()); } } public boolean processarColisaoBolinhaTijolo(Bolinha bolinha, Tijolo tijolo) { if (colisaoBlocoFixo(bolinha, tijolo)) { int margem = 5; if (bolinha.getCoordenadaX() + bolinha.getLargura() - margem <= tijolo.getCoordenadaX() || bolinha.getCoordenadaX() + margem >= tijolo.getCoordenadaX() + tijolo.getLargura()) { bolinha.setVelocidadeX(bolinha.getVelocidadeX() * -1); } else { bolinha.setVelocidadeY(bolinha.getVelocidadeY() * -1); } return true; } return false; } private void colisaoBolinhaTijolos(Bolinha bolinha) { boolean todosTijolosDestruidos = true; for (int i = 0; i < mapa.getNumeroLinhas(); i++) { for (int j = 0; j < mapa.getNumeroColunas(); j++) { Tijolo tijolo = mapa.getTijolo(i, j); int valor = tijolo.getModelo().valor; if (tijolo.getDurabilidadeAtual() > 0) { if (processarColisaoBolinhaTijolo(bolinha, tijolo)) { tijolo.diminuirDurabilidadeAtual(); if (tijolo.getDurabilidadeAtual() == 0) { AreaPlacar.adicionarPontuacao(valor); } else if (tijolo.getModelo() == TipoTijolo.INDESTRUTIVEL) { AreaPlacar.adicionarPontuacao(valor); } } if (tijolo.getModelo() != TipoTijolo.INDESTRUTIVEL) { todosTijolosDestruidos = false; } } } } if (todosTijolosDestruidos) { mapa.avancarNivel(); } } private boolean colisaoBolinhaPlataforma(Bolinha bolinha, Plataforma plataforma) { if (colisaoBlocoFixo(bolinha, plataforma)) { bolinha.setCoordenadaY(plataforma.getCoordenadaY() - bolinha.getAltura()); bolinha.setVelocidadeY(bolinha.getVelocidadeY() * -1); return true; } return false; } private void colisaoPlataformaPoderes(Plataforma plataforma) { for (int i = 0; i < mapa.getNumeroLinhas(); i++) { for (int j = 0; j < mapa.getNumeroColunas(); j++) { Tijolo tijoloSelecionado = this.mapa.getTijolo(i, j); if (tijoloSelecionado != null && tijoloSelecionado.getPoder() != null) { Poder poder = tijoloSelecionado.getPoder(); if (colisaoBlocoFixo(plataforma, poder) && !poder.jaFoiCapturado()) { aplicaEfeitoPoder(plataforma, poder); poder.capturar(); poder.desligarEstadoDesenho(); } } } } } private void aplicaEfeitoPoder(Plataforma plataforma, Poder poder) { TipoPoder tipo = poder.getTipoPoder(); switch (tipo) { case MAX_VELOCIDADE: plataforma.aumentarTamanho(); break; case MIN_VELOCIDADE: plataforma.diminuirTamanho(); break; case VIDA_EXTRA: AreaPlacar.adicionarVida(); break; } } private boolean colisaoBlocoFixo(Elemento elementoA, Elemento elementoB) { Rectangle a = new Rectangle(elementoA.getCoordenadaX(), elementoA.getCoordenadaY(), elementoA.getLargura(), elementoA.getAltura()); Rectangle b = new Rectangle(elementoB.getCoordenadaX(), elementoB.getCoordenadaY(), elementoB.getLargura(), elementoB.getAltura()); return a.intersects(b); } public void processaTeclaPressionada(KeyEvent e) { Plataforma plataforma = (Plataforma) elementos.get(1); int keyCode = e.getKeyCode(); switch (keyCode) { case KeyEvent.VK_RIGHT: plataforma.setVelocidadeX(10); movimentarPlataformaEmJogo(plataforma); break; case KeyEvent.VK_LEFT: plataforma.setVelocidadeX(-10); movimentarPlataformaEmJogo(plataforma); break; case KeyEvent.VK_Q: System.exit(0); break; case KeyEvent.VK_S: this.somLigado = !this.somLigado; System.out.println(\"Som ligado: \" + this.somLigado); break; case KeyEvent.VK_SPACE: this.pausado = !this.pausado; break; } } public void processaTeclaSolta(KeyEvent e) { Plataforma plataforma = (Plataforma) elementos.get(1); switch (e.getKeyCode()) { case KeyEvent.VK_RIGHT: case KeyEvent.VK_LEFT: plataforma.setVelocidadeX(0); break; } } @Override public void keyPressed(KeyEvent e) { processaTeclaPressionada(e); } @Override public void keyReleased(KeyEvent e) { processaTeclaSolta(e); } @Override public void keyTyped(KeyEvent e) { } }","dependencies":[{"file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/elementos/Bolinha.java","file_content":"package engtelecom.poo.elementos; import java.awt.Color; import java.awt.Graphics2D; import java.awt.Image; public class Bolinha extends Elemento implements Movimenta { private static final int COORD_X_INICIAL = 150; private static final int COORD_Y_INICIAL = 20; private static final int VELOCIDADE_X = 4; private static final int VELOCIDADE_Y = 4; private static final int DIMENSAO = 25; private static final Color COR = Color.WHITE; public Bolinha() { super(COORD_X_INICIAL, COORD_Y_INICIAL, VELOCIDADE_X, VELOCIDADE_Y, DIMENSAO, DIMENSAO); } public void resetarPosicao() { this.coordenadaX = COORD_X_INICIAL; this.coordenadaY = COORD_Y_INICIAL; } public void setVelocidadeX(int velocidadeX) { this.velocidadeX = velocidadeX; } public void setVelocidadeY(int velocidadeY) { this.velocidadeY = velocidadeY; } public int getCoordenadaX() { return coordenadaX; } public int getCoordenadaY() { return coordenadaY; } public int getVelocidadeX() { return velocidadeX; } public int getVelocidadeY() { return velocidadeY; } public int getLargura() { return largura; } public int getAltura() { return altura; } @Override public void desenhar(Graphics2D g2d) { this.imagem = carregarImagem(\"imagens/bolinha.png\"); g2d.drawImage(imagem, this.coordenadaX, this.coordenadaY, this.largura, this.altura, null); } @Override public void movimentar() { this.coordenadaX += this.velocidadeX; this.coordenadaY += this.velocidadeY; } }"},{"file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/elementos/Elemento.java","file_content":"package engtelecom.poo.elementos; import java.awt.Color; import java.awt.Graphics2D; import java.awt.Image; import java.awt.MediaTracker; import java.net.URL; import javax.swing.ImageIcon; public abstract class Elemento { protected int coordenadaX; protected int coordenadaY; protected int velocidadeX; protected int velocidadeY; protected int altura; protected int largura; protected Image imagem; public Elemento(int coordenadaX, int coordenadaY, int velocidadeX, int velocidadeY, int altura, int largura) { this.coordenadaX = coordenadaX; this.coordenadaY = coordenadaY; this.velocidadeX = velocidadeX; this.velocidadeY = velocidadeY; this.altura = altura; this.largura = largura; } public Elemento(int coordenadaX, int coordenadaY, int altura, int largura) { this.coordenadaX = coordenadaX; this.coordenadaY = coordenadaY; this.velocidadeX = 0; this.velocidadeY = 0; this.altura = altura; this.largura = largura; } public abstract void desenhar(Graphics2D g2d); public void setCoordenadaX(int coordenadaX) { this.coordenadaX = coordenadaX; } public void setCoordenadaY(int coordenadaY) { this.coordenadaY = coordenadaY; } public void setAltura(int altura) { this.altura = altura; } public void setLargura(int largura) { this.largura = largura; } public int getCoordenadaX() { return coordenadaX; } public int getCoordenadaY() { return coordenadaY; } public int getVelocidadeX() { return velocidadeX; } public int getVelocidadeY() { return velocidadeY; } public int getLargura() { return largura; } public int getAltura() { return altura; } public void setVelocidadeX(int velocidadeX) { this.velocidadeX = velocidadeX; } public void setVelocidadeY(int velocidadeY) { this.velocidadeY = velocidadeY; } public Image carregarImagem(String arquivo) { try { var ii = new ImageIcon(getClass().getResource(\"/\" + arquivo)); if ((ii == null) || (ii.getImageLoadStatus() != MediaTracker.COMPLETE)) { URL url = getClass().getResource(\"/\" + arquivo); if (url == null) throw new IllegalArgumentException(\"Imagem \" + arquivo + \" não encontrada\"); ii = new ImageIcon(url); } return ii.getImage(); } catch (Exception e) { System.err.println(\"Erro ao carregar imagem: \" + e.getMessage()); e.printStackTrace(); return null; } } }"},{"file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/elementos/Plataforma.java","file_content":"package engtelecom.poo.elementos; import java.awt.Color; import java.awt.Graphics2D; import java.awt.Image; public class Plataforma extends Elemento implements Movimenta { private Image imagem; private final static int COORDENADA_X_INICIAL = 100; private final static int COORDENADA_Y_INICIAL = 520; private final static int ALTURA = 25; private static final int TAM_ORIGINAL = 100; private static final double FATOR_TAMANHO_LIMITE = 0.2; private static final double FATOR_MUDANCA = 0.1; public Plataforma() { super(COORDENADA_X_INICIAL, COORDENADA_Y_INICIAL, 0, 0, ALTURA, TAM_ORIGINAL); } @Override public void desenhar(Graphics2D g2d) { this.imagem = carregarImagem(\"imagens/plataforma.png\"); g2d.drawImage(imagem, this.coordenadaX, this.coordenadaY, this.largura, this.altura, null); } public void aumentarTamanho() { int novaLargura = this.largura + (int) (this.largura * FATOR_MUDANCA); int limiteMax = (int) (TAM_ORIGINAL + TAM_ORIGINAL * FATOR_TAMANHO_LIMITE); if (novaLargura < limiteMax) { this.largura = novaLargura; } } public void diminuirTamanho() { int novaLargura = this.largura - (int) (this.largura * FATOR_MUDANCA); int limiteMin = (int) (TAM_ORIGINAL - TAM_ORIGINAL * FATOR_TAMANHO_LIMITE); if (novaLargura > limiteMin) { this.largura = novaLargura; } } @Override public void movimentar() { this.coordenadaX += this.velocidadeX; } public void setVelocidadeX(int velocidadeX) { this.velocidadeX = velocidadeX; } public int getVelocidadeX() { return velocidadeX; } }"},{"file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/elementos/Poder.java","file_content":"package engtelecom.poo.elementos; import java.awt.Color; import java.awt.Graphics2D; public class Poder extends Elemento implements Movimenta { public static final int VELOCIDADE_X_INICIAL = 0; public static final int VELOCIDADE_Y_INICIAL = 2; public static final int ALTURA_PODER = 25; public static final int LARGURA_PODER = 25; public static final Color COR_PODER = Color.RED; private TipoPoder tipoPoder; private boolean apareceNaTela; private boolean capturado; public Poder(int id, int coordenadaX, int coordenadaY, int velocidadeX, int velocidadeY, int altura, int largura) { super(coordenadaX, coordenadaY, velocidadeX, velocidadeY, ALTURA_PODER, LARGURA_PODER); this.tipoPoder = TipoPoder.getById(id); this.apareceNaTela = false; this.capturado = false; } public void setPoder(int id) { this.tipoPoder = TipoPoder.getById(id); } @Override public void desenhar(Graphics2D g2d) { if (apareceNaTela) { movimentar(); this.imagem = carregarImagem(\"imagens/base-poder.png\"); g2d.drawImage(imagem, this.coordenadaX, this.coordenadaY, this.largura, this.altura, null); this.imagem = carregarImagem(this.tipoPoder.caminho); g2d.drawImage(imagem, this.coordenadaX, this.coordenadaY, this.largura, this.altura, null); } } @Override public void movimentar() { if (apareceNaTela) { coordenadaY += velocidadeY; } } public void ligarEstadoDesenho() { this.apareceNaTela = true; } public void desligarEstadoDesenho() { this.apareceNaTela = false; } public TipoPoder getTipoPoder() { return this.tipoPoder; } public void capturar() { this.capturado = true; } public boolean jaFoiCapturado() { if (this.capturado) { return true; } return false; } }"},{"file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/elementos/Tijolo.java","file_content":"package engtelecom.poo.elementos; import java.awt.Color; import java.awt.Graphics2D; import java.awt.Image; public class Tijolo extends Elemento { private TipoTijolo modelo; private Poder poder; private int durabilidadeAtual; private int posicao; private Image imagem; public static final int LARGURA_TIJOLO = 60; public static final int ALTURA_TIJOLO = 30; public Tijolo(int posicao, int id, int coordenadaX, int coordenadaY, int altura, int largura) { super(coordenadaX, coordenadaY, altura, largura); this.modelo = TipoTijolo.getById(id); this.durabilidadeAtual = modelo.durabilidadeTotal; this.posicao = posicao; } public int getPosicao() { return posicao; } private void derrubarPoder() { Poder p = this.poder; if (p != null) { this.poder.ligarEstadoDesenho(); this.poder.movimentar(); } } public boolean diminuirDurabilidadeAtual() { if (durabilidadeAtual > 0) { durabilidadeAtual--; if (durabilidadeAtual == 0) { derrubarPoder(); } return true; } return false; } public void setPoder(Poder poder) { this.poder = poder; } public int getDurabilidadeAtual() { return durabilidadeAtual; } public TipoTijolo getModelo() { return this.modelo; } @Override public void desenhar(Graphics2D g2d) { if (durabilidadeAtual > 0) { this.imagem = carregarImagem(this.modelo.caminho); g2d.drawImage(imagem, this.coordenadaX, this.coordenadaY, this.largura, this.altura, null); } if (this.poder != null) { this.poder.desenhar(g2d); } } public Poder getPoder() { return this.poder; } }"},{"file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/elementos/TipoPoder.java","file_content":"package engtelecom.poo.elementos; import java.awt.Color; public enum TipoPoder { MAX_VELOCIDADE(1, \"imagens/max-velocidade.png\"), MIN_VELOCIDADE(2, \"imagens/min-velocidade.png\"), VIDA_EXTRA(3, \"imagens/vida-poder.png\"); public final int id; public final String caminho; TipoPoder(int id, String caminho) { this.id = id; this.caminho = caminho; } public static TipoPoder getById(int i) { for (TipoPoder poder : TipoPoder.values()) { if (i == poder.id) { return poder; } } throw new IllegalArgumentException(\"identificador de tijolo inválido\"); } }"}]}}
{"project_id":197,"chunk_id":0,"content":{"main_file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/areas/AreaPainel.java","main_file_content":"package engtelecom.poo.areas; import java.awt.Color; import java.awt.Graphics2D; import java.io.BufferedWriter; import java.io.File; import java.io.FileWriter; import java.util.ArrayList; import java.util.Scanner; import javax.swing.JOptionPane; public class AreaPainel extends Area { private ArrayList<Integer> melhoresPontuacoes; private ArrayList<String> melhoresJogadores; private boolean atualizacaoLiberada = true; private boolean nomeInserido = false; private boolean placarFinalDesenhado = false; public AreaPainel(int coordenadaX, int coordenadaY, int largura, int altura) { super(coordenadaX, coordenadaY, largura, altura); this.melhoresPontuacoes = new ArrayList<>(); this.melhoresJogadores = new ArrayList<>(); } @Override public void desenharArea(Graphics2D g2d) { if (AreaPlacar.fatorVida == 0 && atualizacaoLiberada && !nomeInserido && !placarFinalDesenhado) { ler(\"melhoresJogadores.csv\"); if (novaMelhorPontuacao()) { this.atualizacaoLiberada = false; String nomeJogadorAtual = receberNome(); atualizaMelhoresJogadores(nomeJogadorAtual); this.atualizacaoLiberada = true; if (!placarFinalDesenhado) { desenharMelhoresJogadores(g2d); placarFinalDesenhado = true; } nomeInserido = true; } else { this.nomeInserido = true; this.atualizacaoLiberada = true; if (!placarFinalDesenhado) { desenharMelhoresJogadores(g2d); placarFinalDesenhado = true; } } } if (placarFinalDesenhado) { desenharMelhoresJogadores(g2d); } } public String receberNome() { String nome = JOptionPane.showInputDialog(\"Enter your name\"); if (nome == null || nome.trim().isEmpty()) { JOptionPane.showMessageDialog(null, \"Mystery Player\"); return \"Mystery Player\"; } else { JOptionPane.showMessageDialog(null, nome); return nome; } } private void desenharMelhoresJogadores(Graphics2D g2d) { this.imagem = carregarImagem(\"imagens/area-painel.png\"); g2d.drawImage(imagem, this.coordenadaX, this.coordenadaY, this.largura, this.altura, null); g2d.setColor(Color.WHITE); var fonte = carregaFonteDoDisco(\"f1.ttf\", 40f); g2d.setFont(fonte); String titulo = \"BestOO Players\"; int larguraTitulo = g2d.getFontMetrics().stringWidth(titulo); int coordenadaXTitulo = this.coordenadaX + (this.largura - larguraTitulo) / 2; int coordenadaYTitulo = this.coordenadaY + altura / 3; g2d.drawString(titulo, coordenadaXTitulo, coordenadaYTitulo); int coordenadaY = this.coordenadaY + altura / 2; for (int i = 0; i < this.melhoresJogadores.size(); i++) { String mensagem = this.melhoresJogadores.get(i) + \" \" + this.melhoresPontuacoes.get(i); int larguraMensagem = g2d.getFontMetrics().stringWidth(mensagem); int coordenadaX = this.coordenadaX + (this.largura - larguraMensagem) / 2; g2d.drawString(mensagem, coordenadaX, coordenadaY); coordenadaY += 50; } } private void atualizaMelhoresJogadores(String nome) { String jogadorAtual = nome; int pontuacaoAtual = AreaPlacar.fatorPontuacao; melhoresJogadores.add(jogadorAtual); melhoresPontuacoes.add(pontuacaoAtual); ordenarMelhoresJogadores(); if (melhoresJogadores.size() > 5) { melhoresJogadores.remove(5); melhoresPontuacoes.remove(5); } salvarMelhoresEmArquivo(\"melhoresJogadores.csv\"); } private void ordenarMelhoresJogadores() { for (int i = 1; i < melhoresPontuacoes.size(); i++) { int pontuacaoAtual = melhoresPontuacoes.get(i); String jogadorAtual = melhoresJogadores.get(i); int j = i - 1; while (j >= 0 && melhoresPontuacoes.get(j) < pontuacaoAtual) { melhoresPontuacoes.set(j + 1, melhoresPontuacoes.get(j)); melhoresJogadores.set(j + 1, melhoresJogadores.get(j)); j--; } melhoresPontuacoes.set(j + 1, pontuacaoAtual); melhoresJogadores.set(j + 1, jogadorAtual); } } private void salvarMelhoresEmArquivo(String nomeArquivo) { try (FileWriter fw = new FileWriter(nomeArquivo, false); BufferedWriter bw = new BufferedWriter(fw)) { for (int i = 0; i < this.melhoresJogadores.size(); i++) { bw.write(this.melhoresJogadores.get(i) + \",\" + this.melhoresPontuacoes.get(i)); bw.newLine(); } } catch (Exception e) { System.err.println(\"erro ao salvar melhores jogadores: \" + e.getMessage()); } } public boolean novaMelhorPontuacao() { boolean resposta = false; for (var pontuacao : melhoresPontuacoes) { if (AreaPlacar.fatorPontuacao >= pontuacao) { resposta = true; break; } } return resposta; } public void ler(String nomeDoArquivo) { File arquivo = new File(nomeDoArquivo); if (!arquivo.exists()) { criarArquivo(nomeDoArquivo); } try (Scanner linha = new Scanner(arquivo)) { while (linha.hasNextLine()) { String s = linha.nextLine(); String[] campos = s.split(\",\"); this.melhoresJogadores.add(campos[0]); this.melhoresPontuacoes.add(Integer.parseInt(campos[1])); } } catch (Exception e) { System.err.println(\"erro ao ler arquivo melhores jogadores: \" + e.getMessage()); } } private void criarArquivo(String nomeDoArquivo) { File arquivo = new File(nomeDoArquivo); try (FileWriter fw = new FileWriter(arquivo); BufferedWriter bw = new BufferedWriter(fw)) { for (int i = 0; i < 5; i++) { bw.write(\"Unregistered,0\"); bw.newLine(); } } catch (Exception e) { System.err.println(\"erro ao criar o arquivo: \" + e.getMessage()); } } }","dependencies":[{"file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/areas/Area.java","file_content":"package engtelecom.poo.areas; import java.awt.Color; import java.awt.Font; import java.awt.FontFormatException; import java.awt.Graphics2D; import java.io.IOException; import java.io.InputStream; import java.awt.Image; import java.awt.MediaTracker; import java.net.URL; import javax.swing.ImageIcon; public abstract class Area { protected int coordenadaX; protected int coordenadaY; protected int largura; protected int altura; protected Image imagem; public Area(int coordenadaX, int coordenadaY, int largura, int altura) { this.coordenadaX = coordenadaX; this.coordenadaY = coordenadaY; this.largura = largura; this.altura = altura; } public abstract void desenharArea(Graphics2D g2d); public Font carregaFonteDoDisco(String nome, float tamanho) { InputStream is = getClass().getResourceAsStream(\"/fontes/\" + nome); try { var font = Font.createFont(Font.TRUETYPE_FONT, is).deriveFont(tamanho); return font; } catch (FontFormatException | IOException e) { System.err.println(\"erro ao ler font do disco: \" + e); } return null; } public Image carregarImagem(String arquivo) { try { var ii = new ImageIcon(getClass().getResource(\"/\" + arquivo)); if ((ii == null) || (ii.getImageLoadStatus() != MediaTracker.COMPLETE)) { URL url = getClass().getResource(\"/\" + arquivo); if (url == null) throw new IllegalArgumentException(\"Imagem \" + arquivo + \" não encontrada\"); ii = new ImageIcon(url); } return ii.getImage(); } catch (Exception e) { System.err.println(\"Erro ao carregar imagem: \" + e.getMessage()); e.printStackTrace(); return null; } } }"}]}}
{"project_id":197,"chunk_id":0,"content":{"main_file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/areas/Area.java","main_file_content":"package engtelecom.poo.areas; import java.awt.Color; import java.awt.Font; import java.awt.FontFormatException; import java.awt.Graphics2D; import java.io.IOException; import java.io.InputStream; import java.awt.Image; import java.awt.MediaTracker; import java.net.URL; import javax.swing.ImageIcon; public abstract class Area { protected int coordenadaX; protected int coordenadaY; protected int largura; protected int altura; protected Image imagem; public Area(int coordenadaX, int coordenadaY, int largura, int altura) { this.coordenadaX = coordenadaX; this.coordenadaY = coordenadaY; this.largura = largura; this.altura = altura; } public abstract void desenharArea(Graphics2D g2d); public Font carregaFonteDoDisco(String nome, float tamanho) { InputStream is = getClass().getResourceAsStream(\"/fontes/\" + nome); try { var font = Font.createFont(Font.TRUETYPE_FONT, is).deriveFont(tamanho); return font; } catch (FontFormatException | IOException e) { System.err.println(\"erro ao ler font do disco: \" + e); } return null; } public Image carregarImagem(String arquivo) { try { var ii = new ImageIcon(getClass().getResource(\"/\" + arquivo)); if ((ii == null) || (ii.getImageLoadStatus() != MediaTracker.COMPLETE)) { URL url = getClass().getResource(\"/\" + arquivo); if (url == null) throw new IllegalArgumentException(\"Imagem \" + arquivo + \" não encontrada\"); ii = new ImageIcon(url); } return ii.getImage(); } catch (Exception e) { System.err.println(\"Erro ao carregar imagem: \" + e.getMessage()); e.printStackTrace(); return null; } } }","dependencies":[]}}
{"project_id":197,"chunk_id":0,"content":{"main_file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/areas/AreaPlacar.java","main_file_content":"package engtelecom.poo.areas; import java.awt.Color; import java.awt.Graphics2D; import java.awt.AlphaComposite; import java.awt.Font; import java.awt.RenderingHints; public class AreaPlacar extends Area { private final int PONTUACAO_COORDENADA_X; private final int PONTUACAO_COORDENADA_Y; private final int PONTUACAO_LARGURA; private final int PONTUACAO_ALTURA; private final int VIDAS_COORDENADA_X; private final int VIDAS_COORDENADA_Y; private final int VIDAS_LARGURA; private final int VIDAS_ALTURA; public static int fatorPontuacao; public static int fatorVida; public AreaPlacar(int coordenadaX, int coordenadaY, int largura, int altura) { super(coordenadaX, coordenadaY, largura, altura); int margem = 20; this.PONTUACAO_COORDENADA_X = this.coordenadaX + margem; this.PONTUACAO_COORDENADA_Y = coordenadaY + altura / 6; this.PONTUACAO_ALTURA = altura / 6; this.PONTUACAO_LARGURA = this.largura - margem * 3; this.VIDAS_COORDENADA_X = this.coordenadaX + margem; this.VIDAS_COORDENADA_Y = coordenadaY + altura / 2; this.VIDAS_ALTURA = altura / 6; this.VIDAS_LARGURA = this.largura - margem * 3; AreaPlacar.fatorPontuacao = 0; AreaPlacar.fatorVida = 3; } public static void adicionarVida() { AreaPlacar.fatorVida++; } public static void removerVida() { AreaPlacar.fatorVida--; } public static void adicionarPontuacao(int pontos) { AreaPlacar.fatorPontuacao += pontos; } @Override public void desenharArea(Graphics2D g2d) { this.imagem = carregarImagem(\"imagens/area-placar.png\"); g2d.drawImage(imagem, this.coordenadaX, this.coordenadaY, this.largura, this.altura, null); desenhaInformacao(g2d, \"Score\", PONTUACAO_COORDENADA_X, PONTUACAO_COORDENADA_Y, PONTUACAO_LARGURA, PONTUACAO_ALTURA); desenhaInformacao(g2d, \"Balls\", VIDAS_COORDENADA_X, VIDAS_COORDENADA_Y, VIDAS_LARGURA, VIDAS_ALTURA); desenhaBlocoPlacar(g2d, AreaPlacar.fatorPontuacao, PONTUACAO_COORDENADA_X, PONTUACAO_COORDENADA_Y, PONTUACAO_LARGURA, PONTUACAO_ALTURA); desenhaBlocoPlacar(g2d, AreaPlacar.fatorVida, VIDAS_COORDENADA_X, VIDAS_COORDENADA_Y, VIDAS_LARGURA, VIDAS_ALTURA); } private void desenhaBlocoPlacar(Graphics2D g2d, int informacao, int coordenadaX, int coordenadaY, int largura, int altura) { float transparencia = 0.5f; AlphaComposite alphaComposite = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, transparencia); g2d.setComposite(alphaComposite); int xCentralizado = coordenadaX + (largura - g2d.getFontMetrics().stringWidth(String.valueOf(informacao))) / 2; int yCentralizado = coordenadaY + altura / 2 + g2d.getFontMetrics().getHeight() / 4; g2d.setColor(new Color(128, 128, 128, 128)); g2d.fillRect(coordenadaX, coordenadaY, largura, altura); g2d.setComposite(AlphaComposite.SrcOver); g2d.setColor(Color.BLACK); Font fonte = carregaFonteDoDisco(\"f1.ttf\", 40f); g2d.setFont(fonte); String mensagem = String.valueOf(informacao); g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON); g2d.drawString(mensagem, xCentralizado, yCentralizado); } private void desenhaInformacao(Graphics2D g2d, String campo, int coordenadaX, int coordenadaY, int largura, int altura) { g2d.setColor(Color.BLACK); var fonte = carregaFonteDoDisco(\"f1.ttf\", 40f); g2d.setFont(fonte); int xCentralizado = coordenadaX + (largura - g2d.getFontMetrics().stringWidth(campo)) / 2; g2d.drawString(campo, xCentralizado, coordenadaY - 10); } }","dependencies":[{"file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/areas/Area.java","file_content":"package engtelecom.poo.areas; import java.awt.Color; import java.awt.Font; import java.awt.FontFormatException; import java.awt.Graphics2D; import java.io.IOException; import java.io.InputStream; import java.awt.Image; import java.awt.MediaTracker; import java.net.URL; import javax.swing.ImageIcon; public abstract class Area { protected int coordenadaX; protected int coordenadaY; protected int largura; protected int altura; protected Image imagem; public Area(int coordenadaX, int coordenadaY, int largura, int altura) { this.coordenadaX = coordenadaX; this.coordenadaY = coordenadaY; this.largura = largura; this.altura = altura; } public abstract void desenharArea(Graphics2D g2d); public Font carregaFonteDoDisco(String nome, float tamanho) { InputStream is = getClass().getResourceAsStream(\"/fontes/\" + nome); try { var font = Font.createFont(Font.TRUETYPE_FONT, is).deriveFont(tamanho); return font; } catch (FontFormatException | IOException e) { System.err.println(\"erro ao ler font do disco: \" + e); } return null; } public Image carregarImagem(String arquivo) { try { var ii = new ImageIcon(getClass().getResource(\"/\" + arquivo)); if ((ii == null) || (ii.getImageLoadStatus() != MediaTracker.COMPLETE)) { URL url = getClass().getResource(\"/\" + arquivo); if (url == null) throw new IllegalArgumentException(\"Imagem \" + arquivo + \" não encontrada\"); ii = new ImageIcon(url); } return ii.getImage(); } catch (Exception e) { System.err.println(\"Erro ao carregar imagem: \" + e.getMessage()); e.printStackTrace(); return null; } } }"}]}}
{"project_id":197,"chunk_id":0,"content":{"main_file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/elementos/Poder.java","main_file_content":"package engtelecom.poo.elementos; import java.awt.Color; import java.awt.Graphics2D; public class Poder extends Elemento implements Movimenta { public static final int VELOCIDADE_X_INICIAL = 0; public static final int VELOCIDADE_Y_INICIAL = 2; public static final int ALTURA_PODER = 25; public static final int LARGURA_PODER = 25; public static final Color COR_PODER = Color.RED; private TipoPoder tipoPoder; private boolean apareceNaTela; private boolean capturado; public Poder(int id, int coordenadaX, int coordenadaY, int velocidadeX, int velocidadeY, int altura, int largura) { super(coordenadaX, coordenadaY, velocidadeX, velocidadeY, ALTURA_PODER, LARGURA_PODER); this.tipoPoder = TipoPoder.getById(id); this.apareceNaTela = false; this.capturado = false; } public void setPoder(int id) { this.tipoPoder = TipoPoder.getById(id); } @Override public void desenhar(Graphics2D g2d) { if (apareceNaTela) { movimentar(); this.imagem = carregarImagem(\"imagens/base-poder.png\"); g2d.drawImage(imagem, this.coordenadaX, this.coordenadaY, this.largura, this.altura, null); this.imagem = carregarImagem(this.tipoPoder.caminho); g2d.drawImage(imagem, this.coordenadaX, this.coordenadaY, this.largura, this.altura, null); } } @Override public void movimentar() { if (apareceNaTela) { coordenadaY += velocidadeY; } } public void ligarEstadoDesenho() { this.apareceNaTela = true; } public void desligarEstadoDesenho() { this.apareceNaTela = false; } public TipoPoder getTipoPoder() { return this.tipoPoder; } public void capturar() { this.capturado = true; } public boolean jaFoiCapturado() { if (this.capturado) { return true; } return false; } }","dependencies":[{"file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/elementos/Elemento.java","file_content":"package engtelecom.poo.elementos; import java.awt.Color; import java.awt.Graphics2D; import java.awt.Image; import java.awt.MediaTracker; import java.net.URL; import javax.swing.ImageIcon; public abstract class Elemento { protected int coordenadaX; protected int coordenadaY; protected int velocidadeX; protected int velocidadeY; protected int altura; protected int largura; protected Image imagem; public Elemento(int coordenadaX, int coordenadaY, int velocidadeX, int velocidadeY, int altura, int largura) { this.coordenadaX = coordenadaX; this.coordenadaY = coordenadaY; this.velocidadeX = velocidadeX; this.velocidadeY = velocidadeY; this.altura = altura; this.largura = largura; } public Elemento(int coordenadaX, int coordenadaY, int altura, int largura) { this.coordenadaX = coordenadaX; this.coordenadaY = coordenadaY; this.velocidadeX = 0; this.velocidadeY = 0; this.altura = altura; this.largura = largura; } public abstract void desenhar(Graphics2D g2d); public void setCoordenadaX(int coordenadaX) { this.coordenadaX = coordenadaX; } public void setCoordenadaY(int coordenadaY) { this.coordenadaY = coordenadaY; } public void setAltura(int altura) { this.altura = altura; } public void setLargura(int largura) { this.largura = largura; } public int getCoordenadaX() { return coordenadaX; } public int getCoordenadaY() { return coordenadaY; } public int getVelocidadeX() { return velocidadeX; } public int getVelocidadeY() { return velocidadeY; } public int getLargura() { return largura; } public int getAltura() { return altura; } public void setVelocidadeX(int velocidadeX) { this.velocidadeX = velocidadeX; } public void setVelocidadeY(int velocidadeY) { this.velocidadeY = velocidadeY; } public Image carregarImagem(String arquivo) { try { var ii = new ImageIcon(getClass().getResource(\"/\" + arquivo)); if ((ii == null) || (ii.getImageLoadStatus() != MediaTracker.COMPLETE)) { URL url = getClass().getResource(\"/\" + arquivo); if (url == null) throw new IllegalArgumentException(\"Imagem \" + arquivo + \" não encontrada\"); ii = new ImageIcon(url); } return ii.getImage(); } catch (Exception e) { System.err.println(\"Erro ao carregar imagem: \" + e.getMessage()); e.printStackTrace(); return null; } } }"},{"file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/elementos/Movimenta.java","file_content":"package engtelecom.poo.elementos; public interface Movimenta { public void movimentar(); }"},{"file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/elementos/TipoPoder.java","file_content":"package engtelecom.poo.elementos; import java.awt.Color; public enum TipoPoder { MAX_VELOCIDADE(1, \"imagens/max-velocidade.png\"), MIN_VELOCIDADE(2, \"imagens/min-velocidade.png\"), VIDA_EXTRA(3, \"imagens/vida-poder.png\"); public final int id; public final String caminho; TipoPoder(int id, String caminho) { this.id = id; this.caminho = caminho; } public static TipoPoder getById(int i) { for (TipoPoder poder : TipoPoder.values()) { if (i == poder.id) { return poder; } } throw new IllegalArgumentException(\"identificador de tijolo inválido\"); } }"}]}}
{"project_id":197,"chunk_id":0,"content":{"main_file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/elementos/Bolinha.java","main_file_content":"package engtelecom.poo.elementos; import java.awt.Color; import java.awt.Graphics2D; import java.awt.Image; public class Bolinha extends Elemento implements Movimenta { private static final int COORD_X_INICIAL = 150; private static final int COORD_Y_INICIAL = 20; private static final int VELOCIDADE_X = 4; private static final int VELOCIDADE_Y = 4; private static final int DIMENSAO = 25; private static final Color COR = Color.WHITE; public Bolinha() { super(COORD_X_INICIAL, COORD_Y_INICIAL, VELOCIDADE_X, VELOCIDADE_Y, DIMENSAO, DIMENSAO); } public void resetarPosicao() { this.coordenadaX = COORD_X_INICIAL; this.coordenadaY = COORD_Y_INICIAL; } public void setVelocidadeX(int velocidadeX) { this.velocidadeX = velocidadeX; } public void setVelocidadeY(int velocidadeY) { this.velocidadeY = velocidadeY; } public int getCoordenadaX() { return coordenadaX; } public int getCoordenadaY() { return coordenadaY; } public int getVelocidadeX() { return velocidadeX; } public int getVelocidadeY() { return velocidadeY; } public int getLargura() { return largura; } public int getAltura() { return altura; } @Override public void desenhar(Graphics2D g2d) { this.imagem = carregarImagem(\"imagens/bolinha.png\"); g2d.drawImage(imagem, this.coordenadaX, this.coordenadaY, this.largura, this.altura, null); } @Override public void movimentar() { this.coordenadaX += this.velocidadeX; this.coordenadaY += this.velocidadeY; } }","dependencies":[{"file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/elementos/Elemento.java","file_content":"package engtelecom.poo.elementos; import java.awt.Color; import java.awt.Graphics2D; import java.awt.Image; import java.awt.MediaTracker; import java.net.URL; import javax.swing.ImageIcon; public abstract class Elemento { protected int coordenadaX; protected int coordenadaY; protected int velocidadeX; protected int velocidadeY; protected int altura; protected int largura; protected Image imagem; public Elemento(int coordenadaX, int coordenadaY, int velocidadeX, int velocidadeY, int altura, int largura) { this.coordenadaX = coordenadaX; this.coordenadaY = coordenadaY; this.velocidadeX = velocidadeX; this.velocidadeY = velocidadeY; this.altura = altura; this.largura = largura; } public Elemento(int coordenadaX, int coordenadaY, int altura, int largura) { this.coordenadaX = coordenadaX; this.coordenadaY = coordenadaY; this.velocidadeX = 0; this.velocidadeY = 0; this.altura = altura; this.largura = largura; } public abstract void desenhar(Graphics2D g2d); public void setCoordenadaX(int coordenadaX) { this.coordenadaX = coordenadaX; } public void setCoordenadaY(int coordenadaY) { this.coordenadaY = coordenadaY; } public void setAltura(int altura) { this.altura = altura; } public void setLargura(int largura) { this.largura = largura; } public int getCoordenadaX() { return coordenadaX; } public int getCoordenadaY() { return coordenadaY; } public int getVelocidadeX() { return velocidadeX; } public int getVelocidadeY() { return velocidadeY; } public int getLargura() { return largura; } public int getAltura() { return altura; } public void setVelocidadeX(int velocidadeX) { this.velocidadeX = velocidadeX; } public void setVelocidadeY(int velocidadeY) { this.velocidadeY = velocidadeY; } public Image carregarImagem(String arquivo) { try { var ii = new ImageIcon(getClass().getResource(\"/\" + arquivo)); if ((ii == null) || (ii.getImageLoadStatus() != MediaTracker.COMPLETE)) { URL url = getClass().getResource(\"/\" + arquivo); if (url == null) throw new IllegalArgumentException(\"Imagem \" + arquivo + \" não encontrada\"); ii = new ImageIcon(url); } return ii.getImage(); } catch (Exception e) { System.err.println(\"Erro ao carregar imagem: \" + e.getMessage()); e.printStackTrace(); return null; } } }"},{"file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/elementos/Movimenta.java","file_content":"package engtelecom.poo.elementos; public interface Movimenta { public void movimentar(); }"}]}}
{"project_id":197,"chunk_id":0,"content":{"main_file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/elementos/Elemento.java","main_file_content":"package engtelecom.poo.elementos; import java.awt.Color; import java.awt.Graphics2D; import java.awt.Image; import java.awt.MediaTracker; import java.net.URL; import javax.swing.ImageIcon; public abstract class Elemento { protected int coordenadaX; protected int coordenadaY; protected int velocidadeX; protected int velocidadeY; protected int altura; protected int largura; protected Image imagem; public Elemento(int coordenadaX, int coordenadaY, int velocidadeX, int velocidadeY, int altura, int largura) { this.coordenadaX = coordenadaX; this.coordenadaY = coordenadaY; this.velocidadeX = velocidadeX; this.velocidadeY = velocidadeY; this.altura = altura; this.largura = largura; } public Elemento(int coordenadaX, int coordenadaY, int altura, int largura) { this.coordenadaX = coordenadaX; this.coordenadaY = coordenadaY; this.velocidadeX = 0; this.velocidadeY = 0; this.altura = altura; this.largura = largura; } public abstract void desenhar(Graphics2D g2d); public void setCoordenadaX(int coordenadaX) { this.coordenadaX = coordenadaX; } public void setCoordenadaY(int coordenadaY) { this.coordenadaY = coordenadaY; } public void setAltura(int altura) { this.altura = altura; } public void setLargura(int largura) { this.largura = largura; } public int getCoordenadaX() { return coordenadaX; } public int getCoordenadaY() { return coordenadaY; } public int getVelocidadeX() { return velocidadeX; } public int getVelocidadeY() { return velocidadeY; } public int getLargura() { return largura; } public int getAltura() { return altura; } public void setVelocidadeX(int velocidadeX) { this.velocidadeX = velocidadeX; } public void setVelocidadeY(int velocidadeY) { this.velocidadeY = velocidadeY; } public Image carregarImagem(String arquivo) { try { var ii = new ImageIcon(getClass().getResource(\"/\" + arquivo)); if ((ii == null) || (ii.getImageLoadStatus() != MediaTracker.COMPLETE)) { URL url = getClass().getResource(\"/\" + arquivo); if (url == null) throw new IllegalArgumentException(\"Imagem \" + arquivo + \" não encontrada\"); ii = new ImageIcon(url); } return ii.getImage(); } catch (Exception e) { System.err.println(\"Erro ao carregar imagem: \" + e.getMessage()); e.printStackTrace(); return null; } } }","dependencies":[]}}
{"project_id":197,"chunk_id":0,"content":{"main_file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/elementos/TipoPoder.java","main_file_content":"package engtelecom.poo.elementos; import java.awt.Color; public enum TipoPoder { MAX_VELOCIDADE(1, \"imagens/max-velocidade.png\"), MIN_VELOCIDADE(2, \"imagens/min-velocidade.png\"), VIDA_EXTRA(3, \"imagens/vida-poder.png\"); public final int id; public final String caminho; TipoPoder(int id, String caminho) { this.id = id; this.caminho = caminho; } public static TipoPoder getById(int i) { for (TipoPoder poder : TipoPoder.values()) { if (i == poder.id) { return poder; } } throw new IllegalArgumentException(\"identificador de tijolo inválido\"); } }","dependencies":[]}}
{"project_id":197,"chunk_id":0,"content":{"main_file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/elementos/Tijolo.java","main_file_content":"package engtelecom.poo.elementos; import java.awt.Color; import java.awt.Graphics2D; import java.awt.Image; public class Tijolo extends Elemento { private TipoTijolo modelo; private Poder poder; private int durabilidadeAtual; private int posicao; private Image imagem; public static final int LARGURA_TIJOLO = 60; public static final int ALTURA_TIJOLO = 30; public Tijolo(int posicao, int id, int coordenadaX, int coordenadaY, int altura, int largura) { super(coordenadaX, coordenadaY, altura, largura); this.modelo = TipoTijolo.getById(id); this.durabilidadeAtual = modelo.durabilidadeTotal; this.posicao = posicao; } public int getPosicao() { return posicao; } private void derrubarPoder() { Poder p = this.poder; if (p != null) { this.poder.ligarEstadoDesenho(); this.poder.movimentar(); } } public boolean diminuirDurabilidadeAtual() { if (durabilidadeAtual > 0) { durabilidadeAtual--; if (durabilidadeAtual == 0) { derrubarPoder(); } return true; } return false; } public void setPoder(Poder poder) { this.poder = poder; } public int getDurabilidadeAtual() { return durabilidadeAtual; } public TipoTijolo getModelo() { return this.modelo; } @Override public void desenhar(Graphics2D g2d) { if (durabilidadeAtual > 0) { this.imagem = carregarImagem(this.modelo.caminho); g2d.drawImage(imagem, this.coordenadaX, this.coordenadaY, this.largura, this.altura, null); } if (this.poder != null) { this.poder.desenhar(g2d); } } public Poder getPoder() { return this.poder; } }","dependencies":[{"file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/elementos/Elemento.java","file_content":"package engtelecom.poo.elementos; import java.awt.Color; import java.awt.Graphics2D; import java.awt.Image; import java.awt.MediaTracker; import java.net.URL; import javax.swing.ImageIcon; public abstract class Elemento { protected int coordenadaX; protected int coordenadaY; protected int velocidadeX; protected int velocidadeY; protected int altura; protected int largura; protected Image imagem; public Elemento(int coordenadaX, int coordenadaY, int velocidadeX, int velocidadeY, int altura, int largura) { this.coordenadaX = coordenadaX; this.coordenadaY = coordenadaY; this.velocidadeX = velocidadeX; this.velocidadeY = velocidadeY; this.altura = altura; this.largura = largura; } public Elemento(int coordenadaX, int coordenadaY, int altura, int largura) { this.coordenadaX = coordenadaX; this.coordenadaY = coordenadaY; this.velocidadeX = 0; this.velocidadeY = 0; this.altura = altura; this.largura = largura; } public abstract void desenhar(Graphics2D g2d); public void setCoordenadaX(int coordenadaX) { this.coordenadaX = coordenadaX; } public void setCoordenadaY(int coordenadaY) { this.coordenadaY = coordenadaY; } public void setAltura(int altura) { this.altura = altura; } public void setLargura(int largura) { this.largura = largura; } public int getCoordenadaX() { return coordenadaX; } public int getCoordenadaY() { return coordenadaY; } public int getVelocidadeX() { return velocidadeX; } public int getVelocidadeY() { return velocidadeY; } public int getLargura() { return largura; } public int getAltura() { return altura; } public void setVelocidadeX(int velocidadeX) { this.velocidadeX = velocidadeX; } public void setVelocidadeY(int velocidadeY) { this.velocidadeY = velocidadeY; } public Image carregarImagem(String arquivo) { try { var ii = new ImageIcon(getClass().getResource(\"/\" + arquivo)); if ((ii == null) || (ii.getImageLoadStatus() != MediaTracker.COMPLETE)) { URL url = getClass().getResource(\"/\" + arquivo); if (url == null) throw new IllegalArgumentException(\"Imagem \" + arquivo + \" não encontrada\"); ii = new ImageIcon(url); } return ii.getImage(); } catch (Exception e) { System.err.println(\"Erro ao carregar imagem: \" + e.getMessage()); e.printStackTrace(); return null; } } }"},{"file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/elementos/Poder.java","file_content":"package engtelecom.poo.elementos; import java.awt.Color; import java.awt.Graphics2D; public class Poder extends Elemento implements Movimenta { public static final int VELOCIDADE_X_INICIAL = 0; public static final int VELOCIDADE_Y_INICIAL = 2; public static final int ALTURA_PODER = 25; public static final int LARGURA_PODER = 25; public static final Color COR_PODER = Color.RED; private TipoPoder tipoPoder; private boolean apareceNaTela; private boolean capturado; public Poder(int id, int coordenadaX, int coordenadaY, int velocidadeX, int velocidadeY, int altura, int largura) { super(coordenadaX, coordenadaY, velocidadeX, velocidadeY, ALTURA_PODER, LARGURA_PODER); this.tipoPoder = TipoPoder.getById(id); this.apareceNaTela = false; this.capturado = false; } public void setPoder(int id) { this.tipoPoder = TipoPoder.getById(id); } @Override public void desenhar(Graphics2D g2d) { if (apareceNaTela) { movimentar(); this.imagem = carregarImagem(\"imagens/base-poder.png\"); g2d.drawImage(imagem, this.coordenadaX, this.coordenadaY, this.largura, this.altura, null); this.imagem = carregarImagem(this.tipoPoder.caminho); g2d.drawImage(imagem, this.coordenadaX, this.coordenadaY, this.largura, this.altura, null); } } @Override public void movimentar() { if (apareceNaTela) { coordenadaY += velocidadeY; } } public void ligarEstadoDesenho() { this.apareceNaTela = true; } public void desligarEstadoDesenho() { this.apareceNaTela = false; } public TipoPoder getTipoPoder() { return this.tipoPoder; } public void capturar() { this.capturado = true; } public boolean jaFoiCapturado() { if (this.capturado) { return true; } return false; } }"},{"file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/elementos/TipoTijolo.java","file_content":"package engtelecom.poo.elementos; import java.awt.Color; public enum TipoTijolo { FRACO(1, \"imagens/tijolo-azul.png\", 10, 1), FORTE(2, \"imagens/tijolo-roxo.png\", 20, 2), INDESTRUTIVEL(3, \"imagens/tijolo-verde.png\", 30, Integer.MAX_VALUE); public final int id; public final String caminho; public final int valor; public final int durabilidadeTotal; TipoTijolo(int id, String caminho, int valor, int durabilidadeTotal) { this.id = id; this.caminho = caminho; this.valor = valor; this.durabilidadeTotal = durabilidadeTotal; } public static TipoTijolo getById(int i) { for (TipoTijolo tijolo : TipoTijolo.values()) { if (i == tijolo.id) { return tijolo; } } throw new IllegalArgumentException(\"identificador de tijolo inválido\"); } }"}]}}
{"project_id":197,"chunk_id":0,"content":{"main_file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/elementos/TipoTijolo.java","main_file_content":"package engtelecom.poo.elementos; import java.awt.Color; public enum TipoTijolo { FRACO(1, \"imagens/tijolo-azul.png\", 10, 1), FORTE(2, \"imagens/tijolo-roxo.png\", 20, 2), INDESTRUTIVEL(3, \"imagens/tijolo-verde.png\", 30, Integer.MAX_VALUE); public final int id; public final String caminho; public final int valor; public final int durabilidadeTotal; TipoTijolo(int id, String caminho, int valor, int durabilidadeTotal) { this.id = id; this.caminho = caminho; this.valor = valor; this.durabilidadeTotal = durabilidadeTotal; } public static TipoTijolo getById(int i) { for (TipoTijolo tijolo : TipoTijolo.values()) { if (i == tijolo.id) { return tijolo; } } throw new IllegalArgumentException(\"identificador de tijolo inválido\"); } }","dependencies":[]}}
{"project_id":197,"chunk_id":0,"content":{"main_file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/elementos/Plataforma.java","main_file_content":"package engtelecom.poo.elementos; import java.awt.Color; import java.awt.Graphics2D; import java.awt.Image; public class Plataforma extends Elemento implements Movimenta { private Image imagem; private final static int COORDENADA_X_INICIAL = 100; private final static int COORDENADA_Y_INICIAL = 520; private final static int ALTURA = 25; private static final int TAM_ORIGINAL = 100; private static final double FATOR_TAMANHO_LIMITE = 0.2; private static final double FATOR_MUDANCA = 0.1; public Plataforma() { super(COORDENADA_X_INICIAL, COORDENADA_Y_INICIAL, 0, 0, ALTURA, TAM_ORIGINAL); } @Override public void desenhar(Graphics2D g2d) { this.imagem = carregarImagem(\"imagens/plataforma.png\"); g2d.drawImage(imagem, this.coordenadaX, this.coordenadaY, this.largura, this.altura, null); } public void aumentarTamanho() { int novaLargura = this.largura + (int) (this.largura * FATOR_MUDANCA); int limiteMax = (int) (TAM_ORIGINAL + TAM_ORIGINAL * FATOR_TAMANHO_LIMITE); if (novaLargura < limiteMax) { this.largura = novaLargura; } } public void diminuirTamanho() { int novaLargura = this.largura - (int) (this.largura * FATOR_MUDANCA); int limiteMin = (int) (TAM_ORIGINAL - TAM_ORIGINAL * FATOR_TAMANHO_LIMITE); if (novaLargura > limiteMin) { this.largura = novaLargura; } } @Override public void movimentar() { this.coordenadaX += this.velocidadeX; } public void setVelocidadeX(int velocidadeX) { this.velocidadeX = velocidadeX; } public int getVelocidadeX() { return velocidadeX; } }","dependencies":[{"file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/elementos/Elemento.java","file_content":"package engtelecom.poo.elementos; import java.awt.Color; import java.awt.Graphics2D; import java.awt.Image; import java.awt.MediaTracker; import java.net.URL; import javax.swing.ImageIcon; public abstract class Elemento { protected int coordenadaX; protected int coordenadaY; protected int velocidadeX; protected int velocidadeY; protected int altura; protected int largura; protected Image imagem; public Elemento(int coordenadaX, int coordenadaY, int velocidadeX, int velocidadeY, int altura, int largura) { this.coordenadaX = coordenadaX; this.coordenadaY = coordenadaY; this.velocidadeX = velocidadeX; this.velocidadeY = velocidadeY; this.altura = altura; this.largura = largura; } public Elemento(int coordenadaX, int coordenadaY, int altura, int largura) { this.coordenadaX = coordenadaX; this.coordenadaY = coordenadaY; this.velocidadeX = 0; this.velocidadeY = 0; this.altura = altura; this.largura = largura; } public abstract void desenhar(Graphics2D g2d); public void setCoordenadaX(int coordenadaX) { this.coordenadaX = coordenadaX; } public void setCoordenadaY(int coordenadaY) { this.coordenadaY = coordenadaY; } public void setAltura(int altura) { this.altura = altura; } public void setLargura(int largura) { this.largura = largura; } public int getCoordenadaX() { return coordenadaX; } public int getCoordenadaY() { return coordenadaY; } public int getVelocidadeX() { return velocidadeX; } public int getVelocidadeY() { return velocidadeY; } public int getLargura() { return largura; } public int getAltura() { return altura; } public void setVelocidadeX(int velocidadeX) { this.velocidadeX = velocidadeX; } public void setVelocidadeY(int velocidadeY) { this.velocidadeY = velocidadeY; } public Image carregarImagem(String arquivo) { try { var ii = new ImageIcon(getClass().getResource(\"/\" + arquivo)); if ((ii == null) || (ii.getImageLoadStatus() != MediaTracker.COMPLETE)) { URL url = getClass().getResource(\"/\" + arquivo); if (url == null) throw new IllegalArgumentException(\"Imagem \" + arquivo + \" não encontrada\"); ii = new ImageIcon(url); } return ii.getImage(); } catch (Exception e) { System.err.println(\"Erro ao carregar imagem: \" + e.getMessage()); e.printStackTrace(); return null; } } }"},{"file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/elementos/Movimenta.java","file_content":"package engtelecom.poo.elementos; public interface Movimenta { public void movimentar(); }"}]}}
{"project_id":197,"chunk_id":0,"content":{"main_file_path":"JavanoidOO-main/JavanoidOO-main/app/src/main/java/engtelecom/poo/elementos/Movimenta.java","main_file_content":"package engtelecom.poo.elementos; public interface Movimenta { public void movimentar(); }","dependencies":[]}}
{"project_id":209,"chunk_id":0,"content":{"main_file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/bank/ParaCek.java","main_file_content":"package bank; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JButton; import java.awt.Font; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JTextField; import java.awt.event.ActionListener; import java.io.FileReader; import java.io.FileWriter; import java.util.List; import java.awt.event.ActionEvent; import java.awt.Color; public class ParaCek extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { ParaCek frame = new ParaCek(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public ParaCek() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JLabel lbl_mesaj = new JLabel(\"\"); lbl_mesaj.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lbl_mesaj.setBounds(20, 143, 404, 19); contentPane.add(lbl_mesaj); JLabel lbl_bakiye = new JLabel(bakiye()); lbl_bakiye.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lbl_bakiye.setBounds(20, 11, 239, 19); contentPane.add(lbl_bakiye); JButton btnek = new JButton(\"Çek\"); btnek.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); boolean cekme = false; for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { lbl_bakiye.setText(\"Güncel bakiyeniz : \"+String.valueOf(customer.getBakiye())); double miktar =Double.parseDouble(textField.getText()); if (miktar <= customer.getBakiye()) { customer.setBakiye(customer.getBakiye() - miktar); lbl_mesaj.setText(\"Bakiyeniz Güncellendi\"); cekme = true; try (FileWriter writer = new FileWriter(JSON_FILE_PATH)) { gson.toJson(customers, writer); } } } } if(!cekme) { JOptionPane.showMessageDialog(null, \"Hatalı Giriş\"); lbl_mesaj.setText(\"Tekrar Deneyiniz\"); } } catch (Exception e1) { e1.printStackTrace(); } } }); btnek.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnek.setBounds(156, 99, 128, 33); contentPane.add(btnek); JButton btnParaYatr = new JButton(\"Para Yatır\"); btnParaYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaYatir paraYatir = new ParaYatir(); paraYatir.setVisible(true); dispose(); } }); btnParaYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaYatr.setBounds(84, 173, 128, 33); contentPane.add(btnParaYatr); JButton btnBakiyeren = new JButton(\"Bakiye Öğren\"); btnBakiyeren.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { BakiyeOgren bakiye = new BakiyeOgren(); bakiye.setVisible(true); dispose(); } }); btnBakiyeren.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnBakiyeren.setBounds(84, 217, 128, 33); contentPane.add(btnBakiyeren); JButton btnParaTransfer = new JButton(\"Para Transfer\"); btnParaTransfer.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { TransferYap transferYap = new TransferYap(); transferYap.setVisible(true); dispose(); } }); btnParaTransfer.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaTransfer.setBounds(222, 217, 138, 33); contentPane.add(btnParaTransfer); JButton btnKredideme = new JButton(\"Kredi Ödeme\"); btnKredideme.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KrediOdeme krediOdeme = new KrediOdeme(); krediOdeme.setVisible(true); dispose(); } }); btnKredideme.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnKredideme.setBounds(222, 173, 138, 33); contentPane.add(btnKredideme); JLabel lblekmekIstediinizTutar = new JLabel(\"Çekmek İstediğiniz Tutarı Giriniz : \"); lblekmekIstediinizTutar.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblekmekIstediinizTutar.setBounds(20, 40, 224, 33); contentPane.add(lblekmekIstediinizTutar); textField = new JTextField(); textField.setColumns(10); textField.setBounds(254, 47, 139, 20); contentPane.add(textField); } public static String bakiye() { String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { String text = String.valueOf(\"Hesabınızdaki Tutar \"+customer.getBakiye()+\" TL\"); return text; } } System.out.println(\"Giriş yapılan hesap bulunamadı.\"); } catch (Exception e1) { e1.printStackTrace(); } return \"\"; } }","dependencies":[{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/DataRead/KimlikVeri.java","file_content":"package DataRead; public class KimlikVeri { private static String tc; private static String sifre; public static String getTc() { return tc; } public static void setTc(String tc) { KimlikVeri.tc = tc; } public static String getSifre() { return sifre; } public static void setSifre(String sifre) { KimlikVeri.sifre = sifre; } }"},{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/DataRead/kullaniciVerileri.java","file_content":"package DataRead; public class kullaniciVerileri { private String firstName; private String lastName; private String telefonNumarasi; private String adres; private String dogumTarih; private String sifre; private String hesapNumarasi; private String tcKimlik; private double bakiye; private double kartEkstre; private double kartBorc; public kullaniciVerileri(String firstName, String lastName, String telefonNumarasi, String adres,String dogumTarih, String sifre, String hesapNumarasi, String tcKimlik, Double bakiye, Double kartEkstre, Double kartBorc) { this.firstName = firstName; this.lastName = lastName; this.telefonNumarasi = telefonNumarasi; this.tcKimlik=tcKimlik; this.adres = adres; this.dogumTarih = dogumTarih; this.sifre = sifre; this.hesapNumarasi = hesapNumarasi; this.bakiye=bakiye; this.kartEkstre=kartEkstre; this.kartBorc=kartBorc; } public String getFirstName() { return firstName; } public void setFirstName(String firstName) { this.firstName = firstName; } public String getLastName() { return lastName; } public void setLastName(String lastName) { this.lastName = lastName; } public String getTelefonNumarasi() { return telefonNumarasi; } public void setTelefonNumarasi(String telefonNumarasi) { this.telefonNumarasi = telefonNumarasi; } public String getAdres() { return adres; } public void setAdres(String adres) { this.adres = adres; } public String getDogumTarih() { return dogumTarih; } public void setDogumTarih(String dogumTarih) { this.dogumTarih = dogumTarih; } public String getSifre() { return sifre; } public void setSifre(String sifre) { this.sifre = sifre; } public String getHesapNumarasi() { return hesapNumarasi; } public void setHesapNumarasi(String hesapNumarasi) { this.hesapNumarasi = hesapNumarasi; } public String getTcKimlik() { return tcKimlik; } public void setTcKimlik(String tcKimlik) { this.tcKimlik = tcKimlik; } public double getBakiye() { return bakiye; } public void setBakiye(double bakiye) { this.bakiye = bakiye; } public double getKartEkstre() { return kartEkstre; } public void setKartEkstre(double kartEkstre) { this.kartEkstre = kartEkstre; } public double getKartBorc() { return kartBorc; } public void setKartBorc(double kartBorc) { this.kartBorc = kartBorc; } }"},{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/bank/BakiyeOgren.java","file_content":"package bank; import java.awt.EventQueue; import java.util.List; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JLabel; import java.awt.Font; import javax.swing.JButton; import java.awt.event.ActionListener; import java.io.FileReader; import java.awt.event.ActionEvent; import javax.swing.SwingConstants; import java.awt.Color; public class BakiyeOgren extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { BakiyeOgren frame = new BakiyeOgren(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public BakiyeOgren() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JLabel lblNewLabel = new JLabel(\"Hesabınızda Bulunan Bakiye Miktarı \"); lblNewLabel.setFont(new Font(\"SansSerif\", Font.BOLD, 15)); lblNewLabel.setBounds(78, -12, 280, 70); contentPane.add(lblNewLabel); JLabel bk_ogren = new JLabel(\"\"); bk_ogren.setVerticalAlignment(SwingConstants.TOP); bk_ogren.setFont(new Font(\"SansSerif\", Font.BOLD, 15)); bk_ogren.setBounds(142, 40, 128, 70); contentPane.add(bk_ogren); JButton btnNewButton = new JButton(\"Para Çek\"); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaCek paraCek = new ParaCek(); paraCek.setVisible(true); dispose(); } }); btnNewButton.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton.setBounds(78, 173, 117, 33); contentPane.add(btnNewButton); JButton btnParaYatr = new JButton(\"Para Yatır\"); btnParaYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaYatir paraYatir = new ParaYatir(); paraYatir.setVisible(true); dispose(); } }); btnParaYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaYatr.setBounds(205, 173, 128, 33); contentPane.add(btnParaYatr); JButton btnKredideme = new JButton(\"Kredi Ödeme\"); btnKredideme.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KrediOdeme krediOdeme = new KrediOdeme(); krediOdeme.setVisible(true); dispose(); } }); btnKredideme.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnKredideme.setBounds(78, 217, 117, 33); contentPane.add(btnKredideme); JButton btnParaTransfer = new JButton(\"Para Transfer\"); btnParaTransfer.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { TransferYap transferYap = new TransferYap(); transferYap.setVisible(true); dispose(); } }); btnParaTransfer.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaTransfer.setBounds(205, 217, 128, 33); contentPane.add(btnParaTransfer); JButton btnBakiyeniren = new JButton(\"Bakiyeni Öğren\"); btnBakiyeniren.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { String tc=KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); try (FileReader reader = new FileReader(JSON_FILE_PATH)){ Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); for(kullaniciVerileri customer : customers){ if(tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { bk_ogren.setText(String.valueOf(customer.getBakiye())); } } } catch (Exception e1) { e1.printStackTrace(); } } }); btnBakiyeniren.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnBakiyeniren.setBounds(142, 121, 138, 33); contentPane.add(btnBakiyeniren); } }"},{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/bank/KrediOdeme.java","file_content":"package bank; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JLabel; import javax.swing.JOptionPane; import java.awt.Font; import javax.swing.JButton; import javax.swing.JTextField; import java.awt.event.ActionListener; import java.io.FileReader; import java.io.FileWriter; import java.util.List; import java.awt.event.ActionEvent; import java.awt.Color; public class KrediOdeme extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { KrediOdeme frame = new KrediOdeme(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public KrediOdeme() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JButton btnParaTransfer = new JButton(\"Para Transfer\"); btnParaTransfer.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { TransferYap transferYap = new TransferYap(); transferYap.setVisible(true); dispose(); } }); btnParaTransfer.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaTransfer.setBounds(209, 217, 138, 33); contentPane.add(btnParaTransfer); JButton btnBakiyeren = new JButton(\"Bakiye Öğren\"); btnBakiyeren.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { BakiyeOgren bakiye = new BakiyeOgren(); bakiye.setVisible(true); dispose(); } }); btnBakiyeren.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnBakiyeren.setBounds(71, 217, 128, 33); contentPane.add(btnBakiyeren); JButton btnNewButton = new JButton(\"Para Çek\"); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaCek paraCek = new ParaCek(); paraCek.setVisible(true); dispose(); } }); btnNewButton.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton.setBounds(71, 173, 128, 33); contentPane.add(btnNewButton); JButton btnParaYatr = new JButton(\"Para Yatır\"); btnParaYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaYatir paraYatir = new ParaYatir(); paraYatir.setVisible(true); dispose(); } }); btnParaYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaYatr.setBounds(209, 173, 138, 33); contentPane.add(btnParaYatr); JLabel lblNewLabel = new JLabel(\"Kalan Kredi Borcunuz :\"); lblNewLabel.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblNewLabel.setBounds(21, 25, 163, 33); contentPane.add(lblNewLabel); String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); JLabel lblNewLabel_1 = new JLabel(krediBorcunuGoster(tc, sifre)); lblNewLabel_1.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblNewLabel_1.setBounds(194, 25, 103, 33); contentPane.add(lblNewLabel_1); JLabel lbldeyeceinizTutarGiriniz = new JLabel(\"Ödeyeceğiniz Tutarı Giriniz :\"); lbldeyeceinizTutarGiriniz.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lbldeyeceinizTutarGiriniz.setBounds(21, 76, 196, 33); contentPane.add(lbldeyeceinizTutarGiriniz); textField = new JTextField(); textField.setBounds(227, 83, 121, 20); contentPane.add(textField); textField.setColumns(10); JButton btnde = new JButton(\"Öde\"); btnde.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); Double odenecekTutar = Double.valueOf(textField.getText()); for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { borcOdeme(tc, sifre,odenecekTutar); } } } catch (Exception e1) { e1.printStackTrace(); } } }); btnde.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnde.setBounds(137, 120, 128, 33); contentPane.add(btnde); } public static void borcOdeme(String tc, String sifre, double odenecekTutar) { try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { if (customer.getBakiye()>=odenecekTutar) { if (odenecekTutar <= customer.getKartBorc()) { if(odenecekTutar>=customer.getKartBorc()/3) { customer.setKartBorc(customer.getKartBorc() - odenecekTutar); customer.setBakiye(customer.getBakiye()- odenecekTutar); JOptionPane.showMessageDialog(null,\"Başarıyla borcunuz ödenmiştir kalan borcunuz : \"+customer.getKartBorc()); try (FileWriter writer = new FileWriter(JSON_FILE_PATH)) { gson.toJson(customers, writer); } break; } else { JOptionPane.showMessageDialog(null,\"Borcunuzun en az 3/1'ini ödeyebilirsiniz.\"); } } else { JOptionPane.showMessageDialog(null, \"Kart borcunuzdan fazla ödeyemezsiniz\"); } } else { JOptionPane.showMessageDialog(null, \"Kart limitinizden fazla tutarda ödeme yapamazsınız\"); } return; } } } catch (Exception e) { e.printStackTrace(); } } public static String krediBorcunuGoster(String tc, String sifre) { try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { String kartBorc = String.valueOf(customer.getKartBorc()); return kartBorc; } } return \"HAVE A PROBLEM\"; }catch (Exception e) { e.printStackTrace(); } return \"\"; } }"}]}}
{"project_id":209,"chunk_id":1,"content":{"main_file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/bank/ParaCek.java","main_file_content":"package bank; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JButton; import java.awt.Font; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JTextField; import java.awt.event.ActionListener; import java.io.FileReader; import java.io.FileWriter; import java.util.List; import java.awt.event.ActionEvent; import java.awt.Color; public class ParaCek extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { ParaCek frame = new ParaCek(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public ParaCek() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JLabel lbl_mesaj = new JLabel(\"\"); lbl_mesaj.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lbl_mesaj.setBounds(20, 143, 404, 19); contentPane.add(lbl_mesaj); JLabel lbl_bakiye = new JLabel(bakiye()); lbl_bakiye.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lbl_bakiye.setBounds(20, 11, 239, 19); contentPane.add(lbl_bakiye); JButton btnek = new JButton(\"Çek\"); btnek.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); boolean cekme = false; for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { lbl_bakiye.setText(\"Güncel bakiyeniz : \"+String.valueOf(customer.getBakiye())); double miktar =Double.parseDouble(textField.getText()); if (miktar <= customer.getBakiye()) { customer.setBakiye(customer.getBakiye() - miktar); lbl_mesaj.setText(\"Bakiyeniz Güncellendi\"); cekme = true; try (FileWriter writer = new FileWriter(JSON_FILE_PATH)) { gson.toJson(customers, writer); } } } } if(!cekme) { JOptionPane.showMessageDialog(null, \"Hatalı Giriş\"); lbl_mesaj.setText(\"Tekrar Deneyiniz\"); } } catch (Exception e1) { e1.printStackTrace(); } } }); btnek.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnek.setBounds(156, 99, 128, 33); contentPane.add(btnek); JButton btnParaYatr = new JButton(\"Para Yatır\"); btnParaYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaYatir paraYatir = new ParaYatir(); paraYatir.setVisible(true); dispose(); } }); btnParaYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaYatr.setBounds(84, 173, 128, 33); contentPane.add(btnParaYatr); JButton btnBakiyeren = new JButton(\"Bakiye Öğren\"); btnBakiyeren.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { BakiyeOgren bakiye = new BakiyeOgren(); bakiye.setVisible(true); dispose(); } }); btnBakiyeren.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnBakiyeren.setBounds(84, 217, 128, 33); contentPane.add(btnBakiyeren); JButton btnParaTransfer = new JButton(\"Para Transfer\"); btnParaTransfer.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { TransferYap transferYap = new TransferYap(); transferYap.setVisible(true); dispose(); } }); btnParaTransfer.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaTransfer.setBounds(222, 217, 138, 33); contentPane.add(btnParaTransfer); JButton btnKredideme = new JButton(\"Kredi Ödeme\"); btnKredideme.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KrediOdeme krediOdeme = new KrediOdeme(); krediOdeme.setVisible(true); dispose(); } }); btnKredideme.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnKredideme.setBounds(222, 173, 138, 33); contentPane.add(btnKredideme); JLabel lblekmekIstediinizTutar = new JLabel(\"Çekmek İstediğiniz Tutarı Giriniz : \"); lblekmekIstediinizTutar.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblekmekIstediinizTutar.setBounds(20, 40, 224, 33); contentPane.add(lblekmekIstediinizTutar); textField = new JTextField(); textField.setColumns(10); textField.setBounds(254, 47, 139, 20); contentPane.add(textField); } public static String bakiye() { String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { String text = String.valueOf(\"Hesabınızdaki Tutar \"+customer.getBakiye()+\" TL\"); return text; } } System.out.println(\"Giriş yapılan hesap bulunamadı.\"); } catch (Exception e1) { e1.printStackTrace(); } return \"\"; } }","dependencies":[{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/bank/ParaYatir.java","file_content":"package bank; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JButton; import java.awt.Font; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JTextField; import java.awt.event.ActionListener; import java.io.FileReader; import java.io.FileWriter; import java.util.List; import java.awt.event.ActionEvent; import java.awt.Color; public class ParaYatir extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { ParaYatir frame = new ParaYatir(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public ParaYatir() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JButton btnNewButton = new JButton(\"Para Çek\"); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaCek paraCek = new ParaCek(); paraCek.setVisible(true); dispose(); } }); btnNewButton.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton.setBounds(74, 173, 128, 33); contentPane.add(btnNewButton); JButton btnParaTransfer = new JButton(\"Para Transfer\"); btnParaTransfer.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { TransferYap transferYap = new TransferYap(); transferYap.setVisible(true); dispose(); } }); btnParaTransfer.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaTransfer.setBounds(212, 217, 138, 33); contentPane.add(btnParaTransfer); JButton btnBakiyeren = new JButton(\"Bakiye Öğren\"); btnBakiyeren.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { BakiyeOgren bakiye = new BakiyeOgren(); bakiye.setVisible(true); dispose(); } }); btnBakiyeren.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnBakiyeren.setBounds(74, 217, 128, 33); contentPane.add(btnBakiyeren); JButton btnYatr = new JButton(\"Yatır\"); btnYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); boolean cekme = false; for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { double miktar =Double.parseDouble(textField.getText()); if (miktar <= 500 && miktar>=5) { customer.setBakiye(customer.getBakiye() + miktar); cekme = true; try (FileWriter writer = new FileWriter(JSON_FILE_PATH)) { gson.toJson(customers, writer); } JOptionPane.showMessageDialog(null,\" İşlem başarıyla gerçekleştirildi güncel bakiyeniz : \"+customer.getBakiye()); } else { JOptionPane.showMessageDialog(null, \"500 TL'den fazla 5 TL'den aşşağıya yükleme yapılamaz\"); } } } if(!cekme) { JOptionPane.showMessageDialog(null, \"Hatalı Giriş\"); } } catch (Exception e1) { e1.printStackTrace(); } } }); btnYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnYatr.setBounds(146, 99, 128, 33); contentPane.add(btnYatr); JLabel lblYatrmakIstediinizTutar = new JLabel(\"Yatırmak İstediğiniz Tutarı Giriniz : \"); lblYatrmakIstediinizTutar.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblYatrmakIstediinizTutar.setBounds(10, 40, 224, 33); contentPane.add(lblYatrmakIstediinizTutar); textField = new JTextField(); textField.setBounds(244, 47, 139, 20); contentPane.add(textField); textField.setColumns(10); JButton btnKredideme = new JButton(\"Kredi Ödeme\"); btnKredideme.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KrediOdeme krediOdeme = new KrediOdeme(); krediOdeme.setVisible(true); dispose(); } }); btnKredideme.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnKredideme.setBounds(212, 173, 138, 33); contentPane.add(btnKredideme); } }"},{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/bank/TransferYap.java","file_content":"package bank; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JButton; import java.awt.Font; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JTextField; import java.awt.event.ActionListener; import java.io.FileReader; import java.io.FileWriter; import java.util.List; import java.awt.event.ActionEvent; import java.awt.Color; public class TransferYap extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; private JTextField textField_1; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { TransferYap frame = new TransferYap(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public TransferYap() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JButton btnYatr = new JButton(\"Yatır\"); btnYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); String aliciHesapNumara = String.valueOf(textField.getText()); Double yollanacakMiktar = Double.parseDouble(textField_1.getText()); for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { performTransfer(customers, tc, aliciHesapNumara, yollanacakMiktar); } } } catch (Exception e1) { e1.printStackTrace(); } } }); btnYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnYatr.setBounds(157, 99, 128, 33); contentPane.add(btnYatr); JButton btnNewButton = new JButton(\"Para Çek\"); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaCek paraCek = new ParaCek(); paraCek.setVisible(true); dispose(); } }); btnNewButton.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton.setBounds(85, 173, 128, 33); contentPane.add(btnNewButton); JButton btnBakiyeren = new JButton(\"Bakiye Öğren\"); btnBakiyeren.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { BakiyeOgren bakiye = new BakiyeOgren(); bakiye.setVisible(true); dispose(); } }); btnBakiyeren.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnBakiyeren.setBounds(85, 217, 128, 33); contentPane.add(btnBakiyeren); JButton btnParaYatr = new JButton(\"Para Yatır\"); btnParaYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaYatir paraYatir = new ParaYatir(); paraYatir.setVisible(true); dispose(); } }); btnParaYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaYatr.setBounds(223, 217, 138, 33); contentPane.add(btnParaYatr); JButton btnKredideme = new JButton(\"Kredi Ödeme\"); btnKredideme.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KrediOdeme krediOdeme = new KrediOdeme(); krediOdeme.setVisible(true); dispose(); } }); btnKredideme.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnKredideme.setBounds(223, 173, 138, 33); contentPane.add(btnKredideme); JLabel lblTransferYaplacakHesap = new JLabel(\"Transfer Yapılacak Hesap No Giriniz : \"); lblTransferYaplacakHesap.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblTransferYaplacakHesap.setBounds(20, 11, 247, 33); contentPane.add(lblTransferYaplacakHesap); textField = new JTextField(); textField.setColumns(10); textField.setBounds(264, 18, 139, 20); contentPane.add(textField); JLabel lblTransferYaplacakTutar = new JLabel(\"Transfer Yapılacak Tutarı Giriniz :\"); lblTransferYaplacakTutar.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblTransferYaplacakTutar.setBounds(20, 55, 247, 33); contentPane.add(lblTransferYaplacakTutar); textField_1 = new JTextField(); textField_1.setColumns(10); textField_1.setBounds(264, 62, 139, 20); contentPane.add(textField_1); } public static void performTransfer(List<kullaniciVerileri> customers, String gonderenTc, String aliciHesapNumara, double transferMiktar) { for (kullaniciVerileri gonderen : customers) { if (gonderen.getTcKimlik().toLowerCase().equals(gonderenTc)) { for (kullaniciVerileri alici : customers) { if (alici.getHesapNumarasi().equals(aliciHesapNumara)) { if (gonderen.getBakiye() >= transferMiktar) { gonderen.setBakiye(gonderen.getBakiye() - transferMiktar); alici.setBakiye(alici.getBakiye() + transferMiktar); try (FileWriter writer = new FileWriter(JSON_FILE_PATH)) { Gson gson = new Gson(); gson.toJson(customers, writer); } catch (Exception e) { e.printStackTrace(); } JOptionPane.showMessageDialog(null, alici.getFirstName()+\" \"+alici.getLastName()+ \" adlı kişiye \" + \"\" + transferMiktar + \" TL Para Transferiniz Başarıyla Gerçekleştirildi.\"); } else { JOptionPane.showMessageDialog(null, \"Hatalı Giriş\"); } return; } } JOptionPane.showMessageDialog(null,\"Alıcı hesap bulunamadı.\"); return; } } JOptionPane.showMessageDialog(null,\"Gönderen hesap bulunamadı.\"); } }"}]}}
{"project_id":209,"chunk_id":0,"content":{"main_file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/bank/ParaYatir.java","main_file_content":"package bank; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JButton; import java.awt.Font; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JTextField; import java.awt.event.ActionListener; import java.io.FileReader; import java.io.FileWriter; import java.util.List; import java.awt.event.ActionEvent; import java.awt.Color; public class ParaYatir extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { ParaYatir frame = new ParaYatir(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public ParaYatir() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JButton btnNewButton = new JButton(\"Para Çek\"); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaCek paraCek = new ParaCek(); paraCek.setVisible(true); dispose(); } }); btnNewButton.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton.setBounds(74, 173, 128, 33); contentPane.add(btnNewButton); JButton btnParaTransfer = new JButton(\"Para Transfer\"); btnParaTransfer.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { TransferYap transferYap = new TransferYap(); transferYap.setVisible(true); dispose(); } }); btnParaTransfer.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaTransfer.setBounds(212, 217, 138, 33); contentPane.add(btnParaTransfer); JButton btnBakiyeren = new JButton(\"Bakiye Öğren\"); btnBakiyeren.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { BakiyeOgren bakiye = new BakiyeOgren(); bakiye.setVisible(true); dispose(); } }); btnBakiyeren.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnBakiyeren.setBounds(74, 217, 128, 33); contentPane.add(btnBakiyeren); JButton btnYatr = new JButton(\"Yatır\"); btnYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); boolean cekme = false; for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { double miktar =Double.parseDouble(textField.getText()); if (miktar <= 500 && miktar>=5) { customer.setBakiye(customer.getBakiye() + miktar); cekme = true; try (FileWriter writer = new FileWriter(JSON_FILE_PATH)) { gson.toJson(customers, writer); } JOptionPane.showMessageDialog(null,\" İşlem başarıyla gerçekleştirildi güncel bakiyeniz : \"+customer.getBakiye()); } else { JOptionPane.showMessageDialog(null, \"500 TL'den fazla 5 TL'den aşşağıya yükleme yapılamaz\"); } } } if(!cekme) { JOptionPane.showMessageDialog(null, \"Hatalı Giriş\"); } } catch (Exception e1) { e1.printStackTrace(); } } }); btnYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnYatr.setBounds(146, 99, 128, 33); contentPane.add(btnYatr); JLabel lblYatrmakIstediinizTutar = new JLabel(\"Yatırmak İstediğiniz Tutarı Giriniz : \"); lblYatrmakIstediinizTutar.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblYatrmakIstediinizTutar.setBounds(10, 40, 224, 33); contentPane.add(lblYatrmakIstediinizTutar); textField = new JTextField(); textField.setBounds(244, 47, 139, 20); contentPane.add(textField); textField.setColumns(10); JButton btnKredideme = new JButton(\"Kredi Ödeme\"); btnKredideme.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KrediOdeme krediOdeme = new KrediOdeme(); krediOdeme.setVisible(true); dispose(); } }); btnKredideme.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnKredideme.setBounds(212, 173, 138, 33); contentPane.add(btnKredideme); } }","dependencies":[{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/DataRead/KimlikVeri.java","file_content":"package DataRead; public class KimlikVeri { private static String tc; private static String sifre; public static String getTc() { return tc; } public static void setTc(String tc) { KimlikVeri.tc = tc; } public static String getSifre() { return sifre; } public static void setSifre(String sifre) { KimlikVeri.sifre = sifre; } }"},{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/DataRead/kullaniciVerileri.java","file_content":"package DataRead; public class kullaniciVerileri { private String firstName; private String lastName; private String telefonNumarasi; private String adres; private String dogumTarih; private String sifre; private String hesapNumarasi; private String tcKimlik; private double bakiye; private double kartEkstre; private double kartBorc; public kullaniciVerileri(String firstName, String lastName, String telefonNumarasi, String adres,String dogumTarih, String sifre, String hesapNumarasi, String tcKimlik, Double bakiye, Double kartEkstre, Double kartBorc) { this.firstName = firstName; this.lastName = lastName; this.telefonNumarasi = telefonNumarasi; this.tcKimlik=tcKimlik; this.adres = adres; this.dogumTarih = dogumTarih; this.sifre = sifre; this.hesapNumarasi = hesapNumarasi; this.bakiye=bakiye; this.kartEkstre=kartEkstre; this.kartBorc=kartBorc; } public String getFirstName() { return firstName; } public void setFirstName(String firstName) { this.firstName = firstName; } public String getLastName() { return lastName; } public void setLastName(String lastName) { this.lastName = lastName; } public String getTelefonNumarasi() { return telefonNumarasi; } public void setTelefonNumarasi(String telefonNumarasi) { this.telefonNumarasi = telefonNumarasi; } public String getAdres() { return adres; } public void setAdres(String adres) { this.adres = adres; } public String getDogumTarih() { return dogumTarih; } public void setDogumTarih(String dogumTarih) { this.dogumTarih = dogumTarih; } public String getSifre() { return sifre; } public void setSifre(String sifre) { this.sifre = sifre; } public String getHesapNumarasi() { return hesapNumarasi; } public void setHesapNumarasi(String hesapNumarasi) { this.hesapNumarasi = hesapNumarasi; } public String getTcKimlik() { return tcKimlik; } public void setTcKimlik(String tcKimlik) { this.tcKimlik = tcKimlik; } public double getBakiye() { return bakiye; } public void setBakiye(double bakiye) { this.bakiye = bakiye; } public double getKartEkstre() { return kartEkstre; } public void setKartEkstre(double kartEkstre) { this.kartEkstre = kartEkstre; } public double getKartBorc() { return kartBorc; } public void setKartBorc(double kartBorc) { this.kartBorc = kartBorc; } }"},{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/bank/BakiyeOgren.java","file_content":"package bank; import java.awt.EventQueue; import java.util.List; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JLabel; import java.awt.Font; import javax.swing.JButton; import java.awt.event.ActionListener; import java.io.FileReader; import java.awt.event.ActionEvent; import javax.swing.SwingConstants; import java.awt.Color; public class BakiyeOgren extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { BakiyeOgren frame = new BakiyeOgren(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public BakiyeOgren() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JLabel lblNewLabel = new JLabel(\"Hesabınızda Bulunan Bakiye Miktarı \"); lblNewLabel.setFont(new Font(\"SansSerif\", Font.BOLD, 15)); lblNewLabel.setBounds(78, -12, 280, 70); contentPane.add(lblNewLabel); JLabel bk_ogren = new JLabel(\"\"); bk_ogren.setVerticalAlignment(SwingConstants.TOP); bk_ogren.setFont(new Font(\"SansSerif\", Font.BOLD, 15)); bk_ogren.setBounds(142, 40, 128, 70); contentPane.add(bk_ogren); JButton btnNewButton = new JButton(\"Para Çek\"); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaCek paraCek = new ParaCek(); paraCek.setVisible(true); dispose(); } }); btnNewButton.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton.setBounds(78, 173, 117, 33); contentPane.add(btnNewButton); JButton btnParaYatr = new JButton(\"Para Yatır\"); btnParaYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaYatir paraYatir = new ParaYatir(); paraYatir.setVisible(true); dispose(); } }); btnParaYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaYatr.setBounds(205, 173, 128, 33); contentPane.add(btnParaYatr); JButton btnKredideme = new JButton(\"Kredi Ödeme\"); btnKredideme.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KrediOdeme krediOdeme = new KrediOdeme(); krediOdeme.setVisible(true); dispose(); } }); btnKredideme.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnKredideme.setBounds(78, 217, 117, 33); contentPane.add(btnKredideme); JButton btnParaTransfer = new JButton(\"Para Transfer\"); btnParaTransfer.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { TransferYap transferYap = new TransferYap(); transferYap.setVisible(true); dispose(); } }); btnParaTransfer.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaTransfer.setBounds(205, 217, 128, 33); contentPane.add(btnParaTransfer); JButton btnBakiyeniren = new JButton(\"Bakiyeni Öğren\"); btnBakiyeniren.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { String tc=KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); try (FileReader reader = new FileReader(JSON_FILE_PATH)){ Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); for(kullaniciVerileri customer : customers){ if(tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { bk_ogren.setText(String.valueOf(customer.getBakiye())); } } } catch (Exception e1) { e1.printStackTrace(); } } }); btnBakiyeniren.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnBakiyeniren.setBounds(142, 121, 138, 33); contentPane.add(btnBakiyeniren); } }"},{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/bank/KrediOdeme.java","file_content":"package bank; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JLabel; import javax.swing.JOptionPane; import java.awt.Font; import javax.swing.JButton; import javax.swing.JTextField; import java.awt.event.ActionListener; import java.io.FileReader; import java.io.FileWriter; import java.util.List; import java.awt.event.ActionEvent; import java.awt.Color; public class KrediOdeme extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { KrediOdeme frame = new KrediOdeme(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public KrediOdeme() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JButton btnParaTransfer = new JButton(\"Para Transfer\"); btnParaTransfer.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { TransferYap transferYap = new TransferYap(); transferYap.setVisible(true); dispose(); } }); btnParaTransfer.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaTransfer.setBounds(209, 217, 138, 33); contentPane.add(btnParaTransfer); JButton btnBakiyeren = new JButton(\"Bakiye Öğren\"); btnBakiyeren.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { BakiyeOgren bakiye = new BakiyeOgren(); bakiye.setVisible(true); dispose(); } }); btnBakiyeren.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnBakiyeren.setBounds(71, 217, 128, 33); contentPane.add(btnBakiyeren); JButton btnNewButton = new JButton(\"Para Çek\"); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaCek paraCek = new ParaCek(); paraCek.setVisible(true); dispose(); } }); btnNewButton.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton.setBounds(71, 173, 128, 33); contentPane.add(btnNewButton); JButton btnParaYatr = new JButton(\"Para Yatır\"); btnParaYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaYatir paraYatir = new ParaYatir(); paraYatir.setVisible(true); dispose(); } }); btnParaYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaYatr.setBounds(209, 173, 138, 33); contentPane.add(btnParaYatr); JLabel lblNewLabel = new JLabel(\"Kalan Kredi Borcunuz :\"); lblNewLabel.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblNewLabel.setBounds(21, 25, 163, 33); contentPane.add(lblNewLabel); String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); JLabel lblNewLabel_1 = new JLabel(krediBorcunuGoster(tc, sifre)); lblNewLabel_1.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblNewLabel_1.setBounds(194, 25, 103, 33); contentPane.add(lblNewLabel_1); JLabel lbldeyeceinizTutarGiriniz = new JLabel(\"Ödeyeceğiniz Tutarı Giriniz :\"); lbldeyeceinizTutarGiriniz.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lbldeyeceinizTutarGiriniz.setBounds(21, 76, 196, 33); contentPane.add(lbldeyeceinizTutarGiriniz); textField = new JTextField(); textField.setBounds(227, 83, 121, 20); contentPane.add(textField); textField.setColumns(10); JButton btnde = new JButton(\"Öde\"); btnde.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); Double odenecekTutar = Double.valueOf(textField.getText()); for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { borcOdeme(tc, sifre,odenecekTutar); } } } catch (Exception e1) { e1.printStackTrace(); } } }); btnde.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnde.setBounds(137, 120, 128, 33); contentPane.add(btnde); } public static void borcOdeme(String tc, String sifre, double odenecekTutar) { try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { if (customer.getBakiye()>=odenecekTutar) { if (odenecekTutar <= customer.getKartBorc()) { if(odenecekTutar>=customer.getKartBorc()/3) { customer.setKartBorc(customer.getKartBorc() - odenecekTutar); customer.setBakiye(customer.getBakiye()- odenecekTutar); JOptionPane.showMessageDialog(null,\"Başarıyla borcunuz ödenmiştir kalan borcunuz : \"+customer.getKartBorc()); try (FileWriter writer = new FileWriter(JSON_FILE_PATH)) { gson.toJson(customers, writer); } break; } else { JOptionPane.showMessageDialog(null,\"Borcunuzun en az 3/1'ini ödeyebilirsiniz.\"); } } else { JOptionPane.showMessageDialog(null, \"Kart borcunuzdan fazla ödeyemezsiniz\"); } } else { JOptionPane.showMessageDialog(null, \"Kart limitinizden fazla tutarda ödeme yapamazsınız\"); } return; } } } catch (Exception e) { e.printStackTrace(); } } public static String krediBorcunuGoster(String tc, String sifre) { try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { String kartBorc = String.valueOf(customer.getKartBorc()); return kartBorc; } } return \"HAVE A PROBLEM\"; }catch (Exception e) { e.printStackTrace(); } return \"\"; } }"}]}}
{"project_id":209,"chunk_id":1,"content":{"main_file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/bank/ParaYatir.java","main_file_content":"package bank; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JButton; import java.awt.Font; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JTextField; import java.awt.event.ActionListener; import java.io.FileReader; import java.io.FileWriter; import java.util.List; import java.awt.event.ActionEvent; import java.awt.Color; public class ParaYatir extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { ParaYatir frame = new ParaYatir(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public ParaYatir() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JButton btnNewButton = new JButton(\"Para Çek\"); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaCek paraCek = new ParaCek(); paraCek.setVisible(true); dispose(); } }); btnNewButton.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton.setBounds(74, 173, 128, 33); contentPane.add(btnNewButton); JButton btnParaTransfer = new JButton(\"Para Transfer\"); btnParaTransfer.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { TransferYap transferYap = new TransferYap(); transferYap.setVisible(true); dispose(); } }); btnParaTransfer.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaTransfer.setBounds(212, 217, 138, 33); contentPane.add(btnParaTransfer); JButton btnBakiyeren = new JButton(\"Bakiye Öğren\"); btnBakiyeren.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { BakiyeOgren bakiye = new BakiyeOgren(); bakiye.setVisible(true); dispose(); } }); btnBakiyeren.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnBakiyeren.setBounds(74, 217, 128, 33); contentPane.add(btnBakiyeren); JButton btnYatr = new JButton(\"Yatır\"); btnYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); boolean cekme = false; for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { double miktar =Double.parseDouble(textField.getText()); if (miktar <= 500 && miktar>=5) { customer.setBakiye(customer.getBakiye() + miktar); cekme = true; try (FileWriter writer = new FileWriter(JSON_FILE_PATH)) { gson.toJson(customers, writer); } JOptionPane.showMessageDialog(null,\" İşlem başarıyla gerçekleştirildi güncel bakiyeniz : \"+customer.getBakiye()); } else { JOptionPane.showMessageDialog(null, \"500 TL'den fazla 5 TL'den aşşağıya yükleme yapılamaz\"); } } } if(!cekme) { JOptionPane.showMessageDialog(null, \"Hatalı Giriş\"); } } catch (Exception e1) { e1.printStackTrace(); } } }); btnYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnYatr.setBounds(146, 99, 128, 33); contentPane.add(btnYatr); JLabel lblYatrmakIstediinizTutar = new JLabel(\"Yatırmak İstediğiniz Tutarı Giriniz : \"); lblYatrmakIstediinizTutar.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblYatrmakIstediinizTutar.setBounds(10, 40, 224, 33); contentPane.add(lblYatrmakIstediinizTutar); textField = new JTextField(); textField.setBounds(244, 47, 139, 20); contentPane.add(textField); textField.setColumns(10); JButton btnKredideme = new JButton(\"Kredi Ödeme\"); btnKredideme.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KrediOdeme krediOdeme = new KrediOdeme(); krediOdeme.setVisible(true); dispose(); } }); btnKredideme.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnKredideme.setBounds(212, 173, 138, 33); contentPane.add(btnKredideme); } }","dependencies":[{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/bank/ParaCek.java","file_content":"package bank; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JButton; import java.awt.Font; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JTextField; import java.awt.event.ActionListener; import java.io.FileReader; import java.io.FileWriter; import java.util.List; import java.awt.event.ActionEvent; import java.awt.Color; public class ParaCek extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { ParaCek frame = new ParaCek(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public ParaCek() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JLabel lbl_mesaj = new JLabel(\"\"); lbl_mesaj.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lbl_mesaj.setBounds(20, 143, 404, 19); contentPane.add(lbl_mesaj); JLabel lbl_bakiye = new JLabel(bakiye()); lbl_bakiye.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lbl_bakiye.setBounds(20, 11, 239, 19); contentPane.add(lbl_bakiye); JButton btnek = new JButton(\"Çek\"); btnek.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); boolean cekme = false; for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { lbl_bakiye.setText(\"Güncel bakiyeniz : \"+String.valueOf(customer.getBakiye())); double miktar =Double.parseDouble(textField.getText()); if (miktar <= customer.getBakiye()) { customer.setBakiye(customer.getBakiye() - miktar); lbl_mesaj.setText(\"Bakiyeniz Güncellendi\"); cekme = true; try (FileWriter writer = new FileWriter(JSON_FILE_PATH)) { gson.toJson(customers, writer); } } } } if(!cekme) { JOptionPane.showMessageDialog(null, \"Hatalı Giriş\"); lbl_mesaj.setText(\"Tekrar Deneyiniz\"); } } catch (Exception e1) { e1.printStackTrace(); } } }); btnek.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnek.setBounds(156, 99, 128, 33); contentPane.add(btnek); JButton btnParaYatr = new JButton(\"Para Yatır\"); btnParaYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaYatir paraYatir = new ParaYatir(); paraYatir.setVisible(true); dispose(); } }); btnParaYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaYatr.setBounds(84, 173, 128, 33); contentPane.add(btnParaYatr); JButton btnBakiyeren = new JButton(\"Bakiye Öğren\"); btnBakiyeren.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { BakiyeOgren bakiye = new BakiyeOgren(); bakiye.setVisible(true); dispose(); } }); btnBakiyeren.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnBakiyeren.setBounds(84, 217, 128, 33); contentPane.add(btnBakiyeren); JButton btnParaTransfer = new JButton(\"Para Transfer\"); btnParaTransfer.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { TransferYap transferYap = new TransferYap(); transferYap.setVisible(true); dispose(); } }); btnParaTransfer.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaTransfer.setBounds(222, 217, 138, 33); contentPane.add(btnParaTransfer); JButton btnKredideme = new JButton(\"Kredi Ödeme\"); btnKredideme.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KrediOdeme krediOdeme = new KrediOdeme(); krediOdeme.setVisible(true); dispose(); } }); btnKredideme.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnKredideme.setBounds(222, 173, 138, 33); contentPane.add(btnKredideme); JLabel lblekmekIstediinizTutar = new JLabel(\"Çekmek İstediğiniz Tutarı Giriniz : \"); lblekmekIstediinizTutar.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblekmekIstediinizTutar.setBounds(20, 40, 224, 33); contentPane.add(lblekmekIstediinizTutar); textField = new JTextField(); textField.setColumns(10); textField.setBounds(254, 47, 139, 20); contentPane.add(textField); } public static String bakiye() { String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { String text = String.valueOf(\"Hesabınızdaki Tutar \"+customer.getBakiye()+\" TL\"); return text; } } System.out.println(\"Giriş yapılan hesap bulunamadı.\"); } catch (Exception e1) { e1.printStackTrace(); } return \"\"; } }"},{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/bank/TransferYap.java","file_content":"package bank; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JButton; import java.awt.Font; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JTextField; import java.awt.event.ActionListener; import java.io.FileReader; import java.io.FileWriter; import java.util.List; import java.awt.event.ActionEvent; import java.awt.Color; public class TransferYap extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; private JTextField textField_1; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { TransferYap frame = new TransferYap(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public TransferYap() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JButton btnYatr = new JButton(\"Yatır\"); btnYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); String aliciHesapNumara = String.valueOf(textField.getText()); Double yollanacakMiktar = Double.parseDouble(textField_1.getText()); for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { performTransfer(customers, tc, aliciHesapNumara, yollanacakMiktar); } } } catch (Exception e1) { e1.printStackTrace(); } } }); btnYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnYatr.setBounds(157, 99, 128, 33); contentPane.add(btnYatr); JButton btnNewButton = new JButton(\"Para Çek\"); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaCek paraCek = new ParaCek(); paraCek.setVisible(true); dispose(); } }); btnNewButton.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton.setBounds(85, 173, 128, 33); contentPane.add(btnNewButton); JButton btnBakiyeren = new JButton(\"Bakiye Öğren\"); btnBakiyeren.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { BakiyeOgren bakiye = new BakiyeOgren(); bakiye.setVisible(true); dispose(); } }); btnBakiyeren.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnBakiyeren.setBounds(85, 217, 128, 33); contentPane.add(btnBakiyeren); JButton btnParaYatr = new JButton(\"Para Yatır\"); btnParaYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaYatir paraYatir = new ParaYatir(); paraYatir.setVisible(true); dispose(); } }); btnParaYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaYatr.setBounds(223, 217, 138, 33); contentPane.add(btnParaYatr); JButton btnKredideme = new JButton(\"Kredi Ödeme\"); btnKredideme.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KrediOdeme krediOdeme = new KrediOdeme(); krediOdeme.setVisible(true); dispose(); } }); btnKredideme.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnKredideme.setBounds(223, 173, 138, 33); contentPane.add(btnKredideme); JLabel lblTransferYaplacakHesap = new JLabel(\"Transfer Yapılacak Hesap No Giriniz : \"); lblTransferYaplacakHesap.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblTransferYaplacakHesap.setBounds(20, 11, 247, 33); contentPane.add(lblTransferYaplacakHesap); textField = new JTextField(); textField.setColumns(10); textField.setBounds(264, 18, 139, 20); contentPane.add(textField); JLabel lblTransferYaplacakTutar = new JLabel(\"Transfer Yapılacak Tutarı Giriniz :\"); lblTransferYaplacakTutar.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblTransferYaplacakTutar.setBounds(20, 55, 247, 33); contentPane.add(lblTransferYaplacakTutar); textField_1 = new JTextField(); textField_1.setColumns(10); textField_1.setBounds(264, 62, 139, 20); contentPane.add(textField_1); } public static void performTransfer(List<kullaniciVerileri> customers, String gonderenTc, String aliciHesapNumara, double transferMiktar) { for (kullaniciVerileri gonderen : customers) { if (gonderen.getTcKimlik().toLowerCase().equals(gonderenTc)) { for (kullaniciVerileri alici : customers) { if (alici.getHesapNumarasi().equals(aliciHesapNumara)) { if (gonderen.getBakiye() >= transferMiktar) { gonderen.setBakiye(gonderen.getBakiye() - transferMiktar); alici.setBakiye(alici.getBakiye() + transferMiktar); try (FileWriter writer = new FileWriter(JSON_FILE_PATH)) { Gson gson = new Gson(); gson.toJson(customers, writer); } catch (Exception e) { e.printStackTrace(); } JOptionPane.showMessageDialog(null, alici.getFirstName()+\" \"+alici.getLastName()+ \" adlı kişiye \" + \"\" + transferMiktar + \" TL Para Transferiniz Başarıyla Gerçekleştirildi.\"); } else { JOptionPane.showMessageDialog(null, \"Hatalı Giriş\"); } return; } } JOptionPane.showMessageDialog(null,\"Alıcı hesap bulunamadı.\"); return; } } JOptionPane.showMessageDialog(null,\"Gönderen hesap bulunamadı.\"); } }"}]}}
{"project_id":209,"chunk_id":0,"content":{"main_file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/bank/BakiyeOgren.java","main_file_content":"package bank; import java.awt.EventQueue; import java.util.List; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JLabel; import java.awt.Font; import javax.swing.JButton; import java.awt.event.ActionListener; import java.io.FileReader; import java.awt.event.ActionEvent; import javax.swing.SwingConstants; import java.awt.Color; public class BakiyeOgren extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { BakiyeOgren frame = new BakiyeOgren(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public BakiyeOgren() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JLabel lblNewLabel = new JLabel(\"Hesabınızda Bulunan Bakiye Miktarı \"); lblNewLabel.setFont(new Font(\"SansSerif\", Font.BOLD, 15)); lblNewLabel.setBounds(78, -12, 280, 70); contentPane.add(lblNewLabel); JLabel bk_ogren = new JLabel(\"\"); bk_ogren.setVerticalAlignment(SwingConstants.TOP); bk_ogren.setFont(new Font(\"SansSerif\", Font.BOLD, 15)); bk_ogren.setBounds(142, 40, 128, 70); contentPane.add(bk_ogren); JButton btnNewButton = new JButton(\"Para Çek\"); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaCek paraCek = new ParaCek(); paraCek.setVisible(true); dispose(); } }); btnNewButton.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton.setBounds(78, 173, 117, 33); contentPane.add(btnNewButton); JButton btnParaYatr = new JButton(\"Para Yatır\"); btnParaYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaYatir paraYatir = new ParaYatir(); paraYatir.setVisible(true); dispose(); } }); btnParaYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaYatr.setBounds(205, 173, 128, 33); contentPane.add(btnParaYatr); JButton btnKredideme = new JButton(\"Kredi Ödeme\"); btnKredideme.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KrediOdeme krediOdeme = new KrediOdeme(); krediOdeme.setVisible(true); dispose(); } }); btnKredideme.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnKredideme.setBounds(78, 217, 117, 33); contentPane.add(btnKredideme); JButton btnParaTransfer = new JButton(\"Para Transfer\"); btnParaTransfer.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { TransferYap transferYap = new TransferYap(); transferYap.setVisible(true); dispose(); } }); btnParaTransfer.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaTransfer.setBounds(205, 217, 128, 33); contentPane.add(btnParaTransfer); JButton btnBakiyeniren = new JButton(\"Bakiyeni Öğren\"); btnBakiyeniren.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { String tc=KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); try (FileReader reader = new FileReader(JSON_FILE_PATH)){ Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); for(kullaniciVerileri customer : customers){ if(tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { bk_ogren.setText(String.valueOf(customer.getBakiye())); } } } catch (Exception e1) { e1.printStackTrace(); } } }); btnBakiyeniren.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnBakiyeniren.setBounds(142, 121, 138, 33); contentPane.add(btnBakiyeniren); } }","dependencies":[{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/DataRead/KimlikVeri.java","file_content":"package DataRead; public class KimlikVeri { private static String tc; private static String sifre; public static String getTc() { return tc; } public static void setTc(String tc) { KimlikVeri.tc = tc; } public static String getSifre() { return sifre; } public static void setSifre(String sifre) { KimlikVeri.sifre = sifre; } }"},{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/DataRead/kullaniciVerileri.java","file_content":"package DataRead; public class kullaniciVerileri { private String firstName; private String lastName; private String telefonNumarasi; private String adres; private String dogumTarih; private String sifre; private String hesapNumarasi; private String tcKimlik; private double bakiye; private double kartEkstre; private double kartBorc; public kullaniciVerileri(String firstName, String lastName, String telefonNumarasi, String adres,String dogumTarih, String sifre, String hesapNumarasi, String tcKimlik, Double bakiye, Double kartEkstre, Double kartBorc) { this.firstName = firstName; this.lastName = lastName; this.telefonNumarasi = telefonNumarasi; this.tcKimlik=tcKimlik; this.adres = adres; this.dogumTarih = dogumTarih; this.sifre = sifre; this.hesapNumarasi = hesapNumarasi; this.bakiye=bakiye; this.kartEkstre=kartEkstre; this.kartBorc=kartBorc; } public String getFirstName() { return firstName; } public void setFirstName(String firstName) { this.firstName = firstName; } public String getLastName() { return lastName; } public void setLastName(String lastName) { this.lastName = lastName; } public String getTelefonNumarasi() { return telefonNumarasi; } public void setTelefonNumarasi(String telefonNumarasi) { this.telefonNumarasi = telefonNumarasi; } public String getAdres() { return adres; } public void setAdres(String adres) { this.adres = adres; } public String getDogumTarih() { return dogumTarih; } public void setDogumTarih(String dogumTarih) { this.dogumTarih = dogumTarih; } public String getSifre() { return sifre; } public void setSifre(String sifre) { this.sifre = sifre; } public String getHesapNumarasi() { return hesapNumarasi; } public void setHesapNumarasi(String hesapNumarasi) { this.hesapNumarasi = hesapNumarasi; } public String getTcKimlik() { return tcKimlik; } public void setTcKimlik(String tcKimlik) { this.tcKimlik = tcKimlik; } public double getBakiye() { return bakiye; } public void setBakiye(double bakiye) { this.bakiye = bakiye; } public double getKartEkstre() { return kartEkstre; } public void setKartEkstre(double kartEkstre) { this.kartEkstre = kartEkstre; } public double getKartBorc() { return kartBorc; } public void setKartBorc(double kartBorc) { this.kartBorc = kartBorc; } }"},{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/bank/KrediOdeme.java","file_content":"package bank; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JLabel; import javax.swing.JOptionPane; import java.awt.Font; import javax.swing.JButton; import javax.swing.JTextField; import java.awt.event.ActionListener; import java.io.FileReader; import java.io.FileWriter; import java.util.List; import java.awt.event.ActionEvent; import java.awt.Color; public class KrediOdeme extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { KrediOdeme frame = new KrediOdeme(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public KrediOdeme() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JButton btnParaTransfer = new JButton(\"Para Transfer\"); btnParaTransfer.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { TransferYap transferYap = new TransferYap(); transferYap.setVisible(true); dispose(); } }); btnParaTransfer.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaTransfer.setBounds(209, 217, 138, 33); contentPane.add(btnParaTransfer); JButton btnBakiyeren = new JButton(\"Bakiye Öğren\"); btnBakiyeren.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { BakiyeOgren bakiye = new BakiyeOgren(); bakiye.setVisible(true); dispose(); } }); btnBakiyeren.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnBakiyeren.setBounds(71, 217, 128, 33); contentPane.add(btnBakiyeren); JButton btnNewButton = new JButton(\"Para Çek\"); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaCek paraCek = new ParaCek(); paraCek.setVisible(true); dispose(); } }); btnNewButton.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton.setBounds(71, 173, 128, 33); contentPane.add(btnNewButton); JButton btnParaYatr = new JButton(\"Para Yatır\"); btnParaYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaYatir paraYatir = new ParaYatir(); paraYatir.setVisible(true); dispose(); } }); btnParaYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaYatr.setBounds(209, 173, 138, 33); contentPane.add(btnParaYatr); JLabel lblNewLabel = new JLabel(\"Kalan Kredi Borcunuz :\"); lblNewLabel.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblNewLabel.setBounds(21, 25, 163, 33); contentPane.add(lblNewLabel); String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); JLabel lblNewLabel_1 = new JLabel(krediBorcunuGoster(tc, sifre)); lblNewLabel_1.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblNewLabel_1.setBounds(194, 25, 103, 33); contentPane.add(lblNewLabel_1); JLabel lbldeyeceinizTutarGiriniz = new JLabel(\"Ödeyeceğiniz Tutarı Giriniz :\"); lbldeyeceinizTutarGiriniz.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lbldeyeceinizTutarGiriniz.setBounds(21, 76, 196, 33); contentPane.add(lbldeyeceinizTutarGiriniz); textField = new JTextField(); textField.setBounds(227, 83, 121, 20); contentPane.add(textField); textField.setColumns(10); JButton btnde = new JButton(\"Öde\"); btnde.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); Double odenecekTutar = Double.valueOf(textField.getText()); for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { borcOdeme(tc, sifre,odenecekTutar); } } } catch (Exception e1) { e1.printStackTrace(); } } }); btnde.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnde.setBounds(137, 120, 128, 33); contentPane.add(btnde); } public static void borcOdeme(String tc, String sifre, double odenecekTutar) { try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { if (customer.getBakiye()>=odenecekTutar) { if (odenecekTutar <= customer.getKartBorc()) { if(odenecekTutar>=customer.getKartBorc()/3) { customer.setKartBorc(customer.getKartBorc() - odenecekTutar); customer.setBakiye(customer.getBakiye()- odenecekTutar); JOptionPane.showMessageDialog(null,\"Başarıyla borcunuz ödenmiştir kalan borcunuz : \"+customer.getKartBorc()); try (FileWriter writer = new FileWriter(JSON_FILE_PATH)) { gson.toJson(customers, writer); } break; } else { JOptionPane.showMessageDialog(null,\"Borcunuzun en az 3/1'ini ödeyebilirsiniz.\"); } } else { JOptionPane.showMessageDialog(null, \"Kart borcunuzdan fazla ödeyemezsiniz\"); } } else { JOptionPane.showMessageDialog(null, \"Kart limitinizden fazla tutarda ödeme yapamazsınız\"); } return; } } } catch (Exception e) { e.printStackTrace(); } } public static String krediBorcunuGoster(String tc, String sifre) { try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { String kartBorc = String.valueOf(customer.getKartBorc()); return kartBorc; } } return \"HAVE A PROBLEM\"; }catch (Exception e) { e.printStackTrace(); } return \"\"; } }"},{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/bank/ParaCek.java","file_content":"package bank; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JButton; import java.awt.Font; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JTextField; import java.awt.event.ActionListener; import java.io.FileReader; import java.io.FileWriter; import java.util.List; import java.awt.event.ActionEvent; import java.awt.Color; public class ParaCek extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { ParaCek frame = new ParaCek(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public ParaCek() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JLabel lbl_mesaj = new JLabel(\"\"); lbl_mesaj.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lbl_mesaj.setBounds(20, 143, 404, 19); contentPane.add(lbl_mesaj); JLabel lbl_bakiye = new JLabel(bakiye()); lbl_bakiye.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lbl_bakiye.setBounds(20, 11, 239, 19); contentPane.add(lbl_bakiye); JButton btnek = new JButton(\"Çek\"); btnek.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); boolean cekme = false; for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { lbl_bakiye.setText(\"Güncel bakiyeniz : \"+String.valueOf(customer.getBakiye())); double miktar =Double.parseDouble(textField.getText()); if (miktar <= customer.getBakiye()) { customer.setBakiye(customer.getBakiye() - miktar); lbl_mesaj.setText(\"Bakiyeniz Güncellendi\"); cekme = true; try (FileWriter writer = new FileWriter(JSON_FILE_PATH)) { gson.toJson(customers, writer); } } } } if(!cekme) { JOptionPane.showMessageDialog(null, \"Hatalı Giriş\"); lbl_mesaj.setText(\"Tekrar Deneyiniz\"); } } catch (Exception e1) { e1.printStackTrace(); } } }); btnek.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnek.setBounds(156, 99, 128, 33); contentPane.add(btnek); JButton btnParaYatr = new JButton(\"Para Yatır\"); btnParaYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaYatir paraYatir = new ParaYatir(); paraYatir.setVisible(true); dispose(); } }); btnParaYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaYatr.setBounds(84, 173, 128, 33); contentPane.add(btnParaYatr); JButton btnBakiyeren = new JButton(\"Bakiye Öğren\"); btnBakiyeren.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { BakiyeOgren bakiye = new BakiyeOgren(); bakiye.setVisible(true); dispose(); } }); btnBakiyeren.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnBakiyeren.setBounds(84, 217, 128, 33); contentPane.add(btnBakiyeren); JButton btnParaTransfer = new JButton(\"Para Transfer\"); btnParaTransfer.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { TransferYap transferYap = new TransferYap(); transferYap.setVisible(true); dispose(); } }); btnParaTransfer.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaTransfer.setBounds(222, 217, 138, 33); contentPane.add(btnParaTransfer); JButton btnKredideme = new JButton(\"Kredi Ödeme\"); btnKredideme.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KrediOdeme krediOdeme = new KrediOdeme(); krediOdeme.setVisible(true); dispose(); } }); btnKredideme.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnKredideme.setBounds(222, 173, 138, 33); contentPane.add(btnKredideme); JLabel lblekmekIstediinizTutar = new JLabel(\"Çekmek İstediğiniz Tutarı Giriniz : \"); lblekmekIstediinizTutar.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblekmekIstediinizTutar.setBounds(20, 40, 224, 33); contentPane.add(lblekmekIstediinizTutar); textField = new JTextField(); textField.setColumns(10); textField.setBounds(254, 47, 139, 20); contentPane.add(textField); } public static String bakiye() { String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { String text = String.valueOf(\"Hesabınızdaki Tutar \"+customer.getBakiye()+\" TL\"); return text; } } System.out.println(\"Giriş yapılan hesap bulunamadı.\"); } catch (Exception e1) { e1.printStackTrace(); } return \"\"; } }"}]}}
{"project_id":209,"chunk_id":1,"content":{"main_file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/bank/BakiyeOgren.java","main_file_content":"package bank; import java.awt.EventQueue; import java.util.List; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JLabel; import java.awt.Font; import javax.swing.JButton; import java.awt.event.ActionListener; import java.io.FileReader; import java.awt.event.ActionEvent; import javax.swing.SwingConstants; import java.awt.Color; public class BakiyeOgren extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { BakiyeOgren frame = new BakiyeOgren(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public BakiyeOgren() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JLabel lblNewLabel = new JLabel(\"Hesabınızda Bulunan Bakiye Miktarı \"); lblNewLabel.setFont(new Font(\"SansSerif\", Font.BOLD, 15)); lblNewLabel.setBounds(78, -12, 280, 70); contentPane.add(lblNewLabel); JLabel bk_ogren = new JLabel(\"\"); bk_ogren.setVerticalAlignment(SwingConstants.TOP); bk_ogren.setFont(new Font(\"SansSerif\", Font.BOLD, 15)); bk_ogren.setBounds(142, 40, 128, 70); contentPane.add(bk_ogren); JButton btnNewButton = new JButton(\"Para Çek\"); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaCek paraCek = new ParaCek(); paraCek.setVisible(true); dispose(); } }); btnNewButton.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton.setBounds(78, 173, 117, 33); contentPane.add(btnNewButton); JButton btnParaYatr = new JButton(\"Para Yatır\"); btnParaYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaYatir paraYatir = new ParaYatir(); paraYatir.setVisible(true); dispose(); } }); btnParaYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaYatr.setBounds(205, 173, 128, 33); contentPane.add(btnParaYatr); JButton btnKredideme = new JButton(\"Kredi Ödeme\"); btnKredideme.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KrediOdeme krediOdeme = new KrediOdeme(); krediOdeme.setVisible(true); dispose(); } }); btnKredideme.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnKredideme.setBounds(78, 217, 117, 33); contentPane.add(btnKredideme); JButton btnParaTransfer = new JButton(\"Para Transfer\"); btnParaTransfer.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { TransferYap transferYap = new TransferYap(); transferYap.setVisible(true); dispose(); } }); btnParaTransfer.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaTransfer.setBounds(205, 217, 128, 33); contentPane.add(btnParaTransfer); JButton btnBakiyeniren = new JButton(\"Bakiyeni Öğren\"); btnBakiyeniren.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { String tc=KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); try (FileReader reader = new FileReader(JSON_FILE_PATH)){ Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); for(kullaniciVerileri customer : customers){ if(tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { bk_ogren.setText(String.valueOf(customer.getBakiye())); } } } catch (Exception e1) { e1.printStackTrace(); } } }); btnBakiyeniren.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnBakiyeniren.setBounds(142, 121, 138, 33); contentPane.add(btnBakiyeniren); } }","dependencies":[{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/bank/ParaYatir.java","file_content":"package bank; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JButton; import java.awt.Font; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JTextField; import java.awt.event.ActionListener; import java.io.FileReader; import java.io.FileWriter; import java.util.List; import java.awt.event.ActionEvent; import java.awt.Color; public class ParaYatir extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { ParaYatir frame = new ParaYatir(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public ParaYatir() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JButton btnNewButton = new JButton(\"Para Çek\"); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaCek paraCek = new ParaCek(); paraCek.setVisible(true); dispose(); } }); btnNewButton.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton.setBounds(74, 173, 128, 33); contentPane.add(btnNewButton); JButton btnParaTransfer = new JButton(\"Para Transfer\"); btnParaTransfer.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { TransferYap transferYap = new TransferYap(); transferYap.setVisible(true); dispose(); } }); btnParaTransfer.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaTransfer.setBounds(212, 217, 138, 33); contentPane.add(btnParaTransfer); JButton btnBakiyeren = new JButton(\"Bakiye Öğren\"); btnBakiyeren.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { BakiyeOgren bakiye = new BakiyeOgren(); bakiye.setVisible(true); dispose(); } }); btnBakiyeren.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnBakiyeren.setBounds(74, 217, 128, 33); contentPane.add(btnBakiyeren); JButton btnYatr = new JButton(\"Yatır\"); btnYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); boolean cekme = false; for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { double miktar =Double.parseDouble(textField.getText()); if (miktar <= 500 && miktar>=5) { customer.setBakiye(customer.getBakiye() + miktar); cekme = true; try (FileWriter writer = new FileWriter(JSON_FILE_PATH)) { gson.toJson(customers, writer); } JOptionPane.showMessageDialog(null,\" İşlem başarıyla gerçekleştirildi güncel bakiyeniz : \"+customer.getBakiye()); } else { JOptionPane.showMessageDialog(null, \"500 TL'den fazla 5 TL'den aşşağıya yükleme yapılamaz\"); } } } if(!cekme) { JOptionPane.showMessageDialog(null, \"Hatalı Giriş\"); } } catch (Exception e1) { e1.printStackTrace(); } } }); btnYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnYatr.setBounds(146, 99, 128, 33); contentPane.add(btnYatr); JLabel lblYatrmakIstediinizTutar = new JLabel(\"Yatırmak İstediğiniz Tutarı Giriniz : \"); lblYatrmakIstediinizTutar.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblYatrmakIstediinizTutar.setBounds(10, 40, 224, 33); contentPane.add(lblYatrmakIstediinizTutar); textField = new JTextField(); textField.setBounds(244, 47, 139, 20); contentPane.add(textField); textField.setColumns(10); JButton btnKredideme = new JButton(\"Kredi Ödeme\"); btnKredideme.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KrediOdeme krediOdeme = new KrediOdeme(); krediOdeme.setVisible(true); dispose(); } }); btnKredideme.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnKredideme.setBounds(212, 173, 138, 33); contentPane.add(btnKredideme); } }"},{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/bank/TransferYap.java","file_content":"package bank; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JButton; import java.awt.Font; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JTextField; import java.awt.event.ActionListener; import java.io.FileReader; import java.io.FileWriter; import java.util.List; import java.awt.event.ActionEvent; import java.awt.Color; public class TransferYap extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; private JTextField textField_1; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { TransferYap frame = new TransferYap(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public TransferYap() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JButton btnYatr = new JButton(\"Yatır\"); btnYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); String aliciHesapNumara = String.valueOf(textField.getText()); Double yollanacakMiktar = Double.parseDouble(textField_1.getText()); for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { performTransfer(customers, tc, aliciHesapNumara, yollanacakMiktar); } } } catch (Exception e1) { e1.printStackTrace(); } } }); btnYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnYatr.setBounds(157, 99, 128, 33); contentPane.add(btnYatr); JButton btnNewButton = new JButton(\"Para Çek\"); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaCek paraCek = new ParaCek(); paraCek.setVisible(true); dispose(); } }); btnNewButton.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton.setBounds(85, 173, 128, 33); contentPane.add(btnNewButton); JButton btnBakiyeren = new JButton(\"Bakiye Öğren\"); btnBakiyeren.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { BakiyeOgren bakiye = new BakiyeOgren(); bakiye.setVisible(true); dispose(); } }); btnBakiyeren.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnBakiyeren.setBounds(85, 217, 128, 33); contentPane.add(btnBakiyeren); JButton btnParaYatr = new JButton(\"Para Yatır\"); btnParaYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaYatir paraYatir = new ParaYatir(); paraYatir.setVisible(true); dispose(); } }); btnParaYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaYatr.setBounds(223, 217, 138, 33); contentPane.add(btnParaYatr); JButton btnKredideme = new JButton(\"Kredi Ödeme\"); btnKredideme.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KrediOdeme krediOdeme = new KrediOdeme(); krediOdeme.setVisible(true); dispose(); } }); btnKredideme.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnKredideme.setBounds(223, 173, 138, 33); contentPane.add(btnKredideme); JLabel lblTransferYaplacakHesap = new JLabel(\"Transfer Yapılacak Hesap No Giriniz : \"); lblTransferYaplacakHesap.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblTransferYaplacakHesap.setBounds(20, 11, 247, 33); contentPane.add(lblTransferYaplacakHesap); textField = new JTextField(); textField.setColumns(10); textField.setBounds(264, 18, 139, 20); contentPane.add(textField); JLabel lblTransferYaplacakTutar = new JLabel(\"Transfer Yapılacak Tutarı Giriniz :\"); lblTransferYaplacakTutar.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblTransferYaplacakTutar.setBounds(20, 55, 247, 33); contentPane.add(lblTransferYaplacakTutar); textField_1 = new JTextField(); textField_1.setColumns(10); textField_1.setBounds(264, 62, 139, 20); contentPane.add(textField_1); } public static void performTransfer(List<kullaniciVerileri> customers, String gonderenTc, String aliciHesapNumara, double transferMiktar) { for (kullaniciVerileri gonderen : customers) { if (gonderen.getTcKimlik().toLowerCase().equals(gonderenTc)) { for (kullaniciVerileri alici : customers) { if (alici.getHesapNumarasi().equals(aliciHesapNumara)) { if (gonderen.getBakiye() >= transferMiktar) { gonderen.setBakiye(gonderen.getBakiye() - transferMiktar); alici.setBakiye(alici.getBakiye() + transferMiktar); try (FileWriter writer = new FileWriter(JSON_FILE_PATH)) { Gson gson = new Gson(); gson.toJson(customers, writer); } catch (Exception e) { e.printStackTrace(); } JOptionPane.showMessageDialog(null, alici.getFirstName()+\" \"+alici.getLastName()+ \" adlı kişiye \" + \"\" + transferMiktar + \" TL Para Transferiniz Başarıyla Gerçekleştirildi.\"); } else { JOptionPane.showMessageDialog(null, \"Hatalı Giriş\"); } return; } } JOptionPane.showMessageDialog(null,\"Alıcı hesap bulunamadı.\"); return; } } JOptionPane.showMessageDialog(null,\"Gönderen hesap bulunamadı.\"); } }"}]}}
{"project_id":209,"chunk_id":0,"content":{"main_file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/bank/TransferYap.java","main_file_content":"package bank; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JButton; import java.awt.Font; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JTextField; import java.awt.event.ActionListener; import java.io.FileReader; import java.io.FileWriter; import java.util.List; import java.awt.event.ActionEvent; import java.awt.Color; public class TransferYap extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; private JTextField textField_1; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { TransferYap frame = new TransferYap(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public TransferYap() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JButton btnYatr = new JButton(\"Yatır\"); btnYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); String aliciHesapNumara = String.valueOf(textField.getText()); Double yollanacakMiktar = Double.parseDouble(textField_1.getText()); for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { performTransfer(customers, tc, aliciHesapNumara, yollanacakMiktar); } } } catch (Exception e1) { e1.printStackTrace(); } } }); btnYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnYatr.setBounds(157, 99, 128, 33); contentPane.add(btnYatr); JButton btnNewButton = new JButton(\"Para Çek\"); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaCek paraCek = new ParaCek(); paraCek.setVisible(true); dispose(); } }); btnNewButton.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton.setBounds(85, 173, 128, 33); contentPane.add(btnNewButton); JButton btnBakiyeren = new JButton(\"Bakiye Öğren\"); btnBakiyeren.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { BakiyeOgren bakiye = new BakiyeOgren(); bakiye.setVisible(true); dispose(); } }); btnBakiyeren.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnBakiyeren.setBounds(85, 217, 128, 33); contentPane.add(btnBakiyeren); JButton btnParaYatr = new JButton(\"Para Yatır\"); btnParaYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaYatir paraYatir = new ParaYatir(); paraYatir.setVisible(true); dispose(); } }); btnParaYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaYatr.setBounds(223, 217, 138, 33); contentPane.add(btnParaYatr); JButton btnKredideme = new JButton(\"Kredi Ödeme\"); btnKredideme.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KrediOdeme krediOdeme = new KrediOdeme(); krediOdeme.setVisible(true); dispose(); } }); btnKredideme.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnKredideme.setBounds(223, 173, 138, 33); contentPane.add(btnKredideme); JLabel lblTransferYaplacakHesap = new JLabel(\"Transfer Yapılacak Hesap No Giriniz : \"); lblTransferYaplacakHesap.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblTransferYaplacakHesap.setBounds(20, 11, 247, 33); contentPane.add(lblTransferYaplacakHesap); textField = new JTextField(); textField.setColumns(10); textField.setBounds(264, 18, 139, 20); contentPane.add(textField); JLabel lblTransferYaplacakTutar = new JLabel(\"Transfer Yapılacak Tutarı Giriniz :\"); lblTransferYaplacakTutar.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblTransferYaplacakTutar.setBounds(20, 55, 247, 33); contentPane.add(lblTransferYaplacakTutar); textField_1 = new JTextField(); textField_1.setColumns(10); textField_1.setBounds(264, 62, 139, 20); contentPane.add(textField_1); } public static void performTransfer(List<kullaniciVerileri> customers, String gonderenTc, String aliciHesapNumara, double transferMiktar) { for (kullaniciVerileri gonderen : customers) { if (gonderen.getTcKimlik().toLowerCase().equals(gonderenTc)) { for (kullaniciVerileri alici : customers) { if (alici.getHesapNumarasi().equals(aliciHesapNumara)) { if (gonderen.getBakiye() >= transferMiktar) { gonderen.setBakiye(gonderen.getBakiye() - transferMiktar); alici.setBakiye(alici.getBakiye() + transferMiktar); try (FileWriter writer = new FileWriter(JSON_FILE_PATH)) { Gson gson = new Gson(); gson.toJson(customers, writer); } catch (Exception e) { e.printStackTrace(); } JOptionPane.showMessageDialog(null, alici.getFirstName()+\" \"+alici.getLastName()+ \" adlı kişiye \" + \"\" + transferMiktar + \" TL Para Transferiniz Başarıyla Gerçekleştirildi.\"); } else { JOptionPane.showMessageDialog(null, \"Hatalı Giriş\"); } return; } } JOptionPane.showMessageDialog(null,\"Alıcı hesap bulunamadı.\"); return; } } JOptionPane.showMessageDialog(null,\"Gönderen hesap bulunamadı.\"); } }","dependencies":[{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/DataRead/KimlikVeri.java","file_content":"package DataRead; public class KimlikVeri { private static String tc; private static String sifre; public static String getTc() { return tc; } public static void setTc(String tc) { KimlikVeri.tc = tc; } public static String getSifre() { return sifre; } public static void setSifre(String sifre) { KimlikVeri.sifre = sifre; } }"},{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/DataRead/kullaniciVerileri.java","file_content":"package DataRead; public class kullaniciVerileri { private String firstName; private String lastName; private String telefonNumarasi; private String adres; private String dogumTarih; private String sifre; private String hesapNumarasi; private String tcKimlik; private double bakiye; private double kartEkstre; private double kartBorc; public kullaniciVerileri(String firstName, String lastName, String telefonNumarasi, String adres,String dogumTarih, String sifre, String hesapNumarasi, String tcKimlik, Double bakiye, Double kartEkstre, Double kartBorc) { this.firstName = firstName; this.lastName = lastName; this.telefonNumarasi = telefonNumarasi; this.tcKimlik=tcKimlik; this.adres = adres; this.dogumTarih = dogumTarih; this.sifre = sifre; this.hesapNumarasi = hesapNumarasi; this.bakiye=bakiye; this.kartEkstre=kartEkstre; this.kartBorc=kartBorc; } public String getFirstName() { return firstName; } public void setFirstName(String firstName) { this.firstName = firstName; } public String getLastName() { return lastName; } public void setLastName(String lastName) { this.lastName = lastName; } public String getTelefonNumarasi() { return telefonNumarasi; } public void setTelefonNumarasi(String telefonNumarasi) { this.telefonNumarasi = telefonNumarasi; } public String getAdres() { return adres; } public void setAdres(String adres) { this.adres = adres; } public String getDogumTarih() { return dogumTarih; } public void setDogumTarih(String dogumTarih) { this.dogumTarih = dogumTarih; } public String getSifre() { return sifre; } public void setSifre(String sifre) { this.sifre = sifre; } public String getHesapNumarasi() { return hesapNumarasi; } public void setHesapNumarasi(String hesapNumarasi) { this.hesapNumarasi = hesapNumarasi; } public String getTcKimlik() { return tcKimlik; } public void setTcKimlik(String tcKimlik) { this.tcKimlik = tcKimlik; } public double getBakiye() { return bakiye; } public void setBakiye(double bakiye) { this.bakiye = bakiye; } public double getKartEkstre() { return kartEkstre; } public void setKartEkstre(double kartEkstre) { this.kartEkstre = kartEkstre; } public double getKartBorc() { return kartBorc; } public void setKartBorc(double kartBorc) { this.kartBorc = kartBorc; } }"},{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/bank/BakiyeOgren.java","file_content":"package bank; import java.awt.EventQueue; import java.util.List; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JLabel; import java.awt.Font; import javax.swing.JButton; import java.awt.event.ActionListener; import java.io.FileReader; import java.awt.event.ActionEvent; import javax.swing.SwingConstants; import java.awt.Color; public class BakiyeOgren extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { BakiyeOgren frame = new BakiyeOgren(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public BakiyeOgren() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JLabel lblNewLabel = new JLabel(\"Hesabınızda Bulunan Bakiye Miktarı \"); lblNewLabel.setFont(new Font(\"SansSerif\", Font.BOLD, 15)); lblNewLabel.setBounds(78, -12, 280, 70); contentPane.add(lblNewLabel); JLabel bk_ogren = new JLabel(\"\"); bk_ogren.setVerticalAlignment(SwingConstants.TOP); bk_ogren.setFont(new Font(\"SansSerif\", Font.BOLD, 15)); bk_ogren.setBounds(142, 40, 128, 70); contentPane.add(bk_ogren); JButton btnNewButton = new JButton(\"Para Çek\"); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaCek paraCek = new ParaCek(); paraCek.setVisible(true); dispose(); } }); btnNewButton.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton.setBounds(78, 173, 117, 33); contentPane.add(btnNewButton); JButton btnParaYatr = new JButton(\"Para Yatır\"); btnParaYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaYatir paraYatir = new ParaYatir(); paraYatir.setVisible(true); dispose(); } }); btnParaYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaYatr.setBounds(205, 173, 128, 33); contentPane.add(btnParaYatr); JButton btnKredideme = new JButton(\"Kredi Ödeme\"); btnKredideme.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KrediOdeme krediOdeme = new KrediOdeme(); krediOdeme.setVisible(true); dispose(); } }); btnKredideme.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnKredideme.setBounds(78, 217, 117, 33); contentPane.add(btnKredideme); JButton btnParaTransfer = new JButton(\"Para Transfer\"); btnParaTransfer.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { TransferYap transferYap = new TransferYap(); transferYap.setVisible(true); dispose(); } }); btnParaTransfer.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaTransfer.setBounds(205, 217, 128, 33); contentPane.add(btnParaTransfer); JButton btnBakiyeniren = new JButton(\"Bakiyeni Öğren\"); btnBakiyeniren.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { String tc=KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); try (FileReader reader = new FileReader(JSON_FILE_PATH)){ Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); for(kullaniciVerileri customer : customers){ if(tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { bk_ogren.setText(String.valueOf(customer.getBakiye())); } } } catch (Exception e1) { e1.printStackTrace(); } } }); btnBakiyeniren.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnBakiyeniren.setBounds(142, 121, 138, 33); contentPane.add(btnBakiyeniren); } }"},{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/bank/KrediOdeme.java","file_content":"package bank; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JLabel; import javax.swing.JOptionPane; import java.awt.Font; import javax.swing.JButton; import javax.swing.JTextField; import java.awt.event.ActionListener; import java.io.FileReader; import java.io.FileWriter; import java.util.List; import java.awt.event.ActionEvent; import java.awt.Color; public class KrediOdeme extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { KrediOdeme frame = new KrediOdeme(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public KrediOdeme() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JButton btnParaTransfer = new JButton(\"Para Transfer\"); btnParaTransfer.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { TransferYap transferYap = new TransferYap(); transferYap.setVisible(true); dispose(); } }); btnParaTransfer.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaTransfer.setBounds(209, 217, 138, 33); contentPane.add(btnParaTransfer); JButton btnBakiyeren = new JButton(\"Bakiye Öğren\"); btnBakiyeren.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { BakiyeOgren bakiye = new BakiyeOgren(); bakiye.setVisible(true); dispose(); } }); btnBakiyeren.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnBakiyeren.setBounds(71, 217, 128, 33); contentPane.add(btnBakiyeren); JButton btnNewButton = new JButton(\"Para Çek\"); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaCek paraCek = new ParaCek(); paraCek.setVisible(true); dispose(); } }); btnNewButton.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton.setBounds(71, 173, 128, 33); contentPane.add(btnNewButton); JButton btnParaYatr = new JButton(\"Para Yatır\"); btnParaYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaYatir paraYatir = new ParaYatir(); paraYatir.setVisible(true); dispose(); } }); btnParaYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaYatr.setBounds(209, 173, 138, 33); contentPane.add(btnParaYatr); JLabel lblNewLabel = new JLabel(\"Kalan Kredi Borcunuz :\"); lblNewLabel.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblNewLabel.setBounds(21, 25, 163, 33); contentPane.add(lblNewLabel); String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); JLabel lblNewLabel_1 = new JLabel(krediBorcunuGoster(tc, sifre)); lblNewLabel_1.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblNewLabel_1.setBounds(194, 25, 103, 33); contentPane.add(lblNewLabel_1); JLabel lbldeyeceinizTutarGiriniz = new JLabel(\"Ödeyeceğiniz Tutarı Giriniz :\"); lbldeyeceinizTutarGiriniz.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lbldeyeceinizTutarGiriniz.setBounds(21, 76, 196, 33); contentPane.add(lbldeyeceinizTutarGiriniz); textField = new JTextField(); textField.setBounds(227, 83, 121, 20); contentPane.add(textField); textField.setColumns(10); JButton btnde = new JButton(\"Öde\"); btnde.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); Double odenecekTutar = Double.valueOf(textField.getText()); for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { borcOdeme(tc, sifre,odenecekTutar); } } } catch (Exception e1) { e1.printStackTrace(); } } }); btnde.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnde.setBounds(137, 120, 128, 33); contentPane.add(btnde); } public static void borcOdeme(String tc, String sifre, double odenecekTutar) { try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { if (customer.getBakiye()>=odenecekTutar) { if (odenecekTutar <= customer.getKartBorc()) { if(odenecekTutar>=customer.getKartBorc()/3) { customer.setKartBorc(customer.getKartBorc() - odenecekTutar); customer.setBakiye(customer.getBakiye()- odenecekTutar); JOptionPane.showMessageDialog(null,\"Başarıyla borcunuz ödenmiştir kalan borcunuz : \"+customer.getKartBorc()); try (FileWriter writer = new FileWriter(JSON_FILE_PATH)) { gson.toJson(customers, writer); } break; } else { JOptionPane.showMessageDialog(null,\"Borcunuzun en az 3/1'ini ödeyebilirsiniz.\"); } } else { JOptionPane.showMessageDialog(null, \"Kart borcunuzdan fazla ödeyemezsiniz\"); } } else { JOptionPane.showMessageDialog(null, \"Kart limitinizden fazla tutarda ödeme yapamazsınız\"); } return; } } } catch (Exception e) { e.printStackTrace(); } } public static String krediBorcunuGoster(String tc, String sifre) { try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { String kartBorc = String.valueOf(customer.getKartBorc()); return kartBorc; } } return \"HAVE A PROBLEM\"; }catch (Exception e) { e.printStackTrace(); } return \"\"; } }"}]}}
{"project_id":209,"chunk_id":1,"content":{"main_file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/bank/TransferYap.java","main_file_content":"package bank; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JButton; import java.awt.Font; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JTextField; import java.awt.event.ActionListener; import java.io.FileReader; import java.io.FileWriter; import java.util.List; import java.awt.event.ActionEvent; import java.awt.Color; public class TransferYap extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; private JTextField textField_1; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { TransferYap frame = new TransferYap(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public TransferYap() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JButton btnYatr = new JButton(\"Yatır\"); btnYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); String aliciHesapNumara = String.valueOf(textField.getText()); Double yollanacakMiktar = Double.parseDouble(textField_1.getText()); for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { performTransfer(customers, tc, aliciHesapNumara, yollanacakMiktar); } } } catch (Exception e1) { e1.printStackTrace(); } } }); btnYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnYatr.setBounds(157, 99, 128, 33); contentPane.add(btnYatr); JButton btnNewButton = new JButton(\"Para Çek\"); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaCek paraCek = new ParaCek(); paraCek.setVisible(true); dispose(); } }); btnNewButton.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton.setBounds(85, 173, 128, 33); contentPane.add(btnNewButton); JButton btnBakiyeren = new JButton(\"Bakiye Öğren\"); btnBakiyeren.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { BakiyeOgren bakiye = new BakiyeOgren(); bakiye.setVisible(true); dispose(); } }); btnBakiyeren.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnBakiyeren.setBounds(85, 217, 128, 33); contentPane.add(btnBakiyeren); JButton btnParaYatr = new JButton(\"Para Yatır\"); btnParaYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaYatir paraYatir = new ParaYatir(); paraYatir.setVisible(true); dispose(); } }); btnParaYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaYatr.setBounds(223, 217, 138, 33); contentPane.add(btnParaYatr); JButton btnKredideme = new JButton(\"Kredi Ödeme\"); btnKredideme.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KrediOdeme krediOdeme = new KrediOdeme(); krediOdeme.setVisible(true); dispose(); } }); btnKredideme.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnKredideme.setBounds(223, 173, 138, 33); contentPane.add(btnKredideme); JLabel lblTransferYaplacakHesap = new JLabel(\"Transfer Yapılacak Hesap No Giriniz : \"); lblTransferYaplacakHesap.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblTransferYaplacakHesap.setBounds(20, 11, 247, 33); contentPane.add(lblTransferYaplacakHesap); textField = new JTextField(); textField.setColumns(10); textField.setBounds(264, 18, 139, 20); contentPane.add(textField); JLabel lblTransferYaplacakTutar = new JLabel(\"Transfer Yapılacak Tutarı Giriniz :\"); lblTransferYaplacakTutar.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblTransferYaplacakTutar.setBounds(20, 55, 247, 33); contentPane.add(lblTransferYaplacakTutar); textField_1 = new JTextField(); textField_1.setColumns(10); textField_1.setBounds(264, 62, 139, 20); contentPane.add(textField_1); } public static void performTransfer(List<kullaniciVerileri> customers, String gonderenTc, String aliciHesapNumara, double transferMiktar) { for (kullaniciVerileri gonderen : customers) { if (gonderen.getTcKimlik().toLowerCase().equals(gonderenTc)) { for (kullaniciVerileri alici : customers) { if (alici.getHesapNumarasi().equals(aliciHesapNumara)) { if (gonderen.getBakiye() >= transferMiktar) { gonderen.setBakiye(gonderen.getBakiye() - transferMiktar); alici.setBakiye(alici.getBakiye() + transferMiktar); try (FileWriter writer = new FileWriter(JSON_FILE_PATH)) { Gson gson = new Gson(); gson.toJson(customers, writer); } catch (Exception e) { e.printStackTrace(); } JOptionPane.showMessageDialog(null, alici.getFirstName()+\" \"+alici.getLastName()+ \" adlı kişiye \" + \"\" + transferMiktar + \" TL Para Transferiniz Başarıyla Gerçekleştirildi.\"); } else { JOptionPane.showMessageDialog(null, \"Hatalı Giriş\"); } return; } } JOptionPane.showMessageDialog(null,\"Alıcı hesap bulunamadı.\"); return; } } JOptionPane.showMessageDialog(null,\"Gönderen hesap bulunamadı.\"); } }","dependencies":[{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/bank/ParaCek.java","file_content":"package bank; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JButton; import java.awt.Font; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JTextField; import java.awt.event.ActionListener; import java.io.FileReader; import java.io.FileWriter; import java.util.List; import java.awt.event.ActionEvent; import java.awt.Color; public class ParaCek extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { ParaCek frame = new ParaCek(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public ParaCek() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JLabel lbl_mesaj = new JLabel(\"\"); lbl_mesaj.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lbl_mesaj.setBounds(20, 143, 404, 19); contentPane.add(lbl_mesaj); JLabel lbl_bakiye = new JLabel(bakiye()); lbl_bakiye.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lbl_bakiye.setBounds(20, 11, 239, 19); contentPane.add(lbl_bakiye); JButton btnek = new JButton(\"Çek\"); btnek.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); boolean cekme = false; for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { lbl_bakiye.setText(\"Güncel bakiyeniz : \"+String.valueOf(customer.getBakiye())); double miktar =Double.parseDouble(textField.getText()); if (miktar <= customer.getBakiye()) { customer.setBakiye(customer.getBakiye() - miktar); lbl_mesaj.setText(\"Bakiyeniz Güncellendi\"); cekme = true; try (FileWriter writer = new FileWriter(JSON_FILE_PATH)) { gson.toJson(customers, writer); } } } } if(!cekme) { JOptionPane.showMessageDialog(null, \"Hatalı Giriş\"); lbl_mesaj.setText(\"Tekrar Deneyiniz\"); } } catch (Exception e1) { e1.printStackTrace(); } } }); btnek.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnek.setBounds(156, 99, 128, 33); contentPane.add(btnek); JButton btnParaYatr = new JButton(\"Para Yatır\"); btnParaYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaYatir paraYatir = new ParaYatir(); paraYatir.setVisible(true); dispose(); } }); btnParaYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaYatr.setBounds(84, 173, 128, 33); contentPane.add(btnParaYatr); JButton btnBakiyeren = new JButton(\"Bakiye Öğren\"); btnBakiyeren.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { BakiyeOgren bakiye = new BakiyeOgren(); bakiye.setVisible(true); dispose(); } }); btnBakiyeren.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnBakiyeren.setBounds(84, 217, 128, 33); contentPane.add(btnBakiyeren); JButton btnParaTransfer = new JButton(\"Para Transfer\"); btnParaTransfer.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { TransferYap transferYap = new TransferYap(); transferYap.setVisible(true); dispose(); } }); btnParaTransfer.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaTransfer.setBounds(222, 217, 138, 33); contentPane.add(btnParaTransfer); JButton btnKredideme = new JButton(\"Kredi Ödeme\"); btnKredideme.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KrediOdeme krediOdeme = new KrediOdeme(); krediOdeme.setVisible(true); dispose(); } }); btnKredideme.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnKredideme.setBounds(222, 173, 138, 33); contentPane.add(btnKredideme); JLabel lblekmekIstediinizTutar = new JLabel(\"Çekmek İstediğiniz Tutarı Giriniz : \"); lblekmekIstediinizTutar.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblekmekIstediinizTutar.setBounds(20, 40, 224, 33); contentPane.add(lblekmekIstediinizTutar); textField = new JTextField(); textField.setColumns(10); textField.setBounds(254, 47, 139, 20); contentPane.add(textField); } public static String bakiye() { String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { String text = String.valueOf(\"Hesabınızdaki Tutar \"+customer.getBakiye()+\" TL\"); return text; } } System.out.println(\"Giriş yapılan hesap bulunamadı.\"); } catch (Exception e1) { e1.printStackTrace(); } return \"\"; } }"},{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/bank/ParaYatir.java","file_content":"package bank; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JButton; import java.awt.Font; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JTextField; import java.awt.event.ActionListener; import java.io.FileReader; import java.io.FileWriter; import java.util.List; import java.awt.event.ActionEvent; import java.awt.Color; public class ParaYatir extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { ParaYatir frame = new ParaYatir(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public ParaYatir() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JButton btnNewButton = new JButton(\"Para Çek\"); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaCek paraCek = new ParaCek(); paraCek.setVisible(true); dispose(); } }); btnNewButton.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton.setBounds(74, 173, 128, 33); contentPane.add(btnNewButton); JButton btnParaTransfer = new JButton(\"Para Transfer\"); btnParaTransfer.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { TransferYap transferYap = new TransferYap(); transferYap.setVisible(true); dispose(); } }); btnParaTransfer.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaTransfer.setBounds(212, 217, 138, 33); contentPane.add(btnParaTransfer); JButton btnBakiyeren = new JButton(\"Bakiye Öğren\"); btnBakiyeren.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { BakiyeOgren bakiye = new BakiyeOgren(); bakiye.setVisible(true); dispose(); } }); btnBakiyeren.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnBakiyeren.setBounds(74, 217, 128, 33); contentPane.add(btnBakiyeren); JButton btnYatr = new JButton(\"Yatır\"); btnYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); boolean cekme = false; for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { double miktar =Double.parseDouble(textField.getText()); if (miktar <= 500 && miktar>=5) { customer.setBakiye(customer.getBakiye() + miktar); cekme = true; try (FileWriter writer = new FileWriter(JSON_FILE_PATH)) { gson.toJson(customers, writer); } JOptionPane.showMessageDialog(null,\" İşlem başarıyla gerçekleştirildi güncel bakiyeniz : \"+customer.getBakiye()); } else { JOptionPane.showMessageDialog(null, \"500 TL'den fazla 5 TL'den aşşağıya yükleme yapılamaz\"); } } } if(!cekme) { JOptionPane.showMessageDialog(null, \"Hatalı Giriş\"); } } catch (Exception e1) { e1.printStackTrace(); } } }); btnYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnYatr.setBounds(146, 99, 128, 33); contentPane.add(btnYatr); JLabel lblYatrmakIstediinizTutar = new JLabel(\"Yatırmak İstediğiniz Tutarı Giriniz : \"); lblYatrmakIstediinizTutar.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblYatrmakIstediinizTutar.setBounds(10, 40, 224, 33); contentPane.add(lblYatrmakIstediinizTutar); textField = new JTextField(); textField.setBounds(244, 47, 139, 20); contentPane.add(textField); textField.setColumns(10); JButton btnKredideme = new JButton(\"Kredi Ödeme\"); btnKredideme.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KrediOdeme krediOdeme = new KrediOdeme(); krediOdeme.setVisible(true); dispose(); } }); btnKredideme.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnKredideme.setBounds(212, 173, 138, 33); contentPane.add(btnKredideme); } }"}]}}
{"project_id":209,"chunk_id":0,"content":{"main_file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/bank/KrediOdeme.java","main_file_content":"package bank; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JLabel; import javax.swing.JOptionPane; import java.awt.Font; import javax.swing.JButton; import javax.swing.JTextField; import java.awt.event.ActionListener; import java.io.FileReader; import java.io.FileWriter; import java.util.List; import java.awt.event.ActionEvent; import java.awt.Color; public class KrediOdeme extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { KrediOdeme frame = new KrediOdeme(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public KrediOdeme() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JButton btnParaTransfer = new JButton(\"Para Transfer\"); btnParaTransfer.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { TransferYap transferYap = new TransferYap(); transferYap.setVisible(true); dispose(); } }); btnParaTransfer.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaTransfer.setBounds(209, 217, 138, 33); contentPane.add(btnParaTransfer); JButton btnBakiyeren = new JButton(\"Bakiye Öğren\"); btnBakiyeren.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { BakiyeOgren bakiye = new BakiyeOgren(); bakiye.setVisible(true); dispose(); } }); btnBakiyeren.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnBakiyeren.setBounds(71, 217, 128, 33); contentPane.add(btnBakiyeren); JButton btnNewButton = new JButton(\"Para Çek\"); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaCek paraCek = new ParaCek(); paraCek.setVisible(true); dispose(); } }); btnNewButton.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton.setBounds(71, 173, 128, 33); contentPane.add(btnNewButton); JButton btnParaYatr = new JButton(\"Para Yatır\"); btnParaYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaYatir paraYatir = new ParaYatir(); paraYatir.setVisible(true); dispose(); } }); btnParaYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaYatr.setBounds(209, 173, 138, 33); contentPane.add(btnParaYatr); JLabel lblNewLabel = new JLabel(\"Kalan Kredi Borcunuz :\"); lblNewLabel.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblNewLabel.setBounds(21, 25, 163, 33); contentPane.add(lblNewLabel); String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); JLabel lblNewLabel_1 = new JLabel(krediBorcunuGoster(tc, sifre)); lblNewLabel_1.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblNewLabel_1.setBounds(194, 25, 103, 33); contentPane.add(lblNewLabel_1); JLabel lbldeyeceinizTutarGiriniz = new JLabel(\"Ödeyeceğiniz Tutarı Giriniz :\"); lbldeyeceinizTutarGiriniz.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lbldeyeceinizTutarGiriniz.setBounds(21, 76, 196, 33); contentPane.add(lbldeyeceinizTutarGiriniz); textField = new JTextField(); textField.setBounds(227, 83, 121, 20); contentPane.add(textField); textField.setColumns(10); JButton btnde = new JButton(\"Öde\"); btnde.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); Double odenecekTutar = Double.valueOf(textField.getText()); for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { borcOdeme(tc, sifre,odenecekTutar); } } } catch (Exception e1) { e1.printStackTrace(); } } }); btnde.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnde.setBounds(137, 120, 128, 33); contentPane.add(btnde); } public static void borcOdeme(String tc, String sifre, double odenecekTutar) { try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { if (customer.getBakiye()>=odenecekTutar) { if (odenecekTutar <= customer.getKartBorc()) { if(odenecekTutar>=customer.getKartBorc()/3) { customer.setKartBorc(customer.getKartBorc() - odenecekTutar); customer.setBakiye(customer.getBakiye()- odenecekTutar); JOptionPane.showMessageDialog(null,\"Başarıyla borcunuz ödenmiştir kalan borcunuz : \"+customer.getKartBorc()); try (FileWriter writer = new FileWriter(JSON_FILE_PATH)) { gson.toJson(customers, writer); } break; } else { JOptionPane.showMessageDialog(null,\"Borcunuzun en az 3/1'ini ödeyebilirsiniz.\"); } } else { JOptionPane.showMessageDialog(null, \"Kart borcunuzdan fazla ödeyemezsiniz\"); } } else { JOptionPane.showMessageDialog(null, \"Kart limitinizden fazla tutarda ödeme yapamazsınız\"); } return; } } } catch (Exception e) { e.printStackTrace(); } } public static String krediBorcunuGoster(String tc, String sifre) { try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { String kartBorc = String.valueOf(customer.getKartBorc()); return kartBorc; } } return \"HAVE A PROBLEM\"; }catch (Exception e) { e.printStackTrace(); } return \"\"; } }","dependencies":[{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/DataRead/KimlikVeri.java","file_content":"package DataRead; public class KimlikVeri { private static String tc; private static String sifre; public static String getTc() { return tc; } public static void setTc(String tc) { KimlikVeri.tc = tc; } public static String getSifre() { return sifre; } public static void setSifre(String sifre) { KimlikVeri.sifre = sifre; } }"},{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/DataRead/kullaniciVerileri.java","file_content":"package DataRead; public class kullaniciVerileri { private String firstName; private String lastName; private String telefonNumarasi; private String adres; private String dogumTarih; private String sifre; private String hesapNumarasi; private String tcKimlik; private double bakiye; private double kartEkstre; private double kartBorc; public kullaniciVerileri(String firstName, String lastName, String telefonNumarasi, String adres,String dogumTarih, String sifre, String hesapNumarasi, String tcKimlik, Double bakiye, Double kartEkstre, Double kartBorc) { this.firstName = firstName; this.lastName = lastName; this.telefonNumarasi = telefonNumarasi; this.tcKimlik=tcKimlik; this.adres = adres; this.dogumTarih = dogumTarih; this.sifre = sifre; this.hesapNumarasi = hesapNumarasi; this.bakiye=bakiye; this.kartEkstre=kartEkstre; this.kartBorc=kartBorc; } public String getFirstName() { return firstName; } public void setFirstName(String firstName) { this.firstName = firstName; } public String getLastName() { return lastName; } public void setLastName(String lastName) { this.lastName = lastName; } public String getTelefonNumarasi() { return telefonNumarasi; } public void setTelefonNumarasi(String telefonNumarasi) { this.telefonNumarasi = telefonNumarasi; } public String getAdres() { return adres; } public void setAdres(String adres) { this.adres = adres; } public String getDogumTarih() { return dogumTarih; } public void setDogumTarih(String dogumTarih) { this.dogumTarih = dogumTarih; } public String getSifre() { return sifre; } public void setSifre(String sifre) { this.sifre = sifre; } public String getHesapNumarasi() { return hesapNumarasi; } public void setHesapNumarasi(String hesapNumarasi) { this.hesapNumarasi = hesapNumarasi; } public String getTcKimlik() { return tcKimlik; } public void setTcKimlik(String tcKimlik) { this.tcKimlik = tcKimlik; } public double getBakiye() { return bakiye; } public void setBakiye(double bakiye) { this.bakiye = bakiye; } public double getKartEkstre() { return kartEkstre; } public void setKartEkstre(double kartEkstre) { this.kartEkstre = kartEkstre; } public double getKartBorc() { return kartBorc; } public void setKartBorc(double kartBorc) { this.kartBorc = kartBorc; } }"},{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/bank/BakiyeOgren.java","file_content":"package bank; import java.awt.EventQueue; import java.util.List; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JLabel; import java.awt.Font; import javax.swing.JButton; import java.awt.event.ActionListener; import java.io.FileReader; import java.awt.event.ActionEvent; import javax.swing.SwingConstants; import java.awt.Color; public class BakiyeOgren extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { BakiyeOgren frame = new BakiyeOgren(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public BakiyeOgren() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JLabel lblNewLabel = new JLabel(\"Hesabınızda Bulunan Bakiye Miktarı \"); lblNewLabel.setFont(new Font(\"SansSerif\", Font.BOLD, 15)); lblNewLabel.setBounds(78, -12, 280, 70); contentPane.add(lblNewLabel); JLabel bk_ogren = new JLabel(\"\"); bk_ogren.setVerticalAlignment(SwingConstants.TOP); bk_ogren.setFont(new Font(\"SansSerif\", Font.BOLD, 15)); bk_ogren.setBounds(142, 40, 128, 70); contentPane.add(bk_ogren); JButton btnNewButton = new JButton(\"Para Çek\"); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaCek paraCek = new ParaCek(); paraCek.setVisible(true); dispose(); } }); btnNewButton.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton.setBounds(78, 173, 117, 33); contentPane.add(btnNewButton); JButton btnParaYatr = new JButton(\"Para Yatır\"); btnParaYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaYatir paraYatir = new ParaYatir(); paraYatir.setVisible(true); dispose(); } }); btnParaYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaYatr.setBounds(205, 173, 128, 33); contentPane.add(btnParaYatr); JButton btnKredideme = new JButton(\"Kredi Ödeme\"); btnKredideme.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KrediOdeme krediOdeme = new KrediOdeme(); krediOdeme.setVisible(true); dispose(); } }); btnKredideme.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnKredideme.setBounds(78, 217, 117, 33); contentPane.add(btnKredideme); JButton btnParaTransfer = new JButton(\"Para Transfer\"); btnParaTransfer.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { TransferYap transferYap = new TransferYap(); transferYap.setVisible(true); dispose(); } }); btnParaTransfer.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaTransfer.setBounds(205, 217, 128, 33); contentPane.add(btnParaTransfer); JButton btnBakiyeniren = new JButton(\"Bakiyeni Öğren\"); btnBakiyeniren.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { String tc=KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); try (FileReader reader = new FileReader(JSON_FILE_PATH)){ Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); for(kullaniciVerileri customer : customers){ if(tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { bk_ogren.setText(String.valueOf(customer.getBakiye())); } } } catch (Exception e1) { e1.printStackTrace(); } } }); btnBakiyeniren.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnBakiyeniren.setBounds(142, 121, 138, 33); contentPane.add(btnBakiyeniren); } }"},{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/bank/ParaCek.java","file_content":"package bank; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JButton; import java.awt.Font; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JTextField; import java.awt.event.ActionListener; import java.io.FileReader; import java.io.FileWriter; import java.util.List; import java.awt.event.ActionEvent; import java.awt.Color; public class ParaCek extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { ParaCek frame = new ParaCek(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public ParaCek() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JLabel lbl_mesaj = new JLabel(\"\"); lbl_mesaj.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lbl_mesaj.setBounds(20, 143, 404, 19); contentPane.add(lbl_mesaj); JLabel lbl_bakiye = new JLabel(bakiye()); lbl_bakiye.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lbl_bakiye.setBounds(20, 11, 239, 19); contentPane.add(lbl_bakiye); JButton btnek = new JButton(\"Çek\"); btnek.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); boolean cekme = false; for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { lbl_bakiye.setText(\"Güncel bakiyeniz : \"+String.valueOf(customer.getBakiye())); double miktar =Double.parseDouble(textField.getText()); if (miktar <= customer.getBakiye()) { customer.setBakiye(customer.getBakiye() - miktar); lbl_mesaj.setText(\"Bakiyeniz Güncellendi\"); cekme = true; try (FileWriter writer = new FileWriter(JSON_FILE_PATH)) { gson.toJson(customers, writer); } } } } if(!cekme) { JOptionPane.showMessageDialog(null, \"Hatalı Giriş\"); lbl_mesaj.setText(\"Tekrar Deneyiniz\"); } } catch (Exception e1) { e1.printStackTrace(); } } }); btnek.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnek.setBounds(156, 99, 128, 33); contentPane.add(btnek); JButton btnParaYatr = new JButton(\"Para Yatır\"); btnParaYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaYatir paraYatir = new ParaYatir(); paraYatir.setVisible(true); dispose(); } }); btnParaYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaYatr.setBounds(84, 173, 128, 33); contentPane.add(btnParaYatr); JButton btnBakiyeren = new JButton(\"Bakiye Öğren\"); btnBakiyeren.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { BakiyeOgren bakiye = new BakiyeOgren(); bakiye.setVisible(true); dispose(); } }); btnBakiyeren.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnBakiyeren.setBounds(84, 217, 128, 33); contentPane.add(btnBakiyeren); JButton btnParaTransfer = new JButton(\"Para Transfer\"); btnParaTransfer.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { TransferYap transferYap = new TransferYap(); transferYap.setVisible(true); dispose(); } }); btnParaTransfer.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaTransfer.setBounds(222, 217, 138, 33); contentPane.add(btnParaTransfer); JButton btnKredideme = new JButton(\"Kredi Ödeme\"); btnKredideme.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KrediOdeme krediOdeme = new KrediOdeme(); krediOdeme.setVisible(true); dispose(); } }); btnKredideme.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnKredideme.setBounds(222, 173, 138, 33); contentPane.add(btnKredideme); JLabel lblekmekIstediinizTutar = new JLabel(\"Çekmek İstediğiniz Tutarı Giriniz : \"); lblekmekIstediinizTutar.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblekmekIstediinizTutar.setBounds(20, 40, 224, 33); contentPane.add(lblekmekIstediinizTutar); textField = new JTextField(); textField.setColumns(10); textField.setBounds(254, 47, 139, 20); contentPane.add(textField); } public static String bakiye() { String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { String text = String.valueOf(\"Hesabınızdaki Tutar \"+customer.getBakiye()+\" TL\"); return text; } } System.out.println(\"Giriş yapılan hesap bulunamadı.\"); } catch (Exception e1) { e1.printStackTrace(); } return \"\"; } }"}]}}
{"project_id":209,"chunk_id":1,"content":{"main_file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/bank/KrediOdeme.java","main_file_content":"package bank; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JLabel; import javax.swing.JOptionPane; import java.awt.Font; import javax.swing.JButton; import javax.swing.JTextField; import java.awt.event.ActionListener; import java.io.FileReader; import java.io.FileWriter; import java.util.List; import java.awt.event.ActionEvent; import java.awt.Color; public class KrediOdeme extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { KrediOdeme frame = new KrediOdeme(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public KrediOdeme() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JButton btnParaTransfer = new JButton(\"Para Transfer\"); btnParaTransfer.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { TransferYap transferYap = new TransferYap(); transferYap.setVisible(true); dispose(); } }); btnParaTransfer.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaTransfer.setBounds(209, 217, 138, 33); contentPane.add(btnParaTransfer); JButton btnBakiyeren = new JButton(\"Bakiye Öğren\"); btnBakiyeren.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { BakiyeOgren bakiye = new BakiyeOgren(); bakiye.setVisible(true); dispose(); } }); btnBakiyeren.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnBakiyeren.setBounds(71, 217, 128, 33); contentPane.add(btnBakiyeren); JButton btnNewButton = new JButton(\"Para Çek\"); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaCek paraCek = new ParaCek(); paraCek.setVisible(true); dispose(); } }); btnNewButton.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton.setBounds(71, 173, 128, 33); contentPane.add(btnNewButton); JButton btnParaYatr = new JButton(\"Para Yatır\"); btnParaYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaYatir paraYatir = new ParaYatir(); paraYatir.setVisible(true); dispose(); } }); btnParaYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaYatr.setBounds(209, 173, 138, 33); contentPane.add(btnParaYatr); JLabel lblNewLabel = new JLabel(\"Kalan Kredi Borcunuz :\"); lblNewLabel.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblNewLabel.setBounds(21, 25, 163, 33); contentPane.add(lblNewLabel); String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); JLabel lblNewLabel_1 = new JLabel(krediBorcunuGoster(tc, sifre)); lblNewLabel_1.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblNewLabel_1.setBounds(194, 25, 103, 33); contentPane.add(lblNewLabel_1); JLabel lbldeyeceinizTutarGiriniz = new JLabel(\"Ödeyeceğiniz Tutarı Giriniz :\"); lbldeyeceinizTutarGiriniz.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lbldeyeceinizTutarGiriniz.setBounds(21, 76, 196, 33); contentPane.add(lbldeyeceinizTutarGiriniz); textField = new JTextField(); textField.setBounds(227, 83, 121, 20); contentPane.add(textField); textField.setColumns(10); JButton btnde = new JButton(\"Öde\"); btnde.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); Double odenecekTutar = Double.valueOf(textField.getText()); for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { borcOdeme(tc, sifre,odenecekTutar); } } } catch (Exception e1) { e1.printStackTrace(); } } }); btnde.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnde.setBounds(137, 120, 128, 33); contentPane.add(btnde); } public static void borcOdeme(String tc, String sifre, double odenecekTutar) { try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { if (customer.getBakiye()>=odenecekTutar) { if (odenecekTutar <= customer.getKartBorc()) { if(odenecekTutar>=customer.getKartBorc()/3) { customer.setKartBorc(customer.getKartBorc() - odenecekTutar); customer.setBakiye(customer.getBakiye()- odenecekTutar); JOptionPane.showMessageDialog(null,\"Başarıyla borcunuz ödenmiştir kalan borcunuz : \"+customer.getKartBorc()); try (FileWriter writer = new FileWriter(JSON_FILE_PATH)) { gson.toJson(customers, writer); } break; } else { JOptionPane.showMessageDialog(null,\"Borcunuzun en az 3/1'ini ödeyebilirsiniz.\"); } } else { JOptionPane.showMessageDialog(null, \"Kart borcunuzdan fazla ödeyemezsiniz\"); } } else { JOptionPane.showMessageDialog(null, \"Kart limitinizden fazla tutarda ödeme yapamazsınız\"); } return; } } } catch (Exception e) { e.printStackTrace(); } } public static String krediBorcunuGoster(String tc, String sifre) { try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { String kartBorc = String.valueOf(customer.getKartBorc()); return kartBorc; } } return \"HAVE A PROBLEM\"; }catch (Exception e) { e.printStackTrace(); } return \"\"; } }","dependencies":[{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/bank/ParaYatir.java","file_content":"package bank; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JButton; import java.awt.Font; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JTextField; import java.awt.event.ActionListener; import java.io.FileReader; import java.io.FileWriter; import java.util.List; import java.awt.event.ActionEvent; import java.awt.Color; public class ParaYatir extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { ParaYatir frame = new ParaYatir(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public ParaYatir() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JButton btnNewButton = new JButton(\"Para Çek\"); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaCek paraCek = new ParaCek(); paraCek.setVisible(true); dispose(); } }); btnNewButton.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton.setBounds(74, 173, 128, 33); contentPane.add(btnNewButton); JButton btnParaTransfer = new JButton(\"Para Transfer\"); btnParaTransfer.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { TransferYap transferYap = new TransferYap(); transferYap.setVisible(true); dispose(); } }); btnParaTransfer.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaTransfer.setBounds(212, 217, 138, 33); contentPane.add(btnParaTransfer); JButton btnBakiyeren = new JButton(\"Bakiye Öğren\"); btnBakiyeren.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { BakiyeOgren bakiye = new BakiyeOgren(); bakiye.setVisible(true); dispose(); } }); btnBakiyeren.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnBakiyeren.setBounds(74, 217, 128, 33); contentPane.add(btnBakiyeren); JButton btnYatr = new JButton(\"Yatır\"); btnYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); boolean cekme = false; for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { double miktar =Double.parseDouble(textField.getText()); if (miktar <= 500 && miktar>=5) { customer.setBakiye(customer.getBakiye() + miktar); cekme = true; try (FileWriter writer = new FileWriter(JSON_FILE_PATH)) { gson.toJson(customers, writer); } JOptionPane.showMessageDialog(null,\" İşlem başarıyla gerçekleştirildi güncel bakiyeniz : \"+customer.getBakiye()); } else { JOptionPane.showMessageDialog(null, \"500 TL'den fazla 5 TL'den aşşağıya yükleme yapılamaz\"); } } } if(!cekme) { JOptionPane.showMessageDialog(null, \"Hatalı Giriş\"); } } catch (Exception e1) { e1.printStackTrace(); } } }); btnYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnYatr.setBounds(146, 99, 128, 33); contentPane.add(btnYatr); JLabel lblYatrmakIstediinizTutar = new JLabel(\"Yatırmak İstediğiniz Tutarı Giriniz : \"); lblYatrmakIstediinizTutar.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblYatrmakIstediinizTutar.setBounds(10, 40, 224, 33); contentPane.add(lblYatrmakIstediinizTutar); textField = new JTextField(); textField.setBounds(244, 47, 139, 20); contentPane.add(textField); textField.setColumns(10); JButton btnKredideme = new JButton(\"Kredi Ödeme\"); btnKredideme.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KrediOdeme krediOdeme = new KrediOdeme(); krediOdeme.setVisible(true); dispose(); } }); btnKredideme.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnKredideme.setBounds(212, 173, 138, 33); contentPane.add(btnKredideme); } }"},{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/bank/TransferYap.java","file_content":"package bank; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JButton; import java.awt.Font; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JTextField; import java.awt.event.ActionListener; import java.io.FileReader; import java.io.FileWriter; import java.util.List; import java.awt.event.ActionEvent; import java.awt.Color; public class TransferYap extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; private JTextField textField_1; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { TransferYap frame = new TransferYap(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public TransferYap() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JButton btnYatr = new JButton(\"Yatır\"); btnYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); String aliciHesapNumara = String.valueOf(textField.getText()); Double yollanacakMiktar = Double.parseDouble(textField_1.getText()); for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { performTransfer(customers, tc, aliciHesapNumara, yollanacakMiktar); } } } catch (Exception e1) { e1.printStackTrace(); } } }); btnYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnYatr.setBounds(157, 99, 128, 33); contentPane.add(btnYatr); JButton btnNewButton = new JButton(\"Para Çek\"); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaCek paraCek = new ParaCek(); paraCek.setVisible(true); dispose(); } }); btnNewButton.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton.setBounds(85, 173, 128, 33); contentPane.add(btnNewButton); JButton btnBakiyeren = new JButton(\"Bakiye Öğren\"); btnBakiyeren.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { BakiyeOgren bakiye = new BakiyeOgren(); bakiye.setVisible(true); dispose(); } }); btnBakiyeren.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnBakiyeren.setBounds(85, 217, 128, 33); contentPane.add(btnBakiyeren); JButton btnParaYatr = new JButton(\"Para Yatır\"); btnParaYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaYatir paraYatir = new ParaYatir(); paraYatir.setVisible(true); dispose(); } }); btnParaYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaYatr.setBounds(223, 217, 138, 33); contentPane.add(btnParaYatr); JButton btnKredideme = new JButton(\"Kredi Ödeme\"); btnKredideme.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KrediOdeme krediOdeme = new KrediOdeme(); krediOdeme.setVisible(true); dispose(); } }); btnKredideme.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnKredideme.setBounds(223, 173, 138, 33); contentPane.add(btnKredideme); JLabel lblTransferYaplacakHesap = new JLabel(\"Transfer Yapılacak Hesap No Giriniz : \"); lblTransferYaplacakHesap.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblTransferYaplacakHesap.setBounds(20, 11, 247, 33); contentPane.add(lblTransferYaplacakHesap); textField = new JTextField(); textField.setColumns(10); textField.setBounds(264, 18, 139, 20); contentPane.add(textField); JLabel lblTransferYaplacakTutar = new JLabel(\"Transfer Yapılacak Tutarı Giriniz :\"); lblTransferYaplacakTutar.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblTransferYaplacakTutar.setBounds(20, 55, 247, 33); contentPane.add(lblTransferYaplacakTutar); textField_1 = new JTextField(); textField_1.setColumns(10); textField_1.setBounds(264, 62, 139, 20); contentPane.add(textField_1); } public static void performTransfer(List<kullaniciVerileri> customers, String gonderenTc, String aliciHesapNumara, double transferMiktar) { for (kullaniciVerileri gonderen : customers) { if (gonderen.getTcKimlik().toLowerCase().equals(gonderenTc)) { for (kullaniciVerileri alici : customers) { if (alici.getHesapNumarasi().equals(aliciHesapNumara)) { if (gonderen.getBakiye() >= transferMiktar) { gonderen.setBakiye(gonderen.getBakiye() - transferMiktar); alici.setBakiye(alici.getBakiye() + transferMiktar); try (FileWriter writer = new FileWriter(JSON_FILE_PATH)) { Gson gson = new Gson(); gson.toJson(customers, writer); } catch (Exception e) { e.printStackTrace(); } JOptionPane.showMessageDialog(null, alici.getFirstName()+\" \"+alici.getLastName()+ \" adlı kişiye \" + \"\" + transferMiktar + \" TL Para Transferiniz Başarıyla Gerçekleştirildi.\"); } else { JOptionPane.showMessageDialog(null, \"Hatalı Giriş\"); } return; } } JOptionPane.showMessageDialog(null,\"Alıcı hesap bulunamadı.\"); return; } } JOptionPane.showMessageDialog(null,\"Gönderen hesap bulunamadı.\"); } }"}]}}
{"project_id":209,"chunk_id":0,"content":{"main_file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/DataRead/kullaniciVerileri.java","main_file_content":"package DataRead; public class kullaniciVerileri { private String firstName; private String lastName; private String telefonNumarasi; private String adres; private String dogumTarih; private String sifre; private String hesapNumarasi; private String tcKimlik; private double bakiye; private double kartEkstre; private double kartBorc; public kullaniciVerileri(String firstName, String lastName, String telefonNumarasi, String adres,String dogumTarih, String sifre, String hesapNumarasi, String tcKimlik, Double bakiye, Double kartEkstre, Double kartBorc) { this.firstName = firstName; this.lastName = lastName; this.telefonNumarasi = telefonNumarasi; this.tcKimlik=tcKimlik; this.adres = adres; this.dogumTarih = dogumTarih; this.sifre = sifre; this.hesapNumarasi = hesapNumarasi; this.bakiye=bakiye; this.kartEkstre=kartEkstre; this.kartBorc=kartBorc; } public String getFirstName() { return firstName; } public void setFirstName(String firstName) { this.firstName = firstName; } public String getLastName() { return lastName; } public void setLastName(String lastName) { this.lastName = lastName; } public String getTelefonNumarasi() { return telefonNumarasi; } public void setTelefonNumarasi(String telefonNumarasi) { this.telefonNumarasi = telefonNumarasi; } public String getAdres() { return adres; } public void setAdres(String adres) { this.adres = adres; } public String getDogumTarih() { return dogumTarih; } public void setDogumTarih(String dogumTarih) { this.dogumTarih = dogumTarih; } public String getSifre() { return sifre; } public void setSifre(String sifre) { this.sifre = sifre; } public String getHesapNumarasi() { return hesapNumarasi; } public void setHesapNumarasi(String hesapNumarasi) { this.hesapNumarasi = hesapNumarasi; } public String getTcKimlik() { return tcKimlik; } public void setTcKimlik(String tcKimlik) { this.tcKimlik = tcKimlik; } public double getBakiye() { return bakiye; } public void setBakiye(double bakiye) { this.bakiye = bakiye; } public double getKartEkstre() { return kartEkstre; } public void setKartEkstre(double kartEkstre) { this.kartEkstre = kartEkstre; } public double getKartBorc() { return kartBorc; } public void setKartBorc(double kartBorc) { this.kartBorc = kartBorc; } }","dependencies":[]}}
{"project_id":209,"chunk_id":0,"content":{"main_file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/DataRead/KimlikVeri.java","main_file_content":"package DataRead; public class KimlikVeri { private static String tc; private static String sifre; public static String getTc() { return tc; } public static void setTc(String tc) { KimlikVeri.tc = tc; } public static String getSifre() { return sifre; } public static void setSifre(String sifre) { KimlikVeri.sifre = sifre; } }","dependencies":[]}}
{"project_id":209,"chunk_id":0,"content":{"main_file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/swingex/KullaniciGiris.java","main_file_content":"package swingex; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JTextField; import javax.swing.JLabel; import javax.swing.JOptionPane; import java.awt.Font; import java.awt.TextField; import javax.swing.JButton; import java.awt.event.ActionListener; import java.io.FileReader; import java.util.List; import java.awt.event.ActionEvent; import java.awt.Color; public class KullaniciGiris extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; private JTextField textField_1; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { KullaniciGiris frame = new KullaniciGiris(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public KullaniciGiris() { setTitle(\"Uygulamaya Giriş\"); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); textField = new JTextField(); textField.setBounds(246, 52, 146, 20); contentPane.add(textField); textField.setColumns(10); textField_1 = new JTextField(); textField_1.setColumns(10); textField_1.setBounds(246, 106, 146, 20); contentPane.add(textField_1); JLabel lblNewLabel = new JLabel(\"TC Kimlik Numaranizi Giriniz :\"); lblNewLabel.setFont(new Font(\"Lucida Fax\", Font.ITALIC, 14)); lblNewLabel.setBounds(10, 49, 226, 23); contentPane.add(lblNewLabel); JLabel lblSifreniziGiriniz = new JLabel(\"Sifrenizi Giriniz :\"); lblSifreniziGiriniz.setFont(new Font(\"Lucida Fax\", Font.ITALIC, 14)); lblSifreniziGiriniz.setBounds(10, 103, 226, 23); contentPane.add(lblSifreniziGiriniz); JButton btnNewButton = new JButton(\"Giris\"); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KimlikVeri.setTc(textField.getText()); KimlikVeri.setSifre(textField_1.getText()); boolean giris = false; String tc = textField.getText(); String sifre = textField_1.getText(); try (FileReader reader = new FileReader(JSON_FILE_PATH)){ Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); for(kullaniciVerileri customer : customers){ if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { giris = true; KullaniciIslemleri kullanıcıEkran = new KullaniciIslemleri(); kullanıcıEkran.setVisible(true); dispose(); } } if (!giris) { JOptionPane.showMessageDialog(null, \"Girdiğiniz değerleri kontrol ediniz.\"); } } catch (Exception e1) { e1.printStackTrace(); } } }); btnNewButton.setFont(new Font(\"Poor Richard\", Font.PLAIN, 17)); btnNewButton.setBounds(249, 151, 114, 34); contentPane.add(btnNewButton); JButton btnKaytOl = new JButton(\"Kayıt Ol\"); btnKaytOl.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KullaniciKayit kayit = new KullaniciKayit(); kayit.setVisible(true); dispose(); } }); btnKaytOl.setFont(new Font(\"Poor Richard\", Font.PLAIN, 17)); btnKaytOl.setBounds(82, 151, 114, 34); contentPane.add(btnKaytOl); } }","dependencies":[{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/DataRead/KimlikVeri.java","file_content":"package DataRead; public class KimlikVeri { private static String tc; private static String sifre; public static String getTc() { return tc; } public static void setTc(String tc) { KimlikVeri.tc = tc; } public static String getSifre() { return sifre; } public static void setSifre(String sifre) { KimlikVeri.sifre = sifre; } }"},{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/DataRead/kullaniciVerileri.java","file_content":"package DataRead; public class kullaniciVerileri { private String firstName; private String lastName; private String telefonNumarasi; private String adres; private String dogumTarih; private String sifre; private String hesapNumarasi; private String tcKimlik; private double bakiye; private double kartEkstre; private double kartBorc; public kullaniciVerileri(String firstName, String lastName, String telefonNumarasi, String adres,String dogumTarih, String sifre, String hesapNumarasi, String tcKimlik, Double bakiye, Double kartEkstre, Double kartBorc) { this.firstName = firstName; this.lastName = lastName; this.telefonNumarasi = telefonNumarasi; this.tcKimlik=tcKimlik; this.adres = adres; this.dogumTarih = dogumTarih; this.sifre = sifre; this.hesapNumarasi = hesapNumarasi; this.bakiye=bakiye; this.kartEkstre=kartEkstre; this.kartBorc=kartBorc; } public String getFirstName() { return firstName; } public void setFirstName(String firstName) { this.firstName = firstName; } public String getLastName() { return lastName; } public void setLastName(String lastName) { this.lastName = lastName; } public String getTelefonNumarasi() { return telefonNumarasi; } public void setTelefonNumarasi(String telefonNumarasi) { this.telefonNumarasi = telefonNumarasi; } public String getAdres() { return adres; } public void setAdres(String adres) { this.adres = adres; } public String getDogumTarih() { return dogumTarih; } public void setDogumTarih(String dogumTarih) { this.dogumTarih = dogumTarih; } public String getSifre() { return sifre; } public void setSifre(String sifre) { this.sifre = sifre; } public String getHesapNumarasi() { return hesapNumarasi; } public void setHesapNumarasi(String hesapNumarasi) { this.hesapNumarasi = hesapNumarasi; } public String getTcKimlik() { return tcKimlik; } public void setTcKimlik(String tcKimlik) { this.tcKimlik = tcKimlik; } public double getBakiye() { return bakiye; } public void setBakiye(double bakiye) { this.bakiye = bakiye; } public double getKartEkstre() { return kartEkstre; } public void setKartEkstre(double kartEkstre) { this.kartEkstre = kartEkstre; } public double getKartBorc() { return kartBorc; } public void setKartBorc(double kartBorc) { this.kartBorc = kartBorc; } }"},{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/swingex/KullaniciIslemleri.java","file_content":"package swingex; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import bank.BakiyeOgren; import bank.KrediOdeme; import bank.ParaCek; import bank.ParaYatir; import bank.TransferYap; import javax.swing.JButton; import java.awt.event.ActionListener; import java.awt.event.ActionEvent; import java.awt.Font; import java.awt.Color; public class KullaniciIslemleri extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { KullaniciIslemleri frame = new KullaniciIslemleri(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } public KullaniciIslemleri() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 313); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JButton btnNewButton_1 = new JButton(\"Para Yatır\"); btnNewButton_1.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaYatir paraYatir = new ParaYatir(); paraYatir.setVisible(true); dispose(); } }); btnNewButton_1.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton_1.setBounds(62, 72, 307, 35); contentPane.add(btnNewButton_1); JButton btnNewButton_1_1 = new JButton(\"Para Çek\"); btnNewButton_1_1.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton_1_1.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaCek paraCek = new ParaCek(); paraCek.setVisible(true); dispose(); } }); btnNewButton_1_1.setBounds(62, 27, 307, 35); contentPane.add(btnNewButton_1_1); JButton btnNewButton_1_2 = new JButton(\"Bakiye Öğren\"); btnNewButton_1_2.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { BakiyeOgren bakiye = new BakiyeOgren(); bakiye.setVisible(true); dispose(); } }); btnNewButton_1_2.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton_1_2.setBounds(62, 118, 307, 35); contentPane.add(btnNewButton_1_2); JButton btnNewButton_1_3 = new JButton(\"Transfer Yap\"); btnNewButton_1_3.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { TransferYap transferYap = new TransferYap(); transferYap.setVisible(true); dispose(); } }); btnNewButton_1_3.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton_1_3.setBounds(62, 164, 307, 35); contentPane.add(btnNewButton_1_3); JButton btnNewButton_1_3_1 = new JButton(\"Kredi Ödeme\"); btnNewButton_1_3_1.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KrediOdeme krediOdeme = new KrediOdeme(); krediOdeme.setVisible(true); dispose(); } }); btnNewButton_1_3_1.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton_1_3_1.setBounds(62, 210, 307, 35); contentPane.add(btnNewButton_1_3_1); } }"}]}}
{"project_id":209,"chunk_id":1,"content":{"main_file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/swingex/KullaniciGiris.java","main_file_content":"package swingex; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JTextField; import javax.swing.JLabel; import javax.swing.JOptionPane; import java.awt.Font; import java.awt.TextField; import javax.swing.JButton; import java.awt.event.ActionListener; import java.io.FileReader; import java.util.List; import java.awt.event.ActionEvent; import java.awt.Color; public class KullaniciGiris extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; private JTextField textField_1; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { KullaniciGiris frame = new KullaniciGiris(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public KullaniciGiris() { setTitle(\"Uygulamaya Giriş\"); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); textField = new JTextField(); textField.setBounds(246, 52, 146, 20); contentPane.add(textField); textField.setColumns(10); textField_1 = new JTextField(); textField_1.setColumns(10); textField_1.setBounds(246, 106, 146, 20); contentPane.add(textField_1); JLabel lblNewLabel = new JLabel(\"TC Kimlik Numaranizi Giriniz :\"); lblNewLabel.setFont(new Font(\"Lucida Fax\", Font.ITALIC, 14)); lblNewLabel.setBounds(10, 49, 226, 23); contentPane.add(lblNewLabel); JLabel lblSifreniziGiriniz = new JLabel(\"Sifrenizi Giriniz :\"); lblSifreniziGiriniz.setFont(new Font(\"Lucida Fax\", Font.ITALIC, 14)); lblSifreniziGiriniz.setBounds(10, 103, 226, 23); contentPane.add(lblSifreniziGiriniz); JButton btnNewButton = new JButton(\"Giris\"); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KimlikVeri.setTc(textField.getText()); KimlikVeri.setSifre(textField_1.getText()); boolean giris = false; String tc = textField.getText(); String sifre = textField_1.getText(); try (FileReader reader = new FileReader(JSON_FILE_PATH)){ Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); for(kullaniciVerileri customer : customers){ if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { giris = true; KullaniciIslemleri kullanıcıEkran = new KullaniciIslemleri(); kullanıcıEkran.setVisible(true); dispose(); } } if (!giris) { JOptionPane.showMessageDialog(null, \"Girdiğiniz değerleri kontrol ediniz.\"); } } catch (Exception e1) { e1.printStackTrace(); } } }); btnNewButton.setFont(new Font(\"Poor Richard\", Font.PLAIN, 17)); btnNewButton.setBounds(249, 151, 114, 34); contentPane.add(btnNewButton); JButton btnKaytOl = new JButton(\"Kayıt Ol\"); btnKaytOl.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KullaniciKayit kayit = new KullaniciKayit(); kayit.setVisible(true); dispose(); } }); btnKaytOl.setFont(new Font(\"Poor Richard\", Font.PLAIN, 17)); btnKaytOl.setBounds(82, 151, 114, 34); contentPane.add(btnKaytOl); } }","dependencies":[{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/swingex/KullaniciKayit.java","file_content":"package swingex; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import org.json.JSONArray; import org.json.JSONObject; import javax.swing.JLabel; import javax.swing.JOptionPane; import java.awt.Font; import javax.swing.ImageIcon; import java.awt.event.ActionListener; import java.io.IOException; import java.nio.file.Files; import java.nio.file.Paths; import java.util.Random; import java.awt.event.ActionEvent; import java.awt.Color; import java.awt.Button; import javax.swing.SwingConstants; import java.awt.TextField; import java.awt.Label; import javax.swing.JPasswordField; import javax.swing.JTextPane; import javax.swing.JCheckBox; public class KullaniciKayit extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { KullaniciGiris frame = new KullaniciGiris(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; private JPasswordField passwordField; public KullaniciKayit() { setTitle(\"Uygulamaya Giriş\"); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 672, 524); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JLabel lblNewLabel_1 = new JLabel(\"Hesap Oluştur\"); lblNewLabel_1.setHorizontalAlignment(SwingConstants.CENTER); lblNewLabel_1.setFont(new Font(\"SansSerif\", Font.BOLD, 30)); lblNewLabel_1.setBounds(151, 11, 227, 50); contentPane.add(lblNewLabel_1); TextField textField_Ad = new TextField(); textField_Ad.setBounds(220, 108, 155, 22); contentPane.add(textField_Ad); Label label = new Label(\"Adınız : \"); label.setFont(new Font(\"SansSerif\", Font.BOLD, 16)); label.setBounds(23, 108, 170, 22); contentPane.add(label); Label label_1 = new Label(\"Soyadınız :\"); label_1.setFont(new Font(\"SansSerif\", Font.BOLD, 16)); label_1.setBounds(23, 149, 170, 22); contentPane.add(label_1); TextField textField_Soyad = new TextField(); textField_Soyad.setBounds(220, 149, 155, 22); contentPane.add(textField_Soyad); Label label_1_1 = new Label(\"TC Numaranız :\"); label_1_1.setFont(new Font(\"SansSerif\", Font.BOLD, 16)); label_1_1.setBounds(23, 194, 170, 22); contentPane.add(label_1_1); TextField textField_TC = new TextField(); textField_TC.setBounds(220, 194, 155, 22); contentPane.add(textField_TC); Label label_2 = new Label(\"Adres : \"); label_2.setFont(new Font(\"SansSerif\", Font.BOLD, 16)); label_2.setBounds(23, 235, 170, 22); contentPane.add(label_2); TextField textField_Adres = new TextField(); textField_Adres.setBounds(220, 235, 155, 22); contentPane.add(textField_Adres); Label label_1_2 = new Label(\"Doğum Tarihiniz :\"); label_1_2.setFont(new Font(\"SansSerif\", Font.BOLD, 16)); label_1_2.setBounds(23, 276, 170, 22); contentPane.add(label_1_2); TextField textField_Dogum = new TextField(); textField_Dogum.setBounds(220, 276, 155, 22); contentPane.add(textField_Dogum); Label label_1_1_1 = new Label(\"Telefon Numaranız :\"); label_1_1_1.setFont(new Font(\"SansSerif\", Font.BOLD, 16)); label_1_1_1.setBounds(23, 321, 170, 22); contentPane.add(label_1_1_1); TextField textField_Tel = new TextField(); textField_Tel.setBounds(220, 321, 155, 22); contentPane.add(textField_Tel); Label label_1_1_1_1 = new Label(\"Sifre Oluşturun : \"); label_1_1_1_1.setFont(new Font(\"SansSerif\", Font.BOLD, 16)); label_1_1_1_1.setBounds(23, 360, 170, 22); contentPane.add(label_1_1_1_1); passwordField = new JPasswordField(); passwordField.setBounds(220, 362, 155, 20); contentPane.add(passwordField); JLabel lblNewLabel_sifre = new JLabel(\"\"); lblNewLabel_sifre.setHorizontalAlignment(SwingConstants.CENTER); lblNewLabel_sifre.setBounds(406, 362, 21, 20); contentPane.add(lblNewLabel_sifre); JLabel lblNewLabel_tel = new JLabel(\"\"); lblNewLabel_tel.setHorizontalAlignment(SwingConstants.CENTER); lblNewLabel_tel.setBounds(381, 321, 21, 20); contentPane.add(lblNewLabel_tel); JLabel lblNewLabel_dog = new JLabel(\"\"); lblNewLabel_dog.setHorizontalAlignment(SwingConstants.CENTER); lblNewLabel_dog.setBounds(381, 276, 21, 20); contentPane.add(lblNewLabel_dog); JLabel lblNewLabel_adres = new JLabel(\"\"); lblNewLabel_adres.setHorizontalAlignment(SwingConstants.CENTER); lblNewLabel_adres.setBounds(381, 237, 21, 20); contentPane.add(lblNewLabel_adres); JLabel lblNewLabel_tc = new JLabel(\"\"); lblNewLabel_tc.setHorizontalAlignment(SwingConstants.CENTER); lblNewLabel_tc.setBounds(381, 194, 21, 20); contentPane.add(lblNewLabel_tc); JLabel lblNewLabel_soy = new JLabel(\"\"); lblNewLabel_soy.setHorizontalAlignment(SwingConstants.CENTER); lblNewLabel_soy.setBounds(381, 151, 21, 20); contentPane.add(lblNewLabel_soy); JLabel lblNewLabel_ad = new JLabel(\"\"); lblNewLabel_ad.setHorizontalAlignment(SwingConstants.CENTER); lblNewLabel_ad.setBounds(381, 108, 21, 20); contentPane.add(lblNewLabel_ad); Label label_1_1_1_2 = new Label(\"Hesabınız Var mı ?\"); label_1_1_1_2.setFont(new Font(\"SansSerif\", Font.BOLD, 22)); label_1_1_1_2.setAlignment(Label.CENTER); label_1_1_1_2.setBounds(423, 80, 198, 50); contentPane.add(label_1_1_1_2); Button button_1 = new Button(\"Giriş Yap\"); button_1.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KullaniciGiris giris = new KullaniciGiris(); giris.setVisible(true); dispose(); } }); button_1.setBackground(Color.GRAY); button_1.setBounds(469, 136, 96, 35); contentPane.add(button_1); JTextPane txtpnDnyannBirNumaral = new JTextPane(); txtpnDnyannBirNumaral.setText(\"Dünyanın Bir Numaralı \\\"Banka Uygulamasına\\\" Hoşgeldiniz.\"); txtpnDnyannBirNumaral.setFont(new Font(\"SansSerif\", Font.BOLD, 14)); txtpnDnyannBirNumaral.setEditable(false); txtpnDnyannBirNumaral.setBounds(448, 194, 184, 135); contentPane.add(txtpnDnyannBirNumaral); Button button = new Button(\"Oluştur\"); button.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { kutuKontrol(textField_Ad.getText(), textField_Soyad.getText(), textField_TC.getText(), passwordField.getText(), textField_Dogum.getText(), textField_Tel.getText(),textField_Adres.getText(), lblNewLabel_ad, lblNewLabel_soy, lblNewLabel_tc, lblNewLabel_sifre, lblNewLabel_dog, lblNewLabel_tel, lblNewLabel_adres); jsonVeriEkle(textField_Ad.getText(), textField_Soyad.getText(), textField_TC.getText(), passwordField.getText(), textField_Dogum.getText(), textField_Tel.getText(),textField_Adres.getText()); } }); button.setFont(new Font(\"SansSerif\", Font.BOLD, 16)); button.setBackground(Color.LIGHT_GRAY); button.setBounds(154, 401, 126, 40); contentPane.add(button); JCheckBox checkBox = new JCheckBox(\"\"); checkBox.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { if(checkBox.isSelected()) { passwordField.setEchoChar((char)0); } else passwordField.setEchoChar('*'); } }); checkBox.setBackground(new Color(255, 255, 255)); checkBox.setBounds(374, 360, 26, 23); contentPane.add(checkBox); } public void jsonVeriEkle(String lbl_ad,String lbl_soyad, String lbl_tc, String lbl_sifre ,String lbl_dog,String lbl_tel,String lbl_adres) { if(!lbl_ad.isEmpty() && !lbl_soyad.isEmpty() && !lbl_tc.isEmpty() && !lbl_sifre.isEmpty() && !lbl_dog.isEmpty() && !lbl_tel.isEmpty() && !lbl_adres.isEmpty()) { try { String jsonString = new String(Files.readAllBytes(Paths.get(JSON_FILE_PATH))); JSONArray jsonArray; if (jsonString.trim().isEmpty()) { jsonArray = new JSONArray(); } else { jsonArray = new JSONArray(jsonString); } JSONObject json = new JSONObject(); json.put(\"firstName\", lbl_ad); json.put(\"lastName\", lbl_soyad); json.put(\"sifre\", lbl_sifre); json.put(\"tcKimlik\", lbl_tc); json.put(\"telefonNumarasi\", lbl_tel); json.put(\"dogumTarih\", lbl_dog); json.put(\"hesapNumarasi\", rastgele16RakamliSayiOlustur()); json.put(\"adres\", lbl_adres); json.put(\"bakiye\", 0.0); json.put(\"kartEkstre\", 0.0); json.put(\"kartBorc\", 0.0); jsonArray.put(json); Files.write(Paths.get(JSON_FILE_PATH), jsonArray.toString().getBytes()); JOptionPane.showMessageDialog(null, \"Hesabınız oluşturuldu. Hoşgeldiniz :)\"); } catch (IOException e) { e.printStackTrace(); } } else { JOptionPane.showMessageDialog(null, \"Boşluk bırakmadan giriş yapınız.\"); } } public static String rastgele16RakamliSayiOlustur() { Random random = new Random(); StringBuilder sayi = new StringBuilder(); for (int i = 0; i < 16; i++) { int rastgeleRakam = random.nextInt(10); sayi.append(rastgeleRakam); } return sayi.toString(); } public void kutuKontrol(String ad,String soyad, String tc, String sifre ,String dog,String tel,String adres, JLabel lbl_ad,JLabel lbl_soyad, JLabel lbl_tc, JLabel lbl_sifre ,JLabel lbl_dog,JLabel lbl_tel,JLabel lbl_adres) { if(!ad.isEmpty()) { lbl_ad.setIcon(new ImageIcon(KullaniciKayit.class.getResource(\"/images/check-mark.png\"))); } else { lbl_ad.setIcon(new ImageIcon(KullaniciKayit.class.getResource(\"/images/close (1).png\"))); } if(!soyad.isEmpty()) { lbl_soyad.setIcon(new ImageIcon(KullaniciKayit.class.getResource(\"/images/check-mark.png\"))); } else { lbl_soyad.setIcon(new ImageIcon(KullaniciKayit.class.getResource(\"/images/close (1).png\"))); } if(!tc.isEmpty()) { lbl_tc.setIcon(new ImageIcon(KullaniciKayit.class.getResource(\"/images/check-mark.png\"))); } else { lbl_tc.setIcon(new ImageIcon(KullaniciKayit.class.getResource(\"/images/close (1).png\"))); } if(!sifre.isEmpty()) { lbl_sifre.setIcon(new ImageIcon(KullaniciKayit.class.getResource(\"/images/check-mark.png\"))); } else { lbl_sifre.setIcon(new ImageIcon(KullaniciKayit.class.getResource(\"/images/close (1).png\"))); } if(!dog.isEmpty()) { lbl_dog.setIcon(new ImageIcon(KullaniciKayit.class.getResource(\"/images/check-mark.png\"))); } else { lbl_dog.setIcon(new ImageIcon(KullaniciKayit.class.getResource(\"/images/close (1).png\"))); } if(!tel.isEmpty()) { lbl_tel.setIcon(new ImageIcon(KullaniciKayit.class.getResource(\"/images/check-mark.png\"))); } else { lbl_tel.setIcon(new ImageIcon(KullaniciKayit.class.getResource(\"/images/close (1).png\"))); } if(!adres.isEmpty()) { lbl_adres.setIcon(new ImageIcon(KullaniciKayit.class.getResource(\"/images/check-mark.png\"))); } else { lbl_adres.setIcon(new ImageIcon(KullaniciKayit.class.getResource(\"/images/close (1).png\"))); } } }"}]}}
{"project_id":209,"chunk_id":0,"content":{"main_file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/swingex/KullaniciIslemleri.java","main_file_content":"package swingex; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import bank.BakiyeOgren; import bank.KrediOdeme; import bank.ParaCek; import bank.ParaYatir; import bank.TransferYap; import javax.swing.JButton; import java.awt.event.ActionListener; import java.awt.event.ActionEvent; import java.awt.Font; import java.awt.Color; public class KullaniciIslemleri extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { KullaniciIslemleri frame = new KullaniciIslemleri(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } public KullaniciIslemleri() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 313); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JButton btnNewButton_1 = new JButton(\"Para Yatır\"); btnNewButton_1.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaYatir paraYatir = new ParaYatir(); paraYatir.setVisible(true); dispose(); } }); btnNewButton_1.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton_1.setBounds(62, 72, 307, 35); contentPane.add(btnNewButton_1); JButton btnNewButton_1_1 = new JButton(\"Para Çek\"); btnNewButton_1_1.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton_1_1.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaCek paraCek = new ParaCek(); paraCek.setVisible(true); dispose(); } }); btnNewButton_1_1.setBounds(62, 27, 307, 35); contentPane.add(btnNewButton_1_1); JButton btnNewButton_1_2 = new JButton(\"Bakiye Öğren\"); btnNewButton_1_2.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { BakiyeOgren bakiye = new BakiyeOgren(); bakiye.setVisible(true); dispose(); } }); btnNewButton_1_2.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton_1_2.setBounds(62, 118, 307, 35); contentPane.add(btnNewButton_1_2); JButton btnNewButton_1_3 = new JButton(\"Transfer Yap\"); btnNewButton_1_3.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { TransferYap transferYap = new TransferYap(); transferYap.setVisible(true); dispose(); } }); btnNewButton_1_3.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton_1_3.setBounds(62, 164, 307, 35); contentPane.add(btnNewButton_1_3); JButton btnNewButton_1_3_1 = new JButton(\"Kredi Ödeme\"); btnNewButton_1_3_1.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KrediOdeme krediOdeme = new KrediOdeme(); krediOdeme.setVisible(true); dispose(); } }); btnNewButton_1_3_1.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton_1_3_1.setBounds(62, 210, 307, 35); contentPane.add(btnNewButton_1_3_1); } }","dependencies":[{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/bank/BakiyeOgren.java","file_content":"package bank; import java.awt.EventQueue; import java.util.List; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JLabel; import java.awt.Font; import javax.swing.JButton; import java.awt.event.ActionListener; import java.io.FileReader; import java.awt.event.ActionEvent; import javax.swing.SwingConstants; import java.awt.Color; public class BakiyeOgren extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { BakiyeOgren frame = new BakiyeOgren(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public BakiyeOgren() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JLabel lblNewLabel = new JLabel(\"Hesabınızda Bulunan Bakiye Miktarı \"); lblNewLabel.setFont(new Font(\"SansSerif\", Font.BOLD, 15)); lblNewLabel.setBounds(78, -12, 280, 70); contentPane.add(lblNewLabel); JLabel bk_ogren = new JLabel(\"\"); bk_ogren.setVerticalAlignment(SwingConstants.TOP); bk_ogren.setFont(new Font(\"SansSerif\", Font.BOLD, 15)); bk_ogren.setBounds(142, 40, 128, 70); contentPane.add(bk_ogren); JButton btnNewButton = new JButton(\"Para Çek\"); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaCek paraCek = new ParaCek(); paraCek.setVisible(true); dispose(); } }); btnNewButton.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton.setBounds(78, 173, 117, 33); contentPane.add(btnNewButton); JButton btnParaYatr = new JButton(\"Para Yatır\"); btnParaYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaYatir paraYatir = new ParaYatir(); paraYatir.setVisible(true); dispose(); } }); btnParaYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaYatr.setBounds(205, 173, 128, 33); contentPane.add(btnParaYatr); JButton btnKredideme = new JButton(\"Kredi Ödeme\"); btnKredideme.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KrediOdeme krediOdeme = new KrediOdeme(); krediOdeme.setVisible(true); dispose(); } }); btnKredideme.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnKredideme.setBounds(78, 217, 117, 33); contentPane.add(btnKredideme); JButton btnParaTransfer = new JButton(\"Para Transfer\"); btnParaTransfer.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { TransferYap transferYap = new TransferYap(); transferYap.setVisible(true); dispose(); } }); btnParaTransfer.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaTransfer.setBounds(205, 217, 128, 33); contentPane.add(btnParaTransfer); JButton btnBakiyeniren = new JButton(\"Bakiyeni Öğren\"); btnBakiyeniren.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { String tc=KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); try (FileReader reader = new FileReader(JSON_FILE_PATH)){ Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); for(kullaniciVerileri customer : customers){ if(tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { bk_ogren.setText(String.valueOf(customer.getBakiye())); } } } catch (Exception e1) { e1.printStackTrace(); } } }); btnBakiyeniren.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnBakiyeniren.setBounds(142, 121, 138, 33); contentPane.add(btnBakiyeniren); } }"},{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/bank/KrediOdeme.java","file_content":"package bank; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JLabel; import javax.swing.JOptionPane; import java.awt.Font; import javax.swing.JButton; import javax.swing.JTextField; import java.awt.event.ActionListener; import java.io.FileReader; import java.io.FileWriter; import java.util.List; import java.awt.event.ActionEvent; import java.awt.Color; public class KrediOdeme extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { KrediOdeme frame = new KrediOdeme(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public KrediOdeme() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JButton btnParaTransfer = new JButton(\"Para Transfer\"); btnParaTransfer.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { TransferYap transferYap = new TransferYap(); transferYap.setVisible(true); dispose(); } }); btnParaTransfer.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaTransfer.setBounds(209, 217, 138, 33); contentPane.add(btnParaTransfer); JButton btnBakiyeren = new JButton(\"Bakiye Öğren\"); btnBakiyeren.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { BakiyeOgren bakiye = new BakiyeOgren(); bakiye.setVisible(true); dispose(); } }); btnBakiyeren.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnBakiyeren.setBounds(71, 217, 128, 33); contentPane.add(btnBakiyeren); JButton btnNewButton = new JButton(\"Para Çek\"); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaCek paraCek = new ParaCek(); paraCek.setVisible(true); dispose(); } }); btnNewButton.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton.setBounds(71, 173, 128, 33); contentPane.add(btnNewButton); JButton btnParaYatr = new JButton(\"Para Yatır\"); btnParaYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaYatir paraYatir = new ParaYatir(); paraYatir.setVisible(true); dispose(); } }); btnParaYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaYatr.setBounds(209, 173, 138, 33); contentPane.add(btnParaYatr); JLabel lblNewLabel = new JLabel(\"Kalan Kredi Borcunuz :\"); lblNewLabel.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblNewLabel.setBounds(21, 25, 163, 33); contentPane.add(lblNewLabel); String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); JLabel lblNewLabel_1 = new JLabel(krediBorcunuGoster(tc, sifre)); lblNewLabel_1.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblNewLabel_1.setBounds(194, 25, 103, 33); contentPane.add(lblNewLabel_1); JLabel lbldeyeceinizTutarGiriniz = new JLabel(\"Ödeyeceğiniz Tutarı Giriniz :\"); lbldeyeceinizTutarGiriniz.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lbldeyeceinizTutarGiriniz.setBounds(21, 76, 196, 33); contentPane.add(lbldeyeceinizTutarGiriniz); textField = new JTextField(); textField.setBounds(227, 83, 121, 20); contentPane.add(textField); textField.setColumns(10); JButton btnde = new JButton(\"Öde\"); btnde.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); Double odenecekTutar = Double.valueOf(textField.getText()); for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { borcOdeme(tc, sifre,odenecekTutar); } } } catch (Exception e1) { e1.printStackTrace(); } } }); btnde.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnde.setBounds(137, 120, 128, 33); contentPane.add(btnde); } public static void borcOdeme(String tc, String sifre, double odenecekTutar) { try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { if (customer.getBakiye()>=odenecekTutar) { if (odenecekTutar <= customer.getKartBorc()) { if(odenecekTutar>=customer.getKartBorc()/3) { customer.setKartBorc(customer.getKartBorc() - odenecekTutar); customer.setBakiye(customer.getBakiye()- odenecekTutar); JOptionPane.showMessageDialog(null,\"Başarıyla borcunuz ödenmiştir kalan borcunuz : \"+customer.getKartBorc()); try (FileWriter writer = new FileWriter(JSON_FILE_PATH)) { gson.toJson(customers, writer); } break; } else { JOptionPane.showMessageDialog(null,\"Borcunuzun en az 3/1'ini ödeyebilirsiniz.\"); } } else { JOptionPane.showMessageDialog(null, \"Kart borcunuzdan fazla ödeyemezsiniz\"); } } else { JOptionPane.showMessageDialog(null, \"Kart limitinizden fazla tutarda ödeme yapamazsınız\"); } return; } } } catch (Exception e) { e.printStackTrace(); } } public static String krediBorcunuGoster(String tc, String sifre) { try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { String kartBorc = String.valueOf(customer.getKartBorc()); return kartBorc; } } return \"HAVE A PROBLEM\"; }catch (Exception e) { e.printStackTrace(); } return \"\"; } }"},{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/bank/ParaCek.java","file_content":"package bank; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JButton; import java.awt.Font; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JTextField; import java.awt.event.ActionListener; import java.io.FileReader; import java.io.FileWriter; import java.util.List; import java.awt.event.ActionEvent; import java.awt.Color; public class ParaCek extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { ParaCek frame = new ParaCek(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public ParaCek() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JLabel lbl_mesaj = new JLabel(\"\"); lbl_mesaj.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lbl_mesaj.setBounds(20, 143, 404, 19); contentPane.add(lbl_mesaj); JLabel lbl_bakiye = new JLabel(bakiye()); lbl_bakiye.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lbl_bakiye.setBounds(20, 11, 239, 19); contentPane.add(lbl_bakiye); JButton btnek = new JButton(\"Çek\"); btnek.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); boolean cekme = false; for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { lbl_bakiye.setText(\"Güncel bakiyeniz : \"+String.valueOf(customer.getBakiye())); double miktar =Double.parseDouble(textField.getText()); if (miktar <= customer.getBakiye()) { customer.setBakiye(customer.getBakiye() - miktar); lbl_mesaj.setText(\"Bakiyeniz Güncellendi\"); cekme = true; try (FileWriter writer = new FileWriter(JSON_FILE_PATH)) { gson.toJson(customers, writer); } } } } if(!cekme) { JOptionPane.showMessageDialog(null, \"Hatalı Giriş\"); lbl_mesaj.setText(\"Tekrar Deneyiniz\"); } } catch (Exception e1) { e1.printStackTrace(); } } }); btnek.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnek.setBounds(156, 99, 128, 33); contentPane.add(btnek); JButton btnParaYatr = new JButton(\"Para Yatır\"); btnParaYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaYatir paraYatir = new ParaYatir(); paraYatir.setVisible(true); dispose(); } }); btnParaYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaYatr.setBounds(84, 173, 128, 33); contentPane.add(btnParaYatr); JButton btnBakiyeren = new JButton(\"Bakiye Öğren\"); btnBakiyeren.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { BakiyeOgren bakiye = new BakiyeOgren(); bakiye.setVisible(true); dispose(); } }); btnBakiyeren.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnBakiyeren.setBounds(84, 217, 128, 33); contentPane.add(btnBakiyeren); JButton btnParaTransfer = new JButton(\"Para Transfer\"); btnParaTransfer.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { TransferYap transferYap = new TransferYap(); transferYap.setVisible(true); dispose(); } }); btnParaTransfer.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaTransfer.setBounds(222, 217, 138, 33); contentPane.add(btnParaTransfer); JButton btnKredideme = new JButton(\"Kredi Ödeme\"); btnKredideme.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KrediOdeme krediOdeme = new KrediOdeme(); krediOdeme.setVisible(true); dispose(); } }); btnKredideme.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnKredideme.setBounds(222, 173, 138, 33); contentPane.add(btnKredideme); JLabel lblekmekIstediinizTutar = new JLabel(\"Çekmek İstediğiniz Tutarı Giriniz : \"); lblekmekIstediinizTutar.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblekmekIstediinizTutar.setBounds(20, 40, 224, 33); contentPane.add(lblekmekIstediinizTutar); textField = new JTextField(); textField.setColumns(10); textField.setBounds(254, 47, 139, 20); contentPane.add(textField); } public static String bakiye() { String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { String text = String.valueOf(\"Hesabınızdaki Tutar \"+customer.getBakiye()+\" TL\"); return text; } } System.out.println(\"Giriş yapılan hesap bulunamadı.\"); } catch (Exception e1) { e1.printStackTrace(); } return \"\"; } }"}]}}
{"project_id":209,"chunk_id":1,"content":{"main_file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/swingex/KullaniciIslemleri.java","main_file_content":"package swingex; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import bank.BakiyeOgren; import bank.KrediOdeme; import bank.ParaCek; import bank.ParaYatir; import bank.TransferYap; import javax.swing.JButton; import java.awt.event.ActionListener; import java.awt.event.ActionEvent; import java.awt.Font; import java.awt.Color; public class KullaniciIslemleri extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { KullaniciIslemleri frame = new KullaniciIslemleri(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } public KullaniciIslemleri() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 313); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JButton btnNewButton_1 = new JButton(\"Para Yatır\"); btnNewButton_1.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaYatir paraYatir = new ParaYatir(); paraYatir.setVisible(true); dispose(); } }); btnNewButton_1.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton_1.setBounds(62, 72, 307, 35); contentPane.add(btnNewButton_1); JButton btnNewButton_1_1 = new JButton(\"Para Çek\"); btnNewButton_1_1.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton_1_1.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaCek paraCek = new ParaCek(); paraCek.setVisible(true); dispose(); } }); btnNewButton_1_1.setBounds(62, 27, 307, 35); contentPane.add(btnNewButton_1_1); JButton btnNewButton_1_2 = new JButton(\"Bakiye Öğren\"); btnNewButton_1_2.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { BakiyeOgren bakiye = new BakiyeOgren(); bakiye.setVisible(true); dispose(); } }); btnNewButton_1_2.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton_1_2.setBounds(62, 118, 307, 35); contentPane.add(btnNewButton_1_2); JButton btnNewButton_1_3 = new JButton(\"Transfer Yap\"); btnNewButton_1_3.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { TransferYap transferYap = new TransferYap(); transferYap.setVisible(true); dispose(); } }); btnNewButton_1_3.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton_1_3.setBounds(62, 164, 307, 35); contentPane.add(btnNewButton_1_3); JButton btnNewButton_1_3_1 = new JButton(\"Kredi Ödeme\"); btnNewButton_1_3_1.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KrediOdeme krediOdeme = new KrediOdeme(); krediOdeme.setVisible(true); dispose(); } }); btnNewButton_1_3_1.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton_1_3_1.setBounds(62, 210, 307, 35); contentPane.add(btnNewButton_1_3_1); } }","dependencies":[{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/bank/ParaYatir.java","file_content":"package bank; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JButton; import java.awt.Font; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JTextField; import java.awt.event.ActionListener; import java.io.FileReader; import java.io.FileWriter; import java.util.List; import java.awt.event.ActionEvent; import java.awt.Color; public class ParaYatir extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { ParaYatir frame = new ParaYatir(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public ParaYatir() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JButton btnNewButton = new JButton(\"Para Çek\"); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaCek paraCek = new ParaCek(); paraCek.setVisible(true); dispose(); } }); btnNewButton.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton.setBounds(74, 173, 128, 33); contentPane.add(btnNewButton); JButton btnParaTransfer = new JButton(\"Para Transfer\"); btnParaTransfer.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { TransferYap transferYap = new TransferYap(); transferYap.setVisible(true); dispose(); } }); btnParaTransfer.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaTransfer.setBounds(212, 217, 138, 33); contentPane.add(btnParaTransfer); JButton btnBakiyeren = new JButton(\"Bakiye Öğren\"); btnBakiyeren.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { BakiyeOgren bakiye = new BakiyeOgren(); bakiye.setVisible(true); dispose(); } }); btnBakiyeren.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnBakiyeren.setBounds(74, 217, 128, 33); contentPane.add(btnBakiyeren); JButton btnYatr = new JButton(\"Yatır\"); btnYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); boolean cekme = false; for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { double miktar =Double.parseDouble(textField.getText()); if (miktar <= 500 && miktar>=5) { customer.setBakiye(customer.getBakiye() + miktar); cekme = true; try (FileWriter writer = new FileWriter(JSON_FILE_PATH)) { gson.toJson(customers, writer); } JOptionPane.showMessageDialog(null,\" İşlem başarıyla gerçekleştirildi güncel bakiyeniz : \"+customer.getBakiye()); } else { JOptionPane.showMessageDialog(null, \"500 TL'den fazla 5 TL'den aşşağıya yükleme yapılamaz\"); } } } if(!cekme) { JOptionPane.showMessageDialog(null, \"Hatalı Giriş\"); } } catch (Exception e1) { e1.printStackTrace(); } } }); btnYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnYatr.setBounds(146, 99, 128, 33); contentPane.add(btnYatr); JLabel lblYatrmakIstediinizTutar = new JLabel(\"Yatırmak İstediğiniz Tutarı Giriniz : \"); lblYatrmakIstediinizTutar.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblYatrmakIstediinizTutar.setBounds(10, 40, 224, 33); contentPane.add(lblYatrmakIstediinizTutar); textField = new JTextField(); textField.setBounds(244, 47, 139, 20); contentPane.add(textField); textField.setColumns(10); JButton btnKredideme = new JButton(\"Kredi Ödeme\"); btnKredideme.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KrediOdeme krediOdeme = new KrediOdeme(); krediOdeme.setVisible(true); dispose(); } }); btnKredideme.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnKredideme.setBounds(212, 173, 138, 33); contentPane.add(btnKredideme); } }"},{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/bank/TransferYap.java","file_content":"package bank; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JButton; import java.awt.Font; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JTextField; import java.awt.event.ActionListener; import java.io.FileReader; import java.io.FileWriter; import java.util.List; import java.awt.event.ActionEvent; import java.awt.Color; public class TransferYap extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; private JTextField textField_1; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { TransferYap frame = new TransferYap(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public TransferYap() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JButton btnYatr = new JButton(\"Yatır\"); btnYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { try (FileReader reader = new FileReader(JSON_FILE_PATH)) { Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); String tc = KimlikVeri.getTc(); String sifre = KimlikVeri.getSifre(); String aliciHesapNumara = String.valueOf(textField.getText()); Double yollanacakMiktar = Double.parseDouble(textField_1.getText()); for (kullaniciVerileri customer : customers) { if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { performTransfer(customers, tc, aliciHesapNumara, yollanacakMiktar); } } } catch (Exception e1) { e1.printStackTrace(); } } }); btnYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnYatr.setBounds(157, 99, 128, 33); contentPane.add(btnYatr); JButton btnNewButton = new JButton(\"Para Çek\"); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaCek paraCek = new ParaCek(); paraCek.setVisible(true); dispose(); } }); btnNewButton.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnNewButton.setBounds(85, 173, 128, 33); contentPane.add(btnNewButton); JButton btnBakiyeren = new JButton(\"Bakiye Öğren\"); btnBakiyeren.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { BakiyeOgren bakiye = new BakiyeOgren(); bakiye.setVisible(true); dispose(); } }); btnBakiyeren.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnBakiyeren.setBounds(85, 217, 128, 33); contentPane.add(btnBakiyeren); JButton btnParaYatr = new JButton(\"Para Yatır\"); btnParaYatr.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { ParaYatir paraYatir = new ParaYatir(); paraYatir.setVisible(true); dispose(); } }); btnParaYatr.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnParaYatr.setBounds(223, 217, 138, 33); contentPane.add(btnParaYatr); JButton btnKredideme = new JButton(\"Kredi Ödeme\"); btnKredideme.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KrediOdeme krediOdeme = new KrediOdeme(); krediOdeme.setVisible(true); dispose(); } }); btnKredideme.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); btnKredideme.setBounds(223, 173, 138, 33); contentPane.add(btnKredideme); JLabel lblTransferYaplacakHesap = new JLabel(\"Transfer Yapılacak Hesap No Giriniz : \"); lblTransferYaplacakHesap.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblTransferYaplacakHesap.setBounds(20, 11, 247, 33); contentPane.add(lblTransferYaplacakHesap); textField = new JTextField(); textField.setColumns(10); textField.setBounds(264, 18, 139, 20); contentPane.add(textField); JLabel lblTransferYaplacakTutar = new JLabel(\"Transfer Yapılacak Tutarı Giriniz :\"); lblTransferYaplacakTutar.setFont(new Font(\"SansSerif\", Font.BOLD, 13)); lblTransferYaplacakTutar.setBounds(20, 55, 247, 33); contentPane.add(lblTransferYaplacakTutar); textField_1 = new JTextField(); textField_1.setColumns(10); textField_1.setBounds(264, 62, 139, 20); contentPane.add(textField_1); } public static void performTransfer(List<kullaniciVerileri> customers, String gonderenTc, String aliciHesapNumara, double transferMiktar) { for (kullaniciVerileri gonderen : customers) { if (gonderen.getTcKimlik().toLowerCase().equals(gonderenTc)) { for (kullaniciVerileri alici : customers) { if (alici.getHesapNumarasi().equals(aliciHesapNumara)) { if (gonderen.getBakiye() >= transferMiktar) { gonderen.setBakiye(gonderen.getBakiye() - transferMiktar); alici.setBakiye(alici.getBakiye() + transferMiktar); try (FileWriter writer = new FileWriter(JSON_FILE_PATH)) { Gson gson = new Gson(); gson.toJson(customers, writer); } catch (Exception e) { e.printStackTrace(); } JOptionPane.showMessageDialog(null, alici.getFirstName()+\" \"+alici.getLastName()+ \" adlı kişiye \" + \"\" + transferMiktar + \" TL Para Transferiniz Başarıyla Gerçekleştirildi.\"); } else { JOptionPane.showMessageDialog(null, \"Hatalı Giriş\"); } return; } } JOptionPane.showMessageDialog(null,\"Alıcı hesap bulunamadı.\"); return; } } JOptionPane.showMessageDialog(null,\"Gönderen hesap bulunamadı.\"); } }"}]}}
{"project_id":209,"chunk_id":0,"content":{"main_file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/swingex/KullaniciKayit.java","main_file_content":"package swingex; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import org.json.JSONArray; import org.json.JSONObject; import javax.swing.JLabel; import javax.swing.JOptionPane; import java.awt.Font; import javax.swing.ImageIcon; import java.awt.event.ActionListener; import java.io.IOException; import java.nio.file.Files; import java.nio.file.Paths; import java.util.Random; import java.awt.event.ActionEvent; import java.awt.Color; import java.awt.Button; import javax.swing.SwingConstants; import java.awt.TextField; import java.awt.Label; import javax.swing.JPasswordField; import javax.swing.JTextPane; import javax.swing.JCheckBox; public class KullaniciKayit extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { KullaniciGiris frame = new KullaniciGiris(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; private JPasswordField passwordField; public KullaniciKayit() { setTitle(\"Uygulamaya Giriş\"); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 672, 524); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); JLabel lblNewLabel_1 = new JLabel(\"Hesap Oluştur\"); lblNewLabel_1.setHorizontalAlignment(SwingConstants.CENTER); lblNewLabel_1.setFont(new Font(\"SansSerif\", Font.BOLD, 30)); lblNewLabel_1.setBounds(151, 11, 227, 50); contentPane.add(lblNewLabel_1); TextField textField_Ad = new TextField(); textField_Ad.setBounds(220, 108, 155, 22); contentPane.add(textField_Ad); Label label = new Label(\"Adınız : \"); label.setFont(new Font(\"SansSerif\", Font.BOLD, 16)); label.setBounds(23, 108, 170, 22); contentPane.add(label); Label label_1 = new Label(\"Soyadınız :\"); label_1.setFont(new Font(\"SansSerif\", Font.BOLD, 16)); label_1.setBounds(23, 149, 170, 22); contentPane.add(label_1); TextField textField_Soyad = new TextField(); textField_Soyad.setBounds(220, 149, 155, 22); contentPane.add(textField_Soyad); Label label_1_1 = new Label(\"TC Numaranız :\"); label_1_1.setFont(new Font(\"SansSerif\", Font.BOLD, 16)); label_1_1.setBounds(23, 194, 170, 22); contentPane.add(label_1_1); TextField textField_TC = new TextField(); textField_TC.setBounds(220, 194, 155, 22); contentPane.add(textField_TC); Label label_2 = new Label(\"Adres : \"); label_2.setFont(new Font(\"SansSerif\", Font.BOLD, 16)); label_2.setBounds(23, 235, 170, 22); contentPane.add(label_2); TextField textField_Adres = new TextField(); textField_Adres.setBounds(220, 235, 155, 22); contentPane.add(textField_Adres); Label label_1_2 = new Label(\"Doğum Tarihiniz :\"); label_1_2.setFont(new Font(\"SansSerif\", Font.BOLD, 16)); label_1_2.setBounds(23, 276, 170, 22); contentPane.add(label_1_2); TextField textField_Dogum = new TextField(); textField_Dogum.setBounds(220, 276, 155, 22); contentPane.add(textField_Dogum); Label label_1_1_1 = new Label(\"Telefon Numaranız :\"); label_1_1_1.setFont(new Font(\"SansSerif\", Font.BOLD, 16)); label_1_1_1.setBounds(23, 321, 170, 22); contentPane.add(label_1_1_1); TextField textField_Tel = new TextField(); textField_Tel.setBounds(220, 321, 155, 22); contentPane.add(textField_Tel); Label label_1_1_1_1 = new Label(\"Sifre Oluşturun : \"); label_1_1_1_1.setFont(new Font(\"SansSerif\", Font.BOLD, 16)); label_1_1_1_1.setBounds(23, 360, 170, 22); contentPane.add(label_1_1_1_1); passwordField = new JPasswordField(); passwordField.setBounds(220, 362, 155, 20); contentPane.add(passwordField); JLabel lblNewLabel_sifre = new JLabel(\"\"); lblNewLabel_sifre.setHorizontalAlignment(SwingConstants.CENTER); lblNewLabel_sifre.setBounds(406, 362, 21, 20); contentPane.add(lblNewLabel_sifre); JLabel lblNewLabel_tel = new JLabel(\"\"); lblNewLabel_tel.setHorizontalAlignment(SwingConstants.CENTER); lblNewLabel_tel.setBounds(381, 321, 21, 20); contentPane.add(lblNewLabel_tel); JLabel lblNewLabel_dog = new JLabel(\"\"); lblNewLabel_dog.setHorizontalAlignment(SwingConstants.CENTER); lblNewLabel_dog.setBounds(381, 276, 21, 20); contentPane.add(lblNewLabel_dog); JLabel lblNewLabel_adres = new JLabel(\"\"); lblNewLabel_adres.setHorizontalAlignment(SwingConstants.CENTER); lblNewLabel_adres.setBounds(381, 237, 21, 20); contentPane.add(lblNewLabel_adres); JLabel lblNewLabel_tc = new JLabel(\"\"); lblNewLabel_tc.setHorizontalAlignment(SwingConstants.CENTER); lblNewLabel_tc.setBounds(381, 194, 21, 20); contentPane.add(lblNewLabel_tc); JLabel lblNewLabel_soy = new JLabel(\"\"); lblNewLabel_soy.setHorizontalAlignment(SwingConstants.CENTER); lblNewLabel_soy.setBounds(381, 151, 21, 20); contentPane.add(lblNewLabel_soy); JLabel lblNewLabel_ad = new JLabel(\"\"); lblNewLabel_ad.setHorizontalAlignment(SwingConstants.CENTER); lblNewLabel_ad.setBounds(381, 108, 21, 20); contentPane.add(lblNewLabel_ad); Label label_1_1_1_2 = new Label(\"Hesabınız Var mı ?\"); label_1_1_1_2.setFont(new Font(\"SansSerif\", Font.BOLD, 22)); label_1_1_1_2.setAlignment(Label.CENTER); label_1_1_1_2.setBounds(423, 80, 198, 50); contentPane.add(label_1_1_1_2); Button button_1 = new Button(\"Giriş Yap\"); button_1.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KullaniciGiris giris = new KullaniciGiris(); giris.setVisible(true); dispose(); } }); button_1.setBackground(Color.GRAY); button_1.setBounds(469, 136, 96, 35); contentPane.add(button_1); JTextPane txtpnDnyannBirNumaral = new JTextPane(); txtpnDnyannBirNumaral.setText(\"Dünyanın Bir Numaralı \\\"Banka Uygulamasına\\\" Hoşgeldiniz.\"); txtpnDnyannBirNumaral.setFont(new Font(\"SansSerif\", Font.BOLD, 14)); txtpnDnyannBirNumaral.setEditable(false); txtpnDnyannBirNumaral.setBounds(448, 194, 184, 135); contentPane.add(txtpnDnyannBirNumaral); Button button = new Button(\"Oluştur\"); button.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { kutuKontrol(textField_Ad.getText(), textField_Soyad.getText(), textField_TC.getText(), passwordField.getText(), textField_Dogum.getText(), textField_Tel.getText(),textField_Adres.getText(), lblNewLabel_ad, lblNewLabel_soy, lblNewLabel_tc, lblNewLabel_sifre, lblNewLabel_dog, lblNewLabel_tel, lblNewLabel_adres); jsonVeriEkle(textField_Ad.getText(), textField_Soyad.getText(), textField_TC.getText(), passwordField.getText(), textField_Dogum.getText(), textField_Tel.getText(),textField_Adres.getText()); } }); button.setFont(new Font(\"SansSerif\", Font.BOLD, 16)); button.setBackground(Color.LIGHT_GRAY); button.setBounds(154, 401, 126, 40); contentPane.add(button); JCheckBox checkBox = new JCheckBox(\"\"); checkBox.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { if(checkBox.isSelected()) { passwordField.setEchoChar((char)0); } else passwordField.setEchoChar('*'); } }); checkBox.setBackground(new Color(255, 255, 255)); checkBox.setBounds(374, 360, 26, 23); contentPane.add(checkBox); } public void jsonVeriEkle(String lbl_ad,String lbl_soyad, String lbl_tc, String lbl_sifre ,String lbl_dog,String lbl_tel,String lbl_adres) { if(!lbl_ad.isEmpty() && !lbl_soyad.isEmpty() && !lbl_tc.isEmpty() && !lbl_sifre.isEmpty() && !lbl_dog.isEmpty() && !lbl_tel.isEmpty() && !lbl_adres.isEmpty()) { try { String jsonString = new String(Files.readAllBytes(Paths.get(JSON_FILE_PATH))); JSONArray jsonArray; if (jsonString.trim().isEmpty()) { jsonArray = new JSONArray(); } else { jsonArray = new JSONArray(jsonString); } JSONObject json = new JSONObject(); json.put(\"firstName\", lbl_ad); json.put(\"lastName\", lbl_soyad); json.put(\"sifre\", lbl_sifre); json.put(\"tcKimlik\", lbl_tc); json.put(\"telefonNumarasi\", lbl_tel); json.put(\"dogumTarih\", lbl_dog); json.put(\"hesapNumarasi\", rastgele16RakamliSayiOlustur()); json.put(\"adres\", lbl_adres); json.put(\"bakiye\", 0.0); json.put(\"kartEkstre\", 0.0); json.put(\"kartBorc\", 0.0); jsonArray.put(json); Files.write(Paths.get(JSON_FILE_PATH), jsonArray.toString().getBytes()); JOptionPane.showMessageDialog(null, \"Hesabınız oluşturuldu. Hoşgeldiniz :)\"); } catch (IOException e) { e.printStackTrace(); } } else { JOptionPane.showMessageDialog(null, \"Boşluk bırakmadan giriş yapınız.\"); } } public static String rastgele16RakamliSayiOlustur() { Random random = new Random(); StringBuilder sayi = new StringBuilder(); for (int i = 0; i < 16; i++) { int rastgeleRakam = random.nextInt(10); sayi.append(rastgeleRakam); } return sayi.toString(); } public void kutuKontrol(String ad,String soyad, String tc, String sifre ,String dog,String tel,String adres, JLabel lbl_ad,JLabel lbl_soyad, JLabel lbl_tc, JLabel lbl_sifre ,JLabel lbl_dog,JLabel lbl_tel,JLabel lbl_adres) { if(!ad.isEmpty()) { lbl_ad.setIcon(new ImageIcon(KullaniciKayit.class.getResource(\"/images/check-mark.png\"))); } else { lbl_ad.setIcon(new ImageIcon(KullaniciKayit.class.getResource(\"/images/close (1).png\"))); } if(!soyad.isEmpty()) { lbl_soyad.setIcon(new ImageIcon(KullaniciKayit.class.getResource(\"/images/check-mark.png\"))); } else { lbl_soyad.setIcon(new ImageIcon(KullaniciKayit.class.getResource(\"/images/close (1).png\"))); } if(!tc.isEmpty()) { lbl_tc.setIcon(new ImageIcon(KullaniciKayit.class.getResource(\"/images/check-mark.png\"))); } else { lbl_tc.setIcon(new ImageIcon(KullaniciKayit.class.getResource(\"/images/close (1).png\"))); } if(!sifre.isEmpty()) { lbl_sifre.setIcon(new ImageIcon(KullaniciKayit.class.getResource(\"/images/check-mark.png\"))); } else { lbl_sifre.setIcon(new ImageIcon(KullaniciKayit.class.getResource(\"/images/close (1).png\"))); } if(!dog.isEmpty()) { lbl_dog.setIcon(new ImageIcon(KullaniciKayit.class.getResource(\"/images/check-mark.png\"))); } else { lbl_dog.setIcon(new ImageIcon(KullaniciKayit.class.getResource(\"/images/close (1).png\"))); } if(!tel.isEmpty()) { lbl_tel.setIcon(new ImageIcon(KullaniciKayit.class.getResource(\"/images/check-mark.png\"))); } else { lbl_tel.setIcon(new ImageIcon(KullaniciKayit.class.getResource(\"/images/close (1).png\"))); } if(!adres.isEmpty()) { lbl_adres.setIcon(new ImageIcon(KullaniciKayit.class.getResource(\"/images/check-mark.png\"))); } else { lbl_adres.setIcon(new ImageIcon(KullaniciKayit.class.getResource(\"/images/close (1).png\"))); } } }","dependencies":[{"file_path":"bank-management-system-java-swing-main/Bank_Management_System/src/swingex/KullaniciGiris.java","file_content":"package swingex; import java.awt.EventQueue; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.border.EmptyBorder; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import DataRead.KimlikVeri; import DataRead.kullaniciVerileri; import javax.swing.JTextField; import javax.swing.JLabel; import javax.swing.JOptionPane; import java.awt.Font; import java.awt.TextField; import javax.swing.JButton; import java.awt.event.ActionListener; import java.io.FileReader; import java.util.List; import java.awt.event.ActionEvent; import java.awt.Color; public class KullaniciGiris extends JFrame { private static final long serialVersionUID = 1L; private JPanel contentPane; private JTextField textField; private JTextField textField_1; public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { KullaniciGiris frame = new KullaniciGiris(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } private static final String JSON_FILE_PATH = \"C:\\\\Users\\\\berka\\\\OneDrive\\\\Masaüstü\\\\bank\\\\Bank_Management\\\\src\\\\veri.json\"; public KullaniciGiris() { setTitle(\"Uygulamaya Giriş\"); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 450, 300); contentPane = new JPanel(); contentPane.setBackground(new Color(255, 255, 255)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); textField = new JTextField(); textField.setBounds(246, 52, 146, 20); contentPane.add(textField); textField.setColumns(10); textField_1 = new JTextField(); textField_1.setColumns(10); textField_1.setBounds(246, 106, 146, 20); contentPane.add(textField_1); JLabel lblNewLabel = new JLabel(\"TC Kimlik Numaranizi Giriniz :\"); lblNewLabel.setFont(new Font(\"Lucida Fax\", Font.ITALIC, 14)); lblNewLabel.setBounds(10, 49, 226, 23); contentPane.add(lblNewLabel); JLabel lblSifreniziGiriniz = new JLabel(\"Sifrenizi Giriniz :\"); lblSifreniziGiriniz.setFont(new Font(\"Lucida Fax\", Font.ITALIC, 14)); lblSifreniziGiriniz.setBounds(10, 103, 226, 23); contentPane.add(lblSifreniziGiriniz); JButton btnNewButton = new JButton(\"Giris\"); btnNewButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KimlikVeri.setTc(textField.getText()); KimlikVeri.setSifre(textField_1.getText()); boolean giris = false; String tc = textField.getText(); String sifre = textField_1.getText(); try (FileReader reader = new FileReader(JSON_FILE_PATH)){ Gson gson = new Gson(); java.lang.reflect.Type listType = new TypeToken<List<kullaniciVerileri>>() {}.getType(); List<kullaniciVerileri> customers = gson.fromJson(reader, listType); for(kullaniciVerileri customer : customers){ if (tc.equals(customer.getTcKimlik()) && sifre.equals(customer.getSifre())) { giris = true; KullaniciIslemleri kullanıcıEkran = new KullaniciIslemleri(); kullanıcıEkran.setVisible(true); dispose(); } } if (!giris) { JOptionPane.showMessageDialog(null, \"Girdiğiniz değerleri kontrol ediniz.\"); } } catch (Exception e1) { e1.printStackTrace(); } } }); btnNewButton.setFont(new Font(\"Poor Richard\", Font.PLAIN, 17)); btnNewButton.setBounds(249, 151, 114, 34); contentPane.add(btnNewButton); JButton btnKaytOl = new JButton(\"Kayıt Ol\"); btnKaytOl.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { KullaniciKayit kayit = new KullaniciKayit(); kayit.setVisible(true); dispose(); } }); btnKaytOl.setFont(new Font(\"Poor Richard\", Font.PLAIN, 17)); btnKaytOl.setBounds(82, 151, 114, 34); contentPane.add(btnKaytOl); } }"}]}}
{"project_id":214,"chunk_id":0,"content":{"main_file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/test/WestminsterSkinConsultationManagerTest.java","main_file_content":"package com.cj.wscc.test; import com.cj.wscc.console.Doctor; import com.cj.wscc.console.WestminsterSkinConsultationManager; import org.junit.jupiter.api.DisplayName; import org.junit.jupiter.api.Test; import java.io.ByteArrayInputStream; import java.io.InputStream; import java.time.LocalDate; import java.util.ArrayList; import static org.junit.jupiter.api.Assertions.*; @DisplayName(\"Test class for the WestminsterSkinConsultationManager class\") class WestminsterSkinConsultationManagerTest { private final WestminsterSkinConsultationManager wscm = new WestminsterSkinConsultationManager(); @Test() @DisplayName(\"Add a new doctor\") void addDoctor() { Doctor expected = new Doctor( \"John\", \"Doe\", LocalDate.of(1990, 10, 20), \"0771234567\", \"WE6534522\", \"Paediatric Dermatology\" ); int noOfDocsBefore = wscm.getNoOfDoctors(); InputStream sysInBackup = System.in; String newDocInfo = \"John\\nDoe\\nPaediatric Dermatology\\nWE6534522\\n1990-10-20\\n0771234567\"; ByteArrayInputStream in = new ByteArrayInputStream(newDocInfo.getBytes()); System.setIn(in); Doctor result = wscm.addDoctor(); System.setIn(sysInBackup); assertEquals(expected, result); assertEquals(wscm.getNoOfDoctors(), noOfDocsBefore + 1); } @Test @DisplayName(\"Remove an existing doctor\") void removeDoctor() { ArrayList<Doctor> doctors = new ArrayList<Doctor>(10); Doctor expected = new Doctor( \"john\", \"doe\", LocalDate.parse(\"1980-01-16\"), \"0000000000\", \"WE3564G3\", \"Medical Dermatology\" ); doctors.add(expected); wscm.setDoctors(doctors); int noOfDocsBefore = wscm.getNoOfDoctors(); InputStream sysInBackup = System.in; String lisenceOfDocToRemove = \"WE3564G3\"; ByteArrayInputStream in = new ByteArrayInputStream(lisenceOfDocToRemove.getBytes()); System.setIn(in); Doctor result = wscm.deleteDoctor(); System.setIn(sysInBackup); assertEquals(expected, result); assertEquals(wscm.getNoOfDoctors(), noOfDocsBefore - 1); } @Test @DisplayName(\"Name input validation\") void isNameValid() { assertTrue(wscm.isNameValid(\"John\")); assertFalse(wscm.isNameValid(\"Robert2345\")); assertFalse(wscm.isNameValid(\"12345\")); assertFalse(wscm.isNameValid(\"!@#$%^&*\")); } @Test @DisplayName(\"Specialisation input validation\") void isSpecialisationValid() { assertTrue(wscm.isSpecialisationValid(\"cosmetic dermatology\")); assertFalse(wscm.isSpecialisationValid(\"dermatology 123\")); assertFalse(wscm.isSpecialisationValid(\"dermatology_$dermatology\")); assertFalse(wscm.isSpecialisationValid(\"12345\")); assertFalse(wscm.isSpecialisationValid(\"!@#$%^&*\")); } @Test @DisplayName(\"License input validation\") void isLicenseValid() { assertTrue(wscm.isLicenseValid(\"abcdefgh\")); assertTrue(wscm.isLicenseValid(\"12345678\")); assertTrue(wscm.isLicenseValid(\"abcd1234\")); assertFalse(wscm.isLicenseValid(\"$ab^ 123\")); assertFalse(wscm.isLicenseValid(\"!@#$%^&*)\")); } @Test @DisplayName(\"DOB input validation\") void isDobValid() { assertTrue(wscm.isDobValid(\"1990-08-15\")); assertFalse(wscm.isDobValid(\"15-08-1990\")); assertFalse(wscm.isDobValid(\"1990/08/5\")); assertFalse(wscm.isDobValid(\"1234567\")); assertFalse(wscm.isDobValid(\"abcdefg\")); assertFalse(wscm.isDobValid(\"!@#$%^&*>\")); } @Test @DisplayName(\"Mobile No. input validation\") void isMobileValid() { assertTrue(wscm.isMobileValid(\"0771234567\")); assertFalse(wscm.isMobileValid(\"07712345678\")); assertFalse(wscm.isMobileValid(\"abcedsdfea\")); assertFalse(wscm.isMobileValid(\"077abcd\")); assertFalse(wscm.isMobileValid(\"077-1234567\")); assertFalse(wscm.isMobileValid(\"!@#$%^&*\")); } @Test @DisplayName(\"Can only add 10 doctors\") void addDoctorWhenFull() { ArrayList<Doctor> doctors = new ArrayList<Doctor>(10); for (int i = 0; i < 10; i++) { Doctor doctor = new Doctor( \"john\", \"doe\", LocalDate.parse(\"1980-01-16\"), \"0000000000\", \"WE3564G3\", \"Medical Dermatology\" ); doctors.add(doctor); } wscm.setDoctors(doctors); Doctor newDoctor = wscm.addDoctor(); assertNull(newDoctor); } }","dependencies":[{"file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/console/Doctor.java","file_content":"package com.cj.wscc.console; import java.time.LocalDate; import java.util.Objects; public class Doctor extends Person { private String medicalLicenseNo; private String specialisation; public Doctor(String name, String surname, LocalDate DOB, String mobiNo, String medicalLicenseNo, String specialisation) { super(name, surname, DOB, mobiNo); this.medicalLicenseNo = medicalLicenseNo; this.specialisation = specialisation; } public String getMedicalLicenseNo() { return medicalLicenseNo; } public void setMedicalLicenseNo(String medicalLicenseNo) { this.medicalLicenseNo = medicalLicenseNo; } public String getSpecialisation() { return specialisation; } public void setSpecialisation(String specialisation) { this.specialisation = specialisation; } @Override public boolean equals(Object obj) { if (obj == this) { return true; } if (!(obj instanceof Person)) { return false; } Doctor other = (Doctor) obj; return Objects.equals(getFullName(), other.getFullName()) && Objects.equals(getMedicalLicenseNo(), other.getMedicalLicenseNo()); } }"},{"file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/console/WestminsterSkinConsultationManager.java","file_content":"package com.cj.wscc.console; import com.cj.wscc.gui.MainWindow; import com.formdev.flatlaf.intellijthemes.FlatArcIJTheme; import java.io.*; import java.text.ParseException; import java.text.SimpleDateFormat; import java.time.LocalDate; import java.util.*; public class WestminsterSkinConsultationManager implements SkinConsultationManager { private static final Scanner scanner = new Scanner(System.in); private ArrayList<Doctor> doctors = new ArrayList<>(); public static void main(String[] args) { WestminsterSkinConsultationManager wscm = new WestminsterSkinConsultationManager(); wscm.menu(); wscm.loadData(); while (true) { System.out.print(\"Enter Option (1-6): \"); switch (scanner.nextInt()) { case 1 -> wscm.addDoctor(); case 2 -> wscm.deleteDoctor(); case 3 -> wscm.printDoctors(); case 4 -> wscm.saveData(); case 5 -> wscm.openGUI(); case 6 -> { System.out.println(\"Bye..\"); System.exit(0); } default -> System.out.println(wscm.getOpTxt(1) + \" Invalid choice. Please try again.\\n\"); } } } @Override public void menu() { System.out.println(\"++\"); System.out.printf(\"| %s |%n\", getColoredTxt(\"Westminster Skin Consultation Centre\", \"blue\")); System.out.println(\"++\"); System.out.println(\"| 1. Add a New Doctor |\"); System.out.println(\"| 2. Delete a Doctor |\"); System.out.println(\"| 3. Print the List of Doctors |\"); System.out.println(\"| 4. Save Data to File |\"); System.out.println(\"| 5. Open GUI |\"); System.out.println(\"| 6. Exit |\"); System.out.println(\"++\"); } @Override public Doctor addDoctor() { System.out.printf(\"%n%s%n\", getColoredTxt(\"[Add a Doctor]\", \"blue\")); Scanner scanner = new Scanner(System.in); if (getNoOfDoctors() == 10) { System.out.println(getOpTxt(1) + \" Maximum doctors allocated in the centre\\n\"); return null; } System.out.print(\"Enter first name: \"); String fname = scanner.next(); if (!isNameValid(fname)) { System.out.println(getOpTxt(1) + \" Name cannot contain numbers or special characters\\n\"); return null; } System.out.print(\"Enter surname: \"); String sname = scanner.next(); if (!isNameValid(sname)) { System.out.println(getOpTxt(1) + \" Surname cannot contain numbers or special characters\\n\"); return null; } scanner.nextLine(); System.out.print(\"Enter specialisation: \"); String specialisation = scanner.nextLine(); if (!isSpecialisationValid(specialisation)) { System.out.println(getOpTxt(1) + \" Specialisation cannot contain numbers or special characters\\n\"); return null; } System.out.print(\"Enter medical license number: \"); String mediLicense = scanner.next(); if (!isLicenseValid(mediLicense)) { System.out.println(getOpTxt(1) + \" License number cannot contain special characters\\n\"); return null; } else if (isDoctorAlreadyAdded(mediLicense)) { System.out.println(getOpTxt(1) + \" A doctor with the given license number already exists in the system\\n\"); return null; } System.out.print(\"Enter DOB (yyyy-MM-dd): \"); String dob = scanner.next(); if (!isDobValid(dob)) { System.out.println(getOpTxt(1) + \" DOB should not contain letters and should be in the following format 'yyyy-MM-dd'\"); System.out.println(getOpTxt(2) + \" E.g. 1997-08-15\\n\"); return null; } System.out.print(\"Enter mobile number: \"); String mobile = scanner.next(); if (!isMobileValid(mobile)) { System.out.println(getOpTxt(1) + \" Mobile number cannot contain letters or special characters and should be 10 numbers long\\n\"); return null; } Doctor doctor = new Doctor(capitalize(fname), capitalize(sname), LocalDate.parse(dob), mobile, mediLicense, specialisation); doctors.add(doctor); updateDocsTableModel(); System.out.printf(\"%s Dr. %s added successfully%n%n\", getOpTxt(0), doctor.getFullName()); return doctor; } @Override public Doctor deleteDoctor() { System.out.printf(\"%n%s%n\", getColoredTxt(\"[Delete a Doctor]\", \"blue\")); Scanner scanner = new Scanner(System.in); System.out.print(\"Enter medical license no: \"); String medLic = scanner.next(); if (!isLicenseValid(medLic)) { System.out.print(getOpTxt(1) + \" License No. cannot contain special characters\\n\\n\"); return null; } Doctor docToDelete = null; for (Doctor d : doctors) { if (d.getMedicalLicenseNo().equals(medLic)) { docToDelete = d; } } if (docToDelete != null) { doctors.remove(docToDelete); updateDocsTableModel(); System.out.printf(\"%s Dr. %s deleted successfully%n\", getOpTxt(0), docToDelete.getFullName()); String titleTemplate = \"%-12s %-15s %-25s %-12s %-12s %-12s%n\"; String entryTemplate = \"%-12s %-15s %-25s %-12s %-12s %-12s%n\"; System.out.printf(titleTemplate, \"\", \"\", \"\", \"\", \"\", \"\"); System.out.printf(titleTemplate, \"Name\", \"Surname\", \"Specialisation\", \"LicenseNo\", \"DOB\", \"Mobile\"); System.out.printf(titleTemplate, \"\", \"\", \"\", \"\", \"\", \"\"); System.out.printf( entryTemplate, docToDelete.getName(), docToDelete.getSurname(), docToDelete.getSpecialisation(), docToDelete.getMedicalLicenseNo(), docToDelete.getDob(), docToDelete.getMobiNo() ); System.out.printf(\"%s Number of doctors in the centre - %d%n\", getOpTxt(2), doctors.size()); System.out.println(); return docToDelete; } else { System.out.printf(\"%s Doctor not found%n\", getOpTxt(1)); System.out.println(); return null; } } @Override public void printDoctors() { System.out.printf(\"%n%s%n\", getColoredTxt(\"[Print the List of Doctors]\", \"blue\")); System.out.printf(\"%s Number of doctors in the centre - %d%n\", getOpTxt(2), doctors.size()); System.out.println(getColoredTxt(\"Note:\", \"yellow\") + \" Sorted alphabetically by surname\"); ArrayList<Doctor> doctorsClone = (ArrayList<Doctor>) doctors.clone(); Collections.sort(doctorsClone); String titleTemplate = \"%-12s %-15s %-25s %-12s %-12s %-12s%n\"; String entryTemplate = \"%-12s %-15s %-25s %-12s %-12s %-12s%n\"; System.out.printf(titleTemplate, \"\", \"\", \"\", \"\", \"\", \"\"); System.out.printf(titleTemplate, \"Name\", \"Surname\", \"Specialisation\", \"LicenseNo\", \"DOB\", \"Mobile\"); System.out.printf(titleTemplate, \"\", \"\", \"\", \"\", \"\", \"\"); for (Doctor doctor : doctorsClone) { System.out.printf( entryTemplate, doctor.getName(), doctor.getSurname(), doctor.getSpecialisation(), doctor.getMedicalLicenseNo(), doctor.getDob(), doctor.getMobiNo() ); } System.out.println(); } @Override public void saveData() { System.out.printf(\"%n%s%n\", getColoredTxt(\"[Save Data to File]\", \"blue\")); try ( FileOutputStream fos = new FileOutputStream(\"doctors.ser\"); ObjectOutputStream oos = new ObjectOutputStream(fos) ) { oos.writeObject(doctors); System.out.printf(\"%s Data saved successfully to 'doctors.ser' file%n\", getOpTxt(0)); } catch (Exception e) { System.out.printf(\"%s Saving data to file failed%n\", getOpTxt(1)); } System.out.println(); } @Override public void loadData() { try ( FileInputStream fis = new FileInputStream(\"doctors.ser\"); ObjectInputStream ois = new ObjectInputStream(fis) ) { doctors = (ArrayList<Doctor>) ois.readObject(); System.out.println(getOpTxt(0) + \" Data loaded back successfully\\n\"); } catch (FileNotFoundException e) { System.out.println(getOpTxt(2) + \" Could not find the data file to load\\n\"); } catch (Exception e) { System.out.println(getOpTxt(1) + \" Could not load program data\\n\"); } } @Override public void openGUI() { System.out.printf(\"%n%s%n\", getColoredTxt(\"[Open GUI]\", \"blue\")); System.out.println(\"Launching GUI..\"); System.out.println(); FlatArcIJTheme.install(); MainWindow mainWindow = new MainWindow(doctors); mainWindow.setVisible(true); } public int getNoOfDoctors() { return doctors.size(); } public boolean isNameValid(String name) { return name.matches(\"[a-zA-Z]*\"); } public boolean isSpecialisationValid(String spe) { return spe.matches(\"[a-zA-Z ]*\"); } public boolean isDoctorAlreadyAdded(String licence) { boolean added = false; for (Doctor d : doctors) { if (d.getMedicalLicenseNo().equals(licence)) { added = true; break; } } return added; } public boolean isLicenseValid(String license) { return license.matches(\"[a-zA-Z0-9]*\"); } public boolean isDobValid(String dob) { SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\"); sdf.setLenient(false); try { sdf.parse(dob); return true; } catch (ParseException e) { return false; } } public boolean isMobileValid(String mobile) { return mobile.matches(\"[0-9]*\") && mobile.length() == 10; } public void updateDocsTableModel() { MainWindow.DocsTableModel docsTableModel = MainWindow.getDocsTableComp() != null ? (MainWindow.DocsTableModel) MainWindow.getDocsTableComp().getDocsTableModel() : null; if (docsTableModel != null) { docsTableModel.fireTableDataChanged(); } } public void setDoctors(ArrayList<Doctor> doctors) { this.doctors = doctors; } public String getOpTxt(int id) { switch (id) { case 0 -> { return getColoredTxt(\"SUCCESS:\", \"green\"); } case 1 -> { return getColoredTxt(\"ERROR:\", \"red\"); } case 2 -> { return getColoredTxt(\"INFO:\", \"yellow\"); } default -> { return \"\"; } } } public String getColoredTxt(String txt, String color) { String reset = \"\\u001B[0m\"; Map<String, String> colors = new HashMap<String, String>() {{ put(\"red\", \"\\u001B[31m\"); put(\"green\", \"\\u001B[32m\"); put(\"yellow\", \"\\u001B[33m\"); put(\"blue\", \"\\u001B[34m\"); put(\"purple\", \"\\u001B[35m\"); put(\"cyan\", \"\\u001B[36m\"); }}; return colors.get(color) + txt + reset; } public String capitalize(String txt) { return txt.substring(0, 1).toUpperCase() + txt.substring(1); } }"}]}}
{"project_id":214,"chunk_id":0,"content":{"main_file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/gui/FullImageViewerWindow.java","main_file_content":"package com.cj.wscc.gui; import javax.swing.*; import java.awt.*; public class FullImageViewerWindow extends JFrame { public FullImageViewerWindow(Image img) { super(\"Full Image Viewer\"); Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize(); int screenWidth = screenSize.width; int screenHeight = screenSize.height; int width = img.getWidth(null); int height = img.getHeight(null); if (width > screenWidth || height > screenHeight) { double scaleFactor = Math.min((double) screenWidth / width, (double) screenHeight / height); width = (int) (width * scaleFactor / 1.2); height = (int) (height * scaleFactor / 1.2); img = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } setSize(img.getWidth(null), img.getHeight(null)); setLocationRelativeTo(null); setResizable(false); JLabel jLabel = new JLabel(); jLabel.setIcon(new ImageIcon(img)); JScrollPane scrollPane = new JScrollPane(); scrollPane.setViewportView(jLabel); scrollPane.getViewport().setBackground(Color.white); add(scrollPane); } }","dependencies":[]}}
{"project_id":214,"chunk_id":0,"content":{"main_file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/gui/AddConsultationWindow.java","main_file_content":"package com.cj.wscc.gui; import com.cj.wscc.console.Consultation; import com.cj.wscc.console.Doctor; import com.cj.wscc.console.Patient; import com.formdev.flatlaf.ui.FlatRoundBorder; import com.github.lgooddatepicker.components.DatePicker; import javax.crypto.Cipher; import javax.swing.*; import javax.swing.border.CompoundBorder; import javax.swing.border.EmptyBorder; import javax.swing.border.TitledBorder; import javax.swing.event.CaretEvent; import javax.swing.event.CaretListener; import javax.swing.event.DocumentEvent; import javax.swing.event.DocumentListener; import javax.swing.filechooser.FileNameExtensionFilter; import java.awt.*; import java.awt.event.ActionEvent; import java.io.*; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.security.Key; import java.security.NoSuchAlgorithmException; import java.security.spec.InvalidKeySpecException; import java.text.DecimalFormat; import java.time.LocalDate; import java.time.LocalTime; import java.util.*; public class AddConsultationWindow extends JFrame { private final ArrayList<Consultation> consultations; private final MyPatientIdComp patientIdComp; private final DurationCostComp durationCostComp; private final MyTxtFieldComp patientNameComp; private final MyTxtFieldComp patientSurnameComp; private final MyDOBComp patientDobComp; private final MyTxtFieldComp patientMobileComp; private final NotesComp notesComp; private final FileChooserComp fileChooserComp; private final Doctor selectedDoctor; private Patient selectedPatient; private final LocalDate selectedDate; private final LocalTime selectedTime; private final DecimalFormat df = new DecimalFormat(\"0.00\"); public AddConsultationWindow(ArrayList<Consultation> consultations, Doctor selectedDoctor, LocalDate selectedDate, LocalTime selectedTime) { super(\"Book Consultation\"); setSize(900, 700); setLocationRelativeTo(null); setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); this.consultations = consultations; this.selectedDoctor = selectedDoctor; this.selectedDate = selectedDate; this.selectedTime = selectedTime; add(new TopPanelComp(), BorderLayout.NORTH); GridBagLayout gridBagLayout = new GridBagLayout(); gridBagLayout.columnWidths = new int[]{50}; JPanel centerPanel = new JPanel(gridBagLayout); centerPanel.setBorder(new EmptyBorder(5, 5, 5, 5)); centerPanel.setBackground(Color.white); MyTxtFieldComp doctorComp = new MyTxtFieldComp(\"Doctor\"); JTextField docTxtField = (JTextField) doctorComp.getComponents()[0]; docTxtField.setText(\"Dr. \" + selectedDoctor.getFullName()); docTxtField.setEditable(false); docTxtField.setFocusable(false); GridBagConstraints c = new GridBagConstraints(); c.insets = new Insets(5, 5, 5, 5); c.fill = GridBagConstraints.BOTH; c.weighty = 1; c.weightx = 1; c.gridx = 0; c.gridy = 0; centerPanel.add(doctorComp, c); patientIdComp = new MyPatientIdComp(\"Patient ID *\"); c.gridx = 0; c.gridy = 1; centerPanel.add(patientIdComp, c); patientNameComp = new MyTxtFieldComp(\"Patient Name *\"); patientSurnameComp = new MyTxtFieldComp(\"Patient Surname *\"); c.gridx = 0; c.gridy = 2; centerPanel.add(patientNameComp, c); c.gridx = 1; c.gridy = 2; centerPanel.add(patientSurnameComp, c); c.gridx = 0; c.gridy = 3; patientDobComp = new MyDOBComp(); centerPanel.add(patientDobComp, c); c.gridx = 1; c.gridy = 3; patientMobileComp = new MyTxtFieldComp(\"Patient Mobile *\"); centerPanel.add(patientMobileComp, c); c.gridx = 1; c.gridy = 0; JPanel date = new MyTxtFieldComp(\"Date & Time\"); JTextField dateTxtField = (JTextField) date.getComponents()[0]; dateTxtField.setText(selectedDate.toString() + \" \" + selectedTime.toString()); dateTxtField.setEditable(false); dateTxtField.setFocusable(false); centerPanel.add(date, c); c.gridx = 1; c.gridy = 1; durationCostComp = new DurationCostComp(); centerPanel.add(durationCostComp, c); c.gridx = 0; c.gridy = 4; notesComp = new NotesComp(); centerPanel.add(notesComp, c); c.gridx = 1; c.gridy = 4; fileChooserComp = new FileChooserComp(); centerPanel.add(fileChooserComp, c); add(centerPanel, BorderLayout.CENTER); add(new BtnPanelComp(), BorderLayout.SOUTH); } public static class MyTxtFieldComp extends JPanel { private final JTextField txtField; public MyTxtFieldComp(String label) { setLayout(new BorderLayout()); setBackground(Color.white); TitledBorder titledBorder = new TitledBorder(label); titledBorder.setBorder(new FlatRoundBorder()); setBorder(new CompoundBorder( titledBorder, new EmptyBorder(0, 5, 5, 5))); txtField = new JTextField(); txtField.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); add(txtField); } public JTextField getTxtField() { return txtField; } } public class MyPatientIdComp extends JPanel { private final JComboBox comboBox; public MyPatientIdComp(String label) { setLayout(new BorderLayout()); setBackground(Color.white); TitledBorder titledBorder = new TitledBorder(label); titledBorder.setBorder(new FlatRoundBorder()); setBorder(new CompoundBorder( titledBorder, new EmptyBorder(0, 5, 5, 5))); ArrayList<Integer> suggestions = new ArrayList<>(); for (Consultation c : consultations) { if (!suggestions.contains(c.getPatient().getPatientId())) { suggestions.add(c.getPatient().getPatientId()); } } comboBox = new JComboBox(suggestions.toArray()); comboBox.setEditable(true); comboBox.setSelectedItem(null); comboBox.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); JTextField textField = (JTextField) comboBox.getEditor().getEditorComponent(); textField.getDocument().addDocumentListener(new DocumentListener() { @Override public void insertUpdate(DocumentEvent e) { setPatient(textField.getText()); updateCost(); } @Override public void removeUpdate(DocumentEvent e) { setPatient(textField.getText()); updateCost(); } @Override public void changedUpdate(DocumentEvent e) { setPatient(textField.getText()); updateCost(); } }); add(comboBox, BorderLayout.CENTER); } public JComboBox getJComboBox() { return comboBox; } } public static class MyDOBComp extends JPanel { DatePicker datePicker; public MyDOBComp() { setLayout(new BorderLayout()); setBackground(Color.white); TitledBorder titledBorder = new TitledBorder(\"Patient DOB\"); titledBorder.setBorder(new FlatRoundBorder()); setBorder(new CompoundBorder( titledBorder, new EmptyBorder(0, 5, 5, 5))); datePicker = new DatePicker(); datePicker.getComponentDateTextField().setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); add(datePicker); } public DatePicker getDatePicker() { return datePicker; } } public class DurationCostComp extends JPanel { JFormattedTextField durationTxtField; JTextField costTxtField; public DurationCostComp() { setLayout(new BorderLayout(5, 0)); setBackground(Color.white); JPanel durationContainer = new JPanel(new BorderLayout()); durationContainer.setBackground(Color.white); TitledBorder titledBorder = new TitledBorder(\"Duration (h) *\"); titledBorder.setBorder(new FlatRoundBorder()); durationContainer.setBorder(new CompoundBorder( titledBorder, new EmptyBorder(0, 5, 5, 5)) ); durationTxtField = new JFormattedTextField(); durationTxtField.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); durationTxtField.addCaretListener(new CaretListener() { @Override public void caretUpdate(CaretEvent caretEvent) { updateCost(); } }); durationContainer.add(durationTxtField); add(durationContainer, BorderLayout.CENTER); JPanel costContainer = new JPanel(new BorderLayout()); costContainer.setBackground(Color.white); TitledBorder titledBorder2 = new TitledBorder(\"Cost (£)\"); titledBorder2.setBorder(new FlatRoundBorder()); costContainer.setBorder(new CompoundBorder( titledBorder2, new EmptyBorder(0, 5, 5, 5)) ); costTxtField = new JTextField(); costTxtField.setColumns(8); costTxtField.setFocusable(false); costTxtField.setText(\"0.00\"); costTxtField.setEditable(false); costTxtField.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); costContainer.add(costTxtField); add(costContainer, BorderLayout.EAST); } public JTextField getDurationTxtField() { return durationTxtField; } public JTextField getCostTxtField() { return costTxtField; } } public static class NotesComp extends JPanel { private final JTextArea textArea; public NotesComp() { setLayout(new BorderLayout()); setBackground(Color.white); TitledBorder titledBorder = new TitledBorder(\"Notes\"); titledBorder.setBorder(new FlatRoundBorder()); setBorder(new CompoundBorder( titledBorder, new EmptyBorder(0, 5, 5, 5)) ); textArea = new JTextArea(); textArea.setRows(4); textArea.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); add(new JScrollPane(textArea), BorderLayout.CENTER); } public JTextArea getTextArea() { return textArea; } } public static class TopPanelComp extends JPanel { public TopPanelComp() { setLayout(new BorderLayout()); setBackground(new Color(0x3D8361)); setPreferredSize(new Dimension(0, 50)); setForeground(new Color(0xFFFFFF)); setLayout(new BorderLayout()); JLabel topLabel = new JLabel(\"Book Consultation\", SwingConstants.CENTER); topLabel.setFont(new Font(\"SansSerif\", Font.PLAIN, 25)); topLabel.setForeground(new Color(0xFFFFFF)); add(topLabel, BorderLayout.CENTER); } } public static class FileChooserComp extends JPanel { private final JFileChooser fileChooser; private final JTextArea textField; public FileChooserComp() { setLayout(new BorderLayout()); setBackground(Color.white); TitledBorder titledBorder = new TitledBorder(\"Add Images\"); titledBorder.setBorder(new FlatRoundBorder()); setBorder(new CompoundBorder( titledBorder, new EmptyBorder(0, 5, 5, 5)) ); fileChooser = new JFileChooser(); fileChooser.setMultiSelectionEnabled(true); fileChooser.setPreferredSize(new Dimension(1000, 500)); fileChooser.setAcceptAllFileFilterUsed(false); fileChooser.addChoosableFileFilter(new FileNameExtensionFilter(\"Image files\", \"jpg\", \"jpeg\", \"png\", \"gif\")); fileChooser.setDialogTitle(\"Choose image files\"); JButton chooseBtn = new JButton(\"Choose Images\"); textField = new JTextArea(); textField.setRows(3); textField.setEditable(false); textField.setFocusable(false); textField.setFont(new Font(\"SansSerif\", Font.PLAIN, 18)); chooseBtn.addActionListener(e -> { if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) { File[] files = fileChooser.getSelectedFiles(); StringBuilder sb = new StringBuilder(); for (File file : files) { sb.append(file.getName()).append(\"\\n\"); } textField.setText(sb.toString()); } }); add(chooseBtn, BorderLayout.NORTH); add(new JScrollPane(textField), BorderLayout.CENTER); } public JFileChooser getFileChooser() { return fileChooser; } } public class BtnPanelComp extends JPanel { public BtnPanelComp() { FlowLayout flowLayout = new FlowLayout(FlowLayout.RIGHT); flowLayout.setHgap(10); setLayout(flowLayout); setBackground(Color.white); setBorder(new EmptyBorder(0, 0, 5, 5)); JButton saveBtn = new JButton(\"Save\"); saveBtn.setPreferredSize(new Dimension(100, 40)); saveBtn.addActionListener(AddConsultationWindow.this::saveConsultation); add(saveBtn); JButton cancelBtn = new JButton(\"Cancel\"); cancelBtn.setPreferredSize(new Dimension(100, 40)); cancelBtn.addActionListener(AddConsultationWindow.this::closeWindow); add(cancelBtn); } } public void saveConsultation(ActionEvent event) { String idStr = (patientIdComp.getJComboBox().getSelectedItem() == null) ? \"\" : patientIdComp.getJComboBox().getSelectedItem().toString(); String name = patientNameComp.getTxtField().getText(); String surname = patientSurnameComp.getTxtField().getText(); String mobile = patientMobileComp.getTxtField().getText(); String duration = durationCostComp.getDurationTxtField().getText(); LinkedHashMap<String, String> requiredValues = new LinkedHashMap<>() {{ put(\"Patient ID\", idStr); put(\"Duration\", duration); put(\"Patient Name\", name); put(\"Patient Surname\", surname); put(\"Patient Mobile\", mobile); }}; for (Map.Entry<String, String> entry : requiredValues.entrySet()) { if (entry.getValue().isEmpty()) { JOptionPane.showMessageDialog( null, entry.getKey() + \" field cannot be empty\", \"Error\", JOptionPane.ERROR_MESSAGE ); return; } } int id; try { id = Integer.parseInt(idStr); } catch (Exception e) { JOptionPane.showMessageDialog( null, \"Patient ID must be a number\", \"Error\", JOptionPane.ERROR_MESSAGE ); return; } try { Integer.parseInt(mobile); } catch (Exception e) { JOptionPane.showMessageDialog( null, \"Patient mobile number must be a number\", \"Error\", JOptionPane.ERROR_MESSAGE ); return; } try { Integer.parseInt(duration); } catch (Exception e) { JOptionPane.showMessageDialog( null, \"Duration must be a number\", \"Error\", JOptionPane.ERROR_MESSAGE ); return; } Patient patient = new Patient( name, surname, patientDobComp.getDatePicker().getDate(), mobile, id ); final String consId = getRandID(); try { ArrayList<File> files = encryptImgFiles(consId); Consultation consultation = new Consultation( consId, selectedDoctor, patient, selectedDate, selectedTime, Integer.parseInt(duration), Double.parseDouble(durationCostComp.getCostTxtField().getText().replace(\"£\", \"\").trim()), notesComp.getTextArea().getText(), files ); MainWindow.addConsultation(consultation); closeWindow(event); JOptionPane.showMessageDialog( null, \"Consultation saved successfully!\", \"Success\", JOptionPane.INFORMATION_MESSAGE ); } catch (Exception e) { e.printStackTrace(); } } public void setPatient(String patientId) { if (patientId.isEmpty()) { selectedPatient = null; return; } int id; try { id = Integer.parseInt(patientId); } catch (Exception e) { return; } Consultation consultation = consultations.stream() .filter(c -> c.getPatient().getPatientId() == id) .findFirst() .orElse(null); if (consultation != null) { selectedPatient = consultation.getPatient(); patientNameComp.getTxtField().setText(selectedPatient.getName()); patientSurnameComp.getTxtField().setText(selectedPatient.getSurname()); patientDobComp.getDatePicker().setDate(selectedPatient.getDob()); patientMobileComp.getTxtField().setText(selectedPatient.getMobiNo()); } else { selectedPatient = null; patientNameComp.getTxtField().setText(\"\"); patientSurnameComp.getTxtField().setText(\"\"); patientDobComp.getDatePicker().setDate(null); patientMobileComp.getTxtField().setText(\"\"); } } public String getRandID() { UUID uuid = UUID.randomUUID(); return uuid.toString().substring(0, 8); } public ArrayList<File> encryptImgFiles(String consultationId) throws NoSuchAlgorithmException, InvalidKeySpecException { File[] files = fileChooserComp.getFileChooser().getSelectedFiles(); if (files.length == 0) { return null; } final String DEST = \"patient_img\" + \"/\" + consultationId; try { Files.createDirectories(Paths.get(DEST)); } catch (IOException e) { throw new RuntimeException(e); } ArrayList<File> encryptedFiles = new ArrayList<>(); String randFileName; String extension; Path dest; Key KEY = PasswordBasedKeyAES.getKey(); for (File f : files) { randFileName = getRandID(); extension = getFileExtension(f.getName()); dest = Paths.get(DEST, randFileName + extension); try { Cipher cipher = Cipher.getInstance(\"AES\"); cipher.init(Cipher.ENCRYPT_MODE, KEY); FileInputStream inputStream = new FileInputStream(f); File outputFile = new File(dest.toUri()); FileOutputStream outputStream = new FileOutputStream(outputFile); byte[] buffer = new byte[64]; int bytesRead; while ((bytesRead = inputStream.read(buffer)) != -1) { byte[] output = cipher.update(buffer, 0, bytesRead); if (output != null) { outputStream.write(output); } } byte[] outputBytes = cipher.doFinal(); if (outputBytes != null) { outputStream.write(outputBytes); } inputStream.close(); outputStream.close(); encryptedFiles.add(outputFile); } catch (Exception e) { e.printStackTrace(); } } fileChooserComp.getFileChooser().setSelectedFiles(null); return encryptedFiles; } public static String getFileExtension(String fileName) { String extension = \"\"; int index = fileName.lastIndexOf('.'); if (index > 0) { extension = fileName.substring(index + 1); } return \".\" + extension; } public void updateCost() { int hours; int cost; try { hours = !durationCostComp.getDurationTxtField().getText().isEmpty() ? Integer.parseInt(durationCostComp.getDurationTxtField().getText()) : 0; } catch (Exception e) { return; } if (selectedPatient == null) { cost = hours * 15; } else { cost = hours * 25; } durationCostComp.getCostTxtField().setText(df.format(cost)); } public void closeWindow(ActionEvent e) { JButton source = (JButton) e.getSource(); Container topLevelContainer = source.getTopLevelAncestor(); if (topLevelContainer instanceof JFrame) { ((JFrame) topLevelContainer).dispose(); } else if (topLevelContainer instanceof JDialog) { ((JDialog) topLevelContainer).dispose(); } } }","dependencies":[{"file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/console/Consultation.java","file_content":"package com.cj.wscc.console; import java.io.File; import java.io.Serializable; import java.time.LocalDate; import java.time.LocalTime; import java.util.ArrayList; public class Consultation implements Serializable { private String id; private Doctor doctor; private Patient patient; private LocalDate date; private LocalTime time; private int durationHours; private double cost; private String notes; private ArrayList<File> imageFiles; public Consultation(String id, Doctor doctor, Patient patient, LocalDate date, LocalTime time, int duration, double cost, String notes, ArrayList<File> files) { this.id = id; this.doctor = doctor; this.patient = patient; this.date = date; this.time = time; this.durationHours = duration; this.cost = cost; this.notes = notes; this.imageFiles = files; } public String getId() { return id; } public void setId(String id) { this.id = id; } public Doctor getDoctor() { return doctor; } public void setDoctor(Doctor doctor) { this.doctor = doctor; } public Patient getPatient() { return patient; } public void setPatient(Patient patient) { this.patient = patient; } public LocalDate getDate() { return date; } public void setDate(LocalDate date) { this.date = date; } public LocalTime getTime() { return time; } public void setTime(LocalTime time) { this.time = time; } public int getDurationHours() { return durationHours; } public void setDurationHours(int durationHours) { this.durationHours = durationHours; } public double getCost() { return cost; } public void setCost(double cost) { this.cost = cost; } public String getNotes() { return notes; } public void setNotes(String notes) { this.notes = notes; } public ArrayList<File> getImageFiles() { return imageFiles; } public void setImageFiles(ArrayList<File> imageFiles) { this.imageFiles = imageFiles; } }"},{"file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/console/Doctor.java","file_content":"package com.cj.wscc.console; import java.time.LocalDate; import java.util.Objects; public class Doctor extends Person { private String medicalLicenseNo; private String specialisation; public Doctor(String name, String surname, LocalDate DOB, String mobiNo, String medicalLicenseNo, String specialisation) { super(name, surname, DOB, mobiNo); this.medicalLicenseNo = medicalLicenseNo; this.specialisation = specialisation; } public String getMedicalLicenseNo() { return medicalLicenseNo; } public void setMedicalLicenseNo(String medicalLicenseNo) { this.medicalLicenseNo = medicalLicenseNo; } public String getSpecialisation() { return specialisation; } public void setSpecialisation(String specialisation) { this.specialisation = specialisation; } @Override public boolean equals(Object obj) { if (obj == this) { return true; } if (!(obj instanceof Person)) { return false; } Doctor other = (Doctor) obj; return Objects.equals(getFullName(), other.getFullName()) && Objects.equals(getMedicalLicenseNo(), other.getMedicalLicenseNo()); } }"},{"file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/console/Patient.java","file_content":"package com.cj.wscc.console; import java.time.LocalDate; public class Patient extends Person { private int patientId; public Patient(String name, String surname, LocalDate DOB, String mobiNo, int patientId) { super(name, surname, DOB, mobiNo); this.patientId = patientId; } public int getPatientId() { return patientId; } public void setPatientId(int patientId) { this.patientId = patientId; } }"}]}}
{"project_id":214,"chunk_id":1,"content":{"main_file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/gui/AddConsultationWindow.java","main_file_content":"package com.cj.wscc.gui; import com.cj.wscc.console.Consultation; import com.cj.wscc.console.Doctor; import com.cj.wscc.console.Patient; import com.formdev.flatlaf.ui.FlatRoundBorder; import com.github.lgooddatepicker.components.DatePicker; import javax.crypto.Cipher; import javax.swing.*; import javax.swing.border.CompoundBorder; import javax.swing.border.EmptyBorder; import javax.swing.border.TitledBorder; import javax.swing.event.CaretEvent; import javax.swing.event.CaretListener; import javax.swing.event.DocumentEvent; import javax.swing.event.DocumentListener; import javax.swing.filechooser.FileNameExtensionFilter; import java.awt.*; import java.awt.event.ActionEvent; import java.io.*; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.security.Key; import java.security.NoSuchAlgorithmException; import java.security.spec.InvalidKeySpecException; import java.text.DecimalFormat; import java.time.LocalDate; import java.time.LocalTime; import java.util.*; public class AddConsultationWindow extends JFrame { private final ArrayList<Consultation> consultations; private final MyPatientIdComp patientIdComp; private final DurationCostComp durationCostComp; private final MyTxtFieldComp patientNameComp; private final MyTxtFieldComp patientSurnameComp; private final MyDOBComp patientDobComp; private final MyTxtFieldComp patientMobileComp; private final NotesComp notesComp; private final FileChooserComp fileChooserComp; private final Doctor selectedDoctor; private Patient selectedPatient; private final LocalDate selectedDate; private final LocalTime selectedTime; private final DecimalFormat df = new DecimalFormat(\"0.00\"); public AddConsultationWindow(ArrayList<Consultation> consultations, Doctor selectedDoctor, LocalDate selectedDate, LocalTime selectedTime) { super(\"Book Consultation\"); setSize(900, 700); setLocationRelativeTo(null); setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); this.consultations = consultations; this.selectedDoctor = selectedDoctor; this.selectedDate = selectedDate; this.selectedTime = selectedTime; add(new TopPanelComp(), BorderLayout.NORTH); GridBagLayout gridBagLayout = new GridBagLayout(); gridBagLayout.columnWidths = new int[]{50}; JPanel centerPanel = new JPanel(gridBagLayout); centerPanel.setBorder(new EmptyBorder(5, 5, 5, 5)); centerPanel.setBackground(Color.white); MyTxtFieldComp doctorComp = new MyTxtFieldComp(\"Doctor\"); JTextField docTxtField = (JTextField) doctorComp.getComponents()[0]; docTxtField.setText(\"Dr. \" + selectedDoctor.getFullName()); docTxtField.setEditable(false); docTxtField.setFocusable(false); GridBagConstraints c = new GridBagConstraints(); c.insets = new Insets(5, 5, 5, 5); c.fill = GridBagConstraints.BOTH; c.weighty = 1; c.weightx = 1; c.gridx = 0; c.gridy = 0; centerPanel.add(doctorComp, c); patientIdComp = new MyPatientIdComp(\"Patient ID *\"); c.gridx = 0; c.gridy = 1; centerPanel.add(patientIdComp, c); patientNameComp = new MyTxtFieldComp(\"Patient Name *\"); patientSurnameComp = new MyTxtFieldComp(\"Patient Surname *\"); c.gridx = 0; c.gridy = 2; centerPanel.add(patientNameComp, c); c.gridx = 1; c.gridy = 2; centerPanel.add(patientSurnameComp, c); c.gridx = 0; c.gridy = 3; patientDobComp = new MyDOBComp(); centerPanel.add(patientDobComp, c); c.gridx = 1; c.gridy = 3; patientMobileComp = new MyTxtFieldComp(\"Patient Mobile *\"); centerPanel.add(patientMobileComp, c); c.gridx = 1; c.gridy = 0; JPanel date = new MyTxtFieldComp(\"Date & Time\"); JTextField dateTxtField = (JTextField) date.getComponents()[0]; dateTxtField.setText(selectedDate.toString() + \" \" + selectedTime.toString()); dateTxtField.setEditable(false); dateTxtField.setFocusable(false); centerPanel.add(date, c); c.gridx = 1; c.gridy = 1; durationCostComp = new DurationCostComp(); centerPanel.add(durationCostComp, c); c.gridx = 0; c.gridy = 4; notesComp = new NotesComp(); centerPanel.add(notesComp, c); c.gridx = 1; c.gridy = 4; fileChooserComp = new FileChooserComp(); centerPanel.add(fileChooserComp, c); add(centerPanel, BorderLayout.CENTER); add(new BtnPanelComp(), BorderLayout.SOUTH); } public static class MyTxtFieldComp extends JPanel { private final JTextField txtField; public MyTxtFieldComp(String label) { setLayout(new BorderLayout()); setBackground(Color.white); TitledBorder titledBorder = new TitledBorder(label); titledBorder.setBorder(new FlatRoundBorder()); setBorder(new CompoundBorder( titledBorder, new EmptyBorder(0, 5, 5, 5))); txtField = new JTextField(); txtField.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); add(txtField); } public JTextField getTxtField() { return txtField; } } public class MyPatientIdComp extends JPanel { private final JComboBox comboBox; public MyPatientIdComp(String label) { setLayout(new BorderLayout()); setBackground(Color.white); TitledBorder titledBorder = new TitledBorder(label); titledBorder.setBorder(new FlatRoundBorder()); setBorder(new CompoundBorder( titledBorder, new EmptyBorder(0, 5, 5, 5))); ArrayList<Integer> suggestions = new ArrayList<>(); for (Consultation c : consultations) { if (!suggestions.contains(c.getPatient().getPatientId())) { suggestions.add(c.getPatient().getPatientId()); } } comboBox = new JComboBox(suggestions.toArray()); comboBox.setEditable(true); comboBox.setSelectedItem(null); comboBox.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); JTextField textField = (JTextField) comboBox.getEditor().getEditorComponent(); textField.getDocument().addDocumentListener(new DocumentListener() { @Override public void insertUpdate(DocumentEvent e) { setPatient(textField.getText()); updateCost(); } @Override public void removeUpdate(DocumentEvent e) { setPatient(textField.getText()); updateCost(); } @Override public void changedUpdate(DocumentEvent e) { setPatient(textField.getText()); updateCost(); } }); add(comboBox, BorderLayout.CENTER); } public JComboBox getJComboBox() { return comboBox; } } public static class MyDOBComp extends JPanel { DatePicker datePicker; public MyDOBComp() { setLayout(new BorderLayout()); setBackground(Color.white); TitledBorder titledBorder = new TitledBorder(\"Patient DOB\"); titledBorder.setBorder(new FlatRoundBorder()); setBorder(new CompoundBorder( titledBorder, new EmptyBorder(0, 5, 5, 5))); datePicker = new DatePicker(); datePicker.getComponentDateTextField().setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); add(datePicker); } public DatePicker getDatePicker() { return datePicker; } } public class DurationCostComp extends JPanel { JFormattedTextField durationTxtField; JTextField costTxtField; public DurationCostComp() { setLayout(new BorderLayout(5, 0)); setBackground(Color.white); JPanel durationContainer = new JPanel(new BorderLayout()); durationContainer.setBackground(Color.white); TitledBorder titledBorder = new TitledBorder(\"Duration (h) *\"); titledBorder.setBorder(new FlatRoundBorder()); durationContainer.setBorder(new CompoundBorder( titledBorder, new EmptyBorder(0, 5, 5, 5)) ); durationTxtField = new JFormattedTextField(); durationTxtField.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); durationTxtField.addCaretListener(new CaretListener() { @Override public void caretUpdate(CaretEvent caretEvent) { updateCost(); } }); durationContainer.add(durationTxtField); add(durationContainer, BorderLayout.CENTER); JPanel costContainer = new JPanel(new BorderLayout()); costContainer.setBackground(Color.white); TitledBorder titledBorder2 = new TitledBorder(\"Cost (£)\"); titledBorder2.setBorder(new FlatRoundBorder()); costContainer.setBorder(new CompoundBorder( titledBorder2, new EmptyBorder(0, 5, 5, 5)) ); costTxtField = new JTextField(); costTxtField.setColumns(8); costTxtField.setFocusable(false); costTxtField.setText(\"0.00\"); costTxtField.setEditable(false); costTxtField.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); costContainer.add(costTxtField); add(costContainer, BorderLayout.EAST); } public JTextField getDurationTxtField() { return durationTxtField; } public JTextField getCostTxtField() { return costTxtField; } } public static class NotesComp extends JPanel { private final JTextArea textArea; public NotesComp() { setLayout(new BorderLayout()); setBackground(Color.white); TitledBorder titledBorder = new TitledBorder(\"Notes\"); titledBorder.setBorder(new FlatRoundBorder()); setBorder(new CompoundBorder( titledBorder, new EmptyBorder(0, 5, 5, 5)) ); textArea = new JTextArea(); textArea.setRows(4); textArea.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); add(new JScrollPane(textArea), BorderLayout.CENTER); } public JTextArea getTextArea() { return textArea; } } public static class TopPanelComp extends JPanel { public TopPanelComp() { setLayout(new BorderLayout()); setBackground(new Color(0x3D8361)); setPreferredSize(new Dimension(0, 50)); setForeground(new Color(0xFFFFFF)); setLayout(new BorderLayout()); JLabel topLabel = new JLabel(\"Book Consultation\", SwingConstants.CENTER); topLabel.setFont(new Font(\"SansSerif\", Font.PLAIN, 25)); topLabel.setForeground(new Color(0xFFFFFF)); add(topLabel, BorderLayout.CENTER); } } public static class FileChooserComp extends JPanel { private final JFileChooser fileChooser; private final JTextArea textField; public FileChooserComp() { setLayout(new BorderLayout()); setBackground(Color.white); TitledBorder titledBorder = new TitledBorder(\"Add Images\"); titledBorder.setBorder(new FlatRoundBorder()); setBorder(new CompoundBorder( titledBorder, new EmptyBorder(0, 5, 5, 5)) ); fileChooser = new JFileChooser(); fileChooser.setMultiSelectionEnabled(true); fileChooser.setPreferredSize(new Dimension(1000, 500)); fileChooser.setAcceptAllFileFilterUsed(false); fileChooser.addChoosableFileFilter(new FileNameExtensionFilter(\"Image files\", \"jpg\", \"jpeg\", \"png\", \"gif\")); fileChooser.setDialogTitle(\"Choose image files\"); JButton chooseBtn = new JButton(\"Choose Images\"); textField = new JTextArea(); textField.setRows(3); textField.setEditable(false); textField.setFocusable(false); textField.setFont(new Font(\"SansSerif\", Font.PLAIN, 18)); chooseBtn.addActionListener(e -> { if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) { File[] files = fileChooser.getSelectedFiles(); StringBuilder sb = new StringBuilder(); for (File file : files) { sb.append(file.getName()).append(\"\\n\"); } textField.setText(sb.toString()); } }); add(chooseBtn, BorderLayout.NORTH); add(new JScrollPane(textField), BorderLayout.CENTER); } public JFileChooser getFileChooser() { return fileChooser; } } public class BtnPanelComp extends JPanel { public BtnPanelComp() { FlowLayout flowLayout = new FlowLayout(FlowLayout.RIGHT); flowLayout.setHgap(10); setLayout(flowLayout); setBackground(Color.white); setBorder(new EmptyBorder(0, 0, 5, 5)); JButton saveBtn = new JButton(\"Save\"); saveBtn.setPreferredSize(new Dimension(100, 40)); saveBtn.addActionListener(AddConsultationWindow.this::saveConsultation); add(saveBtn); JButton cancelBtn = new JButton(\"Cancel\"); cancelBtn.setPreferredSize(new Dimension(100, 40)); cancelBtn.addActionListener(AddConsultationWindow.this::closeWindow); add(cancelBtn); } } public void saveConsultation(ActionEvent event) { String idStr = (patientIdComp.getJComboBox().getSelectedItem() == null) ? \"\" : patientIdComp.getJComboBox().getSelectedItem().toString(); String name = patientNameComp.getTxtField().getText(); String surname = patientSurnameComp.getTxtField().getText(); String mobile = patientMobileComp.getTxtField().getText(); String duration = durationCostComp.getDurationTxtField().getText(); LinkedHashMap<String, String> requiredValues = new LinkedHashMap<>() {{ put(\"Patient ID\", idStr); put(\"Duration\", duration); put(\"Patient Name\", name); put(\"Patient Surname\", surname); put(\"Patient Mobile\", mobile); }}; for (Map.Entry<String, String> entry : requiredValues.entrySet()) { if (entry.getValue().isEmpty()) { JOptionPane.showMessageDialog( null, entry.getKey() + \" field cannot be empty\", \"Error\", JOptionPane.ERROR_MESSAGE ); return; } } int id; try { id = Integer.parseInt(idStr); } catch (Exception e) { JOptionPane.showMessageDialog( null, \"Patient ID must be a number\", \"Error\", JOptionPane.ERROR_MESSAGE ); return; } try { Integer.parseInt(mobile); } catch (Exception e) { JOptionPane.showMessageDialog( null, \"Patient mobile number must be a number\", \"Error\", JOptionPane.ERROR_MESSAGE ); return; } try { Integer.parseInt(duration); } catch (Exception e) { JOptionPane.showMessageDialog( null, \"Duration must be a number\", \"Error\", JOptionPane.ERROR_MESSAGE ); return; } Patient patient = new Patient( name, surname, patientDobComp.getDatePicker().getDate(), mobile, id ); final String consId = getRandID(); try { ArrayList<File> files = encryptImgFiles(consId); Consultation consultation = new Consultation( consId, selectedDoctor, patient, selectedDate, selectedTime, Integer.parseInt(duration), Double.parseDouble(durationCostComp.getCostTxtField().getText().replace(\"£\", \"\").trim()), notesComp.getTextArea().getText(), files ); MainWindow.addConsultation(consultation); closeWindow(event); JOptionPane.showMessageDialog( null, \"Consultation saved successfully!\", \"Success\", JOptionPane.INFORMATION_MESSAGE ); } catch (Exception e) { e.printStackTrace(); } } public void setPatient(String patientId) { if (patientId.isEmpty()) { selectedPatient = null; return; } int id; try { id = Integer.parseInt(patientId); } catch (Exception e) { return; } Consultation consultation = consultations.stream() .filter(c -> c.getPatient().getPatientId() == id) .findFirst() .orElse(null); if (consultation != null) { selectedPatient = consultation.getPatient(); patientNameComp.getTxtField().setText(selectedPatient.getName()); patientSurnameComp.getTxtField().setText(selectedPatient.getSurname()); patientDobComp.getDatePicker().setDate(selectedPatient.getDob()); patientMobileComp.getTxtField().setText(selectedPatient.getMobiNo()); } else { selectedPatient = null; patientNameComp.getTxtField().setText(\"\"); patientSurnameComp.getTxtField().setText(\"\"); patientDobComp.getDatePicker().setDate(null); patientMobileComp.getTxtField().setText(\"\"); } } public String getRandID() { UUID uuid = UUID.randomUUID(); return uuid.toString().substring(0, 8); } public ArrayList<File> encryptImgFiles(String consultationId) throws NoSuchAlgorithmException, InvalidKeySpecException { File[] files = fileChooserComp.getFileChooser().getSelectedFiles(); if (files.length == 0) { return null; } final String DEST = \"patient_img\" + \"/\" + consultationId; try { Files.createDirectories(Paths.get(DEST)); } catch (IOException e) { throw new RuntimeException(e); } ArrayList<File> encryptedFiles = new ArrayList<>(); String randFileName; String extension; Path dest; Key KEY = PasswordBasedKeyAES.getKey(); for (File f : files) { randFileName = getRandID(); extension = getFileExtension(f.getName()); dest = Paths.get(DEST, randFileName + extension); try { Cipher cipher = Cipher.getInstance(\"AES\"); cipher.init(Cipher.ENCRYPT_MODE, KEY); FileInputStream inputStream = new FileInputStream(f); File outputFile = new File(dest.toUri()); FileOutputStream outputStream = new FileOutputStream(outputFile); byte[] buffer = new byte[64]; int bytesRead; while ((bytesRead = inputStream.read(buffer)) != -1) { byte[] output = cipher.update(buffer, 0, bytesRead); if (output != null) { outputStream.write(output); } } byte[] outputBytes = cipher.doFinal(); if (outputBytes != null) { outputStream.write(outputBytes); } inputStream.close(); outputStream.close(); encryptedFiles.add(outputFile); } catch (Exception e) { e.printStackTrace(); } } fileChooserComp.getFileChooser().setSelectedFiles(null); return encryptedFiles; } public static String getFileExtension(String fileName) { String extension = \"\"; int index = fileName.lastIndexOf('.'); if (index > 0) { extension = fileName.substring(index + 1); } return \".\" + extension; } public void updateCost() { int hours; int cost; try { hours = !durationCostComp.getDurationTxtField().getText().isEmpty() ? Integer.parseInt(durationCostComp.getDurationTxtField().getText()) : 0; } catch (Exception e) { return; } if (selectedPatient == null) { cost = hours * 15; } else { cost = hours * 25; } durationCostComp.getCostTxtField().setText(df.format(cost)); } public void closeWindow(ActionEvent e) { JButton source = (JButton) e.getSource(); Container topLevelContainer = source.getTopLevelAncestor(); if (topLevelContainer instanceof JFrame) { ((JFrame) topLevelContainer).dispose(); } else if (topLevelContainer instanceof JDialog) { ((JDialog) topLevelContainer).dispose(); } } }","dependencies":[{"file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/gui/MainWindow.java","file_content":"package com.cj.wscc.gui; import com.cj.wscc.console.Consultation; import com.cj.wscc.console.Doctor; import com.formdev.flatlaf.ui.FlatRoundBorder; import com.github.lgooddatepicker.components.DateTimePicker; import com.github.lgooddatepicker.components.TimePickerSettings; import com.github.lgooddatepicker.optionalusertools.PickerUtilities; import com.github.lgooddatepicker.optionalusertools.TimeVetoPolicy; import javax.crypto.Cipher; import javax.swing.*; import javax.swing.border.CompoundBorder; import javax.swing.border.EmptyBorder; import javax.swing.border.TitledBorder; import javax.swing.table.AbstractTableModel; import javax.swing.table.TableRowSorter; import java.awt.*; import java.awt.event.ActionEvent; import java.awt.event.FocusAdapter; import java.awt.event.FocusEvent; import java.io.*; import java.nio.file.Files; import java.nio.file.Paths; import java.security.Key; import java.text.DecimalFormat; import java.time.LocalDate; import java.time.LocalDateTime; import java.time.LocalTime; import java.util.ArrayList; import java.util.Random; import java.util.stream.Collectors; public class MainWindow extends JFrame { private final ArrayList<Doctor> doctors; private static ArrayList<Consultation> consultations = new ArrayList<>(); private static DocsTableComp docsTableComp; private static ConsTableComp consTableComp; private Doctor selectedDoctor; private static Consultation selectedConsultation; private LocalDate selectedDate; private LocalTime selectedTime; public MainWindow(ArrayList<Doctor> doctors) { super(\"Westminster Skill Consultation Centre\"); setSize(1280, 720); setLocationRelativeTo(null); setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); setLayout(new BorderLayout()); this.doctors = doctors; loadConsultations(); add(new TopPanelComp(), BorderLayout.NORTH); add(new LeftPanelComp(), BorderLayout.WEST); RightPanelComp rightPanelComp = new RightPanelComp(); docsTableComp = new DocsTableComp(); rightPanelComp.add(docsTableComp); consTableComp = new ConsTableComp(consultations); rightPanelComp.add(consTableComp, 1); add(rightPanelComp); CopyrightComp copyrightComp = new CopyrightComp(); add(copyrightComp, BorderLayout.SOUTH); } public void handleBtnClick(ActionEvent e) { JButton btn = (JButton) e.getSource(); switch (btn.getText()) { case \"Check Availability\" -> checkAvailability(); case \"Book Consultation\" -> bookConsultation(); case \"View Consultation\" -> viewConsultation(); case \"Edit Consultation\" -> editConsultation(); case \"Remove Consultation\" -> removeConsultation(); } } public void checkAvailability() { if (selectedDoctor == null) { JOptionPane.showMessageDialog( null, \"Please select a doctor from the Doctors table first\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else if (selectedDate == null || selectedTime == null) { JOptionPane.showMessageDialog( null, \"Please select a date and time\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { if (isDoctorAvailable(null)) { JOptionPane.showMessageDialog( null, \"Doctor is available at the selected time\", \"Info\", JOptionPane.INFORMATION_MESSAGE ); } else { JOptionPane.showMessageDialog( null, \"Unfortunately, the doctor is unavailable at the chosen time\", \"Error\", JOptionPane.ERROR_MESSAGE ); } } } public boolean isDoctorAvailable(Doctor doctor) { if (doctor == null) { doctor = selectedDoctor; } Doctor finalDoctor = doctor; ArrayList<Consultation> filteredConsultations = consultations.stream() .filter(c -> c.getDoctor().getMedicalLicenseNo().equalsIgnoreCase(finalDoctor.getMedicalLicenseNo())) .collect(Collectors.toCollection(ArrayList::new)); LocalDate date; LocalTime time; LocalDateTime startDateTime; LocalDateTime endDateTime; LocalDateTime selectedDateTime = selectedDate.atTime(selectedTime); boolean isAvailable = true; for (Consultation c : filteredConsultations) { date = c.getDate(); time = c.getTime(); startDateTime = date.atTime(time); endDateTime = startDateTime.plusHours(c.getDurationHours()); if (selectedDateTime.equals(startDateTime)) { isAvailable = false; } else if (selectedDateTime.isAfter(startDateTime) && selectedDateTime.isBefore(endDateTime)) { isAvailable = false; } } return isAvailable; } public Doctor getRandomAvailableDoctor() { ArrayList<Doctor> availableDoctors = new ArrayList<>(); ArrayList<Doctor> doctorsWithConsultations = new ArrayList<>(); for (Consultation c : consultations) { if (!doctorsWithConsultations.contains(c.getDoctor())) { doctorsWithConsultations.add(c.getDoctor()); } } for (Doctor d : doctorsWithConsultations) { if (isDoctorAvailable(d)) { availableDoctors.add(d); } } for (Doctor d : doctors) { if (!doctorsWithConsultations.contains(d)) { availableDoctors.add(d); } } ArrayList<Doctor> availableDoctorsSameSpeciality = new ArrayList<>(); availableDoctors.forEach(d -> { if (d.getSpecialisation().equalsIgnoreCase(selectedDoctor.getSpecialisation())) { availableDoctorsSameSpeciality.add(d); } }); if (availableDoctorsSameSpeciality.size() > 0) { Random rand = new Random(); int bound = availableDoctorsSameSpeciality.size(); int randIndex = rand.nextInt(bound); return availableDoctorsSameSpeciality.get(randIndex); } Random rand = new Random(); int bound = availableDoctors.size(); if (bound > 0) { int randIndex = rand.nextInt(bound); return availableDoctors.get(randIndex); } else { return null; } } public void viewConsultation() { if (selectedConsultation == null) { JOptionPane.showMessageDialog( null, \"Please select a consultation from the table to view\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { ViewConsultationWindow viewConsultationWindow = new ViewConsultationWindow(selectedConsultation); viewConsultationWindow.setVisible(true); } } public void bookConsultation() { if (selectedDoctor == null) { JOptionPane.showMessageDialog( null, \"Please select a doctor from the Doctors table first\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else if (selectedDate == null || selectedTime == null) { JOptionPane.showMessageDialog( null, \"Please select a date and time\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else if (!isDoctorAvailable(null)) { Doctor randomAvailableDoctor = getRandomAvailableDoctor(); if (randomAvailableDoctor == null) { JOptionPane.showMessageDialog( null, \"No doctors are available at the selected time\\nPlease choose another time.\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { String msg = String.format( \"<b>Dr. %s</b> is <span style=\\\"color:red\\\"><b>not available</b></span> at the selected time.<br>\" + \"However <b>Dr. %s</b> is available at the selected time.<br>\" + \"Book consultation with <b>Dr. %s</b>?\", selectedDoctor.getFullName(), randomAvailableDoctor.getFullName(), randomAvailableDoctor.getFullName() ); JEditorPane editorPane = new JEditorPane(); editorPane.setContentType(\"text/html\"); editorPane.setText(msg); JOptionPane jOptionPane = new JOptionPane(); editorPane.setBackground(jOptionPane.getBackground()); int result = JOptionPane.showConfirmDialog( null, editorPane, \"Confirm\", JOptionPane.OK_CANCEL_OPTION ); if (result == JOptionPane.OK_OPTION) { AddConsultationWindow consWindow = new AddConsultationWindow(consultations, randomAvailableDoctor, selectedDate, selectedTime); consWindow.setVisible(true); consWindow.toFront(); } } } else { AddConsultationWindow consWindow = new AddConsultationWindow(consultations, selectedDoctor, selectedDate, selectedTime); consWindow.setVisible(true); consWindow.toFront(); } } public void editConsultation() { if (selectedConsultation == null) { JOptionPane.showMessageDialog( null, \"Please select a consultation from the table to edit\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { EditConsultationWindow editConsultationWindow = new EditConsultationWindow(consultations, selectedConsultation); editConsultationWindow.setVisible(true); } } public static void addConsultation(Consultation consultation) { consultations.add(consultation); saveConsultations(); updateConsTableModel(); } public void removeConsultation() { if (selectedConsultation == null) { JOptionPane.showMessageDialog( null, \"Please select a consultation from the table to remove\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { int result = JOptionPane.showConfirmDialog( null, String.format(\"Are you sure you want to remove consultation %s?\", selectedConsultation.getId()), \"Confirm\", JOptionPane.YES_NO_OPTION ); if (result == JOptionPane.YES_OPTION) { consultations.remove(selectedConsultation); removeConsultationImgFiles(null); selectedConsultation = null; saveConsultations(); updateConsTableModel(); JOptionPane.showMessageDialog( null, \"Consultation removed successfully.\", \"Info\", JOptionPane.INFORMATION_MESSAGE ); } } } public static void removeConsultationImgFiles(Consultation consultation) { if (consultation == null) { consultation = selectedConsultation; } if (consultation.getImageFiles() == null) { return; } final File parentDir = consultation.getImageFiles().get(0).getParentFile(); consultation.getImageFiles().forEach(f -> { if (f.exists()) { try { Files.delete(Paths.get(f.getAbsolutePath())); } catch (IOException e) { throw new RuntimeException(e); } } }); if (parentDir.exists()) { parentDir.delete(); } } public static void loadConsultations() { try { FileInputStream fis = new FileInputStream(\"consultations.bin\"); byte[] encryptedBytes = new byte[fis.available()]; fis.read(encryptedBytes); fis.close(); Key KEY = PasswordBasedKeyAES.getKey(); Cipher cipher = Cipher.getInstance(\"AES\"); cipher.init(Cipher.DECRYPT_MODE, KEY); byte[] decryptedBytes = cipher.doFinal(encryptedBytes); ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(decryptedBytes)); consultations = (ArrayList<Consultation>) ois.readObject(); ois.close(); } catch (Exception ignored) { } } public static void saveConsultations() { try { ByteArrayOutputStream baos = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(baos); oos.writeObject(consultations); oos.close(); byte[] serializedBytes = baos.toByteArray(); Key KEY = PasswordBasedKeyAES.getKey(); Cipher cipher = Cipher.getInstance(\"AES\"); cipher.init(Cipher.ENCRYPT_MODE, KEY); byte[] encryptedBytes = cipher.doFinal(serializedBytes); FileOutputStream fos = new FileOutputStream(\"consultations.bin\"); fos.write(encryptedBytes); fos.close(); } catch (Exception ignored) { } } public static void updateConsTableModel() { consTableComp.getConsTableModel().fireTableDataChanged(); } public static DocsTableComp getDocsTableComp() { return docsTableComp; } public class TopPanelComp extends JPanel { public TopPanelComp() { setBackground(new Color(0x3F4E4F)); setPreferredSize(new Dimension(0, 70)); setForeground(new Color(0xFFFFFF)); setLayout(new BorderLayout()); JLabel topLabel = new JLabel(\"Westminster Skin Consultation Centre\", SwingConstants.CENTER); topLabel.setFont(new Font(\"SansSerif\", Font.PLAIN, 30)); topLabel.setForeground(new Color(0xFFFFFF)); add(topLabel, BorderLayout.CENTER); } } public class LeftPanelComp extends JPanel { public LeftPanelComp() { setLayout(new GridLayout(2, 1, 0, 10)); setBorder(new EmptyBorder(15, 10, 10, 10)); setBackground(Color.white); JPanel innerTopPanel = new JPanel(new GridLayout(3, 1, 0, 20)); innerTopPanel.setBorder(new CompoundBorder( new FlatRoundBorder(), new EmptyBorder(10, 10, 10, 10)) ); innerTopPanel.setBackground(Color.white); DateTimePickerComp dateTimePickerComp = new DateTimePickerComp(); innerTopPanel.add(dateTimePickerComp); MainBtnComp checkAvailabilityBtn = new MainBtnComp(\"Check Availability\"); checkAvailabilityBtn.addActionListener(MainWindow.this::handleBtnClick); innerTopPanel.add(checkAvailabilityBtn); MainBtnComp bookConsultationBtn = new MainBtnComp(\"Book Consultation\"); bookConsultationBtn.addActionListener(MainWindow.this::handleBtnClick); innerTopPanel.add(bookConsultationBtn); add(innerTopPanel); JPanel innerBottomPanel = new JPanel(new GridLayout(3, 1, 0, 20)); innerBottomPanel.setBorder(new CompoundBorder( new FlatRoundBorder(), new EmptyBorder(10, 10, 10, 10)) ); innerBottomPanel.setBackground(Color.white); MainBtnComp viewConsultationBtn = new MainBtnComp(\"View Consultation\"); viewConsultationBtn.addActionListener(MainWindow.this::handleBtnClick); innerBottomPanel.add(viewConsultationBtn); MainBtnComp editConsultationBtn = new MainBtnComp(\"Edit Consultation\"); editConsultationBtn.addActionListener(MainWindow.this::handleBtnClick); innerBottomPanel.add(editConsultationBtn); MainBtnComp removeConsultation = new MainBtnComp(\"Remove Consultation\"); removeConsultation.addActionListener(MainWindow.this::handleBtnClick); innerBottomPanel.add(removeConsultation); add(innerBottomPanel); } } public class DateTimePickerComp extends JPanel { public DateTimePickerComp() { setLayout(new BorderLayout()); setBackground(Color.white); DateTimePicker dateTimePicker = new DateTimePicker(); dateTimePicker.setBackground(Color.white); TimePickerSettings timeSettings = dateTimePicker.timePicker.getSettings(); timeSettings.setVetoPolicy(new SampleTimeVetoPolicy()); dateTimePicker.datePicker.setDateToToday(); selectedDate = dateTimePicker.getDatePicker().getDate(); dateTimePicker.timePicker.setTimeToNow(); selectedTime = dateTimePicker.getTimePicker().getTime(); int width = 24; int height = 24; ImageIcon oriCalIcon = new ImageIcon(\"resources/calendar_icon.png\"); Image caledarIcon = oriCalIcon.getImage().getScaledInstance(width, height, Image.SCALE_SMOOTH); JButton datePickerBtn = dateTimePicker.getDatePicker().getComponentToggleCalendarButton(); datePickerBtn.setPreferredSize(new Dimension(40, datePickerBtn.getPreferredSize().height)); datePickerBtn.setText(\"\"); datePickerBtn.setIcon(new ImageIcon(caledarIcon)); ImageIcon oriClockIcon = new ImageIcon(\"resources/clock_icon.png\"); Image clockIcon = oriClockIcon.getImage().getScaledInstance(width, height, Image.SCALE_SMOOTH); JButton timePickerBtn = dateTimePicker.getTimePicker().getComponentToggleTimeMenuButton(); timePickerBtn.setPreferredSize(new Dimension(40, timePickerBtn.getPreferredSize().height)); timePickerBtn.setText(\"\"); timePickerBtn.setIcon(new ImageIcon(clockIcon)); dateTimePicker.getDatePicker().addDateChangeListener(dateChangeEvent -> selectedDate = dateTimePicker.datePicker.getDate()); dateTimePicker.getTimePicker().addTimeChangeListener(timeChangeEvent -> selectedTime = dateTimePicker.timePicker.getTime()); add(dateTimePicker, BorderLayout.CENTER); } } public class MyTableComp extends JTable { public MyTableComp(AbstractTableModel tableModel, TableRowSorter rowSorter) { super(tableModel); setRowSorter(rowSorter); setFont(new Font(\"SansSerif\", Font.PLAIN, 17)); getTableHeader().setReorderingAllowed(false); getTableHeader().setFont(new Font(\"SansSerif\", Font.BOLD, 17)); setRowHeight(30); setSelectionMode(ListSelectionModel.SINGLE_SELECTION); } } public class DocsTableComp extends JPanel { private final MyTableComp myTableComp; private final DocsTableModel docsTableModel; public DocsTableComp() { setLayout(new BorderLayout(0, 5)); setBackground(new Color(0xFFFFFF)); TitledBorder titledBorder = new TitledBorder(\"Doctors\"); titledBorder.setBorder(new FlatRoundBorder()); titledBorder.setTitleFont(new Font(\"SansSerif\", Font.BOLD, 15)); setBorder(new CompoundBorder(titledBorder, new EmptyBorder(10, 10, 10, 10))); docsTableModel = new DocsTableModel(); myTableComp = new MyTableComp(docsTableModel, new TableRowSorter<>(docsTableModel)); myTableComp.getColumnModel().getColumn(2).setPreferredWidth(160); myTableComp.addFocusListener(new FocusAdapter() { @Override public void focusGained(FocusEvent e) { consTableComp.getTable().clearSelection(); selectedConsultation = null; } }); myTableComp.getSelectionModel().addListSelectionListener(listSelectionEvent -> { int row = myTableComp.getSelectedRow(); if (!listSelectionEvent.getValueIsAdjusting() && row >= 0) { String docLicense = (String) myTableComp.getValueAt(row, 3); selectedDoctor = doctors.stream() .filter(d -> d.getMedicalLicenseNo().equalsIgnoreCase(docLicense)) .findFirst() .orElse(null); } }); add(new JScrollPane(myTableComp), BorderLayout.CENTER); } public JTable getTable() { return myTableComp; } public AbstractTableModel getDocsTableModel() { return docsTableModel; } } public class ConsTableComp extends JPanel { private final MyTableComp myTableComp; private final ConsTableModel consTableModel; public ConsTableComp(ArrayList<Consultation> consultations) { setLayout(new BorderLayout(0, 5)); setBackground(new Color(0xFFFFFF)); TitledBorder titledBorder = new TitledBorder(\"Consultations\"); titledBorder.setBorder(new FlatRoundBorder()); titledBorder.setTitleFont(new Font(\"SansSerif\", Font.BOLD, 15)); setBorder(new CompoundBorder(titledBorder, new EmptyBorder(10, 10, 10, 10))); consTableModel = new ConsTableModel(consultations); myTableComp = new MyTableComp(consTableModel, new TableRowSorter<>(consTableModel)); myTableComp.addFocusListener(new FocusAdapter() { @Override public void focusGained(FocusEvent e) { docsTableComp.getTable().clearSelection(); selectedDoctor = null; } }); myTableComp.getSelectionModel().addListSelectionListener(listSelectionEvent -> { int row = myTableComp.getSelectedRow(); if (!listSelectionEvent.getValueIsAdjusting() && row >= 0) { String consId = (String) myTableComp.getValueAt(row, 0); selectedConsultation = consultations.stream() .filter(d -> d.getId().equalsIgnoreCase(consId)) .findFirst() .orElse(null); } }); add(new JScrollPane(myTableComp), BorderLayout.CENTER); } public JTable getTable() { return myTableComp; } public AbstractTableModel getConsTableModel() { return consTableModel; } } public class RightPanelComp extends JPanel { public RightPanelComp() { setLayout(new GridLayout(2, 1, 0, 15)); setPreferredSize(new Dimension(1000, 0)); setBorder(new EmptyBorder(10, 10, 10, 10)); setBackground(Color.white); } } public class MainBtnComp extends JButton { public MainBtnComp(String txt) { super(txt); setFont(new Font(\"SansSerif\", Font.BOLD, 16)); setFocusable(false); setFocusPainted(false); setBackground(new Color(0xDCD7C9)); setForeground(Color.black); } } public class CopyrightComp extends JPanel { public CopyrightComp() { setLayout(new BorderLayout()); setBorder(new EmptyBorder(0, 0, 10, 10)); setBackground(Color.white); JLabel jLabel = new JLabel(\"Copyright © 2023 Chamath Jayasena. All rights reserved.\"); jLabel.setFont(new Font(\"SansSerif\", Font.BOLD, 14)); jLabel.setEnabled(false); add(jLabel, BorderLayout.EAST); } } public class DocsTableModel extends AbstractTableModel { String[] colNames; Class[] colClasses; public DocsTableModel() { colNames = new String[]{ \"First Name\", \"Surname\", \"Specialisation\", \"License\", \"DOB\", \"Mobile\" }; colClasses = new Class[]{ String.class, String.class, String.class, String.class, LocalDate.class, String.class }; } @Override public int getRowCount() { return doctors.size(); } @Override public int getColumnCount() { return colNames.length; } @Override public Object getValueAt(int row, int col) { switch (col) { case 0 -> { return doctors.get(row).getName(); } case 1 -> { return doctors.get(row).getSurname(); } case 2 -> { return doctors.get(row).getSpecialisation(); } case 3 -> { return doctors.get(row).getMedicalLicenseNo(); } case 4 -> { return doctors.get(row).getDob(); } case 5 -> { return doctors.get(row).getMobiNo(); } default -> { return null; } } } public String getColumnName(int col) { return colNames[col]; } public Class getColumnClass(int col) { return colClasses[col]; } } public class ConsTableModel extends AbstractTableModel { private final ArrayList<Consultation> consultations; private final String[] colNames; private final Class[] colClasses; public ConsTableModel(ArrayList<Consultation> data) { this.consultations = data; colNames = new String[]{ \"ID\", \"Patient ID\", \"Patient\", \"Doctor\", \"Date\", \"Time\", \"Duration (h)\", \"Cost (£)\" }; colClasses = new Class[]{ String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class }; } @Override public int getRowCount() { return consultations.size(); } @Override public int getColumnCount() { return colNames.length; } @Override public Object getValueAt(int row, int col) { DecimalFormat df = new DecimalFormat(\"0.00\"); switch (col) { case 0 -> { return consultations.get(row).getId(); } case 1 -> { return consultations.get(row).getPatient().getPatientId(); } case 2 -> { return consultations.get(row).getPatient().getFullName(); } case 3 -> { return consultations.get(row).getDoctor().getFullName(); } case 4 -> { return consultations.get(row).getDate().toString(); } case 5 -> { return consultations.get(row).getTime().toString(); } case 6 -> { return consultations.get(row).getDurationHours() + \"\"; } case 7 -> { return df.format(consultations.get(row).getCost()); } default -> { return null; } } } public String getColumnName(int col) { return colNames[col]; } public Class getColumnClass(int col) { return colClasses[col]; } } private static class SampleTimeVetoPolicy implements TimeVetoPolicy { @Override public boolean isTimeAllowed(LocalTime time) { return PickerUtilities.isLocalTimeInRange( time, LocalTime.of(8, 00), LocalTime.of(17, 00), true); } } }"}]}}
{"project_id":214,"chunk_id":2,"content":{"main_file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/gui/AddConsultationWindow.java","main_file_content":"package com.cj.wscc.gui; import com.cj.wscc.console.Consultation; import com.cj.wscc.console.Doctor; import com.cj.wscc.console.Patient; import com.formdev.flatlaf.ui.FlatRoundBorder; import com.github.lgooddatepicker.components.DatePicker; import javax.crypto.Cipher; import javax.swing.*; import javax.swing.border.CompoundBorder; import javax.swing.border.EmptyBorder; import javax.swing.border.TitledBorder; import javax.swing.event.CaretEvent; import javax.swing.event.CaretListener; import javax.swing.event.DocumentEvent; import javax.swing.event.DocumentListener; import javax.swing.filechooser.FileNameExtensionFilter; import java.awt.*; import java.awt.event.ActionEvent; import java.io.*; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.security.Key; import java.security.NoSuchAlgorithmException; import java.security.spec.InvalidKeySpecException; import java.text.DecimalFormat; import java.time.LocalDate; import java.time.LocalTime; import java.util.*; public class AddConsultationWindow extends JFrame { private final ArrayList<Consultation> consultations; private final MyPatientIdComp patientIdComp; private final DurationCostComp durationCostComp; private final MyTxtFieldComp patientNameComp; private final MyTxtFieldComp patientSurnameComp; private final MyDOBComp patientDobComp; private final MyTxtFieldComp patientMobileComp; private final NotesComp notesComp; private final FileChooserComp fileChooserComp; private final Doctor selectedDoctor; private Patient selectedPatient; private final LocalDate selectedDate; private final LocalTime selectedTime; private final DecimalFormat df = new DecimalFormat(\"0.00\"); public AddConsultationWindow(ArrayList<Consultation> consultations, Doctor selectedDoctor, LocalDate selectedDate, LocalTime selectedTime) { super(\"Book Consultation\"); setSize(900, 700); setLocationRelativeTo(null); setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); this.consultations = consultations; this.selectedDoctor = selectedDoctor; this.selectedDate = selectedDate; this.selectedTime = selectedTime; add(new TopPanelComp(), BorderLayout.NORTH); GridBagLayout gridBagLayout = new GridBagLayout(); gridBagLayout.columnWidths = new int[]{50}; JPanel centerPanel = new JPanel(gridBagLayout); centerPanel.setBorder(new EmptyBorder(5, 5, 5, 5)); centerPanel.setBackground(Color.white); MyTxtFieldComp doctorComp = new MyTxtFieldComp(\"Doctor\"); JTextField docTxtField = (JTextField) doctorComp.getComponents()[0]; docTxtField.setText(\"Dr. \" + selectedDoctor.getFullName()); docTxtField.setEditable(false); docTxtField.setFocusable(false); GridBagConstraints c = new GridBagConstraints(); c.insets = new Insets(5, 5, 5, 5); c.fill = GridBagConstraints.BOTH; c.weighty = 1; c.weightx = 1; c.gridx = 0; c.gridy = 0; centerPanel.add(doctorComp, c); patientIdComp = new MyPatientIdComp(\"Patient ID *\"); c.gridx = 0; c.gridy = 1; centerPanel.add(patientIdComp, c); patientNameComp = new MyTxtFieldComp(\"Patient Name *\"); patientSurnameComp = new MyTxtFieldComp(\"Patient Surname *\"); c.gridx = 0; c.gridy = 2; centerPanel.add(patientNameComp, c); c.gridx = 1; c.gridy = 2; centerPanel.add(patientSurnameComp, c); c.gridx = 0; c.gridy = 3; patientDobComp = new MyDOBComp(); centerPanel.add(patientDobComp, c); c.gridx = 1; c.gridy = 3; patientMobileComp = new MyTxtFieldComp(\"Patient Mobile *\"); centerPanel.add(patientMobileComp, c); c.gridx = 1; c.gridy = 0; JPanel date = new MyTxtFieldComp(\"Date & Time\"); JTextField dateTxtField = (JTextField) date.getComponents()[0]; dateTxtField.setText(selectedDate.toString() + \" \" + selectedTime.toString()); dateTxtField.setEditable(false); dateTxtField.setFocusable(false); centerPanel.add(date, c); c.gridx = 1; c.gridy = 1; durationCostComp = new DurationCostComp(); centerPanel.add(durationCostComp, c); c.gridx = 0; c.gridy = 4; notesComp = new NotesComp(); centerPanel.add(notesComp, c); c.gridx = 1; c.gridy = 4; fileChooserComp = new FileChooserComp(); centerPanel.add(fileChooserComp, c); add(centerPanel, BorderLayout.CENTER); add(new BtnPanelComp(), BorderLayout.SOUTH); } public static class MyTxtFieldComp extends JPanel { private final JTextField txtField; public MyTxtFieldComp(String label) { setLayout(new BorderLayout()); setBackground(Color.white); TitledBorder titledBorder = new TitledBorder(label); titledBorder.setBorder(new FlatRoundBorder()); setBorder(new CompoundBorder( titledBorder, new EmptyBorder(0, 5, 5, 5))); txtField = new JTextField(); txtField.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); add(txtField); } public JTextField getTxtField() { return txtField; } } public class MyPatientIdComp extends JPanel { private final JComboBox comboBox; public MyPatientIdComp(String label) { setLayout(new BorderLayout()); setBackground(Color.white); TitledBorder titledBorder = new TitledBorder(label); titledBorder.setBorder(new FlatRoundBorder()); setBorder(new CompoundBorder( titledBorder, new EmptyBorder(0, 5, 5, 5))); ArrayList<Integer> suggestions = new ArrayList<>(); for (Consultation c : consultations) { if (!suggestions.contains(c.getPatient().getPatientId())) { suggestions.add(c.getPatient().getPatientId()); } } comboBox = new JComboBox(suggestions.toArray()); comboBox.setEditable(true); comboBox.setSelectedItem(null); comboBox.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); JTextField textField = (JTextField) comboBox.getEditor().getEditorComponent(); textField.getDocument().addDocumentListener(new DocumentListener() { @Override public void insertUpdate(DocumentEvent e) { setPatient(textField.getText()); updateCost(); } @Override public void removeUpdate(DocumentEvent e) { setPatient(textField.getText()); updateCost(); } @Override public void changedUpdate(DocumentEvent e) { setPatient(textField.getText()); updateCost(); } }); add(comboBox, BorderLayout.CENTER); } public JComboBox getJComboBox() { return comboBox; } } public static class MyDOBComp extends JPanel { DatePicker datePicker; public MyDOBComp() { setLayout(new BorderLayout()); setBackground(Color.white); TitledBorder titledBorder = new TitledBorder(\"Patient DOB\"); titledBorder.setBorder(new FlatRoundBorder()); setBorder(new CompoundBorder( titledBorder, new EmptyBorder(0, 5, 5, 5))); datePicker = new DatePicker(); datePicker.getComponentDateTextField().setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); add(datePicker); } public DatePicker getDatePicker() { return datePicker; } } public class DurationCostComp extends JPanel { JFormattedTextField durationTxtField; JTextField costTxtField; public DurationCostComp() { setLayout(new BorderLayout(5, 0)); setBackground(Color.white); JPanel durationContainer = new JPanel(new BorderLayout()); durationContainer.setBackground(Color.white); TitledBorder titledBorder = new TitledBorder(\"Duration (h) *\"); titledBorder.setBorder(new FlatRoundBorder()); durationContainer.setBorder(new CompoundBorder( titledBorder, new EmptyBorder(0, 5, 5, 5)) ); durationTxtField = new JFormattedTextField(); durationTxtField.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); durationTxtField.addCaretListener(new CaretListener() { @Override public void caretUpdate(CaretEvent caretEvent) { updateCost(); } }); durationContainer.add(durationTxtField); add(durationContainer, BorderLayout.CENTER); JPanel costContainer = new JPanel(new BorderLayout()); costContainer.setBackground(Color.white); TitledBorder titledBorder2 = new TitledBorder(\"Cost (£)\"); titledBorder2.setBorder(new FlatRoundBorder()); costContainer.setBorder(new CompoundBorder( titledBorder2, new EmptyBorder(0, 5, 5, 5)) ); costTxtField = new JTextField(); costTxtField.setColumns(8); costTxtField.setFocusable(false); costTxtField.setText(\"0.00\"); costTxtField.setEditable(false); costTxtField.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); costContainer.add(costTxtField); add(costContainer, BorderLayout.EAST); } public JTextField getDurationTxtField() { return durationTxtField; } public JTextField getCostTxtField() { return costTxtField; } } public static class NotesComp extends JPanel { private final JTextArea textArea; public NotesComp() { setLayout(new BorderLayout()); setBackground(Color.white); TitledBorder titledBorder = new TitledBorder(\"Notes\"); titledBorder.setBorder(new FlatRoundBorder()); setBorder(new CompoundBorder( titledBorder, new EmptyBorder(0, 5, 5, 5)) ); textArea = new JTextArea(); textArea.setRows(4); textArea.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); add(new JScrollPane(textArea), BorderLayout.CENTER); } public JTextArea getTextArea() { return textArea; } } public static class TopPanelComp extends JPanel { public TopPanelComp() { setLayout(new BorderLayout()); setBackground(new Color(0x3D8361)); setPreferredSize(new Dimension(0, 50)); setForeground(new Color(0xFFFFFF)); setLayout(new BorderLayout()); JLabel topLabel = new JLabel(\"Book Consultation\", SwingConstants.CENTER); topLabel.setFont(new Font(\"SansSerif\", Font.PLAIN, 25)); topLabel.setForeground(new Color(0xFFFFFF)); add(topLabel, BorderLayout.CENTER); } } public static class FileChooserComp extends JPanel { private final JFileChooser fileChooser; private final JTextArea textField; public FileChooserComp() { setLayout(new BorderLayout()); setBackground(Color.white); TitledBorder titledBorder = new TitledBorder(\"Add Images\"); titledBorder.setBorder(new FlatRoundBorder()); setBorder(new CompoundBorder( titledBorder, new EmptyBorder(0, 5, 5, 5)) ); fileChooser = new JFileChooser(); fileChooser.setMultiSelectionEnabled(true); fileChooser.setPreferredSize(new Dimension(1000, 500)); fileChooser.setAcceptAllFileFilterUsed(false); fileChooser.addChoosableFileFilter(new FileNameExtensionFilter(\"Image files\", \"jpg\", \"jpeg\", \"png\", \"gif\")); fileChooser.setDialogTitle(\"Choose image files\"); JButton chooseBtn = new JButton(\"Choose Images\"); textField = new JTextArea(); textField.setRows(3); textField.setEditable(false); textField.setFocusable(false); textField.setFont(new Font(\"SansSerif\", Font.PLAIN, 18)); chooseBtn.addActionListener(e -> { if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) { File[] files = fileChooser.getSelectedFiles(); StringBuilder sb = new StringBuilder(); for (File file : files) { sb.append(file.getName()).append(\"\\n\"); } textField.setText(sb.toString()); } }); add(chooseBtn, BorderLayout.NORTH); add(new JScrollPane(textField), BorderLayout.CENTER); } public JFileChooser getFileChooser() { return fileChooser; } } public class BtnPanelComp extends JPanel { public BtnPanelComp() { FlowLayout flowLayout = new FlowLayout(FlowLayout.RIGHT); flowLayout.setHgap(10); setLayout(flowLayout); setBackground(Color.white); setBorder(new EmptyBorder(0, 0, 5, 5)); JButton saveBtn = new JButton(\"Save\"); saveBtn.setPreferredSize(new Dimension(100, 40)); saveBtn.addActionListener(AddConsultationWindow.this::saveConsultation); add(saveBtn); JButton cancelBtn = new JButton(\"Cancel\"); cancelBtn.setPreferredSize(new Dimension(100, 40)); cancelBtn.addActionListener(AddConsultationWindow.this::closeWindow); add(cancelBtn); } } public void saveConsultation(ActionEvent event) { String idStr = (patientIdComp.getJComboBox().getSelectedItem() == null) ? \"\" : patientIdComp.getJComboBox().getSelectedItem().toString(); String name = patientNameComp.getTxtField().getText(); String surname = patientSurnameComp.getTxtField().getText(); String mobile = patientMobileComp.getTxtField().getText(); String duration = durationCostComp.getDurationTxtField().getText(); LinkedHashMap<String, String> requiredValues = new LinkedHashMap<>() {{ put(\"Patient ID\", idStr); put(\"Duration\", duration); put(\"Patient Name\", name); put(\"Patient Surname\", surname); put(\"Patient Mobile\", mobile); }}; for (Map.Entry<String, String> entry : requiredValues.entrySet()) { if (entry.getValue().isEmpty()) { JOptionPane.showMessageDialog( null, entry.getKey() + \" field cannot be empty\", \"Error\", JOptionPane.ERROR_MESSAGE ); return; } } int id; try { id = Integer.parseInt(idStr); } catch (Exception e) { JOptionPane.showMessageDialog( null, \"Patient ID must be a number\", \"Error\", JOptionPane.ERROR_MESSAGE ); return; } try { Integer.parseInt(mobile); } catch (Exception e) { JOptionPane.showMessageDialog( null, \"Patient mobile number must be a number\", \"Error\", JOptionPane.ERROR_MESSAGE ); return; } try { Integer.parseInt(duration); } catch (Exception e) { JOptionPane.showMessageDialog( null, \"Duration must be a number\", \"Error\", JOptionPane.ERROR_MESSAGE ); return; } Patient patient = new Patient( name, surname, patientDobComp.getDatePicker().getDate(), mobile, id ); final String consId = getRandID(); try { ArrayList<File> files = encryptImgFiles(consId); Consultation consultation = new Consultation( consId, selectedDoctor, patient, selectedDate, selectedTime, Integer.parseInt(duration), Double.parseDouble(durationCostComp.getCostTxtField().getText().replace(\"£\", \"\").trim()), notesComp.getTextArea().getText(), files ); MainWindow.addConsultation(consultation); closeWindow(event); JOptionPane.showMessageDialog( null, \"Consultation saved successfully!\", \"Success\", JOptionPane.INFORMATION_MESSAGE ); } catch (Exception e) { e.printStackTrace(); } } public void setPatient(String patientId) { if (patientId.isEmpty()) { selectedPatient = null; return; } int id; try { id = Integer.parseInt(patientId); } catch (Exception e) { return; } Consultation consultation = consultations.stream() .filter(c -> c.getPatient().getPatientId() == id) .findFirst() .orElse(null); if (consultation != null) { selectedPatient = consultation.getPatient(); patientNameComp.getTxtField().setText(selectedPatient.getName()); patientSurnameComp.getTxtField().setText(selectedPatient.getSurname()); patientDobComp.getDatePicker().setDate(selectedPatient.getDob()); patientMobileComp.getTxtField().setText(selectedPatient.getMobiNo()); } else { selectedPatient = null; patientNameComp.getTxtField().setText(\"\"); patientSurnameComp.getTxtField().setText(\"\"); patientDobComp.getDatePicker().setDate(null); patientMobileComp.getTxtField().setText(\"\"); } } public String getRandID() { UUID uuid = UUID.randomUUID(); return uuid.toString().substring(0, 8); } public ArrayList<File> encryptImgFiles(String consultationId) throws NoSuchAlgorithmException, InvalidKeySpecException { File[] files = fileChooserComp.getFileChooser().getSelectedFiles(); if (files.length == 0) { return null; } final String DEST = \"patient_img\" + \"/\" + consultationId; try { Files.createDirectories(Paths.get(DEST)); } catch (IOException e) { throw new RuntimeException(e); } ArrayList<File> encryptedFiles = new ArrayList<>(); String randFileName; String extension; Path dest; Key KEY = PasswordBasedKeyAES.getKey(); for (File f : files) { randFileName = getRandID(); extension = getFileExtension(f.getName()); dest = Paths.get(DEST, randFileName + extension); try { Cipher cipher = Cipher.getInstance(\"AES\"); cipher.init(Cipher.ENCRYPT_MODE, KEY); FileInputStream inputStream = new FileInputStream(f); File outputFile = new File(dest.toUri()); FileOutputStream outputStream = new FileOutputStream(outputFile); byte[] buffer = new byte[64]; int bytesRead; while ((bytesRead = inputStream.read(buffer)) != -1) { byte[] output = cipher.update(buffer, 0, bytesRead); if (output != null) { outputStream.write(output); } } byte[] outputBytes = cipher.doFinal(); if (outputBytes != null) { outputStream.write(outputBytes); } inputStream.close(); outputStream.close(); encryptedFiles.add(outputFile); } catch (Exception e) { e.printStackTrace(); } } fileChooserComp.getFileChooser().setSelectedFiles(null); return encryptedFiles; } public static String getFileExtension(String fileName) { String extension = \"\"; int index = fileName.lastIndexOf('.'); if (index > 0) { extension = fileName.substring(index + 1); } return \".\" + extension; } public void updateCost() { int hours; int cost; try { hours = !durationCostComp.getDurationTxtField().getText().isEmpty() ? Integer.parseInt(durationCostComp.getDurationTxtField().getText()) : 0; } catch (Exception e) { return; } if (selectedPatient == null) { cost = hours * 15; } else { cost = hours * 25; } durationCostComp.getCostTxtField().setText(df.format(cost)); } public void closeWindow(ActionEvent e) { JButton source = (JButton) e.getSource(); Container topLevelContainer = source.getTopLevelAncestor(); if (topLevelContainer instanceof JFrame) { ((JFrame) topLevelContainer).dispose(); } else if (topLevelContainer instanceof JDialog) { ((JDialog) topLevelContainer).dispose(); } } }","dependencies":[{"file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/gui/PasswordBasedKeyAES.java","file_content":"package com.cj.wscc.gui; import javax.crypto.SecretKey; import javax.crypto.SecretKeyFactory; import javax.crypto.spec.PBEKeySpec; import javax.crypto.spec.SecretKeySpec; import java.security.Key; import java.security.NoSuchAlgorithmException; import java.security.spec.InvalidKeySpecException; public class PasswordBasedKeyAES { public static Key getKey() throws NoSuchAlgorithmException, InvalidKeySpecException { String cipher = \"AES\"; int keySize = 128; char[] password = \"ykAHmzXU&Zwp9PJvhT5v7sG2etLRSrsk\".toCharArray(); byte[] salt = new byte[100]; PBEKeySpec pbeKeySpec = new PBEKeySpec(password, salt, 1000, keySize); SecretKey pbeKey = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA256\").generateSecret(pbeKeySpec); return new SecretKeySpec(pbeKey.getEncoded(), cipher); } }"}]}}
{"project_id":214,"chunk_id":0,"content":{"main_file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/gui/DecryptWorker.java","main_file_content":"package com.cj.wscc.gui; import javax.crypto.Cipher; import javax.imageio.ImageIO; import javax.swing.*; import javax.swing.border.EmptyBorder; import java.awt.*; import java.awt.image.BufferedImage; import java.io.ByteArrayInputStream; import java.io.ByteArrayOutputStream; import java.io.File; import java.io.FileInputStream; import java.security.Key; import java.util.ArrayList; import java.util.LinkedHashMap; public class DecryptWorker extends SwingWorker<Void, Void> { private final ArrayList<File> encryptedImgs; private LinkedHashMap<BufferedImage, Image> decryptedImgs = new LinkedHashMap<>(); private final ViewConsultationWindow.ImageViewerComp imageViewPanel; public DecryptWorker(ArrayList<File> encryptedImgs, ViewConsultationWindow.ImageViewerComp imageViewPanel) { this.encryptedImgs = encryptedImgs; this.imageViewPanel = imageViewPanel; } @Override protected Void doInBackground() { ProgressBarComp progressBarComp = new ProgressBarComp(); progressBarComp.setVisible(true); int currentFile = 0; int totalFiles = encryptedImgs.size(); for (File f : encryptedImgs) { if (f.exists()) { BufferedImage originalImg = getDecryptedImg(f); Image scaledImage = getScaledImg(originalImg, 450); decryptedImgs.put(originalImg, scaledImage); progressBarComp.getProgressBar().setValue((int) (((double) currentFile / totalFiles) * 100)); ++currentFile; } } progressBarComp.dispose(); return null; } @Override protected void done() { try { imageViewPanel.setImages(decryptedImgs); } catch (Exception e) { e.printStackTrace(); } } public Image getScaledImg(BufferedImage img, int width) { int originalWidth = img.getWidth(); int originalHeight = img.getHeight(); double scaleFactor = (double) width / originalWidth; int desiredHeight = (int) (originalHeight * scaleFactor); return img.getScaledInstance(width, desiredHeight, Image.SCALE_SMOOTH); } public BufferedImage getDecryptedImg(File file) { BufferedImage decryptedImg = null; try { Key KEY = PasswordBasedKeyAES.getKey(); Cipher cipher = Cipher.getInstance(\"AES\"); cipher.init(Cipher.DECRYPT_MODE, KEY); FileInputStream inputStream = new FileInputStream(file); ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); byte[] buffer = new byte[64]; int bytesRead; while ((bytesRead = inputStream.read(buffer)) != -1) { byte[] output = cipher.update(buffer, 0, bytesRead); if (output != null) { outputStream.write(output); } } byte[] outputBytes = cipher.doFinal(); if (outputBytes != null) { outputStream.write(outputBytes); } inputStream.close(); ByteArrayInputStream decryptedInputStream = new ByteArrayInputStream(outputStream.toByteArray()); decryptedImg = ImageIO.read(decryptedInputStream); } catch (Exception e) { e.printStackTrace(); } return decryptedImg; } public static class ProgressBarComp extends JFrame { private final JProgressBar progressBar; public ProgressBarComp() { super(\"Decrypting\"); setResizable(false); setLocationRelativeTo(null); JPanel panel = new JPanel(new GridBagLayout()); panel.setBorder(new EmptyBorder(20, 20, 20, 20)); GridBagConstraints c = new GridBagConstraints(); c.fill = GridBagConstraints.BOTH; c.weighty = 1; c.weightx = 1; c.gridx = 0; c.gridy = 0; c.insets = new Insets(0, 0, 10, 0); JLabel text = new JLabel(\"Decrypting image files...\"); text.setFont(new Font(\"SansSerif\", Font.PLAIN, 15)); text.setHorizontalAlignment(JLabel.CENTER); panel.add(text, c); progressBar = new JProgressBar(); progressBar.setMinimum(0); progressBar.setMaximum(100); progressBar.setPreferredSize(new Dimension(300, 30)); c.gridx = 0; c.gridy = 1; panel.add(progressBar, c); add(panel, BorderLayout.CENTER); pack(); } public JProgressBar getProgressBar() { return progressBar; } } }","dependencies":[{"file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/gui/PasswordBasedKeyAES.java","file_content":"package com.cj.wscc.gui; import javax.crypto.SecretKey; import javax.crypto.SecretKeyFactory; import javax.crypto.spec.PBEKeySpec; import javax.crypto.spec.SecretKeySpec; import java.security.Key; import java.security.NoSuchAlgorithmException; import java.security.spec.InvalidKeySpecException; public class PasswordBasedKeyAES { public static Key getKey() throws NoSuchAlgorithmException, InvalidKeySpecException { String cipher = \"AES\"; int keySize = 128; char[] password = \"ykAHmzXU&Zwp9PJvhT5v7sG2etLRSrsk\".toCharArray(); byte[] salt = new byte[100]; PBEKeySpec pbeKeySpec = new PBEKeySpec(password, salt, 1000, keySize); SecretKey pbeKey = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA256\").generateSecret(pbeKeySpec); return new SecretKeySpec(pbeKey.getEncoded(), cipher); } }"},{"file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/gui/ViewConsultationWindow.java","file_content":"package com.cj.wscc.gui; import com.cj.wscc.console.Consultation; import javax.swing.*; import javax.swing.border.CompoundBorder; import javax.swing.border.EmptyBorder; import java.awt.*; import java.awt.event.MouseAdapter; import java.awt.event.MouseEvent; import java.awt.image.BufferedImage; import java.text.DecimalFormat; import java.util.HashMap; import java.util.LinkedHashMap; import java.util.Map; public class ViewConsultationWindow extends JFrame { private final Consultation selectedConsultation; private final DecimalFormat df = new DecimalFormat(\"0.00\"); public ViewConsultationWindow(Consultation selectedConsultation) { super(\"View Consultation\"); setSize(900, 800); setLocationRelativeTo(null); setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); this.selectedConsultation = selectedConsultation; TopPanelComp topPanelComp = new TopPanelComp(); add(topPanelComp, BorderLayout.NORTH); JPanel mainPanel = new JPanel(new GridBagLayout()); mainPanel.setBorder(new EmptyBorder(10, 10, 10, 5)); mainPanel.setBackground(Color.white); GridBagConstraints c = new GridBagConstraints(); c.insets = new Insets(5, 5, 5, 5); c.fill = GridBagConstraints.BOTH; c.weighty = 1; c.weightx = 1; c.gridx = 0; c.gridy = 0; MyLabelComp doctorComp = new MyLabelComp( \"Doctor\", \"Dr. \" + selectedConsultation.getDoctor().getFullName() ); mainPanel.add(doctorComp, c); MyLabelComp dateTimeComp = new MyLabelComp( \"Date & Time\", selectedConsultation.getDate() + \" \" + selectedConsultation.getTime() ); c.gridx = 0; c.gridy = 1; mainPanel.add(dateTimeComp, c); MyLabelComp patientIdComp = new MyLabelComp( \"Patient ID\", Integer.toString(selectedConsultation.getPatient().getPatientId()) ); c.gridx = 0; c.gridy = 2; mainPanel.add(patientIdComp, c); MyLabelComp patientNameComp = new MyLabelComp( \"Patient Name\", selectedConsultation.getPatient().getName() ); c.gridx = 0; c.gridy = 3; mainPanel.add(patientNameComp, c); MyLabelComp patientSurnameComp = new MyLabelComp( \"Patient Surname\", selectedConsultation.getPatient().getSurname() ); c.gridx = 0; c.gridy = 4; mainPanel.add(patientSurnameComp, c); String dob = \"\"; if (selectedConsultation.getPatient().getDob() != null) { dob = selectedConsultation.getPatient().getDob().toString(); } MyLabelComp patientDobComp = new MyLabelComp(\"Patient DOB\", dob); c.gridx = 0; c.gridy = 5; mainPanel.add(patientDobComp, c); MyLabelComp patientMobile = new MyLabelComp( \"Patient Mobile\", selectedConsultation.getPatient().getMobiNo() ); c.gridx = 0; c.gridy = 6; mainPanel.add(patientMobile, c); add(mainPanel, BorderLayout.CENTER); DurationCostComp durationCostComp = new DurationCostComp( Integer.toString(selectedConsultation.getDurationHours()), df.format(selectedConsultation.getCost()) ); c.gridx = 0; c.gridy = 7; mainPanel.add(durationCostComp, c); RightPanelComp rightPanelComp = new RightPanelComp(); NotesComp notesComp = new NotesComp(selectedConsultation.getNotes()); c.weighty = 0.4; c.gridx = 0; c.gridy = 0; rightPanelComp.add(notesComp, c); ImageViewerComp imageViewerComp = new ImageViewerComp(); c.weighty = 1; c.gridx = 0; c.gridy = 1; if (selectedConsultation.getImageFiles() != null && selectedConsultation.getImageFiles().size() > 0) { DecryptWorker worker = new DecryptWorker(selectedConsultation.getImageFiles(), imageViewerComp); worker.execute(); } rightPanelComp.add(imageViewerComp, c); add(rightPanelComp, BorderLayout.EAST); } public class TopPanelComp extends JPanel { public TopPanelComp() { setLayout(new BorderLayout()); setBackground(new Color(0x3C4048)); setPreferredSize(new Dimension(0, 50)); setLayout(new BorderLayout()); JLabel topLabel = new JLabel( \"Consultation \" + selectedConsultation.getId(), SwingConstants.CENTER ); topLabel.setFont(new Font(\"SansSerif\", Font.PLAIN, 25)); topLabel.setForeground(Color.white); add(topLabel, BorderLayout.CENTER); } } public class ImageViewerComp extends JPanel { private final JLabel imageLabel; private LinkedHashMap<BufferedImage, Image> images = new LinkedHashMap<>(); private int imgNo = 0; public ImageViewerComp() { int noOfImgs = selectedConsultation.getImageFiles() == null ? 0 : selectedConsultation.getImageFiles().size(); String title = String.format(\"Images (%d)\", noOfImgs); setBorder(new CompoundBorder(BorderFactory.createTitledBorder(title), new EmptyBorder(5, 5, 5, 5))); setBackground(Color.white); imageLabel = new JLabel(); imageLabel.addMouseListener(new MouseAdapter() { @Override public void mouseClicked(MouseEvent e) { if (e.getClickCount() == 2) { FullImageViewerWindow fullImageViewerWindow = new FullImageViewerWindow(getOriginalImageAt(imgNo)); fullImageViewerWindow.setVisible(true); } } }); JPanel container = new JPanel(new BorderLayout(0, 5)); container.setBackground(Color.white); JScrollPane scrollPane = new JScrollPane(); scrollPane.setPreferredSize(new Dimension(450, 380)); scrollPane.setViewportView(imageLabel); scrollPane.getViewport().setBackground(Color.white); container.add(scrollPane, BorderLayout.CENTER); JPanel btnContainer = new JPanel(new FlowLayout()); btnContainer.setBackground(Color.white); JButton prevBtn = new JButton(\"Previous\"); prevBtn.addActionListener(actionEvent -> { if (images != null && images.size() > 0) { if (imgNo == 0) { imgNo = images.size() - 1; } else { --imgNo; } imageLabel.setIcon(new ImageIcon(getScaledImageAt(imgNo))); } }); JButton nextBtn = new JButton(\"Next\"); nextBtn.addActionListener(actionEvent -> { if (images != null && images.size() > 0) { if (imgNo == images.size() - 1) { imgNo = 0; } else { ++imgNo; } imageLabel.setIcon(new ImageIcon(getScaledImageAt(imgNo))); } }); btnContainer.add(prevBtn); btnContainer.add(nextBtn); container.add(btnContainer, BorderLayout.SOUTH); add(container); } public void setImages(LinkedHashMap<BufferedImage, Image> images) { this.images = images; imageLabel.setIcon(new ImageIcon(getScaledImageAt(0))); } public Image getScaledImageAt(int position) { int i = 0; HashMap<Object, Object> map; for (Map.Entry<BufferedImage, Image> entry : images.entrySet()) { if (i == position) { return entry.getValue(); } i++; } return null; } public Image getOriginalImageAt(int position) { int i = 0; HashMap<Object, Object> map; for (Map.Entry<BufferedImage, Image> entry : images.entrySet()) { if (i == position) { return entry.getKey(); } i++; } return null; } } public class RightPanelComp extends JPanel { public RightPanelComp() { setLayout(new GridBagLayout()); setPreferredSize(new Dimension(500, 0)); setBorder(new EmptyBorder(10, 5, 10, 10)); setBackground(Color.white); } } public class NotesComp extends JPanel { private final JTextArea textArea; public NotesComp(String txt) { setLayout(new BorderLayout()); setBorder(new CompoundBorder(BorderFactory.createTitledBorder(\"Notes\"), new EmptyBorder(0, 5, 5, 5))); setBackground(Color.white); textArea = new JTextArea(txt); textArea.setRows(4); textArea.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); textArea.setEditable(false); textArea.setFocusable(false); textArea.setBackground(Color.white); add(new JScrollPane(textArea), BorderLayout.CENTER); } public JTextArea getTextArea() { return textArea; } } public static class MyLabelComp extends JPanel { private final JLabel myLabel; public MyLabelComp(String title, String label) { setLayout(new BorderLayout()); setBorder(new CompoundBorder(BorderFactory.createTitledBorder(title), new EmptyBorder(0, 5, 5, 5))); setBackground(Color.white); myLabel = new JLabel(label); myLabel.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); add(myLabel); } } public class DurationCostComp extends JPanel { JLabel durationLabel; JLabel costLabel; public DurationCostComp(String duration, String cost) { setLayout(new GridBagLayout()); setBackground(Color.white); GridBagConstraints c = new GridBagConstraints(); c.weightx = 0.5; c.weighty = 0.5; c.fill = GridBagConstraints.BOTH; JPanel durationContainer = new JPanel(new BorderLayout()); durationContainer.setBackground(Color.white); durationContainer.setBorder(new CompoundBorder(BorderFactory.createTitledBorder(\"Duration (h)\"), new EmptyBorder(0, 5, 5, 5))); durationLabel = new JLabel(duration); durationLabel.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); durationContainer.add(durationLabel); add(durationContainer, c); JPanel costContainer = new JPanel(new BorderLayout()); costContainer.setBackground(Color.white); costContainer.setBorder(new CompoundBorder(BorderFactory.createTitledBorder(\"Cost (£)\"), new EmptyBorder(0, 5, 5, 5))); costLabel = new JLabel(); costLabel.setText(cost); costLabel.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); costContainer.add(costLabel); add(costContainer, c); } } }"}]}}
{"project_id":214,"chunk_id":0,"content":{"main_file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/gui/PasswordBasedKeyAES.java","main_file_content":"package com.cj.wscc.gui; import javax.crypto.SecretKey; import javax.crypto.SecretKeyFactory; import javax.crypto.spec.PBEKeySpec; import javax.crypto.spec.SecretKeySpec; import java.security.Key; import java.security.NoSuchAlgorithmException; import java.security.spec.InvalidKeySpecException; public class PasswordBasedKeyAES { public static Key getKey() throws NoSuchAlgorithmException, InvalidKeySpecException { String cipher = \"AES\"; int keySize = 128; char[] password = \"ykAHmzXU&Zwp9PJvhT5v7sG2etLRSrsk\".toCharArray(); byte[] salt = new byte[100]; PBEKeySpec pbeKeySpec = new PBEKeySpec(password, salt, 1000, keySize); SecretKey pbeKey = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA256\").generateSecret(pbeKeySpec); return new SecretKeySpec(pbeKey.getEncoded(), cipher); } }","dependencies":[]}}
{"project_id":214,"chunk_id":0,"content":{"main_file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/gui/MainWindow.java","main_file_content":"package com.cj.wscc.gui; import com.cj.wscc.console.Consultation; import com.cj.wscc.console.Doctor; import com.formdev.flatlaf.ui.FlatRoundBorder; import com.github.lgooddatepicker.components.DateTimePicker; import com.github.lgooddatepicker.components.TimePickerSettings; import com.github.lgooddatepicker.optionalusertools.PickerUtilities; import com.github.lgooddatepicker.optionalusertools.TimeVetoPolicy; import javax.crypto.Cipher; import javax.swing.*; import javax.swing.border.CompoundBorder; import javax.swing.border.EmptyBorder; import javax.swing.border.TitledBorder; import javax.swing.table.AbstractTableModel; import javax.swing.table.TableRowSorter; import java.awt.*; import java.awt.event.ActionEvent; import java.awt.event.FocusAdapter; import java.awt.event.FocusEvent; import java.io.*; import java.nio.file.Files; import java.nio.file.Paths; import java.security.Key; import java.text.DecimalFormat; import java.time.LocalDate; import java.time.LocalDateTime; import java.time.LocalTime; import java.util.ArrayList; import java.util.Random; import java.util.stream.Collectors; public class MainWindow extends JFrame { private final ArrayList<Doctor> doctors; private static ArrayList<Consultation> consultations = new ArrayList<>(); private static DocsTableComp docsTableComp; private static ConsTableComp consTableComp; private Doctor selectedDoctor; private static Consultation selectedConsultation; private LocalDate selectedDate; private LocalTime selectedTime; public MainWindow(ArrayList<Doctor> doctors) { super(\"Westminster Skill Consultation Centre\"); setSize(1280, 720); setLocationRelativeTo(null); setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); setLayout(new BorderLayout()); this.doctors = doctors; loadConsultations(); add(new TopPanelComp(), BorderLayout.NORTH); add(new LeftPanelComp(), BorderLayout.WEST); RightPanelComp rightPanelComp = new RightPanelComp(); docsTableComp = new DocsTableComp(); rightPanelComp.add(docsTableComp); consTableComp = new ConsTableComp(consultations); rightPanelComp.add(consTableComp, 1); add(rightPanelComp); CopyrightComp copyrightComp = new CopyrightComp(); add(copyrightComp, BorderLayout.SOUTH); } public void handleBtnClick(ActionEvent e) { JButton btn = (JButton) e.getSource(); switch (btn.getText()) { case \"Check Availability\" -> checkAvailability(); case \"Book Consultation\" -> bookConsultation(); case \"View Consultation\" -> viewConsultation(); case \"Edit Consultation\" -> editConsultation(); case \"Remove Consultation\" -> removeConsultation(); } } public void checkAvailability() { if (selectedDoctor == null) { JOptionPane.showMessageDialog( null, \"Please select a doctor from the Doctors table first\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else if (selectedDate == null || selectedTime == null) { JOptionPane.showMessageDialog( null, \"Please select a date and time\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { if (isDoctorAvailable(null)) { JOptionPane.showMessageDialog( null, \"Doctor is available at the selected time\", \"Info\", JOptionPane.INFORMATION_MESSAGE ); } else { JOptionPane.showMessageDialog( null, \"Unfortunately, the doctor is unavailable at the chosen time\", \"Error\", JOptionPane.ERROR_MESSAGE ); } } } public boolean isDoctorAvailable(Doctor doctor) { if (doctor == null) { doctor = selectedDoctor; } Doctor finalDoctor = doctor; ArrayList<Consultation> filteredConsultations = consultations.stream() .filter(c -> c.getDoctor().getMedicalLicenseNo().equalsIgnoreCase(finalDoctor.getMedicalLicenseNo())) .collect(Collectors.toCollection(ArrayList::new)); LocalDate date; LocalTime time; LocalDateTime startDateTime; LocalDateTime endDateTime; LocalDateTime selectedDateTime = selectedDate.atTime(selectedTime); boolean isAvailable = true; for (Consultation c : filteredConsultations) { date = c.getDate(); time = c.getTime(); startDateTime = date.atTime(time); endDateTime = startDateTime.plusHours(c.getDurationHours()); if (selectedDateTime.equals(startDateTime)) { isAvailable = false; } else if (selectedDateTime.isAfter(startDateTime) && selectedDateTime.isBefore(endDateTime)) { isAvailable = false; } } return isAvailable; } public Doctor getRandomAvailableDoctor() { ArrayList<Doctor> availableDoctors = new ArrayList<>(); ArrayList<Doctor> doctorsWithConsultations = new ArrayList<>(); for (Consultation c : consultations) { if (!doctorsWithConsultations.contains(c.getDoctor())) { doctorsWithConsultations.add(c.getDoctor()); } } for (Doctor d : doctorsWithConsultations) { if (isDoctorAvailable(d)) { availableDoctors.add(d); } } for (Doctor d : doctors) { if (!doctorsWithConsultations.contains(d)) { availableDoctors.add(d); } } ArrayList<Doctor> availableDoctorsSameSpeciality = new ArrayList<>(); availableDoctors.forEach(d -> { if (d.getSpecialisation().equalsIgnoreCase(selectedDoctor.getSpecialisation())) { availableDoctorsSameSpeciality.add(d); } }); if (availableDoctorsSameSpeciality.size() > 0) { Random rand = new Random(); int bound = availableDoctorsSameSpeciality.size(); int randIndex = rand.nextInt(bound); return availableDoctorsSameSpeciality.get(randIndex); } Random rand = new Random(); int bound = availableDoctors.size(); if (bound > 0) { int randIndex = rand.nextInt(bound); return availableDoctors.get(randIndex); } else { return null; } } public void viewConsultation() { if (selectedConsultation == null) { JOptionPane.showMessageDialog( null, \"Please select a consultation from the table to view\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { ViewConsultationWindow viewConsultationWindow = new ViewConsultationWindow(selectedConsultation); viewConsultationWindow.setVisible(true); } } public void bookConsultation() { if (selectedDoctor == null) { JOptionPane.showMessageDialog( null, \"Please select a doctor from the Doctors table first\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else if (selectedDate == null || selectedTime == null) { JOptionPane.showMessageDialog( null, \"Please select a date and time\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else if (!isDoctorAvailable(null)) { Doctor randomAvailableDoctor = getRandomAvailableDoctor(); if (randomAvailableDoctor == null) { JOptionPane.showMessageDialog( null, \"No doctors are available at the selected time\\nPlease choose another time.\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { String msg = String.format( \"<b>Dr. %s</b> is <span style=\\\"color:red\\\"><b>not available</b></span> at the selected time.<br>\" + \"However <b>Dr. %s</b> is available at the selected time.<br>\" + \"Book consultation with <b>Dr. %s</b>?\", selectedDoctor.getFullName(), randomAvailableDoctor.getFullName(), randomAvailableDoctor.getFullName() ); JEditorPane editorPane = new JEditorPane(); editorPane.setContentType(\"text/html\"); editorPane.setText(msg); JOptionPane jOptionPane = new JOptionPane(); editorPane.setBackground(jOptionPane.getBackground()); int result = JOptionPane.showConfirmDialog( null, editorPane, \"Confirm\", JOptionPane.OK_CANCEL_OPTION ); if (result == JOptionPane.OK_OPTION) { AddConsultationWindow consWindow = new AddConsultationWindow(consultations, randomAvailableDoctor, selectedDate, selectedTime); consWindow.setVisible(true); consWindow.toFront(); } } } else { AddConsultationWindow consWindow = new AddConsultationWindow(consultations, selectedDoctor, selectedDate, selectedTime); consWindow.setVisible(true); consWindow.toFront(); } } public void editConsultation() { if (selectedConsultation == null) { JOptionPane.showMessageDialog( null, \"Please select a consultation from the table to edit\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { EditConsultationWindow editConsultationWindow = new EditConsultationWindow(consultations, selectedConsultation); editConsultationWindow.setVisible(true); } } public static void addConsultation(Consultation consultation) { consultations.add(consultation); saveConsultations(); updateConsTableModel(); } public void removeConsultation() { if (selectedConsultation == null) { JOptionPane.showMessageDialog( null, \"Please select a consultation from the table to remove\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { int result = JOptionPane.showConfirmDialog( null, String.format(\"Are you sure you want to remove consultation %s?\", selectedConsultation.getId()), \"Confirm\", JOptionPane.YES_NO_OPTION ); if (result == JOptionPane.YES_OPTION) { consultations.remove(selectedConsultation); removeConsultationImgFiles(null); selectedConsultation = null; saveConsultations(); updateConsTableModel(); JOptionPane.showMessageDialog( null, \"Consultation removed successfully.\", \"Info\", JOptionPane.INFORMATION_MESSAGE ); } } } public static void removeConsultationImgFiles(Consultation consultation) { if (consultation == null) { consultation = selectedConsultation; } if (consultation.getImageFiles() == null) { return; } final File parentDir = consultation.getImageFiles().get(0).getParentFile(); consultation.getImageFiles().forEach(f -> { if (f.exists()) { try { Files.delete(Paths.get(f.getAbsolutePath())); } catch (IOException e) { throw new RuntimeException(e); } } }); if (parentDir.exists()) { parentDir.delete(); } } public static void loadConsultations() { try { FileInputStream fis = new FileInputStream(\"consultations.bin\"); byte[] encryptedBytes = new byte[fis.available()]; fis.read(encryptedBytes); fis.close(); Key KEY = PasswordBasedKeyAES.getKey(); Cipher cipher = Cipher.getInstance(\"AES\"); cipher.init(Cipher.DECRYPT_MODE, KEY); byte[] decryptedBytes = cipher.doFinal(encryptedBytes); ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(decryptedBytes)); consultations = (ArrayList<Consultation>) ois.readObject(); ois.close(); } catch (Exception ignored) { } } public static void saveConsultations() { try { ByteArrayOutputStream baos = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(baos); oos.writeObject(consultations); oos.close(); byte[] serializedBytes = baos.toByteArray(); Key KEY = PasswordBasedKeyAES.getKey(); Cipher cipher = Cipher.getInstance(\"AES\"); cipher.init(Cipher.ENCRYPT_MODE, KEY); byte[] encryptedBytes = cipher.doFinal(serializedBytes); FileOutputStream fos = new FileOutputStream(\"consultations.bin\"); fos.write(encryptedBytes); fos.close(); } catch (Exception ignored) { } } public static void updateConsTableModel() { consTableComp.getConsTableModel().fireTableDataChanged(); } public static DocsTableComp getDocsTableComp() { return docsTableComp; } public class TopPanelComp extends JPanel { public TopPanelComp() { setBackground(new Color(0x3F4E4F)); setPreferredSize(new Dimension(0, 70)); setForeground(new Color(0xFFFFFF)); setLayout(new BorderLayout()); JLabel topLabel = new JLabel(\"Westminster Skin Consultation Centre\", SwingConstants.CENTER); topLabel.setFont(new Font(\"SansSerif\", Font.PLAIN, 30)); topLabel.setForeground(new Color(0xFFFFFF)); add(topLabel, BorderLayout.CENTER); } } public class LeftPanelComp extends JPanel { public LeftPanelComp() { setLayout(new GridLayout(2, 1, 0, 10)); setBorder(new EmptyBorder(15, 10, 10, 10)); setBackground(Color.white); JPanel innerTopPanel = new JPanel(new GridLayout(3, 1, 0, 20)); innerTopPanel.setBorder(new CompoundBorder( new FlatRoundBorder(), new EmptyBorder(10, 10, 10, 10)) ); innerTopPanel.setBackground(Color.white); DateTimePickerComp dateTimePickerComp = new DateTimePickerComp(); innerTopPanel.add(dateTimePickerComp); MainBtnComp checkAvailabilityBtn = new MainBtnComp(\"Check Availability\"); checkAvailabilityBtn.addActionListener(MainWindow.this::handleBtnClick); innerTopPanel.add(checkAvailabilityBtn); MainBtnComp bookConsultationBtn = new MainBtnComp(\"Book Consultation\"); bookConsultationBtn.addActionListener(MainWindow.this::handleBtnClick); innerTopPanel.add(bookConsultationBtn); add(innerTopPanel); JPanel innerBottomPanel = new JPanel(new GridLayout(3, 1, 0, 20)); innerBottomPanel.setBorder(new CompoundBorder( new FlatRoundBorder(), new EmptyBorder(10, 10, 10, 10)) ); innerBottomPanel.setBackground(Color.white); MainBtnComp viewConsultationBtn = new MainBtnComp(\"View Consultation\"); viewConsultationBtn.addActionListener(MainWindow.this::handleBtnClick); innerBottomPanel.add(viewConsultationBtn); MainBtnComp editConsultationBtn = new MainBtnComp(\"Edit Consultation\"); editConsultationBtn.addActionListener(MainWindow.this::handleBtnClick); innerBottomPanel.add(editConsultationBtn); MainBtnComp removeConsultation = new MainBtnComp(\"Remove Consultation\"); removeConsultation.addActionListener(MainWindow.this::handleBtnClick); innerBottomPanel.add(removeConsultation); add(innerBottomPanel); } } public class DateTimePickerComp extends JPanel { public DateTimePickerComp() { setLayout(new BorderLayout()); setBackground(Color.white); DateTimePicker dateTimePicker = new DateTimePicker(); dateTimePicker.setBackground(Color.white); TimePickerSettings timeSettings = dateTimePicker.timePicker.getSettings(); timeSettings.setVetoPolicy(new SampleTimeVetoPolicy()); dateTimePicker.datePicker.setDateToToday(); selectedDate = dateTimePicker.getDatePicker().getDate(); dateTimePicker.timePicker.setTimeToNow(); selectedTime = dateTimePicker.getTimePicker().getTime(); int width = 24; int height = 24; ImageIcon oriCalIcon = new ImageIcon(\"resources/calendar_icon.png\"); Image caledarIcon = oriCalIcon.getImage().getScaledInstance(width, height, Image.SCALE_SMOOTH); JButton datePickerBtn = dateTimePicker.getDatePicker().getComponentToggleCalendarButton(); datePickerBtn.setPreferredSize(new Dimension(40, datePickerBtn.getPreferredSize().height)); datePickerBtn.setText(\"\"); datePickerBtn.setIcon(new ImageIcon(caledarIcon)); ImageIcon oriClockIcon = new ImageIcon(\"resources/clock_icon.png\"); Image clockIcon = oriClockIcon.getImage().getScaledInstance(width, height, Image.SCALE_SMOOTH); JButton timePickerBtn = dateTimePicker.getTimePicker().getComponentToggleTimeMenuButton(); timePickerBtn.setPreferredSize(new Dimension(40, timePickerBtn.getPreferredSize().height)); timePickerBtn.setText(\"\"); timePickerBtn.setIcon(new ImageIcon(clockIcon)); dateTimePicker.getDatePicker().addDateChangeListener(dateChangeEvent -> selectedDate = dateTimePicker.datePicker.getDate()); dateTimePicker.getTimePicker().addTimeChangeListener(timeChangeEvent -> selectedTime = dateTimePicker.timePicker.getTime()); add(dateTimePicker, BorderLayout.CENTER); } } public class MyTableComp extends JTable { public MyTableComp(AbstractTableModel tableModel, TableRowSorter rowSorter) { super(tableModel); setRowSorter(rowSorter); setFont(new Font(\"SansSerif\", Font.PLAIN, 17)); getTableHeader().setReorderingAllowed(false); getTableHeader().setFont(new Font(\"SansSerif\", Font.BOLD, 17)); setRowHeight(30); setSelectionMode(ListSelectionModel.SINGLE_SELECTION); } } public class DocsTableComp extends JPanel { private final MyTableComp myTableComp; private final DocsTableModel docsTableModel; public DocsTableComp() { setLayout(new BorderLayout(0, 5)); setBackground(new Color(0xFFFFFF)); TitledBorder titledBorder = new TitledBorder(\"Doctors\"); titledBorder.setBorder(new FlatRoundBorder()); titledBorder.setTitleFont(new Font(\"SansSerif\", Font.BOLD, 15)); setBorder(new CompoundBorder(titledBorder, new EmptyBorder(10, 10, 10, 10))); docsTableModel = new DocsTableModel(); myTableComp = new MyTableComp(docsTableModel, new TableRowSorter<>(docsTableModel)); myTableComp.getColumnModel().getColumn(2).setPreferredWidth(160); myTableComp.addFocusListener(new FocusAdapter() { @Override public void focusGained(FocusEvent e) { consTableComp.getTable().clearSelection(); selectedConsultation = null; } }); myTableComp.getSelectionModel().addListSelectionListener(listSelectionEvent -> { int row = myTableComp.getSelectedRow(); if (!listSelectionEvent.getValueIsAdjusting() && row >= 0) { String docLicense = (String) myTableComp.getValueAt(row, 3); selectedDoctor = doctors.stream() .filter(d -> d.getMedicalLicenseNo().equalsIgnoreCase(docLicense)) .findFirst() .orElse(null); } }); add(new JScrollPane(myTableComp), BorderLayout.CENTER); } public JTable getTable() { return myTableComp; } public AbstractTableModel getDocsTableModel() { return docsTableModel; } } public class ConsTableComp extends JPanel { private final MyTableComp myTableComp; private final ConsTableModel consTableModel; public ConsTableComp(ArrayList<Consultation> consultations) { setLayout(new BorderLayout(0, 5)); setBackground(new Color(0xFFFFFF)); TitledBorder titledBorder = new TitledBorder(\"Consultations\"); titledBorder.setBorder(new FlatRoundBorder()); titledBorder.setTitleFont(new Font(\"SansSerif\", Font.BOLD, 15)); setBorder(new CompoundBorder(titledBorder, new EmptyBorder(10, 10, 10, 10))); consTableModel = new ConsTableModel(consultations); myTableComp = new MyTableComp(consTableModel, new TableRowSorter<>(consTableModel)); myTableComp.addFocusListener(new FocusAdapter() { @Override public void focusGained(FocusEvent e) { docsTableComp.getTable().clearSelection(); selectedDoctor = null; } }); myTableComp.getSelectionModel().addListSelectionListener(listSelectionEvent -> { int row = myTableComp.getSelectedRow(); if (!listSelectionEvent.getValueIsAdjusting() && row >= 0) { String consId = (String) myTableComp.getValueAt(row, 0); selectedConsultation = consultations.stream() .filter(d -> d.getId().equalsIgnoreCase(consId)) .findFirst() .orElse(null); } }); add(new JScrollPane(myTableComp), BorderLayout.CENTER); } public JTable getTable() { return myTableComp; } public AbstractTableModel getConsTableModel() { return consTableModel; } } public class RightPanelComp extends JPanel { public RightPanelComp() { setLayout(new GridLayout(2, 1, 0, 15)); setPreferredSize(new Dimension(1000, 0)); setBorder(new EmptyBorder(10, 10, 10, 10)); setBackground(Color.white); } } public class MainBtnComp extends JButton { public MainBtnComp(String txt) { super(txt); setFont(new Font(\"SansSerif\", Font.BOLD, 16)); setFocusable(false); setFocusPainted(false); setBackground(new Color(0xDCD7C9)); setForeground(Color.black); } } public class CopyrightComp extends JPanel { public CopyrightComp() { setLayout(new BorderLayout()); setBorder(new EmptyBorder(0, 0, 10, 10)); setBackground(Color.white); JLabel jLabel = new JLabel(\"Copyright © 2023 Chamath Jayasena. All rights reserved.\"); jLabel.setFont(new Font(\"SansSerif\", Font.BOLD, 14)); jLabel.setEnabled(false); add(jLabel, BorderLayout.EAST); } } public class DocsTableModel extends AbstractTableModel { String[] colNames; Class[] colClasses; public DocsTableModel() { colNames = new String[]{ \"First Name\", \"Surname\", \"Specialisation\", \"License\", \"DOB\", \"Mobile\" }; colClasses = new Class[]{ String.class, String.class, String.class, String.class, LocalDate.class, String.class }; } @Override public int getRowCount() { return doctors.size(); } @Override public int getColumnCount() { return colNames.length; } @Override public Object getValueAt(int row, int col) { switch (col) { case 0 -> { return doctors.get(row).getName(); } case 1 -> { return doctors.get(row).getSurname(); } case 2 -> { return doctors.get(row).getSpecialisation(); } case 3 -> { return doctors.get(row).getMedicalLicenseNo(); } case 4 -> { return doctors.get(row).getDob(); } case 5 -> { return doctors.get(row).getMobiNo(); } default -> { return null; } } } public String getColumnName(int col) { return colNames[col]; } public Class getColumnClass(int col) { return colClasses[col]; } } public class ConsTableModel extends AbstractTableModel { private final ArrayList<Consultation> consultations; private final String[] colNames; private final Class[] colClasses; public ConsTableModel(ArrayList<Consultation> data) { this.consultations = data; colNames = new String[]{ \"ID\", \"Patient ID\", \"Patient\", \"Doctor\", \"Date\", \"Time\", \"Duration (h)\", \"Cost (£)\" }; colClasses = new Class[]{ String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class }; } @Override public int getRowCount() { return consultations.size(); } @Override public int getColumnCount() { return colNames.length; } @Override public Object getValueAt(int row, int col) { DecimalFormat df = new DecimalFormat(\"0.00\"); switch (col) { case 0 -> { return consultations.get(row).getId(); } case 1 -> { return consultations.get(row).getPatient().getPatientId(); } case 2 -> { return consultations.get(row).getPatient().getFullName(); } case 3 -> { return consultations.get(row).getDoctor().getFullName(); } case 4 -> { return consultations.get(row).getDate().toString(); } case 5 -> { return consultations.get(row).getTime().toString(); } case 6 -> { return consultations.get(row).getDurationHours() + \"\"; } case 7 -> { return df.format(consultations.get(row).getCost()); } default -> { return null; } } } public String getColumnName(int col) { return colNames[col]; } public Class getColumnClass(int col) { return colClasses[col]; } } private static class SampleTimeVetoPolicy implements TimeVetoPolicy { @Override public boolean isTimeAllowed(LocalTime time) { return PickerUtilities.isLocalTimeInRange( time, LocalTime.of(8, 00), LocalTime.of(17, 00), true); } } }","dependencies":[{"file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/console/Consultation.java","file_content":"package com.cj.wscc.console; import java.io.File; import java.io.Serializable; import java.time.LocalDate; import java.time.LocalTime; import java.util.ArrayList; public class Consultation implements Serializable { private String id; private Doctor doctor; private Patient patient; private LocalDate date; private LocalTime time; private int durationHours; private double cost; private String notes; private ArrayList<File> imageFiles; public Consultation(String id, Doctor doctor, Patient patient, LocalDate date, LocalTime time, int duration, double cost, String notes, ArrayList<File> files) { this.id = id; this.doctor = doctor; this.patient = patient; this.date = date; this.time = time; this.durationHours = duration; this.cost = cost; this.notes = notes; this.imageFiles = files; } public String getId() { return id; } public void setId(String id) { this.id = id; } public Doctor getDoctor() { return doctor; } public void setDoctor(Doctor doctor) { this.doctor = doctor; } public Patient getPatient() { return patient; } public void setPatient(Patient patient) { this.patient = patient; } public LocalDate getDate() { return date; } public void setDate(LocalDate date) { this.date = date; } public LocalTime getTime() { return time; } public void setTime(LocalTime time) { this.time = time; } public int getDurationHours() { return durationHours; } public void setDurationHours(int durationHours) { this.durationHours = durationHours; } public double getCost() { return cost; } public void setCost(double cost) { this.cost = cost; } public String getNotes() { return notes; } public void setNotes(String notes) { this.notes = notes; } public ArrayList<File> getImageFiles() { return imageFiles; } public void setImageFiles(ArrayList<File> imageFiles) { this.imageFiles = imageFiles; } }"}]}}
{"project_id":214,"chunk_id":1,"content":{"main_file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/gui/MainWindow.java","main_file_content":"package com.cj.wscc.gui; import com.cj.wscc.console.Consultation; import com.cj.wscc.console.Doctor; import com.formdev.flatlaf.ui.FlatRoundBorder; import com.github.lgooddatepicker.components.DateTimePicker; import com.github.lgooddatepicker.components.TimePickerSettings; import com.github.lgooddatepicker.optionalusertools.PickerUtilities; import com.github.lgooddatepicker.optionalusertools.TimeVetoPolicy; import javax.crypto.Cipher; import javax.swing.*; import javax.swing.border.CompoundBorder; import javax.swing.border.EmptyBorder; import javax.swing.border.TitledBorder; import javax.swing.table.AbstractTableModel; import javax.swing.table.TableRowSorter; import java.awt.*; import java.awt.event.ActionEvent; import java.awt.event.FocusAdapter; import java.awt.event.FocusEvent; import java.io.*; import java.nio.file.Files; import java.nio.file.Paths; import java.security.Key; import java.text.DecimalFormat; import java.time.LocalDate; import java.time.LocalDateTime; import java.time.LocalTime; import java.util.ArrayList; import java.util.Random; import java.util.stream.Collectors; public class MainWindow extends JFrame { private final ArrayList<Doctor> doctors; private static ArrayList<Consultation> consultations = new ArrayList<>(); private static DocsTableComp docsTableComp; private static ConsTableComp consTableComp; private Doctor selectedDoctor; private static Consultation selectedConsultation; private LocalDate selectedDate; private LocalTime selectedTime; public MainWindow(ArrayList<Doctor> doctors) { super(\"Westminster Skill Consultation Centre\"); setSize(1280, 720); setLocationRelativeTo(null); setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); setLayout(new BorderLayout()); this.doctors = doctors; loadConsultations(); add(new TopPanelComp(), BorderLayout.NORTH); add(new LeftPanelComp(), BorderLayout.WEST); RightPanelComp rightPanelComp = new RightPanelComp(); docsTableComp = new DocsTableComp(); rightPanelComp.add(docsTableComp); consTableComp = new ConsTableComp(consultations); rightPanelComp.add(consTableComp, 1); add(rightPanelComp); CopyrightComp copyrightComp = new CopyrightComp(); add(copyrightComp, BorderLayout.SOUTH); } public void handleBtnClick(ActionEvent e) { JButton btn = (JButton) e.getSource(); switch (btn.getText()) { case \"Check Availability\" -> checkAvailability(); case \"Book Consultation\" -> bookConsultation(); case \"View Consultation\" -> viewConsultation(); case \"Edit Consultation\" -> editConsultation(); case \"Remove Consultation\" -> removeConsultation(); } } public void checkAvailability() { if (selectedDoctor == null) { JOptionPane.showMessageDialog( null, \"Please select a doctor from the Doctors table first\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else if (selectedDate == null || selectedTime == null) { JOptionPane.showMessageDialog( null, \"Please select a date and time\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { if (isDoctorAvailable(null)) { JOptionPane.showMessageDialog( null, \"Doctor is available at the selected time\", \"Info\", JOptionPane.INFORMATION_MESSAGE ); } else { JOptionPane.showMessageDialog( null, \"Unfortunately, the doctor is unavailable at the chosen time\", \"Error\", JOptionPane.ERROR_MESSAGE ); } } } public boolean isDoctorAvailable(Doctor doctor) { if (doctor == null) { doctor = selectedDoctor; } Doctor finalDoctor = doctor; ArrayList<Consultation> filteredConsultations = consultations.stream() .filter(c -> c.getDoctor().getMedicalLicenseNo().equalsIgnoreCase(finalDoctor.getMedicalLicenseNo())) .collect(Collectors.toCollection(ArrayList::new)); LocalDate date; LocalTime time; LocalDateTime startDateTime; LocalDateTime endDateTime; LocalDateTime selectedDateTime = selectedDate.atTime(selectedTime); boolean isAvailable = true; for (Consultation c : filteredConsultations) { date = c.getDate(); time = c.getTime(); startDateTime = date.atTime(time); endDateTime = startDateTime.plusHours(c.getDurationHours()); if (selectedDateTime.equals(startDateTime)) { isAvailable = false; } else if (selectedDateTime.isAfter(startDateTime) && selectedDateTime.isBefore(endDateTime)) { isAvailable = false; } } return isAvailable; } public Doctor getRandomAvailableDoctor() { ArrayList<Doctor> availableDoctors = new ArrayList<>(); ArrayList<Doctor> doctorsWithConsultations = new ArrayList<>(); for (Consultation c : consultations) { if (!doctorsWithConsultations.contains(c.getDoctor())) { doctorsWithConsultations.add(c.getDoctor()); } } for (Doctor d : doctorsWithConsultations) { if (isDoctorAvailable(d)) { availableDoctors.add(d); } } for (Doctor d : doctors) { if (!doctorsWithConsultations.contains(d)) { availableDoctors.add(d); } } ArrayList<Doctor> availableDoctorsSameSpeciality = new ArrayList<>(); availableDoctors.forEach(d -> { if (d.getSpecialisation().equalsIgnoreCase(selectedDoctor.getSpecialisation())) { availableDoctorsSameSpeciality.add(d); } }); if (availableDoctorsSameSpeciality.size() > 0) { Random rand = new Random(); int bound = availableDoctorsSameSpeciality.size(); int randIndex = rand.nextInt(bound); return availableDoctorsSameSpeciality.get(randIndex); } Random rand = new Random(); int bound = availableDoctors.size(); if (bound > 0) { int randIndex = rand.nextInt(bound); return availableDoctors.get(randIndex); } else { return null; } } public void viewConsultation() { if (selectedConsultation == null) { JOptionPane.showMessageDialog( null, \"Please select a consultation from the table to view\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { ViewConsultationWindow viewConsultationWindow = new ViewConsultationWindow(selectedConsultation); viewConsultationWindow.setVisible(true); } } public void bookConsultation() { if (selectedDoctor == null) { JOptionPane.showMessageDialog( null, \"Please select a doctor from the Doctors table first\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else if (selectedDate == null || selectedTime == null) { JOptionPane.showMessageDialog( null, \"Please select a date and time\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else if (!isDoctorAvailable(null)) { Doctor randomAvailableDoctor = getRandomAvailableDoctor(); if (randomAvailableDoctor == null) { JOptionPane.showMessageDialog( null, \"No doctors are available at the selected time\\nPlease choose another time.\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { String msg = String.format( \"<b>Dr. %s</b> is <span style=\\\"color:red\\\"><b>not available</b></span> at the selected time.<br>\" + \"However <b>Dr. %s</b> is available at the selected time.<br>\" + \"Book consultation with <b>Dr. %s</b>?\", selectedDoctor.getFullName(), randomAvailableDoctor.getFullName(), randomAvailableDoctor.getFullName() ); JEditorPane editorPane = new JEditorPane(); editorPane.setContentType(\"text/html\"); editorPane.setText(msg); JOptionPane jOptionPane = new JOptionPane(); editorPane.setBackground(jOptionPane.getBackground()); int result = JOptionPane.showConfirmDialog( null, editorPane, \"Confirm\", JOptionPane.OK_CANCEL_OPTION ); if (result == JOptionPane.OK_OPTION) { AddConsultationWindow consWindow = new AddConsultationWindow(consultations, randomAvailableDoctor, selectedDate, selectedTime); consWindow.setVisible(true); consWindow.toFront(); } } } else { AddConsultationWindow consWindow = new AddConsultationWindow(consultations, selectedDoctor, selectedDate, selectedTime); consWindow.setVisible(true); consWindow.toFront(); } } public void editConsultation() { if (selectedConsultation == null) { JOptionPane.showMessageDialog( null, \"Please select a consultation from the table to edit\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { EditConsultationWindow editConsultationWindow = new EditConsultationWindow(consultations, selectedConsultation); editConsultationWindow.setVisible(true); } } public static void addConsultation(Consultation consultation) { consultations.add(consultation); saveConsultations(); updateConsTableModel(); } public void removeConsultation() { if (selectedConsultation == null) { JOptionPane.showMessageDialog( null, \"Please select a consultation from the table to remove\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { int result = JOptionPane.showConfirmDialog( null, String.format(\"Are you sure you want to remove consultation %s?\", selectedConsultation.getId()), \"Confirm\", JOptionPane.YES_NO_OPTION ); if (result == JOptionPane.YES_OPTION) { consultations.remove(selectedConsultation); removeConsultationImgFiles(null); selectedConsultation = null; saveConsultations(); updateConsTableModel(); JOptionPane.showMessageDialog( null, \"Consultation removed successfully.\", \"Info\", JOptionPane.INFORMATION_MESSAGE ); } } } public static void removeConsultationImgFiles(Consultation consultation) { if (consultation == null) { consultation = selectedConsultation; } if (consultation.getImageFiles() == null) { return; } final File parentDir = consultation.getImageFiles().get(0).getParentFile(); consultation.getImageFiles().forEach(f -> { if (f.exists()) { try { Files.delete(Paths.get(f.getAbsolutePath())); } catch (IOException e) { throw new RuntimeException(e); } } }); if (parentDir.exists()) { parentDir.delete(); } } public static void loadConsultations() { try { FileInputStream fis = new FileInputStream(\"consultations.bin\"); byte[] encryptedBytes = new byte[fis.available()]; fis.read(encryptedBytes); fis.close(); Key KEY = PasswordBasedKeyAES.getKey(); Cipher cipher = Cipher.getInstance(\"AES\"); cipher.init(Cipher.DECRYPT_MODE, KEY); byte[] decryptedBytes = cipher.doFinal(encryptedBytes); ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(decryptedBytes)); consultations = (ArrayList<Consultation>) ois.readObject(); ois.close(); } catch (Exception ignored) { } } public static void saveConsultations() { try { ByteArrayOutputStream baos = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(baos); oos.writeObject(consultations); oos.close(); byte[] serializedBytes = baos.toByteArray(); Key KEY = PasswordBasedKeyAES.getKey(); Cipher cipher = Cipher.getInstance(\"AES\"); cipher.init(Cipher.ENCRYPT_MODE, KEY); byte[] encryptedBytes = cipher.doFinal(serializedBytes); FileOutputStream fos = new FileOutputStream(\"consultations.bin\"); fos.write(encryptedBytes); fos.close(); } catch (Exception ignored) { } } public static void updateConsTableModel() { consTableComp.getConsTableModel().fireTableDataChanged(); } public static DocsTableComp getDocsTableComp() { return docsTableComp; } public class TopPanelComp extends JPanel { public TopPanelComp() { setBackground(new Color(0x3F4E4F)); setPreferredSize(new Dimension(0, 70)); setForeground(new Color(0xFFFFFF)); setLayout(new BorderLayout()); JLabel topLabel = new JLabel(\"Westminster Skin Consultation Centre\", SwingConstants.CENTER); topLabel.setFont(new Font(\"SansSerif\", Font.PLAIN, 30)); topLabel.setForeground(new Color(0xFFFFFF)); add(topLabel, BorderLayout.CENTER); } } public class LeftPanelComp extends JPanel { public LeftPanelComp() { setLayout(new GridLayout(2, 1, 0, 10)); setBorder(new EmptyBorder(15, 10, 10, 10)); setBackground(Color.white); JPanel innerTopPanel = new JPanel(new GridLayout(3, 1, 0, 20)); innerTopPanel.setBorder(new CompoundBorder( new FlatRoundBorder(), new EmptyBorder(10, 10, 10, 10)) ); innerTopPanel.setBackground(Color.white); DateTimePickerComp dateTimePickerComp = new DateTimePickerComp(); innerTopPanel.add(dateTimePickerComp); MainBtnComp checkAvailabilityBtn = new MainBtnComp(\"Check Availability\"); checkAvailabilityBtn.addActionListener(MainWindow.this::handleBtnClick); innerTopPanel.add(checkAvailabilityBtn); MainBtnComp bookConsultationBtn = new MainBtnComp(\"Book Consultation\"); bookConsultationBtn.addActionListener(MainWindow.this::handleBtnClick); innerTopPanel.add(bookConsultationBtn); add(innerTopPanel); JPanel innerBottomPanel = new JPanel(new GridLayout(3, 1, 0, 20)); innerBottomPanel.setBorder(new CompoundBorder( new FlatRoundBorder(), new EmptyBorder(10, 10, 10, 10)) ); innerBottomPanel.setBackground(Color.white); MainBtnComp viewConsultationBtn = new MainBtnComp(\"View Consultation\"); viewConsultationBtn.addActionListener(MainWindow.this::handleBtnClick); innerBottomPanel.add(viewConsultationBtn); MainBtnComp editConsultationBtn = new MainBtnComp(\"Edit Consultation\"); editConsultationBtn.addActionListener(MainWindow.this::handleBtnClick); innerBottomPanel.add(editConsultationBtn); MainBtnComp removeConsultation = new MainBtnComp(\"Remove Consultation\"); removeConsultation.addActionListener(MainWindow.this::handleBtnClick); innerBottomPanel.add(removeConsultation); add(innerBottomPanel); } } public class DateTimePickerComp extends JPanel { public DateTimePickerComp() { setLayout(new BorderLayout()); setBackground(Color.white); DateTimePicker dateTimePicker = new DateTimePicker(); dateTimePicker.setBackground(Color.white); TimePickerSettings timeSettings = dateTimePicker.timePicker.getSettings(); timeSettings.setVetoPolicy(new SampleTimeVetoPolicy()); dateTimePicker.datePicker.setDateToToday(); selectedDate = dateTimePicker.getDatePicker().getDate(); dateTimePicker.timePicker.setTimeToNow(); selectedTime = dateTimePicker.getTimePicker().getTime(); int width = 24; int height = 24; ImageIcon oriCalIcon = new ImageIcon(\"resources/calendar_icon.png\"); Image caledarIcon = oriCalIcon.getImage().getScaledInstance(width, height, Image.SCALE_SMOOTH); JButton datePickerBtn = dateTimePicker.getDatePicker().getComponentToggleCalendarButton(); datePickerBtn.setPreferredSize(new Dimension(40, datePickerBtn.getPreferredSize().height)); datePickerBtn.setText(\"\"); datePickerBtn.setIcon(new ImageIcon(caledarIcon)); ImageIcon oriClockIcon = new ImageIcon(\"resources/clock_icon.png\"); Image clockIcon = oriClockIcon.getImage().getScaledInstance(width, height, Image.SCALE_SMOOTH); JButton timePickerBtn = dateTimePicker.getTimePicker().getComponentToggleTimeMenuButton(); timePickerBtn.setPreferredSize(new Dimension(40, timePickerBtn.getPreferredSize().height)); timePickerBtn.setText(\"\"); timePickerBtn.setIcon(new ImageIcon(clockIcon)); dateTimePicker.getDatePicker().addDateChangeListener(dateChangeEvent -> selectedDate = dateTimePicker.datePicker.getDate()); dateTimePicker.getTimePicker().addTimeChangeListener(timeChangeEvent -> selectedTime = dateTimePicker.timePicker.getTime()); add(dateTimePicker, BorderLayout.CENTER); } } public class MyTableComp extends JTable { public MyTableComp(AbstractTableModel tableModel, TableRowSorter rowSorter) { super(tableModel); setRowSorter(rowSorter); setFont(new Font(\"SansSerif\", Font.PLAIN, 17)); getTableHeader().setReorderingAllowed(false); getTableHeader().setFont(new Font(\"SansSerif\", Font.BOLD, 17)); setRowHeight(30); setSelectionMode(ListSelectionModel.SINGLE_SELECTION); } } public class DocsTableComp extends JPanel { private final MyTableComp myTableComp; private final DocsTableModel docsTableModel; public DocsTableComp() { setLayout(new BorderLayout(0, 5)); setBackground(new Color(0xFFFFFF)); TitledBorder titledBorder = new TitledBorder(\"Doctors\"); titledBorder.setBorder(new FlatRoundBorder()); titledBorder.setTitleFont(new Font(\"SansSerif\", Font.BOLD, 15)); setBorder(new CompoundBorder(titledBorder, new EmptyBorder(10, 10, 10, 10))); docsTableModel = new DocsTableModel(); myTableComp = new MyTableComp(docsTableModel, new TableRowSorter<>(docsTableModel)); myTableComp.getColumnModel().getColumn(2).setPreferredWidth(160); myTableComp.addFocusListener(new FocusAdapter() { @Override public void focusGained(FocusEvent e) { consTableComp.getTable().clearSelection(); selectedConsultation = null; } }); myTableComp.getSelectionModel().addListSelectionListener(listSelectionEvent -> { int row = myTableComp.getSelectedRow(); if (!listSelectionEvent.getValueIsAdjusting() && row >= 0) { String docLicense = (String) myTableComp.getValueAt(row, 3); selectedDoctor = doctors.stream() .filter(d -> d.getMedicalLicenseNo().equalsIgnoreCase(docLicense)) .findFirst() .orElse(null); } }); add(new JScrollPane(myTableComp), BorderLayout.CENTER); } public JTable getTable() { return myTableComp; } public AbstractTableModel getDocsTableModel() { return docsTableModel; } } public class ConsTableComp extends JPanel { private final MyTableComp myTableComp; private final ConsTableModel consTableModel; public ConsTableComp(ArrayList<Consultation> consultations) { setLayout(new BorderLayout(0, 5)); setBackground(new Color(0xFFFFFF)); TitledBorder titledBorder = new TitledBorder(\"Consultations\"); titledBorder.setBorder(new FlatRoundBorder()); titledBorder.setTitleFont(new Font(\"SansSerif\", Font.BOLD, 15)); setBorder(new CompoundBorder(titledBorder, new EmptyBorder(10, 10, 10, 10))); consTableModel = new ConsTableModel(consultations); myTableComp = new MyTableComp(consTableModel, new TableRowSorter<>(consTableModel)); myTableComp.addFocusListener(new FocusAdapter() { @Override public void focusGained(FocusEvent e) { docsTableComp.getTable().clearSelection(); selectedDoctor = null; } }); myTableComp.getSelectionModel().addListSelectionListener(listSelectionEvent -> { int row = myTableComp.getSelectedRow(); if (!listSelectionEvent.getValueIsAdjusting() && row >= 0) { String consId = (String) myTableComp.getValueAt(row, 0); selectedConsultation = consultations.stream() .filter(d -> d.getId().equalsIgnoreCase(consId)) .findFirst() .orElse(null); } }); add(new JScrollPane(myTableComp), BorderLayout.CENTER); } public JTable getTable() { return myTableComp; } public AbstractTableModel getConsTableModel() { return consTableModel; } } public class RightPanelComp extends JPanel { public RightPanelComp() { setLayout(new GridLayout(2, 1, 0, 15)); setPreferredSize(new Dimension(1000, 0)); setBorder(new EmptyBorder(10, 10, 10, 10)); setBackground(Color.white); } } public class MainBtnComp extends JButton { public MainBtnComp(String txt) { super(txt); setFont(new Font(\"SansSerif\", Font.BOLD, 16)); setFocusable(false); setFocusPainted(false); setBackground(new Color(0xDCD7C9)); setForeground(Color.black); } } public class CopyrightComp extends JPanel { public CopyrightComp() { setLayout(new BorderLayout()); setBorder(new EmptyBorder(0, 0, 10, 10)); setBackground(Color.white); JLabel jLabel = new JLabel(\"Copyright © 2023 Chamath Jayasena. All rights reserved.\"); jLabel.setFont(new Font(\"SansSerif\", Font.BOLD, 14)); jLabel.setEnabled(false); add(jLabel, BorderLayout.EAST); } } public class DocsTableModel extends AbstractTableModel { String[] colNames; Class[] colClasses; public DocsTableModel() { colNames = new String[]{ \"First Name\", \"Surname\", \"Specialisation\", \"License\", \"DOB\", \"Mobile\" }; colClasses = new Class[]{ String.class, String.class, String.class, String.class, LocalDate.class, String.class }; } @Override public int getRowCount() { return doctors.size(); } @Override public int getColumnCount() { return colNames.length; } @Override public Object getValueAt(int row, int col) { switch (col) { case 0 -> { return doctors.get(row).getName(); } case 1 -> { return doctors.get(row).getSurname(); } case 2 -> { return doctors.get(row).getSpecialisation(); } case 3 -> { return doctors.get(row).getMedicalLicenseNo(); } case 4 -> { return doctors.get(row).getDob(); } case 5 -> { return doctors.get(row).getMobiNo(); } default -> { return null; } } } public String getColumnName(int col) { return colNames[col]; } public Class getColumnClass(int col) { return colClasses[col]; } } public class ConsTableModel extends AbstractTableModel { private final ArrayList<Consultation> consultations; private final String[] colNames; private final Class[] colClasses; public ConsTableModel(ArrayList<Consultation> data) { this.consultations = data; colNames = new String[]{ \"ID\", \"Patient ID\", \"Patient\", \"Doctor\", \"Date\", \"Time\", \"Duration (h)\", \"Cost (£)\" }; colClasses = new Class[]{ String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class }; } @Override public int getRowCount() { return consultations.size(); } @Override public int getColumnCount() { return colNames.length; } @Override public Object getValueAt(int row, int col) { DecimalFormat df = new DecimalFormat(\"0.00\"); switch (col) { case 0 -> { return consultations.get(row).getId(); } case 1 -> { return consultations.get(row).getPatient().getPatientId(); } case 2 -> { return consultations.get(row).getPatient().getFullName(); } case 3 -> { return consultations.get(row).getDoctor().getFullName(); } case 4 -> { return consultations.get(row).getDate().toString(); } case 5 -> { return consultations.get(row).getTime().toString(); } case 6 -> { return consultations.get(row).getDurationHours() + \"\"; } case 7 -> { return df.format(consultations.get(row).getCost()); } default -> { return null; } } } public String getColumnName(int col) { return colNames[col]; } public Class getColumnClass(int col) { return colClasses[col]; } } private static class SampleTimeVetoPolicy implements TimeVetoPolicy { @Override public boolean isTimeAllowed(LocalTime time) { return PickerUtilities.isLocalTimeInRange( time, LocalTime.of(8, 00), LocalTime.of(17, 00), true); } } }","dependencies":[{"file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/console/Doctor.java","file_content":"package com.cj.wscc.console; import java.time.LocalDate; import java.util.Objects; public class Doctor extends Person { private String medicalLicenseNo; private String specialisation; public Doctor(String name, String surname, LocalDate DOB, String mobiNo, String medicalLicenseNo, String specialisation) { super(name, surname, DOB, mobiNo); this.medicalLicenseNo = medicalLicenseNo; this.specialisation = specialisation; } public String getMedicalLicenseNo() { return medicalLicenseNo; } public void setMedicalLicenseNo(String medicalLicenseNo) { this.medicalLicenseNo = medicalLicenseNo; } public String getSpecialisation() { return specialisation; } public void setSpecialisation(String specialisation) { this.specialisation = specialisation; } @Override public boolean equals(Object obj) { if (obj == this) { return true; } if (!(obj instanceof Person)) { return false; } Doctor other = (Doctor) obj; return Objects.equals(getFullName(), other.getFullName()) && Objects.equals(getMedicalLicenseNo(), other.getMedicalLicenseNo()); } }"}]}}
{"project_id":214,"chunk_id":2,"content":{"main_file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/gui/MainWindow.java","main_file_content":"package com.cj.wscc.gui; import com.cj.wscc.console.Consultation; import com.cj.wscc.console.Doctor; import com.formdev.flatlaf.ui.FlatRoundBorder; import com.github.lgooddatepicker.components.DateTimePicker; import com.github.lgooddatepicker.components.TimePickerSettings; import com.github.lgooddatepicker.optionalusertools.PickerUtilities; import com.github.lgooddatepicker.optionalusertools.TimeVetoPolicy; import javax.crypto.Cipher; import javax.swing.*; import javax.swing.border.CompoundBorder; import javax.swing.border.EmptyBorder; import javax.swing.border.TitledBorder; import javax.swing.table.AbstractTableModel; import javax.swing.table.TableRowSorter; import java.awt.*; import java.awt.event.ActionEvent; import java.awt.event.FocusAdapter; import java.awt.event.FocusEvent; import java.io.*; import java.nio.file.Files; import java.nio.file.Paths; import java.security.Key; import java.text.DecimalFormat; import java.time.LocalDate; import java.time.LocalDateTime; import java.time.LocalTime; import java.util.ArrayList; import java.util.Random; import java.util.stream.Collectors; public class MainWindow extends JFrame { private final ArrayList<Doctor> doctors; private static ArrayList<Consultation> consultations = new ArrayList<>(); private static DocsTableComp docsTableComp; private static ConsTableComp consTableComp; private Doctor selectedDoctor; private static Consultation selectedConsultation; private LocalDate selectedDate; private LocalTime selectedTime; public MainWindow(ArrayList<Doctor> doctors) { super(\"Westminster Skill Consultation Centre\"); setSize(1280, 720); setLocationRelativeTo(null); setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); setLayout(new BorderLayout()); this.doctors = doctors; loadConsultations(); add(new TopPanelComp(), BorderLayout.NORTH); add(new LeftPanelComp(), BorderLayout.WEST); RightPanelComp rightPanelComp = new RightPanelComp(); docsTableComp = new DocsTableComp(); rightPanelComp.add(docsTableComp); consTableComp = new ConsTableComp(consultations); rightPanelComp.add(consTableComp, 1); add(rightPanelComp); CopyrightComp copyrightComp = new CopyrightComp(); add(copyrightComp, BorderLayout.SOUTH); } public void handleBtnClick(ActionEvent e) { JButton btn = (JButton) e.getSource(); switch (btn.getText()) { case \"Check Availability\" -> checkAvailability(); case \"Book Consultation\" -> bookConsultation(); case \"View Consultation\" -> viewConsultation(); case \"Edit Consultation\" -> editConsultation(); case \"Remove Consultation\" -> removeConsultation(); } } public void checkAvailability() { if (selectedDoctor == null) { JOptionPane.showMessageDialog( null, \"Please select a doctor from the Doctors table first\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else if (selectedDate == null || selectedTime == null) { JOptionPane.showMessageDialog( null, \"Please select a date and time\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { if (isDoctorAvailable(null)) { JOptionPane.showMessageDialog( null, \"Doctor is available at the selected time\", \"Info\", JOptionPane.INFORMATION_MESSAGE ); } else { JOptionPane.showMessageDialog( null, \"Unfortunately, the doctor is unavailable at the chosen time\", \"Error\", JOptionPane.ERROR_MESSAGE ); } } } public boolean isDoctorAvailable(Doctor doctor) { if (doctor == null) { doctor = selectedDoctor; } Doctor finalDoctor = doctor; ArrayList<Consultation> filteredConsultations = consultations.stream() .filter(c -> c.getDoctor().getMedicalLicenseNo().equalsIgnoreCase(finalDoctor.getMedicalLicenseNo())) .collect(Collectors.toCollection(ArrayList::new)); LocalDate date; LocalTime time; LocalDateTime startDateTime; LocalDateTime endDateTime; LocalDateTime selectedDateTime = selectedDate.atTime(selectedTime); boolean isAvailable = true; for (Consultation c : filteredConsultations) { date = c.getDate(); time = c.getTime(); startDateTime = date.atTime(time); endDateTime = startDateTime.plusHours(c.getDurationHours()); if (selectedDateTime.equals(startDateTime)) { isAvailable = false; } else if (selectedDateTime.isAfter(startDateTime) && selectedDateTime.isBefore(endDateTime)) { isAvailable = false; } } return isAvailable; } public Doctor getRandomAvailableDoctor() { ArrayList<Doctor> availableDoctors = new ArrayList<>(); ArrayList<Doctor> doctorsWithConsultations = new ArrayList<>(); for (Consultation c : consultations) { if (!doctorsWithConsultations.contains(c.getDoctor())) { doctorsWithConsultations.add(c.getDoctor()); } } for (Doctor d : doctorsWithConsultations) { if (isDoctorAvailable(d)) { availableDoctors.add(d); } } for (Doctor d : doctors) { if (!doctorsWithConsultations.contains(d)) { availableDoctors.add(d); } } ArrayList<Doctor> availableDoctorsSameSpeciality = new ArrayList<>(); availableDoctors.forEach(d -> { if (d.getSpecialisation().equalsIgnoreCase(selectedDoctor.getSpecialisation())) { availableDoctorsSameSpeciality.add(d); } }); if (availableDoctorsSameSpeciality.size() > 0) { Random rand = new Random(); int bound = availableDoctorsSameSpeciality.size(); int randIndex = rand.nextInt(bound); return availableDoctorsSameSpeciality.get(randIndex); } Random rand = new Random(); int bound = availableDoctors.size(); if (bound > 0) { int randIndex = rand.nextInt(bound); return availableDoctors.get(randIndex); } else { return null; } } public void viewConsultation() { if (selectedConsultation == null) { JOptionPane.showMessageDialog( null, \"Please select a consultation from the table to view\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { ViewConsultationWindow viewConsultationWindow = new ViewConsultationWindow(selectedConsultation); viewConsultationWindow.setVisible(true); } } public void bookConsultation() { if (selectedDoctor == null) { JOptionPane.showMessageDialog( null, \"Please select a doctor from the Doctors table first\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else if (selectedDate == null || selectedTime == null) { JOptionPane.showMessageDialog( null, \"Please select a date and time\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else if (!isDoctorAvailable(null)) { Doctor randomAvailableDoctor = getRandomAvailableDoctor(); if (randomAvailableDoctor == null) { JOptionPane.showMessageDialog( null, \"No doctors are available at the selected time\\nPlease choose another time.\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { String msg = String.format( \"<b>Dr. %s</b> is <span style=\\\"color:red\\\"><b>not available</b></span> at the selected time.<br>\" + \"However <b>Dr. %s</b> is available at the selected time.<br>\" + \"Book consultation with <b>Dr. %s</b>?\", selectedDoctor.getFullName(), randomAvailableDoctor.getFullName(), randomAvailableDoctor.getFullName() ); JEditorPane editorPane = new JEditorPane(); editorPane.setContentType(\"text/html\"); editorPane.setText(msg); JOptionPane jOptionPane = new JOptionPane(); editorPane.setBackground(jOptionPane.getBackground()); int result = JOptionPane.showConfirmDialog( null, editorPane, \"Confirm\", JOptionPane.OK_CANCEL_OPTION ); if (result == JOptionPane.OK_OPTION) { AddConsultationWindow consWindow = new AddConsultationWindow(consultations, randomAvailableDoctor, selectedDate, selectedTime); consWindow.setVisible(true); consWindow.toFront(); } } } else { AddConsultationWindow consWindow = new AddConsultationWindow(consultations, selectedDoctor, selectedDate, selectedTime); consWindow.setVisible(true); consWindow.toFront(); } } public void editConsultation() { if (selectedConsultation == null) { JOptionPane.showMessageDialog( null, \"Please select a consultation from the table to edit\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { EditConsultationWindow editConsultationWindow = new EditConsultationWindow(consultations, selectedConsultation); editConsultationWindow.setVisible(true); } } public static void addConsultation(Consultation consultation) { consultations.add(consultation); saveConsultations(); updateConsTableModel(); } public void removeConsultation() { if (selectedConsultation == null) { JOptionPane.showMessageDialog( null, \"Please select a consultation from the table to remove\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { int result = JOptionPane.showConfirmDialog( null, String.format(\"Are you sure you want to remove consultation %s?\", selectedConsultation.getId()), \"Confirm\", JOptionPane.YES_NO_OPTION ); if (result == JOptionPane.YES_OPTION) { consultations.remove(selectedConsultation); removeConsultationImgFiles(null); selectedConsultation = null; saveConsultations(); updateConsTableModel(); JOptionPane.showMessageDialog( null, \"Consultation removed successfully.\", \"Info\", JOptionPane.INFORMATION_MESSAGE ); } } } public static void removeConsultationImgFiles(Consultation consultation) { if (consultation == null) { consultation = selectedConsultation; } if (consultation.getImageFiles() == null) { return; } final File parentDir = consultation.getImageFiles().get(0).getParentFile(); consultation.getImageFiles().forEach(f -> { if (f.exists()) { try { Files.delete(Paths.get(f.getAbsolutePath())); } catch (IOException e) { throw new RuntimeException(e); } } }); if (parentDir.exists()) { parentDir.delete(); } } public static void loadConsultations() { try { FileInputStream fis = new FileInputStream(\"consultations.bin\"); byte[] encryptedBytes = new byte[fis.available()]; fis.read(encryptedBytes); fis.close(); Key KEY = PasswordBasedKeyAES.getKey(); Cipher cipher = Cipher.getInstance(\"AES\"); cipher.init(Cipher.DECRYPT_MODE, KEY); byte[] decryptedBytes = cipher.doFinal(encryptedBytes); ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(decryptedBytes)); consultations = (ArrayList<Consultation>) ois.readObject(); ois.close(); } catch (Exception ignored) { } } public static void saveConsultations() { try { ByteArrayOutputStream baos = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(baos); oos.writeObject(consultations); oos.close(); byte[] serializedBytes = baos.toByteArray(); Key KEY = PasswordBasedKeyAES.getKey(); Cipher cipher = Cipher.getInstance(\"AES\"); cipher.init(Cipher.ENCRYPT_MODE, KEY); byte[] encryptedBytes = cipher.doFinal(serializedBytes); FileOutputStream fos = new FileOutputStream(\"consultations.bin\"); fos.write(encryptedBytes); fos.close(); } catch (Exception ignored) { } } public static void updateConsTableModel() { consTableComp.getConsTableModel().fireTableDataChanged(); } public static DocsTableComp getDocsTableComp() { return docsTableComp; } public class TopPanelComp extends JPanel { public TopPanelComp() { setBackground(new Color(0x3F4E4F)); setPreferredSize(new Dimension(0, 70)); setForeground(new Color(0xFFFFFF)); setLayout(new BorderLayout()); JLabel topLabel = new JLabel(\"Westminster Skin Consultation Centre\", SwingConstants.CENTER); topLabel.setFont(new Font(\"SansSerif\", Font.PLAIN, 30)); topLabel.setForeground(new Color(0xFFFFFF)); add(topLabel, BorderLayout.CENTER); } } public class LeftPanelComp extends JPanel { public LeftPanelComp() { setLayout(new GridLayout(2, 1, 0, 10)); setBorder(new EmptyBorder(15, 10, 10, 10)); setBackground(Color.white); JPanel innerTopPanel = new JPanel(new GridLayout(3, 1, 0, 20)); innerTopPanel.setBorder(new CompoundBorder( new FlatRoundBorder(), new EmptyBorder(10, 10, 10, 10)) ); innerTopPanel.setBackground(Color.white); DateTimePickerComp dateTimePickerComp = new DateTimePickerComp(); innerTopPanel.add(dateTimePickerComp); MainBtnComp checkAvailabilityBtn = new MainBtnComp(\"Check Availability\"); checkAvailabilityBtn.addActionListener(MainWindow.this::handleBtnClick); innerTopPanel.add(checkAvailabilityBtn); MainBtnComp bookConsultationBtn = new MainBtnComp(\"Book Consultation\"); bookConsultationBtn.addActionListener(MainWindow.this::handleBtnClick); innerTopPanel.add(bookConsultationBtn); add(innerTopPanel); JPanel innerBottomPanel = new JPanel(new GridLayout(3, 1, 0, 20)); innerBottomPanel.setBorder(new CompoundBorder( new FlatRoundBorder(), new EmptyBorder(10, 10, 10, 10)) ); innerBottomPanel.setBackground(Color.white); MainBtnComp viewConsultationBtn = new MainBtnComp(\"View Consultation\"); viewConsultationBtn.addActionListener(MainWindow.this::handleBtnClick); innerBottomPanel.add(viewConsultationBtn); MainBtnComp editConsultationBtn = new MainBtnComp(\"Edit Consultation\"); editConsultationBtn.addActionListener(MainWindow.this::handleBtnClick); innerBottomPanel.add(editConsultationBtn); MainBtnComp removeConsultation = new MainBtnComp(\"Remove Consultation\"); removeConsultation.addActionListener(MainWindow.this::handleBtnClick); innerBottomPanel.add(removeConsultation); add(innerBottomPanel); } } public class DateTimePickerComp extends JPanel { public DateTimePickerComp() { setLayout(new BorderLayout()); setBackground(Color.white); DateTimePicker dateTimePicker = new DateTimePicker(); dateTimePicker.setBackground(Color.white); TimePickerSettings timeSettings = dateTimePicker.timePicker.getSettings(); timeSettings.setVetoPolicy(new SampleTimeVetoPolicy()); dateTimePicker.datePicker.setDateToToday(); selectedDate = dateTimePicker.getDatePicker().getDate(); dateTimePicker.timePicker.setTimeToNow(); selectedTime = dateTimePicker.getTimePicker().getTime(); int width = 24; int height = 24; ImageIcon oriCalIcon = new ImageIcon(\"resources/calendar_icon.png\"); Image caledarIcon = oriCalIcon.getImage().getScaledInstance(width, height, Image.SCALE_SMOOTH); JButton datePickerBtn = dateTimePicker.getDatePicker().getComponentToggleCalendarButton(); datePickerBtn.setPreferredSize(new Dimension(40, datePickerBtn.getPreferredSize().height)); datePickerBtn.setText(\"\"); datePickerBtn.setIcon(new ImageIcon(caledarIcon)); ImageIcon oriClockIcon = new ImageIcon(\"resources/clock_icon.png\"); Image clockIcon = oriClockIcon.getImage().getScaledInstance(width, height, Image.SCALE_SMOOTH); JButton timePickerBtn = dateTimePicker.getTimePicker().getComponentToggleTimeMenuButton(); timePickerBtn.setPreferredSize(new Dimension(40, timePickerBtn.getPreferredSize().height)); timePickerBtn.setText(\"\"); timePickerBtn.setIcon(new ImageIcon(clockIcon)); dateTimePicker.getDatePicker().addDateChangeListener(dateChangeEvent -> selectedDate = dateTimePicker.datePicker.getDate()); dateTimePicker.getTimePicker().addTimeChangeListener(timeChangeEvent -> selectedTime = dateTimePicker.timePicker.getTime()); add(dateTimePicker, BorderLayout.CENTER); } } public class MyTableComp extends JTable { public MyTableComp(AbstractTableModel tableModel, TableRowSorter rowSorter) { super(tableModel); setRowSorter(rowSorter); setFont(new Font(\"SansSerif\", Font.PLAIN, 17)); getTableHeader().setReorderingAllowed(false); getTableHeader().setFont(new Font(\"SansSerif\", Font.BOLD, 17)); setRowHeight(30); setSelectionMode(ListSelectionModel.SINGLE_SELECTION); } } public class DocsTableComp extends JPanel { private final MyTableComp myTableComp; private final DocsTableModel docsTableModel; public DocsTableComp() { setLayout(new BorderLayout(0, 5)); setBackground(new Color(0xFFFFFF)); TitledBorder titledBorder = new TitledBorder(\"Doctors\"); titledBorder.setBorder(new FlatRoundBorder()); titledBorder.setTitleFont(new Font(\"SansSerif\", Font.BOLD, 15)); setBorder(new CompoundBorder(titledBorder, new EmptyBorder(10, 10, 10, 10))); docsTableModel = new DocsTableModel(); myTableComp = new MyTableComp(docsTableModel, new TableRowSorter<>(docsTableModel)); myTableComp.getColumnModel().getColumn(2).setPreferredWidth(160); myTableComp.addFocusListener(new FocusAdapter() { @Override public void focusGained(FocusEvent e) { consTableComp.getTable().clearSelection(); selectedConsultation = null; } }); myTableComp.getSelectionModel().addListSelectionListener(listSelectionEvent -> { int row = myTableComp.getSelectedRow(); if (!listSelectionEvent.getValueIsAdjusting() && row >= 0) { String docLicense = (String) myTableComp.getValueAt(row, 3); selectedDoctor = doctors.stream() .filter(d -> d.getMedicalLicenseNo().equalsIgnoreCase(docLicense)) .findFirst() .orElse(null); } }); add(new JScrollPane(myTableComp), BorderLayout.CENTER); } public JTable getTable() { return myTableComp; } public AbstractTableModel getDocsTableModel() { return docsTableModel; } } public class ConsTableComp extends JPanel { private final MyTableComp myTableComp; private final ConsTableModel consTableModel; public ConsTableComp(ArrayList<Consultation> consultations) { setLayout(new BorderLayout(0, 5)); setBackground(new Color(0xFFFFFF)); TitledBorder titledBorder = new TitledBorder(\"Consultations\"); titledBorder.setBorder(new FlatRoundBorder()); titledBorder.setTitleFont(new Font(\"SansSerif\", Font.BOLD, 15)); setBorder(new CompoundBorder(titledBorder, new EmptyBorder(10, 10, 10, 10))); consTableModel = new ConsTableModel(consultations); myTableComp = new MyTableComp(consTableModel, new TableRowSorter<>(consTableModel)); myTableComp.addFocusListener(new FocusAdapter() { @Override public void focusGained(FocusEvent e) { docsTableComp.getTable().clearSelection(); selectedDoctor = null; } }); myTableComp.getSelectionModel().addListSelectionListener(listSelectionEvent -> { int row = myTableComp.getSelectedRow(); if (!listSelectionEvent.getValueIsAdjusting() && row >= 0) { String consId = (String) myTableComp.getValueAt(row, 0); selectedConsultation = consultations.stream() .filter(d -> d.getId().equalsIgnoreCase(consId)) .findFirst() .orElse(null); } }); add(new JScrollPane(myTableComp), BorderLayout.CENTER); } public JTable getTable() { return myTableComp; } public AbstractTableModel getConsTableModel() { return consTableModel; } } public class RightPanelComp extends JPanel { public RightPanelComp() { setLayout(new GridLayout(2, 1, 0, 15)); setPreferredSize(new Dimension(1000, 0)); setBorder(new EmptyBorder(10, 10, 10, 10)); setBackground(Color.white); } } public class MainBtnComp extends JButton { public MainBtnComp(String txt) { super(txt); setFont(new Font(\"SansSerif\", Font.BOLD, 16)); setFocusable(false); setFocusPainted(false); setBackground(new Color(0xDCD7C9)); setForeground(Color.black); } } public class CopyrightComp extends JPanel { public CopyrightComp() { setLayout(new BorderLayout()); setBorder(new EmptyBorder(0, 0, 10, 10)); setBackground(Color.white); JLabel jLabel = new JLabel(\"Copyright © 2023 Chamath Jayasena. All rights reserved.\"); jLabel.setFont(new Font(\"SansSerif\", Font.BOLD, 14)); jLabel.setEnabled(false); add(jLabel, BorderLayout.EAST); } } public class DocsTableModel extends AbstractTableModel { String[] colNames; Class[] colClasses; public DocsTableModel() { colNames = new String[]{ \"First Name\", \"Surname\", \"Specialisation\", \"License\", \"DOB\", \"Mobile\" }; colClasses = new Class[]{ String.class, String.class, String.class, String.class, LocalDate.class, String.class }; } @Override public int getRowCount() { return doctors.size(); } @Override public int getColumnCount() { return colNames.length; } @Override public Object getValueAt(int row, int col) { switch (col) { case 0 -> { return doctors.get(row).getName(); } case 1 -> { return doctors.get(row).getSurname(); } case 2 -> { return doctors.get(row).getSpecialisation(); } case 3 -> { return doctors.get(row).getMedicalLicenseNo(); } case 4 -> { return doctors.get(row).getDob(); } case 5 -> { return doctors.get(row).getMobiNo(); } default -> { return null; } } } public String getColumnName(int col) { return colNames[col]; } public Class getColumnClass(int col) { return colClasses[col]; } } public class ConsTableModel extends AbstractTableModel { private final ArrayList<Consultation> consultations; private final String[] colNames; private final Class[] colClasses; public ConsTableModel(ArrayList<Consultation> data) { this.consultations = data; colNames = new String[]{ \"ID\", \"Patient ID\", \"Patient\", \"Doctor\", \"Date\", \"Time\", \"Duration (h)\", \"Cost (£)\" }; colClasses = new Class[]{ String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class }; } @Override public int getRowCount() { return consultations.size(); } @Override public int getColumnCount() { return colNames.length; } @Override public Object getValueAt(int row, int col) { DecimalFormat df = new DecimalFormat(\"0.00\"); switch (col) { case 0 -> { return consultations.get(row).getId(); } case 1 -> { return consultations.get(row).getPatient().getPatientId(); } case 2 -> { return consultations.get(row).getPatient().getFullName(); } case 3 -> { return consultations.get(row).getDoctor().getFullName(); } case 4 -> { return consultations.get(row).getDate().toString(); } case 5 -> { return consultations.get(row).getTime().toString(); } case 6 -> { return consultations.get(row).getDurationHours() + \"\"; } case 7 -> { return df.format(consultations.get(row).getCost()); } default -> { return null; } } } public String getColumnName(int col) { return colNames[col]; } public Class getColumnClass(int col) { return colClasses[col]; } } private static class SampleTimeVetoPolicy implements TimeVetoPolicy { @Override public boolean isTimeAllowed(LocalTime time) { return PickerUtilities.isLocalTimeInRange( time, LocalTime.of(8, 00), LocalTime.of(17, 00), true); } } }","dependencies":[{"file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/gui/AddConsultationWindow.java","file_content":"package com.cj.wscc.gui; import com.cj.wscc.console.Consultation; import com.cj.wscc.console.Doctor; import com.cj.wscc.console.Patient; import com.formdev.flatlaf.ui.FlatRoundBorder; import com.github.lgooddatepicker.components.DatePicker; import javax.crypto.Cipher; import javax.swing.*; import javax.swing.border.CompoundBorder; import javax.swing.border.EmptyBorder; import javax.swing.border.TitledBorder; import javax.swing.event.CaretEvent; import javax.swing.event.CaretListener; import javax.swing.event.DocumentEvent; import javax.swing.event.DocumentListener; import javax.swing.filechooser.FileNameExtensionFilter; import java.awt.*; import java.awt.event.ActionEvent; import java.io.*; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.security.Key; import java.security.NoSuchAlgorithmException; import java.security.spec.InvalidKeySpecException; import java.text.DecimalFormat; import java.time.LocalDate; import java.time.LocalTime; import java.util.*; public class AddConsultationWindow extends JFrame { private final ArrayList<Consultation> consultations; private final MyPatientIdComp patientIdComp; private final DurationCostComp durationCostComp; private final MyTxtFieldComp patientNameComp; private final MyTxtFieldComp patientSurnameComp; private final MyDOBComp patientDobComp; private final MyTxtFieldComp patientMobileComp; private final NotesComp notesComp; private final FileChooserComp fileChooserComp; private final Doctor selectedDoctor; private Patient selectedPatient; private final LocalDate selectedDate; private final LocalTime selectedTime; private final DecimalFormat df = new DecimalFormat(\"0.00\"); public AddConsultationWindow(ArrayList<Consultation> consultations, Doctor selectedDoctor, LocalDate selectedDate, LocalTime selectedTime) { super(\"Book Consultation\"); setSize(900, 700); setLocationRelativeTo(null); setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); this.consultations = consultations; this.selectedDoctor = selectedDoctor; this.selectedDate = selectedDate; this.selectedTime = selectedTime; add(new TopPanelComp(), BorderLayout.NORTH); GridBagLayout gridBagLayout = new GridBagLayout(); gridBagLayout.columnWidths = new int[]{50}; JPanel centerPanel = new JPanel(gridBagLayout); centerPanel.setBorder(new EmptyBorder(5, 5, 5, 5)); centerPanel.setBackground(Color.white); MyTxtFieldComp doctorComp = new MyTxtFieldComp(\"Doctor\"); JTextField docTxtField = (JTextField) doctorComp.getComponents()[0]; docTxtField.setText(\"Dr. \" + selectedDoctor.getFullName()); docTxtField.setEditable(false); docTxtField.setFocusable(false); GridBagConstraints c = new GridBagConstraints(); c.insets = new Insets(5, 5, 5, 5); c.fill = GridBagConstraints.BOTH; c.weighty = 1; c.weightx = 1; c.gridx = 0; c.gridy = 0; centerPanel.add(doctorComp, c); patientIdComp = new MyPatientIdComp(\"Patient ID *\"); c.gridx = 0; c.gridy = 1; centerPanel.add(patientIdComp, c); patientNameComp = new MyTxtFieldComp(\"Patient Name *\"); patientSurnameComp = new MyTxtFieldComp(\"Patient Surname *\"); c.gridx = 0; c.gridy = 2; centerPanel.add(patientNameComp, c); c.gridx = 1; c.gridy = 2; centerPanel.add(patientSurnameComp, c); c.gridx = 0; c.gridy = 3; patientDobComp = new MyDOBComp(); centerPanel.add(patientDobComp, c); c.gridx = 1; c.gridy = 3; patientMobileComp = new MyTxtFieldComp(\"Patient Mobile *\"); centerPanel.add(patientMobileComp, c); c.gridx = 1; c.gridy = 0; JPanel date = new MyTxtFieldComp(\"Date & Time\"); JTextField dateTxtField = (JTextField) date.getComponents()[0]; dateTxtField.setText(selectedDate.toString() + \" \" + selectedTime.toString()); dateTxtField.setEditable(false); dateTxtField.setFocusable(false); centerPanel.add(date, c); c.gridx = 1; c.gridy = 1; durationCostComp = new DurationCostComp(); centerPanel.add(durationCostComp, c); c.gridx = 0; c.gridy = 4; notesComp = new NotesComp(); centerPanel.add(notesComp, c); c.gridx = 1; c.gridy = 4; fileChooserComp = new FileChooserComp(); centerPanel.add(fileChooserComp, c); add(centerPanel, BorderLayout.CENTER); add(new BtnPanelComp(), BorderLayout.SOUTH); } public static class MyTxtFieldComp extends JPanel { private final JTextField txtField; public MyTxtFieldComp(String label) { setLayout(new BorderLayout()); setBackground(Color.white); TitledBorder titledBorder = new TitledBorder(label); titledBorder.setBorder(new FlatRoundBorder()); setBorder(new CompoundBorder( titledBorder, new EmptyBorder(0, 5, 5, 5))); txtField = new JTextField(); txtField.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); add(txtField); } public JTextField getTxtField() { return txtField; } } public class MyPatientIdComp extends JPanel { private final JComboBox comboBox; public MyPatientIdComp(String label) { setLayout(new BorderLayout()); setBackground(Color.white); TitledBorder titledBorder = new TitledBorder(label); titledBorder.setBorder(new FlatRoundBorder()); setBorder(new CompoundBorder( titledBorder, new EmptyBorder(0, 5, 5, 5))); ArrayList<Integer> suggestions = new ArrayList<>(); for (Consultation c : consultations) { if (!suggestions.contains(c.getPatient().getPatientId())) { suggestions.add(c.getPatient().getPatientId()); } } comboBox = new JComboBox(suggestions.toArray()); comboBox.setEditable(true); comboBox.setSelectedItem(null); comboBox.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); JTextField textField = (JTextField) comboBox.getEditor().getEditorComponent(); textField.getDocument().addDocumentListener(new DocumentListener() { @Override public void insertUpdate(DocumentEvent e) { setPatient(textField.getText()); updateCost(); } @Override public void removeUpdate(DocumentEvent e) { setPatient(textField.getText()); updateCost(); } @Override public void changedUpdate(DocumentEvent e) { setPatient(textField.getText()); updateCost(); } }); add(comboBox, BorderLayout.CENTER); } public JComboBox getJComboBox() { return comboBox; } } public static class MyDOBComp extends JPanel { DatePicker datePicker; public MyDOBComp() { setLayout(new BorderLayout()); setBackground(Color.white); TitledBorder titledBorder = new TitledBorder(\"Patient DOB\"); titledBorder.setBorder(new FlatRoundBorder()); setBorder(new CompoundBorder( titledBorder, new EmptyBorder(0, 5, 5, 5))); datePicker = new DatePicker(); datePicker.getComponentDateTextField().setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); add(datePicker); } public DatePicker getDatePicker() { return datePicker; } } public class DurationCostComp extends JPanel { JFormattedTextField durationTxtField; JTextField costTxtField; public DurationCostComp() { setLayout(new BorderLayout(5, 0)); setBackground(Color.white); JPanel durationContainer = new JPanel(new BorderLayout()); durationContainer.setBackground(Color.white); TitledBorder titledBorder = new TitledBorder(\"Duration (h) *\"); titledBorder.setBorder(new FlatRoundBorder()); durationContainer.setBorder(new CompoundBorder( titledBorder, new EmptyBorder(0, 5, 5, 5)) ); durationTxtField = new JFormattedTextField(); durationTxtField.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); durationTxtField.addCaretListener(new CaretListener() { @Override public void caretUpdate(CaretEvent caretEvent) { updateCost(); } }); durationContainer.add(durationTxtField); add(durationContainer, BorderLayout.CENTER); JPanel costContainer = new JPanel(new BorderLayout()); costContainer.setBackground(Color.white); TitledBorder titledBorder2 = new TitledBorder(\"Cost (£)\"); titledBorder2.setBorder(new FlatRoundBorder()); costContainer.setBorder(new CompoundBorder( titledBorder2, new EmptyBorder(0, 5, 5, 5)) ); costTxtField = new JTextField(); costTxtField.setColumns(8); costTxtField.setFocusable(false); costTxtField.setText(\"0.00\"); costTxtField.setEditable(false); costTxtField.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); costContainer.add(costTxtField); add(costContainer, BorderLayout.EAST); } public JTextField getDurationTxtField() { return durationTxtField; } public JTextField getCostTxtField() { return costTxtField; } } public static class NotesComp extends JPanel { private final JTextArea textArea; public NotesComp() { setLayout(new BorderLayout()); setBackground(Color.white); TitledBorder titledBorder = new TitledBorder(\"Notes\"); titledBorder.setBorder(new FlatRoundBorder()); setBorder(new CompoundBorder( titledBorder, new EmptyBorder(0, 5, 5, 5)) ); textArea = new JTextArea(); textArea.setRows(4); textArea.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); add(new JScrollPane(textArea), BorderLayout.CENTER); } public JTextArea getTextArea() { return textArea; } } public static class TopPanelComp extends JPanel { public TopPanelComp() { setLayout(new BorderLayout()); setBackground(new Color(0x3D8361)); setPreferredSize(new Dimension(0, 50)); setForeground(new Color(0xFFFFFF)); setLayout(new BorderLayout()); JLabel topLabel = new JLabel(\"Book Consultation\", SwingConstants.CENTER); topLabel.setFont(new Font(\"SansSerif\", Font.PLAIN, 25)); topLabel.setForeground(new Color(0xFFFFFF)); add(topLabel, BorderLayout.CENTER); } } public static class FileChooserComp extends JPanel { private final JFileChooser fileChooser; private final JTextArea textField; public FileChooserComp() { setLayout(new BorderLayout()); setBackground(Color.white); TitledBorder titledBorder = new TitledBorder(\"Add Images\"); titledBorder.setBorder(new FlatRoundBorder()); setBorder(new CompoundBorder( titledBorder, new EmptyBorder(0, 5, 5, 5)) ); fileChooser = new JFileChooser(); fileChooser.setMultiSelectionEnabled(true); fileChooser.setPreferredSize(new Dimension(1000, 500)); fileChooser.setAcceptAllFileFilterUsed(false); fileChooser.addChoosableFileFilter(new FileNameExtensionFilter(\"Image files\", \"jpg\", \"jpeg\", \"png\", \"gif\")); fileChooser.setDialogTitle(\"Choose image files\"); JButton chooseBtn = new JButton(\"Choose Images\"); textField = new JTextArea(); textField.setRows(3); textField.setEditable(false); textField.setFocusable(false); textField.setFont(new Font(\"SansSerif\", Font.PLAIN, 18)); chooseBtn.addActionListener(e -> { if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) { File[] files = fileChooser.getSelectedFiles(); StringBuilder sb = new StringBuilder(); for (File file : files) { sb.append(file.getName()).append(\"\\n\"); } textField.setText(sb.toString()); } }); add(chooseBtn, BorderLayout.NORTH); add(new JScrollPane(textField), BorderLayout.CENTER); } public JFileChooser getFileChooser() { return fileChooser; } } public class BtnPanelComp extends JPanel { public BtnPanelComp() { FlowLayout flowLayout = new FlowLayout(FlowLayout.RIGHT); flowLayout.setHgap(10); setLayout(flowLayout); setBackground(Color.white); setBorder(new EmptyBorder(0, 0, 5, 5)); JButton saveBtn = new JButton(\"Save\"); saveBtn.setPreferredSize(new Dimension(100, 40)); saveBtn.addActionListener(AddConsultationWindow.this::saveConsultation); add(saveBtn); JButton cancelBtn = new JButton(\"Cancel\"); cancelBtn.setPreferredSize(new Dimension(100, 40)); cancelBtn.addActionListener(AddConsultationWindow.this::closeWindow); add(cancelBtn); } } public void saveConsultation(ActionEvent event) { String idStr = (patientIdComp.getJComboBox().getSelectedItem() == null) ? \"\" : patientIdComp.getJComboBox().getSelectedItem().toString(); String name = patientNameComp.getTxtField().getText(); String surname = patientSurnameComp.getTxtField().getText(); String mobile = patientMobileComp.getTxtField().getText(); String duration = durationCostComp.getDurationTxtField().getText(); LinkedHashMap<String, String> requiredValues = new LinkedHashMap<>() {{ put(\"Patient ID\", idStr); put(\"Duration\", duration); put(\"Patient Name\", name); put(\"Patient Surname\", surname); put(\"Patient Mobile\", mobile); }}; for (Map.Entry<String, String> entry : requiredValues.entrySet()) { if (entry.getValue().isEmpty()) { JOptionPane.showMessageDialog( null, entry.getKey() + \" field cannot be empty\", \"Error\", JOptionPane.ERROR_MESSAGE ); return; } } int id; try { id = Integer.parseInt(idStr); } catch (Exception e) { JOptionPane.showMessageDialog( null, \"Patient ID must be a number\", \"Error\", JOptionPane.ERROR_MESSAGE ); return; } try { Integer.parseInt(mobile); } catch (Exception e) { JOptionPane.showMessageDialog( null, \"Patient mobile number must be a number\", \"Error\", JOptionPane.ERROR_MESSAGE ); return; } try { Integer.parseInt(duration); } catch (Exception e) { JOptionPane.showMessageDialog( null, \"Duration must be a number\", \"Error\", JOptionPane.ERROR_MESSAGE ); return; } Patient patient = new Patient( name, surname, patientDobComp.getDatePicker().getDate(), mobile, id ); final String consId = getRandID(); try { ArrayList<File> files = encryptImgFiles(consId); Consultation consultation = new Consultation( consId, selectedDoctor, patient, selectedDate, selectedTime, Integer.parseInt(duration), Double.parseDouble(durationCostComp.getCostTxtField().getText().replace(\"£\", \"\").trim()), notesComp.getTextArea().getText(), files ); MainWindow.addConsultation(consultation); closeWindow(event); JOptionPane.showMessageDialog( null, \"Consultation saved successfully!\", \"Success\", JOptionPane.INFORMATION_MESSAGE ); } catch (Exception e) { e.printStackTrace(); } } public void setPatient(String patientId) { if (patientId.isEmpty()) { selectedPatient = null; return; } int id; try { id = Integer.parseInt(patientId); } catch (Exception e) { return; } Consultation consultation = consultations.stream() .filter(c -> c.getPatient().getPatientId() == id) .findFirst() .orElse(null); if (consultation != null) { selectedPatient = consultation.getPatient(); patientNameComp.getTxtField().setText(selectedPatient.getName()); patientSurnameComp.getTxtField().setText(selectedPatient.getSurname()); patientDobComp.getDatePicker().setDate(selectedPatient.getDob()); patientMobileComp.getTxtField().setText(selectedPatient.getMobiNo()); } else { selectedPatient = null; patientNameComp.getTxtField().setText(\"\"); patientSurnameComp.getTxtField().setText(\"\"); patientDobComp.getDatePicker().setDate(null); patientMobileComp.getTxtField().setText(\"\"); } } public String getRandID() { UUID uuid = UUID.randomUUID(); return uuid.toString().substring(0, 8); } public ArrayList<File> encryptImgFiles(String consultationId) throws NoSuchAlgorithmException, InvalidKeySpecException { File[] files = fileChooserComp.getFileChooser().getSelectedFiles(); if (files.length == 0) { return null; } final String DEST = \"patient_img\" + \"/\" + consultationId; try { Files.createDirectories(Paths.get(DEST)); } catch (IOException e) { throw new RuntimeException(e); } ArrayList<File> encryptedFiles = new ArrayList<>(); String randFileName; String extension; Path dest; Key KEY = PasswordBasedKeyAES.getKey(); for (File f : files) { randFileName = getRandID(); extension = getFileExtension(f.getName()); dest = Paths.get(DEST, randFileName + extension); try { Cipher cipher = Cipher.getInstance(\"AES\"); cipher.init(Cipher.ENCRYPT_MODE, KEY); FileInputStream inputStream = new FileInputStream(f); File outputFile = new File(dest.toUri()); FileOutputStream outputStream = new FileOutputStream(outputFile); byte[] buffer = new byte[64]; int bytesRead; while ((bytesRead = inputStream.read(buffer)) != -1) { byte[] output = cipher.update(buffer, 0, bytesRead); if (output != null) { outputStream.write(output); } } byte[] outputBytes = cipher.doFinal(); if (outputBytes != null) { outputStream.write(outputBytes); } inputStream.close(); outputStream.close(); encryptedFiles.add(outputFile); } catch (Exception e) { e.printStackTrace(); } } fileChooserComp.getFileChooser().setSelectedFiles(null); return encryptedFiles; } public static String getFileExtension(String fileName) { String extension = \"\"; int index = fileName.lastIndexOf('.'); if (index > 0) { extension = fileName.substring(index + 1); } return \".\" + extension; } public void updateCost() { int hours; int cost; try { hours = !durationCostComp.getDurationTxtField().getText().isEmpty() ? Integer.parseInt(durationCostComp.getDurationTxtField().getText()) : 0; } catch (Exception e) { return; } if (selectedPatient == null) { cost = hours * 15; } else { cost = hours * 25; } durationCostComp.getCostTxtField().setText(df.format(cost)); } public void closeWindow(ActionEvent e) { JButton source = (JButton) e.getSource(); Container topLevelContainer = source.getTopLevelAncestor(); if (topLevelContainer instanceof JFrame) { ((JFrame) topLevelContainer).dispose(); } else if (topLevelContainer instanceof JDialog) { ((JDialog) topLevelContainer).dispose(); } } }"}]}}
{"project_id":214,"chunk_id":3,"content":{"main_file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/gui/MainWindow.java","main_file_content":"package com.cj.wscc.gui; import com.cj.wscc.console.Consultation; import com.cj.wscc.console.Doctor; import com.formdev.flatlaf.ui.FlatRoundBorder; import com.github.lgooddatepicker.components.DateTimePicker; import com.github.lgooddatepicker.components.TimePickerSettings; import com.github.lgooddatepicker.optionalusertools.PickerUtilities; import com.github.lgooddatepicker.optionalusertools.TimeVetoPolicy; import javax.crypto.Cipher; import javax.swing.*; import javax.swing.border.CompoundBorder; import javax.swing.border.EmptyBorder; import javax.swing.border.TitledBorder; import javax.swing.table.AbstractTableModel; import javax.swing.table.TableRowSorter; import java.awt.*; import java.awt.event.ActionEvent; import java.awt.event.FocusAdapter; import java.awt.event.FocusEvent; import java.io.*; import java.nio.file.Files; import java.nio.file.Paths; import java.security.Key; import java.text.DecimalFormat; import java.time.LocalDate; import java.time.LocalDateTime; import java.time.LocalTime; import java.util.ArrayList; import java.util.Random; import java.util.stream.Collectors; public class MainWindow extends JFrame { private final ArrayList<Doctor> doctors; private static ArrayList<Consultation> consultations = new ArrayList<>(); private static DocsTableComp docsTableComp; private static ConsTableComp consTableComp; private Doctor selectedDoctor; private static Consultation selectedConsultation; private LocalDate selectedDate; private LocalTime selectedTime; public MainWindow(ArrayList<Doctor> doctors) { super(\"Westminster Skill Consultation Centre\"); setSize(1280, 720); setLocationRelativeTo(null); setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); setLayout(new BorderLayout()); this.doctors = doctors; loadConsultations(); add(new TopPanelComp(), BorderLayout.NORTH); add(new LeftPanelComp(), BorderLayout.WEST); RightPanelComp rightPanelComp = new RightPanelComp(); docsTableComp = new DocsTableComp(); rightPanelComp.add(docsTableComp); consTableComp = new ConsTableComp(consultations); rightPanelComp.add(consTableComp, 1); add(rightPanelComp); CopyrightComp copyrightComp = new CopyrightComp(); add(copyrightComp, BorderLayout.SOUTH); } public void handleBtnClick(ActionEvent e) { JButton btn = (JButton) e.getSource(); switch (btn.getText()) { case \"Check Availability\" -> checkAvailability(); case \"Book Consultation\" -> bookConsultation(); case \"View Consultation\" -> viewConsultation(); case \"Edit Consultation\" -> editConsultation(); case \"Remove Consultation\" -> removeConsultation(); } } public void checkAvailability() { if (selectedDoctor == null) { JOptionPane.showMessageDialog( null, \"Please select a doctor from the Doctors table first\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else if (selectedDate == null || selectedTime == null) { JOptionPane.showMessageDialog( null, \"Please select a date and time\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { if (isDoctorAvailable(null)) { JOptionPane.showMessageDialog( null, \"Doctor is available at the selected time\", \"Info\", JOptionPane.INFORMATION_MESSAGE ); } else { JOptionPane.showMessageDialog( null, \"Unfortunately, the doctor is unavailable at the chosen time\", \"Error\", JOptionPane.ERROR_MESSAGE ); } } } public boolean isDoctorAvailable(Doctor doctor) { if (doctor == null) { doctor = selectedDoctor; } Doctor finalDoctor = doctor; ArrayList<Consultation> filteredConsultations = consultations.stream() .filter(c -> c.getDoctor().getMedicalLicenseNo().equalsIgnoreCase(finalDoctor.getMedicalLicenseNo())) .collect(Collectors.toCollection(ArrayList::new)); LocalDate date; LocalTime time; LocalDateTime startDateTime; LocalDateTime endDateTime; LocalDateTime selectedDateTime = selectedDate.atTime(selectedTime); boolean isAvailable = true; for (Consultation c : filteredConsultations) { date = c.getDate(); time = c.getTime(); startDateTime = date.atTime(time); endDateTime = startDateTime.plusHours(c.getDurationHours()); if (selectedDateTime.equals(startDateTime)) { isAvailable = false; } else if (selectedDateTime.isAfter(startDateTime) && selectedDateTime.isBefore(endDateTime)) { isAvailable = false; } } return isAvailable; } public Doctor getRandomAvailableDoctor() { ArrayList<Doctor> availableDoctors = new ArrayList<>(); ArrayList<Doctor> doctorsWithConsultations = new ArrayList<>(); for (Consultation c : consultations) { if (!doctorsWithConsultations.contains(c.getDoctor())) { doctorsWithConsultations.add(c.getDoctor()); } } for (Doctor d : doctorsWithConsultations) { if (isDoctorAvailable(d)) { availableDoctors.add(d); } } for (Doctor d : doctors) { if (!doctorsWithConsultations.contains(d)) { availableDoctors.add(d); } } ArrayList<Doctor> availableDoctorsSameSpeciality = new ArrayList<>(); availableDoctors.forEach(d -> { if (d.getSpecialisation().equalsIgnoreCase(selectedDoctor.getSpecialisation())) { availableDoctorsSameSpeciality.add(d); } }); if (availableDoctorsSameSpeciality.size() > 0) { Random rand = new Random(); int bound = availableDoctorsSameSpeciality.size(); int randIndex = rand.nextInt(bound); return availableDoctorsSameSpeciality.get(randIndex); } Random rand = new Random(); int bound = availableDoctors.size(); if (bound > 0) { int randIndex = rand.nextInt(bound); return availableDoctors.get(randIndex); } else { return null; } } public void viewConsultation() { if (selectedConsultation == null) { JOptionPane.showMessageDialog( null, \"Please select a consultation from the table to view\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { ViewConsultationWindow viewConsultationWindow = new ViewConsultationWindow(selectedConsultation); viewConsultationWindow.setVisible(true); } } public void bookConsultation() { if (selectedDoctor == null) { JOptionPane.showMessageDialog( null, \"Please select a doctor from the Doctors table first\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else if (selectedDate == null || selectedTime == null) { JOptionPane.showMessageDialog( null, \"Please select a date and time\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else if (!isDoctorAvailable(null)) { Doctor randomAvailableDoctor = getRandomAvailableDoctor(); if (randomAvailableDoctor == null) { JOptionPane.showMessageDialog( null, \"No doctors are available at the selected time\\nPlease choose another time.\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { String msg = String.format( \"<b>Dr. %s</b> is <span style=\\\"color:red\\\"><b>not available</b></span> at the selected time.<br>\" + \"However <b>Dr. %s</b> is available at the selected time.<br>\" + \"Book consultation with <b>Dr. %s</b>?\", selectedDoctor.getFullName(), randomAvailableDoctor.getFullName(), randomAvailableDoctor.getFullName() ); JEditorPane editorPane = new JEditorPane(); editorPane.setContentType(\"text/html\"); editorPane.setText(msg); JOptionPane jOptionPane = new JOptionPane(); editorPane.setBackground(jOptionPane.getBackground()); int result = JOptionPane.showConfirmDialog( null, editorPane, \"Confirm\", JOptionPane.OK_CANCEL_OPTION ); if (result == JOptionPane.OK_OPTION) { AddConsultationWindow consWindow = new AddConsultationWindow(consultations, randomAvailableDoctor, selectedDate, selectedTime); consWindow.setVisible(true); consWindow.toFront(); } } } else { AddConsultationWindow consWindow = new AddConsultationWindow(consultations, selectedDoctor, selectedDate, selectedTime); consWindow.setVisible(true); consWindow.toFront(); } } public void editConsultation() { if (selectedConsultation == null) { JOptionPane.showMessageDialog( null, \"Please select a consultation from the table to edit\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { EditConsultationWindow editConsultationWindow = new EditConsultationWindow(consultations, selectedConsultation); editConsultationWindow.setVisible(true); } } public static void addConsultation(Consultation consultation) { consultations.add(consultation); saveConsultations(); updateConsTableModel(); } public void removeConsultation() { if (selectedConsultation == null) { JOptionPane.showMessageDialog( null, \"Please select a consultation from the table to remove\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { int result = JOptionPane.showConfirmDialog( null, String.format(\"Are you sure you want to remove consultation %s?\", selectedConsultation.getId()), \"Confirm\", JOptionPane.YES_NO_OPTION ); if (result == JOptionPane.YES_OPTION) { consultations.remove(selectedConsultation); removeConsultationImgFiles(null); selectedConsultation = null; saveConsultations(); updateConsTableModel(); JOptionPane.showMessageDialog( null, \"Consultation removed successfully.\", \"Info\", JOptionPane.INFORMATION_MESSAGE ); } } } public static void removeConsultationImgFiles(Consultation consultation) { if (consultation == null) { consultation = selectedConsultation; } if (consultation.getImageFiles() == null) { return; } final File parentDir = consultation.getImageFiles().get(0).getParentFile(); consultation.getImageFiles().forEach(f -> { if (f.exists()) { try { Files.delete(Paths.get(f.getAbsolutePath())); } catch (IOException e) { throw new RuntimeException(e); } } }); if (parentDir.exists()) { parentDir.delete(); } } public static void loadConsultations() { try { FileInputStream fis = new FileInputStream(\"consultations.bin\"); byte[] encryptedBytes = new byte[fis.available()]; fis.read(encryptedBytes); fis.close(); Key KEY = PasswordBasedKeyAES.getKey(); Cipher cipher = Cipher.getInstance(\"AES\"); cipher.init(Cipher.DECRYPT_MODE, KEY); byte[] decryptedBytes = cipher.doFinal(encryptedBytes); ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(decryptedBytes)); consultations = (ArrayList<Consultation>) ois.readObject(); ois.close(); } catch (Exception ignored) { } } public static void saveConsultations() { try { ByteArrayOutputStream baos = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(baos); oos.writeObject(consultations); oos.close(); byte[] serializedBytes = baos.toByteArray(); Key KEY = PasswordBasedKeyAES.getKey(); Cipher cipher = Cipher.getInstance(\"AES\"); cipher.init(Cipher.ENCRYPT_MODE, KEY); byte[] encryptedBytes = cipher.doFinal(serializedBytes); FileOutputStream fos = new FileOutputStream(\"consultations.bin\"); fos.write(encryptedBytes); fos.close(); } catch (Exception ignored) { } } public static void updateConsTableModel() { consTableComp.getConsTableModel().fireTableDataChanged(); } public static DocsTableComp getDocsTableComp() { return docsTableComp; } public class TopPanelComp extends JPanel { public TopPanelComp() { setBackground(new Color(0x3F4E4F)); setPreferredSize(new Dimension(0, 70)); setForeground(new Color(0xFFFFFF)); setLayout(new BorderLayout()); JLabel topLabel = new JLabel(\"Westminster Skin Consultation Centre\", SwingConstants.CENTER); topLabel.setFont(new Font(\"SansSerif\", Font.PLAIN, 30)); topLabel.setForeground(new Color(0xFFFFFF)); add(topLabel, BorderLayout.CENTER); } } public class LeftPanelComp extends JPanel { public LeftPanelComp() { setLayout(new GridLayout(2, 1, 0, 10)); setBorder(new EmptyBorder(15, 10, 10, 10)); setBackground(Color.white); JPanel innerTopPanel = new JPanel(new GridLayout(3, 1, 0, 20)); innerTopPanel.setBorder(new CompoundBorder( new FlatRoundBorder(), new EmptyBorder(10, 10, 10, 10)) ); innerTopPanel.setBackground(Color.white); DateTimePickerComp dateTimePickerComp = new DateTimePickerComp(); innerTopPanel.add(dateTimePickerComp); MainBtnComp checkAvailabilityBtn = new MainBtnComp(\"Check Availability\"); checkAvailabilityBtn.addActionListener(MainWindow.this::handleBtnClick); innerTopPanel.add(checkAvailabilityBtn); MainBtnComp bookConsultationBtn = new MainBtnComp(\"Book Consultation\"); bookConsultationBtn.addActionListener(MainWindow.this::handleBtnClick); innerTopPanel.add(bookConsultationBtn); add(innerTopPanel); JPanel innerBottomPanel = new JPanel(new GridLayout(3, 1, 0, 20)); innerBottomPanel.setBorder(new CompoundBorder( new FlatRoundBorder(), new EmptyBorder(10, 10, 10, 10)) ); innerBottomPanel.setBackground(Color.white); MainBtnComp viewConsultationBtn = new MainBtnComp(\"View Consultation\"); viewConsultationBtn.addActionListener(MainWindow.this::handleBtnClick); innerBottomPanel.add(viewConsultationBtn); MainBtnComp editConsultationBtn = new MainBtnComp(\"Edit Consultation\"); editConsultationBtn.addActionListener(MainWindow.this::handleBtnClick); innerBottomPanel.add(editConsultationBtn); MainBtnComp removeConsultation = new MainBtnComp(\"Remove Consultation\"); removeConsultation.addActionListener(MainWindow.this::handleBtnClick); innerBottomPanel.add(removeConsultation); add(innerBottomPanel); } } public class DateTimePickerComp extends JPanel { public DateTimePickerComp() { setLayout(new BorderLayout()); setBackground(Color.white); DateTimePicker dateTimePicker = new DateTimePicker(); dateTimePicker.setBackground(Color.white); TimePickerSettings timeSettings = dateTimePicker.timePicker.getSettings(); timeSettings.setVetoPolicy(new SampleTimeVetoPolicy()); dateTimePicker.datePicker.setDateToToday(); selectedDate = dateTimePicker.getDatePicker().getDate(); dateTimePicker.timePicker.setTimeToNow(); selectedTime = dateTimePicker.getTimePicker().getTime(); int width = 24; int height = 24; ImageIcon oriCalIcon = new ImageIcon(\"resources/calendar_icon.png\"); Image caledarIcon = oriCalIcon.getImage().getScaledInstance(width, height, Image.SCALE_SMOOTH); JButton datePickerBtn = dateTimePicker.getDatePicker().getComponentToggleCalendarButton(); datePickerBtn.setPreferredSize(new Dimension(40, datePickerBtn.getPreferredSize().height)); datePickerBtn.setText(\"\"); datePickerBtn.setIcon(new ImageIcon(caledarIcon)); ImageIcon oriClockIcon = new ImageIcon(\"resources/clock_icon.png\"); Image clockIcon = oriClockIcon.getImage().getScaledInstance(width, height, Image.SCALE_SMOOTH); JButton timePickerBtn = dateTimePicker.getTimePicker().getComponentToggleTimeMenuButton(); timePickerBtn.setPreferredSize(new Dimension(40, timePickerBtn.getPreferredSize().height)); timePickerBtn.setText(\"\"); timePickerBtn.setIcon(new ImageIcon(clockIcon)); dateTimePicker.getDatePicker().addDateChangeListener(dateChangeEvent -> selectedDate = dateTimePicker.datePicker.getDate()); dateTimePicker.getTimePicker().addTimeChangeListener(timeChangeEvent -> selectedTime = dateTimePicker.timePicker.getTime()); add(dateTimePicker, BorderLayout.CENTER); } } public class MyTableComp extends JTable { public MyTableComp(AbstractTableModel tableModel, TableRowSorter rowSorter) { super(tableModel); setRowSorter(rowSorter); setFont(new Font(\"SansSerif\", Font.PLAIN, 17)); getTableHeader().setReorderingAllowed(false); getTableHeader().setFont(new Font(\"SansSerif\", Font.BOLD, 17)); setRowHeight(30); setSelectionMode(ListSelectionModel.SINGLE_SELECTION); } } public class DocsTableComp extends JPanel { private final MyTableComp myTableComp; private final DocsTableModel docsTableModel; public DocsTableComp() { setLayout(new BorderLayout(0, 5)); setBackground(new Color(0xFFFFFF)); TitledBorder titledBorder = new TitledBorder(\"Doctors\"); titledBorder.setBorder(new FlatRoundBorder()); titledBorder.setTitleFont(new Font(\"SansSerif\", Font.BOLD, 15)); setBorder(new CompoundBorder(titledBorder, new EmptyBorder(10, 10, 10, 10))); docsTableModel = new DocsTableModel(); myTableComp = new MyTableComp(docsTableModel, new TableRowSorter<>(docsTableModel)); myTableComp.getColumnModel().getColumn(2).setPreferredWidth(160); myTableComp.addFocusListener(new FocusAdapter() { @Override public void focusGained(FocusEvent e) { consTableComp.getTable().clearSelection(); selectedConsultation = null; } }); myTableComp.getSelectionModel().addListSelectionListener(listSelectionEvent -> { int row = myTableComp.getSelectedRow(); if (!listSelectionEvent.getValueIsAdjusting() && row >= 0) { String docLicense = (String) myTableComp.getValueAt(row, 3); selectedDoctor = doctors.stream() .filter(d -> d.getMedicalLicenseNo().equalsIgnoreCase(docLicense)) .findFirst() .orElse(null); } }); add(new JScrollPane(myTableComp), BorderLayout.CENTER); } public JTable getTable() { return myTableComp; } public AbstractTableModel getDocsTableModel() { return docsTableModel; } } public class ConsTableComp extends JPanel { private final MyTableComp myTableComp; private final ConsTableModel consTableModel; public ConsTableComp(ArrayList<Consultation> consultations) { setLayout(new BorderLayout(0, 5)); setBackground(new Color(0xFFFFFF)); TitledBorder titledBorder = new TitledBorder(\"Consultations\"); titledBorder.setBorder(new FlatRoundBorder()); titledBorder.setTitleFont(new Font(\"SansSerif\", Font.BOLD, 15)); setBorder(new CompoundBorder(titledBorder, new EmptyBorder(10, 10, 10, 10))); consTableModel = new ConsTableModel(consultations); myTableComp = new MyTableComp(consTableModel, new TableRowSorter<>(consTableModel)); myTableComp.addFocusListener(new FocusAdapter() { @Override public void focusGained(FocusEvent e) { docsTableComp.getTable().clearSelection(); selectedDoctor = null; } }); myTableComp.getSelectionModel().addListSelectionListener(listSelectionEvent -> { int row = myTableComp.getSelectedRow(); if (!listSelectionEvent.getValueIsAdjusting() && row >= 0) { String consId = (String) myTableComp.getValueAt(row, 0); selectedConsultation = consultations.stream() .filter(d -> d.getId().equalsIgnoreCase(consId)) .findFirst() .orElse(null); } }); add(new JScrollPane(myTableComp), BorderLayout.CENTER); } public JTable getTable() { return myTableComp; } public AbstractTableModel getConsTableModel() { return consTableModel; } } public class RightPanelComp extends JPanel { public RightPanelComp() { setLayout(new GridLayout(2, 1, 0, 15)); setPreferredSize(new Dimension(1000, 0)); setBorder(new EmptyBorder(10, 10, 10, 10)); setBackground(Color.white); } } public class MainBtnComp extends JButton { public MainBtnComp(String txt) { super(txt); setFont(new Font(\"SansSerif\", Font.BOLD, 16)); setFocusable(false); setFocusPainted(false); setBackground(new Color(0xDCD7C9)); setForeground(Color.black); } } public class CopyrightComp extends JPanel { public CopyrightComp() { setLayout(new BorderLayout()); setBorder(new EmptyBorder(0, 0, 10, 10)); setBackground(Color.white); JLabel jLabel = new JLabel(\"Copyright © 2023 Chamath Jayasena. All rights reserved.\"); jLabel.setFont(new Font(\"SansSerif\", Font.BOLD, 14)); jLabel.setEnabled(false); add(jLabel, BorderLayout.EAST); } } public class DocsTableModel extends AbstractTableModel { String[] colNames; Class[] colClasses; public DocsTableModel() { colNames = new String[]{ \"First Name\", \"Surname\", \"Specialisation\", \"License\", \"DOB\", \"Mobile\" }; colClasses = new Class[]{ String.class, String.class, String.class, String.class, LocalDate.class, String.class }; } @Override public int getRowCount() { return doctors.size(); } @Override public int getColumnCount() { return colNames.length; } @Override public Object getValueAt(int row, int col) { switch (col) { case 0 -> { return doctors.get(row).getName(); } case 1 -> { return doctors.get(row).getSurname(); } case 2 -> { return doctors.get(row).getSpecialisation(); } case 3 -> { return doctors.get(row).getMedicalLicenseNo(); } case 4 -> { return doctors.get(row).getDob(); } case 5 -> { return doctors.get(row).getMobiNo(); } default -> { return null; } } } public String getColumnName(int col) { return colNames[col]; } public Class getColumnClass(int col) { return colClasses[col]; } } public class ConsTableModel extends AbstractTableModel { private final ArrayList<Consultation> consultations; private final String[] colNames; private final Class[] colClasses; public ConsTableModel(ArrayList<Consultation> data) { this.consultations = data; colNames = new String[]{ \"ID\", \"Patient ID\", \"Patient\", \"Doctor\", \"Date\", \"Time\", \"Duration (h)\", \"Cost (£)\" }; colClasses = new Class[]{ String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class }; } @Override public int getRowCount() { return consultations.size(); } @Override public int getColumnCount() { return colNames.length; } @Override public Object getValueAt(int row, int col) { DecimalFormat df = new DecimalFormat(\"0.00\"); switch (col) { case 0 -> { return consultations.get(row).getId(); } case 1 -> { return consultations.get(row).getPatient().getPatientId(); } case 2 -> { return consultations.get(row).getPatient().getFullName(); } case 3 -> { return consultations.get(row).getDoctor().getFullName(); } case 4 -> { return consultations.get(row).getDate().toString(); } case 5 -> { return consultations.get(row).getTime().toString(); } case 6 -> { return consultations.get(row).getDurationHours() + \"\"; } case 7 -> { return df.format(consultations.get(row).getCost()); } default -> { return null; } } } public String getColumnName(int col) { return colNames[col]; } public Class getColumnClass(int col) { return colClasses[col]; } } private static class SampleTimeVetoPolicy implements TimeVetoPolicy { @Override public boolean isTimeAllowed(LocalTime time) { return PickerUtilities.isLocalTimeInRange( time, LocalTime.of(8, 00), LocalTime.of(17, 00), true); } } }","dependencies":[{"file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/gui/EditConsultationWindow.java","file_content":"package com.cj.wscc.gui; import com.cj.wscc.console.Consultation; import com.cj.wscc.console.Patient; import com.github.lgooddatepicker.components.DatePicker; import javax.crypto.Cipher; import javax.swing.*; import javax.swing.border.CompoundBorder; import javax.swing.border.EmptyBorder; import javax.swing.event.CaretEvent; import javax.swing.event.CaretListener; import javax.swing.event.DocumentEvent; import javax.swing.event.DocumentListener; import javax.swing.filechooser.FileNameExtensionFilter; import java.awt.*; import java.awt.event.ActionEvent; import java.io.File; import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.security.Key; import java.security.NoSuchAlgorithmException; import java.security.spec.InvalidKeySpecException; import java.text.DecimalFormat; import java.util.ArrayList; import java.util.LinkedHashMap; import java.util.Map; import java.util.UUID; public class EditConsultationWindow extends JFrame { private ArrayList<Consultation> consultations; private Consultation selectedConsultation; private MyPatientIdComp patientIdComp; private DurationCostComp durationCostComp; private MyTxtFieldComp patientNameComp; private MyTxtFieldComp patientSurnameComp; private MyDOBComp patientDobComp; private MyTxtFieldComp patientMobileComp; private NotesComp notesComp; private FileChooserComp fileChooserComp; private Patient selectedPatient; private final DecimalFormat df = new DecimalFormat(\"0.00\"); public EditConsultationWindow(ArrayList<Consultation> consultations, Consultation selectedConsultation) { super(\"Edit Consultation\"); setSize(900, 700); setLocationRelativeTo(null); setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); this.consultations = consultations; this.selectedConsultation = selectedConsultation; this.selectedPatient = selectedConsultation.getPatient(); add(new TopPanelComp(), BorderLayout.NORTH); GridBagLayout gridBagLayout = new GridBagLayout(); gridBagLayout.columnWidths = new int[]{50}; JPanel centerPanel = new JPanel(gridBagLayout); centerPanel.setBorder(new EmptyBorder(5, 5, 5, 5)); centerPanel.setBackground(new Color(0xFFFFFF)); MyTxtFieldComp doctorComp = new MyTxtFieldComp(\"Doctor\"); JTextField docTxtField = (JTextField) doctorComp.getComponents()[0]; docTxtField.setText(\"Dr. \" + selectedConsultation.getDoctor().getFullName()); docTxtField.setEditable(false); docTxtField.setFocusable(false); GridBagConstraints c = new GridBagConstraints(); c.insets = new Insets(5, 5, 5, 5); c.fill = GridBagConstraints.BOTH; c.weighty = 1; c.weightx = 1; c.gridx = 0; c.gridy = 0; centerPanel.add(doctorComp, c); patientNameComp = new MyTxtFieldComp(\"Patient Name\"); patientNameComp.getTxtField().setText(selectedConsultation.getPatient().getName()); patientSurnameComp = new MyTxtFieldComp(\"Patient Surname\"); patientSurnameComp.getTxtField().setText(selectedConsultation.getPatient().getSurname()); c.gridx = 0; c.gridy = 2; centerPanel.add(patientNameComp, c); c.gridx = 1; c.gridy = 2; centerPanel.add(patientSurnameComp, c); c.gridx = 0; c.gridy = 3; patientDobComp = new MyDOBComp(); patientDobComp.getDatePicker().setDate(selectedConsultation.getPatient().getDob()); centerPanel.add(patientDobComp, c); c.gridx = 1; c.gridy = 3; patientMobileComp = new MyTxtFieldComp(\"Patient Mobile\"); patientMobileComp.getTxtField().setText(selectedConsultation.getPatient().getMobiNo()); centerPanel.add(patientMobileComp, c); c.gridx = 1; c.gridy = 0; JPanel date = new MyTxtFieldComp(\"Date & Time\"); JTextField dateTxtField = (JTextField) date.getComponents()[0]; dateTxtField.setText( selectedConsultation.getDate().toString() + \" \" + selectedConsultation.getTime().toString() ); dateTxtField.setEditable(false); dateTxtField.setFocusable(false); centerPanel.add(date, c); c.gridx = 1; c.gridy = 1; durationCostComp = new DurationCostComp(); durationCostComp.getDurationTxtField().setText(selectedConsultation.getDurationHours() + \"\"); durationCostComp.getCostTxtField().setText(df.format(selectedConsultation.getCost())); centerPanel.add(durationCostComp, c); c.gridx = 0; c.gridy = 4; notesComp = new NotesComp(); notesComp.getTextArea().setText(selectedConsultation.getNotes()); centerPanel.add(notesComp, c); c.gridx = 1; c.gridy = 4; fileChooserComp = new FileChooserComp(); if (selectedConsultation.getImageFiles() != null) { File[] files = selectedConsultation.getImageFiles().toArray(new File[0]); StringBuilder sb = new StringBuilder(); for (File file : files) { sb.append(file.getName()).append(\"\\n\"); } fileChooserComp.getFileChooser().setSelectedFiles(files); fileChooserComp.textField.setText(sb.toString()); } centerPanel.add(fileChooserComp, c); patientIdComp = new MyPatientIdComp(); patientIdComp.getJComboBox().setSelectedItem(selectedConsultation.getPatient().getPatientId()); c.gridx = 0; c.gridy = 1; centerPanel.add(patientIdComp, c); add(centerPanel, BorderLayout.CENTER); add(new BtnPanelComp(), BorderLayout.SOUTH); } public void saveConsultation(ActionEvent event) { String idStr = (patientIdComp.getJComboBox().getSelectedItem() == null) ? \"\" : patientIdComp.getJComboBox().getSelectedItem().toString(); String name = patientNameComp.getTxtField().getText(); String surname = patientSurnameComp.getTxtField().getText(); String mobile = patientMobileComp.getTxtField().getText(); String duration = durationCostComp.getDurationTxtField().getText(); LinkedHashMap<String, String> requiredValues = new LinkedHashMap<>() {{ put(\"Patient ID\", idStr); put(\"Duration\", duration); put(\"Patient Name\", name); put(\"Patient Surname\", surname); put(\"Patient Mobile\", mobile); }}; for (Map.Entry<String, String> entry : requiredValues.entrySet()) { if (entry.getValue().isEmpty()) { JOptionPane.showMessageDialog( null, entry.getKey() + \" field cannot be empty\", \"Error\", JOptionPane.ERROR_MESSAGE ); return; } } int id; try { id = Integer.parseInt(idStr); } catch (Exception e) { JOptionPane.showMessageDialog( null, \"Patient ID must be a number\", \"Error\", JOptionPane.ERROR_MESSAGE ); return; } try { Integer.parseInt(mobile); } catch (Exception e) { JOptionPane.showMessageDialog( null, \"Patient mobile number must be a number\", \"Error\", JOptionPane.ERROR_MESSAGE ); return; } try { Integer.parseInt(duration); } catch (Exception e) { JOptionPane.showMessageDialog( null, \"Duration must be a number\", \"Error\", JOptionPane.ERROR_MESSAGE ); return; } if (selectedPatient == null) { Patient patient = new Patient( name, surname, patientDobComp.getDatePicker().getDate(), mobile, id ); selectedConsultation.setPatient(patient); } else { selectedPatient.setPatientId(id); selectedPatient.setName(name); selectedPatient.setSurname(surname); selectedPatient.setDob(patientDobComp.getDatePicker().getDate()); selectedPatient.setMobiNo(mobile); selectedConsultation.setPatient(selectedPatient); } try { ArrayList<File> files = encryptImgFiles(selectedConsultation.getId()); selectedConsultation.setId(selectedConsultation.getId()); selectedConsultation.setDoctor(selectedConsultation.getDoctor()); selectedConsultation.setDate(selectedConsultation.getDate()); selectedConsultation.setTime(selectedConsultation.getTime()); selectedConsultation.setDurationHours(Integer.parseInt(durationCostComp.getDurationTxtField().getText())); selectedConsultation.setCost(Double.parseDouble(durationCostComp.getCostTxtField().getText().replace(\"£\", \"\").trim())); selectedConsultation.setNotes(notesComp.getTextArea().getText()); selectedConsultation.setImageFiles(files); MainWindow.saveConsultations(); MainWindow.updateConsTableModel(); closeWindow(event); JOptionPane.showMessageDialog( null, \"Consultation saved successfully!\", \"Success\", JOptionPane.INFORMATION_MESSAGE ); } catch (Exception e) { e.printStackTrace(); } } public String getRandID() { UUID uuid = UUID.randomUUID(); return uuid.toString().substring(0, 8); } public ArrayList<File> encryptImgFiles(String consultationId) throws NoSuchAlgorithmException, InvalidKeySpecException { File[] files = fileChooserComp.getFileChooser().getSelectedFiles(); if (files.length == 0) { return null; } if (selectedConsultation.getImageFiles() != null) { StringBuilder sb = new StringBuilder(); for (File file : selectedConsultation.getImageFiles()) { sb.append(file.getName()).append(\"\\n\"); } if (fileChooserComp.getTextField().getText().equals(sb.toString())) { return selectedConsultation.getImageFiles(); } } MainWindow.removeConsultationImgFiles(selectedConsultation); final String DEST = \"patient_img\" + \"/\" + consultationId; try { Files.createDirectories(Paths.get(DEST)); } catch (IOException e) { throw new RuntimeException(e); } ArrayList<File> newFiles = new ArrayList<>(); String randFileName; String extension; Path dest; Key KEY = PasswordBasedKeyAES.getKey(); for (File f : files) { randFileName = getRandID(); extension = getFileExtension(f.getName()); dest = Paths.get(DEST, randFileName + extension); try { Cipher cipher = Cipher.getInstance(\"AES\"); cipher.init(Cipher.ENCRYPT_MODE, KEY); FileInputStream inputStream = new FileInputStream(f); File outputFile = new File(dest.toUri()); FileOutputStream outputStream = new FileOutputStream(outputFile); byte[] buffer = new byte[64]; int bytesRead; while ((bytesRead = inputStream.read(buffer)) != -1) { byte[] output = cipher.update(buffer, 0, bytesRead); if (output != null) { outputStream.write(output); } } byte[] outputBytes = cipher.doFinal(); if (outputBytes != null) { outputStream.write(outputBytes); } inputStream.close(); outputStream.close(); newFiles.add(outputFile); } catch (Exception e) { throw new RuntimeException(e); } } fileChooserComp.getFileChooser().setSelectedFiles(null); return newFiles; } public String getFileExtension(String fileName) { String extension = \"\"; int index = fileName.lastIndexOf('.'); if (index > 0) { extension = fileName.substring(index + 1); } return \".\" + extension; } public class MyTxtFieldComp extends JPanel { private final JTextField txtField; public MyTxtFieldComp(String label) { setLayout(new BorderLayout()); setBorder(new CompoundBorder(BorderFactory.createTitledBorder(label), new EmptyBorder(0, 5, 5, 5))); setBackground(new Color(0xFFFFFF)); txtField = new JTextField(); txtField.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); add(txtField); } public JTextField getTxtField() { return txtField; } } public class MyPatientIdComp extends JPanel { private final JComboBox comboBox; public MyPatientIdComp() { setLayout(new BorderLayout()); setBorder(new CompoundBorder(BorderFactory.createTitledBorder(\"Patient ID\"), new EmptyBorder(0, 5, 5, 5))); setBackground(Color.white); ArrayList<Integer> suggestions = new ArrayList<>(); for (Consultation c : consultations) { suggestions.add(c.getPatient().getPatientId()); } comboBox = new JComboBox(suggestions.toArray()); comboBox.setEditable(true); comboBox.setSelectedItem(null); comboBox.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); JTextField textField = (JTextField) comboBox.getEditor().getEditorComponent(); textField.getDocument().addDocumentListener(new DocumentListener() { @Override public void insertUpdate(DocumentEvent e) { setPatient(textField.getText()); updateCost(); } @Override public void removeUpdate(DocumentEvent e) { setPatient(textField.getText()); updateCost(); } @Override public void changedUpdate(DocumentEvent e) { setPatient(textField.getText()); updateCost(); } }); add(comboBox, BorderLayout.CENTER); } public JComboBox getJComboBox() { return comboBox; } } public void updateCost() { int hours; int cost; try { hours = !durationCostComp.getDurationTxtField().getText().isEmpty() ? Integer.parseInt(durationCostComp.getDurationTxtField().getText()) : 0; } catch (Exception e) { return; } try { if (selectedPatient != null) { long count = consultations.stream() .filter(c -> c.getPatient().getPatientId() == selectedPatient.getPatientId()) .count(); cost = count > 1 ? hours * 25 : hours * 15; } else { cost = hours * 15; } durationCostComp.getCostTxtField().setText(df.format(cost)); } catch (Exception e) { e.printStackTrace(); } } public void setPatient(String patientId) { if (patientId.isEmpty()) { selectedPatient = null; return; } int id; try { id = Integer.parseInt(patientId); } catch (Exception e) { return; } Consultation consultation = consultations.stream() .filter(c -> c.getPatient().getPatientId() == id) .findFirst() .orElse(null); if (consultation != null) { selectedPatient = consultation.getPatient(); } else { selectedPatient = null; } } public class MyDOBComp extends JPanel { DatePicker datePicker; public MyDOBComp() { setLayout(new BorderLayout()); setBorder(new CompoundBorder(BorderFactory.createTitledBorder(\"Patient DOB\"), new EmptyBorder(0, 5, 5, 5))); setBackground(Color.white); datePicker = new DatePicker(); datePicker.getComponentDateTextField().setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); add(datePicker); } public DatePicker getDatePicker() { return datePicker; } } public class DurationCostComp extends JPanel { JFormattedTextField durationTxtField; JTextField costTxtField; public DurationCostComp() { setLayout(new BorderLayout(5, 0)); setBackground(Color.white); JPanel durationContainer = new JPanel(new BorderLayout()); durationContainer.setBackground(Color.white); durationContainer.setBorder(new CompoundBorder(BorderFactory.createTitledBorder(\"Duration (h)\"), new EmptyBorder(0, 5, 5, 5))); durationTxtField = new JFormattedTextField(); durationTxtField.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); durationTxtField.addCaretListener(new CaretListener() { @Override public void caretUpdate(CaretEvent caretEvent) { updateCost(); } }); durationContainer.add(durationTxtField); add(durationContainer, BorderLayout.CENTER); JPanel costContainer = new JPanel(new BorderLayout()); costContainer.setBackground(Color.white); costContainer.setBorder(new CompoundBorder(BorderFactory.createTitledBorder(\"Cost (£)\"), new EmptyBorder(0, 5, 5, 5))); costTxtField = new JTextField(); costTxtField.setColumns(8); costTxtField.setFocusable(false); costTxtField.setText(\"0.00\"); costTxtField.setEditable(false); costTxtField.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); costContainer.add(costTxtField); add(costContainer, BorderLayout.EAST); } public JTextField getDurationTxtField() { return durationTxtField; } public JTextField getCostTxtField() { return costTxtField; } } public class NotesComp extends JPanel { private final JTextArea textArea; public NotesComp() { setLayout(new BorderLayout()); setBorder(new CompoundBorder(BorderFactory.createTitledBorder(\"Notes\"), new EmptyBorder(0, 5, 5, 5))); setBackground(Color.white); textArea = new JTextArea(); textArea.setRows(4); textArea.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); add(new JScrollPane(textArea), BorderLayout.CENTER); } public JTextArea getTextArea() { return textArea; } } public class TopPanelComp extends JPanel { public TopPanelComp() { setLayout(new BorderLayout()); setBackground(new Color(0x256D85)); setPreferredSize(new Dimension(0, 50)); setLayout(new BorderLayout()); JLabel topLabel = new JLabel( \"Edit Consultation \" + selectedConsultation.getId(), SwingConstants.CENTER ); topLabel.setFont(new Font(\"SansSerif\", Font.PLAIN, 25)); topLabel.setForeground(Color.white); add(topLabel, BorderLayout.CENTER); } } public class FileChooserComp extends JPanel { private final JFileChooser fileChooser; private final JTextArea textField; public FileChooserComp() { setLayout(new BorderLayout()); setBorder(new CompoundBorder(BorderFactory.createTitledBorder(\"Add Images\"), new EmptyBorder(0, 5, 5, 5))); setBackground(Color.white); fileChooser = new JFileChooser(); fileChooser.setMultiSelectionEnabled(true); fileChooser.setPreferredSize(new Dimension(1000, 500)); fileChooser.setAcceptAllFileFilterUsed(false); fileChooser.addChoosableFileFilter(new FileNameExtensionFilter(\"Image files\", \"jpg\", \"jpeg\", \"png\", \"gif\")); fileChooser.setDialogTitle(\"Choose image files\"); JButton chooseBtn = new JButton(\"Choose Images\"); textField = new JTextArea(); textField.setRows(3); textField.setEditable(false); textField.setFocusable(false); textField.setFont(new Font(\"SansSerif\", Font.PLAIN, 18)); chooseBtn.addActionListener(e -> { if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) { File[] files = fileChooser.getSelectedFiles(); StringBuilder sb = new StringBuilder(); for (File file : files) { sb.append(file.getName()).append(\"\\n\"); } textField.setText(sb.toString()); } }); add(chooseBtn, BorderLayout.NORTH); add(new JScrollPane(textField), BorderLayout.CENTER); } public JFileChooser getFileChooser() { return fileChooser; } public JTextArea getTextField() { return textField; } } public class BtnPanelComp extends JPanel { public BtnPanelComp() { FlowLayout flowLayout = new FlowLayout(FlowLayout.RIGHT); flowLayout.setHgap(10); setLayout(flowLayout); setBorder(new EmptyBorder(0, 0, 5, 5)); setBackground(Color.white); JButton saveBtn = new JButton(\"Save\"); saveBtn.setPreferredSize(new Dimension(100, 40)); saveBtn.addActionListener(EditConsultationWindow.this::saveConsultation); add(saveBtn); JButton cancelBtn = new JButton(\"Cancel\"); cancelBtn.setPreferredSize(new Dimension(100, 40)); cancelBtn.addActionListener(EditConsultationWindow.this::closeWindow); add(cancelBtn); } } public void closeWindow(ActionEvent e) { JButton source = (JButton) e.getSource(); Container topLevelContainer = source.getTopLevelAncestor(); if (topLevelContainer instanceof JFrame) { ((JFrame) topLevelContainer).dispose(); } else if (topLevelContainer instanceof JDialog) { ((JDialog) topLevelContainer).dispose(); } } }"}]}}
{"project_id":214,"chunk_id":4,"content":{"main_file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/gui/MainWindow.java","main_file_content":"package com.cj.wscc.gui; import com.cj.wscc.console.Consultation; import com.cj.wscc.console.Doctor; import com.formdev.flatlaf.ui.FlatRoundBorder; import com.github.lgooddatepicker.components.DateTimePicker; import com.github.lgooddatepicker.components.TimePickerSettings; import com.github.lgooddatepicker.optionalusertools.PickerUtilities; import com.github.lgooddatepicker.optionalusertools.TimeVetoPolicy; import javax.crypto.Cipher; import javax.swing.*; import javax.swing.border.CompoundBorder; import javax.swing.border.EmptyBorder; import javax.swing.border.TitledBorder; import javax.swing.table.AbstractTableModel; import javax.swing.table.TableRowSorter; import java.awt.*; import java.awt.event.ActionEvent; import java.awt.event.FocusAdapter; import java.awt.event.FocusEvent; import java.io.*; import java.nio.file.Files; import java.nio.file.Paths; import java.security.Key; import java.text.DecimalFormat; import java.time.LocalDate; import java.time.LocalDateTime; import java.time.LocalTime; import java.util.ArrayList; import java.util.Random; import java.util.stream.Collectors; public class MainWindow extends JFrame { private final ArrayList<Doctor> doctors; private static ArrayList<Consultation> consultations = new ArrayList<>(); private static DocsTableComp docsTableComp; private static ConsTableComp consTableComp; private Doctor selectedDoctor; private static Consultation selectedConsultation; private LocalDate selectedDate; private LocalTime selectedTime; public MainWindow(ArrayList<Doctor> doctors) { super(\"Westminster Skill Consultation Centre\"); setSize(1280, 720); setLocationRelativeTo(null); setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); setLayout(new BorderLayout()); this.doctors = doctors; loadConsultations(); add(new TopPanelComp(), BorderLayout.NORTH); add(new LeftPanelComp(), BorderLayout.WEST); RightPanelComp rightPanelComp = new RightPanelComp(); docsTableComp = new DocsTableComp(); rightPanelComp.add(docsTableComp); consTableComp = new ConsTableComp(consultations); rightPanelComp.add(consTableComp, 1); add(rightPanelComp); CopyrightComp copyrightComp = new CopyrightComp(); add(copyrightComp, BorderLayout.SOUTH); } public void handleBtnClick(ActionEvent e) { JButton btn = (JButton) e.getSource(); switch (btn.getText()) { case \"Check Availability\" -> checkAvailability(); case \"Book Consultation\" -> bookConsultation(); case \"View Consultation\" -> viewConsultation(); case \"Edit Consultation\" -> editConsultation(); case \"Remove Consultation\" -> removeConsultation(); } } public void checkAvailability() { if (selectedDoctor == null) { JOptionPane.showMessageDialog( null, \"Please select a doctor from the Doctors table first\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else if (selectedDate == null || selectedTime == null) { JOptionPane.showMessageDialog( null, \"Please select a date and time\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { if (isDoctorAvailable(null)) { JOptionPane.showMessageDialog( null, \"Doctor is available at the selected time\", \"Info\", JOptionPane.INFORMATION_MESSAGE ); } else { JOptionPane.showMessageDialog( null, \"Unfortunately, the doctor is unavailable at the chosen time\", \"Error\", JOptionPane.ERROR_MESSAGE ); } } } public boolean isDoctorAvailable(Doctor doctor) { if (doctor == null) { doctor = selectedDoctor; } Doctor finalDoctor = doctor; ArrayList<Consultation> filteredConsultations = consultations.stream() .filter(c -> c.getDoctor().getMedicalLicenseNo().equalsIgnoreCase(finalDoctor.getMedicalLicenseNo())) .collect(Collectors.toCollection(ArrayList::new)); LocalDate date; LocalTime time; LocalDateTime startDateTime; LocalDateTime endDateTime; LocalDateTime selectedDateTime = selectedDate.atTime(selectedTime); boolean isAvailable = true; for (Consultation c : filteredConsultations) { date = c.getDate(); time = c.getTime(); startDateTime = date.atTime(time); endDateTime = startDateTime.plusHours(c.getDurationHours()); if (selectedDateTime.equals(startDateTime)) { isAvailable = false; } else if (selectedDateTime.isAfter(startDateTime) && selectedDateTime.isBefore(endDateTime)) { isAvailable = false; } } return isAvailable; } public Doctor getRandomAvailableDoctor() { ArrayList<Doctor> availableDoctors = new ArrayList<>(); ArrayList<Doctor> doctorsWithConsultations = new ArrayList<>(); for (Consultation c : consultations) { if (!doctorsWithConsultations.contains(c.getDoctor())) { doctorsWithConsultations.add(c.getDoctor()); } } for (Doctor d : doctorsWithConsultations) { if (isDoctorAvailable(d)) { availableDoctors.add(d); } } for (Doctor d : doctors) { if (!doctorsWithConsultations.contains(d)) { availableDoctors.add(d); } } ArrayList<Doctor> availableDoctorsSameSpeciality = new ArrayList<>(); availableDoctors.forEach(d -> { if (d.getSpecialisation().equalsIgnoreCase(selectedDoctor.getSpecialisation())) { availableDoctorsSameSpeciality.add(d); } }); if (availableDoctorsSameSpeciality.size() > 0) { Random rand = new Random(); int bound = availableDoctorsSameSpeciality.size(); int randIndex = rand.nextInt(bound); return availableDoctorsSameSpeciality.get(randIndex); } Random rand = new Random(); int bound = availableDoctors.size(); if (bound > 0) { int randIndex = rand.nextInt(bound); return availableDoctors.get(randIndex); } else { return null; } } public void viewConsultation() { if (selectedConsultation == null) { JOptionPane.showMessageDialog( null, \"Please select a consultation from the table to view\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { ViewConsultationWindow viewConsultationWindow = new ViewConsultationWindow(selectedConsultation); viewConsultationWindow.setVisible(true); } } public void bookConsultation() { if (selectedDoctor == null) { JOptionPane.showMessageDialog( null, \"Please select a doctor from the Doctors table first\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else if (selectedDate == null || selectedTime == null) { JOptionPane.showMessageDialog( null, \"Please select a date and time\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else if (!isDoctorAvailable(null)) { Doctor randomAvailableDoctor = getRandomAvailableDoctor(); if (randomAvailableDoctor == null) { JOptionPane.showMessageDialog( null, \"No doctors are available at the selected time\\nPlease choose another time.\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { String msg = String.format( \"<b>Dr. %s</b> is <span style=\\\"color:red\\\"><b>not available</b></span> at the selected time.<br>\" + \"However <b>Dr. %s</b> is available at the selected time.<br>\" + \"Book consultation with <b>Dr. %s</b>?\", selectedDoctor.getFullName(), randomAvailableDoctor.getFullName(), randomAvailableDoctor.getFullName() ); JEditorPane editorPane = new JEditorPane(); editorPane.setContentType(\"text/html\"); editorPane.setText(msg); JOptionPane jOptionPane = new JOptionPane(); editorPane.setBackground(jOptionPane.getBackground()); int result = JOptionPane.showConfirmDialog( null, editorPane, \"Confirm\", JOptionPane.OK_CANCEL_OPTION ); if (result == JOptionPane.OK_OPTION) { AddConsultationWindow consWindow = new AddConsultationWindow(consultations, randomAvailableDoctor, selectedDate, selectedTime); consWindow.setVisible(true); consWindow.toFront(); } } } else { AddConsultationWindow consWindow = new AddConsultationWindow(consultations, selectedDoctor, selectedDate, selectedTime); consWindow.setVisible(true); consWindow.toFront(); } } public void editConsultation() { if (selectedConsultation == null) { JOptionPane.showMessageDialog( null, \"Please select a consultation from the table to edit\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { EditConsultationWindow editConsultationWindow = new EditConsultationWindow(consultations, selectedConsultation); editConsultationWindow.setVisible(true); } } public static void addConsultation(Consultation consultation) { consultations.add(consultation); saveConsultations(); updateConsTableModel(); } public void removeConsultation() { if (selectedConsultation == null) { JOptionPane.showMessageDialog( null, \"Please select a consultation from the table to remove\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { int result = JOptionPane.showConfirmDialog( null, String.format(\"Are you sure you want to remove consultation %s?\", selectedConsultation.getId()), \"Confirm\", JOptionPane.YES_NO_OPTION ); if (result == JOptionPane.YES_OPTION) { consultations.remove(selectedConsultation); removeConsultationImgFiles(null); selectedConsultation = null; saveConsultations(); updateConsTableModel(); JOptionPane.showMessageDialog( null, \"Consultation removed successfully.\", \"Info\", JOptionPane.INFORMATION_MESSAGE ); } } } public static void removeConsultationImgFiles(Consultation consultation) { if (consultation == null) { consultation = selectedConsultation; } if (consultation.getImageFiles() == null) { return; } final File parentDir = consultation.getImageFiles().get(0).getParentFile(); consultation.getImageFiles().forEach(f -> { if (f.exists()) { try { Files.delete(Paths.get(f.getAbsolutePath())); } catch (IOException e) { throw new RuntimeException(e); } } }); if (parentDir.exists()) { parentDir.delete(); } } public static void loadConsultations() { try { FileInputStream fis = new FileInputStream(\"consultations.bin\"); byte[] encryptedBytes = new byte[fis.available()]; fis.read(encryptedBytes); fis.close(); Key KEY = PasswordBasedKeyAES.getKey(); Cipher cipher = Cipher.getInstance(\"AES\"); cipher.init(Cipher.DECRYPT_MODE, KEY); byte[] decryptedBytes = cipher.doFinal(encryptedBytes); ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(decryptedBytes)); consultations = (ArrayList<Consultation>) ois.readObject(); ois.close(); } catch (Exception ignored) { } } public static void saveConsultations() { try { ByteArrayOutputStream baos = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(baos); oos.writeObject(consultations); oos.close(); byte[] serializedBytes = baos.toByteArray(); Key KEY = PasswordBasedKeyAES.getKey(); Cipher cipher = Cipher.getInstance(\"AES\"); cipher.init(Cipher.ENCRYPT_MODE, KEY); byte[] encryptedBytes = cipher.doFinal(serializedBytes); FileOutputStream fos = new FileOutputStream(\"consultations.bin\"); fos.write(encryptedBytes); fos.close(); } catch (Exception ignored) { } } public static void updateConsTableModel() { consTableComp.getConsTableModel().fireTableDataChanged(); } public static DocsTableComp getDocsTableComp() { return docsTableComp; } public class TopPanelComp extends JPanel { public TopPanelComp() { setBackground(new Color(0x3F4E4F)); setPreferredSize(new Dimension(0, 70)); setForeground(new Color(0xFFFFFF)); setLayout(new BorderLayout()); JLabel topLabel = new JLabel(\"Westminster Skin Consultation Centre\", SwingConstants.CENTER); topLabel.setFont(new Font(\"SansSerif\", Font.PLAIN, 30)); topLabel.setForeground(new Color(0xFFFFFF)); add(topLabel, BorderLayout.CENTER); } } public class LeftPanelComp extends JPanel { public LeftPanelComp() { setLayout(new GridLayout(2, 1, 0, 10)); setBorder(new EmptyBorder(15, 10, 10, 10)); setBackground(Color.white); JPanel innerTopPanel = new JPanel(new GridLayout(3, 1, 0, 20)); innerTopPanel.setBorder(new CompoundBorder( new FlatRoundBorder(), new EmptyBorder(10, 10, 10, 10)) ); innerTopPanel.setBackground(Color.white); DateTimePickerComp dateTimePickerComp = new DateTimePickerComp(); innerTopPanel.add(dateTimePickerComp); MainBtnComp checkAvailabilityBtn = new MainBtnComp(\"Check Availability\"); checkAvailabilityBtn.addActionListener(MainWindow.this::handleBtnClick); innerTopPanel.add(checkAvailabilityBtn); MainBtnComp bookConsultationBtn = new MainBtnComp(\"Book Consultation\"); bookConsultationBtn.addActionListener(MainWindow.this::handleBtnClick); innerTopPanel.add(bookConsultationBtn); add(innerTopPanel); JPanel innerBottomPanel = new JPanel(new GridLayout(3, 1, 0, 20)); innerBottomPanel.setBorder(new CompoundBorder( new FlatRoundBorder(), new EmptyBorder(10, 10, 10, 10)) ); innerBottomPanel.setBackground(Color.white); MainBtnComp viewConsultationBtn = new MainBtnComp(\"View Consultation\"); viewConsultationBtn.addActionListener(MainWindow.this::handleBtnClick); innerBottomPanel.add(viewConsultationBtn); MainBtnComp editConsultationBtn = new MainBtnComp(\"Edit Consultation\"); editConsultationBtn.addActionListener(MainWindow.this::handleBtnClick); innerBottomPanel.add(editConsultationBtn); MainBtnComp removeConsultation = new MainBtnComp(\"Remove Consultation\"); removeConsultation.addActionListener(MainWindow.this::handleBtnClick); innerBottomPanel.add(removeConsultation); add(innerBottomPanel); } } public class DateTimePickerComp extends JPanel { public DateTimePickerComp() { setLayout(new BorderLayout()); setBackground(Color.white); DateTimePicker dateTimePicker = new DateTimePicker(); dateTimePicker.setBackground(Color.white); TimePickerSettings timeSettings = dateTimePicker.timePicker.getSettings(); timeSettings.setVetoPolicy(new SampleTimeVetoPolicy()); dateTimePicker.datePicker.setDateToToday(); selectedDate = dateTimePicker.getDatePicker().getDate(); dateTimePicker.timePicker.setTimeToNow(); selectedTime = dateTimePicker.getTimePicker().getTime(); int width = 24; int height = 24; ImageIcon oriCalIcon = new ImageIcon(\"resources/calendar_icon.png\"); Image caledarIcon = oriCalIcon.getImage().getScaledInstance(width, height, Image.SCALE_SMOOTH); JButton datePickerBtn = dateTimePicker.getDatePicker().getComponentToggleCalendarButton(); datePickerBtn.setPreferredSize(new Dimension(40, datePickerBtn.getPreferredSize().height)); datePickerBtn.setText(\"\"); datePickerBtn.setIcon(new ImageIcon(caledarIcon)); ImageIcon oriClockIcon = new ImageIcon(\"resources/clock_icon.png\"); Image clockIcon = oriClockIcon.getImage().getScaledInstance(width, height, Image.SCALE_SMOOTH); JButton timePickerBtn = dateTimePicker.getTimePicker().getComponentToggleTimeMenuButton(); timePickerBtn.setPreferredSize(new Dimension(40, timePickerBtn.getPreferredSize().height)); timePickerBtn.setText(\"\"); timePickerBtn.setIcon(new ImageIcon(clockIcon)); dateTimePicker.getDatePicker().addDateChangeListener(dateChangeEvent -> selectedDate = dateTimePicker.datePicker.getDate()); dateTimePicker.getTimePicker().addTimeChangeListener(timeChangeEvent -> selectedTime = dateTimePicker.timePicker.getTime()); add(dateTimePicker, BorderLayout.CENTER); } } public class MyTableComp extends JTable { public MyTableComp(AbstractTableModel tableModel, TableRowSorter rowSorter) { super(tableModel); setRowSorter(rowSorter); setFont(new Font(\"SansSerif\", Font.PLAIN, 17)); getTableHeader().setReorderingAllowed(false); getTableHeader().setFont(new Font(\"SansSerif\", Font.BOLD, 17)); setRowHeight(30); setSelectionMode(ListSelectionModel.SINGLE_SELECTION); } } public class DocsTableComp extends JPanel { private final MyTableComp myTableComp; private final DocsTableModel docsTableModel; public DocsTableComp() { setLayout(new BorderLayout(0, 5)); setBackground(new Color(0xFFFFFF)); TitledBorder titledBorder = new TitledBorder(\"Doctors\"); titledBorder.setBorder(new FlatRoundBorder()); titledBorder.setTitleFont(new Font(\"SansSerif\", Font.BOLD, 15)); setBorder(new CompoundBorder(titledBorder, new EmptyBorder(10, 10, 10, 10))); docsTableModel = new DocsTableModel(); myTableComp = new MyTableComp(docsTableModel, new TableRowSorter<>(docsTableModel)); myTableComp.getColumnModel().getColumn(2).setPreferredWidth(160); myTableComp.addFocusListener(new FocusAdapter() { @Override public void focusGained(FocusEvent e) { consTableComp.getTable().clearSelection(); selectedConsultation = null; } }); myTableComp.getSelectionModel().addListSelectionListener(listSelectionEvent -> { int row = myTableComp.getSelectedRow(); if (!listSelectionEvent.getValueIsAdjusting() && row >= 0) { String docLicense = (String) myTableComp.getValueAt(row, 3); selectedDoctor = doctors.stream() .filter(d -> d.getMedicalLicenseNo().equalsIgnoreCase(docLicense)) .findFirst() .orElse(null); } }); add(new JScrollPane(myTableComp), BorderLayout.CENTER); } public JTable getTable() { return myTableComp; } public AbstractTableModel getDocsTableModel() { return docsTableModel; } } public class ConsTableComp extends JPanel { private final MyTableComp myTableComp; private final ConsTableModel consTableModel; public ConsTableComp(ArrayList<Consultation> consultations) { setLayout(new BorderLayout(0, 5)); setBackground(new Color(0xFFFFFF)); TitledBorder titledBorder = new TitledBorder(\"Consultations\"); titledBorder.setBorder(new FlatRoundBorder()); titledBorder.setTitleFont(new Font(\"SansSerif\", Font.BOLD, 15)); setBorder(new CompoundBorder(titledBorder, new EmptyBorder(10, 10, 10, 10))); consTableModel = new ConsTableModel(consultations); myTableComp = new MyTableComp(consTableModel, new TableRowSorter<>(consTableModel)); myTableComp.addFocusListener(new FocusAdapter() { @Override public void focusGained(FocusEvent e) { docsTableComp.getTable().clearSelection(); selectedDoctor = null; } }); myTableComp.getSelectionModel().addListSelectionListener(listSelectionEvent -> { int row = myTableComp.getSelectedRow(); if (!listSelectionEvent.getValueIsAdjusting() && row >= 0) { String consId = (String) myTableComp.getValueAt(row, 0); selectedConsultation = consultations.stream() .filter(d -> d.getId().equalsIgnoreCase(consId)) .findFirst() .orElse(null); } }); add(new JScrollPane(myTableComp), BorderLayout.CENTER); } public JTable getTable() { return myTableComp; } public AbstractTableModel getConsTableModel() { return consTableModel; } } public class RightPanelComp extends JPanel { public RightPanelComp() { setLayout(new GridLayout(2, 1, 0, 15)); setPreferredSize(new Dimension(1000, 0)); setBorder(new EmptyBorder(10, 10, 10, 10)); setBackground(Color.white); } } public class MainBtnComp extends JButton { public MainBtnComp(String txt) { super(txt); setFont(new Font(\"SansSerif\", Font.BOLD, 16)); setFocusable(false); setFocusPainted(false); setBackground(new Color(0xDCD7C9)); setForeground(Color.black); } } public class CopyrightComp extends JPanel { public CopyrightComp() { setLayout(new BorderLayout()); setBorder(new EmptyBorder(0, 0, 10, 10)); setBackground(Color.white); JLabel jLabel = new JLabel(\"Copyright © 2023 Chamath Jayasena. All rights reserved.\"); jLabel.setFont(new Font(\"SansSerif\", Font.BOLD, 14)); jLabel.setEnabled(false); add(jLabel, BorderLayout.EAST); } } public class DocsTableModel extends AbstractTableModel { String[] colNames; Class[] colClasses; public DocsTableModel() { colNames = new String[]{ \"First Name\", \"Surname\", \"Specialisation\", \"License\", \"DOB\", \"Mobile\" }; colClasses = new Class[]{ String.class, String.class, String.class, String.class, LocalDate.class, String.class }; } @Override public int getRowCount() { return doctors.size(); } @Override public int getColumnCount() { return colNames.length; } @Override public Object getValueAt(int row, int col) { switch (col) { case 0 -> { return doctors.get(row).getName(); } case 1 -> { return doctors.get(row).getSurname(); } case 2 -> { return doctors.get(row).getSpecialisation(); } case 3 -> { return doctors.get(row).getMedicalLicenseNo(); } case 4 -> { return doctors.get(row).getDob(); } case 5 -> { return doctors.get(row).getMobiNo(); } default -> { return null; } } } public String getColumnName(int col) { return colNames[col]; } public Class getColumnClass(int col) { return colClasses[col]; } } public class ConsTableModel extends AbstractTableModel { private final ArrayList<Consultation> consultations; private final String[] colNames; private final Class[] colClasses; public ConsTableModel(ArrayList<Consultation> data) { this.consultations = data; colNames = new String[]{ \"ID\", \"Patient ID\", \"Patient\", \"Doctor\", \"Date\", \"Time\", \"Duration (h)\", \"Cost (£)\" }; colClasses = new Class[]{ String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class }; } @Override public int getRowCount() { return consultations.size(); } @Override public int getColumnCount() { return colNames.length; } @Override public Object getValueAt(int row, int col) { DecimalFormat df = new DecimalFormat(\"0.00\"); switch (col) { case 0 -> { return consultations.get(row).getId(); } case 1 -> { return consultations.get(row).getPatient().getPatientId(); } case 2 -> { return consultations.get(row).getPatient().getFullName(); } case 3 -> { return consultations.get(row).getDoctor().getFullName(); } case 4 -> { return consultations.get(row).getDate().toString(); } case 5 -> { return consultations.get(row).getTime().toString(); } case 6 -> { return consultations.get(row).getDurationHours() + \"\"; } case 7 -> { return df.format(consultations.get(row).getCost()); } default -> { return null; } } } public String getColumnName(int col) { return colNames[col]; } public Class getColumnClass(int col) { return colClasses[col]; } } private static class SampleTimeVetoPolicy implements TimeVetoPolicy { @Override public boolean isTimeAllowed(LocalTime time) { return PickerUtilities.isLocalTimeInRange( time, LocalTime.of(8, 00), LocalTime.of(17, 00), true); } } }","dependencies":[{"file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/gui/PasswordBasedKeyAES.java","file_content":"package com.cj.wscc.gui; import javax.crypto.SecretKey; import javax.crypto.SecretKeyFactory; import javax.crypto.spec.PBEKeySpec; import javax.crypto.spec.SecretKeySpec; import java.security.Key; import java.security.NoSuchAlgorithmException; import java.security.spec.InvalidKeySpecException; public class PasswordBasedKeyAES { public static Key getKey() throws NoSuchAlgorithmException, InvalidKeySpecException { String cipher = \"AES\"; int keySize = 128; char[] password = \"ykAHmzXU&Zwp9PJvhT5v7sG2etLRSrsk\".toCharArray(); byte[] salt = new byte[100]; PBEKeySpec pbeKeySpec = new PBEKeySpec(password, salt, 1000, keySize); SecretKey pbeKey = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA256\").generateSecret(pbeKeySpec); return new SecretKeySpec(pbeKey.getEncoded(), cipher); } }"}]}}
{"project_id":214,"chunk_id":5,"content":{"main_file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/gui/MainWindow.java","main_file_content":"package com.cj.wscc.gui; import com.cj.wscc.console.Consultation; import com.cj.wscc.console.Doctor; import com.formdev.flatlaf.ui.FlatRoundBorder; import com.github.lgooddatepicker.components.DateTimePicker; import com.github.lgooddatepicker.components.TimePickerSettings; import com.github.lgooddatepicker.optionalusertools.PickerUtilities; import com.github.lgooddatepicker.optionalusertools.TimeVetoPolicy; import javax.crypto.Cipher; import javax.swing.*; import javax.swing.border.CompoundBorder; import javax.swing.border.EmptyBorder; import javax.swing.border.TitledBorder; import javax.swing.table.AbstractTableModel; import javax.swing.table.TableRowSorter; import java.awt.*; import java.awt.event.ActionEvent; import java.awt.event.FocusAdapter; import java.awt.event.FocusEvent; import java.io.*; import java.nio.file.Files; import java.nio.file.Paths; import java.security.Key; import java.text.DecimalFormat; import java.time.LocalDate; import java.time.LocalDateTime; import java.time.LocalTime; import java.util.ArrayList; import java.util.Random; import java.util.stream.Collectors; public class MainWindow extends JFrame { private final ArrayList<Doctor> doctors; private static ArrayList<Consultation> consultations = new ArrayList<>(); private static DocsTableComp docsTableComp; private static ConsTableComp consTableComp; private Doctor selectedDoctor; private static Consultation selectedConsultation; private LocalDate selectedDate; private LocalTime selectedTime; public MainWindow(ArrayList<Doctor> doctors) { super(\"Westminster Skill Consultation Centre\"); setSize(1280, 720); setLocationRelativeTo(null); setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); setLayout(new BorderLayout()); this.doctors = doctors; loadConsultations(); add(new TopPanelComp(), BorderLayout.NORTH); add(new LeftPanelComp(), BorderLayout.WEST); RightPanelComp rightPanelComp = new RightPanelComp(); docsTableComp = new DocsTableComp(); rightPanelComp.add(docsTableComp); consTableComp = new ConsTableComp(consultations); rightPanelComp.add(consTableComp, 1); add(rightPanelComp); CopyrightComp copyrightComp = new CopyrightComp(); add(copyrightComp, BorderLayout.SOUTH); } public void handleBtnClick(ActionEvent e) { JButton btn = (JButton) e.getSource(); switch (btn.getText()) { case \"Check Availability\" -> checkAvailability(); case \"Book Consultation\" -> bookConsultation(); case \"View Consultation\" -> viewConsultation(); case \"Edit Consultation\" -> editConsultation(); case \"Remove Consultation\" -> removeConsultation(); } } public void checkAvailability() { if (selectedDoctor == null) { JOptionPane.showMessageDialog( null, \"Please select a doctor from the Doctors table first\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else if (selectedDate == null || selectedTime == null) { JOptionPane.showMessageDialog( null, \"Please select a date and time\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { if (isDoctorAvailable(null)) { JOptionPane.showMessageDialog( null, \"Doctor is available at the selected time\", \"Info\", JOptionPane.INFORMATION_MESSAGE ); } else { JOptionPane.showMessageDialog( null, \"Unfortunately, the doctor is unavailable at the chosen time\", \"Error\", JOptionPane.ERROR_MESSAGE ); } } } public boolean isDoctorAvailable(Doctor doctor) { if (doctor == null) { doctor = selectedDoctor; } Doctor finalDoctor = doctor; ArrayList<Consultation> filteredConsultations = consultations.stream() .filter(c -> c.getDoctor().getMedicalLicenseNo().equalsIgnoreCase(finalDoctor.getMedicalLicenseNo())) .collect(Collectors.toCollection(ArrayList::new)); LocalDate date; LocalTime time; LocalDateTime startDateTime; LocalDateTime endDateTime; LocalDateTime selectedDateTime = selectedDate.atTime(selectedTime); boolean isAvailable = true; for (Consultation c : filteredConsultations) { date = c.getDate(); time = c.getTime(); startDateTime = date.atTime(time); endDateTime = startDateTime.plusHours(c.getDurationHours()); if (selectedDateTime.equals(startDateTime)) { isAvailable = false; } else if (selectedDateTime.isAfter(startDateTime) && selectedDateTime.isBefore(endDateTime)) { isAvailable = false; } } return isAvailable; } public Doctor getRandomAvailableDoctor() { ArrayList<Doctor> availableDoctors = new ArrayList<>(); ArrayList<Doctor> doctorsWithConsultations = new ArrayList<>(); for (Consultation c : consultations) { if (!doctorsWithConsultations.contains(c.getDoctor())) { doctorsWithConsultations.add(c.getDoctor()); } } for (Doctor d : doctorsWithConsultations) { if (isDoctorAvailable(d)) { availableDoctors.add(d); } } for (Doctor d : doctors) { if (!doctorsWithConsultations.contains(d)) { availableDoctors.add(d); } } ArrayList<Doctor> availableDoctorsSameSpeciality = new ArrayList<>(); availableDoctors.forEach(d -> { if (d.getSpecialisation().equalsIgnoreCase(selectedDoctor.getSpecialisation())) { availableDoctorsSameSpeciality.add(d); } }); if (availableDoctorsSameSpeciality.size() > 0) { Random rand = new Random(); int bound = availableDoctorsSameSpeciality.size(); int randIndex = rand.nextInt(bound); return availableDoctorsSameSpeciality.get(randIndex); } Random rand = new Random(); int bound = availableDoctors.size(); if (bound > 0) { int randIndex = rand.nextInt(bound); return availableDoctors.get(randIndex); } else { return null; } } public void viewConsultation() { if (selectedConsultation == null) { JOptionPane.showMessageDialog( null, \"Please select a consultation from the table to view\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { ViewConsultationWindow viewConsultationWindow = new ViewConsultationWindow(selectedConsultation); viewConsultationWindow.setVisible(true); } } public void bookConsultation() { if (selectedDoctor == null) { JOptionPane.showMessageDialog( null, \"Please select a doctor from the Doctors table first\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else if (selectedDate == null || selectedTime == null) { JOptionPane.showMessageDialog( null, \"Please select a date and time\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else if (!isDoctorAvailable(null)) { Doctor randomAvailableDoctor = getRandomAvailableDoctor(); if (randomAvailableDoctor == null) { JOptionPane.showMessageDialog( null, \"No doctors are available at the selected time\\nPlease choose another time.\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { String msg = String.format( \"<b>Dr. %s</b> is <span style=\\\"color:red\\\"><b>not available</b></span> at the selected time.<br>\" + \"However <b>Dr. %s</b> is available at the selected time.<br>\" + \"Book consultation with <b>Dr. %s</b>?\", selectedDoctor.getFullName(), randomAvailableDoctor.getFullName(), randomAvailableDoctor.getFullName() ); JEditorPane editorPane = new JEditorPane(); editorPane.setContentType(\"text/html\"); editorPane.setText(msg); JOptionPane jOptionPane = new JOptionPane(); editorPane.setBackground(jOptionPane.getBackground()); int result = JOptionPane.showConfirmDialog( null, editorPane, \"Confirm\", JOptionPane.OK_CANCEL_OPTION ); if (result == JOptionPane.OK_OPTION) { AddConsultationWindow consWindow = new AddConsultationWindow(consultations, randomAvailableDoctor, selectedDate, selectedTime); consWindow.setVisible(true); consWindow.toFront(); } } } else { AddConsultationWindow consWindow = new AddConsultationWindow(consultations, selectedDoctor, selectedDate, selectedTime); consWindow.setVisible(true); consWindow.toFront(); } } public void editConsultation() { if (selectedConsultation == null) { JOptionPane.showMessageDialog( null, \"Please select a consultation from the table to edit\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { EditConsultationWindow editConsultationWindow = new EditConsultationWindow(consultations, selectedConsultation); editConsultationWindow.setVisible(true); } } public static void addConsultation(Consultation consultation) { consultations.add(consultation); saveConsultations(); updateConsTableModel(); } public void removeConsultation() { if (selectedConsultation == null) { JOptionPane.showMessageDialog( null, \"Please select a consultation from the table to remove\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { int result = JOptionPane.showConfirmDialog( null, String.format(\"Are you sure you want to remove consultation %s?\", selectedConsultation.getId()), \"Confirm\", JOptionPane.YES_NO_OPTION ); if (result == JOptionPane.YES_OPTION) { consultations.remove(selectedConsultation); removeConsultationImgFiles(null); selectedConsultation = null; saveConsultations(); updateConsTableModel(); JOptionPane.showMessageDialog( null, \"Consultation removed successfully.\", \"Info\", JOptionPane.INFORMATION_MESSAGE ); } } } public static void removeConsultationImgFiles(Consultation consultation) { if (consultation == null) { consultation = selectedConsultation; } if (consultation.getImageFiles() == null) { return; } final File parentDir = consultation.getImageFiles().get(0).getParentFile(); consultation.getImageFiles().forEach(f -> { if (f.exists()) { try { Files.delete(Paths.get(f.getAbsolutePath())); } catch (IOException e) { throw new RuntimeException(e); } } }); if (parentDir.exists()) { parentDir.delete(); } } public static void loadConsultations() { try { FileInputStream fis = new FileInputStream(\"consultations.bin\"); byte[] encryptedBytes = new byte[fis.available()]; fis.read(encryptedBytes); fis.close(); Key KEY = PasswordBasedKeyAES.getKey(); Cipher cipher = Cipher.getInstance(\"AES\"); cipher.init(Cipher.DECRYPT_MODE, KEY); byte[] decryptedBytes = cipher.doFinal(encryptedBytes); ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(decryptedBytes)); consultations = (ArrayList<Consultation>) ois.readObject(); ois.close(); } catch (Exception ignored) { } } public static void saveConsultations() { try { ByteArrayOutputStream baos = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(baos); oos.writeObject(consultations); oos.close(); byte[] serializedBytes = baos.toByteArray(); Key KEY = PasswordBasedKeyAES.getKey(); Cipher cipher = Cipher.getInstance(\"AES\"); cipher.init(Cipher.ENCRYPT_MODE, KEY); byte[] encryptedBytes = cipher.doFinal(serializedBytes); FileOutputStream fos = new FileOutputStream(\"consultations.bin\"); fos.write(encryptedBytes); fos.close(); } catch (Exception ignored) { } } public static void updateConsTableModel() { consTableComp.getConsTableModel().fireTableDataChanged(); } public static DocsTableComp getDocsTableComp() { return docsTableComp; } public class TopPanelComp extends JPanel { public TopPanelComp() { setBackground(new Color(0x3F4E4F)); setPreferredSize(new Dimension(0, 70)); setForeground(new Color(0xFFFFFF)); setLayout(new BorderLayout()); JLabel topLabel = new JLabel(\"Westminster Skin Consultation Centre\", SwingConstants.CENTER); topLabel.setFont(new Font(\"SansSerif\", Font.PLAIN, 30)); topLabel.setForeground(new Color(0xFFFFFF)); add(topLabel, BorderLayout.CENTER); } } public class LeftPanelComp extends JPanel { public LeftPanelComp() { setLayout(new GridLayout(2, 1, 0, 10)); setBorder(new EmptyBorder(15, 10, 10, 10)); setBackground(Color.white); JPanel innerTopPanel = new JPanel(new GridLayout(3, 1, 0, 20)); innerTopPanel.setBorder(new CompoundBorder( new FlatRoundBorder(), new EmptyBorder(10, 10, 10, 10)) ); innerTopPanel.setBackground(Color.white); DateTimePickerComp dateTimePickerComp = new DateTimePickerComp(); innerTopPanel.add(dateTimePickerComp); MainBtnComp checkAvailabilityBtn = new MainBtnComp(\"Check Availability\"); checkAvailabilityBtn.addActionListener(MainWindow.this::handleBtnClick); innerTopPanel.add(checkAvailabilityBtn); MainBtnComp bookConsultationBtn = new MainBtnComp(\"Book Consultation\"); bookConsultationBtn.addActionListener(MainWindow.this::handleBtnClick); innerTopPanel.add(bookConsultationBtn); add(innerTopPanel); JPanel innerBottomPanel = new JPanel(new GridLayout(3, 1, 0, 20)); innerBottomPanel.setBorder(new CompoundBorder( new FlatRoundBorder(), new EmptyBorder(10, 10, 10, 10)) ); innerBottomPanel.setBackground(Color.white); MainBtnComp viewConsultationBtn = new MainBtnComp(\"View Consultation\"); viewConsultationBtn.addActionListener(MainWindow.this::handleBtnClick); innerBottomPanel.add(viewConsultationBtn); MainBtnComp editConsultationBtn = new MainBtnComp(\"Edit Consultation\"); editConsultationBtn.addActionListener(MainWindow.this::handleBtnClick); innerBottomPanel.add(editConsultationBtn); MainBtnComp removeConsultation = new MainBtnComp(\"Remove Consultation\"); removeConsultation.addActionListener(MainWindow.this::handleBtnClick); innerBottomPanel.add(removeConsultation); add(innerBottomPanel); } } public class DateTimePickerComp extends JPanel { public DateTimePickerComp() { setLayout(new BorderLayout()); setBackground(Color.white); DateTimePicker dateTimePicker = new DateTimePicker(); dateTimePicker.setBackground(Color.white); TimePickerSettings timeSettings = dateTimePicker.timePicker.getSettings(); timeSettings.setVetoPolicy(new SampleTimeVetoPolicy()); dateTimePicker.datePicker.setDateToToday(); selectedDate = dateTimePicker.getDatePicker().getDate(); dateTimePicker.timePicker.setTimeToNow(); selectedTime = dateTimePicker.getTimePicker().getTime(); int width = 24; int height = 24; ImageIcon oriCalIcon = new ImageIcon(\"resources/calendar_icon.png\"); Image caledarIcon = oriCalIcon.getImage().getScaledInstance(width, height, Image.SCALE_SMOOTH); JButton datePickerBtn = dateTimePicker.getDatePicker().getComponentToggleCalendarButton(); datePickerBtn.setPreferredSize(new Dimension(40, datePickerBtn.getPreferredSize().height)); datePickerBtn.setText(\"\"); datePickerBtn.setIcon(new ImageIcon(caledarIcon)); ImageIcon oriClockIcon = new ImageIcon(\"resources/clock_icon.png\"); Image clockIcon = oriClockIcon.getImage().getScaledInstance(width, height, Image.SCALE_SMOOTH); JButton timePickerBtn = dateTimePicker.getTimePicker().getComponentToggleTimeMenuButton(); timePickerBtn.setPreferredSize(new Dimension(40, timePickerBtn.getPreferredSize().height)); timePickerBtn.setText(\"\"); timePickerBtn.setIcon(new ImageIcon(clockIcon)); dateTimePicker.getDatePicker().addDateChangeListener(dateChangeEvent -> selectedDate = dateTimePicker.datePicker.getDate()); dateTimePicker.getTimePicker().addTimeChangeListener(timeChangeEvent -> selectedTime = dateTimePicker.timePicker.getTime()); add(dateTimePicker, BorderLayout.CENTER); } } public class MyTableComp extends JTable { public MyTableComp(AbstractTableModel tableModel, TableRowSorter rowSorter) { super(tableModel); setRowSorter(rowSorter); setFont(new Font(\"SansSerif\", Font.PLAIN, 17)); getTableHeader().setReorderingAllowed(false); getTableHeader().setFont(new Font(\"SansSerif\", Font.BOLD, 17)); setRowHeight(30); setSelectionMode(ListSelectionModel.SINGLE_SELECTION); } } public class DocsTableComp extends JPanel { private final MyTableComp myTableComp; private final DocsTableModel docsTableModel; public DocsTableComp() { setLayout(new BorderLayout(0, 5)); setBackground(new Color(0xFFFFFF)); TitledBorder titledBorder = new TitledBorder(\"Doctors\"); titledBorder.setBorder(new FlatRoundBorder()); titledBorder.setTitleFont(new Font(\"SansSerif\", Font.BOLD, 15)); setBorder(new CompoundBorder(titledBorder, new EmptyBorder(10, 10, 10, 10))); docsTableModel = new DocsTableModel(); myTableComp = new MyTableComp(docsTableModel, new TableRowSorter<>(docsTableModel)); myTableComp.getColumnModel().getColumn(2).setPreferredWidth(160); myTableComp.addFocusListener(new FocusAdapter() { @Override public void focusGained(FocusEvent e) { consTableComp.getTable().clearSelection(); selectedConsultation = null; } }); myTableComp.getSelectionModel().addListSelectionListener(listSelectionEvent -> { int row = myTableComp.getSelectedRow(); if (!listSelectionEvent.getValueIsAdjusting() && row >= 0) { String docLicense = (String) myTableComp.getValueAt(row, 3); selectedDoctor = doctors.stream() .filter(d -> d.getMedicalLicenseNo().equalsIgnoreCase(docLicense)) .findFirst() .orElse(null); } }); add(new JScrollPane(myTableComp), BorderLayout.CENTER); } public JTable getTable() { return myTableComp; } public AbstractTableModel getDocsTableModel() { return docsTableModel; } } public class ConsTableComp extends JPanel { private final MyTableComp myTableComp; private final ConsTableModel consTableModel; public ConsTableComp(ArrayList<Consultation> consultations) { setLayout(new BorderLayout(0, 5)); setBackground(new Color(0xFFFFFF)); TitledBorder titledBorder = new TitledBorder(\"Consultations\"); titledBorder.setBorder(new FlatRoundBorder()); titledBorder.setTitleFont(new Font(\"SansSerif\", Font.BOLD, 15)); setBorder(new CompoundBorder(titledBorder, new EmptyBorder(10, 10, 10, 10))); consTableModel = new ConsTableModel(consultations); myTableComp = new MyTableComp(consTableModel, new TableRowSorter<>(consTableModel)); myTableComp.addFocusListener(new FocusAdapter() { @Override public void focusGained(FocusEvent e) { docsTableComp.getTable().clearSelection(); selectedDoctor = null; } }); myTableComp.getSelectionModel().addListSelectionListener(listSelectionEvent -> { int row = myTableComp.getSelectedRow(); if (!listSelectionEvent.getValueIsAdjusting() && row >= 0) { String consId = (String) myTableComp.getValueAt(row, 0); selectedConsultation = consultations.stream() .filter(d -> d.getId().equalsIgnoreCase(consId)) .findFirst() .orElse(null); } }); add(new JScrollPane(myTableComp), BorderLayout.CENTER); } public JTable getTable() { return myTableComp; } public AbstractTableModel getConsTableModel() { return consTableModel; } } public class RightPanelComp extends JPanel { public RightPanelComp() { setLayout(new GridLayout(2, 1, 0, 15)); setPreferredSize(new Dimension(1000, 0)); setBorder(new EmptyBorder(10, 10, 10, 10)); setBackground(Color.white); } } public class MainBtnComp extends JButton { public MainBtnComp(String txt) { super(txt); setFont(new Font(\"SansSerif\", Font.BOLD, 16)); setFocusable(false); setFocusPainted(false); setBackground(new Color(0xDCD7C9)); setForeground(Color.black); } } public class CopyrightComp extends JPanel { public CopyrightComp() { setLayout(new BorderLayout()); setBorder(new EmptyBorder(0, 0, 10, 10)); setBackground(Color.white); JLabel jLabel = new JLabel(\"Copyright © 2023 Chamath Jayasena. All rights reserved.\"); jLabel.setFont(new Font(\"SansSerif\", Font.BOLD, 14)); jLabel.setEnabled(false); add(jLabel, BorderLayout.EAST); } } public class DocsTableModel extends AbstractTableModel { String[] colNames; Class[] colClasses; public DocsTableModel() { colNames = new String[]{ \"First Name\", \"Surname\", \"Specialisation\", \"License\", \"DOB\", \"Mobile\" }; colClasses = new Class[]{ String.class, String.class, String.class, String.class, LocalDate.class, String.class }; } @Override public int getRowCount() { return doctors.size(); } @Override public int getColumnCount() { return colNames.length; } @Override public Object getValueAt(int row, int col) { switch (col) { case 0 -> { return doctors.get(row).getName(); } case 1 -> { return doctors.get(row).getSurname(); } case 2 -> { return doctors.get(row).getSpecialisation(); } case 3 -> { return doctors.get(row).getMedicalLicenseNo(); } case 4 -> { return doctors.get(row).getDob(); } case 5 -> { return doctors.get(row).getMobiNo(); } default -> { return null; } } } public String getColumnName(int col) { return colNames[col]; } public Class getColumnClass(int col) { return colClasses[col]; } } public class ConsTableModel extends AbstractTableModel { private final ArrayList<Consultation> consultations; private final String[] colNames; private final Class[] colClasses; public ConsTableModel(ArrayList<Consultation> data) { this.consultations = data; colNames = new String[]{ \"ID\", \"Patient ID\", \"Patient\", \"Doctor\", \"Date\", \"Time\", \"Duration (h)\", \"Cost (£)\" }; colClasses = new Class[]{ String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class }; } @Override public int getRowCount() { return consultations.size(); } @Override public int getColumnCount() { return colNames.length; } @Override public Object getValueAt(int row, int col) { DecimalFormat df = new DecimalFormat(\"0.00\"); switch (col) { case 0 -> { return consultations.get(row).getId(); } case 1 -> { return consultations.get(row).getPatient().getPatientId(); } case 2 -> { return consultations.get(row).getPatient().getFullName(); } case 3 -> { return consultations.get(row).getDoctor().getFullName(); } case 4 -> { return consultations.get(row).getDate().toString(); } case 5 -> { return consultations.get(row).getTime().toString(); } case 6 -> { return consultations.get(row).getDurationHours() + \"\"; } case 7 -> { return df.format(consultations.get(row).getCost()); } default -> { return null; } } } public String getColumnName(int col) { return colNames[col]; } public Class getColumnClass(int col) { return colClasses[col]; } } private static class SampleTimeVetoPolicy implements TimeVetoPolicy { @Override public boolean isTimeAllowed(LocalTime time) { return PickerUtilities.isLocalTimeInRange( time, LocalTime.of(8, 00), LocalTime.of(17, 00), true); } } }","dependencies":[{"file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/gui/ViewConsultationWindow.java","file_content":"package com.cj.wscc.gui; import com.cj.wscc.console.Consultation; import javax.swing.*; import javax.swing.border.CompoundBorder; import javax.swing.border.EmptyBorder; import java.awt.*; import java.awt.event.MouseAdapter; import java.awt.event.MouseEvent; import java.awt.image.BufferedImage; import java.text.DecimalFormat; import java.util.HashMap; import java.util.LinkedHashMap; import java.util.Map; public class ViewConsultationWindow extends JFrame { private final Consultation selectedConsultation; private final DecimalFormat df = new DecimalFormat(\"0.00\"); public ViewConsultationWindow(Consultation selectedConsultation) { super(\"View Consultation\"); setSize(900, 800); setLocationRelativeTo(null); setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); this.selectedConsultation = selectedConsultation; TopPanelComp topPanelComp = new TopPanelComp(); add(topPanelComp, BorderLayout.NORTH); JPanel mainPanel = new JPanel(new GridBagLayout()); mainPanel.setBorder(new EmptyBorder(10, 10, 10, 5)); mainPanel.setBackground(Color.white); GridBagConstraints c = new GridBagConstraints(); c.insets = new Insets(5, 5, 5, 5); c.fill = GridBagConstraints.BOTH; c.weighty = 1; c.weightx = 1; c.gridx = 0; c.gridy = 0; MyLabelComp doctorComp = new MyLabelComp( \"Doctor\", \"Dr. \" + selectedConsultation.getDoctor().getFullName() ); mainPanel.add(doctorComp, c); MyLabelComp dateTimeComp = new MyLabelComp( \"Date & Time\", selectedConsultation.getDate() + \" \" + selectedConsultation.getTime() ); c.gridx = 0; c.gridy = 1; mainPanel.add(dateTimeComp, c); MyLabelComp patientIdComp = new MyLabelComp( \"Patient ID\", Integer.toString(selectedConsultation.getPatient().getPatientId()) ); c.gridx = 0; c.gridy = 2; mainPanel.add(patientIdComp, c); MyLabelComp patientNameComp = new MyLabelComp( \"Patient Name\", selectedConsultation.getPatient().getName() ); c.gridx = 0; c.gridy = 3; mainPanel.add(patientNameComp, c); MyLabelComp patientSurnameComp = new MyLabelComp( \"Patient Surname\", selectedConsultation.getPatient().getSurname() ); c.gridx = 0; c.gridy = 4; mainPanel.add(patientSurnameComp, c); String dob = \"\"; if (selectedConsultation.getPatient().getDob() != null) { dob = selectedConsultation.getPatient().getDob().toString(); } MyLabelComp patientDobComp = new MyLabelComp(\"Patient DOB\", dob); c.gridx = 0; c.gridy = 5; mainPanel.add(patientDobComp, c); MyLabelComp patientMobile = new MyLabelComp( \"Patient Mobile\", selectedConsultation.getPatient().getMobiNo() ); c.gridx = 0; c.gridy = 6; mainPanel.add(patientMobile, c); add(mainPanel, BorderLayout.CENTER); DurationCostComp durationCostComp = new DurationCostComp( Integer.toString(selectedConsultation.getDurationHours()), df.format(selectedConsultation.getCost()) ); c.gridx = 0; c.gridy = 7; mainPanel.add(durationCostComp, c); RightPanelComp rightPanelComp = new RightPanelComp(); NotesComp notesComp = new NotesComp(selectedConsultation.getNotes()); c.weighty = 0.4; c.gridx = 0; c.gridy = 0; rightPanelComp.add(notesComp, c); ImageViewerComp imageViewerComp = new ImageViewerComp(); c.weighty = 1; c.gridx = 0; c.gridy = 1; if (selectedConsultation.getImageFiles() != null && selectedConsultation.getImageFiles().size() > 0) { DecryptWorker worker = new DecryptWorker(selectedConsultation.getImageFiles(), imageViewerComp); worker.execute(); } rightPanelComp.add(imageViewerComp, c); add(rightPanelComp, BorderLayout.EAST); } public class TopPanelComp extends JPanel { public TopPanelComp() { setLayout(new BorderLayout()); setBackground(new Color(0x3C4048)); setPreferredSize(new Dimension(0, 50)); setLayout(new BorderLayout()); JLabel topLabel = new JLabel( \"Consultation \" + selectedConsultation.getId(), SwingConstants.CENTER ); topLabel.setFont(new Font(\"SansSerif\", Font.PLAIN, 25)); topLabel.setForeground(Color.white); add(topLabel, BorderLayout.CENTER); } } public class ImageViewerComp extends JPanel { private final JLabel imageLabel; private LinkedHashMap<BufferedImage, Image> images = new LinkedHashMap<>(); private int imgNo = 0; public ImageViewerComp() { int noOfImgs = selectedConsultation.getImageFiles() == null ? 0 : selectedConsultation.getImageFiles().size(); String title = String.format(\"Images (%d)\", noOfImgs); setBorder(new CompoundBorder(BorderFactory.createTitledBorder(title), new EmptyBorder(5, 5, 5, 5))); setBackground(Color.white); imageLabel = new JLabel(); imageLabel.addMouseListener(new MouseAdapter() { @Override public void mouseClicked(MouseEvent e) { if (e.getClickCount() == 2) { FullImageViewerWindow fullImageViewerWindow = new FullImageViewerWindow(getOriginalImageAt(imgNo)); fullImageViewerWindow.setVisible(true); } } }); JPanel container = new JPanel(new BorderLayout(0, 5)); container.setBackground(Color.white); JScrollPane scrollPane = new JScrollPane(); scrollPane.setPreferredSize(new Dimension(450, 380)); scrollPane.setViewportView(imageLabel); scrollPane.getViewport().setBackground(Color.white); container.add(scrollPane, BorderLayout.CENTER); JPanel btnContainer = new JPanel(new FlowLayout()); btnContainer.setBackground(Color.white); JButton prevBtn = new JButton(\"Previous\"); prevBtn.addActionListener(actionEvent -> { if (images != null && images.size() > 0) { if (imgNo == 0) { imgNo = images.size() - 1; } else { --imgNo; } imageLabel.setIcon(new ImageIcon(getScaledImageAt(imgNo))); } }); JButton nextBtn = new JButton(\"Next\"); nextBtn.addActionListener(actionEvent -> { if (images != null && images.size() > 0) { if (imgNo == images.size() - 1) { imgNo = 0; } else { ++imgNo; } imageLabel.setIcon(new ImageIcon(getScaledImageAt(imgNo))); } }); btnContainer.add(prevBtn); btnContainer.add(nextBtn); container.add(btnContainer, BorderLayout.SOUTH); add(container); } public void setImages(LinkedHashMap<BufferedImage, Image> images) { this.images = images; imageLabel.setIcon(new ImageIcon(getScaledImageAt(0))); } public Image getScaledImageAt(int position) { int i = 0; HashMap<Object, Object> map; for (Map.Entry<BufferedImage, Image> entry : images.entrySet()) { if (i == position) { return entry.getValue(); } i++; } return null; } public Image getOriginalImageAt(int position) { int i = 0; HashMap<Object, Object> map; for (Map.Entry<BufferedImage, Image> entry : images.entrySet()) { if (i == position) { return entry.getKey(); } i++; } return null; } } public class RightPanelComp extends JPanel { public RightPanelComp() { setLayout(new GridBagLayout()); setPreferredSize(new Dimension(500, 0)); setBorder(new EmptyBorder(10, 5, 10, 10)); setBackground(Color.white); } } public class NotesComp extends JPanel { private final JTextArea textArea; public NotesComp(String txt) { setLayout(new BorderLayout()); setBorder(new CompoundBorder(BorderFactory.createTitledBorder(\"Notes\"), new EmptyBorder(0, 5, 5, 5))); setBackground(Color.white); textArea = new JTextArea(txt); textArea.setRows(4); textArea.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); textArea.setEditable(false); textArea.setFocusable(false); textArea.setBackground(Color.white); add(new JScrollPane(textArea), BorderLayout.CENTER); } public JTextArea getTextArea() { return textArea; } } public static class MyLabelComp extends JPanel { private final JLabel myLabel; public MyLabelComp(String title, String label) { setLayout(new BorderLayout()); setBorder(new CompoundBorder(BorderFactory.createTitledBorder(title), new EmptyBorder(0, 5, 5, 5))); setBackground(Color.white); myLabel = new JLabel(label); myLabel.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); add(myLabel); } } public class DurationCostComp extends JPanel { JLabel durationLabel; JLabel costLabel; public DurationCostComp(String duration, String cost) { setLayout(new GridBagLayout()); setBackground(Color.white); GridBagConstraints c = new GridBagConstraints(); c.weightx = 0.5; c.weighty = 0.5; c.fill = GridBagConstraints.BOTH; JPanel durationContainer = new JPanel(new BorderLayout()); durationContainer.setBackground(Color.white); durationContainer.setBorder(new CompoundBorder(BorderFactory.createTitledBorder(\"Duration (h)\"), new EmptyBorder(0, 5, 5, 5))); durationLabel = new JLabel(duration); durationLabel.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); durationContainer.add(durationLabel); add(durationContainer, c); JPanel costContainer = new JPanel(new BorderLayout()); costContainer.setBackground(Color.white); costContainer.setBorder(new CompoundBorder(BorderFactory.createTitledBorder(\"Cost (£)\"), new EmptyBorder(0, 5, 5, 5))); costLabel = new JLabel(); costLabel.setText(cost); costLabel.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); costContainer.add(costLabel); add(costContainer, c); } } }"}]}}
{"project_id":214,"chunk_id":0,"content":{"main_file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/gui/EditConsultationWindow.java","main_file_content":"package com.cj.wscc.gui; import com.cj.wscc.console.Consultation; import com.cj.wscc.console.Patient; import com.github.lgooddatepicker.components.DatePicker; import javax.crypto.Cipher; import javax.swing.*; import javax.swing.border.CompoundBorder; import javax.swing.border.EmptyBorder; import javax.swing.event.CaretEvent; import javax.swing.event.CaretListener; import javax.swing.event.DocumentEvent; import javax.swing.event.DocumentListener; import javax.swing.filechooser.FileNameExtensionFilter; import java.awt.*; import java.awt.event.ActionEvent; import java.io.File; import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.security.Key; import java.security.NoSuchAlgorithmException; import java.security.spec.InvalidKeySpecException; import java.text.DecimalFormat; import java.util.ArrayList; import java.util.LinkedHashMap; import java.util.Map; import java.util.UUID; public class EditConsultationWindow extends JFrame { private ArrayList<Consultation> consultations; private Consultation selectedConsultation; private MyPatientIdComp patientIdComp; private DurationCostComp durationCostComp; private MyTxtFieldComp patientNameComp; private MyTxtFieldComp patientSurnameComp; private MyDOBComp patientDobComp; private MyTxtFieldComp patientMobileComp; private NotesComp notesComp; private FileChooserComp fileChooserComp; private Patient selectedPatient; private final DecimalFormat df = new DecimalFormat(\"0.00\"); public EditConsultationWindow(ArrayList<Consultation> consultations, Consultation selectedConsultation) { super(\"Edit Consultation\"); setSize(900, 700); setLocationRelativeTo(null); setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); this.consultations = consultations; this.selectedConsultation = selectedConsultation; this.selectedPatient = selectedConsultation.getPatient(); add(new TopPanelComp(), BorderLayout.NORTH); GridBagLayout gridBagLayout = new GridBagLayout(); gridBagLayout.columnWidths = new int[]{50}; JPanel centerPanel = new JPanel(gridBagLayout); centerPanel.setBorder(new EmptyBorder(5, 5, 5, 5)); centerPanel.setBackground(new Color(0xFFFFFF)); MyTxtFieldComp doctorComp = new MyTxtFieldComp(\"Doctor\"); JTextField docTxtField = (JTextField) doctorComp.getComponents()[0]; docTxtField.setText(\"Dr. \" + selectedConsultation.getDoctor().getFullName()); docTxtField.setEditable(false); docTxtField.setFocusable(false); GridBagConstraints c = new GridBagConstraints(); c.insets = new Insets(5, 5, 5, 5); c.fill = GridBagConstraints.BOTH; c.weighty = 1; c.weightx = 1; c.gridx = 0; c.gridy = 0; centerPanel.add(doctorComp, c); patientNameComp = new MyTxtFieldComp(\"Patient Name\"); patientNameComp.getTxtField().setText(selectedConsultation.getPatient().getName()); patientSurnameComp = new MyTxtFieldComp(\"Patient Surname\"); patientSurnameComp.getTxtField().setText(selectedConsultation.getPatient().getSurname()); c.gridx = 0; c.gridy = 2; centerPanel.add(patientNameComp, c); c.gridx = 1; c.gridy = 2; centerPanel.add(patientSurnameComp, c); c.gridx = 0; c.gridy = 3; patientDobComp = new MyDOBComp(); patientDobComp.getDatePicker().setDate(selectedConsultation.getPatient().getDob()); centerPanel.add(patientDobComp, c); c.gridx = 1; c.gridy = 3; patientMobileComp = new MyTxtFieldComp(\"Patient Mobile\"); patientMobileComp.getTxtField().setText(selectedConsultation.getPatient().getMobiNo()); centerPanel.add(patientMobileComp, c); c.gridx = 1; c.gridy = 0; JPanel date = new MyTxtFieldComp(\"Date & Time\"); JTextField dateTxtField = (JTextField) date.getComponents()[0]; dateTxtField.setText( selectedConsultation.getDate().toString() + \" \" + selectedConsultation.getTime().toString() ); dateTxtField.setEditable(false); dateTxtField.setFocusable(false); centerPanel.add(date, c); c.gridx = 1; c.gridy = 1; durationCostComp = new DurationCostComp(); durationCostComp.getDurationTxtField().setText(selectedConsultation.getDurationHours() + \"\"); durationCostComp.getCostTxtField().setText(df.format(selectedConsultation.getCost())); centerPanel.add(durationCostComp, c); c.gridx = 0; c.gridy = 4; notesComp = new NotesComp(); notesComp.getTextArea().setText(selectedConsultation.getNotes()); centerPanel.add(notesComp, c); c.gridx = 1; c.gridy = 4; fileChooserComp = new FileChooserComp(); if (selectedConsultation.getImageFiles() != null) { File[] files = selectedConsultation.getImageFiles().toArray(new File[0]); StringBuilder sb = new StringBuilder(); for (File file : files) { sb.append(file.getName()).append(\"\\n\"); } fileChooserComp.getFileChooser().setSelectedFiles(files); fileChooserComp.textField.setText(sb.toString()); } centerPanel.add(fileChooserComp, c); patientIdComp = new MyPatientIdComp(); patientIdComp.getJComboBox().setSelectedItem(selectedConsultation.getPatient().getPatientId()); c.gridx = 0; c.gridy = 1; centerPanel.add(patientIdComp, c); add(centerPanel, BorderLayout.CENTER); add(new BtnPanelComp(), BorderLayout.SOUTH); } public void saveConsultation(ActionEvent event) { String idStr = (patientIdComp.getJComboBox().getSelectedItem() == null) ? \"\" : patientIdComp.getJComboBox().getSelectedItem().toString(); String name = patientNameComp.getTxtField().getText(); String surname = patientSurnameComp.getTxtField().getText(); String mobile = patientMobileComp.getTxtField().getText(); String duration = durationCostComp.getDurationTxtField().getText(); LinkedHashMap<String, String> requiredValues = new LinkedHashMap<>() {{ put(\"Patient ID\", idStr); put(\"Duration\", duration); put(\"Patient Name\", name); put(\"Patient Surname\", surname); put(\"Patient Mobile\", mobile); }}; for (Map.Entry<String, String> entry : requiredValues.entrySet()) { if (entry.getValue().isEmpty()) { JOptionPane.showMessageDialog( null, entry.getKey() + \" field cannot be empty\", \"Error\", JOptionPane.ERROR_MESSAGE ); return; } } int id; try { id = Integer.parseInt(idStr); } catch (Exception e) { JOptionPane.showMessageDialog( null, \"Patient ID must be a number\", \"Error\", JOptionPane.ERROR_MESSAGE ); return; } try { Integer.parseInt(mobile); } catch (Exception e) { JOptionPane.showMessageDialog( null, \"Patient mobile number must be a number\", \"Error\", JOptionPane.ERROR_MESSAGE ); return; } try { Integer.parseInt(duration); } catch (Exception e) { JOptionPane.showMessageDialog( null, \"Duration must be a number\", \"Error\", JOptionPane.ERROR_MESSAGE ); return; } if (selectedPatient == null) { Patient patient = new Patient( name, surname, patientDobComp.getDatePicker().getDate(), mobile, id ); selectedConsultation.setPatient(patient); } else { selectedPatient.setPatientId(id); selectedPatient.setName(name); selectedPatient.setSurname(surname); selectedPatient.setDob(patientDobComp.getDatePicker().getDate()); selectedPatient.setMobiNo(mobile); selectedConsultation.setPatient(selectedPatient); } try { ArrayList<File> files = encryptImgFiles(selectedConsultation.getId()); selectedConsultation.setId(selectedConsultation.getId()); selectedConsultation.setDoctor(selectedConsultation.getDoctor()); selectedConsultation.setDate(selectedConsultation.getDate()); selectedConsultation.setTime(selectedConsultation.getTime()); selectedConsultation.setDurationHours(Integer.parseInt(durationCostComp.getDurationTxtField().getText())); selectedConsultation.setCost(Double.parseDouble(durationCostComp.getCostTxtField().getText().replace(\"£\", \"\").trim())); selectedConsultation.setNotes(notesComp.getTextArea().getText()); selectedConsultation.setImageFiles(files); MainWindow.saveConsultations(); MainWindow.updateConsTableModel(); closeWindow(event); JOptionPane.showMessageDialog( null, \"Consultation saved successfully!\", \"Success\", JOptionPane.INFORMATION_MESSAGE ); } catch (Exception e) { e.printStackTrace(); } } public String getRandID() { UUID uuid = UUID.randomUUID(); return uuid.toString().substring(0, 8); } public ArrayList<File> encryptImgFiles(String consultationId) throws NoSuchAlgorithmException, InvalidKeySpecException { File[] files = fileChooserComp.getFileChooser().getSelectedFiles(); if (files.length == 0) { return null; } if (selectedConsultation.getImageFiles() != null) { StringBuilder sb = new StringBuilder(); for (File file : selectedConsultation.getImageFiles()) { sb.append(file.getName()).append(\"\\n\"); } if (fileChooserComp.getTextField().getText().equals(sb.toString())) { return selectedConsultation.getImageFiles(); } } MainWindow.removeConsultationImgFiles(selectedConsultation); final String DEST = \"patient_img\" + \"/\" + consultationId; try { Files.createDirectories(Paths.get(DEST)); } catch (IOException e) { throw new RuntimeException(e); } ArrayList<File> newFiles = new ArrayList<>(); String randFileName; String extension; Path dest; Key KEY = PasswordBasedKeyAES.getKey(); for (File f : files) { randFileName = getRandID(); extension = getFileExtension(f.getName()); dest = Paths.get(DEST, randFileName + extension); try { Cipher cipher = Cipher.getInstance(\"AES\"); cipher.init(Cipher.ENCRYPT_MODE, KEY); FileInputStream inputStream = new FileInputStream(f); File outputFile = new File(dest.toUri()); FileOutputStream outputStream = new FileOutputStream(outputFile); byte[] buffer = new byte[64]; int bytesRead; while ((bytesRead = inputStream.read(buffer)) != -1) { byte[] output = cipher.update(buffer, 0, bytesRead); if (output != null) { outputStream.write(output); } } byte[] outputBytes = cipher.doFinal(); if (outputBytes != null) { outputStream.write(outputBytes); } inputStream.close(); outputStream.close(); newFiles.add(outputFile); } catch (Exception e) { throw new RuntimeException(e); } } fileChooserComp.getFileChooser().setSelectedFiles(null); return newFiles; } public String getFileExtension(String fileName) { String extension = \"\"; int index = fileName.lastIndexOf('.'); if (index > 0) { extension = fileName.substring(index + 1); } return \".\" + extension; } public class MyTxtFieldComp extends JPanel { private final JTextField txtField; public MyTxtFieldComp(String label) { setLayout(new BorderLayout()); setBorder(new CompoundBorder(BorderFactory.createTitledBorder(label), new EmptyBorder(0, 5, 5, 5))); setBackground(new Color(0xFFFFFF)); txtField = new JTextField(); txtField.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); add(txtField); } public JTextField getTxtField() { return txtField; } } public class MyPatientIdComp extends JPanel { private final JComboBox comboBox; public MyPatientIdComp() { setLayout(new BorderLayout()); setBorder(new CompoundBorder(BorderFactory.createTitledBorder(\"Patient ID\"), new EmptyBorder(0, 5, 5, 5))); setBackground(Color.white); ArrayList<Integer> suggestions = new ArrayList<>(); for (Consultation c : consultations) { suggestions.add(c.getPatient().getPatientId()); } comboBox = new JComboBox(suggestions.toArray()); comboBox.setEditable(true); comboBox.setSelectedItem(null); comboBox.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); JTextField textField = (JTextField) comboBox.getEditor().getEditorComponent(); textField.getDocument().addDocumentListener(new DocumentListener() { @Override public void insertUpdate(DocumentEvent e) { setPatient(textField.getText()); updateCost(); } @Override public void removeUpdate(DocumentEvent e) { setPatient(textField.getText()); updateCost(); } @Override public void changedUpdate(DocumentEvent e) { setPatient(textField.getText()); updateCost(); } }); add(comboBox, BorderLayout.CENTER); } public JComboBox getJComboBox() { return comboBox; } } public void updateCost() { int hours; int cost; try { hours = !durationCostComp.getDurationTxtField().getText().isEmpty() ? Integer.parseInt(durationCostComp.getDurationTxtField().getText()) : 0; } catch (Exception e) { return; } try { if (selectedPatient != null) { long count = consultations.stream() .filter(c -> c.getPatient().getPatientId() == selectedPatient.getPatientId()) .count(); cost = count > 1 ? hours * 25 : hours * 15; } else { cost = hours * 15; } durationCostComp.getCostTxtField().setText(df.format(cost)); } catch (Exception e) { e.printStackTrace(); } } public void setPatient(String patientId) { if (patientId.isEmpty()) { selectedPatient = null; return; } int id; try { id = Integer.parseInt(patientId); } catch (Exception e) { return; } Consultation consultation = consultations.stream() .filter(c -> c.getPatient().getPatientId() == id) .findFirst() .orElse(null); if (consultation != null) { selectedPatient = consultation.getPatient(); } else { selectedPatient = null; } } public class MyDOBComp extends JPanel { DatePicker datePicker; public MyDOBComp() { setLayout(new BorderLayout()); setBorder(new CompoundBorder(BorderFactory.createTitledBorder(\"Patient DOB\"), new EmptyBorder(0, 5, 5, 5))); setBackground(Color.white); datePicker = new DatePicker(); datePicker.getComponentDateTextField().setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); add(datePicker); } public DatePicker getDatePicker() { return datePicker; } } public class DurationCostComp extends JPanel { JFormattedTextField durationTxtField; JTextField costTxtField; public DurationCostComp() { setLayout(new BorderLayout(5, 0)); setBackground(Color.white); JPanel durationContainer = new JPanel(new BorderLayout()); durationContainer.setBackground(Color.white); durationContainer.setBorder(new CompoundBorder(BorderFactory.createTitledBorder(\"Duration (h)\"), new EmptyBorder(0, 5, 5, 5))); durationTxtField = new JFormattedTextField(); durationTxtField.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); durationTxtField.addCaretListener(new CaretListener() { @Override public void caretUpdate(CaretEvent caretEvent) { updateCost(); } }); durationContainer.add(durationTxtField); add(durationContainer, BorderLayout.CENTER); JPanel costContainer = new JPanel(new BorderLayout()); costContainer.setBackground(Color.white); costContainer.setBorder(new CompoundBorder(BorderFactory.createTitledBorder(\"Cost (£)\"), new EmptyBorder(0, 5, 5, 5))); costTxtField = new JTextField(); costTxtField.setColumns(8); costTxtField.setFocusable(false); costTxtField.setText(\"0.00\"); costTxtField.setEditable(false); costTxtField.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); costContainer.add(costTxtField); add(costContainer, BorderLayout.EAST); } public JTextField getDurationTxtField() { return durationTxtField; } public JTextField getCostTxtField() { return costTxtField; } } public class NotesComp extends JPanel { private final JTextArea textArea; public NotesComp() { setLayout(new BorderLayout()); setBorder(new CompoundBorder(BorderFactory.createTitledBorder(\"Notes\"), new EmptyBorder(0, 5, 5, 5))); setBackground(Color.white); textArea = new JTextArea(); textArea.setRows(4); textArea.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); add(new JScrollPane(textArea), BorderLayout.CENTER); } public JTextArea getTextArea() { return textArea; } } public class TopPanelComp extends JPanel { public TopPanelComp() { setLayout(new BorderLayout()); setBackground(new Color(0x256D85)); setPreferredSize(new Dimension(0, 50)); setLayout(new BorderLayout()); JLabel topLabel = new JLabel( \"Edit Consultation \" + selectedConsultation.getId(), SwingConstants.CENTER ); topLabel.setFont(new Font(\"SansSerif\", Font.PLAIN, 25)); topLabel.setForeground(Color.white); add(topLabel, BorderLayout.CENTER); } } public class FileChooserComp extends JPanel { private final JFileChooser fileChooser; private final JTextArea textField; public FileChooserComp() { setLayout(new BorderLayout()); setBorder(new CompoundBorder(BorderFactory.createTitledBorder(\"Add Images\"), new EmptyBorder(0, 5, 5, 5))); setBackground(Color.white); fileChooser = new JFileChooser(); fileChooser.setMultiSelectionEnabled(true); fileChooser.setPreferredSize(new Dimension(1000, 500)); fileChooser.setAcceptAllFileFilterUsed(false); fileChooser.addChoosableFileFilter(new FileNameExtensionFilter(\"Image files\", \"jpg\", \"jpeg\", \"png\", \"gif\")); fileChooser.setDialogTitle(\"Choose image files\"); JButton chooseBtn = new JButton(\"Choose Images\"); textField = new JTextArea(); textField.setRows(3); textField.setEditable(false); textField.setFocusable(false); textField.setFont(new Font(\"SansSerif\", Font.PLAIN, 18)); chooseBtn.addActionListener(e -> { if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) { File[] files = fileChooser.getSelectedFiles(); StringBuilder sb = new StringBuilder(); for (File file : files) { sb.append(file.getName()).append(\"\\n\"); } textField.setText(sb.toString()); } }); add(chooseBtn, BorderLayout.NORTH); add(new JScrollPane(textField), BorderLayout.CENTER); } public JFileChooser getFileChooser() { return fileChooser; } public JTextArea getTextField() { return textField; } } public class BtnPanelComp extends JPanel { public BtnPanelComp() { FlowLayout flowLayout = new FlowLayout(FlowLayout.RIGHT); flowLayout.setHgap(10); setLayout(flowLayout); setBorder(new EmptyBorder(0, 0, 5, 5)); setBackground(Color.white); JButton saveBtn = new JButton(\"Save\"); saveBtn.setPreferredSize(new Dimension(100, 40)); saveBtn.addActionListener(EditConsultationWindow.this::saveConsultation); add(saveBtn); JButton cancelBtn = new JButton(\"Cancel\"); cancelBtn.setPreferredSize(new Dimension(100, 40)); cancelBtn.addActionListener(EditConsultationWindow.this::closeWindow); add(cancelBtn); } } public void closeWindow(ActionEvent e) { JButton source = (JButton) e.getSource(); Container topLevelContainer = source.getTopLevelAncestor(); if (topLevelContainer instanceof JFrame) { ((JFrame) topLevelContainer).dispose(); } else if (topLevelContainer instanceof JDialog) { ((JDialog) topLevelContainer).dispose(); } } }","dependencies":[{"file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/console/Consultation.java","file_content":"package com.cj.wscc.console; import java.io.File; import java.io.Serializable; import java.time.LocalDate; import java.time.LocalTime; import java.util.ArrayList; public class Consultation implements Serializable { private String id; private Doctor doctor; private Patient patient; private LocalDate date; private LocalTime time; private int durationHours; private double cost; private String notes; private ArrayList<File> imageFiles; public Consultation(String id, Doctor doctor, Patient patient, LocalDate date, LocalTime time, int duration, double cost, String notes, ArrayList<File> files) { this.id = id; this.doctor = doctor; this.patient = patient; this.date = date; this.time = time; this.durationHours = duration; this.cost = cost; this.notes = notes; this.imageFiles = files; } public String getId() { return id; } public void setId(String id) { this.id = id; } public Doctor getDoctor() { return doctor; } public void setDoctor(Doctor doctor) { this.doctor = doctor; } public Patient getPatient() { return patient; } public void setPatient(Patient patient) { this.patient = patient; } public LocalDate getDate() { return date; } public void setDate(LocalDate date) { this.date = date; } public LocalTime getTime() { return time; } public void setTime(LocalTime time) { this.time = time; } public int getDurationHours() { return durationHours; } public void setDurationHours(int durationHours) { this.durationHours = durationHours; } public double getCost() { return cost; } public void setCost(double cost) { this.cost = cost; } public String getNotes() { return notes; } public void setNotes(String notes) { this.notes = notes; } public ArrayList<File> getImageFiles() { return imageFiles; } public void setImageFiles(ArrayList<File> imageFiles) { this.imageFiles = imageFiles; } }"},{"file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/console/Patient.java","file_content":"package com.cj.wscc.console; import java.time.LocalDate; public class Patient extends Person { private int patientId; public Patient(String name, String surname, LocalDate DOB, String mobiNo, int patientId) { super(name, surname, DOB, mobiNo); this.patientId = patientId; } public int getPatientId() { return patientId; } public void setPatientId(int patientId) { this.patientId = patientId; } }"}]}}
{"project_id":214,"chunk_id":1,"content":{"main_file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/gui/EditConsultationWindow.java","main_file_content":"package com.cj.wscc.gui; import com.cj.wscc.console.Consultation; import com.cj.wscc.console.Patient; import com.github.lgooddatepicker.components.DatePicker; import javax.crypto.Cipher; import javax.swing.*; import javax.swing.border.CompoundBorder; import javax.swing.border.EmptyBorder; import javax.swing.event.CaretEvent; import javax.swing.event.CaretListener; import javax.swing.event.DocumentEvent; import javax.swing.event.DocumentListener; import javax.swing.filechooser.FileNameExtensionFilter; import java.awt.*; import java.awt.event.ActionEvent; import java.io.File; import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.security.Key; import java.security.NoSuchAlgorithmException; import java.security.spec.InvalidKeySpecException; import java.text.DecimalFormat; import java.util.ArrayList; import java.util.LinkedHashMap; import java.util.Map; import java.util.UUID; public class EditConsultationWindow extends JFrame { private ArrayList<Consultation> consultations; private Consultation selectedConsultation; private MyPatientIdComp patientIdComp; private DurationCostComp durationCostComp; private MyTxtFieldComp patientNameComp; private MyTxtFieldComp patientSurnameComp; private MyDOBComp patientDobComp; private MyTxtFieldComp patientMobileComp; private NotesComp notesComp; private FileChooserComp fileChooserComp; private Patient selectedPatient; private final DecimalFormat df = new DecimalFormat(\"0.00\"); public EditConsultationWindow(ArrayList<Consultation> consultations, Consultation selectedConsultation) { super(\"Edit Consultation\"); setSize(900, 700); setLocationRelativeTo(null); setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); this.consultations = consultations; this.selectedConsultation = selectedConsultation; this.selectedPatient = selectedConsultation.getPatient(); add(new TopPanelComp(), BorderLayout.NORTH); GridBagLayout gridBagLayout = new GridBagLayout(); gridBagLayout.columnWidths = new int[]{50}; JPanel centerPanel = new JPanel(gridBagLayout); centerPanel.setBorder(new EmptyBorder(5, 5, 5, 5)); centerPanel.setBackground(new Color(0xFFFFFF)); MyTxtFieldComp doctorComp = new MyTxtFieldComp(\"Doctor\"); JTextField docTxtField = (JTextField) doctorComp.getComponents()[0]; docTxtField.setText(\"Dr. \" + selectedConsultation.getDoctor().getFullName()); docTxtField.setEditable(false); docTxtField.setFocusable(false); GridBagConstraints c = new GridBagConstraints(); c.insets = new Insets(5, 5, 5, 5); c.fill = GridBagConstraints.BOTH; c.weighty = 1; c.weightx = 1; c.gridx = 0; c.gridy = 0; centerPanel.add(doctorComp, c); patientNameComp = new MyTxtFieldComp(\"Patient Name\"); patientNameComp.getTxtField().setText(selectedConsultation.getPatient().getName()); patientSurnameComp = new MyTxtFieldComp(\"Patient Surname\"); patientSurnameComp.getTxtField().setText(selectedConsultation.getPatient().getSurname()); c.gridx = 0; c.gridy = 2; centerPanel.add(patientNameComp, c); c.gridx = 1; c.gridy = 2; centerPanel.add(patientSurnameComp, c); c.gridx = 0; c.gridy = 3; patientDobComp = new MyDOBComp(); patientDobComp.getDatePicker().setDate(selectedConsultation.getPatient().getDob()); centerPanel.add(patientDobComp, c); c.gridx = 1; c.gridy = 3; patientMobileComp = new MyTxtFieldComp(\"Patient Mobile\"); patientMobileComp.getTxtField().setText(selectedConsultation.getPatient().getMobiNo()); centerPanel.add(patientMobileComp, c); c.gridx = 1; c.gridy = 0; JPanel date = new MyTxtFieldComp(\"Date & Time\"); JTextField dateTxtField = (JTextField) date.getComponents()[0]; dateTxtField.setText( selectedConsultation.getDate().toString() + \" \" + selectedConsultation.getTime().toString() ); dateTxtField.setEditable(false); dateTxtField.setFocusable(false); centerPanel.add(date, c); c.gridx = 1; c.gridy = 1; durationCostComp = new DurationCostComp(); durationCostComp.getDurationTxtField().setText(selectedConsultation.getDurationHours() + \"\"); durationCostComp.getCostTxtField().setText(df.format(selectedConsultation.getCost())); centerPanel.add(durationCostComp, c); c.gridx = 0; c.gridy = 4; notesComp = new NotesComp(); notesComp.getTextArea().setText(selectedConsultation.getNotes()); centerPanel.add(notesComp, c); c.gridx = 1; c.gridy = 4; fileChooserComp = new FileChooserComp(); if (selectedConsultation.getImageFiles() != null) { File[] files = selectedConsultation.getImageFiles().toArray(new File[0]); StringBuilder sb = new StringBuilder(); for (File file : files) { sb.append(file.getName()).append(\"\\n\"); } fileChooserComp.getFileChooser().setSelectedFiles(files); fileChooserComp.textField.setText(sb.toString()); } centerPanel.add(fileChooserComp, c); patientIdComp = new MyPatientIdComp(); patientIdComp.getJComboBox().setSelectedItem(selectedConsultation.getPatient().getPatientId()); c.gridx = 0; c.gridy = 1; centerPanel.add(patientIdComp, c); add(centerPanel, BorderLayout.CENTER); add(new BtnPanelComp(), BorderLayout.SOUTH); } public void saveConsultation(ActionEvent event) { String idStr = (patientIdComp.getJComboBox().getSelectedItem() == null) ? \"\" : patientIdComp.getJComboBox().getSelectedItem().toString(); String name = patientNameComp.getTxtField().getText(); String surname = patientSurnameComp.getTxtField().getText(); String mobile = patientMobileComp.getTxtField().getText(); String duration = durationCostComp.getDurationTxtField().getText(); LinkedHashMap<String, String> requiredValues = new LinkedHashMap<>() {{ put(\"Patient ID\", idStr); put(\"Duration\", duration); put(\"Patient Name\", name); put(\"Patient Surname\", surname); put(\"Patient Mobile\", mobile); }}; for (Map.Entry<String, String> entry : requiredValues.entrySet()) { if (entry.getValue().isEmpty()) { JOptionPane.showMessageDialog( null, entry.getKey() + \" field cannot be empty\", \"Error\", JOptionPane.ERROR_MESSAGE ); return; } } int id; try { id = Integer.parseInt(idStr); } catch (Exception e) { JOptionPane.showMessageDialog( null, \"Patient ID must be a number\", \"Error\", JOptionPane.ERROR_MESSAGE ); return; } try { Integer.parseInt(mobile); } catch (Exception e) { JOptionPane.showMessageDialog( null, \"Patient mobile number must be a number\", \"Error\", JOptionPane.ERROR_MESSAGE ); return; } try { Integer.parseInt(duration); } catch (Exception e) { JOptionPane.showMessageDialog( null, \"Duration must be a number\", \"Error\", JOptionPane.ERROR_MESSAGE ); return; } if (selectedPatient == null) { Patient patient = new Patient( name, surname, patientDobComp.getDatePicker().getDate(), mobile, id ); selectedConsultation.setPatient(patient); } else { selectedPatient.setPatientId(id); selectedPatient.setName(name); selectedPatient.setSurname(surname); selectedPatient.setDob(patientDobComp.getDatePicker().getDate()); selectedPatient.setMobiNo(mobile); selectedConsultation.setPatient(selectedPatient); } try { ArrayList<File> files = encryptImgFiles(selectedConsultation.getId()); selectedConsultation.setId(selectedConsultation.getId()); selectedConsultation.setDoctor(selectedConsultation.getDoctor()); selectedConsultation.setDate(selectedConsultation.getDate()); selectedConsultation.setTime(selectedConsultation.getTime()); selectedConsultation.setDurationHours(Integer.parseInt(durationCostComp.getDurationTxtField().getText())); selectedConsultation.setCost(Double.parseDouble(durationCostComp.getCostTxtField().getText().replace(\"£\", \"\").trim())); selectedConsultation.setNotes(notesComp.getTextArea().getText()); selectedConsultation.setImageFiles(files); MainWindow.saveConsultations(); MainWindow.updateConsTableModel(); closeWindow(event); JOptionPane.showMessageDialog( null, \"Consultation saved successfully!\", \"Success\", JOptionPane.INFORMATION_MESSAGE ); } catch (Exception e) { e.printStackTrace(); } } public String getRandID() { UUID uuid = UUID.randomUUID(); return uuid.toString().substring(0, 8); } public ArrayList<File> encryptImgFiles(String consultationId) throws NoSuchAlgorithmException, InvalidKeySpecException { File[] files = fileChooserComp.getFileChooser().getSelectedFiles(); if (files.length == 0) { return null; } if (selectedConsultation.getImageFiles() != null) { StringBuilder sb = new StringBuilder(); for (File file : selectedConsultation.getImageFiles()) { sb.append(file.getName()).append(\"\\n\"); } if (fileChooserComp.getTextField().getText().equals(sb.toString())) { return selectedConsultation.getImageFiles(); } } MainWindow.removeConsultationImgFiles(selectedConsultation); final String DEST = \"patient_img\" + \"/\" + consultationId; try { Files.createDirectories(Paths.get(DEST)); } catch (IOException e) { throw new RuntimeException(e); } ArrayList<File> newFiles = new ArrayList<>(); String randFileName; String extension; Path dest; Key KEY = PasswordBasedKeyAES.getKey(); for (File f : files) { randFileName = getRandID(); extension = getFileExtension(f.getName()); dest = Paths.get(DEST, randFileName + extension); try { Cipher cipher = Cipher.getInstance(\"AES\"); cipher.init(Cipher.ENCRYPT_MODE, KEY); FileInputStream inputStream = new FileInputStream(f); File outputFile = new File(dest.toUri()); FileOutputStream outputStream = new FileOutputStream(outputFile); byte[] buffer = new byte[64]; int bytesRead; while ((bytesRead = inputStream.read(buffer)) != -1) { byte[] output = cipher.update(buffer, 0, bytesRead); if (output != null) { outputStream.write(output); } } byte[] outputBytes = cipher.doFinal(); if (outputBytes != null) { outputStream.write(outputBytes); } inputStream.close(); outputStream.close(); newFiles.add(outputFile); } catch (Exception e) { throw new RuntimeException(e); } } fileChooserComp.getFileChooser().setSelectedFiles(null); return newFiles; } public String getFileExtension(String fileName) { String extension = \"\"; int index = fileName.lastIndexOf('.'); if (index > 0) { extension = fileName.substring(index + 1); } return \".\" + extension; } public class MyTxtFieldComp extends JPanel { private final JTextField txtField; public MyTxtFieldComp(String label) { setLayout(new BorderLayout()); setBorder(new CompoundBorder(BorderFactory.createTitledBorder(label), new EmptyBorder(0, 5, 5, 5))); setBackground(new Color(0xFFFFFF)); txtField = new JTextField(); txtField.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); add(txtField); } public JTextField getTxtField() { return txtField; } } public class MyPatientIdComp extends JPanel { private final JComboBox comboBox; public MyPatientIdComp() { setLayout(new BorderLayout()); setBorder(new CompoundBorder(BorderFactory.createTitledBorder(\"Patient ID\"), new EmptyBorder(0, 5, 5, 5))); setBackground(Color.white); ArrayList<Integer> suggestions = new ArrayList<>(); for (Consultation c : consultations) { suggestions.add(c.getPatient().getPatientId()); } comboBox = new JComboBox(suggestions.toArray()); comboBox.setEditable(true); comboBox.setSelectedItem(null); comboBox.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); JTextField textField = (JTextField) comboBox.getEditor().getEditorComponent(); textField.getDocument().addDocumentListener(new DocumentListener() { @Override public void insertUpdate(DocumentEvent e) { setPatient(textField.getText()); updateCost(); } @Override public void removeUpdate(DocumentEvent e) { setPatient(textField.getText()); updateCost(); } @Override public void changedUpdate(DocumentEvent e) { setPatient(textField.getText()); updateCost(); } }); add(comboBox, BorderLayout.CENTER); } public JComboBox getJComboBox() { return comboBox; } } public void updateCost() { int hours; int cost; try { hours = !durationCostComp.getDurationTxtField().getText().isEmpty() ? Integer.parseInt(durationCostComp.getDurationTxtField().getText()) : 0; } catch (Exception e) { return; } try { if (selectedPatient != null) { long count = consultations.stream() .filter(c -> c.getPatient().getPatientId() == selectedPatient.getPatientId()) .count(); cost = count > 1 ? hours * 25 : hours * 15; } else { cost = hours * 15; } durationCostComp.getCostTxtField().setText(df.format(cost)); } catch (Exception e) { e.printStackTrace(); } } public void setPatient(String patientId) { if (patientId.isEmpty()) { selectedPatient = null; return; } int id; try { id = Integer.parseInt(patientId); } catch (Exception e) { return; } Consultation consultation = consultations.stream() .filter(c -> c.getPatient().getPatientId() == id) .findFirst() .orElse(null); if (consultation != null) { selectedPatient = consultation.getPatient(); } else { selectedPatient = null; } } public class MyDOBComp extends JPanel { DatePicker datePicker; public MyDOBComp() { setLayout(new BorderLayout()); setBorder(new CompoundBorder(BorderFactory.createTitledBorder(\"Patient DOB\"), new EmptyBorder(0, 5, 5, 5))); setBackground(Color.white); datePicker = new DatePicker(); datePicker.getComponentDateTextField().setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); add(datePicker); } public DatePicker getDatePicker() { return datePicker; } } public class DurationCostComp extends JPanel { JFormattedTextField durationTxtField; JTextField costTxtField; public DurationCostComp() { setLayout(new BorderLayout(5, 0)); setBackground(Color.white); JPanel durationContainer = new JPanel(new BorderLayout()); durationContainer.setBackground(Color.white); durationContainer.setBorder(new CompoundBorder(BorderFactory.createTitledBorder(\"Duration (h)\"), new EmptyBorder(0, 5, 5, 5))); durationTxtField = new JFormattedTextField(); durationTxtField.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); durationTxtField.addCaretListener(new CaretListener() { @Override public void caretUpdate(CaretEvent caretEvent) { updateCost(); } }); durationContainer.add(durationTxtField); add(durationContainer, BorderLayout.CENTER); JPanel costContainer = new JPanel(new BorderLayout()); costContainer.setBackground(Color.white); costContainer.setBorder(new CompoundBorder(BorderFactory.createTitledBorder(\"Cost (£)\"), new EmptyBorder(0, 5, 5, 5))); costTxtField = new JTextField(); costTxtField.setColumns(8); costTxtField.setFocusable(false); costTxtField.setText(\"0.00\"); costTxtField.setEditable(false); costTxtField.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); costContainer.add(costTxtField); add(costContainer, BorderLayout.EAST); } public JTextField getDurationTxtField() { return durationTxtField; } public JTextField getCostTxtField() { return costTxtField; } } public class NotesComp extends JPanel { private final JTextArea textArea; public NotesComp() { setLayout(new BorderLayout()); setBorder(new CompoundBorder(BorderFactory.createTitledBorder(\"Notes\"), new EmptyBorder(0, 5, 5, 5))); setBackground(Color.white); textArea = new JTextArea(); textArea.setRows(4); textArea.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); add(new JScrollPane(textArea), BorderLayout.CENTER); } public JTextArea getTextArea() { return textArea; } } public class TopPanelComp extends JPanel { public TopPanelComp() { setLayout(new BorderLayout()); setBackground(new Color(0x256D85)); setPreferredSize(new Dimension(0, 50)); setLayout(new BorderLayout()); JLabel topLabel = new JLabel( \"Edit Consultation \" + selectedConsultation.getId(), SwingConstants.CENTER ); topLabel.setFont(new Font(\"SansSerif\", Font.PLAIN, 25)); topLabel.setForeground(Color.white); add(topLabel, BorderLayout.CENTER); } } public class FileChooserComp extends JPanel { private final JFileChooser fileChooser; private final JTextArea textField; public FileChooserComp() { setLayout(new BorderLayout()); setBorder(new CompoundBorder(BorderFactory.createTitledBorder(\"Add Images\"), new EmptyBorder(0, 5, 5, 5))); setBackground(Color.white); fileChooser = new JFileChooser(); fileChooser.setMultiSelectionEnabled(true); fileChooser.setPreferredSize(new Dimension(1000, 500)); fileChooser.setAcceptAllFileFilterUsed(false); fileChooser.addChoosableFileFilter(new FileNameExtensionFilter(\"Image files\", \"jpg\", \"jpeg\", \"png\", \"gif\")); fileChooser.setDialogTitle(\"Choose image files\"); JButton chooseBtn = new JButton(\"Choose Images\"); textField = new JTextArea(); textField.setRows(3); textField.setEditable(false); textField.setFocusable(false); textField.setFont(new Font(\"SansSerif\", Font.PLAIN, 18)); chooseBtn.addActionListener(e -> { if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) { File[] files = fileChooser.getSelectedFiles(); StringBuilder sb = new StringBuilder(); for (File file : files) { sb.append(file.getName()).append(\"\\n\"); } textField.setText(sb.toString()); } }); add(chooseBtn, BorderLayout.NORTH); add(new JScrollPane(textField), BorderLayout.CENTER); } public JFileChooser getFileChooser() { return fileChooser; } public JTextArea getTextField() { return textField; } } public class BtnPanelComp extends JPanel { public BtnPanelComp() { FlowLayout flowLayout = new FlowLayout(FlowLayout.RIGHT); flowLayout.setHgap(10); setLayout(flowLayout); setBorder(new EmptyBorder(0, 0, 5, 5)); setBackground(Color.white); JButton saveBtn = new JButton(\"Save\"); saveBtn.setPreferredSize(new Dimension(100, 40)); saveBtn.addActionListener(EditConsultationWindow.this::saveConsultation); add(saveBtn); JButton cancelBtn = new JButton(\"Cancel\"); cancelBtn.setPreferredSize(new Dimension(100, 40)); cancelBtn.addActionListener(EditConsultationWindow.this::closeWindow); add(cancelBtn); } } public void closeWindow(ActionEvent e) { JButton source = (JButton) e.getSource(); Container topLevelContainer = source.getTopLevelAncestor(); if (topLevelContainer instanceof JFrame) { ((JFrame) topLevelContainer).dispose(); } else if (topLevelContainer instanceof JDialog) { ((JDialog) topLevelContainer).dispose(); } } }","dependencies":[{"file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/gui/MainWindow.java","file_content":"package com.cj.wscc.gui; import com.cj.wscc.console.Consultation; import com.cj.wscc.console.Doctor; import com.formdev.flatlaf.ui.FlatRoundBorder; import com.github.lgooddatepicker.components.DateTimePicker; import com.github.lgooddatepicker.components.TimePickerSettings; import com.github.lgooddatepicker.optionalusertools.PickerUtilities; import com.github.lgooddatepicker.optionalusertools.TimeVetoPolicy; import javax.crypto.Cipher; import javax.swing.*; import javax.swing.border.CompoundBorder; import javax.swing.border.EmptyBorder; import javax.swing.border.TitledBorder; import javax.swing.table.AbstractTableModel; import javax.swing.table.TableRowSorter; import java.awt.*; import java.awt.event.ActionEvent; import java.awt.event.FocusAdapter; import java.awt.event.FocusEvent; import java.io.*; import java.nio.file.Files; import java.nio.file.Paths; import java.security.Key; import java.text.DecimalFormat; import java.time.LocalDate; import java.time.LocalDateTime; import java.time.LocalTime; import java.util.ArrayList; import java.util.Random; import java.util.stream.Collectors; public class MainWindow extends JFrame { private final ArrayList<Doctor> doctors; private static ArrayList<Consultation> consultations = new ArrayList<>(); private static DocsTableComp docsTableComp; private static ConsTableComp consTableComp; private Doctor selectedDoctor; private static Consultation selectedConsultation; private LocalDate selectedDate; private LocalTime selectedTime; public MainWindow(ArrayList<Doctor> doctors) { super(\"Westminster Skill Consultation Centre\"); setSize(1280, 720); setLocationRelativeTo(null); setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); setLayout(new BorderLayout()); this.doctors = doctors; loadConsultations(); add(new TopPanelComp(), BorderLayout.NORTH); add(new LeftPanelComp(), BorderLayout.WEST); RightPanelComp rightPanelComp = new RightPanelComp(); docsTableComp = new DocsTableComp(); rightPanelComp.add(docsTableComp); consTableComp = new ConsTableComp(consultations); rightPanelComp.add(consTableComp, 1); add(rightPanelComp); CopyrightComp copyrightComp = new CopyrightComp(); add(copyrightComp, BorderLayout.SOUTH); } public void handleBtnClick(ActionEvent e) { JButton btn = (JButton) e.getSource(); switch (btn.getText()) { case \"Check Availability\" -> checkAvailability(); case \"Book Consultation\" -> bookConsultation(); case \"View Consultation\" -> viewConsultation(); case \"Edit Consultation\" -> editConsultation(); case \"Remove Consultation\" -> removeConsultation(); } } public void checkAvailability() { if (selectedDoctor == null) { JOptionPane.showMessageDialog( null, \"Please select a doctor from the Doctors table first\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else if (selectedDate == null || selectedTime == null) { JOptionPane.showMessageDialog( null, \"Please select a date and time\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { if (isDoctorAvailable(null)) { JOptionPane.showMessageDialog( null, \"Doctor is available at the selected time\", \"Info\", JOptionPane.INFORMATION_MESSAGE ); } else { JOptionPane.showMessageDialog( null, \"Unfortunately, the doctor is unavailable at the chosen time\", \"Error\", JOptionPane.ERROR_MESSAGE ); } } } public boolean isDoctorAvailable(Doctor doctor) { if (doctor == null) { doctor = selectedDoctor; } Doctor finalDoctor = doctor; ArrayList<Consultation> filteredConsultations = consultations.stream() .filter(c -> c.getDoctor().getMedicalLicenseNo().equalsIgnoreCase(finalDoctor.getMedicalLicenseNo())) .collect(Collectors.toCollection(ArrayList::new)); LocalDate date; LocalTime time; LocalDateTime startDateTime; LocalDateTime endDateTime; LocalDateTime selectedDateTime = selectedDate.atTime(selectedTime); boolean isAvailable = true; for (Consultation c : filteredConsultations) { date = c.getDate(); time = c.getTime(); startDateTime = date.atTime(time); endDateTime = startDateTime.plusHours(c.getDurationHours()); if (selectedDateTime.equals(startDateTime)) { isAvailable = false; } else if (selectedDateTime.isAfter(startDateTime) && selectedDateTime.isBefore(endDateTime)) { isAvailable = false; } } return isAvailable; } public Doctor getRandomAvailableDoctor() { ArrayList<Doctor> availableDoctors = new ArrayList<>(); ArrayList<Doctor> doctorsWithConsultations = new ArrayList<>(); for (Consultation c : consultations) { if (!doctorsWithConsultations.contains(c.getDoctor())) { doctorsWithConsultations.add(c.getDoctor()); } } for (Doctor d : doctorsWithConsultations) { if (isDoctorAvailable(d)) { availableDoctors.add(d); } } for (Doctor d : doctors) { if (!doctorsWithConsultations.contains(d)) { availableDoctors.add(d); } } ArrayList<Doctor> availableDoctorsSameSpeciality = new ArrayList<>(); availableDoctors.forEach(d -> { if (d.getSpecialisation().equalsIgnoreCase(selectedDoctor.getSpecialisation())) { availableDoctorsSameSpeciality.add(d); } }); if (availableDoctorsSameSpeciality.size() > 0) { Random rand = new Random(); int bound = availableDoctorsSameSpeciality.size(); int randIndex = rand.nextInt(bound); return availableDoctorsSameSpeciality.get(randIndex); } Random rand = new Random(); int bound = availableDoctors.size(); if (bound > 0) { int randIndex = rand.nextInt(bound); return availableDoctors.get(randIndex); } else { return null; } } public void viewConsultation() { if (selectedConsultation == null) { JOptionPane.showMessageDialog( null, \"Please select a consultation from the table to view\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { ViewConsultationWindow viewConsultationWindow = new ViewConsultationWindow(selectedConsultation); viewConsultationWindow.setVisible(true); } } public void bookConsultation() { if (selectedDoctor == null) { JOptionPane.showMessageDialog( null, \"Please select a doctor from the Doctors table first\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else if (selectedDate == null || selectedTime == null) { JOptionPane.showMessageDialog( null, \"Please select a date and time\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else if (!isDoctorAvailable(null)) { Doctor randomAvailableDoctor = getRandomAvailableDoctor(); if (randomAvailableDoctor == null) { JOptionPane.showMessageDialog( null, \"No doctors are available at the selected time\\nPlease choose another time.\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { String msg = String.format( \"<b>Dr. %s</b> is <span style=\\\"color:red\\\"><b>not available</b></span> at the selected time.<br>\" + \"However <b>Dr. %s</b> is available at the selected time.<br>\" + \"Book consultation with <b>Dr. %s</b>?\", selectedDoctor.getFullName(), randomAvailableDoctor.getFullName(), randomAvailableDoctor.getFullName() ); JEditorPane editorPane = new JEditorPane(); editorPane.setContentType(\"text/html\"); editorPane.setText(msg); JOptionPane jOptionPane = new JOptionPane(); editorPane.setBackground(jOptionPane.getBackground()); int result = JOptionPane.showConfirmDialog( null, editorPane, \"Confirm\", JOptionPane.OK_CANCEL_OPTION ); if (result == JOptionPane.OK_OPTION) { AddConsultationWindow consWindow = new AddConsultationWindow(consultations, randomAvailableDoctor, selectedDate, selectedTime); consWindow.setVisible(true); consWindow.toFront(); } } } else { AddConsultationWindow consWindow = new AddConsultationWindow(consultations, selectedDoctor, selectedDate, selectedTime); consWindow.setVisible(true); consWindow.toFront(); } } public void editConsultation() { if (selectedConsultation == null) { JOptionPane.showMessageDialog( null, \"Please select a consultation from the table to edit\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { EditConsultationWindow editConsultationWindow = new EditConsultationWindow(consultations, selectedConsultation); editConsultationWindow.setVisible(true); } } public static void addConsultation(Consultation consultation) { consultations.add(consultation); saveConsultations(); updateConsTableModel(); } public void removeConsultation() { if (selectedConsultation == null) { JOptionPane.showMessageDialog( null, \"Please select a consultation from the table to remove\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { int result = JOptionPane.showConfirmDialog( null, String.format(\"Are you sure you want to remove consultation %s?\", selectedConsultation.getId()), \"Confirm\", JOptionPane.YES_NO_OPTION ); if (result == JOptionPane.YES_OPTION) { consultations.remove(selectedConsultation); removeConsultationImgFiles(null); selectedConsultation = null; saveConsultations(); updateConsTableModel(); JOptionPane.showMessageDialog( null, \"Consultation removed successfully.\", \"Info\", JOptionPane.INFORMATION_MESSAGE ); } } } public static void removeConsultationImgFiles(Consultation consultation) { if (consultation == null) { consultation = selectedConsultation; } if (consultation.getImageFiles() == null) { return; } final File parentDir = consultation.getImageFiles().get(0).getParentFile(); consultation.getImageFiles().forEach(f -> { if (f.exists()) { try { Files.delete(Paths.get(f.getAbsolutePath())); } catch (IOException e) { throw new RuntimeException(e); } } }); if (parentDir.exists()) { parentDir.delete(); } } public static void loadConsultations() { try { FileInputStream fis = new FileInputStream(\"consultations.bin\"); byte[] encryptedBytes = new byte[fis.available()]; fis.read(encryptedBytes); fis.close(); Key KEY = PasswordBasedKeyAES.getKey(); Cipher cipher = Cipher.getInstance(\"AES\"); cipher.init(Cipher.DECRYPT_MODE, KEY); byte[] decryptedBytes = cipher.doFinal(encryptedBytes); ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(decryptedBytes)); consultations = (ArrayList<Consultation>) ois.readObject(); ois.close(); } catch (Exception ignored) { } } public static void saveConsultations() { try { ByteArrayOutputStream baos = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(baos); oos.writeObject(consultations); oos.close(); byte[] serializedBytes = baos.toByteArray(); Key KEY = PasswordBasedKeyAES.getKey(); Cipher cipher = Cipher.getInstance(\"AES\"); cipher.init(Cipher.ENCRYPT_MODE, KEY); byte[] encryptedBytes = cipher.doFinal(serializedBytes); FileOutputStream fos = new FileOutputStream(\"consultations.bin\"); fos.write(encryptedBytes); fos.close(); } catch (Exception ignored) { } } public static void updateConsTableModel() { consTableComp.getConsTableModel().fireTableDataChanged(); } public static DocsTableComp getDocsTableComp() { return docsTableComp; } public class TopPanelComp extends JPanel { public TopPanelComp() { setBackground(new Color(0x3F4E4F)); setPreferredSize(new Dimension(0, 70)); setForeground(new Color(0xFFFFFF)); setLayout(new BorderLayout()); JLabel topLabel = new JLabel(\"Westminster Skin Consultation Centre\", SwingConstants.CENTER); topLabel.setFont(new Font(\"SansSerif\", Font.PLAIN, 30)); topLabel.setForeground(new Color(0xFFFFFF)); add(topLabel, BorderLayout.CENTER); } } public class LeftPanelComp extends JPanel { public LeftPanelComp() { setLayout(new GridLayout(2, 1, 0, 10)); setBorder(new EmptyBorder(15, 10, 10, 10)); setBackground(Color.white); JPanel innerTopPanel = new JPanel(new GridLayout(3, 1, 0, 20)); innerTopPanel.setBorder(new CompoundBorder( new FlatRoundBorder(), new EmptyBorder(10, 10, 10, 10)) ); innerTopPanel.setBackground(Color.white); DateTimePickerComp dateTimePickerComp = new DateTimePickerComp(); innerTopPanel.add(dateTimePickerComp); MainBtnComp checkAvailabilityBtn = new MainBtnComp(\"Check Availability\"); checkAvailabilityBtn.addActionListener(MainWindow.this::handleBtnClick); innerTopPanel.add(checkAvailabilityBtn); MainBtnComp bookConsultationBtn = new MainBtnComp(\"Book Consultation\"); bookConsultationBtn.addActionListener(MainWindow.this::handleBtnClick); innerTopPanel.add(bookConsultationBtn); add(innerTopPanel); JPanel innerBottomPanel = new JPanel(new GridLayout(3, 1, 0, 20)); innerBottomPanel.setBorder(new CompoundBorder( new FlatRoundBorder(), new EmptyBorder(10, 10, 10, 10)) ); innerBottomPanel.setBackground(Color.white); MainBtnComp viewConsultationBtn = new MainBtnComp(\"View Consultation\"); viewConsultationBtn.addActionListener(MainWindow.this::handleBtnClick); innerBottomPanel.add(viewConsultationBtn); MainBtnComp editConsultationBtn = new MainBtnComp(\"Edit Consultation\"); editConsultationBtn.addActionListener(MainWindow.this::handleBtnClick); innerBottomPanel.add(editConsultationBtn); MainBtnComp removeConsultation = new MainBtnComp(\"Remove Consultation\"); removeConsultation.addActionListener(MainWindow.this::handleBtnClick); innerBottomPanel.add(removeConsultation); add(innerBottomPanel); } } public class DateTimePickerComp extends JPanel { public DateTimePickerComp() { setLayout(new BorderLayout()); setBackground(Color.white); DateTimePicker dateTimePicker = new DateTimePicker(); dateTimePicker.setBackground(Color.white); TimePickerSettings timeSettings = dateTimePicker.timePicker.getSettings(); timeSettings.setVetoPolicy(new SampleTimeVetoPolicy()); dateTimePicker.datePicker.setDateToToday(); selectedDate = dateTimePicker.getDatePicker().getDate(); dateTimePicker.timePicker.setTimeToNow(); selectedTime = dateTimePicker.getTimePicker().getTime(); int width = 24; int height = 24; ImageIcon oriCalIcon = new ImageIcon(\"resources/calendar_icon.png\"); Image caledarIcon = oriCalIcon.getImage().getScaledInstance(width, height, Image.SCALE_SMOOTH); JButton datePickerBtn = dateTimePicker.getDatePicker().getComponentToggleCalendarButton(); datePickerBtn.setPreferredSize(new Dimension(40, datePickerBtn.getPreferredSize().height)); datePickerBtn.setText(\"\"); datePickerBtn.setIcon(new ImageIcon(caledarIcon)); ImageIcon oriClockIcon = new ImageIcon(\"resources/clock_icon.png\"); Image clockIcon = oriClockIcon.getImage().getScaledInstance(width, height, Image.SCALE_SMOOTH); JButton timePickerBtn = dateTimePicker.getTimePicker().getComponentToggleTimeMenuButton(); timePickerBtn.setPreferredSize(new Dimension(40, timePickerBtn.getPreferredSize().height)); timePickerBtn.setText(\"\"); timePickerBtn.setIcon(new ImageIcon(clockIcon)); dateTimePicker.getDatePicker().addDateChangeListener(dateChangeEvent -> selectedDate = dateTimePicker.datePicker.getDate()); dateTimePicker.getTimePicker().addTimeChangeListener(timeChangeEvent -> selectedTime = dateTimePicker.timePicker.getTime()); add(dateTimePicker, BorderLayout.CENTER); } } public class MyTableComp extends JTable { public MyTableComp(AbstractTableModel tableModel, TableRowSorter rowSorter) { super(tableModel); setRowSorter(rowSorter); setFont(new Font(\"SansSerif\", Font.PLAIN, 17)); getTableHeader().setReorderingAllowed(false); getTableHeader().setFont(new Font(\"SansSerif\", Font.BOLD, 17)); setRowHeight(30); setSelectionMode(ListSelectionModel.SINGLE_SELECTION); } } public class DocsTableComp extends JPanel { private final MyTableComp myTableComp; private final DocsTableModel docsTableModel; public DocsTableComp() { setLayout(new BorderLayout(0, 5)); setBackground(new Color(0xFFFFFF)); TitledBorder titledBorder = new TitledBorder(\"Doctors\"); titledBorder.setBorder(new FlatRoundBorder()); titledBorder.setTitleFont(new Font(\"SansSerif\", Font.BOLD, 15)); setBorder(new CompoundBorder(titledBorder, new EmptyBorder(10, 10, 10, 10))); docsTableModel = new DocsTableModel(); myTableComp = new MyTableComp(docsTableModel, new TableRowSorter<>(docsTableModel)); myTableComp.getColumnModel().getColumn(2).setPreferredWidth(160); myTableComp.addFocusListener(new FocusAdapter() { @Override public void focusGained(FocusEvent e) { consTableComp.getTable().clearSelection(); selectedConsultation = null; } }); myTableComp.getSelectionModel().addListSelectionListener(listSelectionEvent -> { int row = myTableComp.getSelectedRow(); if (!listSelectionEvent.getValueIsAdjusting() && row >= 0) { String docLicense = (String) myTableComp.getValueAt(row, 3); selectedDoctor = doctors.stream() .filter(d -> d.getMedicalLicenseNo().equalsIgnoreCase(docLicense)) .findFirst() .orElse(null); } }); add(new JScrollPane(myTableComp), BorderLayout.CENTER); } public JTable getTable() { return myTableComp; } public AbstractTableModel getDocsTableModel() { return docsTableModel; } } public class ConsTableComp extends JPanel { private final MyTableComp myTableComp; private final ConsTableModel consTableModel; public ConsTableComp(ArrayList<Consultation> consultations) { setLayout(new BorderLayout(0, 5)); setBackground(new Color(0xFFFFFF)); TitledBorder titledBorder = new TitledBorder(\"Consultations\"); titledBorder.setBorder(new FlatRoundBorder()); titledBorder.setTitleFont(new Font(\"SansSerif\", Font.BOLD, 15)); setBorder(new CompoundBorder(titledBorder, new EmptyBorder(10, 10, 10, 10))); consTableModel = new ConsTableModel(consultations); myTableComp = new MyTableComp(consTableModel, new TableRowSorter<>(consTableModel)); myTableComp.addFocusListener(new FocusAdapter() { @Override public void focusGained(FocusEvent e) { docsTableComp.getTable().clearSelection(); selectedDoctor = null; } }); myTableComp.getSelectionModel().addListSelectionListener(listSelectionEvent -> { int row = myTableComp.getSelectedRow(); if (!listSelectionEvent.getValueIsAdjusting() && row >= 0) { String consId = (String) myTableComp.getValueAt(row, 0); selectedConsultation = consultations.stream() .filter(d -> d.getId().equalsIgnoreCase(consId)) .findFirst() .orElse(null); } }); add(new JScrollPane(myTableComp), BorderLayout.CENTER); } public JTable getTable() { return myTableComp; } public AbstractTableModel getConsTableModel() { return consTableModel; } } public class RightPanelComp extends JPanel { public RightPanelComp() { setLayout(new GridLayout(2, 1, 0, 15)); setPreferredSize(new Dimension(1000, 0)); setBorder(new EmptyBorder(10, 10, 10, 10)); setBackground(Color.white); } } public class MainBtnComp extends JButton { public MainBtnComp(String txt) { super(txt); setFont(new Font(\"SansSerif\", Font.BOLD, 16)); setFocusable(false); setFocusPainted(false); setBackground(new Color(0xDCD7C9)); setForeground(Color.black); } } public class CopyrightComp extends JPanel { public CopyrightComp() { setLayout(new BorderLayout()); setBorder(new EmptyBorder(0, 0, 10, 10)); setBackground(Color.white); JLabel jLabel = new JLabel(\"Copyright © 2023 Chamath Jayasena. All rights reserved.\"); jLabel.setFont(new Font(\"SansSerif\", Font.BOLD, 14)); jLabel.setEnabled(false); add(jLabel, BorderLayout.EAST); } } public class DocsTableModel extends AbstractTableModel { String[] colNames; Class[] colClasses; public DocsTableModel() { colNames = new String[]{ \"First Name\", \"Surname\", \"Specialisation\", \"License\", \"DOB\", \"Mobile\" }; colClasses = new Class[]{ String.class, String.class, String.class, String.class, LocalDate.class, String.class }; } @Override public int getRowCount() { return doctors.size(); } @Override public int getColumnCount() { return colNames.length; } @Override public Object getValueAt(int row, int col) { switch (col) { case 0 -> { return doctors.get(row).getName(); } case 1 -> { return doctors.get(row).getSurname(); } case 2 -> { return doctors.get(row).getSpecialisation(); } case 3 -> { return doctors.get(row).getMedicalLicenseNo(); } case 4 -> { return doctors.get(row).getDob(); } case 5 -> { return doctors.get(row).getMobiNo(); } default -> { return null; } } } public String getColumnName(int col) { return colNames[col]; } public Class getColumnClass(int col) { return colClasses[col]; } } public class ConsTableModel extends AbstractTableModel { private final ArrayList<Consultation> consultations; private final String[] colNames; private final Class[] colClasses; public ConsTableModel(ArrayList<Consultation> data) { this.consultations = data; colNames = new String[]{ \"ID\", \"Patient ID\", \"Patient\", \"Doctor\", \"Date\", \"Time\", \"Duration (h)\", \"Cost (£)\" }; colClasses = new Class[]{ String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class }; } @Override public int getRowCount() { return consultations.size(); } @Override public int getColumnCount() { return colNames.length; } @Override public Object getValueAt(int row, int col) { DecimalFormat df = new DecimalFormat(\"0.00\"); switch (col) { case 0 -> { return consultations.get(row).getId(); } case 1 -> { return consultations.get(row).getPatient().getPatientId(); } case 2 -> { return consultations.get(row).getPatient().getFullName(); } case 3 -> { return consultations.get(row).getDoctor().getFullName(); } case 4 -> { return consultations.get(row).getDate().toString(); } case 5 -> { return consultations.get(row).getTime().toString(); } case 6 -> { return consultations.get(row).getDurationHours() + \"\"; } case 7 -> { return df.format(consultations.get(row).getCost()); } default -> { return null; } } } public String getColumnName(int col) { return colNames[col]; } public Class getColumnClass(int col) { return colClasses[col]; } } private static class SampleTimeVetoPolicy implements TimeVetoPolicy { @Override public boolean isTimeAllowed(LocalTime time) { return PickerUtilities.isLocalTimeInRange( time, LocalTime.of(8, 00), LocalTime.of(17, 00), true); } } }"}]}}
{"project_id":214,"chunk_id":2,"content":{"main_file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/gui/EditConsultationWindow.java","main_file_content":"package com.cj.wscc.gui; import com.cj.wscc.console.Consultation; import com.cj.wscc.console.Patient; import com.github.lgooddatepicker.components.DatePicker; import javax.crypto.Cipher; import javax.swing.*; import javax.swing.border.CompoundBorder; import javax.swing.border.EmptyBorder; import javax.swing.event.CaretEvent; import javax.swing.event.CaretListener; import javax.swing.event.DocumentEvent; import javax.swing.event.DocumentListener; import javax.swing.filechooser.FileNameExtensionFilter; import java.awt.*; import java.awt.event.ActionEvent; import java.io.File; import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.security.Key; import java.security.NoSuchAlgorithmException; import java.security.spec.InvalidKeySpecException; import java.text.DecimalFormat; import java.util.ArrayList; import java.util.LinkedHashMap; import java.util.Map; import java.util.UUID; public class EditConsultationWindow extends JFrame { private ArrayList<Consultation> consultations; private Consultation selectedConsultation; private MyPatientIdComp patientIdComp; private DurationCostComp durationCostComp; private MyTxtFieldComp patientNameComp; private MyTxtFieldComp patientSurnameComp; private MyDOBComp patientDobComp; private MyTxtFieldComp patientMobileComp; private NotesComp notesComp; private FileChooserComp fileChooserComp; private Patient selectedPatient; private final DecimalFormat df = new DecimalFormat(\"0.00\"); public EditConsultationWindow(ArrayList<Consultation> consultations, Consultation selectedConsultation) { super(\"Edit Consultation\"); setSize(900, 700); setLocationRelativeTo(null); setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); this.consultations = consultations; this.selectedConsultation = selectedConsultation; this.selectedPatient = selectedConsultation.getPatient(); add(new TopPanelComp(), BorderLayout.NORTH); GridBagLayout gridBagLayout = new GridBagLayout(); gridBagLayout.columnWidths = new int[]{50}; JPanel centerPanel = new JPanel(gridBagLayout); centerPanel.setBorder(new EmptyBorder(5, 5, 5, 5)); centerPanel.setBackground(new Color(0xFFFFFF)); MyTxtFieldComp doctorComp = new MyTxtFieldComp(\"Doctor\"); JTextField docTxtField = (JTextField) doctorComp.getComponents()[0]; docTxtField.setText(\"Dr. \" + selectedConsultation.getDoctor().getFullName()); docTxtField.setEditable(false); docTxtField.setFocusable(false); GridBagConstraints c = new GridBagConstraints(); c.insets = new Insets(5, 5, 5, 5); c.fill = GridBagConstraints.BOTH; c.weighty = 1; c.weightx = 1; c.gridx = 0; c.gridy = 0; centerPanel.add(doctorComp, c); patientNameComp = new MyTxtFieldComp(\"Patient Name\"); patientNameComp.getTxtField().setText(selectedConsultation.getPatient().getName()); patientSurnameComp = new MyTxtFieldComp(\"Patient Surname\"); patientSurnameComp.getTxtField().setText(selectedConsultation.getPatient().getSurname()); c.gridx = 0; c.gridy = 2; centerPanel.add(patientNameComp, c); c.gridx = 1; c.gridy = 2; centerPanel.add(patientSurnameComp, c); c.gridx = 0; c.gridy = 3; patientDobComp = new MyDOBComp(); patientDobComp.getDatePicker().setDate(selectedConsultation.getPatient().getDob()); centerPanel.add(patientDobComp, c); c.gridx = 1; c.gridy = 3; patientMobileComp = new MyTxtFieldComp(\"Patient Mobile\"); patientMobileComp.getTxtField().setText(selectedConsultation.getPatient().getMobiNo()); centerPanel.add(patientMobileComp, c); c.gridx = 1; c.gridy = 0; JPanel date = new MyTxtFieldComp(\"Date & Time\"); JTextField dateTxtField = (JTextField) date.getComponents()[0]; dateTxtField.setText( selectedConsultation.getDate().toString() + \" \" + selectedConsultation.getTime().toString() ); dateTxtField.setEditable(false); dateTxtField.setFocusable(false); centerPanel.add(date, c); c.gridx = 1; c.gridy = 1; durationCostComp = new DurationCostComp(); durationCostComp.getDurationTxtField().setText(selectedConsultation.getDurationHours() + \"\"); durationCostComp.getCostTxtField().setText(df.format(selectedConsultation.getCost())); centerPanel.add(durationCostComp, c); c.gridx = 0; c.gridy = 4; notesComp = new NotesComp(); notesComp.getTextArea().setText(selectedConsultation.getNotes()); centerPanel.add(notesComp, c); c.gridx = 1; c.gridy = 4; fileChooserComp = new FileChooserComp(); if (selectedConsultation.getImageFiles() != null) { File[] files = selectedConsultation.getImageFiles().toArray(new File[0]); StringBuilder sb = new StringBuilder(); for (File file : files) { sb.append(file.getName()).append(\"\\n\"); } fileChooserComp.getFileChooser().setSelectedFiles(files); fileChooserComp.textField.setText(sb.toString()); } centerPanel.add(fileChooserComp, c); patientIdComp = new MyPatientIdComp(); patientIdComp.getJComboBox().setSelectedItem(selectedConsultation.getPatient().getPatientId()); c.gridx = 0; c.gridy = 1; centerPanel.add(patientIdComp, c); add(centerPanel, BorderLayout.CENTER); add(new BtnPanelComp(), BorderLayout.SOUTH); } public void saveConsultation(ActionEvent event) { String idStr = (patientIdComp.getJComboBox().getSelectedItem() == null) ? \"\" : patientIdComp.getJComboBox().getSelectedItem().toString(); String name = patientNameComp.getTxtField().getText(); String surname = patientSurnameComp.getTxtField().getText(); String mobile = patientMobileComp.getTxtField().getText(); String duration = durationCostComp.getDurationTxtField().getText(); LinkedHashMap<String, String> requiredValues = new LinkedHashMap<>() {{ put(\"Patient ID\", idStr); put(\"Duration\", duration); put(\"Patient Name\", name); put(\"Patient Surname\", surname); put(\"Patient Mobile\", mobile); }}; for (Map.Entry<String, String> entry : requiredValues.entrySet()) { if (entry.getValue().isEmpty()) { JOptionPane.showMessageDialog( null, entry.getKey() + \" field cannot be empty\", \"Error\", JOptionPane.ERROR_MESSAGE ); return; } } int id; try { id = Integer.parseInt(idStr); } catch (Exception e) { JOptionPane.showMessageDialog( null, \"Patient ID must be a number\", \"Error\", JOptionPane.ERROR_MESSAGE ); return; } try { Integer.parseInt(mobile); } catch (Exception e) { JOptionPane.showMessageDialog( null, \"Patient mobile number must be a number\", \"Error\", JOptionPane.ERROR_MESSAGE ); return; } try { Integer.parseInt(duration); } catch (Exception e) { JOptionPane.showMessageDialog( null, \"Duration must be a number\", \"Error\", JOptionPane.ERROR_MESSAGE ); return; } if (selectedPatient == null) { Patient patient = new Patient( name, surname, patientDobComp.getDatePicker().getDate(), mobile, id ); selectedConsultation.setPatient(patient); } else { selectedPatient.setPatientId(id); selectedPatient.setName(name); selectedPatient.setSurname(surname); selectedPatient.setDob(patientDobComp.getDatePicker().getDate()); selectedPatient.setMobiNo(mobile); selectedConsultation.setPatient(selectedPatient); } try { ArrayList<File> files = encryptImgFiles(selectedConsultation.getId()); selectedConsultation.setId(selectedConsultation.getId()); selectedConsultation.setDoctor(selectedConsultation.getDoctor()); selectedConsultation.setDate(selectedConsultation.getDate()); selectedConsultation.setTime(selectedConsultation.getTime()); selectedConsultation.setDurationHours(Integer.parseInt(durationCostComp.getDurationTxtField().getText())); selectedConsultation.setCost(Double.parseDouble(durationCostComp.getCostTxtField().getText().replace(\"£\", \"\").trim())); selectedConsultation.setNotes(notesComp.getTextArea().getText()); selectedConsultation.setImageFiles(files); MainWindow.saveConsultations(); MainWindow.updateConsTableModel(); closeWindow(event); JOptionPane.showMessageDialog( null, \"Consultation saved successfully!\", \"Success\", JOptionPane.INFORMATION_MESSAGE ); } catch (Exception e) { e.printStackTrace(); } } public String getRandID() { UUID uuid = UUID.randomUUID(); return uuid.toString().substring(0, 8); } public ArrayList<File> encryptImgFiles(String consultationId) throws NoSuchAlgorithmException, InvalidKeySpecException { File[] files = fileChooserComp.getFileChooser().getSelectedFiles(); if (files.length == 0) { return null; } if (selectedConsultation.getImageFiles() != null) { StringBuilder sb = new StringBuilder(); for (File file : selectedConsultation.getImageFiles()) { sb.append(file.getName()).append(\"\\n\"); } if (fileChooserComp.getTextField().getText().equals(sb.toString())) { return selectedConsultation.getImageFiles(); } } MainWindow.removeConsultationImgFiles(selectedConsultation); final String DEST = \"patient_img\" + \"/\" + consultationId; try { Files.createDirectories(Paths.get(DEST)); } catch (IOException e) { throw new RuntimeException(e); } ArrayList<File> newFiles = new ArrayList<>(); String randFileName; String extension; Path dest; Key KEY = PasswordBasedKeyAES.getKey(); for (File f : files) { randFileName = getRandID(); extension = getFileExtension(f.getName()); dest = Paths.get(DEST, randFileName + extension); try { Cipher cipher = Cipher.getInstance(\"AES\"); cipher.init(Cipher.ENCRYPT_MODE, KEY); FileInputStream inputStream = new FileInputStream(f); File outputFile = new File(dest.toUri()); FileOutputStream outputStream = new FileOutputStream(outputFile); byte[] buffer = new byte[64]; int bytesRead; while ((bytesRead = inputStream.read(buffer)) != -1) { byte[] output = cipher.update(buffer, 0, bytesRead); if (output != null) { outputStream.write(output); } } byte[] outputBytes = cipher.doFinal(); if (outputBytes != null) { outputStream.write(outputBytes); } inputStream.close(); outputStream.close(); newFiles.add(outputFile); } catch (Exception e) { throw new RuntimeException(e); } } fileChooserComp.getFileChooser().setSelectedFiles(null); return newFiles; } public String getFileExtension(String fileName) { String extension = \"\"; int index = fileName.lastIndexOf('.'); if (index > 0) { extension = fileName.substring(index + 1); } return \".\" + extension; } public class MyTxtFieldComp extends JPanel { private final JTextField txtField; public MyTxtFieldComp(String label) { setLayout(new BorderLayout()); setBorder(new CompoundBorder(BorderFactory.createTitledBorder(label), new EmptyBorder(0, 5, 5, 5))); setBackground(new Color(0xFFFFFF)); txtField = new JTextField(); txtField.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); add(txtField); } public JTextField getTxtField() { return txtField; } } public class MyPatientIdComp extends JPanel { private final JComboBox comboBox; public MyPatientIdComp() { setLayout(new BorderLayout()); setBorder(new CompoundBorder(BorderFactory.createTitledBorder(\"Patient ID\"), new EmptyBorder(0, 5, 5, 5))); setBackground(Color.white); ArrayList<Integer> suggestions = new ArrayList<>(); for (Consultation c : consultations) { suggestions.add(c.getPatient().getPatientId()); } comboBox = new JComboBox(suggestions.toArray()); comboBox.setEditable(true); comboBox.setSelectedItem(null); comboBox.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); JTextField textField = (JTextField) comboBox.getEditor().getEditorComponent(); textField.getDocument().addDocumentListener(new DocumentListener() { @Override public void insertUpdate(DocumentEvent e) { setPatient(textField.getText()); updateCost(); } @Override public void removeUpdate(DocumentEvent e) { setPatient(textField.getText()); updateCost(); } @Override public void changedUpdate(DocumentEvent e) { setPatient(textField.getText()); updateCost(); } }); add(comboBox, BorderLayout.CENTER); } public JComboBox getJComboBox() { return comboBox; } } public void updateCost() { int hours; int cost; try { hours = !durationCostComp.getDurationTxtField().getText().isEmpty() ? Integer.parseInt(durationCostComp.getDurationTxtField().getText()) : 0; } catch (Exception e) { return; } try { if (selectedPatient != null) { long count = consultations.stream() .filter(c -> c.getPatient().getPatientId() == selectedPatient.getPatientId()) .count(); cost = count > 1 ? hours * 25 : hours * 15; } else { cost = hours * 15; } durationCostComp.getCostTxtField().setText(df.format(cost)); } catch (Exception e) { e.printStackTrace(); } } public void setPatient(String patientId) { if (patientId.isEmpty()) { selectedPatient = null; return; } int id; try { id = Integer.parseInt(patientId); } catch (Exception e) { return; } Consultation consultation = consultations.stream() .filter(c -> c.getPatient().getPatientId() == id) .findFirst() .orElse(null); if (consultation != null) { selectedPatient = consultation.getPatient(); } else { selectedPatient = null; } } public class MyDOBComp extends JPanel { DatePicker datePicker; public MyDOBComp() { setLayout(new BorderLayout()); setBorder(new CompoundBorder(BorderFactory.createTitledBorder(\"Patient DOB\"), new EmptyBorder(0, 5, 5, 5))); setBackground(Color.white); datePicker = new DatePicker(); datePicker.getComponentDateTextField().setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); add(datePicker); } public DatePicker getDatePicker() { return datePicker; } } public class DurationCostComp extends JPanel { JFormattedTextField durationTxtField; JTextField costTxtField; public DurationCostComp() { setLayout(new BorderLayout(5, 0)); setBackground(Color.white); JPanel durationContainer = new JPanel(new BorderLayout()); durationContainer.setBackground(Color.white); durationContainer.setBorder(new CompoundBorder(BorderFactory.createTitledBorder(\"Duration (h)\"), new EmptyBorder(0, 5, 5, 5))); durationTxtField = new JFormattedTextField(); durationTxtField.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); durationTxtField.addCaretListener(new CaretListener() { @Override public void caretUpdate(CaretEvent caretEvent) { updateCost(); } }); durationContainer.add(durationTxtField); add(durationContainer, BorderLayout.CENTER); JPanel costContainer = new JPanel(new BorderLayout()); costContainer.setBackground(Color.white); costContainer.setBorder(new CompoundBorder(BorderFactory.createTitledBorder(\"Cost (£)\"), new EmptyBorder(0, 5, 5, 5))); costTxtField = new JTextField(); costTxtField.setColumns(8); costTxtField.setFocusable(false); costTxtField.setText(\"0.00\"); costTxtField.setEditable(false); costTxtField.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); costContainer.add(costTxtField); add(costContainer, BorderLayout.EAST); } public JTextField getDurationTxtField() { return durationTxtField; } public JTextField getCostTxtField() { return costTxtField; } } public class NotesComp extends JPanel { private final JTextArea textArea; public NotesComp() { setLayout(new BorderLayout()); setBorder(new CompoundBorder(BorderFactory.createTitledBorder(\"Notes\"), new EmptyBorder(0, 5, 5, 5))); setBackground(Color.white); textArea = new JTextArea(); textArea.setRows(4); textArea.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); add(new JScrollPane(textArea), BorderLayout.CENTER); } public JTextArea getTextArea() { return textArea; } } public class TopPanelComp extends JPanel { public TopPanelComp() { setLayout(new BorderLayout()); setBackground(new Color(0x256D85)); setPreferredSize(new Dimension(0, 50)); setLayout(new BorderLayout()); JLabel topLabel = new JLabel( \"Edit Consultation \" + selectedConsultation.getId(), SwingConstants.CENTER ); topLabel.setFont(new Font(\"SansSerif\", Font.PLAIN, 25)); topLabel.setForeground(Color.white); add(topLabel, BorderLayout.CENTER); } } public class FileChooserComp extends JPanel { private final JFileChooser fileChooser; private final JTextArea textField; public FileChooserComp() { setLayout(new BorderLayout()); setBorder(new CompoundBorder(BorderFactory.createTitledBorder(\"Add Images\"), new EmptyBorder(0, 5, 5, 5))); setBackground(Color.white); fileChooser = new JFileChooser(); fileChooser.setMultiSelectionEnabled(true); fileChooser.setPreferredSize(new Dimension(1000, 500)); fileChooser.setAcceptAllFileFilterUsed(false); fileChooser.addChoosableFileFilter(new FileNameExtensionFilter(\"Image files\", \"jpg\", \"jpeg\", \"png\", \"gif\")); fileChooser.setDialogTitle(\"Choose image files\"); JButton chooseBtn = new JButton(\"Choose Images\"); textField = new JTextArea(); textField.setRows(3); textField.setEditable(false); textField.setFocusable(false); textField.setFont(new Font(\"SansSerif\", Font.PLAIN, 18)); chooseBtn.addActionListener(e -> { if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) { File[] files = fileChooser.getSelectedFiles(); StringBuilder sb = new StringBuilder(); for (File file : files) { sb.append(file.getName()).append(\"\\n\"); } textField.setText(sb.toString()); } }); add(chooseBtn, BorderLayout.NORTH); add(new JScrollPane(textField), BorderLayout.CENTER); } public JFileChooser getFileChooser() { return fileChooser; } public JTextArea getTextField() { return textField; } } public class BtnPanelComp extends JPanel { public BtnPanelComp() { FlowLayout flowLayout = new FlowLayout(FlowLayout.RIGHT); flowLayout.setHgap(10); setLayout(flowLayout); setBorder(new EmptyBorder(0, 0, 5, 5)); setBackground(Color.white); JButton saveBtn = new JButton(\"Save\"); saveBtn.setPreferredSize(new Dimension(100, 40)); saveBtn.addActionListener(EditConsultationWindow.this::saveConsultation); add(saveBtn); JButton cancelBtn = new JButton(\"Cancel\"); cancelBtn.setPreferredSize(new Dimension(100, 40)); cancelBtn.addActionListener(EditConsultationWindow.this::closeWindow); add(cancelBtn); } } public void closeWindow(ActionEvent e) { JButton source = (JButton) e.getSource(); Container topLevelContainer = source.getTopLevelAncestor(); if (topLevelContainer instanceof JFrame) { ((JFrame) topLevelContainer).dispose(); } else if (topLevelContainer instanceof JDialog) { ((JDialog) topLevelContainer).dispose(); } } }","dependencies":[{"file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/gui/PasswordBasedKeyAES.java","file_content":"package com.cj.wscc.gui; import javax.crypto.SecretKey; import javax.crypto.SecretKeyFactory; import javax.crypto.spec.PBEKeySpec; import javax.crypto.spec.SecretKeySpec; import java.security.Key; import java.security.NoSuchAlgorithmException; import java.security.spec.InvalidKeySpecException; public class PasswordBasedKeyAES { public static Key getKey() throws NoSuchAlgorithmException, InvalidKeySpecException { String cipher = \"AES\"; int keySize = 128; char[] password = \"ykAHmzXU&Zwp9PJvhT5v7sG2etLRSrsk\".toCharArray(); byte[] salt = new byte[100]; PBEKeySpec pbeKeySpec = new PBEKeySpec(password, salt, 1000, keySize); SecretKey pbeKey = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA256\").generateSecret(pbeKeySpec); return new SecretKeySpec(pbeKey.getEncoded(), cipher); } }"}]}}
{"project_id":214,"chunk_id":0,"content":{"main_file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/gui/ViewConsultationWindow.java","main_file_content":"package com.cj.wscc.gui; import com.cj.wscc.console.Consultation; import javax.swing.*; import javax.swing.border.CompoundBorder; import javax.swing.border.EmptyBorder; import java.awt.*; import java.awt.event.MouseAdapter; import java.awt.event.MouseEvent; import java.awt.image.BufferedImage; import java.text.DecimalFormat; import java.util.HashMap; import java.util.LinkedHashMap; import java.util.Map; public class ViewConsultationWindow extends JFrame { private final Consultation selectedConsultation; private final DecimalFormat df = new DecimalFormat(\"0.00\"); public ViewConsultationWindow(Consultation selectedConsultation) { super(\"View Consultation\"); setSize(900, 800); setLocationRelativeTo(null); setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); this.selectedConsultation = selectedConsultation; TopPanelComp topPanelComp = new TopPanelComp(); add(topPanelComp, BorderLayout.NORTH); JPanel mainPanel = new JPanel(new GridBagLayout()); mainPanel.setBorder(new EmptyBorder(10, 10, 10, 5)); mainPanel.setBackground(Color.white); GridBagConstraints c = new GridBagConstraints(); c.insets = new Insets(5, 5, 5, 5); c.fill = GridBagConstraints.BOTH; c.weighty = 1; c.weightx = 1; c.gridx = 0; c.gridy = 0; MyLabelComp doctorComp = new MyLabelComp( \"Doctor\", \"Dr. \" + selectedConsultation.getDoctor().getFullName() ); mainPanel.add(doctorComp, c); MyLabelComp dateTimeComp = new MyLabelComp( \"Date & Time\", selectedConsultation.getDate() + \" \" + selectedConsultation.getTime() ); c.gridx = 0; c.gridy = 1; mainPanel.add(dateTimeComp, c); MyLabelComp patientIdComp = new MyLabelComp( \"Patient ID\", Integer.toString(selectedConsultation.getPatient().getPatientId()) ); c.gridx = 0; c.gridy = 2; mainPanel.add(patientIdComp, c); MyLabelComp patientNameComp = new MyLabelComp( \"Patient Name\", selectedConsultation.getPatient().getName() ); c.gridx = 0; c.gridy = 3; mainPanel.add(patientNameComp, c); MyLabelComp patientSurnameComp = new MyLabelComp( \"Patient Surname\", selectedConsultation.getPatient().getSurname() ); c.gridx = 0; c.gridy = 4; mainPanel.add(patientSurnameComp, c); String dob = \"\"; if (selectedConsultation.getPatient().getDob() != null) { dob = selectedConsultation.getPatient().getDob().toString(); } MyLabelComp patientDobComp = new MyLabelComp(\"Patient DOB\", dob); c.gridx = 0; c.gridy = 5; mainPanel.add(patientDobComp, c); MyLabelComp patientMobile = new MyLabelComp( \"Patient Mobile\", selectedConsultation.getPatient().getMobiNo() ); c.gridx = 0; c.gridy = 6; mainPanel.add(patientMobile, c); add(mainPanel, BorderLayout.CENTER); DurationCostComp durationCostComp = new DurationCostComp( Integer.toString(selectedConsultation.getDurationHours()), df.format(selectedConsultation.getCost()) ); c.gridx = 0; c.gridy = 7; mainPanel.add(durationCostComp, c); RightPanelComp rightPanelComp = new RightPanelComp(); NotesComp notesComp = new NotesComp(selectedConsultation.getNotes()); c.weighty = 0.4; c.gridx = 0; c.gridy = 0; rightPanelComp.add(notesComp, c); ImageViewerComp imageViewerComp = new ImageViewerComp(); c.weighty = 1; c.gridx = 0; c.gridy = 1; if (selectedConsultation.getImageFiles() != null && selectedConsultation.getImageFiles().size() > 0) { DecryptWorker worker = new DecryptWorker(selectedConsultation.getImageFiles(), imageViewerComp); worker.execute(); } rightPanelComp.add(imageViewerComp, c); add(rightPanelComp, BorderLayout.EAST); } public class TopPanelComp extends JPanel { public TopPanelComp() { setLayout(new BorderLayout()); setBackground(new Color(0x3C4048)); setPreferredSize(new Dimension(0, 50)); setLayout(new BorderLayout()); JLabel topLabel = new JLabel( \"Consultation \" + selectedConsultation.getId(), SwingConstants.CENTER ); topLabel.setFont(new Font(\"SansSerif\", Font.PLAIN, 25)); topLabel.setForeground(Color.white); add(topLabel, BorderLayout.CENTER); } } public class ImageViewerComp extends JPanel { private final JLabel imageLabel; private LinkedHashMap<BufferedImage, Image> images = new LinkedHashMap<>(); private int imgNo = 0; public ImageViewerComp() { int noOfImgs = selectedConsultation.getImageFiles() == null ? 0 : selectedConsultation.getImageFiles().size(); String title = String.format(\"Images (%d)\", noOfImgs); setBorder(new CompoundBorder(BorderFactory.createTitledBorder(title), new EmptyBorder(5, 5, 5, 5))); setBackground(Color.white); imageLabel = new JLabel(); imageLabel.addMouseListener(new MouseAdapter() { @Override public void mouseClicked(MouseEvent e) { if (e.getClickCount() == 2) { FullImageViewerWindow fullImageViewerWindow = new FullImageViewerWindow(getOriginalImageAt(imgNo)); fullImageViewerWindow.setVisible(true); } } }); JPanel container = new JPanel(new BorderLayout(0, 5)); container.setBackground(Color.white); JScrollPane scrollPane = new JScrollPane(); scrollPane.setPreferredSize(new Dimension(450, 380)); scrollPane.setViewportView(imageLabel); scrollPane.getViewport().setBackground(Color.white); container.add(scrollPane, BorderLayout.CENTER); JPanel btnContainer = new JPanel(new FlowLayout()); btnContainer.setBackground(Color.white); JButton prevBtn = new JButton(\"Previous\"); prevBtn.addActionListener(actionEvent -> { if (images != null && images.size() > 0) { if (imgNo == 0) { imgNo = images.size() - 1; } else { --imgNo; } imageLabel.setIcon(new ImageIcon(getScaledImageAt(imgNo))); } }); JButton nextBtn = new JButton(\"Next\"); nextBtn.addActionListener(actionEvent -> { if (images != null && images.size() > 0) { if (imgNo == images.size() - 1) { imgNo = 0; } else { ++imgNo; } imageLabel.setIcon(new ImageIcon(getScaledImageAt(imgNo))); } }); btnContainer.add(prevBtn); btnContainer.add(nextBtn); container.add(btnContainer, BorderLayout.SOUTH); add(container); } public void setImages(LinkedHashMap<BufferedImage, Image> images) { this.images = images; imageLabel.setIcon(new ImageIcon(getScaledImageAt(0))); } public Image getScaledImageAt(int position) { int i = 0; HashMap<Object, Object> map; for (Map.Entry<BufferedImage, Image> entry : images.entrySet()) { if (i == position) { return entry.getValue(); } i++; } return null; } public Image getOriginalImageAt(int position) { int i = 0; HashMap<Object, Object> map; for (Map.Entry<BufferedImage, Image> entry : images.entrySet()) { if (i == position) { return entry.getKey(); } i++; } return null; } } public class RightPanelComp extends JPanel { public RightPanelComp() { setLayout(new GridBagLayout()); setPreferredSize(new Dimension(500, 0)); setBorder(new EmptyBorder(10, 5, 10, 10)); setBackground(Color.white); } } public class NotesComp extends JPanel { private final JTextArea textArea; public NotesComp(String txt) { setLayout(new BorderLayout()); setBorder(new CompoundBorder(BorderFactory.createTitledBorder(\"Notes\"), new EmptyBorder(0, 5, 5, 5))); setBackground(Color.white); textArea = new JTextArea(txt); textArea.setRows(4); textArea.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); textArea.setEditable(false); textArea.setFocusable(false); textArea.setBackground(Color.white); add(new JScrollPane(textArea), BorderLayout.CENTER); } public JTextArea getTextArea() { return textArea; } } public static class MyLabelComp extends JPanel { private final JLabel myLabel; public MyLabelComp(String title, String label) { setLayout(new BorderLayout()); setBorder(new CompoundBorder(BorderFactory.createTitledBorder(title), new EmptyBorder(0, 5, 5, 5))); setBackground(Color.white); myLabel = new JLabel(label); myLabel.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); add(myLabel); } } public class DurationCostComp extends JPanel { JLabel durationLabel; JLabel costLabel; public DurationCostComp(String duration, String cost) { setLayout(new GridBagLayout()); setBackground(Color.white); GridBagConstraints c = new GridBagConstraints(); c.weightx = 0.5; c.weighty = 0.5; c.fill = GridBagConstraints.BOTH; JPanel durationContainer = new JPanel(new BorderLayout()); durationContainer.setBackground(Color.white); durationContainer.setBorder(new CompoundBorder(BorderFactory.createTitledBorder(\"Duration (h)\"), new EmptyBorder(0, 5, 5, 5))); durationLabel = new JLabel(duration); durationLabel.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); durationContainer.add(durationLabel); add(durationContainer, c); JPanel costContainer = new JPanel(new BorderLayout()); costContainer.setBackground(Color.white); costContainer.setBorder(new CompoundBorder(BorderFactory.createTitledBorder(\"Cost (£)\"), new EmptyBorder(0, 5, 5, 5))); costLabel = new JLabel(); costLabel.setText(cost); costLabel.setFont(new Font(\"SansSerif\", Font.PLAIN, 20)); costContainer.add(costLabel); add(costContainer, c); } } }","dependencies":[{"file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/console/Consultation.java","file_content":"package com.cj.wscc.console; import java.io.File; import java.io.Serializable; import java.time.LocalDate; import java.time.LocalTime; import java.util.ArrayList; public class Consultation implements Serializable { private String id; private Doctor doctor; private Patient patient; private LocalDate date; private LocalTime time; private int durationHours; private double cost; private String notes; private ArrayList<File> imageFiles; public Consultation(String id, Doctor doctor, Patient patient, LocalDate date, LocalTime time, int duration, double cost, String notes, ArrayList<File> files) { this.id = id; this.doctor = doctor; this.patient = patient; this.date = date; this.time = time; this.durationHours = duration; this.cost = cost; this.notes = notes; this.imageFiles = files; } public String getId() { return id; } public void setId(String id) { this.id = id; } public Doctor getDoctor() { return doctor; } public void setDoctor(Doctor doctor) { this.doctor = doctor; } public Patient getPatient() { return patient; } public void setPatient(Patient patient) { this.patient = patient; } public LocalDate getDate() { return date; } public void setDate(LocalDate date) { this.date = date; } public LocalTime getTime() { return time; } public void setTime(LocalTime time) { this.time = time; } public int getDurationHours() { return durationHours; } public void setDurationHours(int durationHours) { this.durationHours = durationHours; } public double getCost() { return cost; } public void setCost(double cost) { this.cost = cost; } public String getNotes() { return notes; } public void setNotes(String notes) { this.notes = notes; } public ArrayList<File> getImageFiles() { return imageFiles; } public void setImageFiles(ArrayList<File> imageFiles) { this.imageFiles = imageFiles; } }"},{"file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/gui/DecryptWorker.java","file_content":"package com.cj.wscc.gui; import javax.crypto.Cipher; import javax.imageio.ImageIO; import javax.swing.*; import javax.swing.border.EmptyBorder; import java.awt.*; import java.awt.image.BufferedImage; import java.io.ByteArrayInputStream; import java.io.ByteArrayOutputStream; import java.io.File; import java.io.FileInputStream; import java.security.Key; import java.util.ArrayList; import java.util.LinkedHashMap; public class DecryptWorker extends SwingWorker<Void, Void> { private final ArrayList<File> encryptedImgs; private LinkedHashMap<BufferedImage, Image> decryptedImgs = new LinkedHashMap<>(); private final ViewConsultationWindow.ImageViewerComp imageViewPanel; public DecryptWorker(ArrayList<File> encryptedImgs, ViewConsultationWindow.ImageViewerComp imageViewPanel) { this.encryptedImgs = encryptedImgs; this.imageViewPanel = imageViewPanel; } @Override protected Void doInBackground() { ProgressBarComp progressBarComp = new ProgressBarComp(); progressBarComp.setVisible(true); int currentFile = 0; int totalFiles = encryptedImgs.size(); for (File f : encryptedImgs) { if (f.exists()) { BufferedImage originalImg = getDecryptedImg(f); Image scaledImage = getScaledImg(originalImg, 450); decryptedImgs.put(originalImg, scaledImage); progressBarComp.getProgressBar().setValue((int) (((double) currentFile / totalFiles) * 100)); ++currentFile; } } progressBarComp.dispose(); return null; } @Override protected void done() { try { imageViewPanel.setImages(decryptedImgs); } catch (Exception e) { e.printStackTrace(); } } public Image getScaledImg(BufferedImage img, int width) { int originalWidth = img.getWidth(); int originalHeight = img.getHeight(); double scaleFactor = (double) width / originalWidth; int desiredHeight = (int) (originalHeight * scaleFactor); return img.getScaledInstance(width, desiredHeight, Image.SCALE_SMOOTH); } public BufferedImage getDecryptedImg(File file) { BufferedImage decryptedImg = null; try { Key KEY = PasswordBasedKeyAES.getKey(); Cipher cipher = Cipher.getInstance(\"AES\"); cipher.init(Cipher.DECRYPT_MODE, KEY); FileInputStream inputStream = new FileInputStream(file); ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); byte[] buffer = new byte[64]; int bytesRead; while ((bytesRead = inputStream.read(buffer)) != -1) { byte[] output = cipher.update(buffer, 0, bytesRead); if (output != null) { outputStream.write(output); } } byte[] outputBytes = cipher.doFinal(); if (outputBytes != null) { outputStream.write(outputBytes); } inputStream.close(); ByteArrayInputStream decryptedInputStream = new ByteArrayInputStream(outputStream.toByteArray()); decryptedImg = ImageIO.read(decryptedInputStream); } catch (Exception e) { e.printStackTrace(); } return decryptedImg; } public static class ProgressBarComp extends JFrame { private final JProgressBar progressBar; public ProgressBarComp() { super(\"Decrypting\"); setResizable(false); setLocationRelativeTo(null); JPanel panel = new JPanel(new GridBagLayout()); panel.setBorder(new EmptyBorder(20, 20, 20, 20)); GridBagConstraints c = new GridBagConstraints(); c.fill = GridBagConstraints.BOTH; c.weighty = 1; c.weightx = 1; c.gridx = 0; c.gridy = 0; c.insets = new Insets(0, 0, 10, 0); JLabel text = new JLabel(\"Decrypting image files...\"); text.setFont(new Font(\"SansSerif\", Font.PLAIN, 15)); text.setHorizontalAlignment(JLabel.CENTER); panel.add(text, c); progressBar = new JProgressBar(); progressBar.setMinimum(0); progressBar.setMaximum(100); progressBar.setPreferredSize(new Dimension(300, 30)); c.gridx = 0; c.gridy = 1; panel.add(progressBar, c); add(panel, BorderLayout.CENTER); pack(); } public JProgressBar getProgressBar() { return progressBar; } } }"},{"file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/gui/FullImageViewerWindow.java","file_content":"package com.cj.wscc.gui; import javax.swing.*; import java.awt.*; public class FullImageViewerWindow extends JFrame { public FullImageViewerWindow(Image img) { super(\"Full Image Viewer\"); Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize(); int screenWidth = screenSize.width; int screenHeight = screenSize.height; int width = img.getWidth(null); int height = img.getHeight(null); if (width > screenWidth || height > screenHeight) { double scaleFactor = Math.min((double) screenWidth / width, (double) screenHeight / height); width = (int) (width * scaleFactor / 1.2); height = (int) (height * scaleFactor / 1.2); img = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } setSize(img.getWidth(null), img.getHeight(null)); setLocationRelativeTo(null); setResizable(false); JLabel jLabel = new JLabel(); jLabel.setIcon(new ImageIcon(img)); JScrollPane scrollPane = new JScrollPane(); scrollPane.setViewportView(jLabel); scrollPane.getViewport().setBackground(Color.white); add(scrollPane); } }"}]}}
{"project_id":214,"chunk_id":0,"content":{"main_file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/console/Consultation.java","main_file_content":"package com.cj.wscc.console; import java.io.File; import java.io.Serializable; import java.time.LocalDate; import java.time.LocalTime; import java.util.ArrayList; public class Consultation implements Serializable { private String id; private Doctor doctor; private Patient patient; private LocalDate date; private LocalTime time; private int durationHours; private double cost; private String notes; private ArrayList<File> imageFiles; public Consultation(String id, Doctor doctor, Patient patient, LocalDate date, LocalTime time, int duration, double cost, String notes, ArrayList<File> files) { this.id = id; this.doctor = doctor; this.patient = patient; this.date = date; this.time = time; this.durationHours = duration; this.cost = cost; this.notes = notes; this.imageFiles = files; } public String getId() { return id; } public void setId(String id) { this.id = id; } public Doctor getDoctor() { return doctor; } public void setDoctor(Doctor doctor) { this.doctor = doctor; } public Patient getPatient() { return patient; } public void setPatient(Patient patient) { this.patient = patient; } public LocalDate getDate() { return date; } public void setDate(LocalDate date) { this.date = date; } public LocalTime getTime() { return time; } public void setTime(LocalTime time) { this.time = time; } public int getDurationHours() { return durationHours; } public void setDurationHours(int durationHours) { this.durationHours = durationHours; } public double getCost() { return cost; } public void setCost(double cost) { this.cost = cost; } public String getNotes() { return notes; } public void setNotes(String notes) { this.notes = notes; } public ArrayList<File> getImageFiles() { return imageFiles; } public void setImageFiles(ArrayList<File> imageFiles) { this.imageFiles = imageFiles; } }","dependencies":[{"file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/console/Doctor.java","file_content":"package com.cj.wscc.console; import java.time.LocalDate; import java.util.Objects; public class Doctor extends Person { private String medicalLicenseNo; private String specialisation; public Doctor(String name, String surname, LocalDate DOB, String mobiNo, String medicalLicenseNo, String specialisation) { super(name, surname, DOB, mobiNo); this.medicalLicenseNo = medicalLicenseNo; this.specialisation = specialisation; } public String getMedicalLicenseNo() { return medicalLicenseNo; } public void setMedicalLicenseNo(String medicalLicenseNo) { this.medicalLicenseNo = medicalLicenseNo; } public String getSpecialisation() { return specialisation; } public void setSpecialisation(String specialisation) { this.specialisation = specialisation; } @Override public boolean equals(Object obj) { if (obj == this) { return true; } if (!(obj instanceof Person)) { return false; } Doctor other = (Doctor) obj; return Objects.equals(getFullName(), other.getFullName()) && Objects.equals(getMedicalLicenseNo(), other.getMedicalLicenseNo()); } }"},{"file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/console/Patient.java","file_content":"package com.cj.wscc.console; import java.time.LocalDate; public class Patient extends Person { private int patientId; public Patient(String name, String surname, LocalDate DOB, String mobiNo, int patientId) { super(name, surname, DOB, mobiNo); this.patientId = patientId; } public int getPatientId() { return patientId; } public void setPatientId(int patientId) { this.patientId = patientId; } }"}]}}
{"project_id":214,"chunk_id":0,"content":{"main_file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/console/Doctor.java","main_file_content":"package com.cj.wscc.console; import java.time.LocalDate; import java.util.Objects; public class Doctor extends Person { private String medicalLicenseNo; private String specialisation; public Doctor(String name, String surname, LocalDate DOB, String mobiNo, String medicalLicenseNo, String specialisation) { super(name, surname, DOB, mobiNo); this.medicalLicenseNo = medicalLicenseNo; this.specialisation = specialisation; } public String getMedicalLicenseNo() { return medicalLicenseNo; } public void setMedicalLicenseNo(String medicalLicenseNo) { this.medicalLicenseNo = medicalLicenseNo; } public String getSpecialisation() { return specialisation; } public void setSpecialisation(String specialisation) { this.specialisation = specialisation; } @Override public boolean equals(Object obj) { if (obj == this) { return true; } if (!(obj instanceof Person)) { return false; } Doctor other = (Doctor) obj; return Objects.equals(getFullName(), other.getFullName()) && Objects.equals(getMedicalLicenseNo(), other.getMedicalLicenseNo()); } }","dependencies":[{"file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/console/Person.java","file_content":"package com.cj.wscc.console; import java.io.Serializable; import java.time.LocalDate; public class Person implements Comparable<Person>, Serializable { private String name; private String surname; private LocalDate dob; private String mobiNo; public Person(String name, String surname, LocalDate dob, String mobiNo) { this.name = name; this.surname = surname; this.dob = dob; this.mobiNo = mobiNo; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getSurname() { return surname; } public void setSurname(String surname) { this.surname = surname; } public String getFullName() { return name + \" \" + surname; } public LocalDate getDob() { return dob; } public void setDob(LocalDate dob) { this.dob = dob; } public String getMobiNo() { return mobiNo; } public void setMobiNo(String mobiNo) { this.mobiNo = mobiNo; } @Override public int compareTo(Person person) { return this.surname.compareToIgnoreCase(person.getSurname()); } }"}]}}
{"project_id":214,"chunk_id":0,"content":{"main_file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/console/Person.java","main_file_content":"package com.cj.wscc.console; import java.io.Serializable; import java.time.LocalDate; public class Person implements Comparable<Person>, Serializable { private String name; private String surname; private LocalDate dob; private String mobiNo; public Person(String name, String surname, LocalDate dob, String mobiNo) { this.name = name; this.surname = surname; this.dob = dob; this.mobiNo = mobiNo; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getSurname() { return surname; } public void setSurname(String surname) { this.surname = surname; } public String getFullName() { return name + \" \" + surname; } public LocalDate getDob() { return dob; } public void setDob(LocalDate dob) { this.dob = dob; } public String getMobiNo() { return mobiNo; } public void setMobiNo(String mobiNo) { this.mobiNo = mobiNo; } @Override public int compareTo(Person person) { return this.surname.compareToIgnoreCase(person.getSurname()); } }","dependencies":[]}}
{"project_id":214,"chunk_id":0,"content":{"main_file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/console/SkinConsultationManager.java","main_file_content":"package com.cj.wscc.console; public interface SkinConsultationManager { void menu(); Doctor addDoctor(); Doctor deleteDoctor(); void printDoctors(); void saveData(); void loadData(); void openGUI(); }","dependencies":[{"file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/console/Doctor.java","file_content":"package com.cj.wscc.console; import java.time.LocalDate; import java.util.Objects; public class Doctor extends Person { private String medicalLicenseNo; private String specialisation; public Doctor(String name, String surname, LocalDate DOB, String mobiNo, String medicalLicenseNo, String specialisation) { super(name, surname, DOB, mobiNo); this.medicalLicenseNo = medicalLicenseNo; this.specialisation = specialisation; } public String getMedicalLicenseNo() { return medicalLicenseNo; } public void setMedicalLicenseNo(String medicalLicenseNo) { this.medicalLicenseNo = medicalLicenseNo; } public String getSpecialisation() { return specialisation; } public void setSpecialisation(String specialisation) { this.specialisation = specialisation; } @Override public boolean equals(Object obj) { if (obj == this) { return true; } if (!(obj instanceof Person)) { return false; } Doctor other = (Doctor) obj; return Objects.equals(getFullName(), other.getFullName()) && Objects.equals(getMedicalLicenseNo(), other.getMedicalLicenseNo()); } }"}]}}
{"project_id":214,"chunk_id":0,"content":{"main_file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/console/Patient.java","main_file_content":"package com.cj.wscc.console; import java.time.LocalDate; public class Patient extends Person { private int patientId; public Patient(String name, String surname, LocalDate DOB, String mobiNo, int patientId) { super(name, surname, DOB, mobiNo); this.patientId = patientId; } public int getPatientId() { return patientId; } public void setPatientId(int patientId) { this.patientId = patientId; } }","dependencies":[{"file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/console/Person.java","file_content":"package com.cj.wscc.console; import java.io.Serializable; import java.time.LocalDate; public class Person implements Comparable<Person>, Serializable { private String name; private String surname; private LocalDate dob; private String mobiNo; public Person(String name, String surname, LocalDate dob, String mobiNo) { this.name = name; this.surname = surname; this.dob = dob; this.mobiNo = mobiNo; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getSurname() { return surname; } public void setSurname(String surname) { this.surname = surname; } public String getFullName() { return name + \" \" + surname; } public LocalDate getDob() { return dob; } public void setDob(LocalDate dob) { this.dob = dob; } public String getMobiNo() { return mobiNo; } public void setMobiNo(String mobiNo) { this.mobiNo = mobiNo; } @Override public int compareTo(Person person) { return this.surname.compareToIgnoreCase(person.getSurname()); } }"}]}}
{"project_id":214,"chunk_id":0,"content":{"main_file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/console/WestminsterSkinConsultationManager.java","main_file_content":"package com.cj.wscc.console; import com.cj.wscc.gui.MainWindow; import com.formdev.flatlaf.intellijthemes.FlatArcIJTheme; import java.io.*; import java.text.ParseException; import java.text.SimpleDateFormat; import java.time.LocalDate; import java.util.*; public class WestminsterSkinConsultationManager implements SkinConsultationManager { private static final Scanner scanner = new Scanner(System.in); private ArrayList<Doctor> doctors = new ArrayList<>(); public static void main(String[] args) { WestminsterSkinConsultationManager wscm = new WestminsterSkinConsultationManager(); wscm.menu(); wscm.loadData(); while (true) { System.out.print(\"Enter Option (1-6): \"); switch (scanner.nextInt()) { case 1 -> wscm.addDoctor(); case 2 -> wscm.deleteDoctor(); case 3 -> wscm.printDoctors(); case 4 -> wscm.saveData(); case 5 -> wscm.openGUI(); case 6 -> { System.out.println(\"Bye..\"); System.exit(0); } default -> System.out.println(wscm.getOpTxt(1) + \" Invalid choice. Please try again.\\n\"); } } } @Override public void menu() { System.out.println(\"++\"); System.out.printf(\"| %s |%n\", getColoredTxt(\"Westminster Skin Consultation Centre\", \"blue\")); System.out.println(\"++\"); System.out.println(\"| 1. Add a New Doctor |\"); System.out.println(\"| 2. Delete a Doctor |\"); System.out.println(\"| 3. Print the List of Doctors |\"); System.out.println(\"| 4. Save Data to File |\"); System.out.println(\"| 5. Open GUI |\"); System.out.println(\"| 6. Exit |\"); System.out.println(\"++\"); } @Override public Doctor addDoctor() { System.out.printf(\"%n%s%n\", getColoredTxt(\"[Add a Doctor]\", \"blue\")); Scanner scanner = new Scanner(System.in); if (getNoOfDoctors() == 10) { System.out.println(getOpTxt(1) + \" Maximum doctors allocated in the centre\\n\"); return null; } System.out.print(\"Enter first name: \"); String fname = scanner.next(); if (!isNameValid(fname)) { System.out.println(getOpTxt(1) + \" Name cannot contain numbers or special characters\\n\"); return null; } System.out.print(\"Enter surname: \"); String sname = scanner.next(); if (!isNameValid(sname)) { System.out.println(getOpTxt(1) + \" Surname cannot contain numbers or special characters\\n\"); return null; } scanner.nextLine(); System.out.print(\"Enter specialisation: \"); String specialisation = scanner.nextLine(); if (!isSpecialisationValid(specialisation)) { System.out.println(getOpTxt(1) + \" Specialisation cannot contain numbers or special characters\\n\"); return null; } System.out.print(\"Enter medical license number: \"); String mediLicense = scanner.next(); if (!isLicenseValid(mediLicense)) { System.out.println(getOpTxt(1) + \" License number cannot contain special characters\\n\"); return null; } else if (isDoctorAlreadyAdded(mediLicense)) { System.out.println(getOpTxt(1) + \" A doctor with the given license number already exists in the system\\n\"); return null; } System.out.print(\"Enter DOB (yyyy-MM-dd): \"); String dob = scanner.next(); if (!isDobValid(dob)) { System.out.println(getOpTxt(1) + \" DOB should not contain letters and should be in the following format 'yyyy-MM-dd'\"); System.out.println(getOpTxt(2) + \" E.g. 1997-08-15\\n\"); return null; } System.out.print(\"Enter mobile number: \"); String mobile = scanner.next(); if (!isMobileValid(mobile)) { System.out.println(getOpTxt(1) + \" Mobile number cannot contain letters or special characters and should be 10 numbers long\\n\"); return null; } Doctor doctor = new Doctor(capitalize(fname), capitalize(sname), LocalDate.parse(dob), mobile, mediLicense, specialisation); doctors.add(doctor); updateDocsTableModel(); System.out.printf(\"%s Dr. %s added successfully%n%n\", getOpTxt(0), doctor.getFullName()); return doctor; } @Override public Doctor deleteDoctor() { System.out.printf(\"%n%s%n\", getColoredTxt(\"[Delete a Doctor]\", \"blue\")); Scanner scanner = new Scanner(System.in); System.out.print(\"Enter medical license no: \"); String medLic = scanner.next(); if (!isLicenseValid(medLic)) { System.out.print(getOpTxt(1) + \" License No. cannot contain special characters\\n\\n\"); return null; } Doctor docToDelete = null; for (Doctor d : doctors) { if (d.getMedicalLicenseNo().equals(medLic)) { docToDelete = d; } } if (docToDelete != null) { doctors.remove(docToDelete); updateDocsTableModel(); System.out.printf(\"%s Dr. %s deleted successfully%n\", getOpTxt(0), docToDelete.getFullName()); String titleTemplate = \"%-12s %-15s %-25s %-12s %-12s %-12s%n\"; String entryTemplate = \"%-12s %-15s %-25s %-12s %-12s %-12s%n\"; System.out.printf(titleTemplate, \"\", \"\", \"\", \"\", \"\", \"\"); System.out.printf(titleTemplate, \"Name\", \"Surname\", \"Specialisation\", \"LicenseNo\", \"DOB\", \"Mobile\"); System.out.printf(titleTemplate, \"\", \"\", \"\", \"\", \"\", \"\"); System.out.printf( entryTemplate, docToDelete.getName(), docToDelete.getSurname(), docToDelete.getSpecialisation(), docToDelete.getMedicalLicenseNo(), docToDelete.getDob(), docToDelete.getMobiNo() ); System.out.printf(\"%s Number of doctors in the centre - %d%n\", getOpTxt(2), doctors.size()); System.out.println(); return docToDelete; } else { System.out.printf(\"%s Doctor not found%n\", getOpTxt(1)); System.out.println(); return null; } } @Override public void printDoctors() { System.out.printf(\"%n%s%n\", getColoredTxt(\"[Print the List of Doctors]\", \"blue\")); System.out.printf(\"%s Number of doctors in the centre - %d%n\", getOpTxt(2), doctors.size()); System.out.println(getColoredTxt(\"Note:\", \"yellow\") + \" Sorted alphabetically by surname\"); ArrayList<Doctor> doctorsClone = (ArrayList<Doctor>) doctors.clone(); Collections.sort(doctorsClone); String titleTemplate = \"%-12s %-15s %-25s %-12s %-12s %-12s%n\"; String entryTemplate = \"%-12s %-15s %-25s %-12s %-12s %-12s%n\"; System.out.printf(titleTemplate, \"\", \"\", \"\", \"\", \"\", \"\"); System.out.printf(titleTemplate, \"Name\", \"Surname\", \"Specialisation\", \"LicenseNo\", \"DOB\", \"Mobile\"); System.out.printf(titleTemplate, \"\", \"\", \"\", \"\", \"\", \"\"); for (Doctor doctor : doctorsClone) { System.out.printf( entryTemplate, doctor.getName(), doctor.getSurname(), doctor.getSpecialisation(), doctor.getMedicalLicenseNo(), doctor.getDob(), doctor.getMobiNo() ); } System.out.println(); } @Override public void saveData() { System.out.printf(\"%n%s%n\", getColoredTxt(\"[Save Data to File]\", \"blue\")); try ( FileOutputStream fos = new FileOutputStream(\"doctors.ser\"); ObjectOutputStream oos = new ObjectOutputStream(fos) ) { oos.writeObject(doctors); System.out.printf(\"%s Data saved successfully to 'doctors.ser' file%n\", getOpTxt(0)); } catch (Exception e) { System.out.printf(\"%s Saving data to file failed%n\", getOpTxt(1)); } System.out.println(); } @Override public void loadData() { try ( FileInputStream fis = new FileInputStream(\"doctors.ser\"); ObjectInputStream ois = new ObjectInputStream(fis) ) { doctors = (ArrayList<Doctor>) ois.readObject(); System.out.println(getOpTxt(0) + \" Data loaded back successfully\\n\"); } catch (FileNotFoundException e) { System.out.println(getOpTxt(2) + \" Could not find the data file to load\\n\"); } catch (Exception e) { System.out.println(getOpTxt(1) + \" Could not load program data\\n\"); } } @Override public void openGUI() { System.out.printf(\"%n%s%n\", getColoredTxt(\"[Open GUI]\", \"blue\")); System.out.println(\"Launching GUI..\"); System.out.println(); FlatArcIJTheme.install(); MainWindow mainWindow = new MainWindow(doctors); mainWindow.setVisible(true); } public int getNoOfDoctors() { return doctors.size(); } public boolean isNameValid(String name) { return name.matches(\"[a-zA-Z]*\"); } public boolean isSpecialisationValid(String spe) { return spe.matches(\"[a-zA-Z ]*\"); } public boolean isDoctorAlreadyAdded(String licence) { boolean added = false; for (Doctor d : doctors) { if (d.getMedicalLicenseNo().equals(licence)) { added = true; break; } } return added; } public boolean isLicenseValid(String license) { return license.matches(\"[a-zA-Z0-9]*\"); } public boolean isDobValid(String dob) { SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\"); sdf.setLenient(false); try { sdf.parse(dob); return true; } catch (ParseException e) { return false; } } public boolean isMobileValid(String mobile) { return mobile.matches(\"[0-9]*\") && mobile.length() == 10; } public void updateDocsTableModel() { MainWindow.DocsTableModel docsTableModel = MainWindow.getDocsTableComp() != null ? (MainWindow.DocsTableModel) MainWindow.getDocsTableComp().getDocsTableModel() : null; if (docsTableModel != null) { docsTableModel.fireTableDataChanged(); } } public void setDoctors(ArrayList<Doctor> doctors) { this.doctors = doctors; } public String getOpTxt(int id) { switch (id) { case 0 -> { return getColoredTxt(\"SUCCESS:\", \"green\"); } case 1 -> { return getColoredTxt(\"ERROR:\", \"red\"); } case 2 -> { return getColoredTxt(\"INFO:\", \"yellow\"); } default -> { return \"\"; } } } public String getColoredTxt(String txt, String color) { String reset = \"\\u001B[0m\"; Map<String, String> colors = new HashMap<String, String>() {{ put(\"red\", \"\\u001B[31m\"); put(\"green\", \"\\u001B[32m\"); put(\"yellow\", \"\\u001B[33m\"); put(\"blue\", \"\\u001B[34m\"); put(\"purple\", \"\\u001B[35m\"); put(\"cyan\", \"\\u001B[36m\"); }}; return colors.get(color) + txt + reset; } public String capitalize(String txt) { return txt.substring(0, 1).toUpperCase() + txt.substring(1); } }","dependencies":[{"file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/console/Doctor.java","file_content":"package com.cj.wscc.console; import java.time.LocalDate; import java.util.Objects; public class Doctor extends Person { private String medicalLicenseNo; private String specialisation; public Doctor(String name, String surname, LocalDate DOB, String mobiNo, String medicalLicenseNo, String specialisation) { super(name, surname, DOB, mobiNo); this.medicalLicenseNo = medicalLicenseNo; this.specialisation = specialisation; } public String getMedicalLicenseNo() { return medicalLicenseNo; } public void setMedicalLicenseNo(String medicalLicenseNo) { this.medicalLicenseNo = medicalLicenseNo; } public String getSpecialisation() { return specialisation; } public void setSpecialisation(String specialisation) { this.specialisation = specialisation; } @Override public boolean equals(Object obj) { if (obj == this) { return true; } if (!(obj instanceof Person)) { return false; } Doctor other = (Doctor) obj; return Objects.equals(getFullName(), other.getFullName()) && Objects.equals(getMedicalLicenseNo(), other.getMedicalLicenseNo()); } }"},{"file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/console/SkinConsultationManager.java","file_content":"package com.cj.wscc.console; public interface SkinConsultationManager { void menu(); Doctor addDoctor(); Doctor deleteDoctor(); void printDoctors(); void saveData(); void loadData(); void openGUI(); }"}]}}
{"project_id":214,"chunk_id":1,"content":{"main_file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/console/WestminsterSkinConsultationManager.java","main_file_content":"package com.cj.wscc.console; import com.cj.wscc.gui.MainWindow; import com.formdev.flatlaf.intellijthemes.FlatArcIJTheme; import java.io.*; import java.text.ParseException; import java.text.SimpleDateFormat; import java.time.LocalDate; import java.util.*; public class WestminsterSkinConsultationManager implements SkinConsultationManager { private static final Scanner scanner = new Scanner(System.in); private ArrayList<Doctor> doctors = new ArrayList<>(); public static void main(String[] args) { WestminsterSkinConsultationManager wscm = new WestminsterSkinConsultationManager(); wscm.menu(); wscm.loadData(); while (true) { System.out.print(\"Enter Option (1-6): \"); switch (scanner.nextInt()) { case 1 -> wscm.addDoctor(); case 2 -> wscm.deleteDoctor(); case 3 -> wscm.printDoctors(); case 4 -> wscm.saveData(); case 5 -> wscm.openGUI(); case 6 -> { System.out.println(\"Bye..\"); System.exit(0); } default -> System.out.println(wscm.getOpTxt(1) + \" Invalid choice. Please try again.\\n\"); } } } @Override public void menu() { System.out.println(\"++\"); System.out.printf(\"| %s |%n\", getColoredTxt(\"Westminster Skin Consultation Centre\", \"blue\")); System.out.println(\"++\"); System.out.println(\"| 1. Add a New Doctor |\"); System.out.println(\"| 2. Delete a Doctor |\"); System.out.println(\"| 3. Print the List of Doctors |\"); System.out.println(\"| 4. Save Data to File |\"); System.out.println(\"| 5. Open GUI |\"); System.out.println(\"| 6. Exit |\"); System.out.println(\"++\"); } @Override public Doctor addDoctor() { System.out.printf(\"%n%s%n\", getColoredTxt(\"[Add a Doctor]\", \"blue\")); Scanner scanner = new Scanner(System.in); if (getNoOfDoctors() == 10) { System.out.println(getOpTxt(1) + \" Maximum doctors allocated in the centre\\n\"); return null; } System.out.print(\"Enter first name: \"); String fname = scanner.next(); if (!isNameValid(fname)) { System.out.println(getOpTxt(1) + \" Name cannot contain numbers or special characters\\n\"); return null; } System.out.print(\"Enter surname: \"); String sname = scanner.next(); if (!isNameValid(sname)) { System.out.println(getOpTxt(1) + \" Surname cannot contain numbers or special characters\\n\"); return null; } scanner.nextLine(); System.out.print(\"Enter specialisation: \"); String specialisation = scanner.nextLine(); if (!isSpecialisationValid(specialisation)) { System.out.println(getOpTxt(1) + \" Specialisation cannot contain numbers or special characters\\n\"); return null; } System.out.print(\"Enter medical license number: \"); String mediLicense = scanner.next(); if (!isLicenseValid(mediLicense)) { System.out.println(getOpTxt(1) + \" License number cannot contain special characters\\n\"); return null; } else if (isDoctorAlreadyAdded(mediLicense)) { System.out.println(getOpTxt(1) + \" A doctor with the given license number already exists in the system\\n\"); return null; } System.out.print(\"Enter DOB (yyyy-MM-dd): \"); String dob = scanner.next(); if (!isDobValid(dob)) { System.out.println(getOpTxt(1) + \" DOB should not contain letters and should be in the following format 'yyyy-MM-dd'\"); System.out.println(getOpTxt(2) + \" E.g. 1997-08-15\\n\"); return null; } System.out.print(\"Enter mobile number: \"); String mobile = scanner.next(); if (!isMobileValid(mobile)) { System.out.println(getOpTxt(1) + \" Mobile number cannot contain letters or special characters and should be 10 numbers long\\n\"); return null; } Doctor doctor = new Doctor(capitalize(fname), capitalize(sname), LocalDate.parse(dob), mobile, mediLicense, specialisation); doctors.add(doctor); updateDocsTableModel(); System.out.printf(\"%s Dr. %s added successfully%n%n\", getOpTxt(0), doctor.getFullName()); return doctor; } @Override public Doctor deleteDoctor() { System.out.printf(\"%n%s%n\", getColoredTxt(\"[Delete a Doctor]\", \"blue\")); Scanner scanner = new Scanner(System.in); System.out.print(\"Enter medical license no: \"); String medLic = scanner.next(); if (!isLicenseValid(medLic)) { System.out.print(getOpTxt(1) + \" License No. cannot contain special characters\\n\\n\"); return null; } Doctor docToDelete = null; for (Doctor d : doctors) { if (d.getMedicalLicenseNo().equals(medLic)) { docToDelete = d; } } if (docToDelete != null) { doctors.remove(docToDelete); updateDocsTableModel(); System.out.printf(\"%s Dr. %s deleted successfully%n\", getOpTxt(0), docToDelete.getFullName()); String titleTemplate = \"%-12s %-15s %-25s %-12s %-12s %-12s%n\"; String entryTemplate = \"%-12s %-15s %-25s %-12s %-12s %-12s%n\"; System.out.printf(titleTemplate, \"\", \"\", \"\", \"\", \"\", \"\"); System.out.printf(titleTemplate, \"Name\", \"Surname\", \"Specialisation\", \"LicenseNo\", \"DOB\", \"Mobile\"); System.out.printf(titleTemplate, \"\", \"\", \"\", \"\", \"\", \"\"); System.out.printf( entryTemplate, docToDelete.getName(), docToDelete.getSurname(), docToDelete.getSpecialisation(), docToDelete.getMedicalLicenseNo(), docToDelete.getDob(), docToDelete.getMobiNo() ); System.out.printf(\"%s Number of doctors in the centre - %d%n\", getOpTxt(2), doctors.size()); System.out.println(); return docToDelete; } else { System.out.printf(\"%s Doctor not found%n\", getOpTxt(1)); System.out.println(); return null; } } @Override public void printDoctors() { System.out.printf(\"%n%s%n\", getColoredTxt(\"[Print the List of Doctors]\", \"blue\")); System.out.printf(\"%s Number of doctors in the centre - %d%n\", getOpTxt(2), doctors.size()); System.out.println(getColoredTxt(\"Note:\", \"yellow\") + \" Sorted alphabetically by surname\"); ArrayList<Doctor> doctorsClone = (ArrayList<Doctor>) doctors.clone(); Collections.sort(doctorsClone); String titleTemplate = \"%-12s %-15s %-25s %-12s %-12s %-12s%n\"; String entryTemplate = \"%-12s %-15s %-25s %-12s %-12s %-12s%n\"; System.out.printf(titleTemplate, \"\", \"\", \"\", \"\", \"\", \"\"); System.out.printf(titleTemplate, \"Name\", \"Surname\", \"Specialisation\", \"LicenseNo\", \"DOB\", \"Mobile\"); System.out.printf(titleTemplate, \"\", \"\", \"\", \"\", \"\", \"\"); for (Doctor doctor : doctorsClone) { System.out.printf( entryTemplate, doctor.getName(), doctor.getSurname(), doctor.getSpecialisation(), doctor.getMedicalLicenseNo(), doctor.getDob(), doctor.getMobiNo() ); } System.out.println(); } @Override public void saveData() { System.out.printf(\"%n%s%n\", getColoredTxt(\"[Save Data to File]\", \"blue\")); try ( FileOutputStream fos = new FileOutputStream(\"doctors.ser\"); ObjectOutputStream oos = new ObjectOutputStream(fos) ) { oos.writeObject(doctors); System.out.printf(\"%s Data saved successfully to 'doctors.ser' file%n\", getOpTxt(0)); } catch (Exception e) { System.out.printf(\"%s Saving data to file failed%n\", getOpTxt(1)); } System.out.println(); } @Override public void loadData() { try ( FileInputStream fis = new FileInputStream(\"doctors.ser\"); ObjectInputStream ois = new ObjectInputStream(fis) ) { doctors = (ArrayList<Doctor>) ois.readObject(); System.out.println(getOpTxt(0) + \" Data loaded back successfully\\n\"); } catch (FileNotFoundException e) { System.out.println(getOpTxt(2) + \" Could not find the data file to load\\n\"); } catch (Exception e) { System.out.println(getOpTxt(1) + \" Could not load program data\\n\"); } } @Override public void openGUI() { System.out.printf(\"%n%s%n\", getColoredTxt(\"[Open GUI]\", \"blue\")); System.out.println(\"Launching GUI..\"); System.out.println(); FlatArcIJTheme.install(); MainWindow mainWindow = new MainWindow(doctors); mainWindow.setVisible(true); } public int getNoOfDoctors() { return doctors.size(); } public boolean isNameValid(String name) { return name.matches(\"[a-zA-Z]*\"); } public boolean isSpecialisationValid(String spe) { return spe.matches(\"[a-zA-Z ]*\"); } public boolean isDoctorAlreadyAdded(String licence) { boolean added = false; for (Doctor d : doctors) { if (d.getMedicalLicenseNo().equals(licence)) { added = true; break; } } return added; } public boolean isLicenseValid(String license) { return license.matches(\"[a-zA-Z0-9]*\"); } public boolean isDobValid(String dob) { SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\"); sdf.setLenient(false); try { sdf.parse(dob); return true; } catch (ParseException e) { return false; } } public boolean isMobileValid(String mobile) { return mobile.matches(\"[0-9]*\") && mobile.length() == 10; } public void updateDocsTableModel() { MainWindow.DocsTableModel docsTableModel = MainWindow.getDocsTableComp() != null ? (MainWindow.DocsTableModel) MainWindow.getDocsTableComp().getDocsTableModel() : null; if (docsTableModel != null) { docsTableModel.fireTableDataChanged(); } } public void setDoctors(ArrayList<Doctor> doctors) { this.doctors = doctors; } public String getOpTxt(int id) { switch (id) { case 0 -> { return getColoredTxt(\"SUCCESS:\", \"green\"); } case 1 -> { return getColoredTxt(\"ERROR:\", \"red\"); } case 2 -> { return getColoredTxt(\"INFO:\", \"yellow\"); } default -> { return \"\"; } } } public String getColoredTxt(String txt, String color) { String reset = \"\\u001B[0m\"; Map<String, String> colors = new HashMap<String, String>() {{ put(\"red\", \"\\u001B[31m\"); put(\"green\", \"\\u001B[32m\"); put(\"yellow\", \"\\u001B[33m\"); put(\"blue\", \"\\u001B[34m\"); put(\"purple\", \"\\u001B[35m\"); put(\"cyan\", \"\\u001B[36m\"); }}; return colors.get(color) + txt + reset; } public String capitalize(String txt) { return txt.substring(0, 1).toUpperCase() + txt.substring(1); } }","dependencies":[{"file_path":"consultation-management-system-main/consultation-management-system-main/src/com/cj/wscc/gui/MainWindow.java","file_content":"package com.cj.wscc.gui; import com.cj.wscc.console.Consultation; import com.cj.wscc.console.Doctor; import com.formdev.flatlaf.ui.FlatRoundBorder; import com.github.lgooddatepicker.components.DateTimePicker; import com.github.lgooddatepicker.components.TimePickerSettings; import com.github.lgooddatepicker.optionalusertools.PickerUtilities; import com.github.lgooddatepicker.optionalusertools.TimeVetoPolicy; import javax.crypto.Cipher; import javax.swing.*; import javax.swing.border.CompoundBorder; import javax.swing.border.EmptyBorder; import javax.swing.border.TitledBorder; import javax.swing.table.AbstractTableModel; import javax.swing.table.TableRowSorter; import java.awt.*; import java.awt.event.ActionEvent; import java.awt.event.FocusAdapter; import java.awt.event.FocusEvent; import java.io.*; import java.nio.file.Files; import java.nio.file.Paths; import java.security.Key; import java.text.DecimalFormat; import java.time.LocalDate; import java.time.LocalDateTime; import java.time.LocalTime; import java.util.ArrayList; import java.util.Random; import java.util.stream.Collectors; public class MainWindow extends JFrame { private final ArrayList<Doctor> doctors; private static ArrayList<Consultation> consultations = new ArrayList<>(); private static DocsTableComp docsTableComp; private static ConsTableComp consTableComp; private Doctor selectedDoctor; private static Consultation selectedConsultation; private LocalDate selectedDate; private LocalTime selectedTime; public MainWindow(ArrayList<Doctor> doctors) { super(\"Westminster Skill Consultation Centre\"); setSize(1280, 720); setLocationRelativeTo(null); setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); setLayout(new BorderLayout()); this.doctors = doctors; loadConsultations(); add(new TopPanelComp(), BorderLayout.NORTH); add(new LeftPanelComp(), BorderLayout.WEST); RightPanelComp rightPanelComp = new RightPanelComp(); docsTableComp = new DocsTableComp(); rightPanelComp.add(docsTableComp); consTableComp = new ConsTableComp(consultations); rightPanelComp.add(consTableComp, 1); add(rightPanelComp); CopyrightComp copyrightComp = new CopyrightComp(); add(copyrightComp, BorderLayout.SOUTH); } public void handleBtnClick(ActionEvent e) { JButton btn = (JButton) e.getSource(); switch (btn.getText()) { case \"Check Availability\" -> checkAvailability(); case \"Book Consultation\" -> bookConsultation(); case \"View Consultation\" -> viewConsultation(); case \"Edit Consultation\" -> editConsultation(); case \"Remove Consultation\" -> removeConsultation(); } } public void checkAvailability() { if (selectedDoctor == null) { JOptionPane.showMessageDialog( null, \"Please select a doctor from the Doctors table first\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else if (selectedDate == null || selectedTime == null) { JOptionPane.showMessageDialog( null, \"Please select a date and time\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { if (isDoctorAvailable(null)) { JOptionPane.showMessageDialog( null, \"Doctor is available at the selected time\", \"Info\", JOptionPane.INFORMATION_MESSAGE ); } else { JOptionPane.showMessageDialog( null, \"Unfortunately, the doctor is unavailable at the chosen time\", \"Error\", JOptionPane.ERROR_MESSAGE ); } } } public boolean isDoctorAvailable(Doctor doctor) { if (doctor == null) { doctor = selectedDoctor; } Doctor finalDoctor = doctor; ArrayList<Consultation> filteredConsultations = consultations.stream() .filter(c -> c.getDoctor().getMedicalLicenseNo().equalsIgnoreCase(finalDoctor.getMedicalLicenseNo())) .collect(Collectors.toCollection(ArrayList::new)); LocalDate date; LocalTime time; LocalDateTime startDateTime; LocalDateTime endDateTime; LocalDateTime selectedDateTime = selectedDate.atTime(selectedTime); boolean isAvailable = true; for (Consultation c : filteredConsultations) { date = c.getDate(); time = c.getTime(); startDateTime = date.atTime(time); endDateTime = startDateTime.plusHours(c.getDurationHours()); if (selectedDateTime.equals(startDateTime)) { isAvailable = false; } else if (selectedDateTime.isAfter(startDateTime) && selectedDateTime.isBefore(endDateTime)) { isAvailable = false; } } return isAvailable; } public Doctor getRandomAvailableDoctor() { ArrayList<Doctor> availableDoctors = new ArrayList<>(); ArrayList<Doctor> doctorsWithConsultations = new ArrayList<>(); for (Consultation c : consultations) { if (!doctorsWithConsultations.contains(c.getDoctor())) { doctorsWithConsultations.add(c.getDoctor()); } } for (Doctor d : doctorsWithConsultations) { if (isDoctorAvailable(d)) { availableDoctors.add(d); } } for (Doctor d : doctors) { if (!doctorsWithConsultations.contains(d)) { availableDoctors.add(d); } } ArrayList<Doctor> availableDoctorsSameSpeciality = new ArrayList<>(); availableDoctors.forEach(d -> { if (d.getSpecialisation().equalsIgnoreCase(selectedDoctor.getSpecialisation())) { availableDoctorsSameSpeciality.add(d); } }); if (availableDoctorsSameSpeciality.size() > 0) { Random rand = new Random(); int bound = availableDoctorsSameSpeciality.size(); int randIndex = rand.nextInt(bound); return availableDoctorsSameSpeciality.get(randIndex); } Random rand = new Random(); int bound = availableDoctors.size(); if (bound > 0) { int randIndex = rand.nextInt(bound); return availableDoctors.get(randIndex); } else { return null; } } public void viewConsultation() { if (selectedConsultation == null) { JOptionPane.showMessageDialog( null, \"Please select a consultation from the table to view\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { ViewConsultationWindow viewConsultationWindow = new ViewConsultationWindow(selectedConsultation); viewConsultationWindow.setVisible(true); } } public void bookConsultation() { if (selectedDoctor == null) { JOptionPane.showMessageDialog( null, \"Please select a doctor from the Doctors table first\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else if (selectedDate == null || selectedTime == null) { JOptionPane.showMessageDialog( null, \"Please select a date and time\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else if (!isDoctorAvailable(null)) { Doctor randomAvailableDoctor = getRandomAvailableDoctor(); if (randomAvailableDoctor == null) { JOptionPane.showMessageDialog( null, \"No doctors are available at the selected time\\nPlease choose another time.\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { String msg = String.format( \"<b>Dr. %s</b> is <span style=\\\"color:red\\\"><b>not available</b></span> at the selected time.<br>\" + \"However <b>Dr. %s</b> is available at the selected time.<br>\" + \"Book consultation with <b>Dr. %s</b>?\", selectedDoctor.getFullName(), randomAvailableDoctor.getFullName(), randomAvailableDoctor.getFullName() ); JEditorPane editorPane = new JEditorPane(); editorPane.setContentType(\"text/html\"); editorPane.setText(msg); JOptionPane jOptionPane = new JOptionPane(); editorPane.setBackground(jOptionPane.getBackground()); int result = JOptionPane.showConfirmDialog( null, editorPane, \"Confirm\", JOptionPane.OK_CANCEL_OPTION ); if (result == JOptionPane.OK_OPTION) { AddConsultationWindow consWindow = new AddConsultationWindow(consultations, randomAvailableDoctor, selectedDate, selectedTime); consWindow.setVisible(true); consWindow.toFront(); } } } else { AddConsultationWindow consWindow = new AddConsultationWindow(consultations, selectedDoctor, selectedDate, selectedTime); consWindow.setVisible(true); consWindow.toFront(); } } public void editConsultation() { if (selectedConsultation == null) { JOptionPane.showMessageDialog( null, \"Please select a consultation from the table to edit\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { EditConsultationWindow editConsultationWindow = new EditConsultationWindow(consultations, selectedConsultation); editConsultationWindow.setVisible(true); } } public static void addConsultation(Consultation consultation) { consultations.add(consultation); saveConsultations(); updateConsTableModel(); } public void removeConsultation() { if (selectedConsultation == null) { JOptionPane.showMessageDialog( null, \"Please select a consultation from the table to remove\", \"Error\", JOptionPane.ERROR_MESSAGE ); } else { int result = JOptionPane.showConfirmDialog( null, String.format(\"Are you sure you want to remove consultation %s?\", selectedConsultation.getId()), \"Confirm\", JOptionPane.YES_NO_OPTION ); if (result == JOptionPane.YES_OPTION) { consultations.remove(selectedConsultation); removeConsultationImgFiles(null); selectedConsultation = null; saveConsultations(); updateConsTableModel(); JOptionPane.showMessageDialog( null, \"Consultation removed successfully.\", \"Info\", JOptionPane.INFORMATION_MESSAGE ); } } } public static void removeConsultationImgFiles(Consultation consultation) { if (consultation == null) { consultation = selectedConsultation; } if (consultation.getImageFiles() == null) { return; } final File parentDir = consultation.getImageFiles().get(0).getParentFile(); consultation.getImageFiles().forEach(f -> { if (f.exists()) { try { Files.delete(Paths.get(f.getAbsolutePath())); } catch (IOException e) { throw new RuntimeException(e); } } }); if (parentDir.exists()) { parentDir.delete(); } } public static void loadConsultations() { try { FileInputStream fis = new FileInputStream(\"consultations.bin\"); byte[] encryptedBytes = new byte[fis.available()]; fis.read(encryptedBytes); fis.close(); Key KEY = PasswordBasedKeyAES.getKey(); Cipher cipher = Cipher.getInstance(\"AES\"); cipher.init(Cipher.DECRYPT_MODE, KEY); byte[] decryptedBytes = cipher.doFinal(encryptedBytes); ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(decryptedBytes)); consultations = (ArrayList<Consultation>) ois.readObject(); ois.close(); } catch (Exception ignored) { } } public static void saveConsultations() { try { ByteArrayOutputStream baos = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(baos); oos.writeObject(consultations); oos.close(); byte[] serializedBytes = baos.toByteArray(); Key KEY = PasswordBasedKeyAES.getKey(); Cipher cipher = Cipher.getInstance(\"AES\"); cipher.init(Cipher.ENCRYPT_MODE, KEY); byte[] encryptedBytes = cipher.doFinal(serializedBytes); FileOutputStream fos = new FileOutputStream(\"consultations.bin\"); fos.write(encryptedBytes); fos.close(); } catch (Exception ignored) { } } public static void updateConsTableModel() { consTableComp.getConsTableModel().fireTableDataChanged(); } public static DocsTableComp getDocsTableComp() { return docsTableComp; } public class TopPanelComp extends JPanel { public TopPanelComp() { setBackground(new Color(0x3F4E4F)); setPreferredSize(new Dimension(0, 70)); setForeground(new Color(0xFFFFFF)); setLayout(new BorderLayout()); JLabel topLabel = new JLabel(\"Westminster Skin Consultation Centre\", SwingConstants.CENTER); topLabel.setFont(new Font(\"SansSerif\", Font.PLAIN, 30)); topLabel.setForeground(new Color(0xFFFFFF)); add(topLabel, BorderLayout.CENTER); } } public class LeftPanelComp extends JPanel { public LeftPanelComp() { setLayout(new GridLayout(2, 1, 0, 10)); setBorder(new EmptyBorder(15, 10, 10, 10)); setBackground(Color.white); JPanel innerTopPanel = new JPanel(new GridLayout(3, 1, 0, 20)); innerTopPanel.setBorder(new CompoundBorder( new FlatRoundBorder(), new EmptyBorder(10, 10, 10, 10)) ); innerTopPanel.setBackground(Color.white); DateTimePickerComp dateTimePickerComp = new DateTimePickerComp(); innerTopPanel.add(dateTimePickerComp); MainBtnComp checkAvailabilityBtn = new MainBtnComp(\"Check Availability\"); checkAvailabilityBtn.addActionListener(MainWindow.this::handleBtnClick); innerTopPanel.add(checkAvailabilityBtn); MainBtnComp bookConsultationBtn = new MainBtnComp(\"Book Consultation\"); bookConsultationBtn.addActionListener(MainWindow.this::handleBtnClick); innerTopPanel.add(bookConsultationBtn); add(innerTopPanel); JPanel innerBottomPanel = new JPanel(new GridLayout(3, 1, 0, 20)); innerBottomPanel.setBorder(new CompoundBorder( new FlatRoundBorder(), new EmptyBorder(10, 10, 10, 10)) ); innerBottomPanel.setBackground(Color.white); MainBtnComp viewConsultationBtn = new MainBtnComp(\"View Consultation\"); viewConsultationBtn.addActionListener(MainWindow.this::handleBtnClick); innerBottomPanel.add(viewConsultationBtn); MainBtnComp editConsultationBtn = new MainBtnComp(\"Edit Consultation\"); editConsultationBtn.addActionListener(MainWindow.this::handleBtnClick); innerBottomPanel.add(editConsultationBtn); MainBtnComp removeConsultation = new MainBtnComp(\"Remove Consultation\"); removeConsultation.addActionListener(MainWindow.this::handleBtnClick); innerBottomPanel.add(removeConsultation); add(innerBottomPanel); } } public class DateTimePickerComp extends JPanel { public DateTimePickerComp() { setLayout(new BorderLayout()); setBackground(Color.white); DateTimePicker dateTimePicker = new DateTimePicker(); dateTimePicker.setBackground(Color.white); TimePickerSettings timeSettings = dateTimePicker.timePicker.getSettings(); timeSettings.setVetoPolicy(new SampleTimeVetoPolicy()); dateTimePicker.datePicker.setDateToToday(); selectedDate = dateTimePicker.getDatePicker().getDate(); dateTimePicker.timePicker.setTimeToNow(); selectedTime = dateTimePicker.getTimePicker().getTime(); int width = 24; int height = 24; ImageIcon oriCalIcon = new ImageIcon(\"resources/calendar_icon.png\"); Image caledarIcon = oriCalIcon.getImage().getScaledInstance(width, height, Image.SCALE_SMOOTH); JButton datePickerBtn = dateTimePicker.getDatePicker().getComponentToggleCalendarButton(); datePickerBtn.setPreferredSize(new Dimension(40, datePickerBtn.getPreferredSize().height)); datePickerBtn.setText(\"\"); datePickerBtn.setIcon(new ImageIcon(caledarIcon)); ImageIcon oriClockIcon = new ImageIcon(\"resources/clock_icon.png\"); Image clockIcon = oriClockIcon.getImage().getScaledInstance(width, height, Image.SCALE_SMOOTH); JButton timePickerBtn = dateTimePicker.getTimePicker().getComponentToggleTimeMenuButton(); timePickerBtn.setPreferredSize(new Dimension(40, timePickerBtn.getPreferredSize().height)); timePickerBtn.setText(\"\"); timePickerBtn.setIcon(new ImageIcon(clockIcon)); dateTimePicker.getDatePicker().addDateChangeListener(dateChangeEvent -> selectedDate = dateTimePicker.datePicker.getDate()); dateTimePicker.getTimePicker().addTimeChangeListener(timeChangeEvent -> selectedTime = dateTimePicker.timePicker.getTime()); add(dateTimePicker, BorderLayout.CENTER); } } public class MyTableComp extends JTable { public MyTableComp(AbstractTableModel tableModel, TableRowSorter rowSorter) { super(tableModel); setRowSorter(rowSorter); setFont(new Font(\"SansSerif\", Font.PLAIN, 17)); getTableHeader().setReorderingAllowed(false); getTableHeader().setFont(new Font(\"SansSerif\", Font.BOLD, 17)); setRowHeight(30); setSelectionMode(ListSelectionModel.SINGLE_SELECTION); } } public class DocsTableComp extends JPanel { private final MyTableComp myTableComp; private final DocsTableModel docsTableModel; public DocsTableComp() { setLayout(new BorderLayout(0, 5)); setBackground(new Color(0xFFFFFF)); TitledBorder titledBorder = new TitledBorder(\"Doctors\"); titledBorder.setBorder(new FlatRoundBorder()); titledBorder.setTitleFont(new Font(\"SansSerif\", Font.BOLD, 15)); setBorder(new CompoundBorder(titledBorder, new EmptyBorder(10, 10, 10, 10))); docsTableModel = new DocsTableModel(); myTableComp = new MyTableComp(docsTableModel, new TableRowSorter<>(docsTableModel)); myTableComp.getColumnModel().getColumn(2).setPreferredWidth(160); myTableComp.addFocusListener(new FocusAdapter() { @Override public void focusGained(FocusEvent e) { consTableComp.getTable().clearSelection(); selectedConsultation = null; } }); myTableComp.getSelectionModel().addListSelectionListener(listSelectionEvent -> { int row = myTableComp.getSelectedRow(); if (!listSelectionEvent.getValueIsAdjusting() && row >= 0) { String docLicense = (String) myTableComp.getValueAt(row, 3); selectedDoctor = doctors.stream() .filter(d -> d.getMedicalLicenseNo().equalsIgnoreCase(docLicense)) .findFirst() .orElse(null); } }); add(new JScrollPane(myTableComp), BorderLayout.CENTER); } public JTable getTable() { return myTableComp; } public AbstractTableModel getDocsTableModel() { return docsTableModel; } } public class ConsTableComp extends JPanel { private final MyTableComp myTableComp; private final ConsTableModel consTableModel; public ConsTableComp(ArrayList<Consultation> consultations) { setLayout(new BorderLayout(0, 5)); setBackground(new Color(0xFFFFFF)); TitledBorder titledBorder = new TitledBorder(\"Consultations\"); titledBorder.setBorder(new FlatRoundBorder()); titledBorder.setTitleFont(new Font(\"SansSerif\", Font.BOLD, 15)); setBorder(new CompoundBorder(titledBorder, new EmptyBorder(10, 10, 10, 10))); consTableModel = new ConsTableModel(consultations); myTableComp = new MyTableComp(consTableModel, new TableRowSorter<>(consTableModel)); myTableComp.addFocusListener(new FocusAdapter() { @Override public void focusGained(FocusEvent e) { docsTableComp.getTable().clearSelection(); selectedDoctor = null; } }); myTableComp.getSelectionModel().addListSelectionListener(listSelectionEvent -> { int row = myTableComp.getSelectedRow(); if (!listSelectionEvent.getValueIsAdjusting() && row >= 0) { String consId = (String) myTableComp.getValueAt(row, 0); selectedConsultation = consultations.stream() .filter(d -> d.getId().equalsIgnoreCase(consId)) .findFirst() .orElse(null); } }); add(new JScrollPane(myTableComp), BorderLayout.CENTER); } public JTable getTable() { return myTableComp; } public AbstractTableModel getConsTableModel() { return consTableModel; } } public class RightPanelComp extends JPanel { public RightPanelComp() { setLayout(new GridLayout(2, 1, 0, 15)); setPreferredSize(new Dimension(1000, 0)); setBorder(new EmptyBorder(10, 10, 10, 10)); setBackground(Color.white); } } public class MainBtnComp extends JButton { public MainBtnComp(String txt) { super(txt); setFont(new Font(\"SansSerif\", Font.BOLD, 16)); setFocusable(false); setFocusPainted(false); setBackground(new Color(0xDCD7C9)); setForeground(Color.black); } } public class CopyrightComp extends JPanel { public CopyrightComp() { setLayout(new BorderLayout()); setBorder(new EmptyBorder(0, 0, 10, 10)); setBackground(Color.white); JLabel jLabel = new JLabel(\"Copyright © 2023 Chamath Jayasena. All rights reserved.\"); jLabel.setFont(new Font(\"SansSerif\", Font.BOLD, 14)); jLabel.setEnabled(false); add(jLabel, BorderLayout.EAST); } } public class DocsTableModel extends AbstractTableModel { String[] colNames; Class[] colClasses; public DocsTableModel() { colNames = new String[]{ \"First Name\", \"Surname\", \"Specialisation\", \"License\", \"DOB\", \"Mobile\" }; colClasses = new Class[]{ String.class, String.class, String.class, String.class, LocalDate.class, String.class }; } @Override public int getRowCount() { return doctors.size(); } @Override public int getColumnCount() { return colNames.length; } @Override public Object getValueAt(int row, int col) { switch (col) { case 0 -> { return doctors.get(row).getName(); } case 1 -> { return doctors.get(row).getSurname(); } case 2 -> { return doctors.get(row).getSpecialisation(); } case 3 -> { return doctors.get(row).getMedicalLicenseNo(); } case 4 -> { return doctors.get(row).getDob(); } case 5 -> { return doctors.get(row).getMobiNo(); } default -> { return null; } } } public String getColumnName(int col) { return colNames[col]; } public Class getColumnClass(int col) { return colClasses[col]; } } public class ConsTableModel extends AbstractTableModel { private final ArrayList<Consultation> consultations; private final String[] colNames; private final Class[] colClasses; public ConsTableModel(ArrayList<Consultation> data) { this.consultations = data; colNames = new String[]{ \"ID\", \"Patient ID\", \"Patient\", \"Doctor\", \"Date\", \"Time\", \"Duration (h)\", \"Cost (£)\" }; colClasses = new Class[]{ String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class }; } @Override public int getRowCount() { return consultations.size(); } @Override public int getColumnCount() { return colNames.length; } @Override public Object getValueAt(int row, int col) { DecimalFormat df = new DecimalFormat(\"0.00\"); switch (col) { case 0 -> { return consultations.get(row).getId(); } case 1 -> { return consultations.get(row).getPatient().getPatientId(); } case 2 -> { return consultations.get(row).getPatient().getFullName(); } case 3 -> { return consultations.get(row).getDoctor().getFullName(); } case 4 -> { return consultations.get(row).getDate().toString(); } case 5 -> { return consultations.get(row).getTime().toString(); } case 6 -> { return consultations.get(row).getDurationHours() + \"\"; } case 7 -> { return df.format(consultations.get(row).getCost()); } default -> { return null; } } } public String getColumnName(int col) { return colNames[col]; } public Class getColumnClass(int col) { return colClasses[col]; } } private static class SampleTimeVetoPolicy implements TimeVetoPolicy { @Override public boolean isTimeAllowed(LocalTime time) { return PickerUtilities.isLocalTimeInRange( time, LocalTime.of(8, 00), LocalTime.of(17, 00), true); } } }"}]}}
{"project_id":215,"chunk_id":0,"content":{"main_file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Settings/SettingsFragment.java","main_file_content":"package com.example.avjindersinghsekhon.minimaltodo.Settings; import android.content.Context; import android.content.SharedPreferences; import android.os.Bundle; import android.preference.CheckBoxPreference; import android.preference.PreferenceFragment; import com.example.avjindersinghsekhon.minimaltodo.Analytics.AnalyticsApplication; import com.example.avjindersinghsekhon.minimaltodo.Main.MainFragment; import com.example.avjindersinghsekhon.minimaltodo.R; import com.example.avjindersinghsekhon.minimaltodo.Utility.PreferenceKeys; public class SettingsFragment extends PreferenceFragment implements SharedPreferences.OnSharedPreferenceChangeListener { AnalyticsApplication app; @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); addPreferencesFromResource(R.xml.preferences_layout); app = (AnalyticsApplication) getActivity().getApplication(); } @Override public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) { PreferenceKeys preferenceKeys = new PreferenceKeys(getResources()); if (key.equals(preferenceKeys.night_mode_pref_key)) { SharedPreferences themePreferences = getActivity().getSharedPreferences(MainFragment.THEME_PREFERENCES, Context.MODE_PRIVATE); SharedPreferences.Editor themeEditor = themePreferences.edit(); themeEditor.putBoolean(MainFragment.RECREATE_ACTIVITY, true); CheckBoxPreference checkBoxPreference = (CheckBoxPreference) findPreference(preferenceKeys.night_mode_pref_key); if (checkBoxPreference.isChecked()) { app.send(this, \"Settings\", \"Night Mode used\"); themeEditor.putString(MainFragment.THEME_SAVED, MainFragment.DARKTHEME); } else { themeEditor.putString(MainFragment.THEME_SAVED, MainFragment.LIGHTTHEME); } themeEditor.apply(); getActivity().recreate(); } } @Override public void onResume() { super.onResume(); getPreferenceManager().getSharedPreferences().registerOnSharedPreferenceChangeListener(this); } @Override public void onPause() { super.onPause(); getPreferenceManager().getSharedPreferences().unregisterOnSharedPreferenceChangeListener(this); } }","dependencies":[{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Analytics/AnalyticsApplication.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.Analytics; import android.app.Application; import android.content.pm.PackageManager; import com.example.avjindersinghsekhon.minimaltodo.R; import com.google.android.gms.analytics.GoogleAnalytics; import com.google.android.gms.analytics.HitBuilders; import com.google.android.gms.analytics.Tracker; import java.util.Map; public class AnalyticsApplication extends Application { private Tracker mTracker; private static final boolean IS_ENABLED = true; synchronized private Tracker getDefaultTracker() { if (mTracker == null) { GoogleAnalytics analytics = GoogleAnalytics.getInstance(this); mTracker = analytics.newTracker(R.xml.global_tracker); mTracker.setAppName(\"Minimal\"); mTracker.enableExceptionReporting(true); try { mTracker.setAppId(getPackageManager().getPackageInfo(getPackageName(), 0).versionName); } catch (PackageManager.NameNotFoundException e) { e.printStackTrace(); } } return mTracker; } public void send(Object screenName) { send(screenName, new HitBuilders.ScreenViewBuilder().build()); } private void send(Object screenName, Map<String, String> params) { if (IS_ENABLED) { Tracker tracker = getDefaultTracker(); tracker.setScreenName(getClassName(screenName)); tracker.send(params); } } private String getClassName(Object o) { Class c = o.getClass(); while (c.isAnonymousClass()) { c = c.getEnclosingClass(); } return c.getSimpleName(); } public void send(Object screenName, String category, String action) { send(screenName, new HitBuilders.EventBuilder().setCategory(category).setAction(action).build()); } public void send(Object screenName, String category, String action, String label) { send(screenName, new HitBuilders.EventBuilder().setCategory(category).setAction(action).setLabel(label).build()); } }"},{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Utility/PreferenceKeys.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.Utility; import android.content.res.Resources; import com.example.avjindersinghsekhon.minimaltodo.R; public class PreferenceKeys { public final String night_mode_pref_key; public PreferenceKeys(Resources resources) { night_mode_pref_key = resources.getString(R.string.night_mode_pref_key); } }"}]}}
{"project_id":215,"chunk_id":0,"content":{"main_file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Settings/SettingsActivity.java","main_file_content":"package com.example.avjindersinghsekhon.minimaltodo.Settings; import android.app.FragmentManager; import android.graphics.Color; import android.graphics.PorterDuff; import android.graphics.drawable.Drawable; import android.os.Bundle; import android.support.v4.app.NavUtils; import android.support.v7.app.AppCompatActivity; import android.support.v7.widget.Toolbar; import android.view.MenuItem; import com.example.avjindersinghsekhon.minimaltodo.Analytics.AnalyticsApplication; import com.example.avjindersinghsekhon.minimaltodo.Main.MainFragment; import com.example.avjindersinghsekhon.minimaltodo.R; public class SettingsActivity extends AppCompatActivity { AnalyticsApplication app; @Override protected void onResume() { super.onResume(); app.send(this); } @Override protected void onCreate(Bundle savedInstanceState) { app = (AnalyticsApplication) getApplication(); String theme = getSharedPreferences(MainFragment.THEME_PREFERENCES, MODE_PRIVATE).getString(MainFragment.THEME_SAVED, MainFragment.LIGHTTHEME); if (theme.equals(MainFragment.LIGHTTHEME)) { setTheme(R.style.CustomStyle_LightTheme); } else { setTheme(R.style.CustomStyle_DarkTheme); } super.onCreate(savedInstanceState); setContentView(R.layout.activity_settings); Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar); final Drawable backArrow = getResources().getDrawable(R.drawable.abc_ic_ab_back_mtrl_am_alpha); if (backArrow != null) { backArrow.setColorFilter(Color.WHITE, PorterDuff.Mode.SRC_ATOP); } if (getSupportActionBar() != null) { getSupportActionBar().setDisplayHomeAsUpEnabled(true); getSupportActionBar().setHomeAsUpIndicator(backArrow); } FragmentManager fm = getFragmentManager(); fm.beginTransaction().replace(R.id.mycontent, new SettingsFragment()).commit(); } @Override public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()) { case android.R.id.home: if (NavUtils.getParentActivityName(this) != null) { NavUtils.navigateUpFromSameTask(this); } return true; default: return super.onOptionsItemSelected(item); } } }","dependencies":[{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Analytics/AnalyticsApplication.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.Analytics; import android.app.Application; import android.content.pm.PackageManager; import com.example.avjindersinghsekhon.minimaltodo.R; import com.google.android.gms.analytics.GoogleAnalytics; import com.google.android.gms.analytics.HitBuilders; import com.google.android.gms.analytics.Tracker; import java.util.Map; public class AnalyticsApplication extends Application { private Tracker mTracker; private static final boolean IS_ENABLED = true; synchronized private Tracker getDefaultTracker() { if (mTracker == null) { GoogleAnalytics analytics = GoogleAnalytics.getInstance(this); mTracker = analytics.newTracker(R.xml.global_tracker); mTracker.setAppName(\"Minimal\"); mTracker.enableExceptionReporting(true); try { mTracker.setAppId(getPackageManager().getPackageInfo(getPackageName(), 0).versionName); } catch (PackageManager.NameNotFoundException e) { e.printStackTrace(); } } return mTracker; } public void send(Object screenName) { send(screenName, new HitBuilders.ScreenViewBuilder().build()); } private void send(Object screenName, Map<String, String> params) { if (IS_ENABLED) { Tracker tracker = getDefaultTracker(); tracker.setScreenName(getClassName(screenName)); tracker.send(params); } } private String getClassName(Object o) { Class c = o.getClass(); while (c.isAnonymousClass()) { c = c.getEnclosingClass(); } return c.getSimpleName(); } public void send(Object screenName, String category, String action) { send(screenName, new HitBuilders.EventBuilder().setCategory(category).setAction(action).build()); } public void send(Object screenName, String category, String action, String label) { send(screenName, new HitBuilders.EventBuilder().setCategory(category).setAction(action).setLabel(label).build()); } }"},{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Settings/SettingsFragment.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.Settings; import android.content.Context; import android.content.SharedPreferences; import android.os.Bundle; import android.preference.CheckBoxPreference; import android.preference.PreferenceFragment; import com.example.avjindersinghsekhon.minimaltodo.Analytics.AnalyticsApplication; import com.example.avjindersinghsekhon.minimaltodo.Main.MainFragment; import com.example.avjindersinghsekhon.minimaltodo.R; import com.example.avjindersinghsekhon.minimaltodo.Utility.PreferenceKeys; public class SettingsFragment extends PreferenceFragment implements SharedPreferences.OnSharedPreferenceChangeListener { AnalyticsApplication app; @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); addPreferencesFromResource(R.xml.preferences_layout); app = (AnalyticsApplication) getActivity().getApplication(); } @Override public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) { PreferenceKeys preferenceKeys = new PreferenceKeys(getResources()); if (key.equals(preferenceKeys.night_mode_pref_key)) { SharedPreferences themePreferences = getActivity().getSharedPreferences(MainFragment.THEME_PREFERENCES, Context.MODE_PRIVATE); SharedPreferences.Editor themeEditor = themePreferences.edit(); themeEditor.putBoolean(MainFragment.RECREATE_ACTIVITY, true); CheckBoxPreference checkBoxPreference = (CheckBoxPreference) findPreference(preferenceKeys.night_mode_pref_key); if (checkBoxPreference.isChecked()) { app.send(this, \"Settings\", \"Night Mode used\"); themeEditor.putString(MainFragment.THEME_SAVED, MainFragment.DARKTHEME); } else { themeEditor.putString(MainFragment.THEME_SAVED, MainFragment.LIGHTTHEME); } themeEditor.apply(); getActivity().recreate(); } } @Override public void onResume() { super.onResume(); getPreferenceManager().getSharedPreferences().registerOnSharedPreferenceChangeListener(this); } @Override public void onPause() { super.onPause(); getPreferenceManager().getSharedPreferences().unregisterOnSharedPreferenceChangeListener(this); } }"}]}}
{"project_id":215,"chunk_id":0,"content":{"main_file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Reminder/ReminderFragment.java","main_file_content":"package com.example.avjindersinghsekhon.minimaltodo.Reminder; import android.content.Intent; import android.content.SharedPreferences; import android.graphics.Color; import android.os.Bundle; import android.support.annotation.Nullable; import android.support.v7.app.AppCompatActivity; import android.support.v7.widget.Toolbar; import android.util.Log; import android.view.Menu; import android.view.MenuItem; import android.view.View; import android.widget.ArrayAdapter; import android.widget.Button; import android.widget.TextView; import com.example.avjindersinghsekhon.minimaltodo.Analytics.AnalyticsApplication; import com.example.avjindersinghsekhon.minimaltodo.AppDefault.AppDefaultFragment; import com.example.avjindersinghsekhon.minimaltodo.Main.MainActivity; import com.example.avjindersinghsekhon.minimaltodo.Main.MainFragment; import com.example.avjindersinghsekhon.minimaltodo.R; import com.example.avjindersinghsekhon.minimaltodo.Utility.StoreRetrieveData; import com.example.avjindersinghsekhon.minimaltodo.Utility.ToDoItem; import com.example.avjindersinghsekhon.minimaltodo.Utility.TodoNotificationService; import org.json.JSONException; import java.io.IOException; import java.util.ArrayList; import java.util.Calendar; import java.util.Date; import java.util.UUID; import fr.ganfra.materialspinner.MaterialSpinner; import static android.content.Context.MODE_PRIVATE; public class ReminderFragment extends AppDefaultFragment { private TextView mtoDoTextTextView; private Button mRemoveToDoButton; private MaterialSpinner mSnoozeSpinner; private String[] snoozeOptionsArray; private StoreRetrieveData storeRetrieveData; private ArrayList<ToDoItem> mToDoItems; private ToDoItem mItem; public static final String EXIT = \"com.avjindersekhon.exit\"; private TextView mSnoozeTextView; String theme; AnalyticsApplication app; @Override public void onViewCreated(View view, @Nullable Bundle savedInstanceState) { super.onViewCreated(view, savedInstanceState); app = (AnalyticsApplication) getActivity().getApplication(); app.send(this); theme = getActivity().getSharedPreferences(MainFragment.THEME_PREFERENCES, MODE_PRIVATE).getString(MainFragment.THEME_SAVED, MainFragment.LIGHTTHEME); if (theme.equals(MainFragment.LIGHTTHEME)) { getActivity().setTheme(R.style.CustomStyle_LightTheme); } else { getActivity().setTheme(R.style.CustomStyle_DarkTheme); } storeRetrieveData = new StoreRetrieveData(getContext(), MainFragment.FILENAME); mToDoItems = MainFragment.getLocallyStoredData(storeRetrieveData); ((AppCompatActivity) getActivity()).setSupportActionBar((Toolbar) view.findViewById(R.id.toolbar)); Intent i = getActivity().getIntent(); UUID id = (UUID) i.getSerializableExtra(TodoNotificationService.TODOUUID); mItem = null; for (ToDoItem toDoItem : mToDoItems) { if (toDoItem.getIdentifier().equals(id)) { mItem = toDoItem; break; } } snoozeOptionsArray = getResources().getStringArray(R.array.snooze_options); mRemoveToDoButton = (Button) view.findViewById(R.id.toDoReminderRemoveButton); mtoDoTextTextView = (TextView) view.findViewById(R.id.toDoReminderTextViewBody); mSnoozeTextView = (TextView) view.findViewById(R.id.reminderViewSnoozeTextView); mSnoozeSpinner = (MaterialSpinner) view.findViewById(R.id.todoReminderSnoozeSpinner); mtoDoTextTextView.setText(mItem.getToDoText()); if (theme.equals(MainFragment.LIGHTTHEME)) { mSnoozeTextView.setTextColor(getResources().getColor(R.color.secondary_text)); } else { mSnoozeTextView.setTextColor(Color.WHITE); mSnoozeTextView.setCompoundDrawablesWithIntrinsicBounds( R.drawable.ic_snooze_white_24dp, 0, 0, 0 ); } mRemoveToDoButton.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { app.send(this, \"Action\", \"Todo Removed from Reminder Activity\"); mToDoItems.remove(mItem); changeOccurred(); saveData(); closeApp(); } }); ArrayAdapter<String> adapter = new ArrayAdapter<>(getContext(), R.layout.spinner_text_view, snoozeOptionsArray); adapter.setDropDownViewResource(R.layout.spinner_dropdown_item); mSnoozeSpinner.setAdapter(adapter); } @Override protected int layoutRes() { return R.layout.fragment_reminder; } private void closeApp() { Intent i = new Intent(getContext(), MainActivity.class); i.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP); SharedPreferences sharedPreferences = getActivity().getSharedPreferences(MainFragment.SHARED_PREF_DATA_SET_CHANGED, MODE_PRIVATE); SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putBoolean(EXIT, true); editor.apply(); startActivity(i); } public boolean onCreateOptionsMenu(Menu menu) { getActivity().getMenuInflater().inflate(R.menu.menu_reminder, menu); return true; } private void changeOccurred() { SharedPreferences sharedPreferences = getActivity().getSharedPreferences(MainFragment.SHARED_PREF_DATA_SET_CHANGED, MODE_PRIVATE); SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putBoolean(MainFragment.CHANGE_OCCURED, true); editor.apply(); } private Date addTimeToDate(int mins) { app.send(this, \"Action\", \"Snoozed\", \"For \" + mins + \" minutes\"); Date date = new Date(); Calendar calendar = Calendar.getInstance(); calendar.setTime(date); calendar.add(Calendar.MINUTE, mins); return calendar.getTime(); } private int valueFromSpinner() { switch (mSnoozeSpinner.getSelectedItemPosition()) { case 0: return 10; case 1: return 30; case 2: return 60; default: return 0; } } @Override public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()) { case R.id.toDoReminderDoneMenuItem: Date date = addTimeToDate(valueFromSpinner()); mItem.setToDoDate(date); mItem.setHasReminder(true); Log.d(\"OskarSchindler\", \"Date Changed to: \" + date); changeOccurred(); saveData(); closeApp(); return true; default: return super.onOptionsItemSelected(item); } } private void saveData() { try { storeRetrieveData.saveToFile(mToDoItems); } catch (JSONException | IOException e) { e.printStackTrace(); } } public static ReminderFragment newInstance() { return new ReminderFragment(); } }","dependencies":[{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Analytics/AnalyticsApplication.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.Analytics; import android.app.Application; import android.content.pm.PackageManager; import com.example.avjindersinghsekhon.minimaltodo.R; import com.google.android.gms.analytics.GoogleAnalytics; import com.google.android.gms.analytics.HitBuilders; import com.google.android.gms.analytics.Tracker; import java.util.Map; public class AnalyticsApplication extends Application { private Tracker mTracker; private static final boolean IS_ENABLED = true; synchronized private Tracker getDefaultTracker() { if (mTracker == null) { GoogleAnalytics analytics = GoogleAnalytics.getInstance(this); mTracker = analytics.newTracker(R.xml.global_tracker); mTracker.setAppName(\"Minimal\"); mTracker.enableExceptionReporting(true); try { mTracker.setAppId(getPackageManager().getPackageInfo(getPackageName(), 0).versionName); } catch (PackageManager.NameNotFoundException e) { e.printStackTrace(); } } return mTracker; } public void send(Object screenName) { send(screenName, new HitBuilders.ScreenViewBuilder().build()); } private void send(Object screenName, Map<String, String> params) { if (IS_ENABLED) { Tracker tracker = getDefaultTracker(); tracker.setScreenName(getClassName(screenName)); tracker.send(params); } } private String getClassName(Object o) { Class c = o.getClass(); while (c.isAnonymousClass()) { c = c.getEnclosingClass(); } return c.getSimpleName(); } public void send(Object screenName, String category, String action) { send(screenName, new HitBuilders.EventBuilder().setCategory(category).setAction(action).build()); } public void send(Object screenName, String category, String action, String label) { send(screenName, new HitBuilders.EventBuilder().setCategory(category).setAction(action).setLabel(label).build()); } }"},{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/AppDefault/AppDefaultFragment.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.AppDefault; import android.os.Bundle; import android.support.annotation.LayoutRes; import android.support.annotation.Nullable; import android.support.v4.app.Fragment; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; public abstract class AppDefaultFragment extends Fragment { @Nullable @Override public View onCreateView( LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState ) { return inflater.inflate(layoutRes(), container, false); } @Override public void onDestroy() { super.onDestroy(); } @LayoutRes protected abstract int layoutRes(); }"},{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Main/MainActivity.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.Main; import android.content.Intent; import android.os.Bundle; import android.support.annotation.NonNull; import android.support.v4.app.Fragment; import android.support.v7.app.ActionBar; import android.view.Menu; import android.view.MenuItem; import com.example.avjindersinghsekhon.minimaltodo.About.AboutActivity; import com.example.avjindersinghsekhon.minimaltodo.AppDefault.AppDefaultActivity; import com.example.avjindersinghsekhon.minimaltodo.R; import com.example.avjindersinghsekhon.minimaltodo.Settings.SettingsActivity; public class MainActivity extends AppDefaultActivity { protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); final android.support.v7.widget.Toolbar toolbar = (android.support.v7.widget.Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar); ActionBar actionBar = getSupportActionBar(); if (actionBar != null) { actionBar.setDisplayHomeAsUpEnabled(false); } } @Override protected int contentViewLayoutRes() { return R.layout.activity_main; } @NonNull @Override protected Fragment createInitialFragment() { return MainFragment.newInstance(); } @Override public boolean onCreateOptionsMenu(Menu menu) { getMenuInflater().inflate(R.menu.menu_main, menu); return true; } @Override public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()) { case R.id.aboutMeMenuItem: Intent i = new Intent(this, AboutActivity.class); startActivity(i); return true; case R.id.preferences: Intent intent = new Intent(this, SettingsActivity.class); startActivity(intent); return true; default: return super.onOptionsItemSelected(item); } } }"}]}}
{"project_id":215,"chunk_id":1,"content":{"main_file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Reminder/ReminderFragment.java","main_file_content":"package com.example.avjindersinghsekhon.minimaltodo.Reminder; import android.content.Intent; import android.content.SharedPreferences; import android.graphics.Color; import android.os.Bundle; import android.support.annotation.Nullable; import android.support.v7.app.AppCompatActivity; import android.support.v7.widget.Toolbar; import android.util.Log; import android.view.Menu; import android.view.MenuItem; import android.view.View; import android.widget.ArrayAdapter; import android.widget.Button; import android.widget.TextView; import com.example.avjindersinghsekhon.minimaltodo.Analytics.AnalyticsApplication; import com.example.avjindersinghsekhon.minimaltodo.AppDefault.AppDefaultFragment; import com.example.avjindersinghsekhon.minimaltodo.Main.MainActivity; import com.example.avjindersinghsekhon.minimaltodo.Main.MainFragment; import com.example.avjindersinghsekhon.minimaltodo.R; import com.example.avjindersinghsekhon.minimaltodo.Utility.StoreRetrieveData; import com.example.avjindersinghsekhon.minimaltodo.Utility.ToDoItem; import com.example.avjindersinghsekhon.minimaltodo.Utility.TodoNotificationService; import org.json.JSONException; import java.io.IOException; import java.util.ArrayList; import java.util.Calendar; import java.util.Date; import java.util.UUID; import fr.ganfra.materialspinner.MaterialSpinner; import static android.content.Context.MODE_PRIVATE; public class ReminderFragment extends AppDefaultFragment { private TextView mtoDoTextTextView; private Button mRemoveToDoButton; private MaterialSpinner mSnoozeSpinner; private String[] snoozeOptionsArray; private StoreRetrieveData storeRetrieveData; private ArrayList<ToDoItem> mToDoItems; private ToDoItem mItem; public static final String EXIT = \"com.avjindersekhon.exit\"; private TextView mSnoozeTextView; String theme; AnalyticsApplication app; @Override public void onViewCreated(View view, @Nullable Bundle savedInstanceState) { super.onViewCreated(view, savedInstanceState); app = (AnalyticsApplication) getActivity().getApplication(); app.send(this); theme = getActivity().getSharedPreferences(MainFragment.THEME_PREFERENCES, MODE_PRIVATE).getString(MainFragment.THEME_SAVED, MainFragment.LIGHTTHEME); if (theme.equals(MainFragment.LIGHTTHEME)) { getActivity().setTheme(R.style.CustomStyle_LightTheme); } else { getActivity().setTheme(R.style.CustomStyle_DarkTheme); } storeRetrieveData = new StoreRetrieveData(getContext(), MainFragment.FILENAME); mToDoItems = MainFragment.getLocallyStoredData(storeRetrieveData); ((AppCompatActivity) getActivity()).setSupportActionBar((Toolbar) view.findViewById(R.id.toolbar)); Intent i = getActivity().getIntent(); UUID id = (UUID) i.getSerializableExtra(TodoNotificationService.TODOUUID); mItem = null; for (ToDoItem toDoItem : mToDoItems) { if (toDoItem.getIdentifier().equals(id)) { mItem = toDoItem; break; } } snoozeOptionsArray = getResources().getStringArray(R.array.snooze_options); mRemoveToDoButton = (Button) view.findViewById(R.id.toDoReminderRemoveButton); mtoDoTextTextView = (TextView) view.findViewById(R.id.toDoReminderTextViewBody); mSnoozeTextView = (TextView) view.findViewById(R.id.reminderViewSnoozeTextView); mSnoozeSpinner = (MaterialSpinner) view.findViewById(R.id.todoReminderSnoozeSpinner); mtoDoTextTextView.setText(mItem.getToDoText()); if (theme.equals(MainFragment.LIGHTTHEME)) { mSnoozeTextView.setTextColor(getResources().getColor(R.color.secondary_text)); } else { mSnoozeTextView.setTextColor(Color.WHITE); mSnoozeTextView.setCompoundDrawablesWithIntrinsicBounds( R.drawable.ic_snooze_white_24dp, 0, 0, 0 ); } mRemoveToDoButton.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { app.send(this, \"Action\", \"Todo Removed from Reminder Activity\"); mToDoItems.remove(mItem); changeOccurred(); saveData(); closeApp(); } }); ArrayAdapter<String> adapter = new ArrayAdapter<>(getContext(), R.layout.spinner_text_view, snoozeOptionsArray); adapter.setDropDownViewResource(R.layout.spinner_dropdown_item); mSnoozeSpinner.setAdapter(adapter); } @Override protected int layoutRes() { return R.layout.fragment_reminder; } private void closeApp() { Intent i = new Intent(getContext(), MainActivity.class); i.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP); SharedPreferences sharedPreferences = getActivity().getSharedPreferences(MainFragment.SHARED_PREF_DATA_SET_CHANGED, MODE_PRIVATE); SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putBoolean(EXIT, true); editor.apply(); startActivity(i); } public boolean onCreateOptionsMenu(Menu menu) { getActivity().getMenuInflater().inflate(R.menu.menu_reminder, menu); return true; } private void changeOccurred() { SharedPreferences sharedPreferences = getActivity().getSharedPreferences(MainFragment.SHARED_PREF_DATA_SET_CHANGED, MODE_PRIVATE); SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putBoolean(MainFragment.CHANGE_OCCURED, true); editor.apply(); } private Date addTimeToDate(int mins) { app.send(this, \"Action\", \"Snoozed\", \"For \" + mins + \" minutes\"); Date date = new Date(); Calendar calendar = Calendar.getInstance(); calendar.setTime(date); calendar.add(Calendar.MINUTE, mins); return calendar.getTime(); } private int valueFromSpinner() { switch (mSnoozeSpinner.getSelectedItemPosition()) { case 0: return 10; case 1: return 30; case 2: return 60; default: return 0; } } @Override public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()) { case R.id.toDoReminderDoneMenuItem: Date date = addTimeToDate(valueFromSpinner()); mItem.setToDoDate(date); mItem.setHasReminder(true); Log.d(\"OskarSchindler\", \"Date Changed to: \" + date); changeOccurred(); saveData(); closeApp(); return true; default: return super.onOptionsItemSelected(item); } } private void saveData() { try { storeRetrieveData.saveToFile(mToDoItems); } catch (JSONException | IOException e) { e.printStackTrace(); } } public static ReminderFragment newInstance() { return new ReminderFragment(); } }","dependencies":[{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Main/MainFragment.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.Main; import android.app.AlarmManager; import android.app.PendingIntent; import android.content.Intent; import android.content.SharedPreferences; import android.graphics.Color; import android.graphics.Typeface; import android.os.Bundle; import android.support.annotation.Nullable; import android.support.design.widget.CoordinatorLayout; import android.support.design.widget.FloatingActionButton; import android.support.design.widget.Snackbar; import android.support.v7.widget.DefaultItemAnimator; import android.support.v7.widget.LinearLayoutManager; import android.support.v7.widget.RecyclerView; import android.support.v7.widget.helper.ItemTouchHelper; import android.util.Log; import android.view.LayoutInflater; import android.view.Menu; import android.view.MenuItem; import android.view.View; import android.view.ViewGroup; import android.view.animation.AccelerateInterpolator; import android.view.animation.DecelerateInterpolator; import android.widget.ImageView; import android.widget.LinearLayout; import android.widget.TextView; import com.amulyakhare.textdrawable.TextDrawable; import com.amulyakhare.textdrawable.util.ColorGenerator; import com.example.avjindersinghsekhon.minimaltodo.About.AboutActivity; import com.example.avjindersinghsekhon.minimaltodo.AddToDo.AddToDoActivity; import com.example.avjindersinghsekhon.minimaltodo.AddToDo.AddToDoFragment; import com.example.avjindersinghsekhon.minimaltodo.Analytics.AnalyticsApplication; import com.example.avjindersinghsekhon.minimaltodo.AppDefault.AppDefaultFragment; import com.example.avjindersinghsekhon.minimaltodo.R; import com.example.avjindersinghsekhon.minimaltodo.Reminder.ReminderFragment; import com.example.avjindersinghsekhon.minimaltodo.Settings.SettingsActivity; import com.example.avjindersinghsekhon.minimaltodo.Utility.ItemTouchHelperClass; import com.example.avjindersinghsekhon.minimaltodo.Utility.RecyclerViewEmptySupport; import com.example.avjindersinghsekhon.minimaltodo.Utility.StoreRetrieveData; import com.example.avjindersinghsekhon.minimaltodo.Utility.ToDoItem; import com.example.avjindersinghsekhon.minimaltodo.Utility.TodoNotificationService; import org.json.JSONException; import java.io.IOException; import java.util.ArrayList; import java.util.Collections; import java.util.Date; import static android.app.Activity.RESULT_CANCELED; import static android.content.Context.ALARM_SERVICE; import static android.content.Context.MODE_PRIVATE; public class MainFragment extends AppDefaultFragment { private RecyclerViewEmptySupport mRecyclerView; private FloatingActionButton mAddToDoItemFAB; private ArrayList<ToDoItem> mToDoItemsArrayList; private CoordinatorLayout mCoordLayout; public static final String TODOITEM = \"com.avjindersinghsekhon.com.avjindersinghsekhon.minimaltodo.MainActivity\"; private MainFragment.BasicListAdapter adapter; private static final int REQUEST_ID_TODO_ITEM = 100; private ToDoItem mJustDeletedToDoItem; private int mIndexOfDeletedToDoItem; public static final String DATE_TIME_FORMAT_12_HOUR = \"MMM d, yyyy h:mm a\"; public static final String DATE_TIME_FORMAT_24_HOUR = \"MMM d, yyyy k:mm\"; public static final String FILENAME = \"todoitems.json\"; private StoreRetrieveData storeRetrieveData; public ItemTouchHelper itemTouchHelper; private CustomRecyclerScrollViewListener customRecyclerScrollViewListener; public static final String SHARED_PREF_DATA_SET_CHANGED = \"com.avjindersekhon.datasetchanged\"; public static final String CHANGE_OCCURED = \"com.avjinder.changeoccured\"; private int mTheme = -1; private String theme = \"name_of_the_theme\"; public static final String THEME_PREFERENCES = \"com.avjindersekhon.themepref\"; public static final String RECREATE_ACTIVITY = \"com.avjindersekhon.recreateactivity\"; public static final String THEME_SAVED = \"com.avjindersekhon.savedtheme\"; public static final String DARKTHEME = \"com.avjindersekon.darktheme\"; public static final String LIGHTTHEME = \"com.avjindersekon.lighttheme\"; private AnalyticsApplication app; private String[] testStrings = {\"Clean my room\", \"Water the plants\", \"Get car washed\", \"Get my dry cleaning\" }; @Override public void onViewCreated(View view, @Nullable Bundle savedInstanceState) { super.onViewCreated(view, savedInstanceState); app = (AnalyticsApplication) getActivity().getApplication(); theme = getActivity().getSharedPreferences(THEME_PREFERENCES, MODE_PRIVATE).getString(THEME_SAVED, LIGHTTHEME); if (theme.equals(LIGHTTHEME)) { mTheme = R.style.CustomStyle_LightTheme; } else { mTheme = R.style.CustomStyle_DarkTheme; } this.getActivity().setTheme(mTheme); super.onCreate(savedInstanceState); SharedPreferences sharedPreferences = getActivity().getSharedPreferences(SHARED_PREF_DATA_SET_CHANGED, MODE_PRIVATE); SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putBoolean(CHANGE_OCCURED, false); editor.apply(); storeRetrieveData = new StoreRetrieveData(getContext(), FILENAME); mToDoItemsArrayList = getLocallyStoredData(storeRetrieveData); adapter = new MainFragment.BasicListAdapter(mToDoItemsArrayList); setAlarms(); mCoordLayout = (CoordinatorLayout) view.findViewById(R.id.myCoordinatorLayout); mAddToDoItemFAB = (FloatingActionButton) view.findViewById(R.id.addToDoItemFAB); mAddToDoItemFAB.setOnClickListener(new View.OnClickListener() { @SuppressWarnings(\"deprecation\") @Override public void onClick(View v) { app.send(this, \"Action\", \"FAB pressed\"); Intent newTodo = new Intent(getContext(), AddToDoActivity.class); ToDoItem item = new ToDoItem(\"\",\"\", false, null); int color = ColorGenerator.MATERIAL.getRandomColor(); item.setTodoColor(color); newTodo.putExtra(TODOITEM, item); startActivityForResult(newTodo, REQUEST_ID_TODO_ITEM); } }); mRecyclerView = (RecyclerViewEmptySupport) view.findViewById(R.id.toDoRecyclerView); if (theme.equals(LIGHTTHEME)) { mRecyclerView.setBackgroundColor(getResources().getColor(R.color.primary_lightest)); } mRecyclerView.setEmptyView(view.findViewById(R.id.toDoEmptyView)); mRecyclerView.setHasFixedSize(true); mRecyclerView.setItemAnimator(new DefaultItemAnimator()); mRecyclerView.setLayoutManager(new LinearLayoutManager(getContext())); customRecyclerScrollViewListener = new CustomRecyclerScrollViewListener() { @Override public void show() { mAddToDoItemFAB.animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start(); } @Override public void hide() { CoordinatorLayout.LayoutParams lp = (CoordinatorLayout.LayoutParams) mAddToDoItemFAB.getLayoutParams(); int fabMargin = lp.bottomMargin; mAddToDoItemFAB.animate().translationY(mAddToDoItemFAB.getHeight() + fabMargin).setInterpolator(new AccelerateInterpolator(2.0f)).start(); } }; mRecyclerView.addOnScrollListener(customRecyclerScrollViewListener); ItemTouchHelper.Callback callback = new ItemTouchHelperClass(adapter); itemTouchHelper = new ItemTouchHelper(callback); itemTouchHelper.attachToRecyclerView(mRecyclerView); mRecyclerView.setAdapter(adapter); } public static ArrayList<ToDoItem> getLocallyStoredData(StoreRetrieveData storeRetrieveData) { ArrayList<ToDoItem> items = null; try { items = storeRetrieveData.loadFromFile(); } catch (IOException | JSONException e) { e.printStackTrace(); } if (items == null) { items = new ArrayList<>(); } return items; } @Override public void onResume() { super.onResume(); app.send(this); SharedPreferences sharedPreferences = getActivity().getSharedPreferences(SHARED_PREF_DATA_SET_CHANGED, MODE_PRIVATE); if (sharedPreferences.getBoolean(ReminderFragment.EXIT, false)) { SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putBoolean(ReminderFragment.EXIT, false); editor.apply(); getActivity().finish(); } if (getActivity().getSharedPreferences(THEME_PREFERENCES, MODE_PRIVATE).getBoolean(RECREATE_ACTIVITY, false)) { SharedPreferences.Editor editor = getActivity().getSharedPreferences(THEME_PREFERENCES, MODE_PRIVATE).edit(); editor.putBoolean(RECREATE_ACTIVITY, false); editor.apply(); getActivity().recreate(); } } @Override public void onStart() { app = (AnalyticsApplication) getActivity().getApplication(); super.onStart(); SharedPreferences sharedPreferences = getActivity().getSharedPreferences(SHARED_PREF_DATA_SET_CHANGED, MODE_PRIVATE); if (sharedPreferences.getBoolean(CHANGE_OCCURED, false)) { mToDoItemsArrayList = getLocallyStoredData(storeRetrieveData); adapter = new MainFragment.BasicListAdapter(mToDoItemsArrayList); mRecyclerView.setAdapter(adapter); setAlarms(); SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putBoolean(CHANGE_OCCURED, false); editor.apply(); } } private void setAlarms() { if (mToDoItemsArrayList != null) { for (ToDoItem item : mToDoItemsArrayList) { if (item.hasReminder() && item.getToDoDate() != null) { if (item.getToDoDate().before(new Date())) { item.setToDoDate(null); continue; } Intent i = new Intent(getContext(), TodoNotificationService.class); i.putExtra(TodoNotificationService.TODOUUID, item.getIdentifier()); i.putExtra(TodoNotificationService.TODOTEXT, item.getToDoText()); createAlarm(i, item.getIdentifier().hashCode(), item.getToDoDate().getTime()); } } } } public void addThemeToSharedPreferences(String theme) { SharedPreferences sharedPreferences = getActivity().getSharedPreferences(THEME_PREFERENCES, MODE_PRIVATE); SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putString(THEME_SAVED, theme); editor.apply(); } public boolean onCreateOptionsMenu(Menu menu) { getActivity().getMenuInflater().inflate(R.menu.menu_main, menu); return true; } @Override public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()) { case R.id.aboutMeMenuItem: Intent i = new Intent(getContext(), AboutActivity.class); startActivity(i); return true; case R.id.preferences: Intent intent = new Intent(getContext(), SettingsActivity.class); startActivity(intent); return true; default: return super.onOptionsItemSelected(item); } } @Override public void onActivityResult(int requestCode, int resultCode, Intent data) { if (resultCode != RESULT_CANCELED && requestCode == REQUEST_ID_TODO_ITEM) { ToDoItem item = (ToDoItem) data.getSerializableExtra(TODOITEM); if (item.getToDoText().length() <= 0) { return; } boolean existed = false; if (item.hasReminder() && item.getToDoDate() != null) { Intent i = new Intent(getContext(), TodoNotificationService.class); i.putExtra(TodoNotificationService.TODOTEXT, item.getToDoText()); i.putExtra(TodoNotificationService.TODOUUID, item.getIdentifier()); createAlarm(i, item.getIdentifier().hashCode(), item.getToDoDate().getTime()); } for (int i = 0; i < mToDoItemsArrayList.size(); i++) { if (item.getIdentifier().equals(mToDoItemsArrayList.get(i).getIdentifier())) { mToDoItemsArrayList.set(i, item); existed = true; adapter.notifyDataSetChanged(); break; } } if (!existed) { addToDataStore(item); } } } private AlarmManager getAlarmManager() { return (AlarmManager) getActivity().getSystemService(ALARM_SERVICE); } private boolean doesPendingIntentExist(Intent i, int requestCode) { PendingIntent pi = PendingIntent.getService(getContext(), requestCode, i, PendingIntent.FLAG_NO_CREATE); return pi != null; } private void createAlarm(Intent i, int requestCode, long timeInMillis) { AlarmManager am = getAlarmManager(); PendingIntent pi = PendingIntent.getService(getContext(), requestCode, i, PendingIntent.FLAG_UPDATE_CURRENT); am.set(AlarmManager.RTC_WAKEUP, timeInMillis, pi); } private void deleteAlarm(Intent i, int requestCode) { if (doesPendingIntentExist(i, requestCode)) { PendingIntent pi = PendingIntent.getService(getContext(), requestCode, i, PendingIntent.FLAG_NO_CREATE); pi.cancel(); getAlarmManager().cancel(pi); Log.d(\"OskarSchindler\", \"PI Cancelled \" + doesPendingIntentExist(i, requestCode)); } } private void addToDataStore(ToDoItem item) { mToDoItemsArrayList.add(item); adapter.notifyItemInserted(mToDoItemsArrayList.size() - 1); } public void makeUpItems(ArrayList<ToDoItem> items, int len) { for (String testString : testStrings) { ToDoItem item = new ToDoItem(testString,testString, false, new Date()); items.add(item); } } public class BasicListAdapter extends RecyclerView.Adapter<BasicListAdapter.ViewHolder> implements ItemTouchHelperClass.ItemTouchHelperAdapter { private ArrayList<ToDoItem> items; @Override public void onItemMoved(int fromPosition, int toPosition) { if (fromPosition < toPosition) { for (int i = fromPosition; i < toPosition; i++) { Collections.swap(items, i, i + 1); } } else { for (int i = fromPosition; i > toPosition; i--) { Collections.swap(items, i, i - 1); } } notifyItemMoved(fromPosition, toPosition); } @Override public void onItemRemoved(final int position) { app.send(this, \"Action\", \"Swiped Todo Away\"); mJustDeletedToDoItem = items.remove(position); mIndexOfDeletedToDoItem = position; Intent i = new Intent(getContext(), TodoNotificationService.class); deleteAlarm(i, mJustDeletedToDoItem.getIdentifier().hashCode()); notifyItemRemoved(position); String toShow = \"Todo\"; Snackbar.make(mCoordLayout, \"Deleted \" + toShow, Snackbar.LENGTH_LONG) .setAction(\"UNDO\", new View.OnClickListener() { @Override public void onClick(View v) { app.send(this, \"Action\", \"UNDO Pressed\"); items.add(mIndexOfDeletedToDoItem, mJustDeletedToDoItem); if (mJustDeletedToDoItem.getToDoDate() != null && mJustDeletedToDoItem.hasReminder()) { Intent i = new Intent(getContext(), TodoNotificationService.class); i.putExtra(TodoNotificationService.TODOTEXT, mJustDeletedToDoItem.getToDoText()); i.putExtra(TodoNotificationService.TODOUUID, mJustDeletedToDoItem.getIdentifier()); createAlarm(i, mJustDeletedToDoItem.getIdentifier().hashCode(), mJustDeletedToDoItem.getToDoDate().getTime()); } notifyItemInserted(mIndexOfDeletedToDoItem); } }).show(); } @Override public BasicListAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) { View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.list_circle_try, parent, false); return new ViewHolder(v); } @Override public void onBindViewHolder(final BasicListAdapter.ViewHolder holder, final int position) { ToDoItem item = items.get(position); SharedPreferences sharedPreferences = getActivity().getSharedPreferences(THEME_PREFERENCES, MODE_PRIVATE); int bgColor; int todoTextColor; if (sharedPreferences.getString(THEME_SAVED, LIGHTTHEME).equals(LIGHTTHEME)) { bgColor = Color.WHITE; todoTextColor = getResources().getColor(R.color.secondary_text); } else { bgColor = Color.DKGRAY; todoTextColor = Color.WHITE; } holder.linearLayout.setBackgroundColor(bgColor); if (item.hasReminder() && item.getToDoDate() != null) { holder.mToDoTextview.setMaxLines(1); holder.mTimeTextView.setVisibility(View.VISIBLE); } else { holder.mTimeTextView.setVisibility(View.GONE); holder.mToDoTextview.setMaxLines(2); } holder.mToDoTextview.setText(item.getToDoText()); holder.mToDoTextview.setTextColor(todoTextColor); TextDrawable myDrawable = TextDrawable.builder().beginConfig() .textColor(Color.WHITE) .useFont(Typeface.DEFAULT) .toUpperCase() .endConfig() .buildRound(item.getToDoText().substring(0, 1), item.getTodoColor()); holder.mColorImageView.setImageDrawable(myDrawable); if (item.getToDoDate() != null) { String timeToShow; if (android.text.format.DateFormat.is24HourFormat(getContext())) { timeToShow = AddToDoFragment.formatDate(MainFragment.DATE_TIME_FORMAT_24_HOUR, item.getToDoDate()); } else { timeToShow = AddToDoFragment.formatDate(MainFragment.DATE_TIME_FORMAT_12_HOUR, item.getToDoDate()); } holder.mTimeTextView.setText(timeToShow); } } @Override public int getItemCount() { return items.size(); } BasicListAdapter(ArrayList<ToDoItem> items) { this.items = items; } @SuppressWarnings(\"deprecation\") public class ViewHolder extends RecyclerView.ViewHolder { View mView; LinearLayout linearLayout; TextView mToDoTextview; ImageView mColorImageView; TextView mTimeTextView; public ViewHolder(View v) { super(v); mView = v; v.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { ToDoItem item = items.get(ViewHolder.this.getAdapterPosition()); Intent i = new Intent(getContext(), AddToDoActivity.class); i.putExtra(TODOITEM, item); startActivityForResult(i, REQUEST_ID_TODO_ITEM); } }); mToDoTextview = (TextView) v.findViewById(R.id.toDoListItemTextview); mTimeTextView = (TextView) v.findViewById(R.id.todoListItemTimeTextView); mColorImageView = (ImageView) v.findViewById(R.id.toDoListItemColorImageView); linearLayout = (LinearLayout) v.findViewById(R.id.listItemLinearLayout); } } } private void saveDate() { try { storeRetrieveData.saveToFile(mToDoItemsArrayList); } catch (JSONException | IOException e) { e.printStackTrace(); } } @Override public void onPause() { super.onPause(); try { storeRetrieveData.saveToFile(mToDoItemsArrayList); } catch (JSONException | IOException e) { e.printStackTrace(); } } @Override public void onDestroy() { super.onDestroy(); mRecyclerView.removeOnScrollListener(customRecyclerScrollViewListener); } @Override protected int layoutRes() { return R.layout.fragment_main; } public static MainFragment newInstance() { return new MainFragment(); } }"}]}}
{"project_id":215,"chunk_id":2,"content":{"main_file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Reminder/ReminderFragment.java","main_file_content":"package com.example.avjindersinghsekhon.minimaltodo.Reminder; import android.content.Intent; import android.content.SharedPreferences; import android.graphics.Color; import android.os.Bundle; import android.support.annotation.Nullable; import android.support.v7.app.AppCompatActivity; import android.support.v7.widget.Toolbar; import android.util.Log; import android.view.Menu; import android.view.MenuItem; import android.view.View; import android.widget.ArrayAdapter; import android.widget.Button; import android.widget.TextView; import com.example.avjindersinghsekhon.minimaltodo.Analytics.AnalyticsApplication; import com.example.avjindersinghsekhon.minimaltodo.AppDefault.AppDefaultFragment; import com.example.avjindersinghsekhon.minimaltodo.Main.MainActivity; import com.example.avjindersinghsekhon.minimaltodo.Main.MainFragment; import com.example.avjindersinghsekhon.minimaltodo.R; import com.example.avjindersinghsekhon.minimaltodo.Utility.StoreRetrieveData; import com.example.avjindersinghsekhon.minimaltodo.Utility.ToDoItem; import com.example.avjindersinghsekhon.minimaltodo.Utility.TodoNotificationService; import org.json.JSONException; import java.io.IOException; import java.util.ArrayList; import java.util.Calendar; import java.util.Date; import java.util.UUID; import fr.ganfra.materialspinner.MaterialSpinner; import static android.content.Context.MODE_PRIVATE; public class ReminderFragment extends AppDefaultFragment { private TextView mtoDoTextTextView; private Button mRemoveToDoButton; private MaterialSpinner mSnoozeSpinner; private String[] snoozeOptionsArray; private StoreRetrieveData storeRetrieveData; private ArrayList<ToDoItem> mToDoItems; private ToDoItem mItem; public static final String EXIT = \"com.avjindersekhon.exit\"; private TextView mSnoozeTextView; String theme; AnalyticsApplication app; @Override public void onViewCreated(View view, @Nullable Bundle savedInstanceState) { super.onViewCreated(view, savedInstanceState); app = (AnalyticsApplication) getActivity().getApplication(); app.send(this); theme = getActivity().getSharedPreferences(MainFragment.THEME_PREFERENCES, MODE_PRIVATE).getString(MainFragment.THEME_SAVED, MainFragment.LIGHTTHEME); if (theme.equals(MainFragment.LIGHTTHEME)) { getActivity().setTheme(R.style.CustomStyle_LightTheme); } else { getActivity().setTheme(R.style.CustomStyle_DarkTheme); } storeRetrieveData = new StoreRetrieveData(getContext(), MainFragment.FILENAME); mToDoItems = MainFragment.getLocallyStoredData(storeRetrieveData); ((AppCompatActivity) getActivity()).setSupportActionBar((Toolbar) view.findViewById(R.id.toolbar)); Intent i = getActivity().getIntent(); UUID id = (UUID) i.getSerializableExtra(TodoNotificationService.TODOUUID); mItem = null; for (ToDoItem toDoItem : mToDoItems) { if (toDoItem.getIdentifier().equals(id)) { mItem = toDoItem; break; } } snoozeOptionsArray = getResources().getStringArray(R.array.snooze_options); mRemoveToDoButton = (Button) view.findViewById(R.id.toDoReminderRemoveButton); mtoDoTextTextView = (TextView) view.findViewById(R.id.toDoReminderTextViewBody); mSnoozeTextView = (TextView) view.findViewById(R.id.reminderViewSnoozeTextView); mSnoozeSpinner = (MaterialSpinner) view.findViewById(R.id.todoReminderSnoozeSpinner); mtoDoTextTextView.setText(mItem.getToDoText()); if (theme.equals(MainFragment.LIGHTTHEME)) { mSnoozeTextView.setTextColor(getResources().getColor(R.color.secondary_text)); } else { mSnoozeTextView.setTextColor(Color.WHITE); mSnoozeTextView.setCompoundDrawablesWithIntrinsicBounds( R.drawable.ic_snooze_white_24dp, 0, 0, 0 ); } mRemoveToDoButton.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { app.send(this, \"Action\", \"Todo Removed from Reminder Activity\"); mToDoItems.remove(mItem); changeOccurred(); saveData(); closeApp(); } }); ArrayAdapter<String> adapter = new ArrayAdapter<>(getContext(), R.layout.spinner_text_view, snoozeOptionsArray); adapter.setDropDownViewResource(R.layout.spinner_dropdown_item); mSnoozeSpinner.setAdapter(adapter); } @Override protected int layoutRes() { return R.layout.fragment_reminder; } private void closeApp() { Intent i = new Intent(getContext(), MainActivity.class); i.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP); SharedPreferences sharedPreferences = getActivity().getSharedPreferences(MainFragment.SHARED_PREF_DATA_SET_CHANGED, MODE_PRIVATE); SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putBoolean(EXIT, true); editor.apply(); startActivity(i); } public boolean onCreateOptionsMenu(Menu menu) { getActivity().getMenuInflater().inflate(R.menu.menu_reminder, menu); return true; } private void changeOccurred() { SharedPreferences sharedPreferences = getActivity().getSharedPreferences(MainFragment.SHARED_PREF_DATA_SET_CHANGED, MODE_PRIVATE); SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putBoolean(MainFragment.CHANGE_OCCURED, true); editor.apply(); } private Date addTimeToDate(int mins) { app.send(this, \"Action\", \"Snoozed\", \"For \" + mins + \" minutes\"); Date date = new Date(); Calendar calendar = Calendar.getInstance(); calendar.setTime(date); calendar.add(Calendar.MINUTE, mins); return calendar.getTime(); } private int valueFromSpinner() { switch (mSnoozeSpinner.getSelectedItemPosition()) { case 0: return 10; case 1: return 30; case 2: return 60; default: return 0; } } @Override public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()) { case R.id.toDoReminderDoneMenuItem: Date date = addTimeToDate(valueFromSpinner()); mItem.setToDoDate(date); mItem.setHasReminder(true); Log.d(\"OskarSchindler\", \"Date Changed to: \" + date); changeOccurred(); saveData(); closeApp(); return true; default: return super.onOptionsItemSelected(item); } } private void saveData() { try { storeRetrieveData.saveToFile(mToDoItems); } catch (JSONException | IOException e) { e.printStackTrace(); } } public static ReminderFragment newInstance() { return new ReminderFragment(); } }","dependencies":[{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Utility/StoreRetrieveData.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.Utility; import android.content.Context; import org.json.JSONArray; import org.json.JSONException; import org.json.JSONObject; import org.json.JSONTokener; import java.io.BufferedReader; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStreamWriter; import java.util.ArrayList; public class StoreRetrieveData { private Context mContext; private String mFileName; public StoreRetrieveData(Context context, String filename) { mContext = context; mFileName = filename; } public static JSONArray toJSONArray(ArrayList<ToDoItem> items) throws JSONException { JSONArray jsonArray = new JSONArray(); for (ToDoItem item : items) { JSONObject jsonObject = item.toJSON(); jsonArray.put(jsonObject); } return jsonArray; } public void saveToFile(ArrayList<ToDoItem> items) throws JSONException, IOException { FileOutputStream fileOutputStream; OutputStreamWriter outputStreamWriter; fileOutputStream = mContext.openFileOutput(mFileName, Context.MODE_PRIVATE); outputStreamWriter = new OutputStreamWriter(fileOutputStream); outputStreamWriter.write(toJSONArray(items).toString()); outputStreamWriter.close(); fileOutputStream.close(); } public ArrayList<ToDoItem> loadFromFile() throws IOException, JSONException { ArrayList<ToDoItem> items = new ArrayList<>(); BufferedReader bufferedReader = null; FileInputStream fileInputStream = null; try { fileInputStream = mContext.openFileInput(mFileName); StringBuilder builder = new StringBuilder(); String line; bufferedReader = new BufferedReader(new InputStreamReader(fileInputStream)); while ((line = bufferedReader.readLine()) != null) { builder.append(line); } JSONArray jsonArray = (JSONArray) new JSONTokener(builder.toString()).nextValue(); for (int i = 0; i < jsonArray.length(); i++) { ToDoItem item = new ToDoItem(jsonArray.getJSONObject(i)); items.add(item); } } catch (FileNotFoundException fnfe) { } finally { if (bufferedReader != null) { bufferedReader.close(); } if (fileInputStream != null) { fileInputStream.close(); } } return items; } }"},{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Utility/ToDoItem.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.Utility; import org.json.JSONException; import org.json.JSONObject; import java.io.Serializable; import java.util.Date; import java.util.UUID; public class ToDoItem implements Serializable { private String mToDoText; private boolean mHasReminder; private String mToDoDescription; private int mTodoColor; private Date mToDoDate; private UUID mTodoIdentifier; private static final String TODODESCRIPTION = \"tododescription\"; private static final String TODOTEXT = \"todotext\"; private static final String TODOREMINDER = \"todoreminder\"; private static final String TODOCOLOR = \"todocolor\"; private static final String TODODATE = \"tododate\"; private static final String TODOIDENTIFIER = \"todoidentifier\"; public ToDoItem(String todoBody,String tododescription, boolean hasReminder, Date toDoDate) { mToDoText = todoBody; mHasReminder = hasReminder; mToDoDate = toDoDate; mToDoDescription = tododescription; mTodoColor = 1677725; mTodoIdentifier = UUID.randomUUID(); } public ToDoItem(JSONObject jsonObject) throws JSONException { mToDoText = jsonObject.getString(TODOTEXT); mToDoDescription = jsonObject.getString(TODODESCRIPTION); mHasReminder = jsonObject.getBoolean(TODOREMINDER); mTodoColor = jsonObject.getInt(TODOCOLOR); mTodoIdentifier = UUID.fromString(jsonObject.getString(TODOIDENTIFIER)); if (jsonObject.has(TODODATE)) { mToDoDate = new Date(jsonObject.getLong(TODODATE)); } } public JSONObject toJSON() throws JSONException { JSONObject jsonObject = new JSONObject(); jsonObject.put(TODOTEXT, mToDoText); jsonObject.put(TODOREMINDER, mHasReminder); jsonObject.put(TODODESCRIPTION, mToDoDescription); if (mToDoDate != null) { jsonObject.put(TODODATE, mToDoDate.getTime()); } jsonObject.put(TODOCOLOR, mTodoColor); jsonObject.put(TODOIDENTIFIER, mTodoIdentifier.toString()); return jsonObject; } public ToDoItem() { this(\"Clean my room\",\"Sweep and Mop my Room\", true, new Date()); } public String getmToDoDescription() { return mToDoDescription;} public void setmToDoDescription(String mToDoDescription){this.mToDoDescription = mToDoDescription;} public String getToDoText() { return mToDoText; } public void setToDoText(String mToDoText) { this.mToDoText = mToDoText; } public boolean hasReminder() { return mHasReminder; } public void setHasReminder(boolean mHasReminder) { this.mHasReminder = mHasReminder; } public Date getToDoDate() { return mToDoDate; } public int getTodoColor() { return mTodoColor; } public void setTodoColor(int mTodoColor) { this.mTodoColor = mTodoColor; } public void setToDoDate(Date mToDoDate) { this.mToDoDate = mToDoDate; } public UUID getIdentifier() { return mTodoIdentifier; } }"}]}}
{"project_id":215,"chunk_id":0,"content":{"main_file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Reminder/ReminderActivity.java","main_file_content":"package com.example.avjindersinghsekhon.minimaltodo.Reminder; import android.os.Bundle; import android.support.annotation.NonNull; import com.example.avjindersinghsekhon.minimaltodo.AppDefault.AppDefaultActivity; import com.example.avjindersinghsekhon.minimaltodo.R; public class ReminderActivity extends AppDefaultActivity { @Override protected void onCreate(final Bundle savedInstanceState) { super.onCreate(savedInstanceState); } @Override protected int contentViewLayoutRes() { return R.layout.reminder_layout; } @NonNull @Override protected ReminderFragment createInitialFragment() { return ReminderFragment.newInstance(); } }","dependencies":[{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/AppDefault/AppDefaultActivity.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.AppDefault; import android.os.Bundle; import android.support.annotation.LayoutRes; import android.support.annotation.NonNull; import android.support.annotation.Nullable; import android.support.v4.app.Fragment; import android.support.v7.app.AppCompatActivity; import com.example.avjindersinghsekhon.minimaltodo.R; public abstract class AppDefaultActivity extends AppCompatActivity { @Override protected void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(contentViewLayoutRes()); setUpInitialFragment(savedInstanceState); } private void setUpInitialFragment(@Nullable Bundle savedInstanceState) { if (savedInstanceState == null) { getSupportFragmentManager() .beginTransaction() .replace(R.id.fragment_container, createInitialFragment()) .commit(); } } @LayoutRes protected abstract int contentViewLayoutRes(); @NonNull protected abstract Fragment createInitialFragment(); }"},{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Reminder/ReminderFragment.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.Reminder; import android.content.Intent; import android.content.SharedPreferences; import android.graphics.Color; import android.os.Bundle; import android.support.annotation.Nullable; import android.support.v7.app.AppCompatActivity; import android.support.v7.widget.Toolbar; import android.util.Log; import android.view.Menu; import android.view.MenuItem; import android.view.View; import android.widget.ArrayAdapter; import android.widget.Button; import android.widget.TextView; import com.example.avjindersinghsekhon.minimaltodo.Analytics.AnalyticsApplication; import com.example.avjindersinghsekhon.minimaltodo.AppDefault.AppDefaultFragment; import com.example.avjindersinghsekhon.minimaltodo.Main.MainActivity; import com.example.avjindersinghsekhon.minimaltodo.Main.MainFragment; import com.example.avjindersinghsekhon.minimaltodo.R; import com.example.avjindersinghsekhon.minimaltodo.Utility.StoreRetrieveData; import com.example.avjindersinghsekhon.minimaltodo.Utility.ToDoItem; import com.example.avjindersinghsekhon.minimaltodo.Utility.TodoNotificationService; import org.json.JSONException; import java.io.IOException; import java.util.ArrayList; import java.util.Calendar; import java.util.Date; import java.util.UUID; import fr.ganfra.materialspinner.MaterialSpinner; import static android.content.Context.MODE_PRIVATE; public class ReminderFragment extends AppDefaultFragment { private TextView mtoDoTextTextView; private Button mRemoveToDoButton; private MaterialSpinner mSnoozeSpinner; private String[] snoozeOptionsArray; private StoreRetrieveData storeRetrieveData; private ArrayList<ToDoItem> mToDoItems; private ToDoItem mItem; public static final String EXIT = \"com.avjindersekhon.exit\"; private TextView mSnoozeTextView; String theme; AnalyticsApplication app; @Override public void onViewCreated(View view, @Nullable Bundle savedInstanceState) { super.onViewCreated(view, savedInstanceState); app = (AnalyticsApplication) getActivity().getApplication(); app.send(this); theme = getActivity().getSharedPreferences(MainFragment.THEME_PREFERENCES, MODE_PRIVATE).getString(MainFragment.THEME_SAVED, MainFragment.LIGHTTHEME); if (theme.equals(MainFragment.LIGHTTHEME)) { getActivity().setTheme(R.style.CustomStyle_LightTheme); } else { getActivity().setTheme(R.style.CustomStyle_DarkTheme); } storeRetrieveData = new StoreRetrieveData(getContext(), MainFragment.FILENAME); mToDoItems = MainFragment.getLocallyStoredData(storeRetrieveData); ((AppCompatActivity) getActivity()).setSupportActionBar((Toolbar) view.findViewById(R.id.toolbar)); Intent i = getActivity().getIntent(); UUID id = (UUID) i.getSerializableExtra(TodoNotificationService.TODOUUID); mItem = null; for (ToDoItem toDoItem : mToDoItems) { if (toDoItem.getIdentifier().equals(id)) { mItem = toDoItem; break; } } snoozeOptionsArray = getResources().getStringArray(R.array.snooze_options); mRemoveToDoButton = (Button) view.findViewById(R.id.toDoReminderRemoveButton); mtoDoTextTextView = (TextView) view.findViewById(R.id.toDoReminderTextViewBody); mSnoozeTextView = (TextView) view.findViewById(R.id.reminderViewSnoozeTextView); mSnoozeSpinner = (MaterialSpinner) view.findViewById(R.id.todoReminderSnoozeSpinner); mtoDoTextTextView.setText(mItem.getToDoText()); if (theme.equals(MainFragment.LIGHTTHEME)) { mSnoozeTextView.setTextColor(getResources().getColor(R.color.secondary_text)); } else { mSnoozeTextView.setTextColor(Color.WHITE); mSnoozeTextView.setCompoundDrawablesWithIntrinsicBounds( R.drawable.ic_snooze_white_24dp, 0, 0, 0 ); } mRemoveToDoButton.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { app.send(this, \"Action\", \"Todo Removed from Reminder Activity\"); mToDoItems.remove(mItem); changeOccurred(); saveData(); closeApp(); } }); ArrayAdapter<String> adapter = new ArrayAdapter<>(getContext(), R.layout.spinner_text_view, snoozeOptionsArray); adapter.setDropDownViewResource(R.layout.spinner_dropdown_item); mSnoozeSpinner.setAdapter(adapter); } @Override protected int layoutRes() { return R.layout.fragment_reminder; } private void closeApp() { Intent i = new Intent(getContext(), MainActivity.class); i.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP); SharedPreferences sharedPreferences = getActivity().getSharedPreferences(MainFragment.SHARED_PREF_DATA_SET_CHANGED, MODE_PRIVATE); SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putBoolean(EXIT, true); editor.apply(); startActivity(i); } public boolean onCreateOptionsMenu(Menu menu) { getActivity().getMenuInflater().inflate(R.menu.menu_reminder, menu); return true; } private void changeOccurred() { SharedPreferences sharedPreferences = getActivity().getSharedPreferences(MainFragment.SHARED_PREF_DATA_SET_CHANGED, MODE_PRIVATE); SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putBoolean(MainFragment.CHANGE_OCCURED, true); editor.apply(); } private Date addTimeToDate(int mins) { app.send(this, \"Action\", \"Snoozed\", \"For \" + mins + \" minutes\"); Date date = new Date(); Calendar calendar = Calendar.getInstance(); calendar.setTime(date); calendar.add(Calendar.MINUTE, mins); return calendar.getTime(); } private int valueFromSpinner() { switch (mSnoozeSpinner.getSelectedItemPosition()) { case 0: return 10; case 1: return 30; case 2: return 60; default: return 0; } } @Override public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()) { case R.id.toDoReminderDoneMenuItem: Date date = addTimeToDate(valueFromSpinner()); mItem.setToDoDate(date); mItem.setHasReminder(true); Log.d(\"OskarSchindler\", \"Date Changed to: \" + date); changeOccurred(); saveData(); closeApp(); return true; default: return super.onOptionsItemSelected(item); } } private void saveData() { try { storeRetrieveData.saveToFile(mToDoItems); } catch (JSONException | IOException e) { e.printStackTrace(); } } public static ReminderFragment newInstance() { return new ReminderFragment(); } }"}]}}
{"project_id":215,"chunk_id":0,"content":{"main_file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/About/AboutActivity.java","main_file_content":"package com.example.avjindersinghsekhon.minimaltodo.About; import android.content.pm.PackageInfo; import android.graphics.Color; import android.graphics.PorterDuff; import android.graphics.drawable.Drawable; import android.os.Bundle; import android.support.annotation.NonNull; import android.support.v4.app.Fragment; import android.support.v4.app.NavUtils; import android.support.v7.widget.Toolbar; import android.util.Log; import android.view.MenuItem; import android.widget.TextView; import com.example.avjindersinghsekhon.minimaltodo.Analytics.AnalyticsApplication; import com.example.avjindersinghsekhon.minimaltodo.AppDefault.AppDefaultActivity; import com.example.avjindersinghsekhon.minimaltodo.Main.MainFragment; import com.example.avjindersinghsekhon.minimaltodo.R; public class AboutActivity extends AppDefaultActivity { private TextView mVersionTextView; private String appVersion = \"0.1\"; private Toolbar toolbar; private TextView contactMe; String theme; private AnalyticsApplication app; @Override protected void onCreate(Bundle savedInstanceState) { theme = getSharedPreferences(MainFragment.THEME_PREFERENCES, MODE_PRIVATE).getString(MainFragment.THEME_SAVED, MainFragment.LIGHTTHEME); if (theme.equals(MainFragment.DARKTHEME)) { Log.d(\"OskarSchindler\", \"One\"); setTheme(R.style.CustomStyle_DarkTheme); } else { Log.d(\"OskarSchindler\", \"One\"); setTheme(R.style.CustomStyle_LightTheme); } super.onCreate(savedInstanceState); final Drawable backArrow = getResources().getDrawable(R.drawable.abc_ic_ab_back_mtrl_am_alpha); if (backArrow != null) { backArrow.setColorFilter(Color.WHITE, PorterDuff.Mode.SRC_ATOP); } try { PackageInfo info = getPackageManager().getPackageInfo(getPackageName(), 0); appVersion = info.versionName; } catch (Exception e) { e.printStackTrace(); } toolbar = (Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar); if (getSupportActionBar() != null) { getSupportActionBar().setDisplayHomeAsUpEnabled(true); getSupportActionBar().setHomeAsUpIndicator(backArrow); } } @Override protected int contentViewLayoutRes() { return R.layout.about_layout; } @NonNull protected Fragment createInitialFragment() { return AboutFragment.newInstance(); } @Override public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()) { case android.R.id.home: if (NavUtils.getParentActivityName(this) != null) { NavUtils.navigateUpFromSameTask(this); } return true; default: return super.onOptionsItemSelected(item); } } }","dependencies":[{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/About/AboutFragment.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.About; import android.os.Bundle; import android.support.annotation.LayoutRes; import android.support.annotation.Nullable; import android.support.v7.widget.Toolbar; import android.view.View; import android.widget.TextView; import com.example.avjindersinghsekhon.minimaltodo.Analytics.AnalyticsApplication; import com.example.avjindersinghsekhon.minimaltodo.AppDefault.AppDefaultFragment; import com.example.avjindersinghsekhon.minimaltodo.R; public class AboutFragment extends AppDefaultFragment { private TextView mVersionTextView; private String appVersion = \"0.1\"; private Toolbar toolbar; private TextView contactMe; private AnalyticsApplication app; @Override public void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); } @Override public void onViewCreated(View view, @Nullable Bundle savedInstanceState) { super.onViewCreated(view, savedInstanceState); app = (AnalyticsApplication) getActivity().getApplication(); app.send(this); mVersionTextView = (TextView) view.findViewById(R.id.aboutVersionTextView); mVersionTextView.setText(String.format(getResources().getString(R.string.app_version), appVersion)); toolbar = (Toolbar) view.findViewById(R.id.toolbar); contactMe = (TextView) view.findViewById(R.id.aboutContactMe); contactMe.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { app.send(this, \"Action\", \"Feedback\"); } }); } @LayoutRes protected int layoutRes() { return R.layout.fragment_about; } public static AboutFragment newInstance() { return new AboutFragment(); } }"},{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Analytics/AnalyticsApplication.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.Analytics; import android.app.Application; import android.content.pm.PackageManager; import com.example.avjindersinghsekhon.minimaltodo.R; import com.google.android.gms.analytics.GoogleAnalytics; import com.google.android.gms.analytics.HitBuilders; import com.google.android.gms.analytics.Tracker; import java.util.Map; public class AnalyticsApplication extends Application { private Tracker mTracker; private static final boolean IS_ENABLED = true; synchronized private Tracker getDefaultTracker() { if (mTracker == null) { GoogleAnalytics analytics = GoogleAnalytics.getInstance(this); mTracker = analytics.newTracker(R.xml.global_tracker); mTracker.setAppName(\"Minimal\"); mTracker.enableExceptionReporting(true); try { mTracker.setAppId(getPackageManager().getPackageInfo(getPackageName(), 0).versionName); } catch (PackageManager.NameNotFoundException e) { e.printStackTrace(); } } return mTracker; } public void send(Object screenName) { send(screenName, new HitBuilders.ScreenViewBuilder().build()); } private void send(Object screenName, Map<String, String> params) { if (IS_ENABLED) { Tracker tracker = getDefaultTracker(); tracker.setScreenName(getClassName(screenName)); tracker.send(params); } } private String getClassName(Object o) { Class c = o.getClass(); while (c.isAnonymousClass()) { c = c.getEnclosingClass(); } return c.getSimpleName(); } public void send(Object screenName, String category, String action) { send(screenName, new HitBuilders.EventBuilder().setCategory(category).setAction(action).build()); } public void send(Object screenName, String category, String action, String label) { send(screenName, new HitBuilders.EventBuilder().setCategory(category).setAction(action).setLabel(label).build()); } }"},{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/AppDefault/AppDefaultActivity.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.AppDefault; import android.os.Bundle; import android.support.annotation.LayoutRes; import android.support.annotation.NonNull; import android.support.annotation.Nullable; import android.support.v4.app.Fragment; import android.support.v7.app.AppCompatActivity; import com.example.avjindersinghsekhon.minimaltodo.R; public abstract class AppDefaultActivity extends AppCompatActivity { @Override protected void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(contentViewLayoutRes()); setUpInitialFragment(savedInstanceState); } private void setUpInitialFragment(@Nullable Bundle savedInstanceState) { if (savedInstanceState == null) { getSupportFragmentManager() .beginTransaction() .replace(R.id.fragment_container, createInitialFragment()) .commit(); } } @LayoutRes protected abstract int contentViewLayoutRes(); @NonNull protected abstract Fragment createInitialFragment(); }"}]}}
{"project_id":215,"chunk_id":0,"content":{"main_file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/About/AboutFragment.java","main_file_content":"package com.example.avjindersinghsekhon.minimaltodo.About; import android.os.Bundle; import android.support.annotation.LayoutRes; import android.support.annotation.Nullable; import android.support.v7.widget.Toolbar; import android.view.View; import android.widget.TextView; import com.example.avjindersinghsekhon.minimaltodo.Analytics.AnalyticsApplication; import com.example.avjindersinghsekhon.minimaltodo.AppDefault.AppDefaultFragment; import com.example.avjindersinghsekhon.minimaltodo.R; public class AboutFragment extends AppDefaultFragment { private TextView mVersionTextView; private String appVersion = \"0.1\"; private Toolbar toolbar; private TextView contactMe; private AnalyticsApplication app; @Override public void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); } @Override public void onViewCreated(View view, @Nullable Bundle savedInstanceState) { super.onViewCreated(view, savedInstanceState); app = (AnalyticsApplication) getActivity().getApplication(); app.send(this); mVersionTextView = (TextView) view.findViewById(R.id.aboutVersionTextView); mVersionTextView.setText(String.format(getResources().getString(R.string.app_version), appVersion)); toolbar = (Toolbar) view.findViewById(R.id.toolbar); contactMe = (TextView) view.findViewById(R.id.aboutContactMe); contactMe.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { app.send(this, \"Action\", \"Feedback\"); } }); } @LayoutRes protected int layoutRes() { return R.layout.fragment_about; } public static AboutFragment newInstance() { return new AboutFragment(); } }","dependencies":[{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Analytics/AnalyticsApplication.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.Analytics; import android.app.Application; import android.content.pm.PackageManager; import com.example.avjindersinghsekhon.minimaltodo.R; import com.google.android.gms.analytics.GoogleAnalytics; import com.google.android.gms.analytics.HitBuilders; import com.google.android.gms.analytics.Tracker; import java.util.Map; public class AnalyticsApplication extends Application { private Tracker mTracker; private static final boolean IS_ENABLED = true; synchronized private Tracker getDefaultTracker() { if (mTracker == null) { GoogleAnalytics analytics = GoogleAnalytics.getInstance(this); mTracker = analytics.newTracker(R.xml.global_tracker); mTracker.setAppName(\"Minimal\"); mTracker.enableExceptionReporting(true); try { mTracker.setAppId(getPackageManager().getPackageInfo(getPackageName(), 0).versionName); } catch (PackageManager.NameNotFoundException e) { e.printStackTrace(); } } return mTracker; } public void send(Object screenName) { send(screenName, new HitBuilders.ScreenViewBuilder().build()); } private void send(Object screenName, Map<String, String> params) { if (IS_ENABLED) { Tracker tracker = getDefaultTracker(); tracker.setScreenName(getClassName(screenName)); tracker.send(params); } } private String getClassName(Object o) { Class c = o.getClass(); while (c.isAnonymousClass()) { c = c.getEnclosingClass(); } return c.getSimpleName(); } public void send(Object screenName, String category, String action) { send(screenName, new HitBuilders.EventBuilder().setCategory(category).setAction(action).build()); } public void send(Object screenName, String category, String action, String label) { send(screenName, new HitBuilders.EventBuilder().setCategory(category).setAction(action).setLabel(label).build()); } }"},{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/AppDefault/AppDefaultFragment.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.AppDefault; import android.os.Bundle; import android.support.annotation.LayoutRes; import android.support.annotation.Nullable; import android.support.v4.app.Fragment; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; public abstract class AppDefaultFragment extends Fragment { @Nullable @Override public View onCreateView( LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState ) { return inflater.inflate(layoutRes(), container, false); } @Override public void onDestroy() { super.onDestroy(); } @LayoutRes protected abstract int layoutRes(); }"}]}}
{"project_id":215,"chunk_id":0,"content":{"main_file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/AddToDo/AddToDoFragment.java","main_file_content":"package com.example.avjindersinghsekhon.minimaltodo.AddToDo; import android.animation.Animator; import android.content.ClipData; import android.content.ClipboardManager; import android.content.Context; import android.content.Intent; import android.graphics.Color; import android.graphics.PorterDuff; import android.graphics.drawable.Drawable; import android.os.Bundle; import android.support.annotation.Nullable; import android.support.design.widget.FloatingActionButton; import android.support.v4.app.NavUtils; import android.support.v7.app.AppCompatActivity; import android.support.v7.widget.SwitchCompat; import android.support.v7.widget.Toolbar; import android.text.Editable; import android.text.TextWatcher; import android.text.format.DateFormat; import android.util.Log; import android.view.MenuItem; import android.view.View; import android.view.inputmethod.InputMethodManager; import android.widget.Button; import android.widget.CompoundButton; import android.widget.EditText; import android.widget.ImageButton; import android.widget.LinearLayout; import android.widget.TextView; import android.content.ClipboardManager; import android.widget.Toast; import com.example.avjindersinghsekhon.minimaltodo.Analytics.AnalyticsApplication; import com.example.avjindersinghsekhon.minimaltodo.AppDefault.AppDefaultFragment; import com.example.avjindersinghsekhon.minimaltodo.Main.MainActivity; import com.example.avjindersinghsekhon.minimaltodo.Main.MainFragment; import com.example.avjindersinghsekhon.minimaltodo.R; import com.example.avjindersinghsekhon.minimaltodo.Utility.ToDoItem; import com.wdullaer.materialdatetimepicker.date.DatePickerDialog; import com.wdullaer.materialdatetimepicker.time.RadialPickerLayout; import com.wdullaer.materialdatetimepicker.time.TimePickerDialog; import java.text.SimpleDateFormat; import java.util.Calendar; import java.util.Date; import static android.app.Activity.RESULT_CANCELED; import static android.app.Activity.RESULT_OK; import static android.content.Context.INPUT_METHOD_SERVICE; import static android.content.Context.MODE_PRIVATE; public class AddToDoFragment extends AppDefaultFragment implements DatePickerDialog.OnDateSetListener, TimePickerDialog.OnTimeSetListener { private static final String TAG = \"AddToDoFragment\"; private Date mLastEdited; private EditText mToDoTextBodyEditText; private EditText mToDoTextBodyDescription; private SwitchCompat mToDoDateSwitch; private LinearLayout mUserDateSpinnerContainingLinearLayout; private TextView mReminderTextView; private String CombinationText; private EditText mDateEditText; private EditText mTimeEditText; private String mDefaultTimeOptions12H[]; private String mDefaultTimeOptions24H[]; private Button mChooseDateButton; private Button mChooseTimeButton; private Button mCopyClipboard; private ToDoItem mUserToDoItem; private FloatingActionButton mToDoSendFloatingActionButton; public static final String DATE_FORMAT = \"MMM d, yyyy\"; public static final String DATE_FORMAT_MONTH_DAY = \"MMM d\"; public static final String DATE_FORMAT_TIME = \"H:m\"; private String mUserEnteredText; private String mUserEnteredDescription; private boolean mUserHasReminder; private Toolbar mToolbar; private Date mUserReminderDate; private int mUserColor; private boolean setDateButtonClickedOnce = false; private boolean setTimeButtonClickedOnce = false; private LinearLayout mContainerLayout; private String theme; AnalyticsApplication app; @Override public void onViewCreated(View view, @Nullable Bundle savedInstanceState) { super.onViewCreated(view, savedInstanceState); app = (AnalyticsApplication) getActivity().getApplication(); ImageButton reminderIconImageButton; TextView reminderRemindMeTextView; theme = getActivity().getSharedPreferences(MainFragment.THEME_PREFERENCES, MODE_PRIVATE).getString(MainFragment.THEME_SAVED, MainFragment.LIGHTTHEME); if (theme.equals(MainFragment.LIGHTTHEME)) { getActivity().setTheme(R.style.CustomStyle_LightTheme); Log.d(\"OskarSchindler\", \"Light Theme\"); } else { getActivity().setTheme(R.style.CustomStyle_DarkTheme); } final Drawable cross = getResources().getDrawable(R.drawable.ic_clear_white_24dp); if (cross != null) { cross.setColorFilter(getResources().getColor(R.color.icons), PorterDuff.Mode.SRC_ATOP); } mToolbar = (Toolbar) view.findViewById(R.id.toolbar); ((AppCompatActivity) getActivity()).setSupportActionBar(mToolbar); if (((AppCompatActivity) getActivity()).getSupportActionBar() != null) { ((AppCompatActivity) getActivity()).getSupportActionBar().setElevation(0); ((AppCompatActivity) getActivity()).getSupportActionBar().setDisplayShowTitleEnabled(false); ((AppCompatActivity) getActivity()).getSupportActionBar().setDisplayHomeAsUpEnabled(true); ((AppCompatActivity) getActivity()).getSupportActionBar().setHomeAsUpIndicator(cross); } mUserToDoItem = (ToDoItem) getActivity().getIntent().getSerializableExtra(MainFragment.TODOITEM); mUserEnteredText = mUserToDoItem.getToDoText(); mUserEnteredDescription = mUserToDoItem.getmToDoDescription(); mUserHasReminder = mUserToDoItem.hasReminder(); mUserReminderDate = mUserToDoItem.getToDoDate(); mUserColor = mUserToDoItem.getTodoColor(); reminderIconImageButton = (ImageButton) view.findViewById(R.id.userToDoReminderIconImageButton); reminderRemindMeTextView = (TextView) view.findViewById(R.id.userToDoRemindMeTextView); if (theme.equals(MainFragment.DARKTHEME)) { reminderIconImageButton.setImageDrawable(getResources().getDrawable(R.drawable.ic_alarm_add_white_24dp)); reminderRemindMeTextView.setTextColor(Color.WHITE); } mCopyClipboard = (Button) view.findViewById(R.id.copyclipboard); mContainerLayout = (LinearLayout) view.findViewById(R.id.todoReminderAndDateContainerLayout); mUserDateSpinnerContainingLinearLayout = (LinearLayout) view.findViewById(R.id.toDoEnterDateLinearLayout); mToDoTextBodyEditText = (EditText) view.findViewById(R.id.userToDoEditText); mToDoTextBodyDescription= (EditText) view.findViewById(R.id.userToDoDescription); mToDoDateSwitch = (SwitchCompat) view.findViewById(R.id.toDoHasDateSwitchCompat); mToDoSendFloatingActionButton = (FloatingActionButton) view.findViewById(R.id.makeToDoFloatingActionButton); mReminderTextView = (TextView) view.findViewById(R.id.newToDoDateTimeReminderTextView); mCopyClipboard.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { String toDoTextContainer = mToDoTextBodyEditText.getText().toString(); String toDoTextBodyDescriptionContainer = mToDoTextBodyDescription.getText().toString(); ClipboardManager clipboard = (ClipboardManager) getActivity().getSystemService(Context.CLIPBOARD_SERVICE); CombinationText = \"Title : \" + toDoTextContainer + \"\\nDescription : \" + toDoTextBodyDescriptionContainer + \"\\n -Copied From MinimalToDo\"; ClipData clip = ClipData.newPlainText(\"text\", CombinationText); clipboard.setPrimaryClip(clip); Toast.makeText(getContext(), \"Copied To Clipboard!\", Toast.LENGTH_SHORT).show(); } }); mContainerLayout.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { hideKeyboard(mToDoTextBodyEditText); hideKeyboard(mToDoTextBodyDescription); } }); if (mUserHasReminder && (mUserReminderDate != null)) { setReminderTextView(); setEnterDateLayoutVisibleWithAnimations(true); } if (mUserReminderDate == null) { mToDoDateSwitch.setChecked(false); mReminderTextView.setVisibility(View.INVISIBLE); } mToDoTextBodyEditText.requestFocus(); mToDoTextBodyEditText.setText(mUserEnteredText); mToDoTextBodyDescription.setText(mUserEnteredDescription); InputMethodManager imm = (InputMethodManager) this.getActivity().getSystemService(INPUT_METHOD_SERVICE); imm.toggleSoftInput(InputMethodManager.SHOW_FORCED, InputMethodManager.HIDE_IMPLICIT_ONLY); mToDoTextBodyEditText.setSelection(mToDoTextBodyEditText.length()); mToDoTextBodyEditText.addTextChangedListener(new TextWatcher() { @Override public void beforeTextChanged(CharSequence s, int start, int count, int after) { } @Override public void onTextChanged(CharSequence s, int start, int before, int count) { mUserEnteredText = s.toString(); } @Override public void afterTextChanged(Editable s) { } }); mToDoTextBodyDescription.setText(mUserEnteredDescription); mToDoTextBodyDescription.setSelection(mToDoTextBodyDescription.length()); mToDoTextBodyDescription.addTextChangedListener(new TextWatcher() { @Override public void beforeTextChanged(CharSequence s, int start, int count, int after) { } @Override public void onTextChanged(CharSequence s, int start, int before, int count) { mUserEnteredDescription = s.toString(); } @Override public void afterTextChanged(Editable s) { } }); setEnterDateLayoutVisible(mToDoDateSwitch.isChecked()); mToDoDateSwitch.setChecked(mUserHasReminder && (mUserReminderDate != null)); mToDoDateSwitch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() { @Override public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) { if (isChecked) { app.send(this, \"Action\", \"Reminder Set\"); } else { app.send(this, \"Action\", \"Reminder Removed\"); } if (!isChecked) { mUserReminderDate = null; } mUserHasReminder = isChecked; setDateAndTimeEditText(); setEnterDateLayoutVisibleWithAnimations(isChecked); hideKeyboard(mToDoTextBodyEditText); hideKeyboard(mToDoTextBodyDescription); } }); mToDoSendFloatingActionButton.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { if (mToDoTextBodyEditText.length() <= 0) { mToDoTextBodyEditText.setError(getString(R.string.todo_error)); } else if (mUserReminderDate != null && mUserReminderDate.before(new Date())) { app.send(this, \"Action\", \"Date in the Past\"); makeResult(RESULT_CANCELED); } else { app.send(this, \"Action\", \"Make Todo\"); makeResult(RESULT_OK); getActivity().finish(); } hideKeyboard(mToDoTextBodyEditText); hideKeyboard(mToDoTextBodyDescription); } }); mDateEditText = (EditText) view.findViewById(R.id.newTodoDateEditText); mTimeEditText = (EditText) view.findViewById(R.id.newTodoTimeEditText); mDateEditText.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { Date date; hideKeyboard(mToDoTextBodyEditText); if (mUserToDoItem.getToDoDate() != null) { date = mUserReminderDate; } else { date = new Date(); } Calendar calendar = Calendar.getInstance(); calendar.setTime(date); int year = calendar.get(Calendar.YEAR); int month = calendar.get(Calendar.MONTH); int day = calendar.get(Calendar.DAY_OF_MONTH); DatePickerDialog datePickerDialog = DatePickerDialog.newInstance(AddToDoFragment.this, year, month, day); if (theme.equals(MainFragment.DARKTHEME)) { datePickerDialog.setThemeDark(true); } datePickerDialog.show(getActivity().getFragmentManager(), \"DateFragment\"); } }); mTimeEditText.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { Date date; hideKeyboard(mToDoTextBodyEditText); if (mUserToDoItem.getToDoDate() != null) { date = mUserReminderDate; } else { date = new Date(); } Calendar calendar = Calendar.getInstance(); calendar.setTime(date); int hour = calendar.get(Calendar.HOUR_OF_DAY); int minute = calendar.get(Calendar.MINUTE); TimePickerDialog timePickerDialog = TimePickerDialog.newInstance(AddToDoFragment.this, hour, minute, DateFormat.is24HourFormat(getContext())); if (theme.equals(MainFragment.DARKTHEME)) { timePickerDialog.setThemeDark(true); } timePickerDialog.show(getActivity().getFragmentManager(), \"TimeFragment\"); } }); setDateAndTimeEditText(); } private void setDateAndTimeEditText() { if (mUserToDoItem.hasReminder() && mUserReminderDate != null) { String userDate = formatDate(\"d MMM, yyyy\", mUserReminderDate); String formatToUse; if (DateFormat.is24HourFormat(getContext())) { formatToUse = \"k:mm\"; } else { formatToUse = \"h:mm a\"; } String userTime = formatDate(formatToUse, mUserReminderDate); mTimeEditText.setText(userTime); mDateEditText.setText(userDate); } else { mDateEditText.setText(getString(R.string.date_reminder_default)); boolean time24 = DateFormat.is24HourFormat(getContext()); Calendar cal = Calendar.getInstance(); if (time24) { cal.set(Calendar.HOUR_OF_DAY, cal.get(Calendar.HOUR_OF_DAY) + 1); } else { cal.set(Calendar.HOUR, cal.get(Calendar.HOUR) + 1); } cal.set(Calendar.MINUTE, 0); mUserReminderDate = cal.getTime(); Log.d(\"OskarSchindler\", \"Imagined Date: \" + mUserReminderDate); String timeString; if (time24) { timeString = formatDate(\"k:mm\", mUserReminderDate); } else { timeString = formatDate(\"h:mm a\", mUserReminderDate); } mTimeEditText.setText(timeString); } } private String getThemeSet() { return getActivity().getSharedPreferences(MainFragment.THEME_PREFERENCES, MODE_PRIVATE).getString(MainFragment.THEME_SAVED, MainFragment.LIGHTTHEME); } public void hideKeyboard(EditText et) { InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(INPUT_METHOD_SERVICE); imm.hideSoftInputFromWindow(et.getWindowToken(), 0); } public void setDate(int year, int month, int day) { Calendar calendar = Calendar.getInstance(); int hour, minute; Calendar reminderCalendar = Calendar.getInstance(); reminderCalendar.set(year, month, day); if (reminderCalendar.before(calendar)) { return; } if (mUserReminderDate != null) { calendar.setTime(mUserReminderDate); } if (DateFormat.is24HourFormat(getContext())) { hour = calendar.get(Calendar.HOUR_OF_DAY); } else { hour = calendar.get(Calendar.HOUR); } minute = calendar.get(Calendar.MINUTE); calendar.set(year, month, day, hour, minute); mUserReminderDate = calendar.getTime(); setReminderTextView(); setDateEditText(); } public void setTime(int hour, int minute) { Calendar calendar = Calendar.getInstance(); if (mUserReminderDate != null) { calendar.setTime(mUserReminderDate); } int year = calendar.get(Calendar.YEAR); int month = calendar.get(Calendar.MONTH); int day = calendar.get(Calendar.DAY_OF_MONTH); Log.d(\"OskarSchindler\", \"Time set: \" + hour); calendar.set(year, month, day, hour, minute, 0); mUserReminderDate = calendar.getTime(); setReminderTextView(); setTimeEditText(); } public void setDateEditText() { String dateFormat = \"d MMM, yyyy\"; mDateEditText.setText(formatDate(dateFormat, mUserReminderDate)); } public void setTimeEditText() { String dateFormat; if (DateFormat.is24HourFormat(getContext())) { dateFormat = \"k:mm\"; } else { dateFormat = \"h:mm a\"; } mTimeEditText.setText(formatDate(dateFormat, mUserReminderDate)); } public void setReminderTextView() { if (mUserReminderDate != null) { mReminderTextView.setVisibility(View.VISIBLE); if (mUserReminderDate.before(new Date())) { Log.d(\"OskarSchindler\", \"DATE is \" + mUserReminderDate); mReminderTextView.setText(getString(R.string.date_error_check_again)); mReminderTextView.setTextColor(Color.RED); return; } Date date = mUserReminderDate; String dateString = formatDate(\"d MMM, yyyy\", date); String timeString; String amPmString = \"\"; if (DateFormat.is24HourFormat(getContext())) { timeString = formatDate(\"k:mm\", date); } else { timeString = formatDate(\"h:mm\", date); amPmString = formatDate(\"a\", date); } String finalString = String.format(getResources().getString(R.string.remind_date_and_time), dateString, timeString, amPmString); mReminderTextView.setTextColor(getResources().getColor(R.color.secondary_text)); mReminderTextView.setText(finalString); } else { mReminderTextView.setVisibility(View.INVISIBLE); } } public void makeResult(int result) { Log.d(TAG, \"makeResult - ok : in\"); Intent i = new Intent(); if (mUserEnteredText.length() > 0) { String capitalizedString = Character.toUpperCase(mUserEnteredText.charAt(0)) + mUserEnteredText.substring(1); mUserToDoItem.setToDoText(capitalizedString); Log.d(TAG, \"Description: \" + mUserEnteredDescription); mUserToDoItem.setmToDoDescription(mUserEnteredDescription); } else { mUserToDoItem.setToDoText(mUserEnteredText); Log.d(TAG, \"Description: \" + mUserEnteredDescription); mUserToDoItem.setmToDoDescription(mUserEnteredDescription); } if (mUserReminderDate != null) { Calendar calendar = Calendar.getInstance(); calendar.setTime(mUserReminderDate); calendar.set(Calendar.SECOND, 0); mUserReminderDate = calendar.getTime(); } mUserToDoItem.setHasReminder(mUserHasReminder); mUserToDoItem.setToDoDate(mUserReminderDate); mUserToDoItem.setTodoColor(mUserColor); i.putExtra(MainFragment.TODOITEM, mUserToDoItem); getActivity().setResult(result, i); } @Override public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()) { case android.R.id.home: if (NavUtils.getParentActivityName(getActivity()) != null) { app.send(this, \"Action\", \"Discard Todo\"); makeResult(RESULT_CANCELED); NavUtils.navigateUpFromSameTask(getActivity()); } hideKeyboard(mToDoTextBodyEditText); return true; default: return super.onOptionsItemSelected(item); } } public static String formatDate(String formatString, Date dateToFormat) { SimpleDateFormat simpleDateFormat = new SimpleDateFormat(formatString); return simpleDateFormat.format(dateToFormat); } @Override public void onTimeSet(RadialPickerLayout radialPickerLayout, int hour, int minute) { setTime(hour, minute); } @Override public void onDateSet(DatePickerDialog datePickerDialog, int year, int month, int day) { setDate(year, month, day); } public void setEnterDateLayoutVisible(boolean checked) { if (checked) { mUserDateSpinnerContainingLinearLayout.setVisibility(View.VISIBLE); } else { mUserDateSpinnerContainingLinearLayout.setVisibility(View.INVISIBLE); } } public void setEnterDateLayoutVisibleWithAnimations(boolean checked) { if (checked) { setReminderTextView(); mUserDateSpinnerContainingLinearLayout.animate().alpha(1.0f).setDuration(500).setListener( new Animator.AnimatorListener() { @Override public void onAnimationStart(Animator animation) { mUserDateSpinnerContainingLinearLayout.setVisibility(View.VISIBLE); } @Override public void onAnimationEnd(Animator animation) { } @Override public void onAnimationCancel(Animator animation) { } @Override public void onAnimationRepeat(Animator animation) { } } ); } else { mUserDateSpinnerContainingLinearLayout.animate().alpha(0.0f).setDuration(500).setListener( new Animator.AnimatorListener() { @Override public void onAnimationStart(Animator animation) { } @Override public void onAnimationEnd(Animator animation) { mUserDateSpinnerContainingLinearLayout.setVisibility(View.INVISIBLE); } @Override public void onAnimationCancel(Animator animation) { } @Override public void onAnimationRepeat(Animator animation) { } } ); } } @Override protected int layoutRes() { return R.layout.fragment_add_to_do; } public static AddToDoFragment newInstance() { return new AddToDoFragment(); } }","dependencies":[{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Analytics/AnalyticsApplication.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.Analytics; import android.app.Application; import android.content.pm.PackageManager; import com.example.avjindersinghsekhon.minimaltodo.R; import com.google.android.gms.analytics.GoogleAnalytics; import com.google.android.gms.analytics.HitBuilders; import com.google.android.gms.analytics.Tracker; import java.util.Map; public class AnalyticsApplication extends Application { private Tracker mTracker; private static final boolean IS_ENABLED = true; synchronized private Tracker getDefaultTracker() { if (mTracker == null) { GoogleAnalytics analytics = GoogleAnalytics.getInstance(this); mTracker = analytics.newTracker(R.xml.global_tracker); mTracker.setAppName(\"Minimal\"); mTracker.enableExceptionReporting(true); try { mTracker.setAppId(getPackageManager().getPackageInfo(getPackageName(), 0).versionName); } catch (PackageManager.NameNotFoundException e) { e.printStackTrace(); } } return mTracker; } public void send(Object screenName) { send(screenName, new HitBuilders.ScreenViewBuilder().build()); } private void send(Object screenName, Map<String, String> params) { if (IS_ENABLED) { Tracker tracker = getDefaultTracker(); tracker.setScreenName(getClassName(screenName)); tracker.send(params); } } private String getClassName(Object o) { Class c = o.getClass(); while (c.isAnonymousClass()) { c = c.getEnclosingClass(); } return c.getSimpleName(); } public void send(Object screenName, String category, String action) { send(screenName, new HitBuilders.EventBuilder().setCategory(category).setAction(action).build()); } public void send(Object screenName, String category, String action, String label) { send(screenName, new HitBuilders.EventBuilder().setCategory(category).setAction(action).setLabel(label).build()); } }"},{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/AppDefault/AppDefaultFragment.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.AppDefault; import android.os.Bundle; import android.support.annotation.LayoutRes; import android.support.annotation.Nullable; import android.support.v4.app.Fragment; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; public abstract class AppDefaultFragment extends Fragment { @Nullable @Override public View onCreateView( LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState ) { return inflater.inflate(layoutRes(), container, false); } @Override public void onDestroy() { super.onDestroy(); } @LayoutRes protected abstract int layoutRes(); }"}]}}
{"project_id":215,"chunk_id":1,"content":{"main_file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/AddToDo/AddToDoFragment.java","main_file_content":"package com.example.avjindersinghsekhon.minimaltodo.AddToDo; import android.animation.Animator; import android.content.ClipData; import android.content.ClipboardManager; import android.content.Context; import android.content.Intent; import android.graphics.Color; import android.graphics.PorterDuff; import android.graphics.drawable.Drawable; import android.os.Bundle; import android.support.annotation.Nullable; import android.support.design.widget.FloatingActionButton; import android.support.v4.app.NavUtils; import android.support.v7.app.AppCompatActivity; import android.support.v7.widget.SwitchCompat; import android.support.v7.widget.Toolbar; import android.text.Editable; import android.text.TextWatcher; import android.text.format.DateFormat; import android.util.Log; import android.view.MenuItem; import android.view.View; import android.view.inputmethod.InputMethodManager; import android.widget.Button; import android.widget.CompoundButton; import android.widget.EditText; import android.widget.ImageButton; import android.widget.LinearLayout; import android.widget.TextView; import android.content.ClipboardManager; import android.widget.Toast; import com.example.avjindersinghsekhon.minimaltodo.Analytics.AnalyticsApplication; import com.example.avjindersinghsekhon.minimaltodo.AppDefault.AppDefaultFragment; import com.example.avjindersinghsekhon.minimaltodo.Main.MainActivity; import com.example.avjindersinghsekhon.minimaltodo.Main.MainFragment; import com.example.avjindersinghsekhon.minimaltodo.R; import com.example.avjindersinghsekhon.minimaltodo.Utility.ToDoItem; import com.wdullaer.materialdatetimepicker.date.DatePickerDialog; import com.wdullaer.materialdatetimepicker.time.RadialPickerLayout; import com.wdullaer.materialdatetimepicker.time.TimePickerDialog; import java.text.SimpleDateFormat; import java.util.Calendar; import java.util.Date; import static android.app.Activity.RESULT_CANCELED; import static android.app.Activity.RESULT_OK; import static android.content.Context.INPUT_METHOD_SERVICE; import static android.content.Context.MODE_PRIVATE; public class AddToDoFragment extends AppDefaultFragment implements DatePickerDialog.OnDateSetListener, TimePickerDialog.OnTimeSetListener { private static final String TAG = \"AddToDoFragment\"; private Date mLastEdited; private EditText mToDoTextBodyEditText; private EditText mToDoTextBodyDescription; private SwitchCompat mToDoDateSwitch; private LinearLayout mUserDateSpinnerContainingLinearLayout; private TextView mReminderTextView; private String CombinationText; private EditText mDateEditText; private EditText mTimeEditText; private String mDefaultTimeOptions12H[]; private String mDefaultTimeOptions24H[]; private Button mChooseDateButton; private Button mChooseTimeButton; private Button mCopyClipboard; private ToDoItem mUserToDoItem; private FloatingActionButton mToDoSendFloatingActionButton; public static final String DATE_FORMAT = \"MMM d, yyyy\"; public static final String DATE_FORMAT_MONTH_DAY = \"MMM d\"; public static final String DATE_FORMAT_TIME = \"H:m\"; private String mUserEnteredText; private String mUserEnteredDescription; private boolean mUserHasReminder; private Toolbar mToolbar; private Date mUserReminderDate; private int mUserColor; private boolean setDateButtonClickedOnce = false; private boolean setTimeButtonClickedOnce = false; private LinearLayout mContainerLayout; private String theme; AnalyticsApplication app; @Override public void onViewCreated(View view, @Nullable Bundle savedInstanceState) { super.onViewCreated(view, savedInstanceState); app = (AnalyticsApplication) getActivity().getApplication(); ImageButton reminderIconImageButton; TextView reminderRemindMeTextView; theme = getActivity().getSharedPreferences(MainFragment.THEME_PREFERENCES, MODE_PRIVATE).getString(MainFragment.THEME_SAVED, MainFragment.LIGHTTHEME); if (theme.equals(MainFragment.LIGHTTHEME)) { getActivity().setTheme(R.style.CustomStyle_LightTheme); Log.d(\"OskarSchindler\", \"Light Theme\"); } else { getActivity().setTheme(R.style.CustomStyle_DarkTheme); } final Drawable cross = getResources().getDrawable(R.drawable.ic_clear_white_24dp); if (cross != null) { cross.setColorFilter(getResources().getColor(R.color.icons), PorterDuff.Mode.SRC_ATOP); } mToolbar = (Toolbar) view.findViewById(R.id.toolbar); ((AppCompatActivity) getActivity()).setSupportActionBar(mToolbar); if (((AppCompatActivity) getActivity()).getSupportActionBar() != null) { ((AppCompatActivity) getActivity()).getSupportActionBar().setElevation(0); ((AppCompatActivity) getActivity()).getSupportActionBar().setDisplayShowTitleEnabled(false); ((AppCompatActivity) getActivity()).getSupportActionBar().setDisplayHomeAsUpEnabled(true); ((AppCompatActivity) getActivity()).getSupportActionBar().setHomeAsUpIndicator(cross); } mUserToDoItem = (ToDoItem) getActivity().getIntent().getSerializableExtra(MainFragment.TODOITEM); mUserEnteredText = mUserToDoItem.getToDoText(); mUserEnteredDescription = mUserToDoItem.getmToDoDescription(); mUserHasReminder = mUserToDoItem.hasReminder(); mUserReminderDate = mUserToDoItem.getToDoDate(); mUserColor = mUserToDoItem.getTodoColor(); reminderIconImageButton = (ImageButton) view.findViewById(R.id.userToDoReminderIconImageButton); reminderRemindMeTextView = (TextView) view.findViewById(R.id.userToDoRemindMeTextView); if (theme.equals(MainFragment.DARKTHEME)) { reminderIconImageButton.setImageDrawable(getResources().getDrawable(R.drawable.ic_alarm_add_white_24dp)); reminderRemindMeTextView.setTextColor(Color.WHITE); } mCopyClipboard = (Button) view.findViewById(R.id.copyclipboard); mContainerLayout = (LinearLayout) view.findViewById(R.id.todoReminderAndDateContainerLayout); mUserDateSpinnerContainingLinearLayout = (LinearLayout) view.findViewById(R.id.toDoEnterDateLinearLayout); mToDoTextBodyEditText = (EditText) view.findViewById(R.id.userToDoEditText); mToDoTextBodyDescription= (EditText) view.findViewById(R.id.userToDoDescription); mToDoDateSwitch = (SwitchCompat) view.findViewById(R.id.toDoHasDateSwitchCompat); mToDoSendFloatingActionButton = (FloatingActionButton) view.findViewById(R.id.makeToDoFloatingActionButton); mReminderTextView = (TextView) view.findViewById(R.id.newToDoDateTimeReminderTextView); mCopyClipboard.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { String toDoTextContainer = mToDoTextBodyEditText.getText().toString(); String toDoTextBodyDescriptionContainer = mToDoTextBodyDescription.getText().toString(); ClipboardManager clipboard = (ClipboardManager) getActivity().getSystemService(Context.CLIPBOARD_SERVICE); CombinationText = \"Title : \" + toDoTextContainer + \"\\nDescription : \" + toDoTextBodyDescriptionContainer + \"\\n -Copied From MinimalToDo\"; ClipData clip = ClipData.newPlainText(\"text\", CombinationText); clipboard.setPrimaryClip(clip); Toast.makeText(getContext(), \"Copied To Clipboard!\", Toast.LENGTH_SHORT).show(); } }); mContainerLayout.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { hideKeyboard(mToDoTextBodyEditText); hideKeyboard(mToDoTextBodyDescription); } }); if (mUserHasReminder && (mUserReminderDate != null)) { setReminderTextView(); setEnterDateLayoutVisibleWithAnimations(true); } if (mUserReminderDate == null) { mToDoDateSwitch.setChecked(false); mReminderTextView.setVisibility(View.INVISIBLE); } mToDoTextBodyEditText.requestFocus(); mToDoTextBodyEditText.setText(mUserEnteredText); mToDoTextBodyDescription.setText(mUserEnteredDescription); InputMethodManager imm = (InputMethodManager) this.getActivity().getSystemService(INPUT_METHOD_SERVICE); imm.toggleSoftInput(InputMethodManager.SHOW_FORCED, InputMethodManager.HIDE_IMPLICIT_ONLY); mToDoTextBodyEditText.setSelection(mToDoTextBodyEditText.length()); mToDoTextBodyEditText.addTextChangedListener(new TextWatcher() { @Override public void beforeTextChanged(CharSequence s, int start, int count, int after) { } @Override public void onTextChanged(CharSequence s, int start, int before, int count) { mUserEnteredText = s.toString(); } @Override public void afterTextChanged(Editable s) { } }); mToDoTextBodyDescription.setText(mUserEnteredDescription); mToDoTextBodyDescription.setSelection(mToDoTextBodyDescription.length()); mToDoTextBodyDescription.addTextChangedListener(new TextWatcher() { @Override public void beforeTextChanged(CharSequence s, int start, int count, int after) { } @Override public void onTextChanged(CharSequence s, int start, int before, int count) { mUserEnteredDescription = s.toString(); } @Override public void afterTextChanged(Editable s) { } }); setEnterDateLayoutVisible(mToDoDateSwitch.isChecked()); mToDoDateSwitch.setChecked(mUserHasReminder && (mUserReminderDate != null)); mToDoDateSwitch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() { @Override public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) { if (isChecked) { app.send(this, \"Action\", \"Reminder Set\"); } else { app.send(this, \"Action\", \"Reminder Removed\"); } if (!isChecked) { mUserReminderDate = null; } mUserHasReminder = isChecked; setDateAndTimeEditText(); setEnterDateLayoutVisibleWithAnimations(isChecked); hideKeyboard(mToDoTextBodyEditText); hideKeyboard(mToDoTextBodyDescription); } }); mToDoSendFloatingActionButton.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { if (mToDoTextBodyEditText.length() <= 0) { mToDoTextBodyEditText.setError(getString(R.string.todo_error)); } else if (mUserReminderDate != null && mUserReminderDate.before(new Date())) { app.send(this, \"Action\", \"Date in the Past\"); makeResult(RESULT_CANCELED); } else { app.send(this, \"Action\", \"Make Todo\"); makeResult(RESULT_OK); getActivity().finish(); } hideKeyboard(mToDoTextBodyEditText); hideKeyboard(mToDoTextBodyDescription); } }); mDateEditText = (EditText) view.findViewById(R.id.newTodoDateEditText); mTimeEditText = (EditText) view.findViewById(R.id.newTodoTimeEditText); mDateEditText.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { Date date; hideKeyboard(mToDoTextBodyEditText); if (mUserToDoItem.getToDoDate() != null) { date = mUserReminderDate; } else { date = new Date(); } Calendar calendar = Calendar.getInstance(); calendar.setTime(date); int year = calendar.get(Calendar.YEAR); int month = calendar.get(Calendar.MONTH); int day = calendar.get(Calendar.DAY_OF_MONTH); DatePickerDialog datePickerDialog = DatePickerDialog.newInstance(AddToDoFragment.this, year, month, day); if (theme.equals(MainFragment.DARKTHEME)) { datePickerDialog.setThemeDark(true); } datePickerDialog.show(getActivity().getFragmentManager(), \"DateFragment\"); } }); mTimeEditText.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { Date date; hideKeyboard(mToDoTextBodyEditText); if (mUserToDoItem.getToDoDate() != null) { date = mUserReminderDate; } else { date = new Date(); } Calendar calendar = Calendar.getInstance(); calendar.setTime(date); int hour = calendar.get(Calendar.HOUR_OF_DAY); int minute = calendar.get(Calendar.MINUTE); TimePickerDialog timePickerDialog = TimePickerDialog.newInstance(AddToDoFragment.this, hour, minute, DateFormat.is24HourFormat(getContext())); if (theme.equals(MainFragment.DARKTHEME)) { timePickerDialog.setThemeDark(true); } timePickerDialog.show(getActivity().getFragmentManager(), \"TimeFragment\"); } }); setDateAndTimeEditText(); } private void setDateAndTimeEditText() { if (mUserToDoItem.hasReminder() && mUserReminderDate != null) { String userDate = formatDate(\"d MMM, yyyy\", mUserReminderDate); String formatToUse; if (DateFormat.is24HourFormat(getContext())) { formatToUse = \"k:mm\"; } else { formatToUse = \"h:mm a\"; } String userTime = formatDate(formatToUse, mUserReminderDate); mTimeEditText.setText(userTime); mDateEditText.setText(userDate); } else { mDateEditText.setText(getString(R.string.date_reminder_default)); boolean time24 = DateFormat.is24HourFormat(getContext()); Calendar cal = Calendar.getInstance(); if (time24) { cal.set(Calendar.HOUR_OF_DAY, cal.get(Calendar.HOUR_OF_DAY) + 1); } else { cal.set(Calendar.HOUR, cal.get(Calendar.HOUR) + 1); } cal.set(Calendar.MINUTE, 0); mUserReminderDate = cal.getTime(); Log.d(\"OskarSchindler\", \"Imagined Date: \" + mUserReminderDate); String timeString; if (time24) { timeString = formatDate(\"k:mm\", mUserReminderDate); } else { timeString = formatDate(\"h:mm a\", mUserReminderDate); } mTimeEditText.setText(timeString); } } private String getThemeSet() { return getActivity().getSharedPreferences(MainFragment.THEME_PREFERENCES, MODE_PRIVATE).getString(MainFragment.THEME_SAVED, MainFragment.LIGHTTHEME); } public void hideKeyboard(EditText et) { InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(INPUT_METHOD_SERVICE); imm.hideSoftInputFromWindow(et.getWindowToken(), 0); } public void setDate(int year, int month, int day) { Calendar calendar = Calendar.getInstance(); int hour, minute; Calendar reminderCalendar = Calendar.getInstance(); reminderCalendar.set(year, month, day); if (reminderCalendar.before(calendar)) { return; } if (mUserReminderDate != null) { calendar.setTime(mUserReminderDate); } if (DateFormat.is24HourFormat(getContext())) { hour = calendar.get(Calendar.HOUR_OF_DAY); } else { hour = calendar.get(Calendar.HOUR); } minute = calendar.get(Calendar.MINUTE); calendar.set(year, month, day, hour, minute); mUserReminderDate = calendar.getTime(); setReminderTextView(); setDateEditText(); } public void setTime(int hour, int minute) { Calendar calendar = Calendar.getInstance(); if (mUserReminderDate != null) { calendar.setTime(mUserReminderDate); } int year = calendar.get(Calendar.YEAR); int month = calendar.get(Calendar.MONTH); int day = calendar.get(Calendar.DAY_OF_MONTH); Log.d(\"OskarSchindler\", \"Time set: \" + hour); calendar.set(year, month, day, hour, minute, 0); mUserReminderDate = calendar.getTime(); setReminderTextView(); setTimeEditText(); } public void setDateEditText() { String dateFormat = \"d MMM, yyyy\"; mDateEditText.setText(formatDate(dateFormat, mUserReminderDate)); } public void setTimeEditText() { String dateFormat; if (DateFormat.is24HourFormat(getContext())) { dateFormat = \"k:mm\"; } else { dateFormat = \"h:mm a\"; } mTimeEditText.setText(formatDate(dateFormat, mUserReminderDate)); } public void setReminderTextView() { if (mUserReminderDate != null) { mReminderTextView.setVisibility(View.VISIBLE); if (mUserReminderDate.before(new Date())) { Log.d(\"OskarSchindler\", \"DATE is \" + mUserReminderDate); mReminderTextView.setText(getString(R.string.date_error_check_again)); mReminderTextView.setTextColor(Color.RED); return; } Date date = mUserReminderDate; String dateString = formatDate(\"d MMM, yyyy\", date); String timeString; String amPmString = \"\"; if (DateFormat.is24HourFormat(getContext())) { timeString = formatDate(\"k:mm\", date); } else { timeString = formatDate(\"h:mm\", date); amPmString = formatDate(\"a\", date); } String finalString = String.format(getResources().getString(R.string.remind_date_and_time), dateString, timeString, amPmString); mReminderTextView.setTextColor(getResources().getColor(R.color.secondary_text)); mReminderTextView.setText(finalString); } else { mReminderTextView.setVisibility(View.INVISIBLE); } } public void makeResult(int result) { Log.d(TAG, \"makeResult - ok : in\"); Intent i = new Intent(); if (mUserEnteredText.length() > 0) { String capitalizedString = Character.toUpperCase(mUserEnteredText.charAt(0)) + mUserEnteredText.substring(1); mUserToDoItem.setToDoText(capitalizedString); Log.d(TAG, \"Description: \" + mUserEnteredDescription); mUserToDoItem.setmToDoDescription(mUserEnteredDescription); } else { mUserToDoItem.setToDoText(mUserEnteredText); Log.d(TAG, \"Description: \" + mUserEnteredDescription); mUserToDoItem.setmToDoDescription(mUserEnteredDescription); } if (mUserReminderDate != null) { Calendar calendar = Calendar.getInstance(); calendar.setTime(mUserReminderDate); calendar.set(Calendar.SECOND, 0); mUserReminderDate = calendar.getTime(); } mUserToDoItem.setHasReminder(mUserHasReminder); mUserToDoItem.setToDoDate(mUserReminderDate); mUserToDoItem.setTodoColor(mUserColor); i.putExtra(MainFragment.TODOITEM, mUserToDoItem); getActivity().setResult(result, i); } @Override public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()) { case android.R.id.home: if (NavUtils.getParentActivityName(getActivity()) != null) { app.send(this, \"Action\", \"Discard Todo\"); makeResult(RESULT_CANCELED); NavUtils.navigateUpFromSameTask(getActivity()); } hideKeyboard(mToDoTextBodyEditText); return true; default: return super.onOptionsItemSelected(item); } } public static String formatDate(String formatString, Date dateToFormat) { SimpleDateFormat simpleDateFormat = new SimpleDateFormat(formatString); return simpleDateFormat.format(dateToFormat); } @Override public void onTimeSet(RadialPickerLayout radialPickerLayout, int hour, int minute) { setTime(hour, minute); } @Override public void onDateSet(DatePickerDialog datePickerDialog, int year, int month, int day) { setDate(year, month, day); } public void setEnterDateLayoutVisible(boolean checked) { if (checked) { mUserDateSpinnerContainingLinearLayout.setVisibility(View.VISIBLE); } else { mUserDateSpinnerContainingLinearLayout.setVisibility(View.INVISIBLE); } } public void setEnterDateLayoutVisibleWithAnimations(boolean checked) { if (checked) { setReminderTextView(); mUserDateSpinnerContainingLinearLayout.animate().alpha(1.0f).setDuration(500).setListener( new Animator.AnimatorListener() { @Override public void onAnimationStart(Animator animation) { mUserDateSpinnerContainingLinearLayout.setVisibility(View.VISIBLE); } @Override public void onAnimationEnd(Animator animation) { } @Override public void onAnimationCancel(Animator animation) { } @Override public void onAnimationRepeat(Animator animation) { } } ); } else { mUserDateSpinnerContainingLinearLayout.animate().alpha(0.0f).setDuration(500).setListener( new Animator.AnimatorListener() { @Override public void onAnimationStart(Animator animation) { } @Override public void onAnimationEnd(Animator animation) { mUserDateSpinnerContainingLinearLayout.setVisibility(View.INVISIBLE); } @Override public void onAnimationCancel(Animator animation) { } @Override public void onAnimationRepeat(Animator animation) { } } ); } } @Override protected int layoutRes() { return R.layout.fragment_add_to_do; } public static AddToDoFragment newInstance() { return new AddToDoFragment(); } }","dependencies":[{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Utility/ToDoItem.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.Utility; import org.json.JSONException; import org.json.JSONObject; import java.io.Serializable; import java.util.Date; import java.util.UUID; public class ToDoItem implements Serializable { private String mToDoText; private boolean mHasReminder; private String mToDoDescription; private int mTodoColor; private Date mToDoDate; private UUID mTodoIdentifier; private static final String TODODESCRIPTION = \"tododescription\"; private static final String TODOTEXT = \"todotext\"; private static final String TODOREMINDER = \"todoreminder\"; private static final String TODOCOLOR = \"todocolor\"; private static final String TODODATE = \"tododate\"; private static final String TODOIDENTIFIER = \"todoidentifier\"; public ToDoItem(String todoBody,String tododescription, boolean hasReminder, Date toDoDate) { mToDoText = todoBody; mHasReminder = hasReminder; mToDoDate = toDoDate; mToDoDescription = tododescription; mTodoColor = 1677725; mTodoIdentifier = UUID.randomUUID(); } public ToDoItem(JSONObject jsonObject) throws JSONException { mToDoText = jsonObject.getString(TODOTEXT); mToDoDescription = jsonObject.getString(TODODESCRIPTION); mHasReminder = jsonObject.getBoolean(TODOREMINDER); mTodoColor = jsonObject.getInt(TODOCOLOR); mTodoIdentifier = UUID.fromString(jsonObject.getString(TODOIDENTIFIER)); if (jsonObject.has(TODODATE)) { mToDoDate = new Date(jsonObject.getLong(TODODATE)); } } public JSONObject toJSON() throws JSONException { JSONObject jsonObject = new JSONObject(); jsonObject.put(TODOTEXT, mToDoText); jsonObject.put(TODOREMINDER, mHasReminder); jsonObject.put(TODODESCRIPTION, mToDoDescription); if (mToDoDate != null) { jsonObject.put(TODODATE, mToDoDate.getTime()); } jsonObject.put(TODOCOLOR, mTodoColor); jsonObject.put(TODOIDENTIFIER, mTodoIdentifier.toString()); return jsonObject; } public ToDoItem() { this(\"Clean my room\",\"Sweep and Mop my Room\", true, new Date()); } public String getmToDoDescription() { return mToDoDescription;} public void setmToDoDescription(String mToDoDescription){this.mToDoDescription = mToDoDescription;} public String getToDoText() { return mToDoText; } public void setToDoText(String mToDoText) { this.mToDoText = mToDoText; } public boolean hasReminder() { return mHasReminder; } public void setHasReminder(boolean mHasReminder) { this.mHasReminder = mHasReminder; } public Date getToDoDate() { return mToDoDate; } public int getTodoColor() { return mTodoColor; } public void setTodoColor(int mTodoColor) { this.mTodoColor = mTodoColor; } public void setToDoDate(Date mToDoDate) { this.mToDoDate = mToDoDate; } public UUID getIdentifier() { return mTodoIdentifier; } }"}]}}
{"project_id":215,"chunk_id":0,"content":{"main_file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/AddToDo/AddToDoActivity.java","main_file_content":"package com.example.avjindersinghsekhon.minimaltodo.AddToDo; import android.os.Bundle; import android.support.annotation.NonNull; import android.support.v4.app.Fragment; import com.example.avjindersinghsekhon.minimaltodo.AppDefault.AppDefaultActivity; import com.example.avjindersinghsekhon.minimaltodo.R; public class AddToDoActivity extends AppDefaultActivity { @SuppressWarnings(\"deprecation\") @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); } @Override protected int contentViewLayoutRes() { return R.layout.activity_add_to_do; } @NonNull @Override protected Fragment createInitialFragment() { return AddToDoFragment.newInstance(); } @Override protected void onResume() { super.onResume(); } }","dependencies":[{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/AddToDo/AddToDoFragment.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.AddToDo; import android.animation.Animator; import android.content.ClipData; import android.content.ClipboardManager; import android.content.Context; import android.content.Intent; import android.graphics.Color; import android.graphics.PorterDuff; import android.graphics.drawable.Drawable; import android.os.Bundle; import android.support.annotation.Nullable; import android.support.design.widget.FloatingActionButton; import android.support.v4.app.NavUtils; import android.support.v7.app.AppCompatActivity; import android.support.v7.widget.SwitchCompat; import android.support.v7.widget.Toolbar; import android.text.Editable; import android.text.TextWatcher; import android.text.format.DateFormat; import android.util.Log; import android.view.MenuItem; import android.view.View; import android.view.inputmethod.InputMethodManager; import android.widget.Button; import android.widget.CompoundButton; import android.widget.EditText; import android.widget.ImageButton; import android.widget.LinearLayout; import android.widget.TextView; import android.content.ClipboardManager; import android.widget.Toast; import com.example.avjindersinghsekhon.minimaltodo.Analytics.AnalyticsApplication; import com.example.avjindersinghsekhon.minimaltodo.AppDefault.AppDefaultFragment; import com.example.avjindersinghsekhon.minimaltodo.Main.MainActivity; import com.example.avjindersinghsekhon.minimaltodo.Main.MainFragment; import com.example.avjindersinghsekhon.minimaltodo.R; import com.example.avjindersinghsekhon.minimaltodo.Utility.ToDoItem; import com.wdullaer.materialdatetimepicker.date.DatePickerDialog; import com.wdullaer.materialdatetimepicker.time.RadialPickerLayout; import com.wdullaer.materialdatetimepicker.time.TimePickerDialog; import java.text.SimpleDateFormat; import java.util.Calendar; import java.util.Date; import static android.app.Activity.RESULT_CANCELED; import static android.app.Activity.RESULT_OK; import static android.content.Context.INPUT_METHOD_SERVICE; import static android.content.Context.MODE_PRIVATE; public class AddToDoFragment extends AppDefaultFragment implements DatePickerDialog.OnDateSetListener, TimePickerDialog.OnTimeSetListener { private static final String TAG = \"AddToDoFragment\"; private Date mLastEdited; private EditText mToDoTextBodyEditText; private EditText mToDoTextBodyDescription; private SwitchCompat mToDoDateSwitch; private LinearLayout mUserDateSpinnerContainingLinearLayout; private TextView mReminderTextView; private String CombinationText; private EditText mDateEditText; private EditText mTimeEditText; private String mDefaultTimeOptions12H[]; private String mDefaultTimeOptions24H[]; private Button mChooseDateButton; private Button mChooseTimeButton; private Button mCopyClipboard; private ToDoItem mUserToDoItem; private FloatingActionButton mToDoSendFloatingActionButton; public static final String DATE_FORMAT = \"MMM d, yyyy\"; public static final String DATE_FORMAT_MONTH_DAY = \"MMM d\"; public static final String DATE_FORMAT_TIME = \"H:m\"; private String mUserEnteredText; private String mUserEnteredDescription; private boolean mUserHasReminder; private Toolbar mToolbar; private Date mUserReminderDate; private int mUserColor; private boolean setDateButtonClickedOnce = false; private boolean setTimeButtonClickedOnce = false; private LinearLayout mContainerLayout; private String theme; AnalyticsApplication app; @Override public void onViewCreated(View view, @Nullable Bundle savedInstanceState) { super.onViewCreated(view, savedInstanceState); app = (AnalyticsApplication) getActivity().getApplication(); ImageButton reminderIconImageButton; TextView reminderRemindMeTextView; theme = getActivity().getSharedPreferences(MainFragment.THEME_PREFERENCES, MODE_PRIVATE).getString(MainFragment.THEME_SAVED, MainFragment.LIGHTTHEME); if (theme.equals(MainFragment.LIGHTTHEME)) { getActivity().setTheme(R.style.CustomStyle_LightTheme); Log.d(\"OskarSchindler\", \"Light Theme\"); } else { getActivity().setTheme(R.style.CustomStyle_DarkTheme); } final Drawable cross = getResources().getDrawable(R.drawable.ic_clear_white_24dp); if (cross != null) { cross.setColorFilter(getResources().getColor(R.color.icons), PorterDuff.Mode.SRC_ATOP); } mToolbar = (Toolbar) view.findViewById(R.id.toolbar); ((AppCompatActivity) getActivity()).setSupportActionBar(mToolbar); if (((AppCompatActivity) getActivity()).getSupportActionBar() != null) { ((AppCompatActivity) getActivity()).getSupportActionBar().setElevation(0); ((AppCompatActivity) getActivity()).getSupportActionBar().setDisplayShowTitleEnabled(false); ((AppCompatActivity) getActivity()).getSupportActionBar().setDisplayHomeAsUpEnabled(true); ((AppCompatActivity) getActivity()).getSupportActionBar().setHomeAsUpIndicator(cross); } mUserToDoItem = (ToDoItem) getActivity().getIntent().getSerializableExtra(MainFragment.TODOITEM); mUserEnteredText = mUserToDoItem.getToDoText(); mUserEnteredDescription = mUserToDoItem.getmToDoDescription(); mUserHasReminder = mUserToDoItem.hasReminder(); mUserReminderDate = mUserToDoItem.getToDoDate(); mUserColor = mUserToDoItem.getTodoColor(); reminderIconImageButton = (ImageButton) view.findViewById(R.id.userToDoReminderIconImageButton); reminderRemindMeTextView = (TextView) view.findViewById(R.id.userToDoRemindMeTextView); if (theme.equals(MainFragment.DARKTHEME)) { reminderIconImageButton.setImageDrawable(getResources().getDrawable(R.drawable.ic_alarm_add_white_24dp)); reminderRemindMeTextView.setTextColor(Color.WHITE); } mCopyClipboard = (Button) view.findViewById(R.id.copyclipboard); mContainerLayout = (LinearLayout) view.findViewById(R.id.todoReminderAndDateContainerLayout); mUserDateSpinnerContainingLinearLayout = (LinearLayout) view.findViewById(R.id.toDoEnterDateLinearLayout); mToDoTextBodyEditText = (EditText) view.findViewById(R.id.userToDoEditText); mToDoTextBodyDescription= (EditText) view.findViewById(R.id.userToDoDescription); mToDoDateSwitch = (SwitchCompat) view.findViewById(R.id.toDoHasDateSwitchCompat); mToDoSendFloatingActionButton = (FloatingActionButton) view.findViewById(R.id.makeToDoFloatingActionButton); mReminderTextView = (TextView) view.findViewById(R.id.newToDoDateTimeReminderTextView); mCopyClipboard.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { String toDoTextContainer = mToDoTextBodyEditText.getText().toString(); String toDoTextBodyDescriptionContainer = mToDoTextBodyDescription.getText().toString(); ClipboardManager clipboard = (ClipboardManager) getActivity().getSystemService(Context.CLIPBOARD_SERVICE); CombinationText = \"Title : \" + toDoTextContainer + \"\\nDescription : \" + toDoTextBodyDescriptionContainer + \"\\n -Copied From MinimalToDo\"; ClipData clip = ClipData.newPlainText(\"text\", CombinationText); clipboard.setPrimaryClip(clip); Toast.makeText(getContext(), \"Copied To Clipboard!\", Toast.LENGTH_SHORT).show(); } }); mContainerLayout.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { hideKeyboard(mToDoTextBodyEditText); hideKeyboard(mToDoTextBodyDescription); } }); if (mUserHasReminder && (mUserReminderDate != null)) { setReminderTextView(); setEnterDateLayoutVisibleWithAnimations(true); } if (mUserReminderDate == null) { mToDoDateSwitch.setChecked(false); mReminderTextView.setVisibility(View.INVISIBLE); } mToDoTextBodyEditText.requestFocus(); mToDoTextBodyEditText.setText(mUserEnteredText); mToDoTextBodyDescription.setText(mUserEnteredDescription); InputMethodManager imm = (InputMethodManager) this.getActivity().getSystemService(INPUT_METHOD_SERVICE); imm.toggleSoftInput(InputMethodManager.SHOW_FORCED, InputMethodManager.HIDE_IMPLICIT_ONLY); mToDoTextBodyEditText.setSelection(mToDoTextBodyEditText.length()); mToDoTextBodyEditText.addTextChangedListener(new TextWatcher() { @Override public void beforeTextChanged(CharSequence s, int start, int count, int after) { } @Override public void onTextChanged(CharSequence s, int start, int before, int count) { mUserEnteredText = s.toString(); } @Override public void afterTextChanged(Editable s) { } }); mToDoTextBodyDescription.setText(mUserEnteredDescription); mToDoTextBodyDescription.setSelection(mToDoTextBodyDescription.length()); mToDoTextBodyDescription.addTextChangedListener(new TextWatcher() { @Override public void beforeTextChanged(CharSequence s, int start, int count, int after) { } @Override public void onTextChanged(CharSequence s, int start, int before, int count) { mUserEnteredDescription = s.toString(); } @Override public void afterTextChanged(Editable s) { } }); setEnterDateLayoutVisible(mToDoDateSwitch.isChecked()); mToDoDateSwitch.setChecked(mUserHasReminder && (mUserReminderDate != null)); mToDoDateSwitch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() { @Override public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) { if (isChecked) { app.send(this, \"Action\", \"Reminder Set\"); } else { app.send(this, \"Action\", \"Reminder Removed\"); } if (!isChecked) { mUserReminderDate = null; } mUserHasReminder = isChecked; setDateAndTimeEditText(); setEnterDateLayoutVisibleWithAnimations(isChecked); hideKeyboard(mToDoTextBodyEditText); hideKeyboard(mToDoTextBodyDescription); } }); mToDoSendFloatingActionButton.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { if (mToDoTextBodyEditText.length() <= 0) { mToDoTextBodyEditText.setError(getString(R.string.todo_error)); } else if (mUserReminderDate != null && mUserReminderDate.before(new Date())) { app.send(this, \"Action\", \"Date in the Past\"); makeResult(RESULT_CANCELED); } else { app.send(this, \"Action\", \"Make Todo\"); makeResult(RESULT_OK); getActivity().finish(); } hideKeyboard(mToDoTextBodyEditText); hideKeyboard(mToDoTextBodyDescription); } }); mDateEditText = (EditText) view.findViewById(R.id.newTodoDateEditText); mTimeEditText = (EditText) view.findViewById(R.id.newTodoTimeEditText); mDateEditText.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { Date date; hideKeyboard(mToDoTextBodyEditText); if (mUserToDoItem.getToDoDate() != null) { date = mUserReminderDate; } else { date = new Date(); } Calendar calendar = Calendar.getInstance(); calendar.setTime(date); int year = calendar.get(Calendar.YEAR); int month = calendar.get(Calendar.MONTH); int day = calendar.get(Calendar.DAY_OF_MONTH); DatePickerDialog datePickerDialog = DatePickerDialog.newInstance(AddToDoFragment.this, year, month, day); if (theme.equals(MainFragment.DARKTHEME)) { datePickerDialog.setThemeDark(true); } datePickerDialog.show(getActivity().getFragmentManager(), \"DateFragment\"); } }); mTimeEditText.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { Date date; hideKeyboard(mToDoTextBodyEditText); if (mUserToDoItem.getToDoDate() != null) { date = mUserReminderDate; } else { date = new Date(); } Calendar calendar = Calendar.getInstance(); calendar.setTime(date); int hour = calendar.get(Calendar.HOUR_OF_DAY); int minute = calendar.get(Calendar.MINUTE); TimePickerDialog timePickerDialog = TimePickerDialog.newInstance(AddToDoFragment.this, hour, minute, DateFormat.is24HourFormat(getContext())); if (theme.equals(MainFragment.DARKTHEME)) { timePickerDialog.setThemeDark(true); } timePickerDialog.show(getActivity().getFragmentManager(), \"TimeFragment\"); } }); setDateAndTimeEditText(); } private void setDateAndTimeEditText() { if (mUserToDoItem.hasReminder() && mUserReminderDate != null) { String userDate = formatDate(\"d MMM, yyyy\", mUserReminderDate); String formatToUse; if (DateFormat.is24HourFormat(getContext())) { formatToUse = \"k:mm\"; } else { formatToUse = \"h:mm a\"; } String userTime = formatDate(formatToUse, mUserReminderDate); mTimeEditText.setText(userTime); mDateEditText.setText(userDate); } else { mDateEditText.setText(getString(R.string.date_reminder_default)); boolean time24 = DateFormat.is24HourFormat(getContext()); Calendar cal = Calendar.getInstance(); if (time24) { cal.set(Calendar.HOUR_OF_DAY, cal.get(Calendar.HOUR_OF_DAY) + 1); } else { cal.set(Calendar.HOUR, cal.get(Calendar.HOUR) + 1); } cal.set(Calendar.MINUTE, 0); mUserReminderDate = cal.getTime(); Log.d(\"OskarSchindler\", \"Imagined Date: \" + mUserReminderDate); String timeString; if (time24) { timeString = formatDate(\"k:mm\", mUserReminderDate); } else { timeString = formatDate(\"h:mm a\", mUserReminderDate); } mTimeEditText.setText(timeString); } } private String getThemeSet() { return getActivity().getSharedPreferences(MainFragment.THEME_PREFERENCES, MODE_PRIVATE).getString(MainFragment.THEME_SAVED, MainFragment.LIGHTTHEME); } public void hideKeyboard(EditText et) { InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(INPUT_METHOD_SERVICE); imm.hideSoftInputFromWindow(et.getWindowToken(), 0); } public void setDate(int year, int month, int day) { Calendar calendar = Calendar.getInstance(); int hour, minute; Calendar reminderCalendar = Calendar.getInstance(); reminderCalendar.set(year, month, day); if (reminderCalendar.before(calendar)) { return; } if (mUserReminderDate != null) { calendar.setTime(mUserReminderDate); } if (DateFormat.is24HourFormat(getContext())) { hour = calendar.get(Calendar.HOUR_OF_DAY); } else { hour = calendar.get(Calendar.HOUR); } minute = calendar.get(Calendar.MINUTE); calendar.set(year, month, day, hour, minute); mUserReminderDate = calendar.getTime(); setReminderTextView(); setDateEditText(); } public void setTime(int hour, int minute) { Calendar calendar = Calendar.getInstance(); if (mUserReminderDate != null) { calendar.setTime(mUserReminderDate); } int year = calendar.get(Calendar.YEAR); int month = calendar.get(Calendar.MONTH); int day = calendar.get(Calendar.DAY_OF_MONTH); Log.d(\"OskarSchindler\", \"Time set: \" + hour); calendar.set(year, month, day, hour, minute, 0); mUserReminderDate = calendar.getTime(); setReminderTextView(); setTimeEditText(); } public void setDateEditText() { String dateFormat = \"d MMM, yyyy\"; mDateEditText.setText(formatDate(dateFormat, mUserReminderDate)); } public void setTimeEditText() { String dateFormat; if (DateFormat.is24HourFormat(getContext())) { dateFormat = \"k:mm\"; } else { dateFormat = \"h:mm a\"; } mTimeEditText.setText(formatDate(dateFormat, mUserReminderDate)); } public void setReminderTextView() { if (mUserReminderDate != null) { mReminderTextView.setVisibility(View.VISIBLE); if (mUserReminderDate.before(new Date())) { Log.d(\"OskarSchindler\", \"DATE is \" + mUserReminderDate); mReminderTextView.setText(getString(R.string.date_error_check_again)); mReminderTextView.setTextColor(Color.RED); return; } Date date = mUserReminderDate; String dateString = formatDate(\"d MMM, yyyy\", date); String timeString; String amPmString = \"\"; if (DateFormat.is24HourFormat(getContext())) { timeString = formatDate(\"k:mm\", date); } else { timeString = formatDate(\"h:mm\", date); amPmString = formatDate(\"a\", date); } String finalString = String.format(getResources().getString(R.string.remind_date_and_time), dateString, timeString, amPmString); mReminderTextView.setTextColor(getResources().getColor(R.color.secondary_text)); mReminderTextView.setText(finalString); } else { mReminderTextView.setVisibility(View.INVISIBLE); } } public void makeResult(int result) { Log.d(TAG, \"makeResult - ok : in\"); Intent i = new Intent(); if (mUserEnteredText.length() > 0) { String capitalizedString = Character.toUpperCase(mUserEnteredText.charAt(0)) + mUserEnteredText.substring(1); mUserToDoItem.setToDoText(capitalizedString); Log.d(TAG, \"Description: \" + mUserEnteredDescription); mUserToDoItem.setmToDoDescription(mUserEnteredDescription); } else { mUserToDoItem.setToDoText(mUserEnteredText); Log.d(TAG, \"Description: \" + mUserEnteredDescription); mUserToDoItem.setmToDoDescription(mUserEnteredDescription); } if (mUserReminderDate != null) { Calendar calendar = Calendar.getInstance(); calendar.setTime(mUserReminderDate); calendar.set(Calendar.SECOND, 0); mUserReminderDate = calendar.getTime(); } mUserToDoItem.setHasReminder(mUserHasReminder); mUserToDoItem.setToDoDate(mUserReminderDate); mUserToDoItem.setTodoColor(mUserColor); i.putExtra(MainFragment.TODOITEM, mUserToDoItem); getActivity().setResult(result, i); } @Override public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()) { case android.R.id.home: if (NavUtils.getParentActivityName(getActivity()) != null) { app.send(this, \"Action\", \"Discard Todo\"); makeResult(RESULT_CANCELED); NavUtils.navigateUpFromSameTask(getActivity()); } hideKeyboard(mToDoTextBodyEditText); return true; default: return super.onOptionsItemSelected(item); } } public static String formatDate(String formatString, Date dateToFormat) { SimpleDateFormat simpleDateFormat = new SimpleDateFormat(formatString); return simpleDateFormat.format(dateToFormat); } @Override public void onTimeSet(RadialPickerLayout radialPickerLayout, int hour, int minute) { setTime(hour, minute); } @Override public void onDateSet(DatePickerDialog datePickerDialog, int year, int month, int day) { setDate(year, month, day); } public void setEnterDateLayoutVisible(boolean checked) { if (checked) { mUserDateSpinnerContainingLinearLayout.setVisibility(View.VISIBLE); } else { mUserDateSpinnerContainingLinearLayout.setVisibility(View.INVISIBLE); } } public void setEnterDateLayoutVisibleWithAnimations(boolean checked) { if (checked) { setReminderTextView(); mUserDateSpinnerContainingLinearLayout.animate().alpha(1.0f).setDuration(500).setListener( new Animator.AnimatorListener() { @Override public void onAnimationStart(Animator animation) { mUserDateSpinnerContainingLinearLayout.setVisibility(View.VISIBLE); } @Override public void onAnimationEnd(Animator animation) { } @Override public void onAnimationCancel(Animator animation) { } @Override public void onAnimationRepeat(Animator animation) { } } ); } else { mUserDateSpinnerContainingLinearLayout.animate().alpha(0.0f).setDuration(500).setListener( new Animator.AnimatorListener() { @Override public void onAnimationStart(Animator animation) { } @Override public void onAnimationEnd(Animator animation) { mUserDateSpinnerContainingLinearLayout.setVisibility(View.INVISIBLE); } @Override public void onAnimationCancel(Animator animation) { } @Override public void onAnimationRepeat(Animator animation) { } } ); } } @Override protected int layoutRes() { return R.layout.fragment_add_to_do; } public static AddToDoFragment newInstance() { return new AddToDoFragment(); } }"},{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/AppDefault/AppDefaultActivity.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.AppDefault; import android.os.Bundle; import android.support.annotation.LayoutRes; import android.support.annotation.NonNull; import android.support.annotation.Nullable; import android.support.v4.app.Fragment; import android.support.v7.app.AppCompatActivity; import com.example.avjindersinghsekhon.minimaltodo.R; public abstract class AppDefaultActivity extends AppCompatActivity { @Override protected void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(contentViewLayoutRes()); setUpInitialFragment(savedInstanceState); } private void setUpInitialFragment(@Nullable Bundle savedInstanceState) { if (savedInstanceState == null) { getSupportFragmentManager() .beginTransaction() .replace(R.id.fragment_container, createInitialFragment()) .commit(); } } @LayoutRes protected abstract int contentViewLayoutRes(); @NonNull protected abstract Fragment createInitialFragment(); }"}]}}
{"project_id":215,"chunk_id":0,"content":{"main_file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Main/MainActivity.java","main_file_content":"package com.example.avjindersinghsekhon.minimaltodo.Main; import android.content.Intent; import android.os.Bundle; import android.support.annotation.NonNull; import android.support.v4.app.Fragment; import android.support.v7.app.ActionBar; import android.view.Menu; import android.view.MenuItem; import com.example.avjindersinghsekhon.minimaltodo.About.AboutActivity; import com.example.avjindersinghsekhon.minimaltodo.AppDefault.AppDefaultActivity; import com.example.avjindersinghsekhon.minimaltodo.R; import com.example.avjindersinghsekhon.minimaltodo.Settings.SettingsActivity; public class MainActivity extends AppDefaultActivity { protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); final android.support.v7.widget.Toolbar toolbar = (android.support.v7.widget.Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar); ActionBar actionBar = getSupportActionBar(); if (actionBar != null) { actionBar.setDisplayHomeAsUpEnabled(false); } } @Override protected int contentViewLayoutRes() { return R.layout.activity_main; } @NonNull @Override protected Fragment createInitialFragment() { return MainFragment.newInstance(); } @Override public boolean onCreateOptionsMenu(Menu menu) { getMenuInflater().inflate(R.menu.menu_main, menu); return true; } @Override public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()) { case R.id.aboutMeMenuItem: Intent i = new Intent(this, AboutActivity.class); startActivity(i); return true; case R.id.preferences: Intent intent = new Intent(this, SettingsActivity.class); startActivity(intent); return true; default: return super.onOptionsItemSelected(item); } } }","dependencies":[{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/About/AboutActivity.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.About; import android.content.pm.PackageInfo; import android.graphics.Color; import android.graphics.PorterDuff; import android.graphics.drawable.Drawable; import android.os.Bundle; import android.support.annotation.NonNull; import android.support.v4.app.Fragment; import android.support.v4.app.NavUtils; import android.support.v7.widget.Toolbar; import android.util.Log; import android.view.MenuItem; import android.widget.TextView; import com.example.avjindersinghsekhon.minimaltodo.Analytics.AnalyticsApplication; import com.example.avjindersinghsekhon.minimaltodo.AppDefault.AppDefaultActivity; import com.example.avjindersinghsekhon.minimaltodo.Main.MainFragment; import com.example.avjindersinghsekhon.minimaltodo.R; public class AboutActivity extends AppDefaultActivity { private TextView mVersionTextView; private String appVersion = \"0.1\"; private Toolbar toolbar; private TextView contactMe; String theme; private AnalyticsApplication app; @Override protected void onCreate(Bundle savedInstanceState) { theme = getSharedPreferences(MainFragment.THEME_PREFERENCES, MODE_PRIVATE).getString(MainFragment.THEME_SAVED, MainFragment.LIGHTTHEME); if (theme.equals(MainFragment.DARKTHEME)) { Log.d(\"OskarSchindler\", \"One\"); setTheme(R.style.CustomStyle_DarkTheme); } else { Log.d(\"OskarSchindler\", \"One\"); setTheme(R.style.CustomStyle_LightTheme); } super.onCreate(savedInstanceState); final Drawable backArrow = getResources().getDrawable(R.drawable.abc_ic_ab_back_mtrl_am_alpha); if (backArrow != null) { backArrow.setColorFilter(Color.WHITE, PorterDuff.Mode.SRC_ATOP); } try { PackageInfo info = getPackageManager().getPackageInfo(getPackageName(), 0); appVersion = info.versionName; } catch (Exception e) { e.printStackTrace(); } toolbar = (Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar); if (getSupportActionBar() != null) { getSupportActionBar().setDisplayHomeAsUpEnabled(true); getSupportActionBar().setHomeAsUpIndicator(backArrow); } } @Override protected int contentViewLayoutRes() { return R.layout.about_layout; } @NonNull protected Fragment createInitialFragment() { return AboutFragment.newInstance(); } @Override public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()) { case android.R.id.home: if (NavUtils.getParentActivityName(this) != null) { NavUtils.navigateUpFromSameTask(this); } return true; default: return super.onOptionsItemSelected(item); } } }"},{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/AppDefault/AppDefaultActivity.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.AppDefault; import android.os.Bundle; import android.support.annotation.LayoutRes; import android.support.annotation.NonNull; import android.support.annotation.Nullable; import android.support.v4.app.Fragment; import android.support.v7.app.AppCompatActivity; import com.example.avjindersinghsekhon.minimaltodo.R; public abstract class AppDefaultActivity extends AppCompatActivity { @Override protected void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(contentViewLayoutRes()); setUpInitialFragment(savedInstanceState); } private void setUpInitialFragment(@Nullable Bundle savedInstanceState) { if (savedInstanceState == null) { getSupportFragmentManager() .beginTransaction() .replace(R.id.fragment_container, createInitialFragment()) .commit(); } } @LayoutRes protected abstract int contentViewLayoutRes(); @NonNull protected abstract Fragment createInitialFragment(); }"},{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Main/MainFragment.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.Main; import android.app.AlarmManager; import android.app.PendingIntent; import android.content.Intent; import android.content.SharedPreferences; import android.graphics.Color; import android.graphics.Typeface; import android.os.Bundle; import android.support.annotation.Nullable; import android.support.design.widget.CoordinatorLayout; import android.support.design.widget.FloatingActionButton; import android.support.design.widget.Snackbar; import android.support.v7.widget.DefaultItemAnimator; import android.support.v7.widget.LinearLayoutManager; import android.support.v7.widget.RecyclerView; import android.support.v7.widget.helper.ItemTouchHelper; import android.util.Log; import android.view.LayoutInflater; import android.view.Menu; import android.view.MenuItem; import android.view.View; import android.view.ViewGroup; import android.view.animation.AccelerateInterpolator; import android.view.animation.DecelerateInterpolator; import android.widget.ImageView; import android.widget.LinearLayout; import android.widget.TextView; import com.amulyakhare.textdrawable.TextDrawable; import com.amulyakhare.textdrawable.util.ColorGenerator; import com.example.avjindersinghsekhon.minimaltodo.About.AboutActivity; import com.example.avjindersinghsekhon.minimaltodo.AddToDo.AddToDoActivity; import com.example.avjindersinghsekhon.minimaltodo.AddToDo.AddToDoFragment; import com.example.avjindersinghsekhon.minimaltodo.Analytics.AnalyticsApplication; import com.example.avjindersinghsekhon.minimaltodo.AppDefault.AppDefaultFragment; import com.example.avjindersinghsekhon.minimaltodo.R; import com.example.avjindersinghsekhon.minimaltodo.Reminder.ReminderFragment; import com.example.avjindersinghsekhon.minimaltodo.Settings.SettingsActivity; import com.example.avjindersinghsekhon.minimaltodo.Utility.ItemTouchHelperClass; import com.example.avjindersinghsekhon.minimaltodo.Utility.RecyclerViewEmptySupport; import com.example.avjindersinghsekhon.minimaltodo.Utility.StoreRetrieveData; import com.example.avjindersinghsekhon.minimaltodo.Utility.ToDoItem; import com.example.avjindersinghsekhon.minimaltodo.Utility.TodoNotificationService; import org.json.JSONException; import java.io.IOException; import java.util.ArrayList; import java.util.Collections; import java.util.Date; import static android.app.Activity.RESULT_CANCELED; import static android.content.Context.ALARM_SERVICE; import static android.content.Context.MODE_PRIVATE; public class MainFragment extends AppDefaultFragment { private RecyclerViewEmptySupport mRecyclerView; private FloatingActionButton mAddToDoItemFAB; private ArrayList<ToDoItem> mToDoItemsArrayList; private CoordinatorLayout mCoordLayout; public static final String TODOITEM = \"com.avjindersinghsekhon.com.avjindersinghsekhon.minimaltodo.MainActivity\"; private MainFragment.BasicListAdapter adapter; private static final int REQUEST_ID_TODO_ITEM = 100; private ToDoItem mJustDeletedToDoItem; private int mIndexOfDeletedToDoItem; public static final String DATE_TIME_FORMAT_12_HOUR = \"MMM d, yyyy h:mm a\"; public static final String DATE_TIME_FORMAT_24_HOUR = \"MMM d, yyyy k:mm\"; public static final String FILENAME = \"todoitems.json\"; private StoreRetrieveData storeRetrieveData; public ItemTouchHelper itemTouchHelper; private CustomRecyclerScrollViewListener customRecyclerScrollViewListener; public static final String SHARED_PREF_DATA_SET_CHANGED = \"com.avjindersekhon.datasetchanged\"; public static final String CHANGE_OCCURED = \"com.avjinder.changeoccured\"; private int mTheme = -1; private String theme = \"name_of_the_theme\"; public static final String THEME_PREFERENCES = \"com.avjindersekhon.themepref\"; public static final String RECREATE_ACTIVITY = \"com.avjindersekhon.recreateactivity\"; public static final String THEME_SAVED = \"com.avjindersekhon.savedtheme\"; public static final String DARKTHEME = \"com.avjindersekon.darktheme\"; public static final String LIGHTTHEME = \"com.avjindersekon.lighttheme\"; private AnalyticsApplication app; private String[] testStrings = {\"Clean my room\", \"Water the plants\", \"Get car washed\", \"Get my dry cleaning\" }; @Override public void onViewCreated(View view, @Nullable Bundle savedInstanceState) { super.onViewCreated(view, savedInstanceState); app = (AnalyticsApplication) getActivity().getApplication(); theme = getActivity().getSharedPreferences(THEME_PREFERENCES, MODE_PRIVATE).getString(THEME_SAVED, LIGHTTHEME); if (theme.equals(LIGHTTHEME)) { mTheme = R.style.CustomStyle_LightTheme; } else { mTheme = R.style.CustomStyle_DarkTheme; } this.getActivity().setTheme(mTheme); super.onCreate(savedInstanceState); SharedPreferences sharedPreferences = getActivity().getSharedPreferences(SHARED_PREF_DATA_SET_CHANGED, MODE_PRIVATE); SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putBoolean(CHANGE_OCCURED, false); editor.apply(); storeRetrieveData = new StoreRetrieveData(getContext(), FILENAME); mToDoItemsArrayList = getLocallyStoredData(storeRetrieveData); adapter = new MainFragment.BasicListAdapter(mToDoItemsArrayList); setAlarms(); mCoordLayout = (CoordinatorLayout) view.findViewById(R.id.myCoordinatorLayout); mAddToDoItemFAB = (FloatingActionButton) view.findViewById(R.id.addToDoItemFAB); mAddToDoItemFAB.setOnClickListener(new View.OnClickListener() { @SuppressWarnings(\"deprecation\") @Override public void onClick(View v) { app.send(this, \"Action\", \"FAB pressed\"); Intent newTodo = new Intent(getContext(), AddToDoActivity.class); ToDoItem item = new ToDoItem(\"\",\"\", false, null); int color = ColorGenerator.MATERIAL.getRandomColor(); item.setTodoColor(color); newTodo.putExtra(TODOITEM, item); startActivityForResult(newTodo, REQUEST_ID_TODO_ITEM); } }); mRecyclerView = (RecyclerViewEmptySupport) view.findViewById(R.id.toDoRecyclerView); if (theme.equals(LIGHTTHEME)) { mRecyclerView.setBackgroundColor(getResources().getColor(R.color.primary_lightest)); } mRecyclerView.setEmptyView(view.findViewById(R.id.toDoEmptyView)); mRecyclerView.setHasFixedSize(true); mRecyclerView.setItemAnimator(new DefaultItemAnimator()); mRecyclerView.setLayoutManager(new LinearLayoutManager(getContext())); customRecyclerScrollViewListener = new CustomRecyclerScrollViewListener() { @Override public void show() { mAddToDoItemFAB.animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start(); } @Override public void hide() { CoordinatorLayout.LayoutParams lp = (CoordinatorLayout.LayoutParams) mAddToDoItemFAB.getLayoutParams(); int fabMargin = lp.bottomMargin; mAddToDoItemFAB.animate().translationY(mAddToDoItemFAB.getHeight() + fabMargin).setInterpolator(new AccelerateInterpolator(2.0f)).start(); } }; mRecyclerView.addOnScrollListener(customRecyclerScrollViewListener); ItemTouchHelper.Callback callback = new ItemTouchHelperClass(adapter); itemTouchHelper = new ItemTouchHelper(callback); itemTouchHelper.attachToRecyclerView(mRecyclerView); mRecyclerView.setAdapter(adapter); } public static ArrayList<ToDoItem> getLocallyStoredData(StoreRetrieveData storeRetrieveData) { ArrayList<ToDoItem> items = null; try { items = storeRetrieveData.loadFromFile(); } catch (IOException | JSONException e) { e.printStackTrace(); } if (items == null) { items = new ArrayList<>(); } return items; } @Override public void onResume() { super.onResume(); app.send(this); SharedPreferences sharedPreferences = getActivity().getSharedPreferences(SHARED_PREF_DATA_SET_CHANGED, MODE_PRIVATE); if (sharedPreferences.getBoolean(ReminderFragment.EXIT, false)) { SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putBoolean(ReminderFragment.EXIT, false); editor.apply(); getActivity().finish(); } if (getActivity().getSharedPreferences(THEME_PREFERENCES, MODE_PRIVATE).getBoolean(RECREATE_ACTIVITY, false)) { SharedPreferences.Editor editor = getActivity().getSharedPreferences(THEME_PREFERENCES, MODE_PRIVATE).edit(); editor.putBoolean(RECREATE_ACTIVITY, false); editor.apply(); getActivity().recreate(); } } @Override public void onStart() { app = (AnalyticsApplication) getActivity().getApplication(); super.onStart(); SharedPreferences sharedPreferences = getActivity().getSharedPreferences(SHARED_PREF_DATA_SET_CHANGED, MODE_PRIVATE); if (sharedPreferences.getBoolean(CHANGE_OCCURED, false)) { mToDoItemsArrayList = getLocallyStoredData(storeRetrieveData); adapter = new MainFragment.BasicListAdapter(mToDoItemsArrayList); mRecyclerView.setAdapter(adapter); setAlarms(); SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putBoolean(CHANGE_OCCURED, false); editor.apply(); } } private void setAlarms() { if (mToDoItemsArrayList != null) { for (ToDoItem item : mToDoItemsArrayList) { if (item.hasReminder() && item.getToDoDate() != null) { if (item.getToDoDate().before(new Date())) { item.setToDoDate(null); continue; } Intent i = new Intent(getContext(), TodoNotificationService.class); i.putExtra(TodoNotificationService.TODOUUID, item.getIdentifier()); i.putExtra(TodoNotificationService.TODOTEXT, item.getToDoText()); createAlarm(i, item.getIdentifier().hashCode(), item.getToDoDate().getTime()); } } } } public void addThemeToSharedPreferences(String theme) { SharedPreferences sharedPreferences = getActivity().getSharedPreferences(THEME_PREFERENCES, MODE_PRIVATE); SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putString(THEME_SAVED, theme); editor.apply(); } public boolean onCreateOptionsMenu(Menu menu) { getActivity().getMenuInflater().inflate(R.menu.menu_main, menu); return true; } @Override public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()) { case R.id.aboutMeMenuItem: Intent i = new Intent(getContext(), AboutActivity.class); startActivity(i); return true; case R.id.preferences: Intent intent = new Intent(getContext(), SettingsActivity.class); startActivity(intent); return true; default: return super.onOptionsItemSelected(item); } } @Override public void onActivityResult(int requestCode, int resultCode, Intent data) { if (resultCode != RESULT_CANCELED && requestCode == REQUEST_ID_TODO_ITEM) { ToDoItem item = (ToDoItem) data.getSerializableExtra(TODOITEM); if (item.getToDoText().length() <= 0) { return; } boolean existed = false; if (item.hasReminder() && item.getToDoDate() != null) { Intent i = new Intent(getContext(), TodoNotificationService.class); i.putExtra(TodoNotificationService.TODOTEXT, item.getToDoText()); i.putExtra(TodoNotificationService.TODOUUID, item.getIdentifier()); createAlarm(i, item.getIdentifier().hashCode(), item.getToDoDate().getTime()); } for (int i = 0; i < mToDoItemsArrayList.size(); i++) { if (item.getIdentifier().equals(mToDoItemsArrayList.get(i).getIdentifier())) { mToDoItemsArrayList.set(i, item); existed = true; adapter.notifyDataSetChanged(); break; } } if (!existed) { addToDataStore(item); } } } private AlarmManager getAlarmManager() { return (AlarmManager) getActivity().getSystemService(ALARM_SERVICE); } private boolean doesPendingIntentExist(Intent i, int requestCode) { PendingIntent pi = PendingIntent.getService(getContext(), requestCode, i, PendingIntent.FLAG_NO_CREATE); return pi != null; } private void createAlarm(Intent i, int requestCode, long timeInMillis) { AlarmManager am = getAlarmManager(); PendingIntent pi = PendingIntent.getService(getContext(), requestCode, i, PendingIntent.FLAG_UPDATE_CURRENT); am.set(AlarmManager.RTC_WAKEUP, timeInMillis, pi); } private void deleteAlarm(Intent i, int requestCode) { if (doesPendingIntentExist(i, requestCode)) { PendingIntent pi = PendingIntent.getService(getContext(), requestCode, i, PendingIntent.FLAG_NO_CREATE); pi.cancel(); getAlarmManager().cancel(pi); Log.d(\"OskarSchindler\", \"PI Cancelled \" + doesPendingIntentExist(i, requestCode)); } } private void addToDataStore(ToDoItem item) { mToDoItemsArrayList.add(item); adapter.notifyItemInserted(mToDoItemsArrayList.size() - 1); } public void makeUpItems(ArrayList<ToDoItem> items, int len) { for (String testString : testStrings) { ToDoItem item = new ToDoItem(testString,testString, false, new Date()); items.add(item); } } public class BasicListAdapter extends RecyclerView.Adapter<BasicListAdapter.ViewHolder> implements ItemTouchHelperClass.ItemTouchHelperAdapter { private ArrayList<ToDoItem> items; @Override public void onItemMoved(int fromPosition, int toPosition) { if (fromPosition < toPosition) { for (int i = fromPosition; i < toPosition; i++) { Collections.swap(items, i, i + 1); } } else { for (int i = fromPosition; i > toPosition; i--) { Collections.swap(items, i, i - 1); } } notifyItemMoved(fromPosition, toPosition); } @Override public void onItemRemoved(final int position) { app.send(this, \"Action\", \"Swiped Todo Away\"); mJustDeletedToDoItem = items.remove(position); mIndexOfDeletedToDoItem = position; Intent i = new Intent(getContext(), TodoNotificationService.class); deleteAlarm(i, mJustDeletedToDoItem.getIdentifier().hashCode()); notifyItemRemoved(position); String toShow = \"Todo\"; Snackbar.make(mCoordLayout, \"Deleted \" + toShow, Snackbar.LENGTH_LONG) .setAction(\"UNDO\", new View.OnClickListener() { @Override public void onClick(View v) { app.send(this, \"Action\", \"UNDO Pressed\"); items.add(mIndexOfDeletedToDoItem, mJustDeletedToDoItem); if (mJustDeletedToDoItem.getToDoDate() != null && mJustDeletedToDoItem.hasReminder()) { Intent i = new Intent(getContext(), TodoNotificationService.class); i.putExtra(TodoNotificationService.TODOTEXT, mJustDeletedToDoItem.getToDoText()); i.putExtra(TodoNotificationService.TODOUUID, mJustDeletedToDoItem.getIdentifier()); createAlarm(i, mJustDeletedToDoItem.getIdentifier().hashCode(), mJustDeletedToDoItem.getToDoDate().getTime()); } notifyItemInserted(mIndexOfDeletedToDoItem); } }).show(); } @Override public BasicListAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) { View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.list_circle_try, parent, false); return new ViewHolder(v); } @Override public void onBindViewHolder(final BasicListAdapter.ViewHolder holder, final int position) { ToDoItem item = items.get(position); SharedPreferences sharedPreferences = getActivity().getSharedPreferences(THEME_PREFERENCES, MODE_PRIVATE); int bgColor; int todoTextColor; if (sharedPreferences.getString(THEME_SAVED, LIGHTTHEME).equals(LIGHTTHEME)) { bgColor = Color.WHITE; todoTextColor = getResources().getColor(R.color.secondary_text); } else { bgColor = Color.DKGRAY; todoTextColor = Color.WHITE; } holder.linearLayout.setBackgroundColor(bgColor); if (item.hasReminder() && item.getToDoDate() != null) { holder.mToDoTextview.setMaxLines(1); holder.mTimeTextView.setVisibility(View.VISIBLE); } else { holder.mTimeTextView.setVisibility(View.GONE); holder.mToDoTextview.setMaxLines(2); } holder.mToDoTextview.setText(item.getToDoText()); holder.mToDoTextview.setTextColor(todoTextColor); TextDrawable myDrawable = TextDrawable.builder().beginConfig() .textColor(Color.WHITE) .useFont(Typeface.DEFAULT) .toUpperCase() .endConfig() .buildRound(item.getToDoText().substring(0, 1), item.getTodoColor()); holder.mColorImageView.setImageDrawable(myDrawable); if (item.getToDoDate() != null) { String timeToShow; if (android.text.format.DateFormat.is24HourFormat(getContext())) { timeToShow = AddToDoFragment.formatDate(MainFragment.DATE_TIME_FORMAT_24_HOUR, item.getToDoDate()); } else { timeToShow = AddToDoFragment.formatDate(MainFragment.DATE_TIME_FORMAT_12_HOUR, item.getToDoDate()); } holder.mTimeTextView.setText(timeToShow); } } @Override public int getItemCount() { return items.size(); } BasicListAdapter(ArrayList<ToDoItem> items) { this.items = items; } @SuppressWarnings(\"deprecation\") public class ViewHolder extends RecyclerView.ViewHolder { View mView; LinearLayout linearLayout; TextView mToDoTextview; ImageView mColorImageView; TextView mTimeTextView; public ViewHolder(View v) { super(v); mView = v; v.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { ToDoItem item = items.get(ViewHolder.this.getAdapterPosition()); Intent i = new Intent(getContext(), AddToDoActivity.class); i.putExtra(TODOITEM, item); startActivityForResult(i, REQUEST_ID_TODO_ITEM); } }); mToDoTextview = (TextView) v.findViewById(R.id.toDoListItemTextview); mTimeTextView = (TextView) v.findViewById(R.id.todoListItemTimeTextView); mColorImageView = (ImageView) v.findViewById(R.id.toDoListItemColorImageView); linearLayout = (LinearLayout) v.findViewById(R.id.listItemLinearLayout); } } } private void saveDate() { try { storeRetrieveData.saveToFile(mToDoItemsArrayList); } catch (JSONException | IOException e) { e.printStackTrace(); } } @Override public void onPause() { super.onPause(); try { storeRetrieveData.saveToFile(mToDoItemsArrayList); } catch (JSONException | IOException e) { e.printStackTrace(); } } @Override public void onDestroy() { super.onDestroy(); mRecyclerView.removeOnScrollListener(customRecyclerScrollViewListener); } @Override protected int layoutRes() { return R.layout.fragment_main; } public static MainFragment newInstance() { return new MainFragment(); } }"}]}}
{"project_id":215,"chunk_id":1,"content":{"main_file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Main/MainActivity.java","main_file_content":"package com.example.avjindersinghsekhon.minimaltodo.Main; import android.content.Intent; import android.os.Bundle; import android.support.annotation.NonNull; import android.support.v4.app.Fragment; import android.support.v7.app.ActionBar; import android.view.Menu; import android.view.MenuItem; import com.example.avjindersinghsekhon.minimaltodo.About.AboutActivity; import com.example.avjindersinghsekhon.minimaltodo.AppDefault.AppDefaultActivity; import com.example.avjindersinghsekhon.minimaltodo.R; import com.example.avjindersinghsekhon.minimaltodo.Settings.SettingsActivity; public class MainActivity extends AppDefaultActivity { protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); final android.support.v7.widget.Toolbar toolbar = (android.support.v7.widget.Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar); ActionBar actionBar = getSupportActionBar(); if (actionBar != null) { actionBar.setDisplayHomeAsUpEnabled(false); } } @Override protected int contentViewLayoutRes() { return R.layout.activity_main; } @NonNull @Override protected Fragment createInitialFragment() { return MainFragment.newInstance(); } @Override public boolean onCreateOptionsMenu(Menu menu) { getMenuInflater().inflate(R.menu.menu_main, menu); return true; } @Override public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()) { case R.id.aboutMeMenuItem: Intent i = new Intent(this, AboutActivity.class); startActivity(i); return true; case R.id.preferences: Intent intent = new Intent(this, SettingsActivity.class); startActivity(intent); return true; default: return super.onOptionsItemSelected(item); } } }","dependencies":[{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Settings/SettingsActivity.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.Settings; import android.app.FragmentManager; import android.graphics.Color; import android.graphics.PorterDuff; import android.graphics.drawable.Drawable; import android.os.Bundle; import android.support.v4.app.NavUtils; import android.support.v7.app.AppCompatActivity; import android.support.v7.widget.Toolbar; import android.view.MenuItem; import com.example.avjindersinghsekhon.minimaltodo.Analytics.AnalyticsApplication; import com.example.avjindersinghsekhon.minimaltodo.Main.MainFragment; import com.example.avjindersinghsekhon.minimaltodo.R; public class SettingsActivity extends AppCompatActivity { AnalyticsApplication app; @Override protected void onResume() { super.onResume(); app.send(this); } @Override protected void onCreate(Bundle savedInstanceState) { app = (AnalyticsApplication) getApplication(); String theme = getSharedPreferences(MainFragment.THEME_PREFERENCES, MODE_PRIVATE).getString(MainFragment.THEME_SAVED, MainFragment.LIGHTTHEME); if (theme.equals(MainFragment.LIGHTTHEME)) { setTheme(R.style.CustomStyle_LightTheme); } else { setTheme(R.style.CustomStyle_DarkTheme); } super.onCreate(savedInstanceState); setContentView(R.layout.activity_settings); Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar); final Drawable backArrow = getResources().getDrawable(R.drawable.abc_ic_ab_back_mtrl_am_alpha); if (backArrow != null) { backArrow.setColorFilter(Color.WHITE, PorterDuff.Mode.SRC_ATOP); } if (getSupportActionBar() != null) { getSupportActionBar().setDisplayHomeAsUpEnabled(true); getSupportActionBar().setHomeAsUpIndicator(backArrow); } FragmentManager fm = getFragmentManager(); fm.beginTransaction().replace(R.id.mycontent, new SettingsFragment()).commit(); } @Override public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()) { case android.R.id.home: if (NavUtils.getParentActivityName(this) != null) { NavUtils.navigateUpFromSameTask(this); } return true; default: return super.onOptionsItemSelected(item); } } }"}]}}
{"project_id":215,"chunk_id":0,"content":{"main_file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Main/CustomRecyclerScrollViewListener.java","main_file_content":"package com.example.avjindersinghsekhon.minimaltodo.Main; import android.support.v7.widget.RecyclerView; import android.util.Log; public abstract class CustomRecyclerScrollViewListener extends RecyclerView.OnScrollListener { int scrollDist = 0; boolean isVisible = true; static final float MINIMUM = 20; @Override public void onScrolled(RecyclerView recyclerView, int dx, int dy) { super.onScrolled(recyclerView, dx, dy); if (isVisible && scrollDist > MINIMUM) { Log.d(\"OskarSchindler\", \"Hide \" + scrollDist); hide(); scrollDist = 0; isVisible = false; } else if (!isVisible && scrollDist < -MINIMUM) { Log.d(\"OskarSchindler\", \"Show \" + scrollDist); show(); scrollDist = 0; isVisible = true; } if ((isVisible && dy > 0) || (!isVisible && dy < 0)) { Log.d(\"OskarSchindler\", \"Add Up \" + scrollDist); scrollDist += dy; } } public abstract void show(); public abstract void hide(); }","dependencies":[]}}
{"project_id":215,"chunk_id":0,"content":{"main_file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Main/MainFragment.java","main_file_content":"package com.example.avjindersinghsekhon.minimaltodo.Main; import android.app.AlarmManager; import android.app.PendingIntent; import android.content.Intent; import android.content.SharedPreferences; import android.graphics.Color; import android.graphics.Typeface; import android.os.Bundle; import android.support.annotation.Nullable; import android.support.design.widget.CoordinatorLayout; import android.support.design.widget.FloatingActionButton; import android.support.design.widget.Snackbar; import android.support.v7.widget.DefaultItemAnimator; import android.support.v7.widget.LinearLayoutManager; import android.support.v7.widget.RecyclerView; import android.support.v7.widget.helper.ItemTouchHelper; import android.util.Log; import android.view.LayoutInflater; import android.view.Menu; import android.view.MenuItem; import android.view.View; import android.view.ViewGroup; import android.view.animation.AccelerateInterpolator; import android.view.animation.DecelerateInterpolator; import android.widget.ImageView; import android.widget.LinearLayout; import android.widget.TextView; import com.amulyakhare.textdrawable.TextDrawable; import com.amulyakhare.textdrawable.util.ColorGenerator; import com.example.avjindersinghsekhon.minimaltodo.About.AboutActivity; import com.example.avjindersinghsekhon.minimaltodo.AddToDo.AddToDoActivity; import com.example.avjindersinghsekhon.minimaltodo.AddToDo.AddToDoFragment; import com.example.avjindersinghsekhon.minimaltodo.Analytics.AnalyticsApplication; import com.example.avjindersinghsekhon.minimaltodo.AppDefault.AppDefaultFragment; import com.example.avjindersinghsekhon.minimaltodo.R; import com.example.avjindersinghsekhon.minimaltodo.Reminder.ReminderFragment; import com.example.avjindersinghsekhon.minimaltodo.Settings.SettingsActivity; import com.example.avjindersinghsekhon.minimaltodo.Utility.ItemTouchHelperClass; import com.example.avjindersinghsekhon.minimaltodo.Utility.RecyclerViewEmptySupport; import com.example.avjindersinghsekhon.minimaltodo.Utility.StoreRetrieveData; import com.example.avjindersinghsekhon.minimaltodo.Utility.ToDoItem; import com.example.avjindersinghsekhon.minimaltodo.Utility.TodoNotificationService; import org.json.JSONException; import java.io.IOException; import java.util.ArrayList; import java.util.Collections; import java.util.Date; import static android.app.Activity.RESULT_CANCELED; import static android.content.Context.ALARM_SERVICE; import static android.content.Context.MODE_PRIVATE; public class MainFragment extends AppDefaultFragment { private RecyclerViewEmptySupport mRecyclerView; private FloatingActionButton mAddToDoItemFAB; private ArrayList<ToDoItem> mToDoItemsArrayList; private CoordinatorLayout mCoordLayout; public static final String TODOITEM = \"com.avjindersinghsekhon.com.avjindersinghsekhon.minimaltodo.MainActivity\"; private MainFragment.BasicListAdapter adapter; private static final int REQUEST_ID_TODO_ITEM = 100; private ToDoItem mJustDeletedToDoItem; private int mIndexOfDeletedToDoItem; public static final String DATE_TIME_FORMAT_12_HOUR = \"MMM d, yyyy h:mm a\"; public static final String DATE_TIME_FORMAT_24_HOUR = \"MMM d, yyyy k:mm\"; public static final String FILENAME = \"todoitems.json\"; private StoreRetrieveData storeRetrieveData; public ItemTouchHelper itemTouchHelper; private CustomRecyclerScrollViewListener customRecyclerScrollViewListener; public static final String SHARED_PREF_DATA_SET_CHANGED = \"com.avjindersekhon.datasetchanged\"; public static final String CHANGE_OCCURED = \"com.avjinder.changeoccured\"; private int mTheme = -1; private String theme = \"name_of_the_theme\"; public static final String THEME_PREFERENCES = \"com.avjindersekhon.themepref\"; public static final String RECREATE_ACTIVITY = \"com.avjindersekhon.recreateactivity\"; public static final String THEME_SAVED = \"com.avjindersekhon.savedtheme\"; public static final String DARKTHEME = \"com.avjindersekon.darktheme\"; public static final String LIGHTTHEME = \"com.avjindersekon.lighttheme\"; private AnalyticsApplication app; private String[] testStrings = {\"Clean my room\", \"Water the plants\", \"Get car washed\", \"Get my dry cleaning\" }; @Override public void onViewCreated(View view, @Nullable Bundle savedInstanceState) { super.onViewCreated(view, savedInstanceState); app = (AnalyticsApplication) getActivity().getApplication(); theme = getActivity().getSharedPreferences(THEME_PREFERENCES, MODE_PRIVATE).getString(THEME_SAVED, LIGHTTHEME); if (theme.equals(LIGHTTHEME)) { mTheme = R.style.CustomStyle_LightTheme; } else { mTheme = R.style.CustomStyle_DarkTheme; } this.getActivity().setTheme(mTheme); super.onCreate(savedInstanceState); SharedPreferences sharedPreferences = getActivity().getSharedPreferences(SHARED_PREF_DATA_SET_CHANGED, MODE_PRIVATE); SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putBoolean(CHANGE_OCCURED, false); editor.apply(); storeRetrieveData = new StoreRetrieveData(getContext(), FILENAME); mToDoItemsArrayList = getLocallyStoredData(storeRetrieveData); adapter = new MainFragment.BasicListAdapter(mToDoItemsArrayList); setAlarms(); mCoordLayout = (CoordinatorLayout) view.findViewById(R.id.myCoordinatorLayout); mAddToDoItemFAB = (FloatingActionButton) view.findViewById(R.id.addToDoItemFAB); mAddToDoItemFAB.setOnClickListener(new View.OnClickListener() { @SuppressWarnings(\"deprecation\") @Override public void onClick(View v) { app.send(this, \"Action\", \"FAB pressed\"); Intent newTodo = new Intent(getContext(), AddToDoActivity.class); ToDoItem item = new ToDoItem(\"\",\"\", false, null); int color = ColorGenerator.MATERIAL.getRandomColor(); item.setTodoColor(color); newTodo.putExtra(TODOITEM, item); startActivityForResult(newTodo, REQUEST_ID_TODO_ITEM); } }); mRecyclerView = (RecyclerViewEmptySupport) view.findViewById(R.id.toDoRecyclerView); if (theme.equals(LIGHTTHEME)) { mRecyclerView.setBackgroundColor(getResources().getColor(R.color.primary_lightest)); } mRecyclerView.setEmptyView(view.findViewById(R.id.toDoEmptyView)); mRecyclerView.setHasFixedSize(true); mRecyclerView.setItemAnimator(new DefaultItemAnimator()); mRecyclerView.setLayoutManager(new LinearLayoutManager(getContext())); customRecyclerScrollViewListener = new CustomRecyclerScrollViewListener() { @Override public void show() { mAddToDoItemFAB.animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start(); } @Override public void hide() { CoordinatorLayout.LayoutParams lp = (CoordinatorLayout.LayoutParams) mAddToDoItemFAB.getLayoutParams(); int fabMargin = lp.bottomMargin; mAddToDoItemFAB.animate().translationY(mAddToDoItemFAB.getHeight() + fabMargin).setInterpolator(new AccelerateInterpolator(2.0f)).start(); } }; mRecyclerView.addOnScrollListener(customRecyclerScrollViewListener); ItemTouchHelper.Callback callback = new ItemTouchHelperClass(adapter); itemTouchHelper = new ItemTouchHelper(callback); itemTouchHelper.attachToRecyclerView(mRecyclerView); mRecyclerView.setAdapter(adapter); } public static ArrayList<ToDoItem> getLocallyStoredData(StoreRetrieveData storeRetrieveData) { ArrayList<ToDoItem> items = null; try { items = storeRetrieveData.loadFromFile(); } catch (IOException | JSONException e) { e.printStackTrace(); } if (items == null) { items = new ArrayList<>(); } return items; } @Override public void onResume() { super.onResume(); app.send(this); SharedPreferences sharedPreferences = getActivity().getSharedPreferences(SHARED_PREF_DATA_SET_CHANGED, MODE_PRIVATE); if (sharedPreferences.getBoolean(ReminderFragment.EXIT, false)) { SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putBoolean(ReminderFragment.EXIT, false); editor.apply(); getActivity().finish(); } if (getActivity().getSharedPreferences(THEME_PREFERENCES, MODE_PRIVATE).getBoolean(RECREATE_ACTIVITY, false)) { SharedPreferences.Editor editor = getActivity().getSharedPreferences(THEME_PREFERENCES, MODE_PRIVATE).edit(); editor.putBoolean(RECREATE_ACTIVITY, false); editor.apply(); getActivity().recreate(); } } @Override public void onStart() { app = (AnalyticsApplication) getActivity().getApplication(); super.onStart(); SharedPreferences sharedPreferences = getActivity().getSharedPreferences(SHARED_PREF_DATA_SET_CHANGED, MODE_PRIVATE); if (sharedPreferences.getBoolean(CHANGE_OCCURED, false)) { mToDoItemsArrayList = getLocallyStoredData(storeRetrieveData); adapter = new MainFragment.BasicListAdapter(mToDoItemsArrayList); mRecyclerView.setAdapter(adapter); setAlarms(); SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putBoolean(CHANGE_OCCURED, false); editor.apply(); } } private void setAlarms() { if (mToDoItemsArrayList != null) { for (ToDoItem item : mToDoItemsArrayList) { if (item.hasReminder() && item.getToDoDate() != null) { if (item.getToDoDate().before(new Date())) { item.setToDoDate(null); continue; } Intent i = new Intent(getContext(), TodoNotificationService.class); i.putExtra(TodoNotificationService.TODOUUID, item.getIdentifier()); i.putExtra(TodoNotificationService.TODOTEXT, item.getToDoText()); createAlarm(i, item.getIdentifier().hashCode(), item.getToDoDate().getTime()); } } } } public void addThemeToSharedPreferences(String theme) { SharedPreferences sharedPreferences = getActivity().getSharedPreferences(THEME_PREFERENCES, MODE_PRIVATE); SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putString(THEME_SAVED, theme); editor.apply(); } public boolean onCreateOptionsMenu(Menu menu) { getActivity().getMenuInflater().inflate(R.menu.menu_main, menu); return true; } @Override public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()) { case R.id.aboutMeMenuItem: Intent i = new Intent(getContext(), AboutActivity.class); startActivity(i); return true; case R.id.preferences: Intent intent = new Intent(getContext(), SettingsActivity.class); startActivity(intent); return true; default: return super.onOptionsItemSelected(item); } } @Override public void onActivityResult(int requestCode, int resultCode, Intent data) { if (resultCode != RESULT_CANCELED && requestCode == REQUEST_ID_TODO_ITEM) { ToDoItem item = (ToDoItem) data.getSerializableExtra(TODOITEM); if (item.getToDoText().length() <= 0) { return; } boolean existed = false; if (item.hasReminder() && item.getToDoDate() != null) { Intent i = new Intent(getContext(), TodoNotificationService.class); i.putExtra(TodoNotificationService.TODOTEXT, item.getToDoText()); i.putExtra(TodoNotificationService.TODOUUID, item.getIdentifier()); createAlarm(i, item.getIdentifier().hashCode(), item.getToDoDate().getTime()); } for (int i = 0; i < mToDoItemsArrayList.size(); i++) { if (item.getIdentifier().equals(mToDoItemsArrayList.get(i).getIdentifier())) { mToDoItemsArrayList.set(i, item); existed = true; adapter.notifyDataSetChanged(); break; } } if (!existed) { addToDataStore(item); } } } private AlarmManager getAlarmManager() { return (AlarmManager) getActivity().getSystemService(ALARM_SERVICE); } private boolean doesPendingIntentExist(Intent i, int requestCode) { PendingIntent pi = PendingIntent.getService(getContext(), requestCode, i, PendingIntent.FLAG_NO_CREATE); return pi != null; } private void createAlarm(Intent i, int requestCode, long timeInMillis) { AlarmManager am = getAlarmManager(); PendingIntent pi = PendingIntent.getService(getContext(), requestCode, i, PendingIntent.FLAG_UPDATE_CURRENT); am.set(AlarmManager.RTC_WAKEUP, timeInMillis, pi); } private void deleteAlarm(Intent i, int requestCode) { if (doesPendingIntentExist(i, requestCode)) { PendingIntent pi = PendingIntent.getService(getContext(), requestCode, i, PendingIntent.FLAG_NO_CREATE); pi.cancel(); getAlarmManager().cancel(pi); Log.d(\"OskarSchindler\", \"PI Cancelled \" + doesPendingIntentExist(i, requestCode)); } } private void addToDataStore(ToDoItem item) { mToDoItemsArrayList.add(item); adapter.notifyItemInserted(mToDoItemsArrayList.size() - 1); } public void makeUpItems(ArrayList<ToDoItem> items, int len) { for (String testString : testStrings) { ToDoItem item = new ToDoItem(testString,testString, false, new Date()); items.add(item); } } public class BasicListAdapter extends RecyclerView.Adapter<BasicListAdapter.ViewHolder> implements ItemTouchHelperClass.ItemTouchHelperAdapter { private ArrayList<ToDoItem> items; @Override public void onItemMoved(int fromPosition, int toPosition) { if (fromPosition < toPosition) { for (int i = fromPosition; i < toPosition; i++) { Collections.swap(items, i, i + 1); } } else { for (int i = fromPosition; i > toPosition; i--) { Collections.swap(items, i, i - 1); } } notifyItemMoved(fromPosition, toPosition); } @Override public void onItemRemoved(final int position) { app.send(this, \"Action\", \"Swiped Todo Away\"); mJustDeletedToDoItem = items.remove(position); mIndexOfDeletedToDoItem = position; Intent i = new Intent(getContext(), TodoNotificationService.class); deleteAlarm(i, mJustDeletedToDoItem.getIdentifier().hashCode()); notifyItemRemoved(position); String toShow = \"Todo\"; Snackbar.make(mCoordLayout, \"Deleted \" + toShow, Snackbar.LENGTH_LONG) .setAction(\"UNDO\", new View.OnClickListener() { @Override public void onClick(View v) { app.send(this, \"Action\", \"UNDO Pressed\"); items.add(mIndexOfDeletedToDoItem, mJustDeletedToDoItem); if (mJustDeletedToDoItem.getToDoDate() != null && mJustDeletedToDoItem.hasReminder()) { Intent i = new Intent(getContext(), TodoNotificationService.class); i.putExtra(TodoNotificationService.TODOTEXT, mJustDeletedToDoItem.getToDoText()); i.putExtra(TodoNotificationService.TODOUUID, mJustDeletedToDoItem.getIdentifier()); createAlarm(i, mJustDeletedToDoItem.getIdentifier().hashCode(), mJustDeletedToDoItem.getToDoDate().getTime()); } notifyItemInserted(mIndexOfDeletedToDoItem); } }).show(); } @Override public BasicListAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) { View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.list_circle_try, parent, false); return new ViewHolder(v); } @Override public void onBindViewHolder(final BasicListAdapter.ViewHolder holder, final int position) { ToDoItem item = items.get(position); SharedPreferences sharedPreferences = getActivity().getSharedPreferences(THEME_PREFERENCES, MODE_PRIVATE); int bgColor; int todoTextColor; if (sharedPreferences.getString(THEME_SAVED, LIGHTTHEME).equals(LIGHTTHEME)) { bgColor = Color.WHITE; todoTextColor = getResources().getColor(R.color.secondary_text); } else { bgColor = Color.DKGRAY; todoTextColor = Color.WHITE; } holder.linearLayout.setBackgroundColor(bgColor); if (item.hasReminder() && item.getToDoDate() != null) { holder.mToDoTextview.setMaxLines(1); holder.mTimeTextView.setVisibility(View.VISIBLE); } else { holder.mTimeTextView.setVisibility(View.GONE); holder.mToDoTextview.setMaxLines(2); } holder.mToDoTextview.setText(item.getToDoText()); holder.mToDoTextview.setTextColor(todoTextColor); TextDrawable myDrawable = TextDrawable.builder().beginConfig() .textColor(Color.WHITE) .useFont(Typeface.DEFAULT) .toUpperCase() .endConfig() .buildRound(item.getToDoText().substring(0, 1), item.getTodoColor()); holder.mColorImageView.setImageDrawable(myDrawable); if (item.getToDoDate() != null) { String timeToShow; if (android.text.format.DateFormat.is24HourFormat(getContext())) { timeToShow = AddToDoFragment.formatDate(MainFragment.DATE_TIME_FORMAT_24_HOUR, item.getToDoDate()); } else { timeToShow = AddToDoFragment.formatDate(MainFragment.DATE_TIME_FORMAT_12_HOUR, item.getToDoDate()); } holder.mTimeTextView.setText(timeToShow); } } @Override public int getItemCount() { return items.size(); } BasicListAdapter(ArrayList<ToDoItem> items) { this.items = items; } @SuppressWarnings(\"deprecation\") public class ViewHolder extends RecyclerView.ViewHolder { View mView; LinearLayout linearLayout; TextView mToDoTextview; ImageView mColorImageView; TextView mTimeTextView; public ViewHolder(View v) { super(v); mView = v; v.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { ToDoItem item = items.get(ViewHolder.this.getAdapterPosition()); Intent i = new Intent(getContext(), AddToDoActivity.class); i.putExtra(TODOITEM, item); startActivityForResult(i, REQUEST_ID_TODO_ITEM); } }); mToDoTextview = (TextView) v.findViewById(R.id.toDoListItemTextview); mTimeTextView = (TextView) v.findViewById(R.id.todoListItemTimeTextView); mColorImageView = (ImageView) v.findViewById(R.id.toDoListItemColorImageView); linearLayout = (LinearLayout) v.findViewById(R.id.listItemLinearLayout); } } } private void saveDate() { try { storeRetrieveData.saveToFile(mToDoItemsArrayList); } catch (JSONException | IOException e) { e.printStackTrace(); } } @Override public void onPause() { super.onPause(); try { storeRetrieveData.saveToFile(mToDoItemsArrayList); } catch (JSONException | IOException e) { e.printStackTrace(); } } @Override public void onDestroy() { super.onDestroy(); mRecyclerView.removeOnScrollListener(customRecyclerScrollViewListener); } @Override protected int layoutRes() { return R.layout.fragment_main; } public static MainFragment newInstance() { return new MainFragment(); } }","dependencies":[{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/About/AboutActivity.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.About; import android.content.pm.PackageInfo; import android.graphics.Color; import android.graphics.PorterDuff; import android.graphics.drawable.Drawable; import android.os.Bundle; import android.support.annotation.NonNull; import android.support.v4.app.Fragment; import android.support.v4.app.NavUtils; import android.support.v7.widget.Toolbar; import android.util.Log; import android.view.MenuItem; import android.widget.TextView; import com.example.avjindersinghsekhon.minimaltodo.Analytics.AnalyticsApplication; import com.example.avjindersinghsekhon.minimaltodo.AppDefault.AppDefaultActivity; import com.example.avjindersinghsekhon.minimaltodo.Main.MainFragment; import com.example.avjindersinghsekhon.minimaltodo.R; public class AboutActivity extends AppDefaultActivity { private TextView mVersionTextView; private String appVersion = \"0.1\"; private Toolbar toolbar; private TextView contactMe; String theme; private AnalyticsApplication app; @Override protected void onCreate(Bundle savedInstanceState) { theme = getSharedPreferences(MainFragment.THEME_PREFERENCES, MODE_PRIVATE).getString(MainFragment.THEME_SAVED, MainFragment.LIGHTTHEME); if (theme.equals(MainFragment.DARKTHEME)) { Log.d(\"OskarSchindler\", \"One\"); setTheme(R.style.CustomStyle_DarkTheme); } else { Log.d(\"OskarSchindler\", \"One\"); setTheme(R.style.CustomStyle_LightTheme); } super.onCreate(savedInstanceState); final Drawable backArrow = getResources().getDrawable(R.drawable.abc_ic_ab_back_mtrl_am_alpha); if (backArrow != null) { backArrow.setColorFilter(Color.WHITE, PorterDuff.Mode.SRC_ATOP); } try { PackageInfo info = getPackageManager().getPackageInfo(getPackageName(), 0); appVersion = info.versionName; } catch (Exception e) { e.printStackTrace(); } toolbar = (Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar); if (getSupportActionBar() != null) { getSupportActionBar().setDisplayHomeAsUpEnabled(true); getSupportActionBar().setHomeAsUpIndicator(backArrow); } } @Override protected int contentViewLayoutRes() { return R.layout.about_layout; } @NonNull protected Fragment createInitialFragment() { return AboutFragment.newInstance(); } @Override public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()) { case android.R.id.home: if (NavUtils.getParentActivityName(this) != null) { NavUtils.navigateUpFromSameTask(this); } return true; default: return super.onOptionsItemSelected(item); } } }"},{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/AddToDo/AddToDoActivity.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.AddToDo; import android.os.Bundle; import android.support.annotation.NonNull; import android.support.v4.app.Fragment; import com.example.avjindersinghsekhon.minimaltodo.AppDefault.AppDefaultActivity; import com.example.avjindersinghsekhon.minimaltodo.R; public class AddToDoActivity extends AppDefaultActivity { @SuppressWarnings(\"deprecation\") @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); } @Override protected int contentViewLayoutRes() { return R.layout.activity_add_to_do; } @NonNull @Override protected Fragment createInitialFragment() { return AddToDoFragment.newInstance(); } @Override protected void onResume() { super.onResume(); } }"}]}}
{"project_id":215,"chunk_id":1,"content":{"main_file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Main/MainFragment.java","main_file_content":"package com.example.avjindersinghsekhon.minimaltodo.Main; import android.app.AlarmManager; import android.app.PendingIntent; import android.content.Intent; import android.content.SharedPreferences; import android.graphics.Color; import android.graphics.Typeface; import android.os.Bundle; import android.support.annotation.Nullable; import android.support.design.widget.CoordinatorLayout; import android.support.design.widget.FloatingActionButton; import android.support.design.widget.Snackbar; import android.support.v7.widget.DefaultItemAnimator; import android.support.v7.widget.LinearLayoutManager; import android.support.v7.widget.RecyclerView; import android.support.v7.widget.helper.ItemTouchHelper; import android.util.Log; import android.view.LayoutInflater; import android.view.Menu; import android.view.MenuItem; import android.view.View; import android.view.ViewGroup; import android.view.animation.AccelerateInterpolator; import android.view.animation.DecelerateInterpolator; import android.widget.ImageView; import android.widget.LinearLayout; import android.widget.TextView; import com.amulyakhare.textdrawable.TextDrawable; import com.amulyakhare.textdrawable.util.ColorGenerator; import com.example.avjindersinghsekhon.minimaltodo.About.AboutActivity; import com.example.avjindersinghsekhon.minimaltodo.AddToDo.AddToDoActivity; import com.example.avjindersinghsekhon.minimaltodo.AddToDo.AddToDoFragment; import com.example.avjindersinghsekhon.minimaltodo.Analytics.AnalyticsApplication; import com.example.avjindersinghsekhon.minimaltodo.AppDefault.AppDefaultFragment; import com.example.avjindersinghsekhon.minimaltodo.R; import com.example.avjindersinghsekhon.minimaltodo.Reminder.ReminderFragment; import com.example.avjindersinghsekhon.minimaltodo.Settings.SettingsActivity; import com.example.avjindersinghsekhon.minimaltodo.Utility.ItemTouchHelperClass; import com.example.avjindersinghsekhon.minimaltodo.Utility.RecyclerViewEmptySupport; import com.example.avjindersinghsekhon.minimaltodo.Utility.StoreRetrieveData; import com.example.avjindersinghsekhon.minimaltodo.Utility.ToDoItem; import com.example.avjindersinghsekhon.minimaltodo.Utility.TodoNotificationService; import org.json.JSONException; import java.io.IOException; import java.util.ArrayList; import java.util.Collections; import java.util.Date; import static android.app.Activity.RESULT_CANCELED; import static android.content.Context.ALARM_SERVICE; import static android.content.Context.MODE_PRIVATE; public class MainFragment extends AppDefaultFragment { private RecyclerViewEmptySupport mRecyclerView; private FloatingActionButton mAddToDoItemFAB; private ArrayList<ToDoItem> mToDoItemsArrayList; private CoordinatorLayout mCoordLayout; public static final String TODOITEM = \"com.avjindersinghsekhon.com.avjindersinghsekhon.minimaltodo.MainActivity\"; private MainFragment.BasicListAdapter adapter; private static final int REQUEST_ID_TODO_ITEM = 100; private ToDoItem mJustDeletedToDoItem; private int mIndexOfDeletedToDoItem; public static final String DATE_TIME_FORMAT_12_HOUR = \"MMM d, yyyy h:mm a\"; public static final String DATE_TIME_FORMAT_24_HOUR = \"MMM d, yyyy k:mm\"; public static final String FILENAME = \"todoitems.json\"; private StoreRetrieveData storeRetrieveData; public ItemTouchHelper itemTouchHelper; private CustomRecyclerScrollViewListener customRecyclerScrollViewListener; public static final String SHARED_PREF_DATA_SET_CHANGED = \"com.avjindersekhon.datasetchanged\"; public static final String CHANGE_OCCURED = \"com.avjinder.changeoccured\"; private int mTheme = -1; private String theme = \"name_of_the_theme\"; public static final String THEME_PREFERENCES = \"com.avjindersekhon.themepref\"; public static final String RECREATE_ACTIVITY = \"com.avjindersekhon.recreateactivity\"; public static final String THEME_SAVED = \"com.avjindersekhon.savedtheme\"; public static final String DARKTHEME = \"com.avjindersekon.darktheme\"; public static final String LIGHTTHEME = \"com.avjindersekon.lighttheme\"; private AnalyticsApplication app; private String[] testStrings = {\"Clean my room\", \"Water the plants\", \"Get car washed\", \"Get my dry cleaning\" }; @Override public void onViewCreated(View view, @Nullable Bundle savedInstanceState) { super.onViewCreated(view, savedInstanceState); app = (AnalyticsApplication) getActivity().getApplication(); theme = getActivity().getSharedPreferences(THEME_PREFERENCES, MODE_PRIVATE).getString(THEME_SAVED, LIGHTTHEME); if (theme.equals(LIGHTTHEME)) { mTheme = R.style.CustomStyle_LightTheme; } else { mTheme = R.style.CustomStyle_DarkTheme; } this.getActivity().setTheme(mTheme); super.onCreate(savedInstanceState); SharedPreferences sharedPreferences = getActivity().getSharedPreferences(SHARED_PREF_DATA_SET_CHANGED, MODE_PRIVATE); SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putBoolean(CHANGE_OCCURED, false); editor.apply(); storeRetrieveData = new StoreRetrieveData(getContext(), FILENAME); mToDoItemsArrayList = getLocallyStoredData(storeRetrieveData); adapter = new MainFragment.BasicListAdapter(mToDoItemsArrayList); setAlarms(); mCoordLayout = (CoordinatorLayout) view.findViewById(R.id.myCoordinatorLayout); mAddToDoItemFAB = (FloatingActionButton) view.findViewById(R.id.addToDoItemFAB); mAddToDoItemFAB.setOnClickListener(new View.OnClickListener() { @SuppressWarnings(\"deprecation\") @Override public void onClick(View v) { app.send(this, \"Action\", \"FAB pressed\"); Intent newTodo = new Intent(getContext(), AddToDoActivity.class); ToDoItem item = new ToDoItem(\"\",\"\", false, null); int color = ColorGenerator.MATERIAL.getRandomColor(); item.setTodoColor(color); newTodo.putExtra(TODOITEM, item); startActivityForResult(newTodo, REQUEST_ID_TODO_ITEM); } }); mRecyclerView = (RecyclerViewEmptySupport) view.findViewById(R.id.toDoRecyclerView); if (theme.equals(LIGHTTHEME)) { mRecyclerView.setBackgroundColor(getResources().getColor(R.color.primary_lightest)); } mRecyclerView.setEmptyView(view.findViewById(R.id.toDoEmptyView)); mRecyclerView.setHasFixedSize(true); mRecyclerView.setItemAnimator(new DefaultItemAnimator()); mRecyclerView.setLayoutManager(new LinearLayoutManager(getContext())); customRecyclerScrollViewListener = new CustomRecyclerScrollViewListener() { @Override public void show() { mAddToDoItemFAB.animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start(); } @Override public void hide() { CoordinatorLayout.LayoutParams lp = (CoordinatorLayout.LayoutParams) mAddToDoItemFAB.getLayoutParams(); int fabMargin = lp.bottomMargin; mAddToDoItemFAB.animate().translationY(mAddToDoItemFAB.getHeight() + fabMargin).setInterpolator(new AccelerateInterpolator(2.0f)).start(); } }; mRecyclerView.addOnScrollListener(customRecyclerScrollViewListener); ItemTouchHelper.Callback callback = new ItemTouchHelperClass(adapter); itemTouchHelper = new ItemTouchHelper(callback); itemTouchHelper.attachToRecyclerView(mRecyclerView); mRecyclerView.setAdapter(adapter); } public static ArrayList<ToDoItem> getLocallyStoredData(StoreRetrieveData storeRetrieveData) { ArrayList<ToDoItem> items = null; try { items = storeRetrieveData.loadFromFile(); } catch (IOException | JSONException e) { e.printStackTrace(); } if (items == null) { items = new ArrayList<>(); } return items; } @Override public void onResume() { super.onResume(); app.send(this); SharedPreferences sharedPreferences = getActivity().getSharedPreferences(SHARED_PREF_DATA_SET_CHANGED, MODE_PRIVATE); if (sharedPreferences.getBoolean(ReminderFragment.EXIT, false)) { SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putBoolean(ReminderFragment.EXIT, false); editor.apply(); getActivity().finish(); } if (getActivity().getSharedPreferences(THEME_PREFERENCES, MODE_PRIVATE).getBoolean(RECREATE_ACTIVITY, false)) { SharedPreferences.Editor editor = getActivity().getSharedPreferences(THEME_PREFERENCES, MODE_PRIVATE).edit(); editor.putBoolean(RECREATE_ACTIVITY, false); editor.apply(); getActivity().recreate(); } } @Override public void onStart() { app = (AnalyticsApplication) getActivity().getApplication(); super.onStart(); SharedPreferences sharedPreferences = getActivity().getSharedPreferences(SHARED_PREF_DATA_SET_CHANGED, MODE_PRIVATE); if (sharedPreferences.getBoolean(CHANGE_OCCURED, false)) { mToDoItemsArrayList = getLocallyStoredData(storeRetrieveData); adapter = new MainFragment.BasicListAdapter(mToDoItemsArrayList); mRecyclerView.setAdapter(adapter); setAlarms(); SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putBoolean(CHANGE_OCCURED, false); editor.apply(); } } private void setAlarms() { if (mToDoItemsArrayList != null) { for (ToDoItem item : mToDoItemsArrayList) { if (item.hasReminder() && item.getToDoDate() != null) { if (item.getToDoDate().before(new Date())) { item.setToDoDate(null); continue; } Intent i = new Intent(getContext(), TodoNotificationService.class); i.putExtra(TodoNotificationService.TODOUUID, item.getIdentifier()); i.putExtra(TodoNotificationService.TODOTEXT, item.getToDoText()); createAlarm(i, item.getIdentifier().hashCode(), item.getToDoDate().getTime()); } } } } public void addThemeToSharedPreferences(String theme) { SharedPreferences sharedPreferences = getActivity().getSharedPreferences(THEME_PREFERENCES, MODE_PRIVATE); SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putString(THEME_SAVED, theme); editor.apply(); } public boolean onCreateOptionsMenu(Menu menu) { getActivity().getMenuInflater().inflate(R.menu.menu_main, menu); return true; } @Override public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()) { case R.id.aboutMeMenuItem: Intent i = new Intent(getContext(), AboutActivity.class); startActivity(i); return true; case R.id.preferences: Intent intent = new Intent(getContext(), SettingsActivity.class); startActivity(intent); return true; default: return super.onOptionsItemSelected(item); } } @Override public void onActivityResult(int requestCode, int resultCode, Intent data) { if (resultCode != RESULT_CANCELED && requestCode == REQUEST_ID_TODO_ITEM) { ToDoItem item = (ToDoItem) data.getSerializableExtra(TODOITEM); if (item.getToDoText().length() <= 0) { return; } boolean existed = false; if (item.hasReminder() && item.getToDoDate() != null) { Intent i = new Intent(getContext(), TodoNotificationService.class); i.putExtra(TodoNotificationService.TODOTEXT, item.getToDoText()); i.putExtra(TodoNotificationService.TODOUUID, item.getIdentifier()); createAlarm(i, item.getIdentifier().hashCode(), item.getToDoDate().getTime()); } for (int i = 0; i < mToDoItemsArrayList.size(); i++) { if (item.getIdentifier().equals(mToDoItemsArrayList.get(i).getIdentifier())) { mToDoItemsArrayList.set(i, item); existed = true; adapter.notifyDataSetChanged(); break; } } if (!existed) { addToDataStore(item); } } } private AlarmManager getAlarmManager() { return (AlarmManager) getActivity().getSystemService(ALARM_SERVICE); } private boolean doesPendingIntentExist(Intent i, int requestCode) { PendingIntent pi = PendingIntent.getService(getContext(), requestCode, i, PendingIntent.FLAG_NO_CREATE); return pi != null; } private void createAlarm(Intent i, int requestCode, long timeInMillis) { AlarmManager am = getAlarmManager(); PendingIntent pi = PendingIntent.getService(getContext(), requestCode, i, PendingIntent.FLAG_UPDATE_CURRENT); am.set(AlarmManager.RTC_WAKEUP, timeInMillis, pi); } private void deleteAlarm(Intent i, int requestCode) { if (doesPendingIntentExist(i, requestCode)) { PendingIntent pi = PendingIntent.getService(getContext(), requestCode, i, PendingIntent.FLAG_NO_CREATE); pi.cancel(); getAlarmManager().cancel(pi); Log.d(\"OskarSchindler\", \"PI Cancelled \" + doesPendingIntentExist(i, requestCode)); } } private void addToDataStore(ToDoItem item) { mToDoItemsArrayList.add(item); adapter.notifyItemInserted(mToDoItemsArrayList.size() - 1); } public void makeUpItems(ArrayList<ToDoItem> items, int len) { for (String testString : testStrings) { ToDoItem item = new ToDoItem(testString,testString, false, new Date()); items.add(item); } } public class BasicListAdapter extends RecyclerView.Adapter<BasicListAdapter.ViewHolder> implements ItemTouchHelperClass.ItemTouchHelperAdapter { private ArrayList<ToDoItem> items; @Override public void onItemMoved(int fromPosition, int toPosition) { if (fromPosition < toPosition) { for (int i = fromPosition; i < toPosition; i++) { Collections.swap(items, i, i + 1); } } else { for (int i = fromPosition; i > toPosition; i--) { Collections.swap(items, i, i - 1); } } notifyItemMoved(fromPosition, toPosition); } @Override public void onItemRemoved(final int position) { app.send(this, \"Action\", \"Swiped Todo Away\"); mJustDeletedToDoItem = items.remove(position); mIndexOfDeletedToDoItem = position; Intent i = new Intent(getContext(), TodoNotificationService.class); deleteAlarm(i, mJustDeletedToDoItem.getIdentifier().hashCode()); notifyItemRemoved(position); String toShow = \"Todo\"; Snackbar.make(mCoordLayout, \"Deleted \" + toShow, Snackbar.LENGTH_LONG) .setAction(\"UNDO\", new View.OnClickListener() { @Override public void onClick(View v) { app.send(this, \"Action\", \"UNDO Pressed\"); items.add(mIndexOfDeletedToDoItem, mJustDeletedToDoItem); if (mJustDeletedToDoItem.getToDoDate() != null && mJustDeletedToDoItem.hasReminder()) { Intent i = new Intent(getContext(), TodoNotificationService.class); i.putExtra(TodoNotificationService.TODOTEXT, mJustDeletedToDoItem.getToDoText()); i.putExtra(TodoNotificationService.TODOUUID, mJustDeletedToDoItem.getIdentifier()); createAlarm(i, mJustDeletedToDoItem.getIdentifier().hashCode(), mJustDeletedToDoItem.getToDoDate().getTime()); } notifyItemInserted(mIndexOfDeletedToDoItem); } }).show(); } @Override public BasicListAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) { View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.list_circle_try, parent, false); return new ViewHolder(v); } @Override public void onBindViewHolder(final BasicListAdapter.ViewHolder holder, final int position) { ToDoItem item = items.get(position); SharedPreferences sharedPreferences = getActivity().getSharedPreferences(THEME_PREFERENCES, MODE_PRIVATE); int bgColor; int todoTextColor; if (sharedPreferences.getString(THEME_SAVED, LIGHTTHEME).equals(LIGHTTHEME)) { bgColor = Color.WHITE; todoTextColor = getResources().getColor(R.color.secondary_text); } else { bgColor = Color.DKGRAY; todoTextColor = Color.WHITE; } holder.linearLayout.setBackgroundColor(bgColor); if (item.hasReminder() && item.getToDoDate() != null) { holder.mToDoTextview.setMaxLines(1); holder.mTimeTextView.setVisibility(View.VISIBLE); } else { holder.mTimeTextView.setVisibility(View.GONE); holder.mToDoTextview.setMaxLines(2); } holder.mToDoTextview.setText(item.getToDoText()); holder.mToDoTextview.setTextColor(todoTextColor); TextDrawable myDrawable = TextDrawable.builder().beginConfig() .textColor(Color.WHITE) .useFont(Typeface.DEFAULT) .toUpperCase() .endConfig() .buildRound(item.getToDoText().substring(0, 1), item.getTodoColor()); holder.mColorImageView.setImageDrawable(myDrawable); if (item.getToDoDate() != null) { String timeToShow; if (android.text.format.DateFormat.is24HourFormat(getContext())) { timeToShow = AddToDoFragment.formatDate(MainFragment.DATE_TIME_FORMAT_24_HOUR, item.getToDoDate()); } else { timeToShow = AddToDoFragment.formatDate(MainFragment.DATE_TIME_FORMAT_12_HOUR, item.getToDoDate()); } holder.mTimeTextView.setText(timeToShow); } } @Override public int getItemCount() { return items.size(); } BasicListAdapter(ArrayList<ToDoItem> items) { this.items = items; } @SuppressWarnings(\"deprecation\") public class ViewHolder extends RecyclerView.ViewHolder { View mView; LinearLayout linearLayout; TextView mToDoTextview; ImageView mColorImageView; TextView mTimeTextView; public ViewHolder(View v) { super(v); mView = v; v.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { ToDoItem item = items.get(ViewHolder.this.getAdapterPosition()); Intent i = new Intent(getContext(), AddToDoActivity.class); i.putExtra(TODOITEM, item); startActivityForResult(i, REQUEST_ID_TODO_ITEM); } }); mToDoTextview = (TextView) v.findViewById(R.id.toDoListItemTextview); mTimeTextView = (TextView) v.findViewById(R.id.todoListItemTimeTextView); mColorImageView = (ImageView) v.findViewById(R.id.toDoListItemColorImageView); linearLayout = (LinearLayout) v.findViewById(R.id.listItemLinearLayout); } } } private void saveDate() { try { storeRetrieveData.saveToFile(mToDoItemsArrayList); } catch (JSONException | IOException e) { e.printStackTrace(); } } @Override public void onPause() { super.onPause(); try { storeRetrieveData.saveToFile(mToDoItemsArrayList); } catch (JSONException | IOException e) { e.printStackTrace(); } } @Override public void onDestroy() { super.onDestroy(); mRecyclerView.removeOnScrollListener(customRecyclerScrollViewListener); } @Override protected int layoutRes() { return R.layout.fragment_main; } public static MainFragment newInstance() { return new MainFragment(); } }","dependencies":[{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/AddToDo/AddToDoFragment.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.AddToDo; import android.animation.Animator; import android.content.ClipData; import android.content.ClipboardManager; import android.content.Context; import android.content.Intent; import android.graphics.Color; import android.graphics.PorterDuff; import android.graphics.drawable.Drawable; import android.os.Bundle; import android.support.annotation.Nullable; import android.support.design.widget.FloatingActionButton; import android.support.v4.app.NavUtils; import android.support.v7.app.AppCompatActivity; import android.support.v7.widget.SwitchCompat; import android.support.v7.widget.Toolbar; import android.text.Editable; import android.text.TextWatcher; import android.text.format.DateFormat; import android.util.Log; import android.view.MenuItem; import android.view.View; import android.view.inputmethod.InputMethodManager; import android.widget.Button; import android.widget.CompoundButton; import android.widget.EditText; import android.widget.ImageButton; import android.widget.LinearLayout; import android.widget.TextView; import android.content.ClipboardManager; import android.widget.Toast; import com.example.avjindersinghsekhon.minimaltodo.Analytics.AnalyticsApplication; import com.example.avjindersinghsekhon.minimaltodo.AppDefault.AppDefaultFragment; import com.example.avjindersinghsekhon.minimaltodo.Main.MainActivity; import com.example.avjindersinghsekhon.minimaltodo.Main.MainFragment; import com.example.avjindersinghsekhon.minimaltodo.R; import com.example.avjindersinghsekhon.minimaltodo.Utility.ToDoItem; import com.wdullaer.materialdatetimepicker.date.DatePickerDialog; import com.wdullaer.materialdatetimepicker.time.RadialPickerLayout; import com.wdullaer.materialdatetimepicker.time.TimePickerDialog; import java.text.SimpleDateFormat; import java.util.Calendar; import java.util.Date; import static android.app.Activity.RESULT_CANCELED; import static android.app.Activity.RESULT_OK; import static android.content.Context.INPUT_METHOD_SERVICE; import static android.content.Context.MODE_PRIVATE; public class AddToDoFragment extends AppDefaultFragment implements DatePickerDialog.OnDateSetListener, TimePickerDialog.OnTimeSetListener { private static final String TAG = \"AddToDoFragment\"; private Date mLastEdited; private EditText mToDoTextBodyEditText; private EditText mToDoTextBodyDescription; private SwitchCompat mToDoDateSwitch; private LinearLayout mUserDateSpinnerContainingLinearLayout; private TextView mReminderTextView; private String CombinationText; private EditText mDateEditText; private EditText mTimeEditText; private String mDefaultTimeOptions12H[]; private String mDefaultTimeOptions24H[]; private Button mChooseDateButton; private Button mChooseTimeButton; private Button mCopyClipboard; private ToDoItem mUserToDoItem; private FloatingActionButton mToDoSendFloatingActionButton; public static final String DATE_FORMAT = \"MMM d, yyyy\"; public static final String DATE_FORMAT_MONTH_DAY = \"MMM d\"; public static final String DATE_FORMAT_TIME = \"H:m\"; private String mUserEnteredText; private String mUserEnteredDescription; private boolean mUserHasReminder; private Toolbar mToolbar; private Date mUserReminderDate; private int mUserColor; private boolean setDateButtonClickedOnce = false; private boolean setTimeButtonClickedOnce = false; private LinearLayout mContainerLayout; private String theme; AnalyticsApplication app; @Override public void onViewCreated(View view, @Nullable Bundle savedInstanceState) { super.onViewCreated(view, savedInstanceState); app = (AnalyticsApplication) getActivity().getApplication(); ImageButton reminderIconImageButton; TextView reminderRemindMeTextView; theme = getActivity().getSharedPreferences(MainFragment.THEME_PREFERENCES, MODE_PRIVATE).getString(MainFragment.THEME_SAVED, MainFragment.LIGHTTHEME); if (theme.equals(MainFragment.LIGHTTHEME)) { getActivity().setTheme(R.style.CustomStyle_LightTheme); Log.d(\"OskarSchindler\", \"Light Theme\"); } else { getActivity().setTheme(R.style.CustomStyle_DarkTheme); } final Drawable cross = getResources().getDrawable(R.drawable.ic_clear_white_24dp); if (cross != null) { cross.setColorFilter(getResources().getColor(R.color.icons), PorterDuff.Mode.SRC_ATOP); } mToolbar = (Toolbar) view.findViewById(R.id.toolbar); ((AppCompatActivity) getActivity()).setSupportActionBar(mToolbar); if (((AppCompatActivity) getActivity()).getSupportActionBar() != null) { ((AppCompatActivity) getActivity()).getSupportActionBar().setElevation(0); ((AppCompatActivity) getActivity()).getSupportActionBar().setDisplayShowTitleEnabled(false); ((AppCompatActivity) getActivity()).getSupportActionBar().setDisplayHomeAsUpEnabled(true); ((AppCompatActivity) getActivity()).getSupportActionBar().setHomeAsUpIndicator(cross); } mUserToDoItem = (ToDoItem) getActivity().getIntent().getSerializableExtra(MainFragment.TODOITEM); mUserEnteredText = mUserToDoItem.getToDoText(); mUserEnteredDescription = mUserToDoItem.getmToDoDescription(); mUserHasReminder = mUserToDoItem.hasReminder(); mUserReminderDate = mUserToDoItem.getToDoDate(); mUserColor = mUserToDoItem.getTodoColor(); reminderIconImageButton = (ImageButton) view.findViewById(R.id.userToDoReminderIconImageButton); reminderRemindMeTextView = (TextView) view.findViewById(R.id.userToDoRemindMeTextView); if (theme.equals(MainFragment.DARKTHEME)) { reminderIconImageButton.setImageDrawable(getResources().getDrawable(R.drawable.ic_alarm_add_white_24dp)); reminderRemindMeTextView.setTextColor(Color.WHITE); } mCopyClipboard = (Button) view.findViewById(R.id.copyclipboard); mContainerLayout = (LinearLayout) view.findViewById(R.id.todoReminderAndDateContainerLayout); mUserDateSpinnerContainingLinearLayout = (LinearLayout) view.findViewById(R.id.toDoEnterDateLinearLayout); mToDoTextBodyEditText = (EditText) view.findViewById(R.id.userToDoEditText); mToDoTextBodyDescription= (EditText) view.findViewById(R.id.userToDoDescription); mToDoDateSwitch = (SwitchCompat) view.findViewById(R.id.toDoHasDateSwitchCompat); mToDoSendFloatingActionButton = (FloatingActionButton) view.findViewById(R.id.makeToDoFloatingActionButton); mReminderTextView = (TextView) view.findViewById(R.id.newToDoDateTimeReminderTextView); mCopyClipboard.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { String toDoTextContainer = mToDoTextBodyEditText.getText().toString(); String toDoTextBodyDescriptionContainer = mToDoTextBodyDescription.getText().toString(); ClipboardManager clipboard = (ClipboardManager) getActivity().getSystemService(Context.CLIPBOARD_SERVICE); CombinationText = \"Title : \" + toDoTextContainer + \"\\nDescription : \" + toDoTextBodyDescriptionContainer + \"\\n -Copied From MinimalToDo\"; ClipData clip = ClipData.newPlainText(\"text\", CombinationText); clipboard.setPrimaryClip(clip); Toast.makeText(getContext(), \"Copied To Clipboard!\", Toast.LENGTH_SHORT).show(); } }); mContainerLayout.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { hideKeyboard(mToDoTextBodyEditText); hideKeyboard(mToDoTextBodyDescription); } }); if (mUserHasReminder && (mUserReminderDate != null)) { setReminderTextView(); setEnterDateLayoutVisibleWithAnimations(true); } if (mUserReminderDate == null) { mToDoDateSwitch.setChecked(false); mReminderTextView.setVisibility(View.INVISIBLE); } mToDoTextBodyEditText.requestFocus(); mToDoTextBodyEditText.setText(mUserEnteredText); mToDoTextBodyDescription.setText(mUserEnteredDescription); InputMethodManager imm = (InputMethodManager) this.getActivity().getSystemService(INPUT_METHOD_SERVICE); imm.toggleSoftInput(InputMethodManager.SHOW_FORCED, InputMethodManager.HIDE_IMPLICIT_ONLY); mToDoTextBodyEditText.setSelection(mToDoTextBodyEditText.length()); mToDoTextBodyEditText.addTextChangedListener(new TextWatcher() { @Override public void beforeTextChanged(CharSequence s, int start, int count, int after) { } @Override public void onTextChanged(CharSequence s, int start, int before, int count) { mUserEnteredText = s.toString(); } @Override public void afterTextChanged(Editable s) { } }); mToDoTextBodyDescription.setText(mUserEnteredDescription); mToDoTextBodyDescription.setSelection(mToDoTextBodyDescription.length()); mToDoTextBodyDescription.addTextChangedListener(new TextWatcher() { @Override public void beforeTextChanged(CharSequence s, int start, int count, int after) { } @Override public void onTextChanged(CharSequence s, int start, int before, int count) { mUserEnteredDescription = s.toString(); } @Override public void afterTextChanged(Editable s) { } }); setEnterDateLayoutVisible(mToDoDateSwitch.isChecked()); mToDoDateSwitch.setChecked(mUserHasReminder && (mUserReminderDate != null)); mToDoDateSwitch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() { @Override public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) { if (isChecked) { app.send(this, \"Action\", \"Reminder Set\"); } else { app.send(this, \"Action\", \"Reminder Removed\"); } if (!isChecked) { mUserReminderDate = null; } mUserHasReminder = isChecked; setDateAndTimeEditText(); setEnterDateLayoutVisibleWithAnimations(isChecked); hideKeyboard(mToDoTextBodyEditText); hideKeyboard(mToDoTextBodyDescription); } }); mToDoSendFloatingActionButton.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { if (mToDoTextBodyEditText.length() <= 0) { mToDoTextBodyEditText.setError(getString(R.string.todo_error)); } else if (mUserReminderDate != null && mUserReminderDate.before(new Date())) { app.send(this, \"Action\", \"Date in the Past\"); makeResult(RESULT_CANCELED); } else { app.send(this, \"Action\", \"Make Todo\"); makeResult(RESULT_OK); getActivity().finish(); } hideKeyboard(mToDoTextBodyEditText); hideKeyboard(mToDoTextBodyDescription); } }); mDateEditText = (EditText) view.findViewById(R.id.newTodoDateEditText); mTimeEditText = (EditText) view.findViewById(R.id.newTodoTimeEditText); mDateEditText.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { Date date; hideKeyboard(mToDoTextBodyEditText); if (mUserToDoItem.getToDoDate() != null) { date = mUserReminderDate; } else { date = new Date(); } Calendar calendar = Calendar.getInstance(); calendar.setTime(date); int year = calendar.get(Calendar.YEAR); int month = calendar.get(Calendar.MONTH); int day = calendar.get(Calendar.DAY_OF_MONTH); DatePickerDialog datePickerDialog = DatePickerDialog.newInstance(AddToDoFragment.this, year, month, day); if (theme.equals(MainFragment.DARKTHEME)) { datePickerDialog.setThemeDark(true); } datePickerDialog.show(getActivity().getFragmentManager(), \"DateFragment\"); } }); mTimeEditText.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { Date date; hideKeyboard(mToDoTextBodyEditText); if (mUserToDoItem.getToDoDate() != null) { date = mUserReminderDate; } else { date = new Date(); } Calendar calendar = Calendar.getInstance(); calendar.setTime(date); int hour = calendar.get(Calendar.HOUR_OF_DAY); int minute = calendar.get(Calendar.MINUTE); TimePickerDialog timePickerDialog = TimePickerDialog.newInstance(AddToDoFragment.this, hour, minute, DateFormat.is24HourFormat(getContext())); if (theme.equals(MainFragment.DARKTHEME)) { timePickerDialog.setThemeDark(true); } timePickerDialog.show(getActivity().getFragmentManager(), \"TimeFragment\"); } }); setDateAndTimeEditText(); } private void setDateAndTimeEditText() { if (mUserToDoItem.hasReminder() && mUserReminderDate != null) { String userDate = formatDate(\"d MMM, yyyy\", mUserReminderDate); String formatToUse; if (DateFormat.is24HourFormat(getContext())) { formatToUse = \"k:mm\"; } else { formatToUse = \"h:mm a\"; } String userTime = formatDate(formatToUse, mUserReminderDate); mTimeEditText.setText(userTime); mDateEditText.setText(userDate); } else { mDateEditText.setText(getString(R.string.date_reminder_default)); boolean time24 = DateFormat.is24HourFormat(getContext()); Calendar cal = Calendar.getInstance(); if (time24) { cal.set(Calendar.HOUR_OF_DAY, cal.get(Calendar.HOUR_OF_DAY) + 1); } else { cal.set(Calendar.HOUR, cal.get(Calendar.HOUR) + 1); } cal.set(Calendar.MINUTE, 0); mUserReminderDate = cal.getTime(); Log.d(\"OskarSchindler\", \"Imagined Date: \" + mUserReminderDate); String timeString; if (time24) { timeString = formatDate(\"k:mm\", mUserReminderDate); } else { timeString = formatDate(\"h:mm a\", mUserReminderDate); } mTimeEditText.setText(timeString); } } private String getThemeSet() { return getActivity().getSharedPreferences(MainFragment.THEME_PREFERENCES, MODE_PRIVATE).getString(MainFragment.THEME_SAVED, MainFragment.LIGHTTHEME); } public void hideKeyboard(EditText et) { InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(INPUT_METHOD_SERVICE); imm.hideSoftInputFromWindow(et.getWindowToken(), 0); } public void setDate(int year, int month, int day) { Calendar calendar = Calendar.getInstance(); int hour, minute; Calendar reminderCalendar = Calendar.getInstance(); reminderCalendar.set(year, month, day); if (reminderCalendar.before(calendar)) { return; } if (mUserReminderDate != null) { calendar.setTime(mUserReminderDate); } if (DateFormat.is24HourFormat(getContext())) { hour = calendar.get(Calendar.HOUR_OF_DAY); } else { hour = calendar.get(Calendar.HOUR); } minute = calendar.get(Calendar.MINUTE); calendar.set(year, month, day, hour, minute); mUserReminderDate = calendar.getTime(); setReminderTextView(); setDateEditText(); } public void setTime(int hour, int minute) { Calendar calendar = Calendar.getInstance(); if (mUserReminderDate != null) { calendar.setTime(mUserReminderDate); } int year = calendar.get(Calendar.YEAR); int month = calendar.get(Calendar.MONTH); int day = calendar.get(Calendar.DAY_OF_MONTH); Log.d(\"OskarSchindler\", \"Time set: \" + hour); calendar.set(year, month, day, hour, minute, 0); mUserReminderDate = calendar.getTime(); setReminderTextView(); setTimeEditText(); } public void setDateEditText() { String dateFormat = \"d MMM, yyyy\"; mDateEditText.setText(formatDate(dateFormat, mUserReminderDate)); } public void setTimeEditText() { String dateFormat; if (DateFormat.is24HourFormat(getContext())) { dateFormat = \"k:mm\"; } else { dateFormat = \"h:mm a\"; } mTimeEditText.setText(formatDate(dateFormat, mUserReminderDate)); } public void setReminderTextView() { if (mUserReminderDate != null) { mReminderTextView.setVisibility(View.VISIBLE); if (mUserReminderDate.before(new Date())) { Log.d(\"OskarSchindler\", \"DATE is \" + mUserReminderDate); mReminderTextView.setText(getString(R.string.date_error_check_again)); mReminderTextView.setTextColor(Color.RED); return; } Date date = mUserReminderDate; String dateString = formatDate(\"d MMM, yyyy\", date); String timeString; String amPmString = \"\"; if (DateFormat.is24HourFormat(getContext())) { timeString = formatDate(\"k:mm\", date); } else { timeString = formatDate(\"h:mm\", date); amPmString = formatDate(\"a\", date); } String finalString = String.format(getResources().getString(R.string.remind_date_and_time), dateString, timeString, amPmString); mReminderTextView.setTextColor(getResources().getColor(R.color.secondary_text)); mReminderTextView.setText(finalString); } else { mReminderTextView.setVisibility(View.INVISIBLE); } } public void makeResult(int result) { Log.d(TAG, \"makeResult - ok : in\"); Intent i = new Intent(); if (mUserEnteredText.length() > 0) { String capitalizedString = Character.toUpperCase(mUserEnteredText.charAt(0)) + mUserEnteredText.substring(1); mUserToDoItem.setToDoText(capitalizedString); Log.d(TAG, \"Description: \" + mUserEnteredDescription); mUserToDoItem.setmToDoDescription(mUserEnteredDescription); } else { mUserToDoItem.setToDoText(mUserEnteredText); Log.d(TAG, \"Description: \" + mUserEnteredDescription); mUserToDoItem.setmToDoDescription(mUserEnteredDescription); } if (mUserReminderDate != null) { Calendar calendar = Calendar.getInstance(); calendar.setTime(mUserReminderDate); calendar.set(Calendar.SECOND, 0); mUserReminderDate = calendar.getTime(); } mUserToDoItem.setHasReminder(mUserHasReminder); mUserToDoItem.setToDoDate(mUserReminderDate); mUserToDoItem.setTodoColor(mUserColor); i.putExtra(MainFragment.TODOITEM, mUserToDoItem); getActivity().setResult(result, i); } @Override public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()) { case android.R.id.home: if (NavUtils.getParentActivityName(getActivity()) != null) { app.send(this, \"Action\", \"Discard Todo\"); makeResult(RESULT_CANCELED); NavUtils.navigateUpFromSameTask(getActivity()); } hideKeyboard(mToDoTextBodyEditText); return true; default: return super.onOptionsItemSelected(item); } } public static String formatDate(String formatString, Date dateToFormat) { SimpleDateFormat simpleDateFormat = new SimpleDateFormat(formatString); return simpleDateFormat.format(dateToFormat); } @Override public void onTimeSet(RadialPickerLayout radialPickerLayout, int hour, int minute) { setTime(hour, minute); } @Override public void onDateSet(DatePickerDialog datePickerDialog, int year, int month, int day) { setDate(year, month, day); } public void setEnterDateLayoutVisible(boolean checked) { if (checked) { mUserDateSpinnerContainingLinearLayout.setVisibility(View.VISIBLE); } else { mUserDateSpinnerContainingLinearLayout.setVisibility(View.INVISIBLE); } } public void setEnterDateLayoutVisibleWithAnimations(boolean checked) { if (checked) { setReminderTextView(); mUserDateSpinnerContainingLinearLayout.animate().alpha(1.0f).setDuration(500).setListener( new Animator.AnimatorListener() { @Override public void onAnimationStart(Animator animation) { mUserDateSpinnerContainingLinearLayout.setVisibility(View.VISIBLE); } @Override public void onAnimationEnd(Animator animation) { } @Override public void onAnimationCancel(Animator animation) { } @Override public void onAnimationRepeat(Animator animation) { } } ); } else { mUserDateSpinnerContainingLinearLayout.animate().alpha(0.0f).setDuration(500).setListener( new Animator.AnimatorListener() { @Override public void onAnimationStart(Animator animation) { } @Override public void onAnimationEnd(Animator animation) { mUserDateSpinnerContainingLinearLayout.setVisibility(View.INVISIBLE); } @Override public void onAnimationCancel(Animator animation) { } @Override public void onAnimationRepeat(Animator animation) { } } ); } } @Override protected int layoutRes() { return R.layout.fragment_add_to_do; } public static AddToDoFragment newInstance() { return new AddToDoFragment(); } }"}]}}
{"project_id":215,"chunk_id":2,"content":{"main_file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Main/MainFragment.java","main_file_content":"package com.example.avjindersinghsekhon.minimaltodo.Main; import android.app.AlarmManager; import android.app.PendingIntent; import android.content.Intent; import android.content.SharedPreferences; import android.graphics.Color; import android.graphics.Typeface; import android.os.Bundle; import android.support.annotation.Nullable; import android.support.design.widget.CoordinatorLayout; import android.support.design.widget.FloatingActionButton; import android.support.design.widget.Snackbar; import android.support.v7.widget.DefaultItemAnimator; import android.support.v7.widget.LinearLayoutManager; import android.support.v7.widget.RecyclerView; import android.support.v7.widget.helper.ItemTouchHelper; import android.util.Log; import android.view.LayoutInflater; import android.view.Menu; import android.view.MenuItem; import android.view.View; import android.view.ViewGroup; import android.view.animation.AccelerateInterpolator; import android.view.animation.DecelerateInterpolator; import android.widget.ImageView; import android.widget.LinearLayout; import android.widget.TextView; import com.amulyakhare.textdrawable.TextDrawable; import com.amulyakhare.textdrawable.util.ColorGenerator; import com.example.avjindersinghsekhon.minimaltodo.About.AboutActivity; import com.example.avjindersinghsekhon.minimaltodo.AddToDo.AddToDoActivity; import com.example.avjindersinghsekhon.minimaltodo.AddToDo.AddToDoFragment; import com.example.avjindersinghsekhon.minimaltodo.Analytics.AnalyticsApplication; import com.example.avjindersinghsekhon.minimaltodo.AppDefault.AppDefaultFragment; import com.example.avjindersinghsekhon.minimaltodo.R; import com.example.avjindersinghsekhon.minimaltodo.Reminder.ReminderFragment; import com.example.avjindersinghsekhon.minimaltodo.Settings.SettingsActivity; import com.example.avjindersinghsekhon.minimaltodo.Utility.ItemTouchHelperClass; import com.example.avjindersinghsekhon.minimaltodo.Utility.RecyclerViewEmptySupport; import com.example.avjindersinghsekhon.minimaltodo.Utility.StoreRetrieveData; import com.example.avjindersinghsekhon.minimaltodo.Utility.ToDoItem; import com.example.avjindersinghsekhon.minimaltodo.Utility.TodoNotificationService; import org.json.JSONException; import java.io.IOException; import java.util.ArrayList; import java.util.Collections; import java.util.Date; import static android.app.Activity.RESULT_CANCELED; import static android.content.Context.ALARM_SERVICE; import static android.content.Context.MODE_PRIVATE; public class MainFragment extends AppDefaultFragment { private RecyclerViewEmptySupport mRecyclerView; private FloatingActionButton mAddToDoItemFAB; private ArrayList<ToDoItem> mToDoItemsArrayList; private CoordinatorLayout mCoordLayout; public static final String TODOITEM = \"com.avjindersinghsekhon.com.avjindersinghsekhon.minimaltodo.MainActivity\"; private MainFragment.BasicListAdapter adapter; private static final int REQUEST_ID_TODO_ITEM = 100; private ToDoItem mJustDeletedToDoItem; private int mIndexOfDeletedToDoItem; public static final String DATE_TIME_FORMAT_12_HOUR = \"MMM d, yyyy h:mm a\"; public static final String DATE_TIME_FORMAT_24_HOUR = \"MMM d, yyyy k:mm\"; public static final String FILENAME = \"todoitems.json\"; private StoreRetrieveData storeRetrieveData; public ItemTouchHelper itemTouchHelper; private CustomRecyclerScrollViewListener customRecyclerScrollViewListener; public static final String SHARED_PREF_DATA_SET_CHANGED = \"com.avjindersekhon.datasetchanged\"; public static final String CHANGE_OCCURED = \"com.avjinder.changeoccured\"; private int mTheme = -1; private String theme = \"name_of_the_theme\"; public static final String THEME_PREFERENCES = \"com.avjindersekhon.themepref\"; public static final String RECREATE_ACTIVITY = \"com.avjindersekhon.recreateactivity\"; public static final String THEME_SAVED = \"com.avjindersekhon.savedtheme\"; public static final String DARKTHEME = \"com.avjindersekon.darktheme\"; public static final String LIGHTTHEME = \"com.avjindersekon.lighttheme\"; private AnalyticsApplication app; private String[] testStrings = {\"Clean my room\", \"Water the plants\", \"Get car washed\", \"Get my dry cleaning\" }; @Override public void onViewCreated(View view, @Nullable Bundle savedInstanceState) { super.onViewCreated(view, savedInstanceState); app = (AnalyticsApplication) getActivity().getApplication(); theme = getActivity().getSharedPreferences(THEME_PREFERENCES, MODE_PRIVATE).getString(THEME_SAVED, LIGHTTHEME); if (theme.equals(LIGHTTHEME)) { mTheme = R.style.CustomStyle_LightTheme; } else { mTheme = R.style.CustomStyle_DarkTheme; } this.getActivity().setTheme(mTheme); super.onCreate(savedInstanceState); SharedPreferences sharedPreferences = getActivity().getSharedPreferences(SHARED_PREF_DATA_SET_CHANGED, MODE_PRIVATE); SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putBoolean(CHANGE_OCCURED, false); editor.apply(); storeRetrieveData = new StoreRetrieveData(getContext(), FILENAME); mToDoItemsArrayList = getLocallyStoredData(storeRetrieveData); adapter = new MainFragment.BasicListAdapter(mToDoItemsArrayList); setAlarms(); mCoordLayout = (CoordinatorLayout) view.findViewById(R.id.myCoordinatorLayout); mAddToDoItemFAB = (FloatingActionButton) view.findViewById(R.id.addToDoItemFAB); mAddToDoItemFAB.setOnClickListener(new View.OnClickListener() { @SuppressWarnings(\"deprecation\") @Override public void onClick(View v) { app.send(this, \"Action\", \"FAB pressed\"); Intent newTodo = new Intent(getContext(), AddToDoActivity.class); ToDoItem item = new ToDoItem(\"\",\"\", false, null); int color = ColorGenerator.MATERIAL.getRandomColor(); item.setTodoColor(color); newTodo.putExtra(TODOITEM, item); startActivityForResult(newTodo, REQUEST_ID_TODO_ITEM); } }); mRecyclerView = (RecyclerViewEmptySupport) view.findViewById(R.id.toDoRecyclerView); if (theme.equals(LIGHTTHEME)) { mRecyclerView.setBackgroundColor(getResources().getColor(R.color.primary_lightest)); } mRecyclerView.setEmptyView(view.findViewById(R.id.toDoEmptyView)); mRecyclerView.setHasFixedSize(true); mRecyclerView.setItemAnimator(new DefaultItemAnimator()); mRecyclerView.setLayoutManager(new LinearLayoutManager(getContext())); customRecyclerScrollViewListener = new CustomRecyclerScrollViewListener() { @Override public void show() { mAddToDoItemFAB.animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start(); } @Override public void hide() { CoordinatorLayout.LayoutParams lp = (CoordinatorLayout.LayoutParams) mAddToDoItemFAB.getLayoutParams(); int fabMargin = lp.bottomMargin; mAddToDoItemFAB.animate().translationY(mAddToDoItemFAB.getHeight() + fabMargin).setInterpolator(new AccelerateInterpolator(2.0f)).start(); } }; mRecyclerView.addOnScrollListener(customRecyclerScrollViewListener); ItemTouchHelper.Callback callback = new ItemTouchHelperClass(adapter); itemTouchHelper = new ItemTouchHelper(callback); itemTouchHelper.attachToRecyclerView(mRecyclerView); mRecyclerView.setAdapter(adapter); } public static ArrayList<ToDoItem> getLocallyStoredData(StoreRetrieveData storeRetrieveData) { ArrayList<ToDoItem> items = null; try { items = storeRetrieveData.loadFromFile(); } catch (IOException | JSONException e) { e.printStackTrace(); } if (items == null) { items = new ArrayList<>(); } return items; } @Override public void onResume() { super.onResume(); app.send(this); SharedPreferences sharedPreferences = getActivity().getSharedPreferences(SHARED_PREF_DATA_SET_CHANGED, MODE_PRIVATE); if (sharedPreferences.getBoolean(ReminderFragment.EXIT, false)) { SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putBoolean(ReminderFragment.EXIT, false); editor.apply(); getActivity().finish(); } if (getActivity().getSharedPreferences(THEME_PREFERENCES, MODE_PRIVATE).getBoolean(RECREATE_ACTIVITY, false)) { SharedPreferences.Editor editor = getActivity().getSharedPreferences(THEME_PREFERENCES, MODE_PRIVATE).edit(); editor.putBoolean(RECREATE_ACTIVITY, false); editor.apply(); getActivity().recreate(); } } @Override public void onStart() { app = (AnalyticsApplication) getActivity().getApplication(); super.onStart(); SharedPreferences sharedPreferences = getActivity().getSharedPreferences(SHARED_PREF_DATA_SET_CHANGED, MODE_PRIVATE); if (sharedPreferences.getBoolean(CHANGE_OCCURED, false)) { mToDoItemsArrayList = getLocallyStoredData(storeRetrieveData); adapter = new MainFragment.BasicListAdapter(mToDoItemsArrayList); mRecyclerView.setAdapter(adapter); setAlarms(); SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putBoolean(CHANGE_OCCURED, false); editor.apply(); } } private void setAlarms() { if (mToDoItemsArrayList != null) { for (ToDoItem item : mToDoItemsArrayList) { if (item.hasReminder() && item.getToDoDate() != null) { if (item.getToDoDate().before(new Date())) { item.setToDoDate(null); continue; } Intent i = new Intent(getContext(), TodoNotificationService.class); i.putExtra(TodoNotificationService.TODOUUID, item.getIdentifier()); i.putExtra(TodoNotificationService.TODOTEXT, item.getToDoText()); createAlarm(i, item.getIdentifier().hashCode(), item.getToDoDate().getTime()); } } } } public void addThemeToSharedPreferences(String theme) { SharedPreferences sharedPreferences = getActivity().getSharedPreferences(THEME_PREFERENCES, MODE_PRIVATE); SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putString(THEME_SAVED, theme); editor.apply(); } public boolean onCreateOptionsMenu(Menu menu) { getActivity().getMenuInflater().inflate(R.menu.menu_main, menu); return true; } @Override public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()) { case R.id.aboutMeMenuItem: Intent i = new Intent(getContext(), AboutActivity.class); startActivity(i); return true; case R.id.preferences: Intent intent = new Intent(getContext(), SettingsActivity.class); startActivity(intent); return true; default: return super.onOptionsItemSelected(item); } } @Override public void onActivityResult(int requestCode, int resultCode, Intent data) { if (resultCode != RESULT_CANCELED && requestCode == REQUEST_ID_TODO_ITEM) { ToDoItem item = (ToDoItem) data.getSerializableExtra(TODOITEM); if (item.getToDoText().length() <= 0) { return; } boolean existed = false; if (item.hasReminder() && item.getToDoDate() != null) { Intent i = new Intent(getContext(), TodoNotificationService.class); i.putExtra(TodoNotificationService.TODOTEXT, item.getToDoText()); i.putExtra(TodoNotificationService.TODOUUID, item.getIdentifier()); createAlarm(i, item.getIdentifier().hashCode(), item.getToDoDate().getTime()); } for (int i = 0; i < mToDoItemsArrayList.size(); i++) { if (item.getIdentifier().equals(mToDoItemsArrayList.get(i).getIdentifier())) { mToDoItemsArrayList.set(i, item); existed = true; adapter.notifyDataSetChanged(); break; } } if (!existed) { addToDataStore(item); } } } private AlarmManager getAlarmManager() { return (AlarmManager) getActivity().getSystemService(ALARM_SERVICE); } private boolean doesPendingIntentExist(Intent i, int requestCode) { PendingIntent pi = PendingIntent.getService(getContext(), requestCode, i, PendingIntent.FLAG_NO_CREATE); return pi != null; } private void createAlarm(Intent i, int requestCode, long timeInMillis) { AlarmManager am = getAlarmManager(); PendingIntent pi = PendingIntent.getService(getContext(), requestCode, i, PendingIntent.FLAG_UPDATE_CURRENT); am.set(AlarmManager.RTC_WAKEUP, timeInMillis, pi); } private void deleteAlarm(Intent i, int requestCode) { if (doesPendingIntentExist(i, requestCode)) { PendingIntent pi = PendingIntent.getService(getContext(), requestCode, i, PendingIntent.FLAG_NO_CREATE); pi.cancel(); getAlarmManager().cancel(pi); Log.d(\"OskarSchindler\", \"PI Cancelled \" + doesPendingIntentExist(i, requestCode)); } } private void addToDataStore(ToDoItem item) { mToDoItemsArrayList.add(item); adapter.notifyItemInserted(mToDoItemsArrayList.size() - 1); } public void makeUpItems(ArrayList<ToDoItem> items, int len) { for (String testString : testStrings) { ToDoItem item = new ToDoItem(testString,testString, false, new Date()); items.add(item); } } public class BasicListAdapter extends RecyclerView.Adapter<BasicListAdapter.ViewHolder> implements ItemTouchHelperClass.ItemTouchHelperAdapter { private ArrayList<ToDoItem> items; @Override public void onItemMoved(int fromPosition, int toPosition) { if (fromPosition < toPosition) { for (int i = fromPosition; i < toPosition; i++) { Collections.swap(items, i, i + 1); } } else { for (int i = fromPosition; i > toPosition; i--) { Collections.swap(items, i, i - 1); } } notifyItemMoved(fromPosition, toPosition); } @Override public void onItemRemoved(final int position) { app.send(this, \"Action\", \"Swiped Todo Away\"); mJustDeletedToDoItem = items.remove(position); mIndexOfDeletedToDoItem = position; Intent i = new Intent(getContext(), TodoNotificationService.class); deleteAlarm(i, mJustDeletedToDoItem.getIdentifier().hashCode()); notifyItemRemoved(position); String toShow = \"Todo\"; Snackbar.make(mCoordLayout, \"Deleted \" + toShow, Snackbar.LENGTH_LONG) .setAction(\"UNDO\", new View.OnClickListener() { @Override public void onClick(View v) { app.send(this, \"Action\", \"UNDO Pressed\"); items.add(mIndexOfDeletedToDoItem, mJustDeletedToDoItem); if (mJustDeletedToDoItem.getToDoDate() != null && mJustDeletedToDoItem.hasReminder()) { Intent i = new Intent(getContext(), TodoNotificationService.class); i.putExtra(TodoNotificationService.TODOTEXT, mJustDeletedToDoItem.getToDoText()); i.putExtra(TodoNotificationService.TODOUUID, mJustDeletedToDoItem.getIdentifier()); createAlarm(i, mJustDeletedToDoItem.getIdentifier().hashCode(), mJustDeletedToDoItem.getToDoDate().getTime()); } notifyItemInserted(mIndexOfDeletedToDoItem); } }).show(); } @Override public BasicListAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) { View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.list_circle_try, parent, false); return new ViewHolder(v); } @Override public void onBindViewHolder(final BasicListAdapter.ViewHolder holder, final int position) { ToDoItem item = items.get(position); SharedPreferences sharedPreferences = getActivity().getSharedPreferences(THEME_PREFERENCES, MODE_PRIVATE); int bgColor; int todoTextColor; if (sharedPreferences.getString(THEME_SAVED, LIGHTTHEME).equals(LIGHTTHEME)) { bgColor = Color.WHITE; todoTextColor = getResources().getColor(R.color.secondary_text); } else { bgColor = Color.DKGRAY; todoTextColor = Color.WHITE; } holder.linearLayout.setBackgroundColor(bgColor); if (item.hasReminder() && item.getToDoDate() != null) { holder.mToDoTextview.setMaxLines(1); holder.mTimeTextView.setVisibility(View.VISIBLE); } else { holder.mTimeTextView.setVisibility(View.GONE); holder.mToDoTextview.setMaxLines(2); } holder.mToDoTextview.setText(item.getToDoText()); holder.mToDoTextview.setTextColor(todoTextColor); TextDrawable myDrawable = TextDrawable.builder().beginConfig() .textColor(Color.WHITE) .useFont(Typeface.DEFAULT) .toUpperCase() .endConfig() .buildRound(item.getToDoText().substring(0, 1), item.getTodoColor()); holder.mColorImageView.setImageDrawable(myDrawable); if (item.getToDoDate() != null) { String timeToShow; if (android.text.format.DateFormat.is24HourFormat(getContext())) { timeToShow = AddToDoFragment.formatDate(MainFragment.DATE_TIME_FORMAT_24_HOUR, item.getToDoDate()); } else { timeToShow = AddToDoFragment.formatDate(MainFragment.DATE_TIME_FORMAT_12_HOUR, item.getToDoDate()); } holder.mTimeTextView.setText(timeToShow); } } @Override public int getItemCount() { return items.size(); } BasicListAdapter(ArrayList<ToDoItem> items) { this.items = items; } @SuppressWarnings(\"deprecation\") public class ViewHolder extends RecyclerView.ViewHolder { View mView; LinearLayout linearLayout; TextView mToDoTextview; ImageView mColorImageView; TextView mTimeTextView; public ViewHolder(View v) { super(v); mView = v; v.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { ToDoItem item = items.get(ViewHolder.this.getAdapterPosition()); Intent i = new Intent(getContext(), AddToDoActivity.class); i.putExtra(TODOITEM, item); startActivityForResult(i, REQUEST_ID_TODO_ITEM); } }); mToDoTextview = (TextView) v.findViewById(R.id.toDoListItemTextview); mTimeTextView = (TextView) v.findViewById(R.id.todoListItemTimeTextView); mColorImageView = (ImageView) v.findViewById(R.id.toDoListItemColorImageView); linearLayout = (LinearLayout) v.findViewById(R.id.listItemLinearLayout); } } } private void saveDate() { try { storeRetrieveData.saveToFile(mToDoItemsArrayList); } catch (JSONException | IOException e) { e.printStackTrace(); } } @Override public void onPause() { super.onPause(); try { storeRetrieveData.saveToFile(mToDoItemsArrayList); } catch (JSONException | IOException e) { e.printStackTrace(); } } @Override public void onDestroy() { super.onDestroy(); mRecyclerView.removeOnScrollListener(customRecyclerScrollViewListener); } @Override protected int layoutRes() { return R.layout.fragment_main; } public static MainFragment newInstance() { return new MainFragment(); } }","dependencies":[{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Analytics/AnalyticsApplication.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.Analytics; import android.app.Application; import android.content.pm.PackageManager; import com.example.avjindersinghsekhon.minimaltodo.R; import com.google.android.gms.analytics.GoogleAnalytics; import com.google.android.gms.analytics.HitBuilders; import com.google.android.gms.analytics.Tracker; import java.util.Map; public class AnalyticsApplication extends Application { private Tracker mTracker; private static final boolean IS_ENABLED = true; synchronized private Tracker getDefaultTracker() { if (mTracker == null) { GoogleAnalytics analytics = GoogleAnalytics.getInstance(this); mTracker = analytics.newTracker(R.xml.global_tracker); mTracker.setAppName(\"Minimal\"); mTracker.enableExceptionReporting(true); try { mTracker.setAppId(getPackageManager().getPackageInfo(getPackageName(), 0).versionName); } catch (PackageManager.NameNotFoundException e) { e.printStackTrace(); } } return mTracker; } public void send(Object screenName) { send(screenName, new HitBuilders.ScreenViewBuilder().build()); } private void send(Object screenName, Map<String, String> params) { if (IS_ENABLED) { Tracker tracker = getDefaultTracker(); tracker.setScreenName(getClassName(screenName)); tracker.send(params); } } private String getClassName(Object o) { Class c = o.getClass(); while (c.isAnonymousClass()) { c = c.getEnclosingClass(); } return c.getSimpleName(); } public void send(Object screenName, String category, String action) { send(screenName, new HitBuilders.EventBuilder().setCategory(category).setAction(action).build()); } public void send(Object screenName, String category, String action, String label) { send(screenName, new HitBuilders.EventBuilder().setCategory(category).setAction(action).setLabel(label).build()); } }"},{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/AppDefault/AppDefaultFragment.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.AppDefault; import android.os.Bundle; import android.support.annotation.LayoutRes; import android.support.annotation.Nullable; import android.support.v4.app.Fragment; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; public abstract class AppDefaultFragment extends Fragment { @Nullable @Override public View onCreateView( LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState ) { return inflater.inflate(layoutRes(), container, false); } @Override public void onDestroy() { super.onDestroy(); } @LayoutRes protected abstract int layoutRes(); }"},{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Main/CustomRecyclerScrollViewListener.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.Main; import android.support.v7.widget.RecyclerView; import android.util.Log; public abstract class CustomRecyclerScrollViewListener extends RecyclerView.OnScrollListener { int scrollDist = 0; boolean isVisible = true; static final float MINIMUM = 20; @Override public void onScrolled(RecyclerView recyclerView, int dx, int dy) { super.onScrolled(recyclerView, dx, dy); if (isVisible && scrollDist > MINIMUM) { Log.d(\"OskarSchindler\", \"Hide \" + scrollDist); hide(); scrollDist = 0; isVisible = false; } else if (!isVisible && scrollDist < -MINIMUM) { Log.d(\"OskarSchindler\", \"Show \" + scrollDist); show(); scrollDist = 0; isVisible = true; } if ((isVisible && dy > 0) || (!isVisible && dy < 0)) { Log.d(\"OskarSchindler\", \"Add Up \" + scrollDist); scrollDist += dy; } } public abstract void show(); public abstract void hide(); }"},{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Settings/SettingsActivity.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.Settings; import android.app.FragmentManager; import android.graphics.Color; import android.graphics.PorterDuff; import android.graphics.drawable.Drawable; import android.os.Bundle; import android.support.v4.app.NavUtils; import android.support.v7.app.AppCompatActivity; import android.support.v7.widget.Toolbar; import android.view.MenuItem; import com.example.avjindersinghsekhon.minimaltodo.Analytics.AnalyticsApplication; import com.example.avjindersinghsekhon.minimaltodo.Main.MainFragment; import com.example.avjindersinghsekhon.minimaltodo.R; public class SettingsActivity extends AppCompatActivity { AnalyticsApplication app; @Override protected void onResume() { super.onResume(); app.send(this); } @Override protected void onCreate(Bundle savedInstanceState) { app = (AnalyticsApplication) getApplication(); String theme = getSharedPreferences(MainFragment.THEME_PREFERENCES, MODE_PRIVATE).getString(MainFragment.THEME_SAVED, MainFragment.LIGHTTHEME); if (theme.equals(MainFragment.LIGHTTHEME)) { setTheme(R.style.CustomStyle_LightTheme); } else { setTheme(R.style.CustomStyle_DarkTheme); } super.onCreate(savedInstanceState); setContentView(R.layout.activity_settings); Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar); final Drawable backArrow = getResources().getDrawable(R.drawable.abc_ic_ab_back_mtrl_am_alpha); if (backArrow != null) { backArrow.setColorFilter(Color.WHITE, PorterDuff.Mode.SRC_ATOP); } if (getSupportActionBar() != null) { getSupportActionBar().setDisplayHomeAsUpEnabled(true); getSupportActionBar().setHomeAsUpIndicator(backArrow); } FragmentManager fm = getFragmentManager(); fm.beginTransaction().replace(R.id.mycontent, new SettingsFragment()).commit(); } @Override public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()) { case android.R.id.home: if (NavUtils.getParentActivityName(this) != null) { NavUtils.navigateUpFromSameTask(this); } return true; default: return super.onOptionsItemSelected(item); } } }"},{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Utility/ItemTouchHelperClass.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.Utility; import android.support.v7.widget.RecyclerView; import android.support.v7.widget.helper.ItemTouchHelper; public class ItemTouchHelperClass extends ItemTouchHelper.Callback { private ItemTouchHelperAdapter adapter; public interface ItemTouchHelperAdapter { void onItemMoved(int fromPosition, int toPosition); void onItemRemoved(int position); } public ItemTouchHelperClass(ItemTouchHelperAdapter ad) { adapter = ad; } @Override public boolean isLongPressDragEnabled() { return true; } @Override public boolean isItemViewSwipeEnabled() { return true; } @Override public int getMovementFlags(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder) { int upFlags = ItemTouchHelper.UP | ItemTouchHelper.DOWN; int swipeFlags = ItemTouchHelper.START | ItemTouchHelper.END; return makeMovementFlags(upFlags, swipeFlags); } @Override public boolean onMove(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder, RecyclerView.ViewHolder target) { adapter.onItemMoved(viewHolder.getAdapterPosition(), target.getAdapterPosition()); return true; } @Override public void onSwiped(RecyclerView.ViewHolder viewHolder, int direction) { adapter.onItemRemoved(viewHolder.getAdapterPosition()); } }"}]}}
{"project_id":215,"chunk_id":3,"content":{"main_file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Main/MainFragment.java","main_file_content":"package com.example.avjindersinghsekhon.minimaltodo.Main; import android.app.AlarmManager; import android.app.PendingIntent; import android.content.Intent; import android.content.SharedPreferences; import android.graphics.Color; import android.graphics.Typeface; import android.os.Bundle; import android.support.annotation.Nullable; import android.support.design.widget.CoordinatorLayout; import android.support.design.widget.FloatingActionButton; import android.support.design.widget.Snackbar; import android.support.v7.widget.DefaultItemAnimator; import android.support.v7.widget.LinearLayoutManager; import android.support.v7.widget.RecyclerView; import android.support.v7.widget.helper.ItemTouchHelper; import android.util.Log; import android.view.LayoutInflater; import android.view.Menu; import android.view.MenuItem; import android.view.View; import android.view.ViewGroup; import android.view.animation.AccelerateInterpolator; import android.view.animation.DecelerateInterpolator; import android.widget.ImageView; import android.widget.LinearLayout; import android.widget.TextView; import com.amulyakhare.textdrawable.TextDrawable; import com.amulyakhare.textdrawable.util.ColorGenerator; import com.example.avjindersinghsekhon.minimaltodo.About.AboutActivity; import com.example.avjindersinghsekhon.minimaltodo.AddToDo.AddToDoActivity; import com.example.avjindersinghsekhon.minimaltodo.AddToDo.AddToDoFragment; import com.example.avjindersinghsekhon.minimaltodo.Analytics.AnalyticsApplication; import com.example.avjindersinghsekhon.minimaltodo.AppDefault.AppDefaultFragment; import com.example.avjindersinghsekhon.minimaltodo.R; import com.example.avjindersinghsekhon.minimaltodo.Reminder.ReminderFragment; import com.example.avjindersinghsekhon.minimaltodo.Settings.SettingsActivity; import com.example.avjindersinghsekhon.minimaltodo.Utility.ItemTouchHelperClass; import com.example.avjindersinghsekhon.minimaltodo.Utility.RecyclerViewEmptySupport; import com.example.avjindersinghsekhon.minimaltodo.Utility.StoreRetrieveData; import com.example.avjindersinghsekhon.minimaltodo.Utility.ToDoItem; import com.example.avjindersinghsekhon.minimaltodo.Utility.TodoNotificationService; import org.json.JSONException; import java.io.IOException; import java.util.ArrayList; import java.util.Collections; import java.util.Date; import static android.app.Activity.RESULT_CANCELED; import static android.content.Context.ALARM_SERVICE; import static android.content.Context.MODE_PRIVATE; public class MainFragment extends AppDefaultFragment { private RecyclerViewEmptySupport mRecyclerView; private FloatingActionButton mAddToDoItemFAB; private ArrayList<ToDoItem> mToDoItemsArrayList; private CoordinatorLayout mCoordLayout; public static final String TODOITEM = \"com.avjindersinghsekhon.com.avjindersinghsekhon.minimaltodo.MainActivity\"; private MainFragment.BasicListAdapter adapter; private static final int REQUEST_ID_TODO_ITEM = 100; private ToDoItem mJustDeletedToDoItem; private int mIndexOfDeletedToDoItem; public static final String DATE_TIME_FORMAT_12_HOUR = \"MMM d, yyyy h:mm a\"; public static final String DATE_TIME_FORMAT_24_HOUR = \"MMM d, yyyy k:mm\"; public static final String FILENAME = \"todoitems.json\"; private StoreRetrieveData storeRetrieveData; public ItemTouchHelper itemTouchHelper; private CustomRecyclerScrollViewListener customRecyclerScrollViewListener; public static final String SHARED_PREF_DATA_SET_CHANGED = \"com.avjindersekhon.datasetchanged\"; public static final String CHANGE_OCCURED = \"com.avjinder.changeoccured\"; private int mTheme = -1; private String theme = \"name_of_the_theme\"; public static final String THEME_PREFERENCES = \"com.avjindersekhon.themepref\"; public static final String RECREATE_ACTIVITY = \"com.avjindersekhon.recreateactivity\"; public static final String THEME_SAVED = \"com.avjindersekhon.savedtheme\"; public static final String DARKTHEME = \"com.avjindersekon.darktheme\"; public static final String LIGHTTHEME = \"com.avjindersekon.lighttheme\"; private AnalyticsApplication app; private String[] testStrings = {\"Clean my room\", \"Water the plants\", \"Get car washed\", \"Get my dry cleaning\" }; @Override public void onViewCreated(View view, @Nullable Bundle savedInstanceState) { super.onViewCreated(view, savedInstanceState); app = (AnalyticsApplication) getActivity().getApplication(); theme = getActivity().getSharedPreferences(THEME_PREFERENCES, MODE_PRIVATE).getString(THEME_SAVED, LIGHTTHEME); if (theme.equals(LIGHTTHEME)) { mTheme = R.style.CustomStyle_LightTheme; } else { mTheme = R.style.CustomStyle_DarkTheme; } this.getActivity().setTheme(mTheme); super.onCreate(savedInstanceState); SharedPreferences sharedPreferences = getActivity().getSharedPreferences(SHARED_PREF_DATA_SET_CHANGED, MODE_PRIVATE); SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putBoolean(CHANGE_OCCURED, false); editor.apply(); storeRetrieveData = new StoreRetrieveData(getContext(), FILENAME); mToDoItemsArrayList = getLocallyStoredData(storeRetrieveData); adapter = new MainFragment.BasicListAdapter(mToDoItemsArrayList); setAlarms(); mCoordLayout = (CoordinatorLayout) view.findViewById(R.id.myCoordinatorLayout); mAddToDoItemFAB = (FloatingActionButton) view.findViewById(R.id.addToDoItemFAB); mAddToDoItemFAB.setOnClickListener(new View.OnClickListener() { @SuppressWarnings(\"deprecation\") @Override public void onClick(View v) { app.send(this, \"Action\", \"FAB pressed\"); Intent newTodo = new Intent(getContext(), AddToDoActivity.class); ToDoItem item = new ToDoItem(\"\",\"\", false, null); int color = ColorGenerator.MATERIAL.getRandomColor(); item.setTodoColor(color); newTodo.putExtra(TODOITEM, item); startActivityForResult(newTodo, REQUEST_ID_TODO_ITEM); } }); mRecyclerView = (RecyclerViewEmptySupport) view.findViewById(R.id.toDoRecyclerView); if (theme.equals(LIGHTTHEME)) { mRecyclerView.setBackgroundColor(getResources().getColor(R.color.primary_lightest)); } mRecyclerView.setEmptyView(view.findViewById(R.id.toDoEmptyView)); mRecyclerView.setHasFixedSize(true); mRecyclerView.setItemAnimator(new DefaultItemAnimator()); mRecyclerView.setLayoutManager(new LinearLayoutManager(getContext())); customRecyclerScrollViewListener = new CustomRecyclerScrollViewListener() { @Override public void show() { mAddToDoItemFAB.animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start(); } @Override public void hide() { CoordinatorLayout.LayoutParams lp = (CoordinatorLayout.LayoutParams) mAddToDoItemFAB.getLayoutParams(); int fabMargin = lp.bottomMargin; mAddToDoItemFAB.animate().translationY(mAddToDoItemFAB.getHeight() + fabMargin).setInterpolator(new AccelerateInterpolator(2.0f)).start(); } }; mRecyclerView.addOnScrollListener(customRecyclerScrollViewListener); ItemTouchHelper.Callback callback = new ItemTouchHelperClass(adapter); itemTouchHelper = new ItemTouchHelper(callback); itemTouchHelper.attachToRecyclerView(mRecyclerView); mRecyclerView.setAdapter(adapter); } public static ArrayList<ToDoItem> getLocallyStoredData(StoreRetrieveData storeRetrieveData) { ArrayList<ToDoItem> items = null; try { items = storeRetrieveData.loadFromFile(); } catch (IOException | JSONException e) { e.printStackTrace(); } if (items == null) { items = new ArrayList<>(); } return items; } @Override public void onResume() { super.onResume(); app.send(this); SharedPreferences sharedPreferences = getActivity().getSharedPreferences(SHARED_PREF_DATA_SET_CHANGED, MODE_PRIVATE); if (sharedPreferences.getBoolean(ReminderFragment.EXIT, false)) { SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putBoolean(ReminderFragment.EXIT, false); editor.apply(); getActivity().finish(); } if (getActivity().getSharedPreferences(THEME_PREFERENCES, MODE_PRIVATE).getBoolean(RECREATE_ACTIVITY, false)) { SharedPreferences.Editor editor = getActivity().getSharedPreferences(THEME_PREFERENCES, MODE_PRIVATE).edit(); editor.putBoolean(RECREATE_ACTIVITY, false); editor.apply(); getActivity().recreate(); } } @Override public void onStart() { app = (AnalyticsApplication) getActivity().getApplication(); super.onStart(); SharedPreferences sharedPreferences = getActivity().getSharedPreferences(SHARED_PREF_DATA_SET_CHANGED, MODE_PRIVATE); if (sharedPreferences.getBoolean(CHANGE_OCCURED, false)) { mToDoItemsArrayList = getLocallyStoredData(storeRetrieveData); adapter = new MainFragment.BasicListAdapter(mToDoItemsArrayList); mRecyclerView.setAdapter(adapter); setAlarms(); SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putBoolean(CHANGE_OCCURED, false); editor.apply(); } } private void setAlarms() { if (mToDoItemsArrayList != null) { for (ToDoItem item : mToDoItemsArrayList) { if (item.hasReminder() && item.getToDoDate() != null) { if (item.getToDoDate().before(new Date())) { item.setToDoDate(null); continue; } Intent i = new Intent(getContext(), TodoNotificationService.class); i.putExtra(TodoNotificationService.TODOUUID, item.getIdentifier()); i.putExtra(TodoNotificationService.TODOTEXT, item.getToDoText()); createAlarm(i, item.getIdentifier().hashCode(), item.getToDoDate().getTime()); } } } } public void addThemeToSharedPreferences(String theme) { SharedPreferences sharedPreferences = getActivity().getSharedPreferences(THEME_PREFERENCES, MODE_PRIVATE); SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putString(THEME_SAVED, theme); editor.apply(); } public boolean onCreateOptionsMenu(Menu menu) { getActivity().getMenuInflater().inflate(R.menu.menu_main, menu); return true; } @Override public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()) { case R.id.aboutMeMenuItem: Intent i = new Intent(getContext(), AboutActivity.class); startActivity(i); return true; case R.id.preferences: Intent intent = new Intent(getContext(), SettingsActivity.class); startActivity(intent); return true; default: return super.onOptionsItemSelected(item); } } @Override public void onActivityResult(int requestCode, int resultCode, Intent data) { if (resultCode != RESULT_CANCELED && requestCode == REQUEST_ID_TODO_ITEM) { ToDoItem item = (ToDoItem) data.getSerializableExtra(TODOITEM); if (item.getToDoText().length() <= 0) { return; } boolean existed = false; if (item.hasReminder() && item.getToDoDate() != null) { Intent i = new Intent(getContext(), TodoNotificationService.class); i.putExtra(TodoNotificationService.TODOTEXT, item.getToDoText()); i.putExtra(TodoNotificationService.TODOUUID, item.getIdentifier()); createAlarm(i, item.getIdentifier().hashCode(), item.getToDoDate().getTime()); } for (int i = 0; i < mToDoItemsArrayList.size(); i++) { if (item.getIdentifier().equals(mToDoItemsArrayList.get(i).getIdentifier())) { mToDoItemsArrayList.set(i, item); existed = true; adapter.notifyDataSetChanged(); break; } } if (!existed) { addToDataStore(item); } } } private AlarmManager getAlarmManager() { return (AlarmManager) getActivity().getSystemService(ALARM_SERVICE); } private boolean doesPendingIntentExist(Intent i, int requestCode) { PendingIntent pi = PendingIntent.getService(getContext(), requestCode, i, PendingIntent.FLAG_NO_CREATE); return pi != null; } private void createAlarm(Intent i, int requestCode, long timeInMillis) { AlarmManager am = getAlarmManager(); PendingIntent pi = PendingIntent.getService(getContext(), requestCode, i, PendingIntent.FLAG_UPDATE_CURRENT); am.set(AlarmManager.RTC_WAKEUP, timeInMillis, pi); } private void deleteAlarm(Intent i, int requestCode) { if (doesPendingIntentExist(i, requestCode)) { PendingIntent pi = PendingIntent.getService(getContext(), requestCode, i, PendingIntent.FLAG_NO_CREATE); pi.cancel(); getAlarmManager().cancel(pi); Log.d(\"OskarSchindler\", \"PI Cancelled \" + doesPendingIntentExist(i, requestCode)); } } private void addToDataStore(ToDoItem item) { mToDoItemsArrayList.add(item); adapter.notifyItemInserted(mToDoItemsArrayList.size() - 1); } public void makeUpItems(ArrayList<ToDoItem> items, int len) { for (String testString : testStrings) { ToDoItem item = new ToDoItem(testString,testString, false, new Date()); items.add(item); } } public class BasicListAdapter extends RecyclerView.Adapter<BasicListAdapter.ViewHolder> implements ItemTouchHelperClass.ItemTouchHelperAdapter { private ArrayList<ToDoItem> items; @Override public void onItemMoved(int fromPosition, int toPosition) { if (fromPosition < toPosition) { for (int i = fromPosition; i < toPosition; i++) { Collections.swap(items, i, i + 1); } } else { for (int i = fromPosition; i > toPosition; i--) { Collections.swap(items, i, i - 1); } } notifyItemMoved(fromPosition, toPosition); } @Override public void onItemRemoved(final int position) { app.send(this, \"Action\", \"Swiped Todo Away\"); mJustDeletedToDoItem = items.remove(position); mIndexOfDeletedToDoItem = position; Intent i = new Intent(getContext(), TodoNotificationService.class); deleteAlarm(i, mJustDeletedToDoItem.getIdentifier().hashCode()); notifyItemRemoved(position); String toShow = \"Todo\"; Snackbar.make(mCoordLayout, \"Deleted \" + toShow, Snackbar.LENGTH_LONG) .setAction(\"UNDO\", new View.OnClickListener() { @Override public void onClick(View v) { app.send(this, \"Action\", \"UNDO Pressed\"); items.add(mIndexOfDeletedToDoItem, mJustDeletedToDoItem); if (mJustDeletedToDoItem.getToDoDate() != null && mJustDeletedToDoItem.hasReminder()) { Intent i = new Intent(getContext(), TodoNotificationService.class); i.putExtra(TodoNotificationService.TODOTEXT, mJustDeletedToDoItem.getToDoText()); i.putExtra(TodoNotificationService.TODOUUID, mJustDeletedToDoItem.getIdentifier()); createAlarm(i, mJustDeletedToDoItem.getIdentifier().hashCode(), mJustDeletedToDoItem.getToDoDate().getTime()); } notifyItemInserted(mIndexOfDeletedToDoItem); } }).show(); } @Override public BasicListAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) { View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.list_circle_try, parent, false); return new ViewHolder(v); } @Override public void onBindViewHolder(final BasicListAdapter.ViewHolder holder, final int position) { ToDoItem item = items.get(position); SharedPreferences sharedPreferences = getActivity().getSharedPreferences(THEME_PREFERENCES, MODE_PRIVATE); int bgColor; int todoTextColor; if (sharedPreferences.getString(THEME_SAVED, LIGHTTHEME).equals(LIGHTTHEME)) { bgColor = Color.WHITE; todoTextColor = getResources().getColor(R.color.secondary_text); } else { bgColor = Color.DKGRAY; todoTextColor = Color.WHITE; } holder.linearLayout.setBackgroundColor(bgColor); if (item.hasReminder() && item.getToDoDate() != null) { holder.mToDoTextview.setMaxLines(1); holder.mTimeTextView.setVisibility(View.VISIBLE); } else { holder.mTimeTextView.setVisibility(View.GONE); holder.mToDoTextview.setMaxLines(2); } holder.mToDoTextview.setText(item.getToDoText()); holder.mToDoTextview.setTextColor(todoTextColor); TextDrawable myDrawable = TextDrawable.builder().beginConfig() .textColor(Color.WHITE) .useFont(Typeface.DEFAULT) .toUpperCase() .endConfig() .buildRound(item.getToDoText().substring(0, 1), item.getTodoColor()); holder.mColorImageView.setImageDrawable(myDrawable); if (item.getToDoDate() != null) { String timeToShow; if (android.text.format.DateFormat.is24HourFormat(getContext())) { timeToShow = AddToDoFragment.formatDate(MainFragment.DATE_TIME_FORMAT_24_HOUR, item.getToDoDate()); } else { timeToShow = AddToDoFragment.formatDate(MainFragment.DATE_TIME_FORMAT_12_HOUR, item.getToDoDate()); } holder.mTimeTextView.setText(timeToShow); } } @Override public int getItemCount() { return items.size(); } BasicListAdapter(ArrayList<ToDoItem> items) { this.items = items; } @SuppressWarnings(\"deprecation\") public class ViewHolder extends RecyclerView.ViewHolder { View mView; LinearLayout linearLayout; TextView mToDoTextview; ImageView mColorImageView; TextView mTimeTextView; public ViewHolder(View v) { super(v); mView = v; v.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { ToDoItem item = items.get(ViewHolder.this.getAdapterPosition()); Intent i = new Intent(getContext(), AddToDoActivity.class); i.putExtra(TODOITEM, item); startActivityForResult(i, REQUEST_ID_TODO_ITEM); } }); mToDoTextview = (TextView) v.findViewById(R.id.toDoListItemTextview); mTimeTextView = (TextView) v.findViewById(R.id.todoListItemTimeTextView); mColorImageView = (ImageView) v.findViewById(R.id.toDoListItemColorImageView); linearLayout = (LinearLayout) v.findViewById(R.id.listItemLinearLayout); } } } private void saveDate() { try { storeRetrieveData.saveToFile(mToDoItemsArrayList); } catch (JSONException | IOException e) { e.printStackTrace(); } } @Override public void onPause() { super.onPause(); try { storeRetrieveData.saveToFile(mToDoItemsArrayList); } catch (JSONException | IOException e) { e.printStackTrace(); } } @Override public void onDestroy() { super.onDestroy(); mRecyclerView.removeOnScrollListener(customRecyclerScrollViewListener); } @Override protected int layoutRes() { return R.layout.fragment_main; } public static MainFragment newInstance() { return new MainFragment(); } }","dependencies":[{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Utility/RecyclerViewEmptySupport.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.Utility; import android.content.Context; import android.support.v7.widget.RecyclerView; import android.util.AttributeSet; import android.view.View; public class RecyclerViewEmptySupport extends RecyclerView { private View emptyView; private AdapterDataObserver observer = new AdapterDataObserver() { @Override public void onChanged() { showEmptyView(); } @Override public void onItemRangeInserted(int positionStart, int itemCount) { super.onItemRangeInserted(positionStart, itemCount); showEmptyView(); } @Override public void onItemRangeRemoved(int positionStart, int itemCount) { super.onItemRangeRemoved(positionStart, itemCount); showEmptyView(); } }; public RecyclerViewEmptySupport(Context context) { super(context); } public void showEmptyView() { Adapter<?> adapter = getAdapter(); if (adapter != null && emptyView != null) { if (adapter.getItemCount() == 0) { emptyView.setVisibility(VISIBLE); RecyclerViewEmptySupport.this.setVisibility(GONE); } else { emptyView.setVisibility(GONE); RecyclerViewEmptySupport.this.setVisibility(VISIBLE); } } } public RecyclerViewEmptySupport(Context context, AttributeSet attrs) { super(context, attrs); } public RecyclerViewEmptySupport(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); } @Override public void setAdapter(Adapter adapter) { super.setAdapter(adapter); if (adapter != null) { adapter.registerAdapterDataObserver(observer); observer.onChanged(); } } public void setEmptyView(View v) { emptyView = v; } }"},{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Utility/StoreRetrieveData.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.Utility; import android.content.Context; import org.json.JSONArray; import org.json.JSONException; import org.json.JSONObject; import org.json.JSONTokener; import java.io.BufferedReader; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStreamWriter; import java.util.ArrayList; public class StoreRetrieveData { private Context mContext; private String mFileName; public StoreRetrieveData(Context context, String filename) { mContext = context; mFileName = filename; } public static JSONArray toJSONArray(ArrayList<ToDoItem> items) throws JSONException { JSONArray jsonArray = new JSONArray(); for (ToDoItem item : items) { JSONObject jsonObject = item.toJSON(); jsonArray.put(jsonObject); } return jsonArray; } public void saveToFile(ArrayList<ToDoItem> items) throws JSONException, IOException { FileOutputStream fileOutputStream; OutputStreamWriter outputStreamWriter; fileOutputStream = mContext.openFileOutput(mFileName, Context.MODE_PRIVATE); outputStreamWriter = new OutputStreamWriter(fileOutputStream); outputStreamWriter.write(toJSONArray(items).toString()); outputStreamWriter.close(); fileOutputStream.close(); } public ArrayList<ToDoItem> loadFromFile() throws IOException, JSONException { ArrayList<ToDoItem> items = new ArrayList<>(); BufferedReader bufferedReader = null; FileInputStream fileInputStream = null; try { fileInputStream = mContext.openFileInput(mFileName); StringBuilder builder = new StringBuilder(); String line; bufferedReader = new BufferedReader(new InputStreamReader(fileInputStream)); while ((line = bufferedReader.readLine()) != null) { builder.append(line); } JSONArray jsonArray = (JSONArray) new JSONTokener(builder.toString()).nextValue(); for (int i = 0; i < jsonArray.length(); i++) { ToDoItem item = new ToDoItem(jsonArray.getJSONObject(i)); items.add(item); } } catch (FileNotFoundException fnfe) { } finally { if (bufferedReader != null) { bufferedReader.close(); } if (fileInputStream != null) { fileInputStream.close(); } } return items; } }"},{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Utility/ToDoItem.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.Utility; import org.json.JSONException; import org.json.JSONObject; import java.io.Serializable; import java.util.Date; import java.util.UUID; public class ToDoItem implements Serializable { private String mToDoText; private boolean mHasReminder; private String mToDoDescription; private int mTodoColor; private Date mToDoDate; private UUID mTodoIdentifier; private static final String TODODESCRIPTION = \"tododescription\"; private static final String TODOTEXT = \"todotext\"; private static final String TODOREMINDER = \"todoreminder\"; private static final String TODOCOLOR = \"todocolor\"; private static final String TODODATE = \"tododate\"; private static final String TODOIDENTIFIER = \"todoidentifier\"; public ToDoItem(String todoBody,String tododescription, boolean hasReminder, Date toDoDate) { mToDoText = todoBody; mHasReminder = hasReminder; mToDoDate = toDoDate; mToDoDescription = tododescription; mTodoColor = 1677725; mTodoIdentifier = UUID.randomUUID(); } public ToDoItem(JSONObject jsonObject) throws JSONException { mToDoText = jsonObject.getString(TODOTEXT); mToDoDescription = jsonObject.getString(TODODESCRIPTION); mHasReminder = jsonObject.getBoolean(TODOREMINDER); mTodoColor = jsonObject.getInt(TODOCOLOR); mTodoIdentifier = UUID.fromString(jsonObject.getString(TODOIDENTIFIER)); if (jsonObject.has(TODODATE)) { mToDoDate = new Date(jsonObject.getLong(TODODATE)); } } public JSONObject toJSON() throws JSONException { JSONObject jsonObject = new JSONObject(); jsonObject.put(TODOTEXT, mToDoText); jsonObject.put(TODOREMINDER, mHasReminder); jsonObject.put(TODODESCRIPTION, mToDoDescription); if (mToDoDate != null) { jsonObject.put(TODODATE, mToDoDate.getTime()); } jsonObject.put(TODOCOLOR, mTodoColor); jsonObject.put(TODOIDENTIFIER, mTodoIdentifier.toString()); return jsonObject; } public ToDoItem() { this(\"Clean my room\",\"Sweep and Mop my Room\", true, new Date()); } public String getmToDoDescription() { return mToDoDescription;} public void setmToDoDescription(String mToDoDescription){this.mToDoDescription = mToDoDescription;} public String getToDoText() { return mToDoText; } public void setToDoText(String mToDoText) { this.mToDoText = mToDoText; } public boolean hasReminder() { return mHasReminder; } public void setHasReminder(boolean mHasReminder) { this.mHasReminder = mHasReminder; } public Date getToDoDate() { return mToDoDate; } public int getTodoColor() { return mTodoColor; } public void setTodoColor(int mTodoColor) { this.mTodoColor = mTodoColor; } public void setToDoDate(Date mToDoDate) { this.mToDoDate = mToDoDate; } public UUID getIdentifier() { return mTodoIdentifier; } }"}]}}
{"project_id":215,"chunk_id":4,"content":{"main_file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Main/MainFragment.java","main_file_content":"package com.example.avjindersinghsekhon.minimaltodo.Main; import android.app.AlarmManager; import android.app.PendingIntent; import android.content.Intent; import android.content.SharedPreferences; import android.graphics.Color; import android.graphics.Typeface; import android.os.Bundle; import android.support.annotation.Nullable; import android.support.design.widget.CoordinatorLayout; import android.support.design.widget.FloatingActionButton; import android.support.design.widget.Snackbar; import android.support.v7.widget.DefaultItemAnimator; import android.support.v7.widget.LinearLayoutManager; import android.support.v7.widget.RecyclerView; import android.support.v7.widget.helper.ItemTouchHelper; import android.util.Log; import android.view.LayoutInflater; import android.view.Menu; import android.view.MenuItem; import android.view.View; import android.view.ViewGroup; import android.view.animation.AccelerateInterpolator; import android.view.animation.DecelerateInterpolator; import android.widget.ImageView; import android.widget.LinearLayout; import android.widget.TextView; import com.amulyakhare.textdrawable.TextDrawable; import com.amulyakhare.textdrawable.util.ColorGenerator; import com.example.avjindersinghsekhon.minimaltodo.About.AboutActivity; import com.example.avjindersinghsekhon.minimaltodo.AddToDo.AddToDoActivity; import com.example.avjindersinghsekhon.minimaltodo.AddToDo.AddToDoFragment; import com.example.avjindersinghsekhon.minimaltodo.Analytics.AnalyticsApplication; import com.example.avjindersinghsekhon.minimaltodo.AppDefault.AppDefaultFragment; import com.example.avjindersinghsekhon.minimaltodo.R; import com.example.avjindersinghsekhon.minimaltodo.Reminder.ReminderFragment; import com.example.avjindersinghsekhon.minimaltodo.Settings.SettingsActivity; import com.example.avjindersinghsekhon.minimaltodo.Utility.ItemTouchHelperClass; import com.example.avjindersinghsekhon.minimaltodo.Utility.RecyclerViewEmptySupport; import com.example.avjindersinghsekhon.minimaltodo.Utility.StoreRetrieveData; import com.example.avjindersinghsekhon.minimaltodo.Utility.ToDoItem; import com.example.avjindersinghsekhon.minimaltodo.Utility.TodoNotificationService; import org.json.JSONException; import java.io.IOException; import java.util.ArrayList; import java.util.Collections; import java.util.Date; import static android.app.Activity.RESULT_CANCELED; import static android.content.Context.ALARM_SERVICE; import static android.content.Context.MODE_PRIVATE; public class MainFragment extends AppDefaultFragment { private RecyclerViewEmptySupport mRecyclerView; private FloatingActionButton mAddToDoItemFAB; private ArrayList<ToDoItem> mToDoItemsArrayList; private CoordinatorLayout mCoordLayout; public static final String TODOITEM = \"com.avjindersinghsekhon.com.avjindersinghsekhon.minimaltodo.MainActivity\"; private MainFragment.BasicListAdapter adapter; private static final int REQUEST_ID_TODO_ITEM = 100; private ToDoItem mJustDeletedToDoItem; private int mIndexOfDeletedToDoItem; public static final String DATE_TIME_FORMAT_12_HOUR = \"MMM d, yyyy h:mm a\"; public static final String DATE_TIME_FORMAT_24_HOUR = \"MMM d, yyyy k:mm\"; public static final String FILENAME = \"todoitems.json\"; private StoreRetrieveData storeRetrieveData; public ItemTouchHelper itemTouchHelper; private CustomRecyclerScrollViewListener customRecyclerScrollViewListener; public static final String SHARED_PREF_DATA_SET_CHANGED = \"com.avjindersekhon.datasetchanged\"; public static final String CHANGE_OCCURED = \"com.avjinder.changeoccured\"; private int mTheme = -1; private String theme = \"name_of_the_theme\"; public static final String THEME_PREFERENCES = \"com.avjindersekhon.themepref\"; public static final String RECREATE_ACTIVITY = \"com.avjindersekhon.recreateactivity\"; public static final String THEME_SAVED = \"com.avjindersekhon.savedtheme\"; public static final String DARKTHEME = \"com.avjindersekon.darktheme\"; public static final String LIGHTTHEME = \"com.avjindersekon.lighttheme\"; private AnalyticsApplication app; private String[] testStrings = {\"Clean my room\", \"Water the plants\", \"Get car washed\", \"Get my dry cleaning\" }; @Override public void onViewCreated(View view, @Nullable Bundle savedInstanceState) { super.onViewCreated(view, savedInstanceState); app = (AnalyticsApplication) getActivity().getApplication(); theme = getActivity().getSharedPreferences(THEME_PREFERENCES, MODE_PRIVATE).getString(THEME_SAVED, LIGHTTHEME); if (theme.equals(LIGHTTHEME)) { mTheme = R.style.CustomStyle_LightTheme; } else { mTheme = R.style.CustomStyle_DarkTheme; } this.getActivity().setTheme(mTheme); super.onCreate(savedInstanceState); SharedPreferences sharedPreferences = getActivity().getSharedPreferences(SHARED_PREF_DATA_SET_CHANGED, MODE_PRIVATE); SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putBoolean(CHANGE_OCCURED, false); editor.apply(); storeRetrieveData = new StoreRetrieveData(getContext(), FILENAME); mToDoItemsArrayList = getLocallyStoredData(storeRetrieveData); adapter = new MainFragment.BasicListAdapter(mToDoItemsArrayList); setAlarms(); mCoordLayout = (CoordinatorLayout) view.findViewById(R.id.myCoordinatorLayout); mAddToDoItemFAB = (FloatingActionButton) view.findViewById(R.id.addToDoItemFAB); mAddToDoItemFAB.setOnClickListener(new View.OnClickListener() { @SuppressWarnings(\"deprecation\") @Override public void onClick(View v) { app.send(this, \"Action\", \"FAB pressed\"); Intent newTodo = new Intent(getContext(), AddToDoActivity.class); ToDoItem item = new ToDoItem(\"\",\"\", false, null); int color = ColorGenerator.MATERIAL.getRandomColor(); item.setTodoColor(color); newTodo.putExtra(TODOITEM, item); startActivityForResult(newTodo, REQUEST_ID_TODO_ITEM); } }); mRecyclerView = (RecyclerViewEmptySupport) view.findViewById(R.id.toDoRecyclerView); if (theme.equals(LIGHTTHEME)) { mRecyclerView.setBackgroundColor(getResources().getColor(R.color.primary_lightest)); } mRecyclerView.setEmptyView(view.findViewById(R.id.toDoEmptyView)); mRecyclerView.setHasFixedSize(true); mRecyclerView.setItemAnimator(new DefaultItemAnimator()); mRecyclerView.setLayoutManager(new LinearLayoutManager(getContext())); customRecyclerScrollViewListener = new CustomRecyclerScrollViewListener() { @Override public void show() { mAddToDoItemFAB.animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start(); } @Override public void hide() { CoordinatorLayout.LayoutParams lp = (CoordinatorLayout.LayoutParams) mAddToDoItemFAB.getLayoutParams(); int fabMargin = lp.bottomMargin; mAddToDoItemFAB.animate().translationY(mAddToDoItemFAB.getHeight() + fabMargin).setInterpolator(new AccelerateInterpolator(2.0f)).start(); } }; mRecyclerView.addOnScrollListener(customRecyclerScrollViewListener); ItemTouchHelper.Callback callback = new ItemTouchHelperClass(adapter); itemTouchHelper = new ItemTouchHelper(callback); itemTouchHelper.attachToRecyclerView(mRecyclerView); mRecyclerView.setAdapter(adapter); } public static ArrayList<ToDoItem> getLocallyStoredData(StoreRetrieveData storeRetrieveData) { ArrayList<ToDoItem> items = null; try { items = storeRetrieveData.loadFromFile(); } catch (IOException | JSONException e) { e.printStackTrace(); } if (items == null) { items = new ArrayList<>(); } return items; } @Override public void onResume() { super.onResume(); app.send(this); SharedPreferences sharedPreferences = getActivity().getSharedPreferences(SHARED_PREF_DATA_SET_CHANGED, MODE_PRIVATE); if (sharedPreferences.getBoolean(ReminderFragment.EXIT, false)) { SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putBoolean(ReminderFragment.EXIT, false); editor.apply(); getActivity().finish(); } if (getActivity().getSharedPreferences(THEME_PREFERENCES, MODE_PRIVATE).getBoolean(RECREATE_ACTIVITY, false)) { SharedPreferences.Editor editor = getActivity().getSharedPreferences(THEME_PREFERENCES, MODE_PRIVATE).edit(); editor.putBoolean(RECREATE_ACTIVITY, false); editor.apply(); getActivity().recreate(); } } @Override public void onStart() { app = (AnalyticsApplication) getActivity().getApplication(); super.onStart(); SharedPreferences sharedPreferences = getActivity().getSharedPreferences(SHARED_PREF_DATA_SET_CHANGED, MODE_PRIVATE); if (sharedPreferences.getBoolean(CHANGE_OCCURED, false)) { mToDoItemsArrayList = getLocallyStoredData(storeRetrieveData); adapter = new MainFragment.BasicListAdapter(mToDoItemsArrayList); mRecyclerView.setAdapter(adapter); setAlarms(); SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putBoolean(CHANGE_OCCURED, false); editor.apply(); } } private void setAlarms() { if (mToDoItemsArrayList != null) { for (ToDoItem item : mToDoItemsArrayList) { if (item.hasReminder() && item.getToDoDate() != null) { if (item.getToDoDate().before(new Date())) { item.setToDoDate(null); continue; } Intent i = new Intent(getContext(), TodoNotificationService.class); i.putExtra(TodoNotificationService.TODOUUID, item.getIdentifier()); i.putExtra(TodoNotificationService.TODOTEXT, item.getToDoText()); createAlarm(i, item.getIdentifier().hashCode(), item.getToDoDate().getTime()); } } } } public void addThemeToSharedPreferences(String theme) { SharedPreferences sharedPreferences = getActivity().getSharedPreferences(THEME_PREFERENCES, MODE_PRIVATE); SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putString(THEME_SAVED, theme); editor.apply(); } public boolean onCreateOptionsMenu(Menu menu) { getActivity().getMenuInflater().inflate(R.menu.menu_main, menu); return true; } @Override public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()) { case R.id.aboutMeMenuItem: Intent i = new Intent(getContext(), AboutActivity.class); startActivity(i); return true; case R.id.preferences: Intent intent = new Intent(getContext(), SettingsActivity.class); startActivity(intent); return true; default: return super.onOptionsItemSelected(item); } } @Override public void onActivityResult(int requestCode, int resultCode, Intent data) { if (resultCode != RESULT_CANCELED && requestCode == REQUEST_ID_TODO_ITEM) { ToDoItem item = (ToDoItem) data.getSerializableExtra(TODOITEM); if (item.getToDoText().length() <= 0) { return; } boolean existed = false; if (item.hasReminder() && item.getToDoDate() != null) { Intent i = new Intent(getContext(), TodoNotificationService.class); i.putExtra(TodoNotificationService.TODOTEXT, item.getToDoText()); i.putExtra(TodoNotificationService.TODOUUID, item.getIdentifier()); createAlarm(i, item.getIdentifier().hashCode(), item.getToDoDate().getTime()); } for (int i = 0; i < mToDoItemsArrayList.size(); i++) { if (item.getIdentifier().equals(mToDoItemsArrayList.get(i).getIdentifier())) { mToDoItemsArrayList.set(i, item); existed = true; adapter.notifyDataSetChanged(); break; } } if (!existed) { addToDataStore(item); } } } private AlarmManager getAlarmManager() { return (AlarmManager) getActivity().getSystemService(ALARM_SERVICE); } private boolean doesPendingIntentExist(Intent i, int requestCode) { PendingIntent pi = PendingIntent.getService(getContext(), requestCode, i, PendingIntent.FLAG_NO_CREATE); return pi != null; } private void createAlarm(Intent i, int requestCode, long timeInMillis) { AlarmManager am = getAlarmManager(); PendingIntent pi = PendingIntent.getService(getContext(), requestCode, i, PendingIntent.FLAG_UPDATE_CURRENT); am.set(AlarmManager.RTC_WAKEUP, timeInMillis, pi); } private void deleteAlarm(Intent i, int requestCode) { if (doesPendingIntentExist(i, requestCode)) { PendingIntent pi = PendingIntent.getService(getContext(), requestCode, i, PendingIntent.FLAG_NO_CREATE); pi.cancel(); getAlarmManager().cancel(pi); Log.d(\"OskarSchindler\", \"PI Cancelled \" + doesPendingIntentExist(i, requestCode)); } } private void addToDataStore(ToDoItem item) { mToDoItemsArrayList.add(item); adapter.notifyItemInserted(mToDoItemsArrayList.size() - 1); } public void makeUpItems(ArrayList<ToDoItem> items, int len) { for (String testString : testStrings) { ToDoItem item = new ToDoItem(testString,testString, false, new Date()); items.add(item); } } public class BasicListAdapter extends RecyclerView.Adapter<BasicListAdapter.ViewHolder> implements ItemTouchHelperClass.ItemTouchHelperAdapter { private ArrayList<ToDoItem> items; @Override public void onItemMoved(int fromPosition, int toPosition) { if (fromPosition < toPosition) { for (int i = fromPosition; i < toPosition; i++) { Collections.swap(items, i, i + 1); } } else { for (int i = fromPosition; i > toPosition; i--) { Collections.swap(items, i, i - 1); } } notifyItemMoved(fromPosition, toPosition); } @Override public void onItemRemoved(final int position) { app.send(this, \"Action\", \"Swiped Todo Away\"); mJustDeletedToDoItem = items.remove(position); mIndexOfDeletedToDoItem = position; Intent i = new Intent(getContext(), TodoNotificationService.class); deleteAlarm(i, mJustDeletedToDoItem.getIdentifier().hashCode()); notifyItemRemoved(position); String toShow = \"Todo\"; Snackbar.make(mCoordLayout, \"Deleted \" + toShow, Snackbar.LENGTH_LONG) .setAction(\"UNDO\", new View.OnClickListener() { @Override public void onClick(View v) { app.send(this, \"Action\", \"UNDO Pressed\"); items.add(mIndexOfDeletedToDoItem, mJustDeletedToDoItem); if (mJustDeletedToDoItem.getToDoDate() != null && mJustDeletedToDoItem.hasReminder()) { Intent i = new Intent(getContext(), TodoNotificationService.class); i.putExtra(TodoNotificationService.TODOTEXT, mJustDeletedToDoItem.getToDoText()); i.putExtra(TodoNotificationService.TODOUUID, mJustDeletedToDoItem.getIdentifier()); createAlarm(i, mJustDeletedToDoItem.getIdentifier().hashCode(), mJustDeletedToDoItem.getToDoDate().getTime()); } notifyItemInserted(mIndexOfDeletedToDoItem); } }).show(); } @Override public BasicListAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) { View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.list_circle_try, parent, false); return new ViewHolder(v); } @Override public void onBindViewHolder(final BasicListAdapter.ViewHolder holder, final int position) { ToDoItem item = items.get(position); SharedPreferences sharedPreferences = getActivity().getSharedPreferences(THEME_PREFERENCES, MODE_PRIVATE); int bgColor; int todoTextColor; if (sharedPreferences.getString(THEME_SAVED, LIGHTTHEME).equals(LIGHTTHEME)) { bgColor = Color.WHITE; todoTextColor = getResources().getColor(R.color.secondary_text); } else { bgColor = Color.DKGRAY; todoTextColor = Color.WHITE; } holder.linearLayout.setBackgroundColor(bgColor); if (item.hasReminder() && item.getToDoDate() != null) { holder.mToDoTextview.setMaxLines(1); holder.mTimeTextView.setVisibility(View.VISIBLE); } else { holder.mTimeTextView.setVisibility(View.GONE); holder.mToDoTextview.setMaxLines(2); } holder.mToDoTextview.setText(item.getToDoText()); holder.mToDoTextview.setTextColor(todoTextColor); TextDrawable myDrawable = TextDrawable.builder().beginConfig() .textColor(Color.WHITE) .useFont(Typeface.DEFAULT) .toUpperCase() .endConfig() .buildRound(item.getToDoText().substring(0, 1), item.getTodoColor()); holder.mColorImageView.setImageDrawable(myDrawable); if (item.getToDoDate() != null) { String timeToShow; if (android.text.format.DateFormat.is24HourFormat(getContext())) { timeToShow = AddToDoFragment.formatDate(MainFragment.DATE_TIME_FORMAT_24_HOUR, item.getToDoDate()); } else { timeToShow = AddToDoFragment.formatDate(MainFragment.DATE_TIME_FORMAT_12_HOUR, item.getToDoDate()); } holder.mTimeTextView.setText(timeToShow); } } @Override public int getItemCount() { return items.size(); } BasicListAdapter(ArrayList<ToDoItem> items) { this.items = items; } @SuppressWarnings(\"deprecation\") public class ViewHolder extends RecyclerView.ViewHolder { View mView; LinearLayout linearLayout; TextView mToDoTextview; ImageView mColorImageView; TextView mTimeTextView; public ViewHolder(View v) { super(v); mView = v; v.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { ToDoItem item = items.get(ViewHolder.this.getAdapterPosition()); Intent i = new Intent(getContext(), AddToDoActivity.class); i.putExtra(TODOITEM, item); startActivityForResult(i, REQUEST_ID_TODO_ITEM); } }); mToDoTextview = (TextView) v.findViewById(R.id.toDoListItemTextview); mTimeTextView = (TextView) v.findViewById(R.id.todoListItemTimeTextView); mColorImageView = (ImageView) v.findViewById(R.id.toDoListItemColorImageView); linearLayout = (LinearLayout) v.findViewById(R.id.listItemLinearLayout); } } } private void saveDate() { try { storeRetrieveData.saveToFile(mToDoItemsArrayList); } catch (JSONException | IOException e) { e.printStackTrace(); } } @Override public void onPause() { super.onPause(); try { storeRetrieveData.saveToFile(mToDoItemsArrayList); } catch (JSONException | IOException e) { e.printStackTrace(); } } @Override public void onDestroy() { super.onDestroy(); mRecyclerView.removeOnScrollListener(customRecyclerScrollViewListener); } @Override protected int layoutRes() { return R.layout.fragment_main; } public static MainFragment newInstance() { return new MainFragment(); } }","dependencies":[{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Utility/TodoNotificationService.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.Utility; import android.app.IntentService; import android.app.Notification; import android.app.NotificationManager; import android.app.PendingIntent; import android.content.Context; import android.content.Intent; import android.util.Log; import com.example.avjindersinghsekhon.minimaltodo.R; import com.example.avjindersinghsekhon.minimaltodo.Reminder.ReminderActivity; import java.util.UUID; public class TodoNotificationService extends IntentService { public static final String TODOTEXT = \"com.avjindersekhon.todonotificationservicetext\"; public static final String TODOUUID = \"com.avjindersekhon.todonotificationserviceuuid\"; private String mTodoText; private UUID mTodoUUID; private Context mContext; public TodoNotificationService() { super(\"TodoNotificationService\"); } @Override protected void onHandleIntent(Intent intent) { mTodoText = intent.getStringExtra(TODOTEXT); mTodoUUID = (UUID) intent.getSerializableExtra(TODOUUID); Log.d(\"OskarSchindler\", \"onHandleIntent called\"); NotificationManager manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE); Intent i = new Intent(this, ReminderActivity.class); i.putExtra(TodoNotificationService.TODOUUID, mTodoUUID); Intent deleteIntent = new Intent(this, DeleteNotificationService.class); deleteIntent.putExtra(TODOUUID, mTodoUUID); Notification notification = new Notification.Builder(this) .setContentTitle(mTodoText) .setSmallIcon(R.drawable.ic_done_white_24dp) .setAutoCancel(true) .setDefaults(Notification.DEFAULT_SOUND) .setDeleteIntent(PendingIntent.getService(this, mTodoUUID.hashCode(), deleteIntent, PendingIntent.FLAG_UPDATE_CURRENT)) .setContentIntent(PendingIntent.getActivity(this, mTodoUUID.hashCode(), i, PendingIntent.FLAG_UPDATE_CURRENT)) .build(); manager.notify(100, notification); } }"}]}}
{"project_id":215,"chunk_id":0,"content":{"main_file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Analytics/AnalyticsApplication.java","main_file_content":"package com.example.avjindersinghsekhon.minimaltodo.Analytics; import android.app.Application; import android.content.pm.PackageManager; import com.example.avjindersinghsekhon.minimaltodo.R; import com.google.android.gms.analytics.GoogleAnalytics; import com.google.android.gms.analytics.HitBuilders; import com.google.android.gms.analytics.Tracker; import java.util.Map; public class AnalyticsApplication extends Application { private Tracker mTracker; private static final boolean IS_ENABLED = true; synchronized private Tracker getDefaultTracker() { if (mTracker == null) { GoogleAnalytics analytics = GoogleAnalytics.getInstance(this); mTracker = analytics.newTracker(R.xml.global_tracker); mTracker.setAppName(\"Minimal\"); mTracker.enableExceptionReporting(true); try { mTracker.setAppId(getPackageManager().getPackageInfo(getPackageName(), 0).versionName); } catch (PackageManager.NameNotFoundException e) { e.printStackTrace(); } } return mTracker; } public void send(Object screenName) { send(screenName, new HitBuilders.ScreenViewBuilder().build()); } private void send(Object screenName, Map<String, String> params) { if (IS_ENABLED) { Tracker tracker = getDefaultTracker(); tracker.setScreenName(getClassName(screenName)); tracker.send(params); } } private String getClassName(Object o) { Class c = o.getClass(); while (c.isAnonymousClass()) { c = c.getEnclosingClass(); } return c.getSimpleName(); } public void send(Object screenName, String category, String action) { send(screenName, new HitBuilders.EventBuilder().setCategory(category).setAction(action).build()); } public void send(Object screenName, String category, String action, String label) { send(screenName, new HitBuilders.EventBuilder().setCategory(category).setAction(action).setLabel(label).build()); } }","dependencies":[]}}
{"project_id":215,"chunk_id":0,"content":{"main_file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/AppDefault/AppDefaultFragment.java","main_file_content":"package com.example.avjindersinghsekhon.minimaltodo.AppDefault; import android.os.Bundle; import android.support.annotation.LayoutRes; import android.support.annotation.Nullable; import android.support.v4.app.Fragment; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; public abstract class AppDefaultFragment extends Fragment { @Nullable @Override public View onCreateView( LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState ) { return inflater.inflate(layoutRes(), container, false); } @Override public void onDestroy() { super.onDestroy(); } @LayoutRes protected abstract int layoutRes(); }","dependencies":[]}}
{"project_id":215,"chunk_id":0,"content":{"main_file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/AppDefault/AppDefaultActivity.java","main_file_content":"package com.example.avjindersinghsekhon.minimaltodo.AppDefault; import android.os.Bundle; import android.support.annotation.LayoutRes; import android.support.annotation.NonNull; import android.support.annotation.Nullable; import android.support.v4.app.Fragment; import android.support.v7.app.AppCompatActivity; import com.example.avjindersinghsekhon.minimaltodo.R; public abstract class AppDefaultActivity extends AppCompatActivity { @Override protected void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(contentViewLayoutRes()); setUpInitialFragment(savedInstanceState); } private void setUpInitialFragment(@Nullable Bundle savedInstanceState) { if (savedInstanceState == null) { getSupportFragmentManager() .beginTransaction() .replace(R.id.fragment_container, createInitialFragment()) .commit(); } } @LayoutRes protected abstract int contentViewLayoutRes(); @NonNull protected abstract Fragment createInitialFragment(); }","dependencies":[]}}
{"project_id":215,"chunk_id":0,"content":{"main_file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Utility/TodoNotificationService.java","main_file_content":"package com.example.avjindersinghsekhon.minimaltodo.Utility; import android.app.IntentService; import android.app.Notification; import android.app.NotificationManager; import android.app.PendingIntent; import android.content.Context; import android.content.Intent; import android.util.Log; import com.example.avjindersinghsekhon.minimaltodo.R; import com.example.avjindersinghsekhon.minimaltodo.Reminder.ReminderActivity; import java.util.UUID; public class TodoNotificationService extends IntentService { public static final String TODOTEXT = \"com.avjindersekhon.todonotificationservicetext\"; public static final String TODOUUID = \"com.avjindersekhon.todonotificationserviceuuid\"; private String mTodoText; private UUID mTodoUUID; private Context mContext; public TodoNotificationService() { super(\"TodoNotificationService\"); } @Override protected void onHandleIntent(Intent intent) { mTodoText = intent.getStringExtra(TODOTEXT); mTodoUUID = (UUID) intent.getSerializableExtra(TODOUUID); Log.d(\"OskarSchindler\", \"onHandleIntent called\"); NotificationManager manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE); Intent i = new Intent(this, ReminderActivity.class); i.putExtra(TodoNotificationService.TODOUUID, mTodoUUID); Intent deleteIntent = new Intent(this, DeleteNotificationService.class); deleteIntent.putExtra(TODOUUID, mTodoUUID); Notification notification = new Notification.Builder(this) .setContentTitle(mTodoText) .setSmallIcon(R.drawable.ic_done_white_24dp) .setAutoCancel(true) .setDefaults(Notification.DEFAULT_SOUND) .setDeleteIntent(PendingIntent.getService(this, mTodoUUID.hashCode(), deleteIntent, PendingIntent.FLAG_UPDATE_CURRENT)) .setContentIntent(PendingIntent.getActivity(this, mTodoUUID.hashCode(), i, PendingIntent.FLAG_UPDATE_CURRENT)) .build(); manager.notify(100, notification); } }","dependencies":[{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Reminder/ReminderActivity.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.Reminder; import android.os.Bundle; import android.support.annotation.NonNull; import com.example.avjindersinghsekhon.minimaltodo.AppDefault.AppDefaultActivity; import com.example.avjindersinghsekhon.minimaltodo.R; public class ReminderActivity extends AppDefaultActivity { @Override protected void onCreate(final Bundle savedInstanceState) { super.onCreate(savedInstanceState); } @Override protected int contentViewLayoutRes() { return R.layout.reminder_layout; } @NonNull @Override protected ReminderFragment createInitialFragment() { return ReminderFragment.newInstance(); } }"},{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Utility/DeleteNotificationService.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.Utility; import android.app.IntentService; import android.content.Intent; import android.content.SharedPreferences; import com.example.avjindersinghsekhon.minimaltodo.Main.MainFragment; import java.util.ArrayList; import java.util.UUID; public class DeleteNotificationService extends IntentService { private StoreRetrieveData storeRetrieveData; private ArrayList<ToDoItem> mToDoItems; private ToDoItem mItem; public DeleteNotificationService() { super(\"DeleteNotificationService\"); } @Override protected void onHandleIntent(Intent intent) { storeRetrieveData = new StoreRetrieveData(this, MainFragment.FILENAME); UUID todoID = (UUID) intent.getSerializableExtra(TodoNotificationService.TODOUUID); mToDoItems = loadData(); if (mToDoItems != null) { for (ToDoItem item : mToDoItems) { if (item.getIdentifier().equals(todoID)) { mItem = item; break; } } if (mItem != null) { mToDoItems.remove(mItem); dataChanged(); saveData(); } } } private void dataChanged() { SharedPreferences sharedPreferences = getSharedPreferences(MainFragment.SHARED_PREF_DATA_SET_CHANGED, MODE_PRIVATE); SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putBoolean(MainFragment.CHANGE_OCCURED, true); editor.apply(); } private void saveData() { try { storeRetrieveData.saveToFile(mToDoItems); } catch (Exception e) { e.printStackTrace(); } } @Override public void onDestroy() { super.onDestroy(); saveData(); } private ArrayList<ToDoItem> loadData() { try { return storeRetrieveData.loadFromFile(); } catch (Exception e) { e.printStackTrace(); } return null; } }"}]}}
{"project_id":215,"chunk_id":0,"content":{"main_file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Utility/ScrollingFABBehaviour.java","main_file_content":"package com.example.avjindersinghsekhon.minimaltodo.Utility; import android.content.Context; import android.support.design.widget.CoordinatorLayout; import android.support.design.widget.FloatingActionButton; import android.support.design.widget.Snackbar; import android.support.v7.widget.Toolbar; import android.util.AttributeSet; import android.view.View; public class ScrollingFABBehaviour extends CoordinatorLayout.Behavior<FloatingActionButton> { private int toolbarHeight; private static boolean scrolledUp = false; private static boolean scrolledDown = false; public ScrollingFABBehaviour(Context context, AttributeSet attributeSet) { super(context, attributeSet); this.toolbarHeight = Utils.getToolbarHeight(context); } @Override public boolean layoutDependsOn(CoordinatorLayout parent, FloatingActionButton child, View dependency) { return (dependency instanceof Snackbar.SnackbarLayout) || (dependency instanceof Toolbar); } @Override public boolean onDependentViewChanged(CoordinatorLayout parent, final FloatingActionButton child, View dependency) { if (dependency instanceof Snackbar.SnackbarLayout) { float finalVal = (float) parent.getHeight() - dependency.getY(); child.setTranslationY(-finalVal); } if (dependency instanceof Toolbar) { CoordinatorLayout.LayoutParams lp = (CoordinatorLayout.LayoutParams) child.getLayoutParams(); int fabBottomMargin = lp.bottomMargin; int distanceToScroll = child.getHeight() + fabBottomMargin; float finalVal = dependency.getY() / (float) toolbarHeight; float distFinal = -distanceToScroll * finalVal; child.setTranslationY(distFinal); } return true; } }","dependencies":[{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Utility/Utils.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.Utility; import android.content.Context; import android.content.res.TypedArray; import com.example.avjindersinghsekhon.minimaltodo.R; public class Utils { public static int getToolbarHeight(Context context) { final TypedArray styledAttributes = context.getTheme().obtainStyledAttributes( new int[]{R.attr.actionBarSize}); int toolbarHeight = (int) styledAttributes.getDimension(0, 0); styledAttributes.recycle(); return toolbarHeight; } }"}]}}
{"project_id":215,"chunk_id":0,"content":{"main_file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Utility/ToDoItem.java","main_file_content":"package com.example.avjindersinghsekhon.minimaltodo.Utility; import org.json.JSONException; import org.json.JSONObject; import java.io.Serializable; import java.util.Date; import java.util.UUID; public class ToDoItem implements Serializable { private String mToDoText; private boolean mHasReminder; private String mToDoDescription; private int mTodoColor; private Date mToDoDate; private UUID mTodoIdentifier; private static final String TODODESCRIPTION = \"tododescription\"; private static final String TODOTEXT = \"todotext\"; private static final String TODOREMINDER = \"todoreminder\"; private static final String TODOCOLOR = \"todocolor\"; private static final String TODODATE = \"tododate\"; private static final String TODOIDENTIFIER = \"todoidentifier\"; public ToDoItem(String todoBody,String tododescription, boolean hasReminder, Date toDoDate) { mToDoText = todoBody; mHasReminder = hasReminder; mToDoDate = toDoDate; mToDoDescription = tododescription; mTodoColor = 1677725; mTodoIdentifier = UUID.randomUUID(); } public ToDoItem(JSONObject jsonObject) throws JSONException { mToDoText = jsonObject.getString(TODOTEXT); mToDoDescription = jsonObject.getString(TODODESCRIPTION); mHasReminder = jsonObject.getBoolean(TODOREMINDER); mTodoColor = jsonObject.getInt(TODOCOLOR); mTodoIdentifier = UUID.fromString(jsonObject.getString(TODOIDENTIFIER)); if (jsonObject.has(TODODATE)) { mToDoDate = new Date(jsonObject.getLong(TODODATE)); } } public JSONObject toJSON() throws JSONException { JSONObject jsonObject = new JSONObject(); jsonObject.put(TODOTEXT, mToDoText); jsonObject.put(TODOREMINDER, mHasReminder); jsonObject.put(TODODESCRIPTION, mToDoDescription); if (mToDoDate != null) { jsonObject.put(TODODATE, mToDoDate.getTime()); } jsonObject.put(TODOCOLOR, mTodoColor); jsonObject.put(TODOIDENTIFIER, mTodoIdentifier.toString()); return jsonObject; } public ToDoItem() { this(\"Clean my room\",\"Sweep and Mop my Room\", true, new Date()); } public String getmToDoDescription() { return mToDoDescription;} public void setmToDoDescription(String mToDoDescription){this.mToDoDescription = mToDoDescription;} public String getToDoText() { return mToDoText; } public void setToDoText(String mToDoText) { this.mToDoText = mToDoText; } public boolean hasReminder() { return mHasReminder; } public void setHasReminder(boolean mHasReminder) { this.mHasReminder = mHasReminder; } public Date getToDoDate() { return mToDoDate; } public int getTodoColor() { return mTodoColor; } public void setTodoColor(int mTodoColor) { this.mTodoColor = mTodoColor; } public void setToDoDate(Date mToDoDate) { this.mToDoDate = mToDoDate; } public UUID getIdentifier() { return mTodoIdentifier; } }","dependencies":[]}}
{"project_id":215,"chunk_id":0,"content":{"main_file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Utility/CustomTextInputLayout.java","main_file_content":"package com.example.avjindersinghsekhon.minimaltodo.Utility; import android.content.Context; import android.graphics.Canvas; import android.support.design.widget.TextInputLayout; import android.support.v4.view.ViewCompat; import android.util.AttributeSet; import android.view.View; import android.view.ViewGroup; import android.widget.EditText; public class CustomTextInputLayout extends TextInputLayout { private boolean mIsHintSet; private CharSequence mHint; public CustomTextInputLayout(Context context) { super(context); } public CustomTextInputLayout(Context context, AttributeSet attrs) { super(context, attrs); } @Override public void addView(View child, int index, ViewGroup.LayoutParams params) { if (child instanceof EditText) { mHint = ((EditText) child).getHint(); } super.addView(child, index, params); } @Override protected void onDraw(Canvas canvas) { super.onDraw(canvas); if (!mIsHintSet && ViewCompat.isLaidOut(this)) { setHint(null); CharSequence currentEditTextHint = getEditText().getHint(); if (currentEditTextHint != null && currentEditTextHint.length() > 0) { mHint = currentEditTextHint; } setHint(mHint); mIsHintSet = true; } } }","dependencies":[]}}
{"project_id":215,"chunk_id":0,"content":{"main_file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Utility/StoreRetrieveData.java","main_file_content":"package com.example.avjindersinghsekhon.minimaltodo.Utility; import android.content.Context; import org.json.JSONArray; import org.json.JSONException; import org.json.JSONObject; import org.json.JSONTokener; import java.io.BufferedReader; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStreamWriter; import java.util.ArrayList; public class StoreRetrieveData { private Context mContext; private String mFileName; public StoreRetrieveData(Context context, String filename) { mContext = context; mFileName = filename; } public static JSONArray toJSONArray(ArrayList<ToDoItem> items) throws JSONException { JSONArray jsonArray = new JSONArray(); for (ToDoItem item : items) { JSONObject jsonObject = item.toJSON(); jsonArray.put(jsonObject); } return jsonArray; } public void saveToFile(ArrayList<ToDoItem> items) throws JSONException, IOException { FileOutputStream fileOutputStream; OutputStreamWriter outputStreamWriter; fileOutputStream = mContext.openFileOutput(mFileName, Context.MODE_PRIVATE); outputStreamWriter = new OutputStreamWriter(fileOutputStream); outputStreamWriter.write(toJSONArray(items).toString()); outputStreamWriter.close(); fileOutputStream.close(); } public ArrayList<ToDoItem> loadFromFile() throws IOException, JSONException { ArrayList<ToDoItem> items = new ArrayList<>(); BufferedReader bufferedReader = null; FileInputStream fileInputStream = null; try { fileInputStream = mContext.openFileInput(mFileName); StringBuilder builder = new StringBuilder(); String line; bufferedReader = new BufferedReader(new InputStreamReader(fileInputStream)); while ((line = bufferedReader.readLine()) != null) { builder.append(line); } JSONArray jsonArray = (JSONArray) new JSONTokener(builder.toString()).nextValue(); for (int i = 0; i < jsonArray.length(); i++) { ToDoItem item = new ToDoItem(jsonArray.getJSONObject(i)); items.add(item); } } catch (FileNotFoundException fnfe) { } finally { if (bufferedReader != null) { bufferedReader.close(); } if (fileInputStream != null) { fileInputStream.close(); } } return items; } }","dependencies":[{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Utility/ToDoItem.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.Utility; import org.json.JSONException; import org.json.JSONObject; import java.io.Serializable; import java.util.Date; import java.util.UUID; public class ToDoItem implements Serializable { private String mToDoText; private boolean mHasReminder; private String mToDoDescription; private int mTodoColor; private Date mToDoDate; private UUID mTodoIdentifier; private static final String TODODESCRIPTION = \"tododescription\"; private static final String TODOTEXT = \"todotext\"; private static final String TODOREMINDER = \"todoreminder\"; private static final String TODOCOLOR = \"todocolor\"; private static final String TODODATE = \"tododate\"; private static final String TODOIDENTIFIER = \"todoidentifier\"; public ToDoItem(String todoBody,String tododescription, boolean hasReminder, Date toDoDate) { mToDoText = todoBody; mHasReminder = hasReminder; mToDoDate = toDoDate; mToDoDescription = tododescription; mTodoColor = 1677725; mTodoIdentifier = UUID.randomUUID(); } public ToDoItem(JSONObject jsonObject) throws JSONException { mToDoText = jsonObject.getString(TODOTEXT); mToDoDescription = jsonObject.getString(TODODESCRIPTION); mHasReminder = jsonObject.getBoolean(TODOREMINDER); mTodoColor = jsonObject.getInt(TODOCOLOR); mTodoIdentifier = UUID.fromString(jsonObject.getString(TODOIDENTIFIER)); if (jsonObject.has(TODODATE)) { mToDoDate = new Date(jsonObject.getLong(TODODATE)); } } public JSONObject toJSON() throws JSONException { JSONObject jsonObject = new JSONObject(); jsonObject.put(TODOTEXT, mToDoText); jsonObject.put(TODOREMINDER, mHasReminder); jsonObject.put(TODODESCRIPTION, mToDoDescription); if (mToDoDate != null) { jsonObject.put(TODODATE, mToDoDate.getTime()); } jsonObject.put(TODOCOLOR, mTodoColor); jsonObject.put(TODOIDENTIFIER, mTodoIdentifier.toString()); return jsonObject; } public ToDoItem() { this(\"Clean my room\",\"Sweep and Mop my Room\", true, new Date()); } public String getmToDoDescription() { return mToDoDescription;} public void setmToDoDescription(String mToDoDescription){this.mToDoDescription = mToDoDescription;} public String getToDoText() { return mToDoText; } public void setToDoText(String mToDoText) { this.mToDoText = mToDoText; } public boolean hasReminder() { return mHasReminder; } public void setHasReminder(boolean mHasReminder) { this.mHasReminder = mHasReminder; } public Date getToDoDate() { return mToDoDate; } public int getTodoColor() { return mTodoColor; } public void setTodoColor(int mTodoColor) { this.mTodoColor = mTodoColor; } public void setToDoDate(Date mToDoDate) { this.mToDoDate = mToDoDate; } public UUID getIdentifier() { return mTodoIdentifier; } }"}]}}
{"project_id":215,"chunk_id":0,"content":{"main_file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Utility/Utils.java","main_file_content":"package com.example.avjindersinghsekhon.minimaltodo.Utility; import android.content.Context; import android.content.res.TypedArray; import com.example.avjindersinghsekhon.minimaltodo.R; public class Utils { public static int getToolbarHeight(Context context) { final TypedArray styledAttributes = context.getTheme().obtainStyledAttributes( new int[]{R.attr.actionBarSize}); int toolbarHeight = (int) styledAttributes.getDimension(0, 0); styledAttributes.recycle(); return toolbarHeight; } }","dependencies":[]}}
{"project_id":215,"chunk_id":0,"content":{"main_file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Utility/DeleteNotificationService.java","main_file_content":"package com.example.avjindersinghsekhon.minimaltodo.Utility; import android.app.IntentService; import android.content.Intent; import android.content.SharedPreferences; import com.example.avjindersinghsekhon.minimaltodo.Main.MainFragment; import java.util.ArrayList; import java.util.UUID; public class DeleteNotificationService extends IntentService { private StoreRetrieveData storeRetrieveData; private ArrayList<ToDoItem> mToDoItems; private ToDoItem mItem; public DeleteNotificationService() { super(\"DeleteNotificationService\"); } @Override protected void onHandleIntent(Intent intent) { storeRetrieveData = new StoreRetrieveData(this, MainFragment.FILENAME); UUID todoID = (UUID) intent.getSerializableExtra(TodoNotificationService.TODOUUID); mToDoItems = loadData(); if (mToDoItems != null) { for (ToDoItem item : mToDoItems) { if (item.getIdentifier().equals(todoID)) { mItem = item; break; } } if (mItem != null) { mToDoItems.remove(mItem); dataChanged(); saveData(); } } } private void dataChanged() { SharedPreferences sharedPreferences = getSharedPreferences(MainFragment.SHARED_PREF_DATA_SET_CHANGED, MODE_PRIVATE); SharedPreferences.Editor editor = sharedPreferences.edit(); editor.putBoolean(MainFragment.CHANGE_OCCURED, true); editor.apply(); } private void saveData() { try { storeRetrieveData.saveToFile(mToDoItems); } catch (Exception e) { e.printStackTrace(); } } @Override public void onDestroy() { super.onDestroy(); saveData(); } private ArrayList<ToDoItem> loadData() { try { return storeRetrieveData.loadFromFile(); } catch (Exception e) { e.printStackTrace(); } return null; } }","dependencies":[{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Utility/StoreRetrieveData.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.Utility; import android.content.Context; import org.json.JSONArray; import org.json.JSONException; import org.json.JSONObject; import org.json.JSONTokener; import java.io.BufferedReader; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStreamWriter; import java.util.ArrayList; public class StoreRetrieveData { private Context mContext; private String mFileName; public StoreRetrieveData(Context context, String filename) { mContext = context; mFileName = filename; } public static JSONArray toJSONArray(ArrayList<ToDoItem> items) throws JSONException { JSONArray jsonArray = new JSONArray(); for (ToDoItem item : items) { JSONObject jsonObject = item.toJSON(); jsonArray.put(jsonObject); } return jsonArray; } public void saveToFile(ArrayList<ToDoItem> items) throws JSONException, IOException { FileOutputStream fileOutputStream; OutputStreamWriter outputStreamWriter; fileOutputStream = mContext.openFileOutput(mFileName, Context.MODE_PRIVATE); outputStreamWriter = new OutputStreamWriter(fileOutputStream); outputStreamWriter.write(toJSONArray(items).toString()); outputStreamWriter.close(); fileOutputStream.close(); } public ArrayList<ToDoItem> loadFromFile() throws IOException, JSONException { ArrayList<ToDoItem> items = new ArrayList<>(); BufferedReader bufferedReader = null; FileInputStream fileInputStream = null; try { fileInputStream = mContext.openFileInput(mFileName); StringBuilder builder = new StringBuilder(); String line; bufferedReader = new BufferedReader(new InputStreamReader(fileInputStream)); while ((line = bufferedReader.readLine()) != null) { builder.append(line); } JSONArray jsonArray = (JSONArray) new JSONTokener(builder.toString()).nextValue(); for (int i = 0; i < jsonArray.length(); i++) { ToDoItem item = new ToDoItem(jsonArray.getJSONObject(i)); items.add(item); } } catch (FileNotFoundException fnfe) { } finally { if (bufferedReader != null) { bufferedReader.close(); } if (fileInputStream != null) { fileInputStream.close(); } } return items; } }"},{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Utility/ToDoItem.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.Utility; import org.json.JSONException; import org.json.JSONObject; import java.io.Serializable; import java.util.Date; import java.util.UUID; public class ToDoItem implements Serializable { private String mToDoText; private boolean mHasReminder; private String mToDoDescription; private int mTodoColor; private Date mToDoDate; private UUID mTodoIdentifier; private static final String TODODESCRIPTION = \"tododescription\"; private static final String TODOTEXT = \"todotext\"; private static final String TODOREMINDER = \"todoreminder\"; private static final String TODOCOLOR = \"todocolor\"; private static final String TODODATE = \"tododate\"; private static final String TODOIDENTIFIER = \"todoidentifier\"; public ToDoItem(String todoBody,String tododescription, boolean hasReminder, Date toDoDate) { mToDoText = todoBody; mHasReminder = hasReminder; mToDoDate = toDoDate; mToDoDescription = tododescription; mTodoColor = 1677725; mTodoIdentifier = UUID.randomUUID(); } public ToDoItem(JSONObject jsonObject) throws JSONException { mToDoText = jsonObject.getString(TODOTEXT); mToDoDescription = jsonObject.getString(TODODESCRIPTION); mHasReminder = jsonObject.getBoolean(TODOREMINDER); mTodoColor = jsonObject.getInt(TODOCOLOR); mTodoIdentifier = UUID.fromString(jsonObject.getString(TODOIDENTIFIER)); if (jsonObject.has(TODODATE)) { mToDoDate = new Date(jsonObject.getLong(TODODATE)); } } public JSONObject toJSON() throws JSONException { JSONObject jsonObject = new JSONObject(); jsonObject.put(TODOTEXT, mToDoText); jsonObject.put(TODOREMINDER, mHasReminder); jsonObject.put(TODODESCRIPTION, mToDoDescription); if (mToDoDate != null) { jsonObject.put(TODODATE, mToDoDate.getTime()); } jsonObject.put(TODOCOLOR, mTodoColor); jsonObject.put(TODOIDENTIFIER, mTodoIdentifier.toString()); return jsonObject; } public ToDoItem() { this(\"Clean my room\",\"Sweep and Mop my Room\", true, new Date()); } public String getmToDoDescription() { return mToDoDescription;} public void setmToDoDescription(String mToDoDescription){this.mToDoDescription = mToDoDescription;} public String getToDoText() { return mToDoText; } public void setToDoText(String mToDoText) { this.mToDoText = mToDoText; } public boolean hasReminder() { return mHasReminder; } public void setHasReminder(boolean mHasReminder) { this.mHasReminder = mHasReminder; } public Date getToDoDate() { return mToDoDate; } public int getTodoColor() { return mTodoColor; } public void setTodoColor(int mTodoColor) { this.mTodoColor = mTodoColor; } public void setToDoDate(Date mToDoDate) { this.mToDoDate = mToDoDate; } public UUID getIdentifier() { return mTodoIdentifier; } }"}]}}
{"project_id":215,"chunk_id":0,"content":{"main_file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Utility/ItemTouchHelperClass.java","main_file_content":"package com.example.avjindersinghsekhon.minimaltodo.Utility; import android.support.v7.widget.RecyclerView; import android.support.v7.widget.helper.ItemTouchHelper; public class ItemTouchHelperClass extends ItemTouchHelper.Callback { private ItemTouchHelperAdapter adapter; public interface ItemTouchHelperAdapter { void onItemMoved(int fromPosition, int toPosition); void onItemRemoved(int position); } public ItemTouchHelperClass(ItemTouchHelperAdapter ad) { adapter = ad; } @Override public boolean isLongPressDragEnabled() { return true; } @Override public boolean isItemViewSwipeEnabled() { return true; } @Override public int getMovementFlags(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder) { int upFlags = ItemTouchHelper.UP | ItemTouchHelper.DOWN; int swipeFlags = ItemTouchHelper.START | ItemTouchHelper.END; return makeMovementFlags(upFlags, swipeFlags); } @Override public boolean onMove(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder, RecyclerView.ViewHolder target) { adapter.onItemMoved(viewHolder.getAdapterPosition(), target.getAdapterPosition()); return true; } @Override public void onSwiped(RecyclerView.ViewHolder viewHolder, int direction) { adapter.onItemRemoved(viewHolder.getAdapterPosition()); } }","dependencies":[]}}
{"project_id":215,"chunk_id":0,"content":{"main_file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Utility/PreferenceKeys.java","main_file_content":"package com.example.avjindersinghsekhon.minimaltodo.Utility; import android.content.res.Resources; import com.example.avjindersinghsekhon.minimaltodo.R; public class PreferenceKeys { public final String night_mode_pref_key; public PreferenceKeys(Resources resources) { night_mode_pref_key = resources.getString(R.string.night_mode_pref_key); } }","dependencies":[]}}
{"project_id":215,"chunk_id":0,"content":{"main_file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Utility/RecyclerViewEmptySupport.java","main_file_content":"package com.example.avjindersinghsekhon.minimaltodo.Utility; import android.content.Context; import android.support.v7.widget.RecyclerView; import android.util.AttributeSet; import android.view.View; public class RecyclerViewEmptySupport extends RecyclerView { private View emptyView; private AdapterDataObserver observer = new AdapterDataObserver() { @Override public void onChanged() { showEmptyView(); } @Override public void onItemRangeInserted(int positionStart, int itemCount) { super.onItemRangeInserted(positionStart, itemCount); showEmptyView(); } @Override public void onItemRangeRemoved(int positionStart, int itemCount) { super.onItemRangeRemoved(positionStart, itemCount); showEmptyView(); } }; public RecyclerViewEmptySupport(Context context) { super(context); } public void showEmptyView() { Adapter<?> adapter = getAdapter(); if (adapter != null && emptyView != null) { if (adapter.getItemCount() == 0) { emptyView.setVisibility(VISIBLE); RecyclerViewEmptySupport.this.setVisibility(GONE); } else { emptyView.setVisibility(GONE); RecyclerViewEmptySupport.this.setVisibility(VISIBLE); } } } public RecyclerViewEmptySupport(Context context, AttributeSet attrs) { super(context, attrs); } public RecyclerViewEmptySupport(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); } @Override public void setAdapter(Adapter adapter) { super.setAdapter(adapter); if (adapter != null) { adapter.registerAdapterDataObserver(observer); observer.onChanged(); } } public void setEmptyView(View v) { emptyView = v; } }","dependencies":[]}}
{"project_id":215,"chunk_id":0,"content":{"main_file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/androidTest/java/com/example/avjindersinghsekhon/minimaltodo/TestStoreRetrieveData.java","main_file_content":"package com.example.avjindersinghsekhon.minimaltodo; import android.content.Context; import android.test.ActivityUnitTestCase; import com.example.avjindersinghsekhon.minimaltodo.Main.MainActivity; import com.example.avjindersinghsekhon.minimaltodo.Utility.StoreRetrieveData; import com.example.avjindersinghsekhon.minimaltodo.Utility.ToDoItem; import org.json.JSONArray; import java.util.ArrayList; import java.util.Date; public class TestStoreRetrieveData extends ActivityUnitTestCase<MainActivity> { private MainActivity mMainActivity; private ArrayList<ToDoItem> mOriginalData; ArrayList<ToDoItem> mTestData; public TestStoreRetrieveData() { super(MainActivity.class); mTestData = new ArrayList<>(); for (int i = 1; i < 11; i++) { mTestData.add(new ToDoItem( \"item\" + i, false, new Date())); } } @Override protected void setUp() throws Exception { super.setUp(); mMainActivity = getActivity(); mOriginalData = new ArrayList<>(); StoreRetrieveData dataStorage = getDataStorage(); try { ArrayList<ToDoItem> items = dataStorage.loadFromFile(); if (items.size() > 0) { mOriginalData.clear(); mOriginalData.addAll(items); items.clear(); dataStorage.saveToFile(items); } } catch (Exception e) { fail(\"Couldn't store data: \" + e.getMessage()); } } @Override protected void tearDown() throws Exception { super.tearDown(); StoreRetrieveData dataStorage = getDataStorage(); dataStorage.saveToFile(mOriginalData); } public void testPreconditions() { StoreRetrieveData dataStorage = getDataStorage(); ArrayList<ToDoItem> items = null; try { items = dataStorage.loadFromFile(); } catch (Exception e) { fail(\"Couldn't read from data storage: \" + e.getMessage()); } assertEquals(0, items.size()); } public void testWritingToAndReadingFromTheDataStorage() { StoreRetrieveData dataStorage = getDataStorage(); ArrayList<ToDoItem> retrievedItems = new ArrayList<>(); try { dataStorage.saveToFile(mTestData); } catch (Exception e) { fail(\"Couldn't store data: \" + e.getMessage()); } try { retrievedItems = dataStorage.loadFromFile(); } catch (Exception e) { fail(\"Couldn't read from data storage: \" + e.getMessage()); } assertEquals(mTestData.size(), retrievedItems.size()); for (ToDoItem retrievedItem : retrievedItems) { boolean found = false; for (ToDoItem testItem : mTestData) { if (retrievedItem.getIdentifier().equals(testItem.getIdentifier()) && retrievedItem.getToDoText().equals(testItem.getToDoText()) && retrievedItem.hasReminder() == testItem.hasReminder() && retrievedItem.getToDoDate().equals(testItem.getToDoDate())) { found = true; break; } } if (!found) { fail(\"Content mis-match between test data and data retrieved from the storage!\"); } } } public void testArrayListToJsonArrayConversion() { try { JSONArray array = StoreRetrieveData.toJSONArray(mTestData); assertEquals(mTestData.size(), array.length()); } catch (Exception e) { fail(\"Exception thrown when converting to JSONArray: \" + e.getMessage()); } } private StoreRetrieveData getDataStorage() { Context context = getInstrumentation().getTargetContext(); return new StoreRetrieveData(context, MainActivity.FILENAME); } }","dependencies":[{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Main/MainActivity.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.Main; import android.content.Intent; import android.os.Bundle; import android.support.annotation.NonNull; import android.support.v4.app.Fragment; import android.support.v7.app.ActionBar; import android.view.Menu; import android.view.MenuItem; import com.example.avjindersinghsekhon.minimaltodo.About.AboutActivity; import com.example.avjindersinghsekhon.minimaltodo.AppDefault.AppDefaultActivity; import com.example.avjindersinghsekhon.minimaltodo.R; import com.example.avjindersinghsekhon.minimaltodo.Settings.SettingsActivity; public class MainActivity extends AppDefaultActivity { protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); final android.support.v7.widget.Toolbar toolbar = (android.support.v7.widget.Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar); ActionBar actionBar = getSupportActionBar(); if (actionBar != null) { actionBar.setDisplayHomeAsUpEnabled(false); } } @Override protected int contentViewLayoutRes() { return R.layout.activity_main; } @NonNull @Override protected Fragment createInitialFragment() { return MainFragment.newInstance(); } @Override public boolean onCreateOptionsMenu(Menu menu) { getMenuInflater().inflate(R.menu.menu_main, menu); return true; } @Override public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()) { case R.id.aboutMeMenuItem: Intent i = new Intent(this, AboutActivity.class); startActivity(i); return true; case R.id.preferences: Intent intent = new Intent(this, SettingsActivity.class); startActivity(intent); return true; default: return super.onOptionsItemSelected(item); } } }"},{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Utility/StoreRetrieveData.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.Utility; import android.content.Context; import org.json.JSONArray; import org.json.JSONException; import org.json.JSONObject; import org.json.JSONTokener; import java.io.BufferedReader; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStreamWriter; import java.util.ArrayList; public class StoreRetrieveData { private Context mContext; private String mFileName; public StoreRetrieveData(Context context, String filename) { mContext = context; mFileName = filename; } public static JSONArray toJSONArray(ArrayList<ToDoItem> items) throws JSONException { JSONArray jsonArray = new JSONArray(); for (ToDoItem item : items) { JSONObject jsonObject = item.toJSON(); jsonArray.put(jsonObject); } return jsonArray; } public void saveToFile(ArrayList<ToDoItem> items) throws JSONException, IOException { FileOutputStream fileOutputStream; OutputStreamWriter outputStreamWriter; fileOutputStream = mContext.openFileOutput(mFileName, Context.MODE_PRIVATE); outputStreamWriter = new OutputStreamWriter(fileOutputStream); outputStreamWriter.write(toJSONArray(items).toString()); outputStreamWriter.close(); fileOutputStream.close(); } public ArrayList<ToDoItem> loadFromFile() throws IOException, JSONException { ArrayList<ToDoItem> items = new ArrayList<>(); BufferedReader bufferedReader = null; FileInputStream fileInputStream = null; try { fileInputStream = mContext.openFileInput(mFileName); StringBuilder builder = new StringBuilder(); String line; bufferedReader = new BufferedReader(new InputStreamReader(fileInputStream)); while ((line = bufferedReader.readLine()) != null) { builder.append(line); } JSONArray jsonArray = (JSONArray) new JSONTokener(builder.toString()).nextValue(); for (int i = 0; i < jsonArray.length(); i++) { ToDoItem item = new ToDoItem(jsonArray.getJSONObject(i)); items.add(item); } } catch (FileNotFoundException fnfe) { } finally { if (bufferedReader != null) { bufferedReader.close(); } if (fileInputStream != null) { fileInputStream.close(); } } return items; } }"},{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Utility/ToDoItem.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.Utility; import org.json.JSONException; import org.json.JSONObject; import java.io.Serializable; import java.util.Date; import java.util.UUID; public class ToDoItem implements Serializable { private String mToDoText; private boolean mHasReminder; private String mToDoDescription; private int mTodoColor; private Date mToDoDate; private UUID mTodoIdentifier; private static final String TODODESCRIPTION = \"tododescription\"; private static final String TODOTEXT = \"todotext\"; private static final String TODOREMINDER = \"todoreminder\"; private static final String TODOCOLOR = \"todocolor\"; private static final String TODODATE = \"tododate\"; private static final String TODOIDENTIFIER = \"todoidentifier\"; public ToDoItem(String todoBody,String tododescription, boolean hasReminder, Date toDoDate) { mToDoText = todoBody; mHasReminder = hasReminder; mToDoDate = toDoDate; mToDoDescription = tododescription; mTodoColor = 1677725; mTodoIdentifier = UUID.randomUUID(); } public ToDoItem(JSONObject jsonObject) throws JSONException { mToDoText = jsonObject.getString(TODOTEXT); mToDoDescription = jsonObject.getString(TODODESCRIPTION); mHasReminder = jsonObject.getBoolean(TODOREMINDER); mTodoColor = jsonObject.getInt(TODOCOLOR); mTodoIdentifier = UUID.fromString(jsonObject.getString(TODOIDENTIFIER)); if (jsonObject.has(TODODATE)) { mToDoDate = new Date(jsonObject.getLong(TODODATE)); } } public JSONObject toJSON() throws JSONException { JSONObject jsonObject = new JSONObject(); jsonObject.put(TODOTEXT, mToDoText); jsonObject.put(TODOREMINDER, mHasReminder); jsonObject.put(TODODESCRIPTION, mToDoDescription); if (mToDoDate != null) { jsonObject.put(TODODATE, mToDoDate.getTime()); } jsonObject.put(TODOCOLOR, mTodoColor); jsonObject.put(TODOIDENTIFIER, mTodoIdentifier.toString()); return jsonObject; } public ToDoItem() { this(\"Clean my room\",\"Sweep and Mop my Room\", true, new Date()); } public String getmToDoDescription() { return mToDoDescription;} public void setmToDoDescription(String mToDoDescription){this.mToDoDescription = mToDoDescription;} public String getToDoText() { return mToDoText; } public void setToDoText(String mToDoText) { this.mToDoText = mToDoText; } public boolean hasReminder() { return mHasReminder; } public void setHasReminder(boolean mHasReminder) { this.mHasReminder = mHasReminder; } public Date getToDoDate() { return mToDoDate; } public int getTodoColor() { return mTodoColor; } public void setTodoColor(int mTodoColor) { this.mTodoColor = mTodoColor; } public void setToDoDate(Date mToDoDate) { this.mToDoDate = mToDoDate; } public UUID getIdentifier() { return mTodoIdentifier; } }"}]}}
{"project_id":215,"chunk_id":0,"content":{"main_file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/androidTest/java/com/example/avjindersinghsekhon/minimaltodo/ApplicationTest.java","main_file_content":"package com.example.avjindersinghsekhon.minimaltodo; import android.app.Application; import android.test.ApplicationTestCase; public class ApplicationTest extends ApplicationTestCase<Application> { public ApplicationTest() { super(Application.class); } }","dependencies":[]}}
{"project_id":215,"chunk_id":0,"content":{"main_file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/androidTest/java/com/example/avjindersinghsekhon/minimaltodo/TestTodoItem.java","main_file_content":"package com.example.avjindersinghsekhon.minimaltodo; import com.example.avjindersinghsekhon.minimaltodo.Utility.ToDoItem; import junit.framework.TestCase; import org.json.JSONException; import org.json.JSONObject; import java.util.Date; public class TestTodoItem extends TestCase { private final Date CURRENT_DATE = new Date(); private final String TEXT_BODY = \"This is some text\"; private final boolean REMINDER_OFF = false; private final boolean REMINDER_ON = true; public void testThreeParameterConstructor() { ToDoItem toDoItem = getToDoItem(REMINDER_OFF); assertEquals(TEXT_BODY, toDoItem.getToDoText()); assertEquals(REMINDER_OFF, toDoItem.hasReminder()); assertEquals(CURRENT_DATE, toDoItem.getToDoDate()); } public void testObjectMarshallingToJson() { ToDoItem toDoItem = getToDoItem(REMINDER_ON); try { JSONObject json = toDoItem.toJSON(); assertEquals(TEXT_BODY, json.getString(\"todotext\")); assertEquals(REMINDER_ON, json.getBoolean(\"todoreminder\")); assertEquals(String.valueOf(CURRENT_DATE.getTime()), json.getString(\"tododate\")); } catch (JSONException e) { fail(\"Exception thrown during test execution: \" + e.getMessage()); } } public void testObjectUnmarshallingFromJson() { ToDoItem originalItem = getToDoItem(REMINDER_OFF); try { JSONObject json = originalItem.toJSON(); ToDoItem itemFromJson = new ToDoItem(json); assertEquals(originalItem.getToDoText(), itemFromJson.getToDoText()); assertEquals(originalItem.getToDoDate(), itemFromJson.getToDoDate()); assertEquals(originalItem.hasReminder(), itemFromJson.hasReminder()); assertEquals(originalItem.getIdentifier(), itemFromJson.getIdentifier()); } catch (JSONException e) { fail(\"Exception thrown during test execution: \" + e.getMessage()); } } private ToDoItem getToDoItem(boolean hasReminder) { return new ToDoItem(TEXT_BODY, hasReminder, CURRENT_DATE); } }","dependencies":[{"file_path":"Minimal-Todo-master/Minimal-Todo-master/app/src/main/java/com/example/avjindersinghsekhon/minimaltodo/Utility/ToDoItem.java","file_content":"package com.example.avjindersinghsekhon.minimaltodo.Utility; import org.json.JSONException; import org.json.JSONObject; import java.io.Serializable; import java.util.Date; import java.util.UUID; public class ToDoItem implements Serializable { private String mToDoText; private boolean mHasReminder; private String mToDoDescription; private int mTodoColor; private Date mToDoDate; private UUID mTodoIdentifier; private static final String TODODESCRIPTION = \"tododescription\"; private static final String TODOTEXT = \"todotext\"; private static final String TODOREMINDER = \"todoreminder\"; private static final String TODOCOLOR = \"todocolor\"; private static final String TODODATE = \"tododate\"; private static final String TODOIDENTIFIER = \"todoidentifier\"; public ToDoItem(String todoBody,String tododescription, boolean hasReminder, Date toDoDate) { mToDoText = todoBody; mHasReminder = hasReminder; mToDoDate = toDoDate; mToDoDescription = tododescription; mTodoColor = 1677725; mTodoIdentifier = UUID.randomUUID(); } public ToDoItem(JSONObject jsonObject) throws JSONException { mToDoText = jsonObject.getString(TODOTEXT); mToDoDescription = jsonObject.getString(TODODESCRIPTION); mHasReminder = jsonObject.getBoolean(TODOREMINDER); mTodoColor = jsonObject.getInt(TODOCOLOR); mTodoIdentifier = UUID.fromString(jsonObject.getString(TODOIDENTIFIER)); if (jsonObject.has(TODODATE)) { mToDoDate = new Date(jsonObject.getLong(TODODATE)); } } public JSONObject toJSON() throws JSONException { JSONObject jsonObject = new JSONObject(); jsonObject.put(TODOTEXT, mToDoText); jsonObject.put(TODOREMINDER, mHasReminder); jsonObject.put(TODODESCRIPTION, mToDoDescription); if (mToDoDate != null) { jsonObject.put(TODODATE, mToDoDate.getTime()); } jsonObject.put(TODOCOLOR, mTodoColor); jsonObject.put(TODOIDENTIFIER, mTodoIdentifier.toString()); return jsonObject; } public ToDoItem() { this(\"Clean my room\",\"Sweep and Mop my Room\", true, new Date()); } public String getmToDoDescription() { return mToDoDescription;} public void setmToDoDescription(String mToDoDescription){this.mToDoDescription = mToDoDescription;} public String getToDoText() { return mToDoText; } public void setToDoText(String mToDoText) { this.mToDoText = mToDoText; } public boolean hasReminder() { return mHasReminder; } public void setHasReminder(boolean mHasReminder) { this.mHasReminder = mHasReminder; } public Date getToDoDate() { return mToDoDate; } public int getTodoColor() { return mTodoColor; } public void setTodoColor(int mTodoColor) { this.mTodoColor = mTodoColor; } public void setToDoDate(Date mToDoDate) { this.mToDoDate = mToDoDate; } public UUID getIdentifier() { return mTodoIdentifier; } }"}]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/turbine/src/main/java/com/turbine/TurbineApplication.java","main_file_content":"package com.turbine; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.boot.builder.SpringApplicationBuilder; import org.springframework.cloud.netflix.turbine.EnableTurbine; @SpringBootApplication @EnableTurbine public class TurbineApplication { public static void main(String[] args) { new SpringApplicationBuilder(TurbineApplication.class).web(true).run(args); } }","dependencies":[]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/config-server/src/main/java/com/lovnx/ConfigApplication.java","main_file_content":"package com.lovnx; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.boot.builder.SpringApplicationBuilder; import org.springframework.cloud.config.server.EnableConfigServer; @EnableConfigServer @SpringBootApplication public class ConfigApplication { public static void main(String[] args) { new SpringApplicationBuilder(ConfigApplication.class).web(true).run(args); } }","dependencies":[]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/zuul/src/main/java/com/lovnx/ZuulApplication.java","main_file_content":"package com.lovnx; import org.springframework.boot.builder.SpringApplicationBuilder; import org.springframework.cloud.client.SpringCloudApplication; import org.springframework.cloud.netflix.zuul.EnableZuulProxy; import org.springframework.context.annotation.Bean; import com.lovnx.filter.AccessFilter; import com.lovnx.filter.ErrorFilter; import com.lovnx.filter.RateLimitFilter; import com.lovnx.filter.ResultFilter; import com.lovnx.filter.UuidFilter; import com.lovnx.filter.ValidateFilter; @EnableZuulProxy @SpringCloudApplication public class ZuulApplication { public static void main(String[] args) { new SpringApplicationBuilder(ZuulApplication.class).web(true).run(args); } @Bean public AccessFilter accessFilter() { return new AccessFilter(); } @Bean public RateLimitFilter rateLimiterFilter() { return new RateLimitFilter(); } @Bean public ResultFilter resultFilter() { return new ResultFilter(); } @Bean public UuidFilter uuidFilter() { return new UuidFilter(); } @Bean public ValidateFilter validateFilter() { return new ValidateFilter(); } @Bean public ErrorFilter errorFilter() { return new ErrorFilter(); } }","dependencies":[{"file_path":"micro-service-master/micro-service-master/zuul/src/main/java/com/lovnx/filter/ErrorFilter.java","file_content":"package com.lovnx.filter; import com.netflix.zuul.ZuulFilter; import com.netflix.zuul.context.RequestContext; import io.reactivex.netty.protocol.http.server.HttpServerResponse; import org.bouncycastle.jcajce.provider.digest.MD5; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import java.util.UUID; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; public class ErrorFilter extends ZuulFilter { private static Logger log = LoggerFactory.getLogger(ErrorFilter.class); @Override public String filterType() { return \"error\"; } @Override public int filterOrder() { return 0; } @Override public boolean shouldFilter() { return true; } @Override public Object run() { RequestContext ctx = RequestContext.getCurrentContext(); HttpServletRequest request = ctx.getRequest(); log.info(\"进入错误异常的过滤器！\"); log.info(\"\"); return null; } }"},{"file_path":"micro-service-master/micro-service-master/zuul/src/main/java/com/lovnx/filter/ResultFilter.java","file_content":"package com.lovnx.filter; import com.netflix.zuul.ZuulFilter; import com.netflix.zuul.context.RequestContext; import io.reactivex.netty.protocol.http.server.HttpServerResponse; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; public class ResultFilter extends ZuulFilter { private static Logger log = LoggerFactory.getLogger(ResultFilter.class); @Override public String filterType() { return \"post\"; } @Override public int filterOrder() { return 0; } @Override public boolean shouldFilter() { return true; } @Override public Object run() { RequestContext ctx = RequestContext.getCurrentContext(); HttpServletRequest request = ctx.getRequest(); log.info(\"进入结果处理的过滤器！\"); log.info(\"\"); return null; } }"}]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/zuul/src/main/java/com/lovnx/filter/ErrorFilter.java","main_file_content":"package com.lovnx.filter; import com.netflix.zuul.ZuulFilter; import com.netflix.zuul.context.RequestContext; import io.reactivex.netty.protocol.http.server.HttpServerResponse; import org.bouncycastle.jcajce.provider.digest.MD5; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import java.util.UUID; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; public class ErrorFilter extends ZuulFilter { private static Logger log = LoggerFactory.getLogger(ErrorFilter.class); @Override public String filterType() { return \"error\"; } @Override public int filterOrder() { return 0; } @Override public boolean shouldFilter() { return true; } @Override public Object run() { RequestContext ctx = RequestContext.getCurrentContext(); HttpServletRequest request = ctx.getRequest(); log.info(\"进入错误异常的过滤器！\"); log.info(\"\"); return null; } }","dependencies":[]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/zuul/src/main/java/com/lovnx/filter/ResultFilter.java","main_file_content":"package com.lovnx.filter; import com.netflix.zuul.ZuulFilter; import com.netflix.zuul.context.RequestContext; import io.reactivex.netty.protocol.http.server.HttpServerResponse; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; public class ResultFilter extends ZuulFilter { private static Logger log = LoggerFactory.getLogger(ResultFilter.class); @Override public String filterType() { return \"post\"; } @Override public int filterOrder() { return 0; } @Override public boolean shouldFilter() { return true; } @Override public Object run() { RequestContext ctx = RequestContext.getCurrentContext(); HttpServletRequest request = ctx.getRequest(); log.info(\"进入结果处理的过滤器！\"); log.info(\"\"); return null; } }","dependencies":[]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/zuul/src/main/java/com/lovnx/filter/SecondFilter.java","main_file_content":"package com.lovnx.filter; import com.netflix.zuul.ZuulFilter; import com.netflix.zuul.context.RequestContext; import io.reactivex.netty.protocol.http.server.HttpServerResponse; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; public class SecondFilter extends ZuulFilter { private static Logger log = LoggerFactory.getLogger(SecondFilter.class); @Override public String filterType() { return \"pre\"; } @Override public int filterOrder() { return 1; } @Override public boolean shouldFilter() { return true; } @Override public Object run() { RequestContext ctx = RequestContext.getCurrentContext(); HttpServletRequest request = ctx.getRequest(); log.info(\"第二级过滤器！\"); log.info(\"\"); throw new RuntimeException(); } }","dependencies":[]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/zuul/src/main/java/com/lovnx/filter/FirstFilter.java","main_file_content":"package com.lovnx.filter; import com.netflix.zuul.ZuulFilter; import com.netflix.zuul.context.RequestContext; import io.reactivex.netty.protocol.http.server.HttpServerResponse; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; public class FirstFilter extends ZuulFilter { private static Logger log = LoggerFactory.getLogger(FirstFilter.class); @Override public String filterType() { return \"pre\"; } @Override public int filterOrder() { return 0; } @Override public boolean shouldFilter() { return true; } @Override public Object run() { RequestContext ctx = RequestContext.getCurrentContext(); HttpServletRequest request = ctx.getRequest(); log.info(\"第一级过滤器！\"); log.info(\"\"); return null; } }","dependencies":[]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/hystrix-feign/src/main/java/com/feign_hystrix/FeignHystrixApplication.java","main_file_content":"package com.feign_hystrix; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker; import org.springframework.cloud.client.discovery.EnableDiscoveryClient; import org.springframework.cloud.netflix.feign.EnableFeignClients; @SpringBootApplication @EnableFeignClients @EnableDiscoveryClient @EnableCircuitBreaker public class FeignHystrixApplication { public static void main(String[] args) { SpringApplication.run(FeignHystrixApplication.class, args); } }","dependencies":[]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/hystrix-feign/src/main/java/com/feign_hystrix/feign/TestFeignClient.java","main_file_content":"package com.feign_hystrix.feign; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.cloud.netflix.feign.FeignClient; import org.springframework.stereotype.Component; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import com.feign_hystrix.feign.TestFeignClient.HystrixClientFallback; @FeignClient(name = \"service-B\",fallback = HystrixClientFallback.class) public interface TestFeignClient { @RequestMapping(\"/add\") public String add(@RequestParam(\"a\") Integer a,@RequestParam(\"b\") Integer b); @Component static class HystrixClientFallback implements TestFeignClient { private static final Logger LOGGER = LoggerFactory.getLogger(HystrixClientFallback.class); @Override public String add(Integer a, Integer b) { HystrixClientFallback.LOGGER.info(\"异常发生，进入fallback方法，接收的参数： {},{}\",a,b); return \"feign-hystrix\"; } } }","dependencies":[]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/hystrix-feign/src/main/java/com/feign_hystrix/feign/FeignController.java","main_file_content":"package com.feign_hystrix.feign; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; @RestController public class FeignController { @Autowired private TestFeignClient testFeignClient; @RequestMapping(value = \"/add\" , method = RequestMethod.GET) public String add(@RequestParam(\"a\") Integer a,@RequestParam(\"b\") Integer b) { String string = this.testFeignClient.add(a,b); return string; } }","dependencies":[{"file_path":"micro-service-master/micro-service-master/hystrix-feign/src/main/java/com/feign_hystrix/feign/TestFeignClient.java","file_content":"package com.feign_hystrix.feign; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.cloud.netflix.feign.FeignClient; import org.springframework.stereotype.Component; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import com.feign_hystrix.feign.TestFeignClient.HystrixClientFallback; @FeignClient(name = \"service-B\",fallback = HystrixClientFallback.class) public interface TestFeignClient { @RequestMapping(\"/add\") public String add(@RequestParam(\"a\") Integer a,@RequestParam(\"b\") Integer b); @Component static class HystrixClientFallback implements TestFeignClient { private static final Logger LOGGER = LoggerFactory.getLogger(HystrixClientFallback.class); @Override public String add(Integer a, Integer b) { HystrixClientFallback.LOGGER.info(\"异常发生，进入fallback方法，接收的参数： {},{}\",a,b); return \"feign-hystrix\"; } } }"}]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/sleuth/src/main/java/com/lovnx/Sleuth_Application.java","main_file_content":"package com.lovnx; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import zipkin.server.EnableZipkinServer; @SpringBootApplication @EnableZipkinServer public class Sleuth_Application { public static void main(String[] args) { SpringApplication.run(Sleuth_Application.class, args); } }","dependencies":[]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/sleuth/src/test/java/org/sleuth/AppTest.java","main_file_content":"package org.sleuth; import junit.framework.Test; import junit.framework.TestCase; import junit.framework.TestSuite; public class AppTest extends TestCase { public AppTest( String testName ) { super( testName ); } public static Test suite() { return new TestSuite( AppTest.class ); } public void testApp() { assertTrue( true ); } }","dependencies":[]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/service-B/src/main/java/com/lovnx/B_Application.java","main_file_content":"package com.lovnx; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.boot.builder.SpringApplicationBuilder; import org.springframework.cloud.client.discovery.EnableDiscoveryClient; @EnableDiscoveryClient @SpringBootApplication public class B_Application { public static void main(String[] args) { new SpringApplicationBuilder(B_Application.class).web(true).run(args); } }","dependencies":[]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/service-B/src/main/java/com/lovnx/test/mytst.java","main_file_content":"package com.lovnx.test; import java.util.Timer; import java.util.TimerTask; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.atomic.AtomicInteger; public class mytst { private int flag = 10; private int threadNum = 10; private int timeRound = 1000*60; private AtomicInteger num = new AtomicInteger(0); public static void main(String[] args) { new mytst().call(); } private void call() { ExecutorService executor = Executors.newFixedThreadPool(threadNum); Timer timer = new Timer(); timer.schedule(new TimerTask(){ @Override public void run() { num.set(0);; } }, 0, timeRound); for (int i = 0; i < 1000; i++) { executor.execute(new Runnable() { @Override public void run() { try { Thread.sleep(10000); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(Thread.currentThread().getName()+\" 进来了!\"); num.incrementAndGet(); if (num.get() <= flag) { System.out.println(Thread.currentThread().getName()+\" 执行任务!\"); } else { System.out.println(Thread.currentThread().getName()+\" 执行任务失败!调用超限！\"); } } }); } executor.shutdown(); } }","dependencies":[]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/service-B/src/main/java/com/lovnx/test/ApiCallDemo.java","main_file_content":"package com.lovnx.test; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.TimeUnit; import com.google.common.util.concurrent.RateLimiter; public class ApiCallDemo { private int permitsPerSecond = 1; private int threadNum = 10; public static void main(String[] args) { new ApiCallDemo().call(); } private void call() { ExecutorService executor = Executors.newFixedThreadPool(threadNum); final RateLimiter rateLimiter = RateLimiter.create(permitsPerSecond); for (int i=0; i<threadNum; i++) { executor.execute(new ApiCallTask(rateLimiter)); } executor.shutdown(); } } class ApiCallTask implements Runnable{ private RateLimiter rateLimiter; private boolean runing = true; public ApiCallTask(RateLimiter rateLimiter) { this.rateLimiter = rateLimiter; } @Override public void run() { while(runing){ rateLimiter.acquire(); getData(); } } private void getData(){ System.out.println(Thread.currentThread().getName()+\" runing!\"); } }","dependencies":[{"file_path":"micro-service-master/micro-service-master/service-B/src/main/java/com/lovnx/web/RateLimiter.java","file_content":"package com.lovnx.web; import java.util.concurrent.TimeUnit; import java.util.concurrent.atomic.AtomicInteger; import java.util.concurrent.atomic.AtomicLong; public class RateLimiter { private final long rateToMsConversion; private final AtomicInteger consumedTokens = new AtomicInteger(); private final AtomicLong lastRefillTime = new AtomicLong(0); @Deprecated public RateLimiter() { this(TimeUnit.SECONDS); } public RateLimiter(TimeUnit averageRateUnit) { switch (averageRateUnit) { case SECONDS: rateToMsConversion = 1000; break; case MINUTES: rateToMsConversion = 60 * 1000; break; default: throw new IllegalArgumentException(\"TimeUnit of \" + averageRateUnit + \" is not supported\"); } } public boolean acquire(int burstSize, long averageRate) { return acquire(burstSize, averageRate, System.currentTimeMillis()); } public boolean acquire(int burstSize, long averageRate, long currentTimeMillis) { if (burstSize <= 0 || averageRate <= 0) { return true; } refillToken(burstSize, averageRate, currentTimeMillis); return consumeToken(burstSize); } private void refillToken(int burstSize, long averageRate, long currentTimeMillis) { long refillTime = lastRefillTime.get(); long timeDelta = currentTimeMillis - refillTime; long newTokens = timeDelta * averageRate / rateToMsConversion; if (newTokens > 0) { long newRefillTime = refillTime == 0 ? currentTimeMillis : refillTime + newTokens * rateToMsConversion / averageRate; if (lastRefillTime.compareAndSet(refillTime, newRefillTime)) { while (true) { int currentLevel = consumedTokens.get(); int adjustedLevel = Math.min(currentLevel, burstSize); int newLevel = (int) Math.max(0, adjustedLevel - newTokens); if (consumedTokens.compareAndSet(currentLevel, newLevel)) { return; } } } } } private boolean consumeToken(int burstSize) { while (true) { int currentLevel = consumedTokens.get(); if (currentLevel >= burstSize) { return false; } if (consumedTokens.compareAndSet(currentLevel, currentLevel + 1)) { return true; } } } public void reset() { consumedTokens.set(0); lastRefillTime.set(0); } }"}]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/service-B/src/main/java/com/lovnx/test/ListenableFutureDemo.java","main_file_content":"package com.lovnx.test; import java.util.concurrent.Callable; import java.util.concurrent.ExecutionException; import java.util.concurrent.Executors; import java.util.concurrent.TimeUnit; import com.google.common.util.concurrent.FutureCallback; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.RateLimiter; public class ListenableFutureDemo { public static void main(String[] args) { testListenableFuture(); } public static void testRateLimiter() { ListeningExecutorService executorService = MoreExecutors .listeningDecorator(Executors.newCachedThreadPool()); RateLimiter limiter = RateLimiter.create(5.0); for (int i = 0; i < 10; i++) { limiter.acquire(); final ListenableFuture<Integer> listenableFuture = executorService.submit(new Task(\"is \" + i)); } } public static void testListenableFuture() { ListeningExecutorService executorService = MoreExecutors .listeningDecorator(Executors.newCachedThreadPool()); final ListenableFuture<Integer> listenableFuture = executorService .submit(new Task(\"testListenableFuture\")); try { System.out.println(listenableFuture.get()); } catch (InterruptedException e1) { e1.printStackTrace(); } catch (ExecutionException e1) { e1.printStackTrace(); } listenableFuture.addListener(new Runnable() { @Override public void run() { try { System.out.println(\"get listenable future's result \" + listenableFuture.get()); } catch (InterruptedException e) { e.printStackTrace(); } catch (ExecutionException e) { e.printStackTrace(); } } }, executorService); Futures.addCallback(listenableFuture, new FutureCallback<Integer>() { @Override public void onSuccess(Integer result) { System.out.println(\"get listenable future's result with callback \" + result); } @Override public void onFailure(Throwable t) { t.printStackTrace(); } }); } } class Task implements Callable<Integer> { String str; public Task(String str) { this.str = str; } @Override public Integer call() throws Exception { System.out.println(\"call execute..\" + str); TimeUnit.SECONDS.sleep(1); return 7; } }","dependencies":[{"file_path":"micro-service-master/micro-service-master/service-B/src/main/java/com/lovnx/web/RateLimiter.java","file_content":"package com.lovnx.web; import java.util.concurrent.TimeUnit; import java.util.concurrent.atomic.AtomicInteger; import java.util.concurrent.atomic.AtomicLong; public class RateLimiter { private final long rateToMsConversion; private final AtomicInteger consumedTokens = new AtomicInteger(); private final AtomicLong lastRefillTime = new AtomicLong(0); @Deprecated public RateLimiter() { this(TimeUnit.SECONDS); } public RateLimiter(TimeUnit averageRateUnit) { switch (averageRateUnit) { case SECONDS: rateToMsConversion = 1000; break; case MINUTES: rateToMsConversion = 60 * 1000; break; default: throw new IllegalArgumentException(\"TimeUnit of \" + averageRateUnit + \" is not supported\"); } } public boolean acquire(int burstSize, long averageRate) { return acquire(burstSize, averageRate, System.currentTimeMillis()); } public boolean acquire(int burstSize, long averageRate, long currentTimeMillis) { if (burstSize <= 0 || averageRate <= 0) { return true; } refillToken(burstSize, averageRate, currentTimeMillis); return consumeToken(burstSize); } private void refillToken(int burstSize, long averageRate, long currentTimeMillis) { long refillTime = lastRefillTime.get(); long timeDelta = currentTimeMillis - refillTime; long newTokens = timeDelta * averageRate / rateToMsConversion; if (newTokens > 0) { long newRefillTime = refillTime == 0 ? currentTimeMillis : refillTime + newTokens * rateToMsConversion / averageRate; if (lastRefillTime.compareAndSet(refillTime, newRefillTime)) { while (true) { int currentLevel = consumedTokens.get(); int adjustedLevel = Math.min(currentLevel, burstSize); int newLevel = (int) Math.max(0, adjustedLevel - newTokens); if (consumedTokens.compareAndSet(currentLevel, newLevel)) { return; } } } } } private boolean consumeToken(int burstSize) { while (true) { int currentLevel = consumedTokens.get(); if (currentLevel >= burstSize) { return false; } if (consumedTokens.compareAndSet(currentLevel, currentLevel + 1)) { return true; } } } public void reset() { consumedTokens.set(0); lastRefillTime.set(0); } }"}]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/service-B/src/main/java/com/lovnx/config/DruidDataSourceConfig.java","main_file_content":"package com.lovnx.config; import com.alibaba.druid.pool.DruidDataSource; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.context.properties.EnableConfigurationProperties; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.Primary; import javax.sql.DataSource; import java.sql.SQLException; @Configuration @EnableConfigurationProperties(DataSourceProperties.class) public class DruidDataSourceConfig { private static Logger logger = LoggerFactory.getLogger(DruidDataSourceConfig.class); @Autowired private DataSourceProperties dataSourceProperties; @Bean @Primary public DataSource druidDataSource(){ DruidDataSource datasource = new DruidDataSource(); datasource.setUrl(dataSourceProperties.getUrl()); datasource.setUsername(dataSourceProperties.getUsername()); datasource.setPassword(dataSourceProperties.getPassword()); datasource.setDriverClassName(dataSourceProperties.getDriverClassName()); datasource.setInitialSize(dataSourceProperties.getInitialSize()); datasource.setMinIdle(dataSourceProperties.getMinIdle()); datasource.setMaxActive(dataSourceProperties.getMaxActive()); datasource.setMaxWait(dataSourceProperties.getMaxWait()); datasource.setTimeBetweenEvictionRunsMillis(dataSourceProperties.getTimeBetweenEvictionRunsMillis()); datasource.setMinEvictableIdleTimeMillis(dataSourceProperties.getMinEvictableIdleTimeMillis()); datasource.setValidationQuery(dataSourceProperties.getValidationQuery()); datasource.setTestWhileIdle(dataSourceProperties.isTestWhileIdle()); datasource.setTestOnBorrow(dataSourceProperties.isTestOnBorrow()); datasource.setTestOnReturn(dataSourceProperties.isTestOnReturn()); datasource.setPoolPreparedStatements(dataSourceProperties.isPoolPreparedStatements()); try { datasource.setFilters(dataSourceProperties.getFilters()); } catch (SQLException e) { logger.error(\"Druid configuration initialization filter error.\", e); } return datasource; } }","dependencies":[{"file_path":"micro-service-master/micro-service-master/service-B/src/main/java/com/lovnx/config/DataSourceProperties.java","file_content":"package com.lovnx.config; import org.springframework.boot.context.properties.ConfigurationProperties; @ConfigurationProperties(prefix = DataSourceProperties.DS, ignoreUnknownFields = false) public class DataSourceProperties { final static String DS=\"mysqldb.datasource\"; private String url; private String username; private String password; private String driverClassName; private int initialSize = 10; private int minIdle; private int maxIdle; private int maxActive; private int maxWait; private int timeBetweenEvictionRunsMillis; private int minEvictableIdleTimeMillis; private String validationQuery; private boolean testWhileIdle; private boolean testOnBorrow; private boolean testOnReturn; private boolean poolPreparedStatements; private int maxOpenPreparedStatements; private String filters; private String mapperLocations; private String typeAliasPackage; public String getDriverClassName() { return driverClassName; } public void setDriverClassName(String driverClassName) { this.driverClassName = driverClassName; } public String getUrl() { return url; } public void setUrl(String url) { this.url = url; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public int getInitialSize() { return initialSize; } public void setInitialSize(int initialSize) { this.initialSize = initialSize; } public int getMinIdle() { return minIdle; } public void setMinIdle(int minIdle) { this.minIdle = minIdle; } public int getMaxIdle() { return maxIdle; } public void setMaxIdle(int maxIdle) { this.maxIdle = maxIdle; } public int getMaxActive() { return maxActive; } public void setMaxActive(int maxActive) { this.maxActive = maxActive; } public int getMaxWait() { return maxWait; } public void setMaxWait(int maxWait) { this.maxWait = maxWait; } public int getTimeBetweenEvictionRunsMillis() { return timeBetweenEvictionRunsMillis; } public void setTimeBetweenEvictionRunsMillis(int timeBetweenEvictionRunsMillis) { this.timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis; } public int getMinEvictableIdleTimeMillis() { return minEvictableIdleTimeMillis; } public void setMinEvictableIdleTimeMillis(int minEvictableIdleTimeMillis) { this.minEvictableIdleTimeMillis = minEvictableIdleTimeMillis; } public String getValidationQuery() { return validationQuery; } public void setValidationQuery(String validationQuery) { this.validationQuery = validationQuery; } public boolean isTestWhileIdle() { return testWhileIdle; } public void setTestWhileIdle(boolean testWhileIdle) { this.testWhileIdle = testWhileIdle; } public boolean isTestOnBorrow() { return testOnBorrow; } public void setTestOnBorrow(boolean testOnBorrow) { this.testOnBorrow = testOnBorrow; } public boolean isTestOnReturn() { return testOnReturn; } public void setTestOnReturn(boolean testOnReturn) { this.testOnReturn = testOnReturn; } public boolean isPoolPreparedStatements() { return poolPreparedStatements; } public void setPoolPreparedStatements(boolean poolPreparedStatements) { this.poolPreparedStatements = poolPreparedStatements; } public int getMaxOpenPreparedStatements() { return maxOpenPreparedStatements; } public void setMaxOpenPreparedStatements(int maxOpenPreparedStatements) { this.maxOpenPreparedStatements = maxOpenPreparedStatements; } public String getFilters() { return filters; } public void setFilters(String filters) { this.filters = filters; } public String getMapperLocations() { return mapperLocations; } public void setMapperLocations(String mapperLocations) { this.mapperLocations = mapperLocations; } public String getTypeAliasPackage() { return typeAliasPackage; } public void setTypeAliasPackage(String typeAliasPackage) { this.typeAliasPackage = typeAliasPackage; } }"}]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/service-B/src/main/java/com/lovnx/config/DataSourceProperties.java","main_file_content":"package com.lovnx.config; import org.springframework.boot.context.properties.ConfigurationProperties; @ConfigurationProperties(prefix = DataSourceProperties.DS, ignoreUnknownFields = false) public class DataSourceProperties { final static String DS=\"mysqldb.datasource\"; private String url; private String username; private String password; private String driverClassName; private int initialSize = 10; private int minIdle; private int maxIdle; private int maxActive; private int maxWait; private int timeBetweenEvictionRunsMillis; private int minEvictableIdleTimeMillis; private String validationQuery; private boolean testWhileIdle; private boolean testOnBorrow; private boolean testOnReturn; private boolean poolPreparedStatements; private int maxOpenPreparedStatements; private String filters; private String mapperLocations; private String typeAliasPackage; public String getDriverClassName() { return driverClassName; } public void setDriverClassName(String driverClassName) { this.driverClassName = driverClassName; } public String getUrl() { return url; } public void setUrl(String url) { this.url = url; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public int getInitialSize() { return initialSize; } public void setInitialSize(int initialSize) { this.initialSize = initialSize; } public int getMinIdle() { return minIdle; } public void setMinIdle(int minIdle) { this.minIdle = minIdle; } public int getMaxIdle() { return maxIdle; } public void setMaxIdle(int maxIdle) { this.maxIdle = maxIdle; } public int getMaxActive() { return maxActive; } public void setMaxActive(int maxActive) { this.maxActive = maxActive; } public int getMaxWait() { return maxWait; } public void setMaxWait(int maxWait) { this.maxWait = maxWait; } public int getTimeBetweenEvictionRunsMillis() { return timeBetweenEvictionRunsMillis; } public void setTimeBetweenEvictionRunsMillis(int timeBetweenEvictionRunsMillis) { this.timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis; } public int getMinEvictableIdleTimeMillis() { return minEvictableIdleTimeMillis; } public void setMinEvictableIdleTimeMillis(int minEvictableIdleTimeMillis) { this.minEvictableIdleTimeMillis = minEvictableIdleTimeMillis; } public String getValidationQuery() { return validationQuery; } public void setValidationQuery(String validationQuery) { this.validationQuery = validationQuery; } public boolean isTestWhileIdle() { return testWhileIdle; } public void setTestWhileIdle(boolean testWhileIdle) { this.testWhileIdle = testWhileIdle; } public boolean isTestOnBorrow() { return testOnBorrow; } public void setTestOnBorrow(boolean testOnBorrow) { this.testOnBorrow = testOnBorrow; } public boolean isTestOnReturn() { return testOnReturn; } public void setTestOnReturn(boolean testOnReturn) { this.testOnReturn = testOnReturn; } public boolean isPoolPreparedStatements() { return poolPreparedStatements; } public void setPoolPreparedStatements(boolean poolPreparedStatements) { this.poolPreparedStatements = poolPreparedStatements; } public int getMaxOpenPreparedStatements() { return maxOpenPreparedStatements; } public void setMaxOpenPreparedStatements(int maxOpenPreparedStatements) { this.maxOpenPreparedStatements = maxOpenPreparedStatements; } public String getFilters() { return filters; } public void setFilters(String filters) { this.filters = filters; } public String getMapperLocations() { return mapperLocations; } public void setMapperLocations(String mapperLocations) { this.mapperLocations = mapperLocations; } public String getTypeAliasPackage() { return typeAliasPackage; } public void setTypeAliasPackage(String typeAliasPackage) { this.typeAliasPackage = typeAliasPackage; } }","dependencies":[]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/service-B/src/main/java/com/lovnx/config/SqlSessionFactoryConfig.java","main_file_content":"package com.lovnx.config; import org.apache.ibatis.session.SqlSessionFactory; import org.mybatis.spring.SqlSessionFactoryBean; import org.mybatis.spring.SqlSessionTemplate; import org.mybatis.spring.annotation.MapperScan; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.core.io.support.PathMatchingResourcePatternResolver; import org.springframework.jdbc.datasource.DataSourceTransactionManager; import org.springframework.transaction.PlatformTransactionManager; import org.springframework.transaction.annotation.EnableTransactionManagement; import org.springframework.transaction.annotation.TransactionManagementConfigurer; import javax.sql.DataSource; @Configuration @EnableTransactionManagement @MapperScan(\"com.lovnx.mapper\") public class SqlSessionFactoryConfig implements TransactionManagementConfigurer { @Autowired private DataSource dataSource; @Autowired private DataSourceProperties dataSourceProperties; @Bean(name = \"sqlSessionFactory\") public SqlSessionFactory createSqlSessionFactoryBean() throws Exception { SqlSessionFactoryBean bean = new SqlSessionFactoryBean(); bean.setDataSource(dataSource); bean.setTypeAliasesPackage(dataSourceProperties.getTypeAliasPackage()); PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver(); bean.setMapperLocations(resolver.getResources(dataSourceProperties.getMapperLocations())); return bean.getObject(); } @Bean public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory sqlSessionFactory) { return new SqlSessionTemplate(sqlSessionFactory); } @Bean @Override public PlatformTransactionManager annotationDrivenTransactionManager() { return new DataSourceTransactionManager(dataSource); } }","dependencies":[{"file_path":"micro-service-master/micro-service-master/service-B/src/main/java/com/lovnx/config/DataSourceProperties.java","file_content":"package com.lovnx.config; import org.springframework.boot.context.properties.ConfigurationProperties; @ConfigurationProperties(prefix = DataSourceProperties.DS, ignoreUnknownFields = false) public class DataSourceProperties { final static String DS=\"mysqldb.datasource\"; private String url; private String username; private String password; private String driverClassName; private int initialSize = 10; private int minIdle; private int maxIdle; private int maxActive; private int maxWait; private int timeBetweenEvictionRunsMillis; private int minEvictableIdleTimeMillis; private String validationQuery; private boolean testWhileIdle; private boolean testOnBorrow; private boolean testOnReturn; private boolean poolPreparedStatements; private int maxOpenPreparedStatements; private String filters; private String mapperLocations; private String typeAliasPackage; public String getDriverClassName() { return driverClassName; } public void setDriverClassName(String driverClassName) { this.driverClassName = driverClassName; } public String getUrl() { return url; } public void setUrl(String url) { this.url = url; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public int getInitialSize() { return initialSize; } public void setInitialSize(int initialSize) { this.initialSize = initialSize; } public int getMinIdle() { return minIdle; } public void setMinIdle(int minIdle) { this.minIdle = minIdle; } public int getMaxIdle() { return maxIdle; } public void setMaxIdle(int maxIdle) { this.maxIdle = maxIdle; } public int getMaxActive() { return maxActive; } public void setMaxActive(int maxActive) { this.maxActive = maxActive; } public int getMaxWait() { return maxWait; } public void setMaxWait(int maxWait) { this.maxWait = maxWait; } public int getTimeBetweenEvictionRunsMillis() { return timeBetweenEvictionRunsMillis; } public void setTimeBetweenEvictionRunsMillis(int timeBetweenEvictionRunsMillis) { this.timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis; } public int getMinEvictableIdleTimeMillis() { return minEvictableIdleTimeMillis; } public void setMinEvictableIdleTimeMillis(int minEvictableIdleTimeMillis) { this.minEvictableIdleTimeMillis = minEvictableIdleTimeMillis; } public String getValidationQuery() { return validationQuery; } public void setValidationQuery(String validationQuery) { this.validationQuery = validationQuery; } public boolean isTestWhileIdle() { return testWhileIdle; } public void setTestWhileIdle(boolean testWhileIdle) { this.testWhileIdle = testWhileIdle; } public boolean isTestOnBorrow() { return testOnBorrow; } public void setTestOnBorrow(boolean testOnBorrow) { this.testOnBorrow = testOnBorrow; } public boolean isTestOnReturn() { return testOnReturn; } public void setTestOnReturn(boolean testOnReturn) { this.testOnReturn = testOnReturn; } public boolean isPoolPreparedStatements() { return poolPreparedStatements; } public void setPoolPreparedStatements(boolean poolPreparedStatements) { this.poolPreparedStatements = poolPreparedStatements; } public int getMaxOpenPreparedStatements() { return maxOpenPreparedStatements; } public void setMaxOpenPreparedStatements(int maxOpenPreparedStatements) { this.maxOpenPreparedStatements = maxOpenPreparedStatements; } public String getFilters() { return filters; } public void setFilters(String filters) { this.filters = filters; } public String getMapperLocations() { return mapperLocations; } public void setMapperLocations(String mapperLocations) { this.mapperLocations = mapperLocations; } public String getTypeAliasPackage() { return typeAliasPackage; } public void setTypeAliasPackage(String typeAliasPackage) { this.typeAliasPackage = typeAliasPackage; } }"}]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/service-B/src/main/java/com/lovnx/entity/InterfaceLimit.java","main_file_content":"package com.lovnx.entity; public class InterfaceLimit { private Integer id; private Integer interfaceId; private Integer unitTime; private Integer unitNum; public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public Integer getInterfaceId() { return interfaceId; } public void setInterfaceId(Integer interfaceId) { this.interfaceId = interfaceId; } public Integer getUnitTime() { return unitTime; } public void setUnitTime(Integer unitTime) { this.unitTime = unitTime; } public Integer getUnitNum() { return unitNum; } public void setUnitNum(Integer unitNum) { this.unitNum = unitNum; } }","dependencies":[]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/service-B/src/main/java/com/lovnx/entity/InterfaceLimitExample.java","main_file_content":"package com.lovnx.entity; import java.util.ArrayList; import java.util.List; public class InterfaceLimitExample { protected String orderByClause; protected boolean distinct; protected List<Criteria> oredCriteria; public InterfaceLimitExample() { oredCriteria = new ArrayList<Criteria>(); } public void setOrderByClause(String orderByClause) { this.orderByClause = orderByClause; } public String getOrderByClause() { return orderByClause; } public void setDistinct(boolean distinct) { this.distinct = distinct; } public boolean isDistinct() { return distinct; } public List<Criteria> getOredCriteria() { return oredCriteria; } public void or(Criteria criteria) { oredCriteria.add(criteria); } public Criteria or() { Criteria criteria = createCriteriaInternal(); oredCriteria.add(criteria); return criteria; } public Criteria createCriteria() { Criteria criteria = createCriteriaInternal(); if (oredCriteria.size() == 0) { oredCriteria.add(criteria); } return criteria; } protected Criteria createCriteriaInternal() { Criteria criteria = new Criteria(); return criteria; } public void clear() { oredCriteria.clear(); orderByClause = null; distinct = false; } protected abstract static class GeneratedCriteria { protected List<Criterion> criteria; protected GeneratedCriteria() { super(); criteria = new ArrayList<Criterion>(); } public boolean isValid() { return criteria.size() > 0; } public List<Criterion> getAllCriteria() { return criteria; } public List<Criterion> getCriteria() { return criteria; } protected void addCriterion(String condition) { if (condition == null) { throw new RuntimeException(\"Value for condition cannot be null\"); } criteria.add(new Criterion(condition)); } protected void addCriterion(String condition, Object value, String property) { if (value == null) { throw new RuntimeException(\"Value for \" + property + \" cannot be null\"); } criteria.add(new Criterion(condition, value)); } protected void addCriterion(String condition, Object value1, Object value2, String property) { if (value1 == null || value2 == null) { throw new RuntimeException(\"Between values for \" + property + \" cannot be null\"); } criteria.add(new Criterion(condition, value1, value2)); } public Criteria andIdIsNull() { addCriterion(\"id is null\"); return (Criteria) this; } public Criteria andIdIsNotNull() { addCriterion(\"id is not null\"); return (Criteria) this; } public Criteria andIdEqualTo(Integer value) { addCriterion(\"id =\", value, \"id\"); return (Criteria) this; } public Criteria andIdNotEqualTo(Integer value) { addCriterion(\"id <>\", value, \"id\"); return (Criteria) this; } public Criteria andIdGreaterThan(Integer value) { addCriterion(\"id >\", value, \"id\"); return (Criteria) this; } public Criteria andIdGreaterThanOrEqualTo(Integer value) { addCriterion(\"id >=\", value, \"id\"); return (Criteria) this; } public Criteria andIdLessThan(Integer value) { addCriterion(\"id <\", value, \"id\"); return (Criteria) this; } public Criteria andIdLessThanOrEqualTo(Integer value) { addCriterion(\"id <=\", value, \"id\"); return (Criteria) this; } public Criteria andIdIn(List<Integer> values) { addCriterion(\"id in\", values, \"id\"); return (Criteria) this; } public Criteria andIdNotIn(List<Integer> values) { addCriterion(\"id not in\", values, \"id\"); return (Criteria) this; } public Criteria andIdBetween(Integer value1, Integer value2) { addCriterion(\"id between\", value1, value2, \"id\"); return (Criteria) this; } public Criteria andIdNotBetween(Integer value1, Integer value2) { addCriterion(\"id not between\", value1, value2, \"id\"); return (Criteria) this; } public Criteria andInterfaceIdIsNull() { addCriterion(\"interfaceId is null\"); return (Criteria) this; } public Criteria andInterfaceIdIsNotNull() { addCriterion(\"interfaceId is not null\"); return (Criteria) this; } public Criteria andInterfaceIdEqualTo(Integer value) { addCriterion(\"interfaceId =\", value, \"interfaceId\"); return (Criteria) this; } public Criteria andInterfaceIdNotEqualTo(Integer value) { addCriterion(\"interfaceId <>\", value, \"interfaceId\"); return (Criteria) this; } public Criteria andInterfaceIdGreaterThan(Integer value) { addCriterion(\"interfaceId >\", value, \"interfaceId\"); return (Criteria) this; } public Criteria andInterfaceIdGreaterThanOrEqualTo(Integer value) { addCriterion(\"interfaceId >=\", value, \"interfaceId\"); return (Criteria) this; } public Criteria andInterfaceIdLessThan(Integer value) { addCriterion(\"interfaceId <\", value, \"interfaceId\"); return (Criteria) this; } public Criteria andInterfaceIdLessThanOrEqualTo(Integer value) { addCriterion(\"interfaceId <=\", value, \"interfaceId\"); return (Criteria) this; } public Criteria andInterfaceIdIn(List<Integer> values) { addCriterion(\"interfaceId in\", values, \"interfaceId\"); return (Criteria) this; } public Criteria andInterfaceIdNotIn(List<Integer> values) { addCriterion(\"interfaceId not in\", values, \"interfaceId\"); return (Criteria) this; } public Criteria andInterfaceIdBetween(Integer value1, Integer value2) { addCriterion(\"interfaceId between\", value1, value2, \"interfaceId\"); return (Criteria) this; } public Criteria andInterfaceIdNotBetween(Integer value1, Integer value2) { addCriterion(\"interfaceId not between\", value1, value2, \"interfaceId\"); return (Criteria) this; } public Criteria andUnitTimeIsNull() { addCriterion(\"unitTime is null\"); return (Criteria) this; } public Criteria andUnitTimeIsNotNull() { addCriterion(\"unitTime is not null\"); return (Criteria) this; } public Criteria andUnitTimeEqualTo(Integer value) { addCriterion(\"unitTime =\", value, \"unitTime\"); return (Criteria) this; } public Criteria andUnitTimeNotEqualTo(Integer value) { addCriterion(\"unitTime <>\", value, \"unitTime\"); return (Criteria) this; } public Criteria andUnitTimeGreaterThan(Integer value) { addCriterion(\"unitTime >\", value, \"unitTime\"); return (Criteria) this; } public Criteria andUnitTimeGreaterThanOrEqualTo(Integer value) { addCriterion(\"unitTime >=\", value, \"unitTime\"); return (Criteria) this; } public Criteria andUnitTimeLessThan(Integer value) { addCriterion(\"unitTime <\", value, \"unitTime\"); return (Criteria) this; } public Criteria andUnitTimeLessThanOrEqualTo(Integer value) { addCriterion(\"unitTime <=\", value, \"unitTime\"); return (Criteria) this; } public Criteria andUnitTimeIn(List<Integer> values) { addCriterion(\"unitTime in\", values, \"unitTime\"); return (Criteria) this; } public Criteria andUnitTimeNotIn(List<Integer> values) { addCriterion(\"unitTime not in\", values, \"unitTime\"); return (Criteria) this; } public Criteria andUnitTimeBetween(Integer value1, Integer value2) { addCriterion(\"unitTime between\", value1, value2, \"unitTime\"); return (Criteria) this; } public Criteria andUnitTimeNotBetween(Integer value1, Integer value2) { addCriterion(\"unitTime not between\", value1, value2, \"unitTime\"); return (Criteria) this; } public Criteria andUnitNumIsNull() { addCriterion(\"unitNum is null\"); return (Criteria) this; } public Criteria andUnitNumIsNotNull() { addCriterion(\"unitNum is not null\"); return (Criteria) this; } public Criteria andUnitNumEqualTo(Integer value) { addCriterion(\"unitNum =\", value, \"unitNum\"); return (Criteria) this; } public Criteria andUnitNumNotEqualTo(Integer value) { addCriterion(\"unitNum <>\", value, \"unitNum\"); return (Criteria) this; } public Criteria andUnitNumGreaterThan(Integer value) { addCriterion(\"unitNum >\", value, \"unitNum\"); return (Criteria) this; } public Criteria andUnitNumGreaterThanOrEqualTo(Integer value) { addCriterion(\"unitNum >=\", value, \"unitNum\"); return (Criteria) this; } public Criteria andUnitNumLessThan(Integer value) { addCriterion(\"unitNum <\", value, \"unitNum\"); return (Criteria) this; } public Criteria andUnitNumLessThanOrEqualTo(Integer value) { addCriterion(\"unitNum <=\", value, \"unitNum\"); return (Criteria) this; } public Criteria andUnitNumIn(List<Integer> values) { addCriterion(\"unitNum in\", values, \"unitNum\"); return (Criteria) this; } public Criteria andUnitNumNotIn(List<Integer> values) { addCriterion(\"unitNum not in\", values, \"unitNum\"); return (Criteria) this; } public Criteria andUnitNumBetween(Integer value1, Integer value2) { addCriterion(\"unitNum between\", value1, value2, \"unitNum\"); return (Criteria) this; } public Criteria andUnitNumNotBetween(Integer value1, Integer value2) { addCriterion(\"unitNum not between\", value1, value2, \"unitNum\"); return (Criteria) this; } } public static class Criteria extends GeneratedCriteria { protected Criteria() { super(); } } public static class Criterion { private String condition; private Object value; private Object secondValue; private boolean noValue; private boolean singleValue; private boolean betweenValue; private boolean listValue; private String typeHandler; public String getCondition() { return condition; } public Object getValue() { return value; } public Object getSecondValue() { return secondValue; } public boolean isNoValue() { return noValue; } public boolean isSingleValue() { return singleValue; } public boolean isBetweenValue() { return betweenValue; } public boolean isListValue() { return listValue; } public String getTypeHandler() { return typeHandler; } protected Criterion(String condition) { super(); this.condition = condition; this.typeHandler = null; this.noValue = true; } protected Criterion(String condition, Object value, String typeHandler) { super(); this.condition = condition; this.value = value; this.typeHandler = typeHandler; if (value instanceof List<?>) { this.listValue = true; } else { this.singleValue = true; } } protected Criterion(String condition, Object value) { this(condition, value, null); } protected Criterion(String condition, Object value, Object secondValue, String typeHandler) { super(); this.condition = condition; this.value = value; this.secondValue = secondValue; this.typeHandler = typeHandler; this.betweenValue = true; } protected Criterion(String condition, Object value, Object secondValue) { this(condition, value, secondValue, null); } } }","dependencies":[]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/service-B/src/main/java/com/lovnx/web/RedisUtils.java","main_file_content":"package com.lovnx.web; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.stereotype.Component; import redis.clients.jedis.Jedis; import redis.clients.jedis.JedisPool; import redis.clients.jedis.JedisPoolConfig; import java.io.InputStream; import java.util.Properties; import java.util.concurrent.locks.ReentrantLock; public class RedisUtils { private static ReentrantLock lockPool = new ReentrantLock(); private static final Logger LOGGER = LoggerFactory.getLogger(RedisUtils.class); private static JedisPool jedisPool = null; private static String host=\"172.16.16.72\"; private static int port=6379; private static String password=\"lemonkz9*l\"; private static int timeout=10000; private static int maxTotal = 1024; private static int maxIdle = 200; private static int maxWaitMillis = 10000; private static boolean testOnBorrow = false; static { try { LOGGER.info(\"初始化Redis配置参数成功.\"); } catch (Exception ex) { LOGGER.error(\"初始化Redis配置参数失败.\", ex); } initialPool(); setShutdownWork(); } private RedisUtils() { throw new RuntimeException(\"禁止实例化Redis访问工具类.\"); } private static void initialPool(){ lockPool.lock(); try { if(jedisPool == null) { JedisPoolConfig config = new JedisPoolConfig(); config.setMaxTotal(maxTotal); config.setMaxIdle(maxIdle); config.setMaxWaitMillis(maxWaitMillis); config.setTestOnBorrow(testOnBorrow); jedisPool = new JedisPool(config, host, port, timeout, password); LOGGER.info(\"创建Redis Pool成功.\"); } } catch (Exception ex) { LOGGER.error(\"创建Redis Pool失败.\", ex); } finally { lockPool.unlock(); } } private static void setShutdownWork() { try{ Runtime runtime = Runtime.getRuntime(); runtime.addShutdownHook(new Thread(){ @Override public void run() { try { if(jedisPool != null) { jedisPool.destroy(); jedisPool = null; LOGGER.info(\"关闭Redis Pool成功.\"); } } catch (Exception ex) { LOGGER.error(\"关闭Redis Pool失败.\", ex); } } }); LOGGER.info(\"设置系统停止时关闭Redis Pool的任务成功.\"); } catch (Exception ex) { LOGGER.error(\"设置系统停止时关闭Redis Pool的任务失败.\"); } } public static Jedis getJedis() { if (jedisPool == null) { initialPool(); } Jedis jedis = null; try { jedis = jedisPool.getResource(); } catch (Exception ex) { LOGGER.error(\"获取Jedis失败.\", ex); } return jedis; } }","dependencies":[]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/service-B/src/main/java/com/lovnx/web/RateLimiter.java","main_file_content":"package com.lovnx.web; import java.util.concurrent.TimeUnit; import java.util.concurrent.atomic.AtomicInteger; import java.util.concurrent.atomic.AtomicLong; public class RateLimiter { private final long rateToMsConversion; private final AtomicInteger consumedTokens = new AtomicInteger(); private final AtomicLong lastRefillTime = new AtomicLong(0); @Deprecated public RateLimiter() { this(TimeUnit.SECONDS); } public RateLimiter(TimeUnit averageRateUnit) { switch (averageRateUnit) { case SECONDS: rateToMsConversion = 1000; break; case MINUTES: rateToMsConversion = 60 * 1000; break; default: throw new IllegalArgumentException(\"TimeUnit of \" + averageRateUnit + \" is not supported\"); } } public boolean acquire(int burstSize, long averageRate) { return acquire(burstSize, averageRate, System.currentTimeMillis()); } public boolean acquire(int burstSize, long averageRate, long currentTimeMillis) { if (burstSize <= 0 || averageRate <= 0) { return true; } refillToken(burstSize, averageRate, currentTimeMillis); return consumeToken(burstSize); } private void refillToken(int burstSize, long averageRate, long currentTimeMillis) { long refillTime = lastRefillTime.get(); long timeDelta = currentTimeMillis - refillTime; long newTokens = timeDelta * averageRate / rateToMsConversion; if (newTokens > 0) { long newRefillTime = refillTime == 0 ? currentTimeMillis : refillTime + newTokens * rateToMsConversion / averageRate; if (lastRefillTime.compareAndSet(refillTime, newRefillTime)) { while (true) { int currentLevel = consumedTokens.get(); int adjustedLevel = Math.min(currentLevel, burstSize); int newLevel = (int) Math.max(0, adjustedLevel - newTokens); if (consumedTokens.compareAndSet(currentLevel, newLevel)) { return; } } } } } private boolean consumeToken(int burstSize) { while (true) { int currentLevel = consumedTokens.get(); if (currentLevel >= burstSize) { return false; } if (consumedTokens.compareAndSet(currentLevel, currentLevel + 1)) { return true; } } } public void reset() { consumedTokens.set(0); lastRefillTime.set(0); } }","dependencies":[]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/service-B/src/main/java/com/lovnx/web/ComputeController.java","main_file_content":"package com.lovnx.web; import java.util.concurrent.atomic.AtomicLong; import org.apache.log4j.Logger; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.cloud.client.ServiceInstance; import org.springframework.cloud.client.discovery.DiscoveryClient; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; import com.lovnx.entity.InterfaceLimit; import com.lovnx.service.InterfaceLimitService; import redis.clients.jedis.Jedis; @RestController public class ComputeController { private final Logger logger = Logger.getLogger(getClass()); @Autowired private InterfaceLimitService service; private int flag = 10; private static int timeRound = 1000*60; private static AtomicLong num = new AtomicLong(0); @Autowired private DiscoveryClient client; @RequestMapping(value = \"/add\" ,method = RequestMethod.GET) public String add(@RequestParam Integer a, @RequestParam Integer b) { InterfaceLimit limit = service.getEntityByPri(1); Jedis jedis = RedisUtils.getJedis(); String timeRound_1 = jedis.get(\"timeRound_1\"); if (timeRound_1 == null || !limit.getUnitTime().toString().equals(timeRound_1)) { jedis.set(\"timeRound_1\", limit.getUnitTime().toString()); jedis.expire(\"num_1\", limit.getUnitTime()); } String num_1 = jedis.get(\"num_1\"); if (num_1 == null) { jedis.set(\"num_1\", String.valueOf(0)); jedis.expire(\"num_1\", limit.getUnitTime()); } jedis.incr(\"num_1\"); if (Integer.parseInt(jedis.get(\"num_1\")) <= limit.getUnitNum()) { ServiceInstance instance = client.getLocalServiceInstance(); Integer r = a + b; logger.info(\"/add, host:\" + instance.getHost() + \", service_id:\" + instance.getServiceId() + \", result:\" + r); return \"From Service-B, Result is \" + r+\"\\nPort:\"+instance.getPort(); } return \"调用次数超限！\"; } }","dependencies":[{"file_path":"micro-service-master/micro-service-master/service-B/src/main/java/com/lovnx/entity/InterfaceLimit.java","file_content":"package com.lovnx.entity; public class InterfaceLimit { private Integer id; private Integer interfaceId; private Integer unitTime; private Integer unitNum; public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public Integer getInterfaceId() { return interfaceId; } public void setInterfaceId(Integer interfaceId) { this.interfaceId = interfaceId; } public Integer getUnitTime() { return unitTime; } public void setUnitTime(Integer unitTime) { this.unitTime = unitTime; } public Integer getUnitNum() { return unitNum; } public void setUnitNum(Integer unitNum) { this.unitNum = unitNum; } }"},{"file_path":"micro-service-master/micro-service-master/service-B/src/main/java/com/lovnx/service/InterfaceLimitService.java","file_content":"package com.lovnx.service; import com.lovnx.entity.InterfaceLimit; public interface InterfaceLimitService { InterfaceLimit getEntityByPri(Integer id); }"},{"file_path":"micro-service-master/micro-service-master/service-B/src/main/java/com/lovnx/web/RedisUtils.java","file_content":"package com.lovnx.web; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.stereotype.Component; import redis.clients.jedis.Jedis; import redis.clients.jedis.JedisPool; import redis.clients.jedis.JedisPoolConfig; import java.io.InputStream; import java.util.Properties; import java.util.concurrent.locks.ReentrantLock; public class RedisUtils { private static ReentrantLock lockPool = new ReentrantLock(); private static final Logger LOGGER = LoggerFactory.getLogger(RedisUtils.class); private static JedisPool jedisPool = null; private static String host=\"172.16.16.72\"; private static int port=6379; private static String password=\"lemonkz9*l\"; private static int timeout=10000; private static int maxTotal = 1024; private static int maxIdle = 200; private static int maxWaitMillis = 10000; private static boolean testOnBorrow = false; static { try { LOGGER.info(\"初始化Redis配置参数成功.\"); } catch (Exception ex) { LOGGER.error(\"初始化Redis配置参数失败.\", ex); } initialPool(); setShutdownWork(); } private RedisUtils() { throw new RuntimeException(\"禁止实例化Redis访问工具类.\"); } private static void initialPool(){ lockPool.lock(); try { if(jedisPool == null) { JedisPoolConfig config = new JedisPoolConfig(); config.setMaxTotal(maxTotal); config.setMaxIdle(maxIdle); config.setMaxWaitMillis(maxWaitMillis); config.setTestOnBorrow(testOnBorrow); jedisPool = new JedisPool(config, host, port, timeout, password); LOGGER.info(\"创建Redis Pool成功.\"); } } catch (Exception ex) { LOGGER.error(\"创建Redis Pool失败.\", ex); } finally { lockPool.unlock(); } } private static void setShutdownWork() { try{ Runtime runtime = Runtime.getRuntime(); runtime.addShutdownHook(new Thread(){ @Override public void run() { try { if(jedisPool != null) { jedisPool.destroy(); jedisPool = null; LOGGER.info(\"关闭Redis Pool成功.\"); } } catch (Exception ex) { LOGGER.error(\"关闭Redis Pool失败.\", ex); } } }); LOGGER.info(\"设置系统停止时关闭Redis Pool的任务成功.\"); } catch (Exception ex) { LOGGER.error(\"设置系统停止时关闭Redis Pool的任务失败.\"); } } public static Jedis getJedis() { if (jedisPool == null) { initialPool(); } Jedis jedis = null; try { jedis = jedisPool.getResource(); } catch (Exception ex) { LOGGER.error(\"获取Jedis失败.\", ex); } return jedis; } }"}]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/service-B/src/main/java/com/lovnx/mapper/InterfaceLimitMapper.java","main_file_content":"package com.lovnx.mapper; import com.lovnx.entity.InterfaceLimit; import com.lovnx.entity.InterfaceLimitExample; import java.util.List; import org.apache.ibatis.annotations.Param; public interface InterfaceLimitMapper { int countByExample(InterfaceLimitExample example); int deleteByExample(InterfaceLimitExample example); int deleteByPrimaryKey(Integer id); int insert(InterfaceLimit record); int insertSelective(InterfaceLimit record); List<InterfaceLimit> selectByExample(InterfaceLimitExample example); InterfaceLimit selectByPrimaryKey(Integer id); int updateByExampleSelective(@Param(\"record\") InterfaceLimit record, @Param(\"example\") InterfaceLimitExample example); int updateByExample(@Param(\"record\") InterfaceLimit record, @Param(\"example\") InterfaceLimitExample example); int updateByPrimaryKeySelective(InterfaceLimit record); int updateByPrimaryKey(InterfaceLimit record); }","dependencies":[{"file_path":"micro-service-master/micro-service-master/service-B/src/main/java/com/lovnx/entity/InterfaceLimit.java","file_content":"package com.lovnx.entity; public class InterfaceLimit { private Integer id; private Integer interfaceId; private Integer unitTime; private Integer unitNum; public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public Integer getInterfaceId() { return interfaceId; } public void setInterfaceId(Integer interfaceId) { this.interfaceId = interfaceId; } public Integer getUnitTime() { return unitTime; } public void setUnitTime(Integer unitTime) { this.unitTime = unitTime; } public Integer getUnitNum() { return unitNum; } public void setUnitNum(Integer unitNum) { this.unitNum = unitNum; } }"},{"file_path":"micro-service-master/micro-service-master/service-B/src/main/java/com/lovnx/entity/InterfaceLimitExample.java","file_content":"package com.lovnx.entity; import java.util.ArrayList; import java.util.List; public class InterfaceLimitExample { protected String orderByClause; protected boolean distinct; protected List<Criteria> oredCriteria; public InterfaceLimitExample() { oredCriteria = new ArrayList<Criteria>(); } public void setOrderByClause(String orderByClause) { this.orderByClause = orderByClause; } public String getOrderByClause() { return orderByClause; } public void setDistinct(boolean distinct) { this.distinct = distinct; } public boolean isDistinct() { return distinct; } public List<Criteria> getOredCriteria() { return oredCriteria; } public void or(Criteria criteria) { oredCriteria.add(criteria); } public Criteria or() { Criteria criteria = createCriteriaInternal(); oredCriteria.add(criteria); return criteria; } public Criteria createCriteria() { Criteria criteria = createCriteriaInternal(); if (oredCriteria.size() == 0) { oredCriteria.add(criteria); } return criteria; } protected Criteria createCriteriaInternal() { Criteria criteria = new Criteria(); return criteria; } public void clear() { oredCriteria.clear(); orderByClause = null; distinct = false; } protected abstract static class GeneratedCriteria { protected List<Criterion> criteria; protected GeneratedCriteria() { super(); criteria = new ArrayList<Criterion>(); } public boolean isValid() { return criteria.size() > 0; } public List<Criterion> getAllCriteria() { return criteria; } public List<Criterion> getCriteria() { return criteria; } protected void addCriterion(String condition) { if (condition == null) { throw new RuntimeException(\"Value for condition cannot be null\"); } criteria.add(new Criterion(condition)); } protected void addCriterion(String condition, Object value, String property) { if (value == null) { throw new RuntimeException(\"Value for \" + property + \" cannot be null\"); } criteria.add(new Criterion(condition, value)); } protected void addCriterion(String condition, Object value1, Object value2, String property) { if (value1 == null || value2 == null) { throw new RuntimeException(\"Between values for \" + property + \" cannot be null\"); } criteria.add(new Criterion(condition, value1, value2)); } public Criteria andIdIsNull() { addCriterion(\"id is null\"); return (Criteria) this; } public Criteria andIdIsNotNull() { addCriterion(\"id is not null\"); return (Criteria) this; } public Criteria andIdEqualTo(Integer value) { addCriterion(\"id =\", value, \"id\"); return (Criteria) this; } public Criteria andIdNotEqualTo(Integer value) { addCriterion(\"id <>\", value, \"id\"); return (Criteria) this; } public Criteria andIdGreaterThan(Integer value) { addCriterion(\"id >\", value, \"id\"); return (Criteria) this; } public Criteria andIdGreaterThanOrEqualTo(Integer value) { addCriterion(\"id >=\", value, \"id\"); return (Criteria) this; } public Criteria andIdLessThan(Integer value) { addCriterion(\"id <\", value, \"id\"); return (Criteria) this; } public Criteria andIdLessThanOrEqualTo(Integer value) { addCriterion(\"id <=\", value, \"id\"); return (Criteria) this; } public Criteria andIdIn(List<Integer> values) { addCriterion(\"id in\", values, \"id\"); return (Criteria) this; } public Criteria andIdNotIn(List<Integer> values) { addCriterion(\"id not in\", values, \"id\"); return (Criteria) this; } public Criteria andIdBetween(Integer value1, Integer value2) { addCriterion(\"id between\", value1, value2, \"id\"); return (Criteria) this; } public Criteria andIdNotBetween(Integer value1, Integer value2) { addCriterion(\"id not between\", value1, value2, \"id\"); return (Criteria) this; } public Criteria andInterfaceIdIsNull() { addCriterion(\"interfaceId is null\"); return (Criteria) this; } public Criteria andInterfaceIdIsNotNull() { addCriterion(\"interfaceId is not null\"); return (Criteria) this; } public Criteria andInterfaceIdEqualTo(Integer value) { addCriterion(\"interfaceId =\", value, \"interfaceId\"); return (Criteria) this; } public Criteria andInterfaceIdNotEqualTo(Integer value) { addCriterion(\"interfaceId <>\", value, \"interfaceId\"); return (Criteria) this; } public Criteria andInterfaceIdGreaterThan(Integer value) { addCriterion(\"interfaceId >\", value, \"interfaceId\"); return (Criteria) this; } public Criteria andInterfaceIdGreaterThanOrEqualTo(Integer value) { addCriterion(\"interfaceId >=\", value, \"interfaceId\"); return (Criteria) this; } public Criteria andInterfaceIdLessThan(Integer value) { addCriterion(\"interfaceId <\", value, \"interfaceId\"); return (Criteria) this; } public Criteria andInterfaceIdLessThanOrEqualTo(Integer value) { addCriterion(\"interfaceId <=\", value, \"interfaceId\"); return (Criteria) this; } public Criteria andInterfaceIdIn(List<Integer> values) { addCriterion(\"interfaceId in\", values, \"interfaceId\"); return (Criteria) this; } public Criteria andInterfaceIdNotIn(List<Integer> values) { addCriterion(\"interfaceId not in\", values, \"interfaceId\"); return (Criteria) this; } public Criteria andInterfaceIdBetween(Integer value1, Integer value2) { addCriterion(\"interfaceId between\", value1, value2, \"interfaceId\"); return (Criteria) this; } public Criteria andInterfaceIdNotBetween(Integer value1, Integer value2) { addCriterion(\"interfaceId not between\", value1, value2, \"interfaceId\"); return (Criteria) this; } public Criteria andUnitTimeIsNull() { addCriterion(\"unitTime is null\"); return (Criteria) this; } public Criteria andUnitTimeIsNotNull() { addCriterion(\"unitTime is not null\"); return (Criteria) this; } public Criteria andUnitTimeEqualTo(Integer value) { addCriterion(\"unitTime =\", value, \"unitTime\"); return (Criteria) this; } public Criteria andUnitTimeNotEqualTo(Integer value) { addCriterion(\"unitTime <>\", value, \"unitTime\"); return (Criteria) this; } public Criteria andUnitTimeGreaterThan(Integer value) { addCriterion(\"unitTime >\", value, \"unitTime\"); return (Criteria) this; } public Criteria andUnitTimeGreaterThanOrEqualTo(Integer value) { addCriterion(\"unitTime >=\", value, \"unitTime\"); return (Criteria) this; } public Criteria andUnitTimeLessThan(Integer value) { addCriterion(\"unitTime <\", value, \"unitTime\"); return (Criteria) this; } public Criteria andUnitTimeLessThanOrEqualTo(Integer value) { addCriterion(\"unitTime <=\", value, \"unitTime\"); return (Criteria) this; } public Criteria andUnitTimeIn(List<Integer> values) { addCriterion(\"unitTime in\", values, \"unitTime\"); return (Criteria) this; } public Criteria andUnitTimeNotIn(List<Integer> values) { addCriterion(\"unitTime not in\", values, \"unitTime\"); return (Criteria) this; } public Criteria andUnitTimeBetween(Integer value1, Integer value2) { addCriterion(\"unitTime between\", value1, value2, \"unitTime\"); return (Criteria) this; } public Criteria andUnitTimeNotBetween(Integer value1, Integer value2) { addCriterion(\"unitTime not between\", value1, value2, \"unitTime\"); return (Criteria) this; } public Criteria andUnitNumIsNull() { addCriterion(\"unitNum is null\"); return (Criteria) this; } public Criteria andUnitNumIsNotNull() { addCriterion(\"unitNum is not null\"); return (Criteria) this; } public Criteria andUnitNumEqualTo(Integer value) { addCriterion(\"unitNum =\", value, \"unitNum\"); return (Criteria) this; } public Criteria andUnitNumNotEqualTo(Integer value) { addCriterion(\"unitNum <>\", value, \"unitNum\"); return (Criteria) this; } public Criteria andUnitNumGreaterThan(Integer value) { addCriterion(\"unitNum >\", value, \"unitNum\"); return (Criteria) this; } public Criteria andUnitNumGreaterThanOrEqualTo(Integer value) { addCriterion(\"unitNum >=\", value, \"unitNum\"); return (Criteria) this; } public Criteria andUnitNumLessThan(Integer value) { addCriterion(\"unitNum <\", value, \"unitNum\"); return (Criteria) this; } public Criteria andUnitNumLessThanOrEqualTo(Integer value) { addCriterion(\"unitNum <=\", value, \"unitNum\"); return (Criteria) this; } public Criteria andUnitNumIn(List<Integer> values) { addCriterion(\"unitNum in\", values, \"unitNum\"); return (Criteria) this; } public Criteria andUnitNumNotIn(List<Integer> values) { addCriterion(\"unitNum not in\", values, \"unitNum\"); return (Criteria) this; } public Criteria andUnitNumBetween(Integer value1, Integer value2) { addCriterion(\"unitNum between\", value1, value2, \"unitNum\"); return (Criteria) this; } public Criteria andUnitNumNotBetween(Integer value1, Integer value2) { addCriterion(\"unitNum not between\", value1, value2, \"unitNum\"); return (Criteria) this; } } public static class Criteria extends GeneratedCriteria { protected Criteria() { super(); } } public static class Criterion { private String condition; private Object value; private Object secondValue; private boolean noValue; private boolean singleValue; private boolean betweenValue; private boolean listValue; private String typeHandler; public String getCondition() { return condition; } public Object getValue() { return value; } public Object getSecondValue() { return secondValue; } public boolean isNoValue() { return noValue; } public boolean isSingleValue() { return singleValue; } public boolean isBetweenValue() { return betweenValue; } public boolean isListValue() { return listValue; } public String getTypeHandler() { return typeHandler; } protected Criterion(String condition) { super(); this.condition = condition; this.typeHandler = null; this.noValue = true; } protected Criterion(String condition, Object value, String typeHandler) { super(); this.condition = condition; this.value = value; this.typeHandler = typeHandler; if (value instanceof List<?>) { this.listValue = true; } else { this.singleValue = true; } } protected Criterion(String condition, Object value) { this(condition, value, null); } protected Criterion(String condition, Object value, Object secondValue, String typeHandler) { super(); this.condition = condition; this.value = value; this.secondValue = secondValue; this.typeHandler = typeHandler; this.betweenValue = true; } protected Criterion(String condition, Object value, Object secondValue) { this(condition, value, secondValue, null); } } }"}]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/service-B/src/main/java/com/lovnx/service/InterfaceLimitService.java","main_file_content":"package com.lovnx.service; import com.lovnx.entity.InterfaceLimit; public interface InterfaceLimitService { InterfaceLimit getEntityByPri(Integer id); }","dependencies":[{"file_path":"micro-service-master/micro-service-master/service-B/src/main/java/com/lovnx/entity/InterfaceLimit.java","file_content":"package com.lovnx.entity; public class InterfaceLimit { private Integer id; private Integer interfaceId; private Integer unitTime; private Integer unitNum; public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public Integer getInterfaceId() { return interfaceId; } public void setInterfaceId(Integer interfaceId) { this.interfaceId = interfaceId; } public Integer getUnitTime() { return unitTime; } public void setUnitTime(Integer unitTime) { this.unitTime = unitTime; } public Integer getUnitNum() { return unitNum; } public void setUnitNum(Integer unitNum) { this.unitNum = unitNum; } }"}]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/service-B/src/main/java/com/lovnx/service/impl/InterfaceLimitServiceImpl.java","main_file_content":"package com.lovnx.service.impl; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import com.lovnx.entity.InterfaceLimit; import com.lovnx.mapper.InterfaceLimitMapper; import com.lovnx.service.InterfaceLimitService; @Service public class InterfaceLimitServiceImpl implements InterfaceLimitService { @Autowired private InterfaceLimitMapper mapper; @Override public InterfaceLimit getEntityByPri(Integer id) { return mapper.selectByPrimaryKey(id); } }","dependencies":[{"file_path":"micro-service-master/micro-service-master/service-B/src/main/java/com/lovnx/entity/InterfaceLimit.java","file_content":"package com.lovnx.entity; public class InterfaceLimit { private Integer id; private Integer interfaceId; private Integer unitTime; private Integer unitNum; public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public Integer getInterfaceId() { return interfaceId; } public void setInterfaceId(Integer interfaceId) { this.interfaceId = interfaceId; } public Integer getUnitTime() { return unitTime; } public void setUnitTime(Integer unitTime) { this.unitTime = unitTime; } public Integer getUnitNum() { return unitNum; } public void setUnitNum(Integer unitNum) { this.unitNum = unitNum; } }"},{"file_path":"micro-service-master/micro-service-master/service-B/src/main/java/com/lovnx/mapper/InterfaceLimitMapper.java","file_content":"package com.lovnx.mapper; import com.lovnx.entity.InterfaceLimit; import com.lovnx.entity.InterfaceLimitExample; import java.util.List; import org.apache.ibatis.annotations.Param; public interface InterfaceLimitMapper { int countByExample(InterfaceLimitExample example); int deleteByExample(InterfaceLimitExample example); int deleteByPrimaryKey(Integer id); int insert(InterfaceLimit record); int insertSelective(InterfaceLimit record); List<InterfaceLimit> selectByExample(InterfaceLimitExample example); InterfaceLimit selectByPrimaryKey(Integer id); int updateByExampleSelective(@Param(\"record\") InterfaceLimit record, @Param(\"example\") InterfaceLimitExample example); int updateByExample(@Param(\"record\") InterfaceLimit record, @Param(\"example\") InterfaceLimitExample example); int updateByPrimaryKeySelective(InterfaceLimit record); int updateByPrimaryKey(InterfaceLimit record); }"},{"file_path":"micro-service-master/micro-service-master/service-B/src/main/java/com/lovnx/service/InterfaceLimitService.java","file_content":"package com.lovnx.service; import com.lovnx.entity.InterfaceLimit; public interface InterfaceLimitService { InterfaceLimit getEntityByPri(Integer id); }"}]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/ribbon/src/main/java/com/lovnx/RibbonApplication.java","main_file_content":"package com.lovnx; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.client.discovery.EnableDiscoveryClient; import org.springframework.cloud.client.loadbalancer.LoadBalanced; import org.springframework.context.annotation.Bean; import org.springframework.web.client.RestTemplate; import com.netflix.loadbalancer.IRule; import com.netflix.loadbalancer.RandomRule; @SpringBootApplication @EnableDiscoveryClient public class RibbonApplication { @Bean @LoadBalanced RestTemplate restTemplate() { return new RestTemplate(); } @Bean public IRule ribbonRule() { return new RandomRule(); } public static void main(String[] args) { SpringApplication.run(RibbonApplication.class, args); } }","dependencies":[]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/ribbon/src/main/java/com/lovnx/web/ConsumerController.java","main_file_content":"package com.lovnx.web; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.cloud.client.loadbalancer.LoadBalancerClient; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; import org.springframework.web.client.RestTemplate; @RestController public class ConsumerController { @Autowired private RestTemplate restTemplate; @Autowired private LoadBalancerClient loadBalancerClient; @RequestMapping(value = \"/add\", method = RequestMethod.GET) public String add(@RequestParam Integer a,@RequestParam Integer b) { this.loadBalancerClient.choose(\"service-B\"); return restTemplate.getForEntity(\"http: } }","dependencies":[]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/hystrix-dashboard/src/main/java/com/hystrix_dashboard/HystrixDashboardApplication.java","main_file_content":"package com.hystrix_dashboard; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.boot.builder.SpringApplicationBuilder; import org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard; @SpringBootApplication @EnableHystrixDashboard public class HystrixDashboardApplication { public static void main(String[] args) { new SpringApplicationBuilder(HystrixDashboardApplication.class).web(true).run(args); } }","dependencies":[]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/hystrix-ribbon/src/main/java/com/hystrix/HystrixApplication.java","main_file_content":"package com.hystrix; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker; import org.springframework.cloud.client.discovery.EnableDiscoveryClient; import org.springframework.cloud.client.loadbalancer.LoadBalanced; import org.springframework.context.annotation.Bean; import org.springframework.web.client.RestTemplate; @SpringBootApplication @EnableDiscoveryClient @EnableCircuitBreaker public class HystrixApplication { @Bean @LoadBalanced public RestTemplate restTemplate() { return new RestTemplate(); } public static void main(String[] args) { SpringApplication.run(HystrixApplication.class, args); } }","dependencies":[]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/hystrix-ribbon/src/main/java/com/hystrix/normal/HystrixController.java","main_file_content":"package com.hystrix.normal; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; @RestController public class HystrixController { @Autowired private HystrixService ribbonHystrixService; @RequestMapping(\"/hystrix\") public String findById(@RequestParam Integer a,@RequestParam Integer b) { return this.ribbonHystrixService.findById(a,b); } }","dependencies":[{"file_path":"micro-service-master/micro-service-master/hystrix-ribbon/src/main/java/com/hystrix/normal/HystrixService.java","file_content":"package com.hystrix.normal; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.client.RestTemplate; import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand; @Service public class HystrixService { @Autowired private RestTemplate restTemplate; private static final Logger LOGGER = LoggerFactory.getLogger(HystrixService.class); @HystrixCommand(fallbackMethod = \"fallback\") public String findById(@RequestParam Integer a,@RequestParam Integer b) { return restTemplate.getForEntity(\"http: } public String fallback(@RequestParam Integer a,@RequestParam Integer b) { HystrixService.LOGGER.info(\"异常发生，进入fallback方法，接收的参数：id = {}\", \"qqq\"); return \"出错了 a=\" + a + \" b=\" + b; } }"}]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/hystrix-ribbon/src/main/java/com/hystrix/normal/HystrixService.java","main_file_content":"package com.hystrix.normal; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.client.RestTemplate; import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand; @Service public class HystrixService { @Autowired private RestTemplate restTemplate; private static final Logger LOGGER = LoggerFactory.getLogger(HystrixService.class); @HystrixCommand(fallbackMethod = \"fallback\") public String findById(@RequestParam Integer a,@RequestParam Integer b) { return restTemplate.getForEntity(\"http: } public String fallback(@RequestParam Integer a,@RequestParam Integer b) { HystrixService.LOGGER.info(\"异常发生，进入fallback方法，接收的参数：id = {}\", \"qqq\"); return \"出错了 a=\" + a + \" b=\" + b; } }","dependencies":[]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/service-B2/src/main/java/com/lovnx/B2_Application.java","main_file_content":"package com.lovnx; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.boot.builder.SpringApplicationBuilder; import org.springframework.cloud.client.discovery.EnableDiscoveryClient; @EnableDiscoveryClient @SpringBootApplication public class B2_Application { public static void main(String[] args) { new SpringApplicationBuilder(B2_Application.class).web(true).run(args); } }","dependencies":[]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/service-B2/src/main/java/com/lovnx/web/ComputeController.java","main_file_content":"package com.lovnx.web; import javax.servlet.http.HttpServletRequest; import org.apache.log4j.Logger; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.cloud.client.ServiceInstance; import org.springframework.cloud.client.discovery.DiscoveryClient; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; import org.springframework.web.client.RestTemplate; @RestController public class ComputeController { private final Logger logger = Logger.getLogger(getClass()); @Autowired private DiscoveryClient client; @RequestMapping(value = \"/**\" ,method = RequestMethod.GET) public String add(@RequestParam Integer a, @RequestParam Integer b,HttpServletRequest request) { System.out.println(request.getRequestURL()); ServiceInstance instance = client.getLocalServiceInstance(); Integer r = a + b; logger.info(\"/add, host:\" + instance.getHost() + \", service_id:\" + instance.getServiceId() + \", result:\" + r); return \"From Service-B, Result is \" + r+\"\\nPort:\"+instance.getPort(); } @RequestMapping(value=\"testServiceA\",method=RequestMethod.GET) public String testServiceB(@RequestParam Integer a,@RequestParam Integer b){ RestTemplate restTemplate=new RestTemplate(); return restTemplate.getForObject(\"http: } }","dependencies":[]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/service-A/src/main/java/com/lovnx/A_Application.java","main_file_content":"package com.lovnx; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.boot.builder.SpringApplicationBuilder; import org.springframework.cloud.client.discovery.EnableDiscoveryClient; @EnableDiscoveryClient @SpringBootApplication public class A_Application { public static void main(String[] args) { new SpringApplicationBuilder(A_Application.class).web(true).run(args); } }","dependencies":[]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/service-A/src/main/java/com/lovnx/web/TestController.java","main_file_content":"package com.lovnx.web; import org.springframework.beans.factory.annotation.Value; import org.springframework.cloud.context.config.annotation.RefreshScope; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; @RefreshScope @RestController class TestController { @Value(\"${from}\") private String from; @RequestMapping(\"/from\") public String from() { return this.from; } public void setFrom(String from) { this.from = from; } public String getFrom() { return from; } }","dependencies":[]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/service-A/src/main/java/com/lovnx/web/ComputeController.java","main_file_content":"package com.lovnx.web; import org.apache.log4j.Logger; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.cloud.client.ServiceInstance; import org.springframework.cloud.client.discovery.DiscoveryClient; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; import org.springframework.web.client.RestTemplate; @RestController public class ComputeController { private final Logger logger = Logger.getLogger(getClass()); @Autowired private DiscoveryClient client; @RequestMapping(value = \"/add\" ,method = RequestMethod.GET) public String add(@RequestParam Integer a, @RequestParam Integer b) { ServiceInstance instance = client.getLocalServiceInstance(); Integer r = a + b; logger.info(\"/add, host:\" + instance.getHost() + \", service_id:\" + instance.getServiceId() + \", result:\" + r); return \"From Service-A, Result is \" + r; } @RequestMapping(value=\"testServiceB\",method=RequestMethod.GET) public String testServiceB(@RequestParam Integer a,@RequestParam Integer b){ RestTemplate restTemplate=new RestTemplate(); return restTemplate.getForObject(\"http: } }","dependencies":[]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/eureka-sever/src/main/java/com/lovnx/EurekaServer.java","main_file_content":"package com.lovnx; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.boot.builder.SpringApplicationBuilder; import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer; @EnableEurekaServer @SpringBootApplication public class EurekaServer { public static void main(String[] args) { new SpringApplicationBuilder(EurekaServer.class).web(true).run(args); } }","dependencies":[]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/feign/src/main/java/com/feign/FeignApplication.java","main_file_content":"package com.feign; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.client.discovery.EnableDiscoveryClient; import org.springframework.cloud.netflix.feign.EnableFeignClients; @SpringBootApplication @EnableFeignClients @EnableDiscoveryClient public class FeignApplication { public static void main(String[] args) { SpringApplication.run(FeignApplication.class, args); } }","dependencies":[]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/feign/src/main/java/com/feign/client/TestFeignClient.java","main_file_content":"package com.feign.client; import org.springframework.cloud.netflix.feign.FeignClient; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; @FeignClient(name = \"SERVICE-B\") public interface TestFeignClient { @RequestMapping(\"/add\") public String add(@RequestParam(\"a\") Integer a,@RequestParam(\"b\") Integer b); }","dependencies":[]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/feign/src/main/java/com/feign/client/FeignController.java","main_file_content":"package com.feign.client; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; @RestController public class FeignController { @Autowired private TestFeignClient testFeignClient; @RequestMapping(value = \"/add\" , method = RequestMethod.GET) public String add(@RequestParam Integer a,@RequestParam Integer b) { String string = this.testFeignClient.add(a,b); return string; } }","dependencies":[{"file_path":"micro-service-master/micro-service-master/feign/src/main/java/com/feign/client/TestFeignClient.java","file_content":"package com.feign.client; import org.springframework.cloud.netflix.feign.FeignClient; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; @FeignClient(name = \"SERVICE-B\") public interface TestFeignClient { @RequestMapping(\"/add\") public String add(@RequestParam(\"a\") Integer a,@RequestParam(\"b\") Integer b); }"}]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/service-admin/src/main/java/com/lovnx/SpringBootAdminApplication.java","main_file_content":"package com.lovnx; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.EnableAutoConfiguration; import org.springframework.cloud.client.discovery.EnableDiscoveryClient; import org.springframework.context.annotation.Configuration; import de.codecentric.boot.admin.config.EnableAdminServer; @Configuration @EnableAutoConfiguration @EnableDiscoveryClient @EnableAdminServer public class SpringBootAdminApplication { public static void main(String[] args) { SpringApplication.run(SpringBootAdminApplication.class, args); } }","dependencies":[]}}
{"project_id":221,"chunk_id":0,"content":{"main_file_path":"micro-service-master/micro-service-master/service-admin/src/main/java/com/lovnx/NotifierConfiguration.java","main_file_content":"package com.lovnx; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.scheduling.annotation.EnableScheduling; import com.netflix.governator.annotations.binding.Primary; import de.codecentric.boot.admin.notify.Notifier; import de.codecentric.boot.admin.notify.RemindingNotifier; @Configuration @EnableScheduling public class NotifierConfiguration { @Autowired private Notifier notifier; private String[] reminderStatuses = { \"DOWN\" }; @Bean @Primary public RemindingNotifier remindingNotifier() { RemindingNotifier remindingNotifier = new RemindingNotifier(notifier); remindingNotifier.setReminderStatuses(reminderStatuses); return remindingNotifier; } }","dependencies":[]}}
{"project_id":222,"chunk_id":0,"content":{"main_file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Recognition/SupportVectorMachine.java","main_file_content":"package ch.zhaw.facerecognitionlibrary.Recognition; import android.content.Context; import org.opencv.core.Mat; import java.io.BufferedReader; import java.io.File; import java.io.FileNotFoundException; import java.io.FileReader; import java.io.FileWriter; import java.io.IOException; import java.nio.Buffer; import java.util.ArrayList; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.FileHelper; import ch.zhaw.facerecognitionlibrary.Helpers.OneToOneMap; import ch.zhaw.facerecognitionlibrary.Helpers.PreferencesHelper; public class SupportVectorMachine implements Recognition { PreferencesHelper preferencesHelper; private FileHelper fh; private File trainingFile; private File predictionFile; private File testFile; private List<String> trainingList; private List<String> testList; private OneToOneMap<String, Integer> labelMap; private OneToOneMap<String, Integer> labelMapTest; private int method; public SupportVectorMachine(Context context, int method) { preferencesHelper = new PreferencesHelper(context); fh = new FileHelper(); trainingFile = fh.createSvmTrainingFile(); predictionFile = fh.createSvmPredictionFile(); testFile = fh.createSvmTestFile(); trainingList = new ArrayList<>(); testList = new ArrayList<>(); labelMap = new OneToOneMap<String, Integer>(); labelMapTest = new OneToOneMap<String, Integer>(); this.method = method; if(method == RECOGNITION){ loadFromFile(); } } public SupportVectorMachine(File trainingFile, File predictionFile){ fh = new FileHelper(); this.trainingFile = trainingFile; this.predictionFile = predictionFile; trainingList = new ArrayList<>(); } static { System.loadLibrary(\"jnilibsvm\"); } private native void jniSvmTrain(String cmd); private native void jniSvmPredict(String cmd); @Override public boolean train() { fh.saveStringList(trainingList, trainingFile); String svmTrainOptions = preferencesHelper.getSvmTrainOptions(); String training = trainingFile.getAbsolutePath(); String model = trainingFile.getAbsolutePath() + \"_model\"; jniSvmTrain(svmTrainOptions + \" \" + training + \" \" + model); saveToFile(); return true; } public boolean trainProbability(String svmTrainOptions) { fh.saveStringList(trainingList, trainingFile); String training = trainingFile.getAbsolutePath(); String model = trainingFile.getAbsolutePath() + \"_model\"; jniSvmTrain(svmTrainOptions + \" -b 1\" + \" \" + training + \" \" + model); return true; } @Override public String recognize(Mat img, String expectedLabel) { try { FileWriter fw = new FileWriter(predictionFile, false); String line = imageToSvmString(img, expectedLabel); testList.add(line); fw.append(line); fw.close(); } catch (IOException e) { e.printStackTrace(); } String prediction = predictionFile.getAbsolutePath(); String model = trainingFile.getAbsolutePath() + \"_model\"; String output = predictionFile.getAbsolutePath() + \"_output\"; jniSvmPredict(prediction + \" \" + model + \" \" + output); try { BufferedReader buf = new BufferedReader(new FileReader(output)); int iLabel = Integer.valueOf(buf.readLine()); buf.close(); return labelMap.getKey(iLabel); } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } return null; } public String recognizeProbability(String svmString){ try { FileWriter fw = new FileWriter(predictionFile, false); fw.append(String.valueOf(1) + svmString); fw.close(); } catch (IOException e) { e.printStackTrace(); } String prediction = predictionFile.getAbsolutePath(); String model = trainingFile.getAbsolutePath() + \"_model\"; String output = predictionFile.getAbsolutePath() + \"_output\"; jniSvmPredict(\"-b 1 \" + prediction + \" \" + model + \" \" + output); try { BufferedReader buf = new BufferedReader(new FileReader(output)); String probability = buf.readLine() + \"\\n\"; probability = probability + buf.readLine(); buf.close(); return probability; } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } return null; } @Override public void saveToFile() { if(method == TRAINING){ fh.saveLabelMapToFile(fh.SVM_PATH, labelMap, \"train\"); } else { fh.saveLabelMapToFile(fh.SVM_PATH, labelMapTest, \"test\"); } } @Override public void saveTestData(){ fh.saveStringList(testList, testFile); } @Override public void loadFromFile() { labelMap = fh.getLabelMapFromFile(fh.SVM_PATH); } @Override public void addImage(Mat img, String label, boolean featuresAlreadyExtracted) { if(method == TRAINING){ trainingList.add(imageToSvmString(img, label)); } else { testList.add(imageToSvmString(img, label)); } } public void addImage(String svmString, String label) { trainingList.add(label + \" \" + svmString); } public Mat getFeatureVector(Mat img){ return img.reshape(1,1); } private String imageToSvmString(Mat img, String label){ int iLabel = 0; if(method == TRAINING){ if (labelMap.containsKey(label)) { iLabel = labelMap.getValue(label); } else { iLabel = labelMap.size() + 1; labelMap.put(label, iLabel); } } else { if (labelMapTest.containsKey(label)){ iLabel = labelMapTest.getValue(label); } else { iLabel = labelMapTest.size() + 1; labelMapTest.put(label, iLabel); } } String result = String.valueOf(iLabel); return result + getSvmString(img); } public String getSvmString(Mat img){ img = getFeatureVector(img); String result = \"\"; for (int i=0; i<img.cols(); i++){ result = result + \" \" + i + \":\" + img.get(0,i)[0]; } return result; } }","dependencies":[{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/FileHelper.java","file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import android.graphics.Bitmap; import android.os.Environment; import org.opencv.android.Utils; import org.opencv.core.Mat; import java.io.BufferedReader; import java.io.File; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.FileReader; import java.io.FileWriter; import java.io.IOException; import java.text.SimpleDateFormat; import java.util.ArrayList; import java.util.List; import java.util.Map; import java.util.Set; import ch.zhaw.facerecognitionlibrary.PreProcessor.PreProcessorFactory; public class FileHelper { public static String getFolderPath() { return FOLDER_PATH; } private static final String FOLDER_PATH = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES) + \"/facerecognition\"; public static final String TRAINING_PATH = FOLDER_PATH + \"/training/\"; public static final String TEST_PATH = FOLDER_PATH + \"/test/\"; public static final String DETECTION_TEST_PATH = FOLDER_PATH + \"/detection_test/\"; public static final String DATA_PATH = FOLDER_PATH + \"/data/\"; public static final String RESULTS_PATH = FOLDER_PATH + \"/results/\"; public static final String EIGENFACES_PATH = DATA_PATH + \"Eigenfaces/\"; public static final String SVM_PATH = DATA_PATH + \"SVM/\"; public static final String KNN_PATH = DATA_PATH + \"KNN/\"; public static final String CAFFE_PATH = DATA_PATH + \"Caffe/\"; public static final String TENSORFLOW_PATH = DATA_PATH + \"TensorFlow/\"; private static final String SEPARATOR = \";\"; private String name = \"\"; public FileHelper(String name) { this.name = name; } public FileHelper(){} public void createDataFolderIfNotExsiting(){ File folder = new File(DATA_PATH); folder.mkdir(); } private void createFolderIfNotExisting(String path){ File folder = new File(path); folder.mkdir(); } public static boolean isFileAnImage(File file){ if (file.toString().endsWith(\".jpg\") || file.toString().endsWith(\".jpeg\") || file.toString().endsWith(\".gif\") || file.toString().endsWith(\".png\")){ return true; } else { return false; } } private File[] getListOfFiles(String path){ File directory = new File(path + name); if(directory.exists()){ return directory.listFiles(); } else { return new File[]{}; } } public File[] getTrainingList(){ return getListOfFiles(TRAINING_PATH); } public File[] getTestList(){ return getListOfFiles(TEST_PATH); } public File[] getDetectionTestList() { return getListOfFiles(DETECTION_TEST_PATH); } public void saveMatListToXml(List<MatName> matList, String path, String filename){ createFolderIfNotExisting(path); MatXml matXml = new MatXml(); matXml.create(path + filename); for(MatName mat : matList){ matXml.writeMat(mat.getName(), mat.getMat()); } matXml.release(); } public List<MatName> getMatListFromXml(List<MatName> matList, String path, String filename){ String filepath = path + filename; MatXml matXml = new MatXml(); File file = new File(filepath); if (file.exists()){ matXml.open(filepath); for (MatName mat : matList){ mat.setMat(matXml.readMat(mat.getName())); } } return matList; } public String saveMatToImage(MatName m, String path){ new File(path).mkdirs(); String fullpath = path + m.getName() + \".png\"; Mat mat = m.getMat(); Bitmap bitmap = Bitmap.createBitmap(mat.cols(), mat.rows(), Bitmap.Config.ARGB_8888); Utils.matToBitmap(mat, bitmap); File file = new File(fullpath); try { FileOutputStream os = new FileOutputStream(file); bitmap.compress(Bitmap.CompressFormat.PNG, 100, os); os.close(); } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } return fullpath; } public void saveBitmapToImage(Bitmap bmp){ File file = new File(DATA_PATH + \"bitmap.png\"); try { FileOutputStream os = new FileOutputStream(file); bmp.compress(Bitmap.CompressFormat.PNG, 100, os); os.close(); } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } } public File createSvmTrainingFile(){ createFolderIfNotExisting(SVM_PATH); String filepath = SVM_PATH + \"svm_train\"; File trainingFile = new File(filepath); return trainingFile; } public File createSvmPredictionFile(){ String filepath = SVM_PATH + \"svm_predict\"; File predictionFile = new File(filepath); return predictionFile; } public File createSvmTestFile(){ String filepath = SVM_PATH + \"svm_test\"; File testFile = new File(filepath); return testFile; } public File createLabelFile(String path, String name){ createFolderIfNotExisting(path); String filepath = path + \"label_\" + name; File trainingFile = new File(filepath); return trainingFile; } public void saveLabelMapToFile(String path, OneToOneMap<String, Integer> labelMap, String name){ createFolderIfNotExisting(path); String filepath = path + \"labelMap_\" + name; try { FileWriter fw = new FileWriter(filepath); for (String s : (Set<String>)labelMap.getKeyToValMap().keySet()){ fw.append(s + SEPARATOR + labelMap.getValue(s) + \"\\n\"); } fw.close(); } catch (IOException e) { e.printStackTrace(); } } public void saveResultsToFile(Map<String, ?> map, double accuracy, double accuracy_reference, double accuracy_deviation, double robustness, int duration, List<String> results){ String timestamp = new SimpleDateFormat(\"ddMMyyyyHHmm\").format(new java.util.Date()); createFolderIfNotExisting(RESULTS_PATH); String filepath = RESULTS_PATH + \"Accuracy_\" + String.format(\"%.2f\", accuracy * 100) + \"_\" + timestamp + \".txt\"; try { FileWriter fw = new FileWriter(filepath); for (Map.Entry entry : map.entrySet()){ fw.append(entry.getKey() + \": \" + entry.getValue() + \"\\n\"); } fw.append(\"Accuracy: \" + accuracy * 100 + \"%\\n\"); fw.append(\"Accuracy reference: \" + accuracy_reference * 100 + \"%\\n\"); fw.append(\"Accuracy deviation: \" + accuracy_deviation * 100 + \"%\\n\"); fw.append(\"Robustness: \" + robustness * 100 + \"%\\n\"); fw.append(\"Duration per image: \" + duration + \"ms\\n\"); for (String result : results){ fw.append(result + \"\\n\"); } fw.close(); } catch (IOException e) { e.printStackTrace(); } } public void saveResultsToFile(Map<String, ?> map, double accuracy, int duration, List<String> results){ String timestamp = new SimpleDateFormat(\"ddMMyyyyHHmm\").format(new java.util.Date()); createFolderIfNotExisting(RESULTS_PATH); String filepath = RESULTS_PATH + \"Accuracy_\" + String.format(\"%.2f\", accuracy * 100) + \"_\" + timestamp + \".txt\"; try { FileWriter fw = new FileWriter(filepath); for (Map.Entry entry : map.entrySet()){ fw.append(entry.getKey() + \": \" + entry.getValue() + \"\\n\"); } fw.append(\"Accuracy: \" + accuracy * 100 + \"%\\n\"); fw.append(\"Duration per image: \" + duration + \"ms\\n\"); for (String result : results){ fw.append(result + \"\\n\"); } fw.close(); } catch (IOException e) { e.printStackTrace(); } } public OneToOneMap<String, Integer> getLabelMapFromFile(String path){ String filepath = path + \"labelMap_train\"; OneToOneMap<String, Integer> labelMap = new OneToOneMap<>(); try { BufferedReader buf = new BufferedReader(new FileReader(filepath)); String line = buf.readLine(); while (line != null){ String[] split = line.split(SEPARATOR); labelMap.put(split[0], Integer.valueOf(split[1])); line = buf.readLine(); } buf.close(); } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } return labelMap; } public void saveStringList(List<String> list, File file){ try { FileWriter fw = new FileWriter(file, false); for (String line : list){ fw.append(line + \"\\n\"); } fw.close(); } catch (IOException e) { e.printStackTrace(); } } public void saveIntegerList(List<Integer> list, File file){ try { FileWriter fw = new FileWriter(file, false); for (int line : list){ fw.append(Integer.toString(line)+ \"\\n\"); } fw.close(); } catch (IOException e) { e.printStackTrace(); } } public List<String> loadStringList(File file){ List<String> list = new ArrayList<>(); try { FileReader fr = new FileReader(file); BufferedReader br = new BufferedReader(fr); String line; while ((line = br.readLine()) != null){ list.add(line); } br.close(); fr.close(); } catch (IOException e) { e.printStackTrace(); } return list; } public List<Integer> loadIntegerList(File file){ List<Integer> list = new ArrayList<>(); try { FileReader fr = new FileReader(file); BufferedReader br = new BufferedReader(fr); Integer line = 0; String sLine; while ((sLine = br.readLine()) != null){ line = Integer.parseInt(sLine); list.add(line); } br.close(); fr.close(); } catch (IOException e) { e.printStackTrace(); } return list; } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/OneToOneMap.java","file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import java.util.HashMap; import java.util.Map; public class OneToOneMap<Key, Value> { private Map<Key, Value> keyToVal; private Map<Value, Key> valToKey; public OneToOneMap() { this.keyToVal = new HashMap<>(); this.valToKey = new HashMap<>(); } public void put(Key k, Value v) { if (!keyToVal.containsKey(k) && !valToKey.containsKey(v)) { keyToVal.put(k, v); valToKey.put(v, k); } } public boolean containsKey(Key k){ return keyToVal.containsKey(k); } public Value getValue(Key k){ return keyToVal.get(k); } public Key getKey(Value v){ return valToKey.get(v); } public int size(){ return keyToVal.size(); } public Map getKeyToValMap(){ return keyToVal; } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/PreferencesHelper.java","file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import android.content.Context; import android.content.SharedPreferences; import android.content.res.Resources; import android.preference.PreferenceManager; import java.util.ArrayList; import java.util.Collections; import java.util.List; import java.util.Set; import ch.zhaw.facerecognitionlibrary.R; public class PreferencesHelper { public enum Usage {RECOGNITION, DETECTION}; SharedPreferences sharedPreferences; Resources resources; public PreferencesHelper(Context context){ sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context); resources = context.getResources(); } public String getClassificationMethod(){ return sharedPreferences.getString(\"key_classification_method\", resources.getString(R.string.eigenfaces)); } public boolean getClassificationMethodTFCaffe(){ return sharedPreferences.getBoolean(\"key_classificationMethodTFCaffe\", true); } public float getGamma(){ return Float.valueOf(sharedPreferences.getString(\"key_gamma\", resources.getString(R.string.gamma))); } public double[] getSigmas(){ String[] sigmasString = sharedPreferences.getString(\"key_sigmas\", resources.getString(R.string.sigmas)).split(\",\"); if(sigmasString.length != 2){ sigmasString = resources.getString(R.string.sigmas).split(\",\"); } double[] sigmas = new double[3]; for(int i=0; i<2; i++){ sigmas[i] = Double.parseDouble(sigmasString[i]); } return sigmas; } public boolean getEyeDetectionEnabled(){ return sharedPreferences.getBoolean(\"key_eye_detection\", true); } public List<String> getStandardPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_standard_pre\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_standard_pre\"); } else { return new ArrayList<>(); } } public List<String> getBrightnessPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_brightness\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_brightness\"); } else { return new ArrayList<>(); } } public List<String> getContoursPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_contours\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_contours\"); } else { return new ArrayList<>(); } } public List<String> getContrastPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_contrast\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_contrast\"); } else { return new ArrayList<>(); } } public List<String> getStandardPostprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_standard_post\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_standard_post\"); } else { return new ArrayList<>(); } } private List<String> getPreferenceList(String key){ Set<String> set = sharedPreferences.getStringSet(key, null); ArrayList<String> list; if(set != null) { list = new ArrayList<String>(set); Collections.sort(list); return list; } else { return new ArrayList<>(); } } public String getCaffeModelFile(){ return sharedPreferences.getString(\"key_modelFileCaffe\", resources.getString(R.string.modelFileCaffe)); } public String getCaffeWeightsFile(){ return sharedPreferences.getString(\"key_weightsFileCaffe\", resources.getString(R.string.weightsFileCaffe)); } public String getCaffeOutputLayer(){ return sharedPreferences.getString(\"key_outputLayerCaffe\", resources.getString(R.string.weightsFileCaffe)); } public float[] getCaffeMeanValues(){ String[] meanValuesString = sharedPreferences.getString(\"key_meanValuesCaffe\", resources.getString(R.string.meanValuesCaffe)).split(\",\"); if(meanValuesString.length != 3){ meanValuesString = resources.getString(R.string.meanValuesCaffe).split(\",\"); } float[] meanValues = new float[3]; for(int i=0; i<3; i++){ meanValues[i] = Float.parseFloat(meanValuesString[i]); } return meanValues; } public String getSvmTrainOptions(){ return sharedPreferences.getString(\"key_svmTrainOptions\", \"-t 0 \"); } public int getK(){ return Integer.valueOf(sharedPreferences.getString(\"key_K\", \"20\")); } public int getN(){ return Integer.valueOf(sharedPreferences.getString(\"key_N\", \"25\")); } public int getFaceSize(){ return Integer.valueOf(sharedPreferences.getString(\"key_faceSize\", \"160\")); } public int getTensorFlowInputSize(){ return Integer.valueOf(sharedPreferences.getString(\"key_inputSize\", \"160\")); } public int getTensorFlowInputChannels(){ return Integer.valueOf(sharedPreferences.getString(\"key_inputChannels\", \"3\")); } public int getTensorFlowImageMean(){ return Integer.valueOf(sharedPreferences.getString(\"key_imageMean\", \"128\")); } public int getTensorFlowImageStd(){ return Integer.valueOf(sharedPreferences.getString(\"key_imageStd\", \"128\")); } public int getTensorFlowOutputSize(){ return Integer.valueOf(sharedPreferences.getString(\"key_outputSize\", \"128\")); } public String getTensorFlowInputLayer(){ return sharedPreferences.getString(\"key_inputLayer\", \"input\"); } public String getTensorFlowOutputLayer(){ return sharedPreferences.getString(\"key_outputLayer\", \"embeddings\"); } public String getTensorFlowModelFile(){ return sharedPreferences.getString(\"key_modelFileTensorFlow\", \"facenet.pb\"); } public float getPCAThreshold(){ return Float.valueOf(sharedPreferences.getString(\"key_pca_threshold\", \"0.98f\")); } public String getFaceCascadeFile(){ return sharedPreferences.getString(\"key_face_cascade_file\", resources.getString(R.string.haarcascade_alt2)); } public String getLefteyeCascadeFile(){ return sharedPreferences.getString(\"key_lefteye_cascade_file\", resources.getString(R.string.haarcascade_lefteye)); } public String getRighteyeCascadeFile(){ return sharedPreferences.getString(\"key_righteye_cascade_file\", resources.getString(R.string.haarcascade_righteye)); } public double getDetectionScaleFactor(){ return Double.parseDouble(sharedPreferences.getString(\"key_scaleFactor\", \"1.1\")); } public int getDetectionMinNeighbors(){ return Integer.parseInt(sharedPreferences.getString(\"key_minNeighbors\", \"3\")); } public int getDetectionFlags(){ return Integer.parseInt(sharedPreferences.getString(\"key_flags\", \"2\")); } public boolean getDetectionMethod(){ return sharedPreferences.getBoolean(\"key_detection_method\", true); } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Recognition/Recognition.java","file_content":"package ch.zhaw.facerecognitionlibrary.Recognition; import org.opencv.core.Mat; public interface Recognition { public static final int TRAINING = 0; public static final int RECOGNITION = 1; public static final int KNN = 0; public static final int SVM = 1; boolean train(); String recognize(Mat img, String expectedLabel); void saveTestData(); void saveToFile(); void loadFromFile(); void addImage(Mat img, String label, boolean featuresAlreadyExtracted); Mat getFeatureVector(Mat img); }"}]}}
{"project_id":222,"chunk_id":0,"content":{"main_file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Recognition/TensorFlow.java","main_file_content":"package ch.zhaw.facerecognitionlibrary.Recognition; import android.content.Context; import android.graphics.Bitmap; import org.opencv.android.Utils; import org.opencv.core.Mat; import org.opencv.core.Size; import org.opencv.imgproc.Imgproc; import org.opencv.utils.Converters; import org.tensorflow.contrib.android.TensorFlowInferenceInterface; import java.io.File; import java.util.ArrayList; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.FileHelper; import ch.zhaw.facerecognitionlibrary.Helpers.PreferencesHelper; public class TensorFlow implements Recognition { private String inputLayer; private String outputLayer; private int inputSize; private int channels; private int imageMean; private int imageStd; private int outputSize; private Recognition rec; private TensorFlowInferenceInterface inferenceInterface; private boolean logStats = false; public TensorFlow(Context context, int method) { String dataPath = FileHelper.TENSORFLOW_PATH; PreferencesHelper preferencesHelper = new PreferencesHelper(context); inputSize = preferencesHelper.getTensorFlowInputSize(); channels = preferencesHelper.getTensorFlowInputChannels(); imageMean = preferencesHelper.getTensorFlowImageMean(); imageStd = preferencesHelper.getTensorFlowImageStd(); outputSize = preferencesHelper.getTensorFlowOutputSize(); inputLayer = preferencesHelper.getTensorFlowInputLayer(); outputLayer = preferencesHelper.getTensorFlowOutputLayer(); String modelFile = preferencesHelper.getTensorFlowModelFile(); Boolean classificationMethod = preferencesHelper.getClassificationMethodTFCaffe(); File file = new File(dataPath + modelFile); if(file.exists()){ inferenceInterface = new TensorFlowInferenceInterface(context.getAssets(), dataPath + modelFile); } else { inferenceInterface = new TensorFlowInferenceInterface(context.getAssets(), modelFile); } if(classificationMethod){ rec = new SupportVectorMachine(context, method); } else { rec = new KNearestNeighbor(context, method); } } public TensorFlow(Context context, int inputSize, int outputSize, String inputLayer, String outputLayer, String modelFile){ this.inputSize = inputSize; this.outputSize = outputSize; this.inputLayer = inputLayer; this.outputLayer = outputLayer; inferenceInterface = new TensorFlowInferenceInterface(context.getAssets(), modelFile); } @Override public boolean train() { return rec.train(); } @Override public String recognize(Mat img, String expectedLabel) { return rec.recognize(getFeatureVector(img), expectedLabel); } @Override public void saveToFile() { } @Override public void loadFromFile() { } @Override public void saveTestData() { rec.saveTestData(); } @Override public void addImage(Mat img, String label, boolean featuresAlreadyExtracted) { if (featuresAlreadyExtracted){ rec.addImage(img, label, true); } else { rec.addImage(getFeatureVector(img), label, true); } } public Mat getFeatureVector(Mat img){ Imgproc.resize(img, img, new Size(inputSize, inputSize)); inferenceInterface.feed(inputLayer, getPixels(img), 1, inputSize, inputSize, channels); inferenceInterface.run(new String[]{outputLayer}, logStats); float[] outputs = new float[outputSize]; inferenceInterface.fetch(outputLayer, outputs); List<Float> fVector = new ArrayList<>(); for(float o : outputs){ fVector.add(o); } return Converters.vector_float_to_Mat(fVector); } private float[] getPixels(Mat img){ Bitmap bmp = Bitmap.createBitmap(inputSize, inputSize, Bitmap.Config.ARGB_8888); Utils.matToBitmap(img, bmp); int[] intValues = new int[inputSize * inputSize]; bmp.getPixels(intValues, 0, inputSize, 0, 0, inputSize, inputSize); float[] floatValues = new float[inputSize * inputSize * channels]; for (int i = 0; i < intValues.length; ++i) { final int val = intValues[i]; floatValues[i * 3 + 0] = (((float)((val >> 16) & 0xFF)) - imageMean) / imageStd; floatValues[i * 3 + 1] = (((float)((val >> 8) & 0xFF)) - imageMean) / imageStd; floatValues[i * 3 + 2] = (((float)(val & 0xFF)) - imageMean) / imageStd; } return floatValues; } }","dependencies":[{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/PreferencesHelper.java","file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import android.content.Context; import android.content.SharedPreferences; import android.content.res.Resources; import android.preference.PreferenceManager; import java.util.ArrayList; import java.util.Collections; import java.util.List; import java.util.Set; import ch.zhaw.facerecognitionlibrary.R; public class PreferencesHelper { public enum Usage {RECOGNITION, DETECTION}; SharedPreferences sharedPreferences; Resources resources; public PreferencesHelper(Context context){ sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context); resources = context.getResources(); } public String getClassificationMethod(){ return sharedPreferences.getString(\"key_classification_method\", resources.getString(R.string.eigenfaces)); } public boolean getClassificationMethodTFCaffe(){ return sharedPreferences.getBoolean(\"key_classificationMethodTFCaffe\", true); } public float getGamma(){ return Float.valueOf(sharedPreferences.getString(\"key_gamma\", resources.getString(R.string.gamma))); } public double[] getSigmas(){ String[] sigmasString = sharedPreferences.getString(\"key_sigmas\", resources.getString(R.string.sigmas)).split(\",\"); if(sigmasString.length != 2){ sigmasString = resources.getString(R.string.sigmas).split(\",\"); } double[] sigmas = new double[3]; for(int i=0; i<2; i++){ sigmas[i] = Double.parseDouble(sigmasString[i]); } return sigmas; } public boolean getEyeDetectionEnabled(){ return sharedPreferences.getBoolean(\"key_eye_detection\", true); } public List<String> getStandardPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_standard_pre\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_standard_pre\"); } else { return new ArrayList<>(); } } public List<String> getBrightnessPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_brightness\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_brightness\"); } else { return new ArrayList<>(); } } public List<String> getContoursPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_contours\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_contours\"); } else { return new ArrayList<>(); } } public List<String> getContrastPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_contrast\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_contrast\"); } else { return new ArrayList<>(); } } public List<String> getStandardPostprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_standard_post\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_standard_post\"); } else { return new ArrayList<>(); } } private List<String> getPreferenceList(String key){ Set<String> set = sharedPreferences.getStringSet(key, null); ArrayList<String> list; if(set != null) { list = new ArrayList<String>(set); Collections.sort(list); return list; } else { return new ArrayList<>(); } } public String getCaffeModelFile(){ return sharedPreferences.getString(\"key_modelFileCaffe\", resources.getString(R.string.modelFileCaffe)); } public String getCaffeWeightsFile(){ return sharedPreferences.getString(\"key_weightsFileCaffe\", resources.getString(R.string.weightsFileCaffe)); } public String getCaffeOutputLayer(){ return sharedPreferences.getString(\"key_outputLayerCaffe\", resources.getString(R.string.weightsFileCaffe)); } public float[] getCaffeMeanValues(){ String[] meanValuesString = sharedPreferences.getString(\"key_meanValuesCaffe\", resources.getString(R.string.meanValuesCaffe)).split(\",\"); if(meanValuesString.length != 3){ meanValuesString = resources.getString(R.string.meanValuesCaffe).split(\",\"); } float[] meanValues = new float[3]; for(int i=0; i<3; i++){ meanValues[i] = Float.parseFloat(meanValuesString[i]); } return meanValues; } public String getSvmTrainOptions(){ return sharedPreferences.getString(\"key_svmTrainOptions\", \"-t 0 \"); } public int getK(){ return Integer.valueOf(sharedPreferences.getString(\"key_K\", \"20\")); } public int getN(){ return Integer.valueOf(sharedPreferences.getString(\"key_N\", \"25\")); } public int getFaceSize(){ return Integer.valueOf(sharedPreferences.getString(\"key_faceSize\", \"160\")); } public int getTensorFlowInputSize(){ return Integer.valueOf(sharedPreferences.getString(\"key_inputSize\", \"160\")); } public int getTensorFlowInputChannels(){ return Integer.valueOf(sharedPreferences.getString(\"key_inputChannels\", \"3\")); } public int getTensorFlowImageMean(){ return Integer.valueOf(sharedPreferences.getString(\"key_imageMean\", \"128\")); } public int getTensorFlowImageStd(){ return Integer.valueOf(sharedPreferences.getString(\"key_imageStd\", \"128\")); } public int getTensorFlowOutputSize(){ return Integer.valueOf(sharedPreferences.getString(\"key_outputSize\", \"128\")); } public String getTensorFlowInputLayer(){ return sharedPreferences.getString(\"key_inputLayer\", \"input\"); } public String getTensorFlowOutputLayer(){ return sharedPreferences.getString(\"key_outputLayer\", \"embeddings\"); } public String getTensorFlowModelFile(){ return sharedPreferences.getString(\"key_modelFileTensorFlow\", \"facenet.pb\"); } public float getPCAThreshold(){ return Float.valueOf(sharedPreferences.getString(\"key_pca_threshold\", \"0.98f\")); } public String getFaceCascadeFile(){ return sharedPreferences.getString(\"key_face_cascade_file\", resources.getString(R.string.haarcascade_alt2)); } public String getLefteyeCascadeFile(){ return sharedPreferences.getString(\"key_lefteye_cascade_file\", resources.getString(R.string.haarcascade_lefteye)); } public String getRighteyeCascadeFile(){ return sharedPreferences.getString(\"key_righteye_cascade_file\", resources.getString(R.string.haarcascade_righteye)); } public double getDetectionScaleFactor(){ return Double.parseDouble(sharedPreferences.getString(\"key_scaleFactor\", \"1.1\")); } public int getDetectionMinNeighbors(){ return Integer.parseInt(sharedPreferences.getString(\"key_minNeighbors\", \"3\")); } public int getDetectionFlags(){ return Integer.parseInt(sharedPreferences.getString(\"key_flags\", \"2\")); } public boolean getDetectionMethod(){ return sharedPreferences.getBoolean(\"key_detection_method\", true); } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Recognition/KNearestNeighbor.java","file_content":"package ch.zhaw.facerecognitionlibrary.Recognition; import android.content.Context; import org.opencv.core.CvType; import org.opencv.core.Mat; import org.opencv.ml.KNearest; import java.util.ArrayList; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.FileHelper; import ch.zhaw.facerecognitionlibrary.Helpers.MatName; import ch.zhaw.facerecognitionlibrary.Helpers.OneToOneMap; import ch.zhaw.facerecognitionlibrary.Helpers.PreferencesHelper; public class KNearestNeighbor implements Recognition{ private Context context; private FileHelper fh; private Mat trainingList; private Mat testList; private Mat labels; private int k; private KNearest knn; private List<Integer> labelList; private List<Integer> labelListTest; private OneToOneMap<String,Integer> labelMap; private OneToOneMap<String,Integer> labelMapTest; private String trainingFile; private String testFile; private int method; public KNearestNeighbor(Context context, int method) { this.context = context; fh = new FileHelper(); k = 20; trainingList = new Mat(); testList = new Mat(); this.labelList = new ArrayList<>(); this.labelListTest = new ArrayList<>(); this.labelMap = new OneToOneMap<String, Integer>(); this.labelMapTest = new OneToOneMap<String, Integer>(); trainingFile = \"knn_traininglist.xml\"; testFile = \"knn_testlist.xml\"; this.method = method; if(method == RECOGNITION){ loadFromFile(); } } @Override public boolean train() { if (trainingList.empty()){ return false; } saveToFile(); return true; } @Override public String recognize(Mat img, String expectedLabel) { Mat result = new Mat(); float nearest; img = getFeatureVector(img); addImage(img, expectedLabel, true); nearest = knn.findNearest(img,k,result); return labelMap.getKey((int) nearest); } @Override public void saveToFile() { fh.saveIntegerList(labelList, fh.createLabelFile(fh.KNN_PATH, \"train\")); fh.saveLabelMapToFile(fh.KNN_PATH, labelMap, \"train\"); MatName mtrainingList = new MatName(\"TrainingList\", trainingList); List<MatName> listMat = new ArrayList<MatName>(); listMat.add(mtrainingList); fh.saveMatListToXml(listMat, fh.KNN_PATH, trainingFile); } @Override public void saveTestData() { MatName mTestList = new MatName(\"TestList\", testList); List<MatName> listMat = new ArrayList<>(); listMat.add(mTestList); fh.saveMatListToXml(listMat, fh.KNN_PATH, testFile); fh.saveIntegerList(labelListTest, fh.createLabelFile(fh.KNN_PATH, \"test\")); fh.saveLabelMapToFile(fh.KNN_PATH, labelMapTest, \"test\"); } @Override public void loadFromFile() { MatName mtrainingList = new MatName(\"TrainingList\", trainingList); List<MatName> listMat = new ArrayList<MatName>(); listMat.add(mtrainingList); labelList = fh.loadIntegerList(fh.createLabelFile(fh.KNN_PATH, \"train\")); labelMap = fh.getLabelMapFromFile(fh.KNN_PATH); trainingList = fh.getMatListFromXml(listMat, fh.KNN_PATH, trainingFile).get(0).getMat(); labels = new Mat(labelList.size(), 1, CvType.CV_8UC1); for (int i=0; i<labelList.size(); i++) { Integer label = labelList.get(i); labels.put(i, 0, label); } labels.convertTo(labels, CvType.CV_32F); PreferencesHelper preferencesHelper = new PreferencesHelper(context); k = preferencesHelper.getK(); knn = KNearest.create(); knn.setIsClassifier(true); knn.train(trainingList, 0,labels); } @Override public void addImage(Mat img, String label, boolean featuresAlreadyExtracted) { int iLabel = 0; if(method == TRAINING){ trainingList.push_back(img.reshape(1,1)); if (labelMap.containsKey(label)) { iLabel = labelMap.getValue(label); } else { iLabel = labelMap.size() + 1; labelMap.put(label, iLabel); } labelList.add(iLabel); } else { testList.push_back(img); if (labelMapTest.containsKey(label)){ iLabel = labelMapTest.getValue(label); } else { iLabel = labelMapTest.size() + 1; labelMapTest.put(label, iLabel); } labelListTest.add(iLabel); } } @Override public Mat getFeatureVector(Mat img) { return img.reshape(1,1); } private byte[] stringToByteArray(String s){ return s.getBytes(); } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Recognition/Recognition.java","file_content":"package ch.zhaw.facerecognitionlibrary.Recognition; import org.opencv.core.Mat; public interface Recognition { public static final int TRAINING = 0; public static final int RECOGNITION = 1; public static final int KNN = 0; public static final int SVM = 1; boolean train(); String recognize(Mat img, String expectedLabel); void saveTestData(); void saveToFile(); void loadFromFile(); void addImage(Mat img, String label, boolean featuresAlreadyExtracted); Mat getFeatureVector(Mat img); }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Recognition/SupportVectorMachine.java","file_content":"package ch.zhaw.facerecognitionlibrary.Recognition; import android.content.Context; import org.opencv.core.Mat; import java.io.BufferedReader; import java.io.File; import java.io.FileNotFoundException; import java.io.FileReader; import java.io.FileWriter; import java.io.IOException; import java.nio.Buffer; import java.util.ArrayList; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.FileHelper; import ch.zhaw.facerecognitionlibrary.Helpers.OneToOneMap; import ch.zhaw.facerecognitionlibrary.Helpers.PreferencesHelper; public class SupportVectorMachine implements Recognition { PreferencesHelper preferencesHelper; private FileHelper fh; private File trainingFile; private File predictionFile; private File testFile; private List<String> trainingList; private List<String> testList; private OneToOneMap<String, Integer> labelMap; private OneToOneMap<String, Integer> labelMapTest; private int method; public SupportVectorMachine(Context context, int method) { preferencesHelper = new PreferencesHelper(context); fh = new FileHelper(); trainingFile = fh.createSvmTrainingFile(); predictionFile = fh.createSvmPredictionFile(); testFile = fh.createSvmTestFile(); trainingList = new ArrayList<>(); testList = new ArrayList<>(); labelMap = new OneToOneMap<String, Integer>(); labelMapTest = new OneToOneMap<String, Integer>(); this.method = method; if(method == RECOGNITION){ loadFromFile(); } } public SupportVectorMachine(File trainingFile, File predictionFile){ fh = new FileHelper(); this.trainingFile = trainingFile; this.predictionFile = predictionFile; trainingList = new ArrayList<>(); } static { System.loadLibrary(\"jnilibsvm\"); } private native void jniSvmTrain(String cmd); private native void jniSvmPredict(String cmd); @Override public boolean train() { fh.saveStringList(trainingList, trainingFile); String svmTrainOptions = preferencesHelper.getSvmTrainOptions(); String training = trainingFile.getAbsolutePath(); String model = trainingFile.getAbsolutePath() + \"_model\"; jniSvmTrain(svmTrainOptions + \" \" + training + \" \" + model); saveToFile(); return true; } public boolean trainProbability(String svmTrainOptions) { fh.saveStringList(trainingList, trainingFile); String training = trainingFile.getAbsolutePath(); String model = trainingFile.getAbsolutePath() + \"_model\"; jniSvmTrain(svmTrainOptions + \" -b 1\" + \" \" + training + \" \" + model); return true; } @Override public String recognize(Mat img, String expectedLabel) { try { FileWriter fw = new FileWriter(predictionFile, false); String line = imageToSvmString(img, expectedLabel); testList.add(line); fw.append(line); fw.close(); } catch (IOException e) { e.printStackTrace(); } String prediction = predictionFile.getAbsolutePath(); String model = trainingFile.getAbsolutePath() + \"_model\"; String output = predictionFile.getAbsolutePath() + \"_output\"; jniSvmPredict(prediction + \" \" + model + \" \" + output); try { BufferedReader buf = new BufferedReader(new FileReader(output)); int iLabel = Integer.valueOf(buf.readLine()); buf.close(); return labelMap.getKey(iLabel); } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } return null; } public String recognizeProbability(String svmString){ try { FileWriter fw = new FileWriter(predictionFile, false); fw.append(String.valueOf(1) + svmString); fw.close(); } catch (IOException e) { e.printStackTrace(); } String prediction = predictionFile.getAbsolutePath(); String model = trainingFile.getAbsolutePath() + \"_model\"; String output = predictionFile.getAbsolutePath() + \"_output\"; jniSvmPredict(\"-b 1 \" + prediction + \" \" + model + \" \" + output); try { BufferedReader buf = new BufferedReader(new FileReader(output)); String probability = buf.readLine() + \"\\n\"; probability = probability + buf.readLine(); buf.close(); return probability; } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } return null; } @Override public void saveToFile() { if(method == TRAINING){ fh.saveLabelMapToFile(fh.SVM_PATH, labelMap, \"train\"); } else { fh.saveLabelMapToFile(fh.SVM_PATH, labelMapTest, \"test\"); } } @Override public void saveTestData(){ fh.saveStringList(testList, testFile); } @Override public void loadFromFile() { labelMap = fh.getLabelMapFromFile(fh.SVM_PATH); } @Override public void addImage(Mat img, String label, boolean featuresAlreadyExtracted) { if(method == TRAINING){ trainingList.add(imageToSvmString(img, label)); } else { testList.add(imageToSvmString(img, label)); } } public void addImage(String svmString, String label) { trainingList.add(label + \" \" + svmString); } public Mat getFeatureVector(Mat img){ return img.reshape(1,1); } private String imageToSvmString(Mat img, String label){ int iLabel = 0; if(method == TRAINING){ if (labelMap.containsKey(label)) { iLabel = labelMap.getValue(label); } else { iLabel = labelMap.size() + 1; labelMap.put(label, iLabel); } } else { if (labelMapTest.containsKey(label)){ iLabel = labelMapTest.getValue(label); } else { iLabel = labelMapTest.size() + 1; labelMapTest.put(label, iLabel); } } String result = String.valueOf(iLabel); return result + getSvmString(img); } public String getSvmString(Mat img){ img = getFeatureVector(img); String result = \"\"; for (int i=0; i<img.cols(); i++){ result = result + \" \" + i + \":\" + img.get(0,i)[0]; } return result; } }"}]}}
{"project_id":222,"chunk_id":0,"content":{"main_file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Recognition/RecognitionFactory.java","main_file_content":"package ch.zhaw.facerecognitionlibrary.Recognition; import android.content.Context; import android.content.res.Resources; import ch.zhaw.facerecognitionlibrary.R; public class RecognitionFactory { public static Recognition getRecognitionAlgorithm(Context context, int method, String algorithm) { Resources resources = context.getResources(); if (algorithm.equals(resources.getString(R.string.eigenfaces))){ return new Eigenfaces(context, method); } else if (algorithm.equals(resources.getString(R.string.imageReshaping))){ return new SupportVectorMachine(context, method); } else if (algorithm.equals(resources.getString(R.string.tensorflow))){ return new TensorFlow(context, method); } else if (algorithm.equals(resources.getString(R.string.caffe))) { return new Caffe(context, method); } else { return null; } } }","dependencies":[{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Recognition/Caffe.java","file_content":"package ch.zhaw.facerecognitionlibrary.Recognition; import android.content.Context; import android.os.ParcelFormatException; import ch.zhaw.facerecognitionlibrary.Helpers.CaffeMobile; import org.opencv.core.Mat; import org.opencv.utils.Converters; import java.util.ArrayList; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.FileHelper; import ch.zhaw.facerecognitionlibrary.Helpers.MatName; import ch.zhaw.facerecognitionlibrary.Helpers.PreferencesHelper; public class Caffe implements Recognition { private CaffeMobile caffe; private Recognition rec; private FileHelper fh; String layer; static { System.loadLibrary(\"caffe\"); System.loadLibrary(\"caffe_jni\"); } public Caffe(Context context, int method) { fh = new FileHelper(); String dataPath = fh.CAFFE_PATH; PreferencesHelper preferencesHelper = new PreferencesHelper(context); String modelFile = preferencesHelper.getCaffeModelFile(); String weightsFile = preferencesHelper.getCaffeWeightsFile(); layer = preferencesHelper.getCaffeOutputLayer(); float[] meanValues = preferencesHelper.getCaffeMeanValues(); Boolean classificationMethod = preferencesHelper.getClassificationMethodTFCaffe(); caffe = new CaffeMobile(); caffe.setNumThreads(4); caffe.loadModel(dataPath + modelFile, dataPath + weightsFile); caffe.setMean(meanValues); if(classificationMethod){ rec = new SupportVectorMachine(context, method); } else { rec = new KNearestNeighbor(context, method); } } @Override public boolean train() { return rec.train(); } @Override public String recognize(Mat img, String expectedLabel) { return rec.recognize(getFeatureVector(img), expectedLabel); } @Override public void saveToFile() { } @Override public void saveTestData() { rec.saveTestData(); } @Override public void loadFromFile() { } @Override public void addImage(Mat img, String label, boolean featuresAlreadyExtracted) { if (featuresAlreadyExtracted){ rec.addImage(img, label, true); } else { rec.addImage(getFeatureVector(img), label, true); } } public Mat getFeatureVector(Mat img){ float[][] vector = caffe.getRepresentationLayer(saveMatToImage(img), layer); List<Float> fVector = new ArrayList<>(); for(float f : vector[0]){ fVector.add(f); } return Converters.vector_float_to_Mat(fVector); } private String saveMatToImage(Mat img){ MatName m = new MatName(\"caffe_vector\", img); return fh.saveMatToImage(m, fh.CAFFE_PATH); } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Recognition/Eigenfaces.java","file_content":"package ch.zhaw.facerecognitionlibrary.Recognition; import android.content.Context; import org.opencv.core.Core; import org.opencv.core.CvType; import org.opencv.core.Mat; import java.util.ArrayList; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.FileHelper; import ch.zhaw.facerecognitionlibrary.Helpers.MatName; import ch.zhaw.facerecognitionlibrary.Helpers.OneToOneMap; import ch.zhaw.facerecognitionlibrary.Helpers.PreferencesHelper; public class Eigenfaces implements Recognition { private Context context; private Mat Gamma = new Mat(); private Mat Psi = new Mat(); private Mat Phi = new Mat(); private Mat eigVectors = new Mat(); private Mat Omega = new Mat(); private Mat testList = new Mat(); private List<Integer> labelList; private List<Integer> labelListTest; private OneToOneMap<String,Integer> labelMap; private OneToOneMap<String,Integer> labelMapTest; private String filename = \"eigenfaces.xml\"; private int method; public Eigenfaces(Context context, int method) { this.context = context; this.labelList = new ArrayList<>(); this.labelListTest = new ArrayList<>(); this.labelMap = new OneToOneMap<String, Integer>(); this.labelMapTest = new OneToOneMap<String, Integer>(); this.method = method; if(method == RECOGNITION){ loadFromFile(); } } public boolean train(){ if (Gamma.empty()){ return false; } computePsi(); computePhi(); computeEigVectors(); Omega = getFeatureVector(Phi); saveToFile(); return true; } public String recognize(Mat img, String expectedLabel){ img = img.reshape(1,1); img.convertTo(img, CvType.CV_32F); Core.subtract(img, Psi, img); Mat projected = getFeatureVector(img); img.convertTo(img, CvType.CV_8U); addImage(projected, expectedLabel, true); Mat distance = new Mat(Omega.rows(), 1, CvType.CV_64FC1); for (int i=0; i<Omega.rows(); i++){ double dist = Core.norm(projected.row(0), Omega.row(i), Core.NORM_L2); distance.put(i, 0, dist); } Mat sortedDist = new Mat(Omega.rows(), 1, CvType.CV_8UC1); Core.sortIdx(distance, sortedDist, Core.SORT_EVERY_COLUMN + Core.SORT_ASCENDING); int index = (int)(sortedDist.get(0,0)[0]); return labelMap.getKey(labelList.get(index)); } private void computePsi(){ Core.reduce(Gamma, Psi, 0, Core.REDUCE_AVG); } private void computePhi(){ Mat Psi_repeated = new Mat(); Core.repeat(Psi, Gamma.rows(), 1, Psi_repeated); Core.subtract(Gamma, Psi_repeated, Phi); } private void computeEigVectors(){ PreferencesHelper preferencesHelper = new PreferencesHelper(context); float pca_threshold = preferencesHelper.getPCAThreshold(); Core.PCACompute(Phi, Psi, eigVectors, pca_threshold); } public Mat getFeatureVector(Mat original){ Mat projected = new Mat(); Core.PCAProject(original, Psi, eigVectors, projected); return projected; } public void saveToFile(){ FileHelper fh = new FileHelper(); fh.saveIntegerList(labelList, fh.createLabelFile(fh.EIGENFACES_PATH, \"train\")); fh.saveLabelMapToFile(fh.EIGENFACES_PATH, labelMap, \"train\"); MatName mOmega = new MatName(\"Omega\", Omega); MatName mPsi = new MatName(\"Psi\", Psi); MatName mEigVectors = new MatName(\"eigVectors\", eigVectors); MatName mPhi = new MatName(\"Phi\", Phi); List<MatName> listMat = new ArrayList<MatName>(); listMat.add(mOmega); listMat.add(mPsi); listMat.add(mEigVectors); listMat.add(mPhi); fh.saveMatListToXml(listMat, fh.EIGENFACES_PATH, filename); } @Override public void saveTestData() { FileHelper fh = new FileHelper(); fh.saveIntegerList(labelListTest, fh.createLabelFile(fh.EIGENFACES_PATH, \"test\")); fh.saveLabelMapToFile(fh.EIGENFACES_PATH, labelMapTest, \"test\"); MatName mTestList = new MatName(\"TestList\", testList); List<MatName> listMat = new ArrayList<>(); listMat.add(mTestList); fh.saveMatListToXml(listMat, fh.EIGENFACES_PATH, \"testlist.xml\"); } public void loadFromFile(){ FileHelper fh = new FileHelper(); MatName mOmega = new MatName(\"Omega\", Omega); MatName mPsi = new MatName(\"Psi\", Psi); MatName mEigVectors = new MatName(\"eigVectors\", eigVectors); List<MatName> listMat = new ArrayList<MatName>(); listMat.add(mOmega); listMat.add(mPsi); listMat.add(mEigVectors); listMat = fh.getMatListFromXml(listMat, fh.EIGENFACES_PATH, filename); for (MatName mat : listMat){ switch (mat.getName()){ case \"Omega\": Omega = mat.getMat(); break; case \"Psi\": Psi = mat.getMat(); break; case \"eigVectors\": eigVectors = mat.getMat(); break; } } labelList = fh.loadIntegerList(fh.createLabelFile(fh.EIGENFACES_PATH, \"train\")); labelMap = fh.getLabelMapFromFile(fh.EIGENFACES_PATH); } public void addImage(Mat img, String label, boolean featuresAlreadyExtracted) { int iLabel = 0; if(method == TRAINING){ Gamma.push_back(img.reshape(1,1)); if (labelMap.containsKey(label)) { iLabel = labelMap.getValue(label); } else { iLabel = labelMap.size() + 1; labelMap.put(label, iLabel); } labelList.add(iLabel); } else { testList.push_back(img); if (labelMapTest.containsKey(label)){ iLabel = labelMapTest.getValue(label); } else { iLabel = labelMapTest.size() + 1; labelMapTest.put(label, iLabel); } labelListTest.add(iLabel); } } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Recognition/Recognition.java","file_content":"package ch.zhaw.facerecognitionlibrary.Recognition; import org.opencv.core.Mat; public interface Recognition { public static final int TRAINING = 0; public static final int RECOGNITION = 1; public static final int KNN = 0; public static final int SVM = 1; boolean train(); String recognize(Mat img, String expectedLabel); void saveTestData(); void saveToFile(); void loadFromFile(); void addImage(Mat img, String label, boolean featuresAlreadyExtracted); Mat getFeatureVector(Mat img); }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Recognition/SupportVectorMachine.java","file_content":"package ch.zhaw.facerecognitionlibrary.Recognition; import android.content.Context; import org.opencv.core.Mat; import java.io.BufferedReader; import java.io.File; import java.io.FileNotFoundException; import java.io.FileReader; import java.io.FileWriter; import java.io.IOException; import java.nio.Buffer; import java.util.ArrayList; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.FileHelper; import ch.zhaw.facerecognitionlibrary.Helpers.OneToOneMap; import ch.zhaw.facerecognitionlibrary.Helpers.PreferencesHelper; public class SupportVectorMachine implements Recognition { PreferencesHelper preferencesHelper; private FileHelper fh; private File trainingFile; private File predictionFile; private File testFile; private List<String> trainingList; private List<String> testList; private OneToOneMap<String, Integer> labelMap; private OneToOneMap<String, Integer> labelMapTest; private int method; public SupportVectorMachine(Context context, int method) { preferencesHelper = new PreferencesHelper(context); fh = new FileHelper(); trainingFile = fh.createSvmTrainingFile(); predictionFile = fh.createSvmPredictionFile(); testFile = fh.createSvmTestFile(); trainingList = new ArrayList<>(); testList = new ArrayList<>(); labelMap = new OneToOneMap<String, Integer>(); labelMapTest = new OneToOneMap<String, Integer>(); this.method = method; if(method == RECOGNITION){ loadFromFile(); } } public SupportVectorMachine(File trainingFile, File predictionFile){ fh = new FileHelper(); this.trainingFile = trainingFile; this.predictionFile = predictionFile; trainingList = new ArrayList<>(); } static { System.loadLibrary(\"jnilibsvm\"); } private native void jniSvmTrain(String cmd); private native void jniSvmPredict(String cmd); @Override public boolean train() { fh.saveStringList(trainingList, trainingFile); String svmTrainOptions = preferencesHelper.getSvmTrainOptions(); String training = trainingFile.getAbsolutePath(); String model = trainingFile.getAbsolutePath() + \"_model\"; jniSvmTrain(svmTrainOptions + \" \" + training + \" \" + model); saveToFile(); return true; } public boolean trainProbability(String svmTrainOptions) { fh.saveStringList(trainingList, trainingFile); String training = trainingFile.getAbsolutePath(); String model = trainingFile.getAbsolutePath() + \"_model\"; jniSvmTrain(svmTrainOptions + \" -b 1\" + \" \" + training + \" \" + model); return true; } @Override public String recognize(Mat img, String expectedLabel) { try { FileWriter fw = new FileWriter(predictionFile, false); String line = imageToSvmString(img, expectedLabel); testList.add(line); fw.append(line); fw.close(); } catch (IOException e) { e.printStackTrace(); } String prediction = predictionFile.getAbsolutePath(); String model = trainingFile.getAbsolutePath() + \"_model\"; String output = predictionFile.getAbsolutePath() + \"_output\"; jniSvmPredict(prediction + \" \" + model + \" \" + output); try { BufferedReader buf = new BufferedReader(new FileReader(output)); int iLabel = Integer.valueOf(buf.readLine()); buf.close(); return labelMap.getKey(iLabel); } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } return null; } public String recognizeProbability(String svmString){ try { FileWriter fw = new FileWriter(predictionFile, false); fw.append(String.valueOf(1) + svmString); fw.close(); } catch (IOException e) { e.printStackTrace(); } String prediction = predictionFile.getAbsolutePath(); String model = trainingFile.getAbsolutePath() + \"_model\"; String output = predictionFile.getAbsolutePath() + \"_output\"; jniSvmPredict(\"-b 1 \" + prediction + \" \" + model + \" \" + output); try { BufferedReader buf = new BufferedReader(new FileReader(output)); String probability = buf.readLine() + \"\\n\"; probability = probability + buf.readLine(); buf.close(); return probability; } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } return null; } @Override public void saveToFile() { if(method == TRAINING){ fh.saveLabelMapToFile(fh.SVM_PATH, labelMap, \"train\"); } else { fh.saveLabelMapToFile(fh.SVM_PATH, labelMapTest, \"test\"); } } @Override public void saveTestData(){ fh.saveStringList(testList, testFile); } @Override public void loadFromFile() { labelMap = fh.getLabelMapFromFile(fh.SVM_PATH); } @Override public void addImage(Mat img, String label, boolean featuresAlreadyExtracted) { if(method == TRAINING){ trainingList.add(imageToSvmString(img, label)); } else { testList.add(imageToSvmString(img, label)); } } public void addImage(String svmString, String label) { trainingList.add(label + \" \" + svmString); } public Mat getFeatureVector(Mat img){ return img.reshape(1,1); } private String imageToSvmString(Mat img, String label){ int iLabel = 0; if(method == TRAINING){ if (labelMap.containsKey(label)) { iLabel = labelMap.getValue(label); } else { iLabel = labelMap.size() + 1; labelMap.put(label, iLabel); } } else { if (labelMapTest.containsKey(label)){ iLabel = labelMapTest.getValue(label); } else { iLabel = labelMapTest.size() + 1; labelMapTest.put(label, iLabel); } } String result = String.valueOf(iLabel); return result + getSvmString(img); } public String getSvmString(Mat img){ img = getFeatureVector(img); String result = \"\"; for (int i=0; i<img.cols(); i++){ result = result + \" \" + i + \":\" + img.get(0,i)[0]; } return result; } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Recognition/TensorFlow.java","file_content":"package ch.zhaw.facerecognitionlibrary.Recognition; import android.content.Context; import android.graphics.Bitmap; import org.opencv.android.Utils; import org.opencv.core.Mat; import org.opencv.core.Size; import org.opencv.imgproc.Imgproc; import org.opencv.utils.Converters; import org.tensorflow.contrib.android.TensorFlowInferenceInterface; import java.io.File; import java.util.ArrayList; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.FileHelper; import ch.zhaw.facerecognitionlibrary.Helpers.PreferencesHelper; public class TensorFlow implements Recognition { private String inputLayer; private String outputLayer; private int inputSize; private int channels; private int imageMean; private int imageStd; private int outputSize; private Recognition rec; private TensorFlowInferenceInterface inferenceInterface; private boolean logStats = false; public TensorFlow(Context context, int method) { String dataPath = FileHelper.TENSORFLOW_PATH; PreferencesHelper preferencesHelper = new PreferencesHelper(context); inputSize = preferencesHelper.getTensorFlowInputSize(); channels = preferencesHelper.getTensorFlowInputChannels(); imageMean = preferencesHelper.getTensorFlowImageMean(); imageStd = preferencesHelper.getTensorFlowImageStd(); outputSize = preferencesHelper.getTensorFlowOutputSize(); inputLayer = preferencesHelper.getTensorFlowInputLayer(); outputLayer = preferencesHelper.getTensorFlowOutputLayer(); String modelFile = preferencesHelper.getTensorFlowModelFile(); Boolean classificationMethod = preferencesHelper.getClassificationMethodTFCaffe(); File file = new File(dataPath + modelFile); if(file.exists()){ inferenceInterface = new TensorFlowInferenceInterface(context.getAssets(), dataPath + modelFile); } else { inferenceInterface = new TensorFlowInferenceInterface(context.getAssets(), modelFile); } if(classificationMethod){ rec = new SupportVectorMachine(context, method); } else { rec = new KNearestNeighbor(context, method); } } public TensorFlow(Context context, int inputSize, int outputSize, String inputLayer, String outputLayer, String modelFile){ this.inputSize = inputSize; this.outputSize = outputSize; this.inputLayer = inputLayer; this.outputLayer = outputLayer; inferenceInterface = new TensorFlowInferenceInterface(context.getAssets(), modelFile); } @Override public boolean train() { return rec.train(); } @Override public String recognize(Mat img, String expectedLabel) { return rec.recognize(getFeatureVector(img), expectedLabel); } @Override public void saveToFile() { } @Override public void loadFromFile() { } @Override public void saveTestData() { rec.saveTestData(); } @Override public void addImage(Mat img, String label, boolean featuresAlreadyExtracted) { if (featuresAlreadyExtracted){ rec.addImage(img, label, true); } else { rec.addImage(getFeatureVector(img), label, true); } } public Mat getFeatureVector(Mat img){ Imgproc.resize(img, img, new Size(inputSize, inputSize)); inferenceInterface.feed(inputLayer, getPixels(img), 1, inputSize, inputSize, channels); inferenceInterface.run(new String[]{outputLayer}, logStats); float[] outputs = new float[outputSize]; inferenceInterface.fetch(outputLayer, outputs); List<Float> fVector = new ArrayList<>(); for(float o : outputs){ fVector.add(o); } return Converters.vector_float_to_Mat(fVector); } private float[] getPixels(Mat img){ Bitmap bmp = Bitmap.createBitmap(inputSize, inputSize, Bitmap.Config.ARGB_8888); Utils.matToBitmap(img, bmp); int[] intValues = new int[inputSize * inputSize]; bmp.getPixels(intValues, 0, inputSize, 0, 0, inputSize, inputSize); float[] floatValues = new float[inputSize * inputSize * channels]; for (int i = 0; i < intValues.length; ++i) { final int val = intValues[i]; floatValues[i * 3 + 0] = (((float)((val >> 16) & 0xFF)) - imageMean) / imageStd; floatValues[i * 3 + 1] = (((float)((val >> 8) & 0xFF)) - imageMean) / imageStd; floatValues[i * 3 + 2] = (((float)(val & 0xFF)) - imageMean) / imageStd; } return floatValues; } }"}]}}
{"project_id":222,"chunk_id":0,"content":{"main_file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Recognition/Caffe.java","main_file_content":"package ch.zhaw.facerecognitionlibrary.Recognition; import android.content.Context; import android.os.ParcelFormatException; import ch.zhaw.facerecognitionlibrary.Helpers.CaffeMobile; import org.opencv.core.Mat; import org.opencv.utils.Converters; import java.util.ArrayList; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.FileHelper; import ch.zhaw.facerecognitionlibrary.Helpers.MatName; import ch.zhaw.facerecognitionlibrary.Helpers.PreferencesHelper; public class Caffe implements Recognition { private CaffeMobile caffe; private Recognition rec; private FileHelper fh; String layer; static { System.loadLibrary(\"caffe\"); System.loadLibrary(\"caffe_jni\"); } public Caffe(Context context, int method) { fh = new FileHelper(); String dataPath = fh.CAFFE_PATH; PreferencesHelper preferencesHelper = new PreferencesHelper(context); String modelFile = preferencesHelper.getCaffeModelFile(); String weightsFile = preferencesHelper.getCaffeWeightsFile(); layer = preferencesHelper.getCaffeOutputLayer(); float[] meanValues = preferencesHelper.getCaffeMeanValues(); Boolean classificationMethod = preferencesHelper.getClassificationMethodTFCaffe(); caffe = new CaffeMobile(); caffe.setNumThreads(4); caffe.loadModel(dataPath + modelFile, dataPath + weightsFile); caffe.setMean(meanValues); if(classificationMethod){ rec = new SupportVectorMachine(context, method); } else { rec = new KNearestNeighbor(context, method); } } @Override public boolean train() { return rec.train(); } @Override public String recognize(Mat img, String expectedLabel) { return rec.recognize(getFeatureVector(img), expectedLabel); } @Override public void saveToFile() { } @Override public void saveTestData() { rec.saveTestData(); } @Override public void loadFromFile() { } @Override public void addImage(Mat img, String label, boolean featuresAlreadyExtracted) { if (featuresAlreadyExtracted){ rec.addImage(img, label, true); } else { rec.addImage(getFeatureVector(img), label, true); } } public Mat getFeatureVector(Mat img){ float[][] vector = caffe.getRepresentationLayer(saveMatToImage(img), layer); List<Float> fVector = new ArrayList<>(); for(float f : vector[0]){ fVector.add(f); } return Converters.vector_float_to_Mat(fVector); } private String saveMatToImage(Mat img){ MatName m = new MatName(\"caffe_vector\", img); return fh.saveMatToImage(m, fh.CAFFE_PATH); } }","dependencies":[{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/CaffeMobile.java","file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; public class CaffeMobile { public native void setNumThreads(int numThreads); public native void enableLog(boolean enabled); public native int loadModel(String modelPath, String weightsPath); private native void setMeanWithMeanFile(String meanFile); private native void setMeanWithMeanValues(float[] meanValues); public native void setScale(float scale); public native float[] getConfidenceScore(String imgPath); public native int[] predictImage(String imgPath, int k); public native float[][] extractFeatures(String imgPath, String blobNames); public void setMean(float[] meanValues) { setMeanWithMeanValues(meanValues); } public void setMean(String meanFile) { setMeanWithMeanFile(meanFile); } public int[] predictImage(String imgPath) { return predictImage(imgPath, 1); } public float[][] getRepresentationLayer(String imgPath, String layer){ return extractFeatures(imgPath, layer); } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/FileHelper.java","file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import android.graphics.Bitmap; import android.os.Environment; import org.opencv.android.Utils; import org.opencv.core.Mat; import java.io.BufferedReader; import java.io.File; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.FileReader; import java.io.FileWriter; import java.io.IOException; import java.text.SimpleDateFormat; import java.util.ArrayList; import java.util.List; import java.util.Map; import java.util.Set; import ch.zhaw.facerecognitionlibrary.PreProcessor.PreProcessorFactory; public class FileHelper { public static String getFolderPath() { return FOLDER_PATH; } private static final String FOLDER_PATH = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES) + \"/facerecognition\"; public static final String TRAINING_PATH = FOLDER_PATH + \"/training/\"; public static final String TEST_PATH = FOLDER_PATH + \"/test/\"; public static final String DETECTION_TEST_PATH = FOLDER_PATH + \"/detection_test/\"; public static final String DATA_PATH = FOLDER_PATH + \"/data/\"; public static final String RESULTS_PATH = FOLDER_PATH + \"/results/\"; public static final String EIGENFACES_PATH = DATA_PATH + \"Eigenfaces/\"; public static final String SVM_PATH = DATA_PATH + \"SVM/\"; public static final String KNN_PATH = DATA_PATH + \"KNN/\"; public static final String CAFFE_PATH = DATA_PATH + \"Caffe/\"; public static final String TENSORFLOW_PATH = DATA_PATH + \"TensorFlow/\"; private static final String SEPARATOR = \";\"; private String name = \"\"; public FileHelper(String name) { this.name = name; } public FileHelper(){} public void createDataFolderIfNotExsiting(){ File folder = new File(DATA_PATH); folder.mkdir(); } private void createFolderIfNotExisting(String path){ File folder = new File(path); folder.mkdir(); } public static boolean isFileAnImage(File file){ if (file.toString().endsWith(\".jpg\") || file.toString().endsWith(\".jpeg\") || file.toString().endsWith(\".gif\") || file.toString().endsWith(\".png\")){ return true; } else { return false; } } private File[] getListOfFiles(String path){ File directory = new File(path + name); if(directory.exists()){ return directory.listFiles(); } else { return new File[]{}; } } public File[] getTrainingList(){ return getListOfFiles(TRAINING_PATH); } public File[] getTestList(){ return getListOfFiles(TEST_PATH); } public File[] getDetectionTestList() { return getListOfFiles(DETECTION_TEST_PATH); } public void saveMatListToXml(List<MatName> matList, String path, String filename){ createFolderIfNotExisting(path); MatXml matXml = new MatXml(); matXml.create(path + filename); for(MatName mat : matList){ matXml.writeMat(mat.getName(), mat.getMat()); } matXml.release(); } public List<MatName> getMatListFromXml(List<MatName> matList, String path, String filename){ String filepath = path + filename; MatXml matXml = new MatXml(); File file = new File(filepath); if (file.exists()){ matXml.open(filepath); for (MatName mat : matList){ mat.setMat(matXml.readMat(mat.getName())); } } return matList; } public String saveMatToImage(MatName m, String path){ new File(path).mkdirs(); String fullpath = path + m.getName() + \".png\"; Mat mat = m.getMat(); Bitmap bitmap = Bitmap.createBitmap(mat.cols(), mat.rows(), Bitmap.Config.ARGB_8888); Utils.matToBitmap(mat, bitmap); File file = new File(fullpath); try { FileOutputStream os = new FileOutputStream(file); bitmap.compress(Bitmap.CompressFormat.PNG, 100, os); os.close(); } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } return fullpath; } public void saveBitmapToImage(Bitmap bmp){ File file = new File(DATA_PATH + \"bitmap.png\"); try { FileOutputStream os = new FileOutputStream(file); bmp.compress(Bitmap.CompressFormat.PNG, 100, os); os.close(); } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } } public File createSvmTrainingFile(){ createFolderIfNotExisting(SVM_PATH); String filepath = SVM_PATH + \"svm_train\"; File trainingFile = new File(filepath); return trainingFile; } public File createSvmPredictionFile(){ String filepath = SVM_PATH + \"svm_predict\"; File predictionFile = new File(filepath); return predictionFile; } public File createSvmTestFile(){ String filepath = SVM_PATH + \"svm_test\"; File testFile = new File(filepath); return testFile; } public File createLabelFile(String path, String name){ createFolderIfNotExisting(path); String filepath = path + \"label_\" + name; File trainingFile = new File(filepath); return trainingFile; } public void saveLabelMapToFile(String path, OneToOneMap<String, Integer> labelMap, String name){ createFolderIfNotExisting(path); String filepath = path + \"labelMap_\" + name; try { FileWriter fw = new FileWriter(filepath); for (String s : (Set<String>)labelMap.getKeyToValMap().keySet()){ fw.append(s + SEPARATOR + labelMap.getValue(s) + \"\\n\"); } fw.close(); } catch (IOException e) { e.printStackTrace(); } } public void saveResultsToFile(Map<String, ?> map, double accuracy, double accuracy_reference, double accuracy_deviation, double robustness, int duration, List<String> results){ String timestamp = new SimpleDateFormat(\"ddMMyyyyHHmm\").format(new java.util.Date()); createFolderIfNotExisting(RESULTS_PATH); String filepath = RESULTS_PATH + \"Accuracy_\" + String.format(\"%.2f\", accuracy * 100) + \"_\" + timestamp + \".txt\"; try { FileWriter fw = new FileWriter(filepath); for (Map.Entry entry : map.entrySet()){ fw.append(entry.getKey() + \": \" + entry.getValue() + \"\\n\"); } fw.append(\"Accuracy: \" + accuracy * 100 + \"%\\n\"); fw.append(\"Accuracy reference: \" + accuracy_reference * 100 + \"%\\n\"); fw.append(\"Accuracy deviation: \" + accuracy_deviation * 100 + \"%\\n\"); fw.append(\"Robustness: \" + robustness * 100 + \"%\\n\"); fw.append(\"Duration per image: \" + duration + \"ms\\n\"); for (String result : results){ fw.append(result + \"\\n\"); } fw.close(); } catch (IOException e) { e.printStackTrace(); } } public void saveResultsToFile(Map<String, ?> map, double accuracy, int duration, List<String> results){ String timestamp = new SimpleDateFormat(\"ddMMyyyyHHmm\").format(new java.util.Date()); createFolderIfNotExisting(RESULTS_PATH); String filepath = RESULTS_PATH + \"Accuracy_\" + String.format(\"%.2f\", accuracy * 100) + \"_\" + timestamp + \".txt\"; try { FileWriter fw = new FileWriter(filepath); for (Map.Entry entry : map.entrySet()){ fw.append(entry.getKey() + \": \" + entry.getValue() + \"\\n\"); } fw.append(\"Accuracy: \" + accuracy * 100 + \"%\\n\"); fw.append(\"Duration per image: \" + duration + \"ms\\n\"); for (String result : results){ fw.append(result + \"\\n\"); } fw.close(); } catch (IOException e) { e.printStackTrace(); } } public OneToOneMap<String, Integer> getLabelMapFromFile(String path){ String filepath = path + \"labelMap_train\"; OneToOneMap<String, Integer> labelMap = new OneToOneMap<>(); try { BufferedReader buf = new BufferedReader(new FileReader(filepath)); String line = buf.readLine(); while (line != null){ String[] split = line.split(SEPARATOR); labelMap.put(split[0], Integer.valueOf(split[1])); line = buf.readLine(); } buf.close(); } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } return labelMap; } public void saveStringList(List<String> list, File file){ try { FileWriter fw = new FileWriter(file, false); for (String line : list){ fw.append(line + \"\\n\"); } fw.close(); } catch (IOException e) { e.printStackTrace(); } } public void saveIntegerList(List<Integer> list, File file){ try { FileWriter fw = new FileWriter(file, false); for (int line : list){ fw.append(Integer.toString(line)+ \"\\n\"); } fw.close(); } catch (IOException e) { e.printStackTrace(); } } public List<String> loadStringList(File file){ List<String> list = new ArrayList<>(); try { FileReader fr = new FileReader(file); BufferedReader br = new BufferedReader(fr); String line; while ((line = br.readLine()) != null){ list.add(line); } br.close(); fr.close(); } catch (IOException e) { e.printStackTrace(); } return list; } public List<Integer> loadIntegerList(File file){ List<Integer> list = new ArrayList<>(); try { FileReader fr = new FileReader(file); BufferedReader br = new BufferedReader(fr); Integer line = 0; String sLine; while ((sLine = br.readLine()) != null){ line = Integer.parseInt(sLine); list.add(line); } br.close(); fr.close(); } catch (IOException e) { e.printStackTrace(); } return list; } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/MatName.java","file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import org.opencv.core.Mat; public class MatName { private String name; private Mat mat; public MatName(String name, Mat mat){ this.name = name; this.mat = mat; } public String getName() { return name; } public Mat getMat() { return mat; } public void setMat(Mat mat) { this.mat = mat; } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/PreferencesHelper.java","file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import android.content.Context; import android.content.SharedPreferences; import android.content.res.Resources; import android.preference.PreferenceManager; import java.util.ArrayList; import java.util.Collections; import java.util.List; import java.util.Set; import ch.zhaw.facerecognitionlibrary.R; public class PreferencesHelper { public enum Usage {RECOGNITION, DETECTION}; SharedPreferences sharedPreferences; Resources resources; public PreferencesHelper(Context context){ sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context); resources = context.getResources(); } public String getClassificationMethod(){ return sharedPreferences.getString(\"key_classification_method\", resources.getString(R.string.eigenfaces)); } public boolean getClassificationMethodTFCaffe(){ return sharedPreferences.getBoolean(\"key_classificationMethodTFCaffe\", true); } public float getGamma(){ return Float.valueOf(sharedPreferences.getString(\"key_gamma\", resources.getString(R.string.gamma))); } public double[] getSigmas(){ String[] sigmasString = sharedPreferences.getString(\"key_sigmas\", resources.getString(R.string.sigmas)).split(\",\"); if(sigmasString.length != 2){ sigmasString = resources.getString(R.string.sigmas).split(\",\"); } double[] sigmas = new double[3]; for(int i=0; i<2; i++){ sigmas[i] = Double.parseDouble(sigmasString[i]); } return sigmas; } public boolean getEyeDetectionEnabled(){ return sharedPreferences.getBoolean(\"key_eye_detection\", true); } public List<String> getStandardPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_standard_pre\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_standard_pre\"); } else { return new ArrayList<>(); } } public List<String> getBrightnessPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_brightness\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_brightness\"); } else { return new ArrayList<>(); } } public List<String> getContoursPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_contours\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_contours\"); } else { return new ArrayList<>(); } } public List<String> getContrastPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_contrast\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_contrast\"); } else { return new ArrayList<>(); } } public List<String> getStandardPostprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_standard_post\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_standard_post\"); } else { return new ArrayList<>(); } } private List<String> getPreferenceList(String key){ Set<String> set = sharedPreferences.getStringSet(key, null); ArrayList<String> list; if(set != null) { list = new ArrayList<String>(set); Collections.sort(list); return list; } else { return new ArrayList<>(); } } public String getCaffeModelFile(){ return sharedPreferences.getString(\"key_modelFileCaffe\", resources.getString(R.string.modelFileCaffe)); } public String getCaffeWeightsFile(){ return sharedPreferences.getString(\"key_weightsFileCaffe\", resources.getString(R.string.weightsFileCaffe)); } public String getCaffeOutputLayer(){ return sharedPreferences.getString(\"key_outputLayerCaffe\", resources.getString(R.string.weightsFileCaffe)); } public float[] getCaffeMeanValues(){ String[] meanValuesString = sharedPreferences.getString(\"key_meanValuesCaffe\", resources.getString(R.string.meanValuesCaffe)).split(\",\"); if(meanValuesString.length != 3){ meanValuesString = resources.getString(R.string.meanValuesCaffe).split(\",\"); } float[] meanValues = new float[3]; for(int i=0; i<3; i++){ meanValues[i] = Float.parseFloat(meanValuesString[i]); } return meanValues; } public String getSvmTrainOptions(){ return sharedPreferences.getString(\"key_svmTrainOptions\", \"-t 0 \"); } public int getK(){ return Integer.valueOf(sharedPreferences.getString(\"key_K\", \"20\")); } public int getN(){ return Integer.valueOf(sharedPreferences.getString(\"key_N\", \"25\")); } public int getFaceSize(){ return Integer.valueOf(sharedPreferences.getString(\"key_faceSize\", \"160\")); } public int getTensorFlowInputSize(){ return Integer.valueOf(sharedPreferences.getString(\"key_inputSize\", \"160\")); } public int getTensorFlowInputChannels(){ return Integer.valueOf(sharedPreferences.getString(\"key_inputChannels\", \"3\")); } public int getTensorFlowImageMean(){ return Integer.valueOf(sharedPreferences.getString(\"key_imageMean\", \"128\")); } public int getTensorFlowImageStd(){ return Integer.valueOf(sharedPreferences.getString(\"key_imageStd\", \"128\")); } public int getTensorFlowOutputSize(){ return Integer.valueOf(sharedPreferences.getString(\"key_outputSize\", \"128\")); } public String getTensorFlowInputLayer(){ return sharedPreferences.getString(\"key_inputLayer\", \"input\"); } public String getTensorFlowOutputLayer(){ return sharedPreferences.getString(\"key_outputLayer\", \"embeddings\"); } public String getTensorFlowModelFile(){ return sharedPreferences.getString(\"key_modelFileTensorFlow\", \"facenet.pb\"); } public float getPCAThreshold(){ return Float.valueOf(sharedPreferences.getString(\"key_pca_threshold\", \"0.98f\")); } public String getFaceCascadeFile(){ return sharedPreferences.getString(\"key_face_cascade_file\", resources.getString(R.string.haarcascade_alt2)); } public String getLefteyeCascadeFile(){ return sharedPreferences.getString(\"key_lefteye_cascade_file\", resources.getString(R.string.haarcascade_lefteye)); } public String getRighteyeCascadeFile(){ return sharedPreferences.getString(\"key_righteye_cascade_file\", resources.getString(R.string.haarcascade_righteye)); } public double getDetectionScaleFactor(){ return Double.parseDouble(sharedPreferences.getString(\"key_scaleFactor\", \"1.1\")); } public int getDetectionMinNeighbors(){ return Integer.parseInt(sharedPreferences.getString(\"key_minNeighbors\", \"3\")); } public int getDetectionFlags(){ return Integer.parseInt(sharedPreferences.getString(\"key_flags\", \"2\")); } public boolean getDetectionMethod(){ return sharedPreferences.getBoolean(\"key_detection_method\", true); } }"}]}}
{"project_id":222,"chunk_id":1,"content":{"main_file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Recognition/Caffe.java","main_file_content":"package ch.zhaw.facerecognitionlibrary.Recognition; import android.content.Context; import android.os.ParcelFormatException; import ch.zhaw.facerecognitionlibrary.Helpers.CaffeMobile; import org.opencv.core.Mat; import org.opencv.utils.Converters; import java.util.ArrayList; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.FileHelper; import ch.zhaw.facerecognitionlibrary.Helpers.MatName; import ch.zhaw.facerecognitionlibrary.Helpers.PreferencesHelper; public class Caffe implements Recognition { private CaffeMobile caffe; private Recognition rec; private FileHelper fh; String layer; static { System.loadLibrary(\"caffe\"); System.loadLibrary(\"caffe_jni\"); } public Caffe(Context context, int method) { fh = new FileHelper(); String dataPath = fh.CAFFE_PATH; PreferencesHelper preferencesHelper = new PreferencesHelper(context); String modelFile = preferencesHelper.getCaffeModelFile(); String weightsFile = preferencesHelper.getCaffeWeightsFile(); layer = preferencesHelper.getCaffeOutputLayer(); float[] meanValues = preferencesHelper.getCaffeMeanValues(); Boolean classificationMethod = preferencesHelper.getClassificationMethodTFCaffe(); caffe = new CaffeMobile(); caffe.setNumThreads(4); caffe.loadModel(dataPath + modelFile, dataPath + weightsFile); caffe.setMean(meanValues); if(classificationMethod){ rec = new SupportVectorMachine(context, method); } else { rec = new KNearestNeighbor(context, method); } } @Override public boolean train() { return rec.train(); } @Override public String recognize(Mat img, String expectedLabel) { return rec.recognize(getFeatureVector(img), expectedLabel); } @Override public void saveToFile() { } @Override public void saveTestData() { rec.saveTestData(); } @Override public void loadFromFile() { } @Override public void addImage(Mat img, String label, boolean featuresAlreadyExtracted) { if (featuresAlreadyExtracted){ rec.addImage(img, label, true); } else { rec.addImage(getFeatureVector(img), label, true); } } public Mat getFeatureVector(Mat img){ float[][] vector = caffe.getRepresentationLayer(saveMatToImage(img), layer); List<Float> fVector = new ArrayList<>(); for(float f : vector[0]){ fVector.add(f); } return Converters.vector_float_to_Mat(fVector); } private String saveMatToImage(Mat img){ MatName m = new MatName(\"caffe_vector\", img); return fh.saveMatToImage(m, fh.CAFFE_PATH); } }","dependencies":[{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Recognition/KNearestNeighbor.java","file_content":"package ch.zhaw.facerecognitionlibrary.Recognition; import android.content.Context; import org.opencv.core.CvType; import org.opencv.core.Mat; import org.opencv.ml.KNearest; import java.util.ArrayList; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.FileHelper; import ch.zhaw.facerecognitionlibrary.Helpers.MatName; import ch.zhaw.facerecognitionlibrary.Helpers.OneToOneMap; import ch.zhaw.facerecognitionlibrary.Helpers.PreferencesHelper; public class KNearestNeighbor implements Recognition{ private Context context; private FileHelper fh; private Mat trainingList; private Mat testList; private Mat labels; private int k; private KNearest knn; private List<Integer> labelList; private List<Integer> labelListTest; private OneToOneMap<String,Integer> labelMap; private OneToOneMap<String,Integer> labelMapTest; private String trainingFile; private String testFile; private int method; public KNearestNeighbor(Context context, int method) { this.context = context; fh = new FileHelper(); k = 20; trainingList = new Mat(); testList = new Mat(); this.labelList = new ArrayList<>(); this.labelListTest = new ArrayList<>(); this.labelMap = new OneToOneMap<String, Integer>(); this.labelMapTest = new OneToOneMap<String, Integer>(); trainingFile = \"knn_traininglist.xml\"; testFile = \"knn_testlist.xml\"; this.method = method; if(method == RECOGNITION){ loadFromFile(); } } @Override public boolean train() { if (trainingList.empty()){ return false; } saveToFile(); return true; } @Override public String recognize(Mat img, String expectedLabel) { Mat result = new Mat(); float nearest; img = getFeatureVector(img); addImage(img, expectedLabel, true); nearest = knn.findNearest(img,k,result); return labelMap.getKey((int) nearest); } @Override public void saveToFile() { fh.saveIntegerList(labelList, fh.createLabelFile(fh.KNN_PATH, \"train\")); fh.saveLabelMapToFile(fh.KNN_PATH, labelMap, \"train\"); MatName mtrainingList = new MatName(\"TrainingList\", trainingList); List<MatName> listMat = new ArrayList<MatName>(); listMat.add(mtrainingList); fh.saveMatListToXml(listMat, fh.KNN_PATH, trainingFile); } @Override public void saveTestData() { MatName mTestList = new MatName(\"TestList\", testList); List<MatName> listMat = new ArrayList<>(); listMat.add(mTestList); fh.saveMatListToXml(listMat, fh.KNN_PATH, testFile); fh.saveIntegerList(labelListTest, fh.createLabelFile(fh.KNN_PATH, \"test\")); fh.saveLabelMapToFile(fh.KNN_PATH, labelMapTest, \"test\"); } @Override public void loadFromFile() { MatName mtrainingList = new MatName(\"TrainingList\", trainingList); List<MatName> listMat = new ArrayList<MatName>(); listMat.add(mtrainingList); labelList = fh.loadIntegerList(fh.createLabelFile(fh.KNN_PATH, \"train\")); labelMap = fh.getLabelMapFromFile(fh.KNN_PATH); trainingList = fh.getMatListFromXml(listMat, fh.KNN_PATH, trainingFile).get(0).getMat(); labels = new Mat(labelList.size(), 1, CvType.CV_8UC1); for (int i=0; i<labelList.size(); i++) { Integer label = labelList.get(i); labels.put(i, 0, label); } labels.convertTo(labels, CvType.CV_32F); PreferencesHelper preferencesHelper = new PreferencesHelper(context); k = preferencesHelper.getK(); knn = KNearest.create(); knn.setIsClassifier(true); knn.train(trainingList, 0,labels); } @Override public void addImage(Mat img, String label, boolean featuresAlreadyExtracted) { int iLabel = 0; if(method == TRAINING){ trainingList.push_back(img.reshape(1,1)); if (labelMap.containsKey(label)) { iLabel = labelMap.getValue(label); } else { iLabel = labelMap.size() + 1; labelMap.put(label, iLabel); } labelList.add(iLabel); } else { testList.push_back(img); if (labelMapTest.containsKey(label)){ iLabel = labelMapTest.getValue(label); } else { iLabel = labelMapTest.size() + 1; labelMapTest.put(label, iLabel); } labelListTest.add(iLabel); } } @Override public Mat getFeatureVector(Mat img) { return img.reshape(1,1); } private byte[] stringToByteArray(String s){ return s.getBytes(); } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Recognition/Recognition.java","file_content":"package ch.zhaw.facerecognitionlibrary.Recognition; import org.opencv.core.Mat; public interface Recognition { public static final int TRAINING = 0; public static final int RECOGNITION = 1; public static final int KNN = 0; public static final int SVM = 1; boolean train(); String recognize(Mat img, String expectedLabel); void saveTestData(); void saveToFile(); void loadFromFile(); void addImage(Mat img, String label, boolean featuresAlreadyExtracted); Mat getFeatureVector(Mat img); }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Recognition/SupportVectorMachine.java","file_content":"package ch.zhaw.facerecognitionlibrary.Recognition; import android.content.Context; import org.opencv.core.Mat; import java.io.BufferedReader; import java.io.File; import java.io.FileNotFoundException; import java.io.FileReader; import java.io.FileWriter; import java.io.IOException; import java.nio.Buffer; import java.util.ArrayList; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.FileHelper; import ch.zhaw.facerecognitionlibrary.Helpers.OneToOneMap; import ch.zhaw.facerecognitionlibrary.Helpers.PreferencesHelper; public class SupportVectorMachine implements Recognition { PreferencesHelper preferencesHelper; private FileHelper fh; private File trainingFile; private File predictionFile; private File testFile; private List<String> trainingList; private List<String> testList; private OneToOneMap<String, Integer> labelMap; private OneToOneMap<String, Integer> labelMapTest; private int method; public SupportVectorMachine(Context context, int method) { preferencesHelper = new PreferencesHelper(context); fh = new FileHelper(); trainingFile = fh.createSvmTrainingFile(); predictionFile = fh.createSvmPredictionFile(); testFile = fh.createSvmTestFile(); trainingList = new ArrayList<>(); testList = new ArrayList<>(); labelMap = new OneToOneMap<String, Integer>(); labelMapTest = new OneToOneMap<String, Integer>(); this.method = method; if(method == RECOGNITION){ loadFromFile(); } } public SupportVectorMachine(File trainingFile, File predictionFile){ fh = new FileHelper(); this.trainingFile = trainingFile; this.predictionFile = predictionFile; trainingList = new ArrayList<>(); } static { System.loadLibrary(\"jnilibsvm\"); } private native void jniSvmTrain(String cmd); private native void jniSvmPredict(String cmd); @Override public boolean train() { fh.saveStringList(trainingList, trainingFile); String svmTrainOptions = preferencesHelper.getSvmTrainOptions(); String training = trainingFile.getAbsolutePath(); String model = trainingFile.getAbsolutePath() + \"_model\"; jniSvmTrain(svmTrainOptions + \" \" + training + \" \" + model); saveToFile(); return true; } public boolean trainProbability(String svmTrainOptions) { fh.saveStringList(trainingList, trainingFile); String training = trainingFile.getAbsolutePath(); String model = trainingFile.getAbsolutePath() + \"_model\"; jniSvmTrain(svmTrainOptions + \" -b 1\" + \" \" + training + \" \" + model); return true; } @Override public String recognize(Mat img, String expectedLabel) { try { FileWriter fw = new FileWriter(predictionFile, false); String line = imageToSvmString(img, expectedLabel); testList.add(line); fw.append(line); fw.close(); } catch (IOException e) { e.printStackTrace(); } String prediction = predictionFile.getAbsolutePath(); String model = trainingFile.getAbsolutePath() + \"_model\"; String output = predictionFile.getAbsolutePath() + \"_output\"; jniSvmPredict(prediction + \" \" + model + \" \" + output); try { BufferedReader buf = new BufferedReader(new FileReader(output)); int iLabel = Integer.valueOf(buf.readLine()); buf.close(); return labelMap.getKey(iLabel); } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } return null; } public String recognizeProbability(String svmString){ try { FileWriter fw = new FileWriter(predictionFile, false); fw.append(String.valueOf(1) + svmString); fw.close(); } catch (IOException e) { e.printStackTrace(); } String prediction = predictionFile.getAbsolutePath(); String model = trainingFile.getAbsolutePath() + \"_model\"; String output = predictionFile.getAbsolutePath() + \"_output\"; jniSvmPredict(\"-b 1 \" + prediction + \" \" + model + \" \" + output); try { BufferedReader buf = new BufferedReader(new FileReader(output)); String probability = buf.readLine() + \"\\n\"; probability = probability + buf.readLine(); buf.close(); return probability; } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } return null; } @Override public void saveToFile() { if(method == TRAINING){ fh.saveLabelMapToFile(fh.SVM_PATH, labelMap, \"train\"); } else { fh.saveLabelMapToFile(fh.SVM_PATH, labelMapTest, \"test\"); } } @Override public void saveTestData(){ fh.saveStringList(testList, testFile); } @Override public void loadFromFile() { labelMap = fh.getLabelMapFromFile(fh.SVM_PATH); } @Override public void addImage(Mat img, String label, boolean featuresAlreadyExtracted) { if(method == TRAINING){ trainingList.add(imageToSvmString(img, label)); } else { testList.add(imageToSvmString(img, label)); } } public void addImage(String svmString, String label) { trainingList.add(label + \" \" + svmString); } public Mat getFeatureVector(Mat img){ return img.reshape(1,1); } private String imageToSvmString(Mat img, String label){ int iLabel = 0; if(method == TRAINING){ if (labelMap.containsKey(label)) { iLabel = labelMap.getValue(label); } else { iLabel = labelMap.size() + 1; labelMap.put(label, iLabel); } } else { if (labelMapTest.containsKey(label)){ iLabel = labelMapTest.getValue(label); } else { iLabel = labelMapTest.size() + 1; labelMapTest.put(label, iLabel); } } String result = String.valueOf(iLabel); return result + getSvmString(img); } public String getSvmString(Mat img){ img = getFeatureVector(img); String result = \"\"; for (int i=0; i<img.cols(); i++){ result = result + \" \" + i + \":\" + img.get(0,i)[0]; } return result; } }"}]}}
{"project_id":222,"chunk_id":0,"content":{"main_file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Recognition/Eigenfaces.java","main_file_content":"package ch.zhaw.facerecognitionlibrary.Recognition; import android.content.Context; import org.opencv.core.Core; import org.opencv.core.CvType; import org.opencv.core.Mat; import java.util.ArrayList; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.FileHelper; import ch.zhaw.facerecognitionlibrary.Helpers.MatName; import ch.zhaw.facerecognitionlibrary.Helpers.OneToOneMap; import ch.zhaw.facerecognitionlibrary.Helpers.PreferencesHelper; public class Eigenfaces implements Recognition { private Context context; private Mat Gamma = new Mat(); private Mat Psi = new Mat(); private Mat Phi = new Mat(); private Mat eigVectors = new Mat(); private Mat Omega = new Mat(); private Mat testList = new Mat(); private List<Integer> labelList; private List<Integer> labelListTest; private OneToOneMap<String,Integer> labelMap; private OneToOneMap<String,Integer> labelMapTest; private String filename = \"eigenfaces.xml\"; private int method; public Eigenfaces(Context context, int method) { this.context = context; this.labelList = new ArrayList<>(); this.labelListTest = new ArrayList<>(); this.labelMap = new OneToOneMap<String, Integer>(); this.labelMapTest = new OneToOneMap<String, Integer>(); this.method = method; if(method == RECOGNITION){ loadFromFile(); } } public boolean train(){ if (Gamma.empty()){ return false; } computePsi(); computePhi(); computeEigVectors(); Omega = getFeatureVector(Phi); saveToFile(); return true; } public String recognize(Mat img, String expectedLabel){ img = img.reshape(1,1); img.convertTo(img, CvType.CV_32F); Core.subtract(img, Psi, img); Mat projected = getFeatureVector(img); img.convertTo(img, CvType.CV_8U); addImage(projected, expectedLabel, true); Mat distance = new Mat(Omega.rows(), 1, CvType.CV_64FC1); for (int i=0; i<Omega.rows(); i++){ double dist = Core.norm(projected.row(0), Omega.row(i), Core.NORM_L2); distance.put(i, 0, dist); } Mat sortedDist = new Mat(Omega.rows(), 1, CvType.CV_8UC1); Core.sortIdx(distance, sortedDist, Core.SORT_EVERY_COLUMN + Core.SORT_ASCENDING); int index = (int)(sortedDist.get(0,0)[0]); return labelMap.getKey(labelList.get(index)); } private void computePsi(){ Core.reduce(Gamma, Psi, 0, Core.REDUCE_AVG); } private void computePhi(){ Mat Psi_repeated = new Mat(); Core.repeat(Psi, Gamma.rows(), 1, Psi_repeated); Core.subtract(Gamma, Psi_repeated, Phi); } private void computeEigVectors(){ PreferencesHelper preferencesHelper = new PreferencesHelper(context); float pca_threshold = preferencesHelper.getPCAThreshold(); Core.PCACompute(Phi, Psi, eigVectors, pca_threshold); } public Mat getFeatureVector(Mat original){ Mat projected = new Mat(); Core.PCAProject(original, Psi, eigVectors, projected); return projected; } public void saveToFile(){ FileHelper fh = new FileHelper(); fh.saveIntegerList(labelList, fh.createLabelFile(fh.EIGENFACES_PATH, \"train\")); fh.saveLabelMapToFile(fh.EIGENFACES_PATH, labelMap, \"train\"); MatName mOmega = new MatName(\"Omega\", Omega); MatName mPsi = new MatName(\"Psi\", Psi); MatName mEigVectors = new MatName(\"eigVectors\", eigVectors); MatName mPhi = new MatName(\"Phi\", Phi); List<MatName> listMat = new ArrayList<MatName>(); listMat.add(mOmega); listMat.add(mPsi); listMat.add(mEigVectors); listMat.add(mPhi); fh.saveMatListToXml(listMat, fh.EIGENFACES_PATH, filename); } @Override public void saveTestData() { FileHelper fh = new FileHelper(); fh.saveIntegerList(labelListTest, fh.createLabelFile(fh.EIGENFACES_PATH, \"test\")); fh.saveLabelMapToFile(fh.EIGENFACES_PATH, labelMapTest, \"test\"); MatName mTestList = new MatName(\"TestList\", testList); List<MatName> listMat = new ArrayList<>(); listMat.add(mTestList); fh.saveMatListToXml(listMat, fh.EIGENFACES_PATH, \"testlist.xml\"); } public void loadFromFile(){ FileHelper fh = new FileHelper(); MatName mOmega = new MatName(\"Omega\", Omega); MatName mPsi = new MatName(\"Psi\", Psi); MatName mEigVectors = new MatName(\"eigVectors\", eigVectors); List<MatName> listMat = new ArrayList<MatName>(); listMat.add(mOmega); listMat.add(mPsi); listMat.add(mEigVectors); listMat = fh.getMatListFromXml(listMat, fh.EIGENFACES_PATH, filename); for (MatName mat : listMat){ switch (mat.getName()){ case \"Omega\": Omega = mat.getMat(); break; case \"Psi\": Psi = mat.getMat(); break; case \"eigVectors\": eigVectors = mat.getMat(); break; } } labelList = fh.loadIntegerList(fh.createLabelFile(fh.EIGENFACES_PATH, \"train\")); labelMap = fh.getLabelMapFromFile(fh.EIGENFACES_PATH); } public void addImage(Mat img, String label, boolean featuresAlreadyExtracted) { int iLabel = 0; if(method == TRAINING){ Gamma.push_back(img.reshape(1,1)); if (labelMap.containsKey(label)) { iLabel = labelMap.getValue(label); } else { iLabel = labelMap.size() + 1; labelMap.put(label, iLabel); } labelList.add(iLabel); } else { testList.push_back(img); if (labelMapTest.containsKey(label)){ iLabel = labelMapTest.getValue(label); } else { iLabel = labelMapTest.size() + 1; labelMapTest.put(label, iLabel); } labelListTest.add(iLabel); } } }","dependencies":[{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/FileHelper.java","file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import android.graphics.Bitmap; import android.os.Environment; import org.opencv.android.Utils; import org.opencv.core.Mat; import java.io.BufferedReader; import java.io.File; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.FileReader; import java.io.FileWriter; import java.io.IOException; import java.text.SimpleDateFormat; import java.util.ArrayList; import java.util.List; import java.util.Map; import java.util.Set; import ch.zhaw.facerecognitionlibrary.PreProcessor.PreProcessorFactory; public class FileHelper { public static String getFolderPath() { return FOLDER_PATH; } private static final String FOLDER_PATH = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES) + \"/facerecognition\"; public static final String TRAINING_PATH = FOLDER_PATH + \"/training/\"; public static final String TEST_PATH = FOLDER_PATH + \"/test/\"; public static final String DETECTION_TEST_PATH = FOLDER_PATH + \"/detection_test/\"; public static final String DATA_PATH = FOLDER_PATH + \"/data/\"; public static final String RESULTS_PATH = FOLDER_PATH + \"/results/\"; public static final String EIGENFACES_PATH = DATA_PATH + \"Eigenfaces/\"; public static final String SVM_PATH = DATA_PATH + \"SVM/\"; public static final String KNN_PATH = DATA_PATH + \"KNN/\"; public static final String CAFFE_PATH = DATA_PATH + \"Caffe/\"; public static final String TENSORFLOW_PATH = DATA_PATH + \"TensorFlow/\"; private static final String SEPARATOR = \";\"; private String name = \"\"; public FileHelper(String name) { this.name = name; } public FileHelper(){} public void createDataFolderIfNotExsiting(){ File folder = new File(DATA_PATH); folder.mkdir(); } private void createFolderIfNotExisting(String path){ File folder = new File(path); folder.mkdir(); } public static boolean isFileAnImage(File file){ if (file.toString().endsWith(\".jpg\") || file.toString().endsWith(\".jpeg\") || file.toString().endsWith(\".gif\") || file.toString().endsWith(\".png\")){ return true; } else { return false; } } private File[] getListOfFiles(String path){ File directory = new File(path + name); if(directory.exists()){ return directory.listFiles(); } else { return new File[]{}; } } public File[] getTrainingList(){ return getListOfFiles(TRAINING_PATH); } public File[] getTestList(){ return getListOfFiles(TEST_PATH); } public File[] getDetectionTestList() { return getListOfFiles(DETECTION_TEST_PATH); } public void saveMatListToXml(List<MatName> matList, String path, String filename){ createFolderIfNotExisting(path); MatXml matXml = new MatXml(); matXml.create(path + filename); for(MatName mat : matList){ matXml.writeMat(mat.getName(), mat.getMat()); } matXml.release(); } public List<MatName> getMatListFromXml(List<MatName> matList, String path, String filename){ String filepath = path + filename; MatXml matXml = new MatXml(); File file = new File(filepath); if (file.exists()){ matXml.open(filepath); for (MatName mat : matList){ mat.setMat(matXml.readMat(mat.getName())); } } return matList; } public String saveMatToImage(MatName m, String path){ new File(path).mkdirs(); String fullpath = path + m.getName() + \".png\"; Mat mat = m.getMat(); Bitmap bitmap = Bitmap.createBitmap(mat.cols(), mat.rows(), Bitmap.Config.ARGB_8888); Utils.matToBitmap(mat, bitmap); File file = new File(fullpath); try { FileOutputStream os = new FileOutputStream(file); bitmap.compress(Bitmap.CompressFormat.PNG, 100, os); os.close(); } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } return fullpath; } public void saveBitmapToImage(Bitmap bmp){ File file = new File(DATA_PATH + \"bitmap.png\"); try { FileOutputStream os = new FileOutputStream(file); bmp.compress(Bitmap.CompressFormat.PNG, 100, os); os.close(); } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } } public File createSvmTrainingFile(){ createFolderIfNotExisting(SVM_PATH); String filepath = SVM_PATH + \"svm_train\"; File trainingFile = new File(filepath); return trainingFile; } public File createSvmPredictionFile(){ String filepath = SVM_PATH + \"svm_predict\"; File predictionFile = new File(filepath); return predictionFile; } public File createSvmTestFile(){ String filepath = SVM_PATH + \"svm_test\"; File testFile = new File(filepath); return testFile; } public File createLabelFile(String path, String name){ createFolderIfNotExisting(path); String filepath = path + \"label_\" + name; File trainingFile = new File(filepath); return trainingFile; } public void saveLabelMapToFile(String path, OneToOneMap<String, Integer> labelMap, String name){ createFolderIfNotExisting(path); String filepath = path + \"labelMap_\" + name; try { FileWriter fw = new FileWriter(filepath); for (String s : (Set<String>)labelMap.getKeyToValMap().keySet()){ fw.append(s + SEPARATOR + labelMap.getValue(s) + \"\\n\"); } fw.close(); } catch (IOException e) { e.printStackTrace(); } } public void saveResultsToFile(Map<String, ?> map, double accuracy, double accuracy_reference, double accuracy_deviation, double robustness, int duration, List<String> results){ String timestamp = new SimpleDateFormat(\"ddMMyyyyHHmm\").format(new java.util.Date()); createFolderIfNotExisting(RESULTS_PATH); String filepath = RESULTS_PATH + \"Accuracy_\" + String.format(\"%.2f\", accuracy * 100) + \"_\" + timestamp + \".txt\"; try { FileWriter fw = new FileWriter(filepath); for (Map.Entry entry : map.entrySet()){ fw.append(entry.getKey() + \": \" + entry.getValue() + \"\\n\"); } fw.append(\"Accuracy: \" + accuracy * 100 + \"%\\n\"); fw.append(\"Accuracy reference: \" + accuracy_reference * 100 + \"%\\n\"); fw.append(\"Accuracy deviation: \" + accuracy_deviation * 100 + \"%\\n\"); fw.append(\"Robustness: \" + robustness * 100 + \"%\\n\"); fw.append(\"Duration per image: \" + duration + \"ms\\n\"); for (String result : results){ fw.append(result + \"\\n\"); } fw.close(); } catch (IOException e) { e.printStackTrace(); } } public void saveResultsToFile(Map<String, ?> map, double accuracy, int duration, List<String> results){ String timestamp = new SimpleDateFormat(\"ddMMyyyyHHmm\").format(new java.util.Date()); createFolderIfNotExisting(RESULTS_PATH); String filepath = RESULTS_PATH + \"Accuracy_\" + String.format(\"%.2f\", accuracy * 100) + \"_\" + timestamp + \".txt\"; try { FileWriter fw = new FileWriter(filepath); for (Map.Entry entry : map.entrySet()){ fw.append(entry.getKey() + \": \" + entry.getValue() + \"\\n\"); } fw.append(\"Accuracy: \" + accuracy * 100 + \"%\\n\"); fw.append(\"Duration per image: \" + duration + \"ms\\n\"); for (String result : results){ fw.append(result + \"\\n\"); } fw.close(); } catch (IOException e) { e.printStackTrace(); } } public OneToOneMap<String, Integer> getLabelMapFromFile(String path){ String filepath = path + \"labelMap_train\"; OneToOneMap<String, Integer> labelMap = new OneToOneMap<>(); try { BufferedReader buf = new BufferedReader(new FileReader(filepath)); String line = buf.readLine(); while (line != null){ String[] split = line.split(SEPARATOR); labelMap.put(split[0], Integer.valueOf(split[1])); line = buf.readLine(); } buf.close(); } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } return labelMap; } public void saveStringList(List<String> list, File file){ try { FileWriter fw = new FileWriter(file, false); for (String line : list){ fw.append(line + \"\\n\"); } fw.close(); } catch (IOException e) { e.printStackTrace(); } } public void saveIntegerList(List<Integer> list, File file){ try { FileWriter fw = new FileWriter(file, false); for (int line : list){ fw.append(Integer.toString(line)+ \"\\n\"); } fw.close(); } catch (IOException e) { e.printStackTrace(); } } public List<String> loadStringList(File file){ List<String> list = new ArrayList<>(); try { FileReader fr = new FileReader(file); BufferedReader br = new BufferedReader(fr); String line; while ((line = br.readLine()) != null){ list.add(line); } br.close(); fr.close(); } catch (IOException e) { e.printStackTrace(); } return list; } public List<Integer> loadIntegerList(File file){ List<Integer> list = new ArrayList<>(); try { FileReader fr = new FileReader(file); BufferedReader br = new BufferedReader(fr); Integer line = 0; String sLine; while ((sLine = br.readLine()) != null){ line = Integer.parseInt(sLine); list.add(line); } br.close(); fr.close(); } catch (IOException e) { e.printStackTrace(); } return list; } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/MatName.java","file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import org.opencv.core.Mat; public class MatName { private String name; private Mat mat; public MatName(String name, Mat mat){ this.name = name; this.mat = mat; } public String getName() { return name; } public Mat getMat() { return mat; } public void setMat(Mat mat) { this.mat = mat; } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/OneToOneMap.java","file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import java.util.HashMap; import java.util.Map; public class OneToOneMap<Key, Value> { private Map<Key, Value> keyToVal; private Map<Value, Key> valToKey; public OneToOneMap() { this.keyToVal = new HashMap<>(); this.valToKey = new HashMap<>(); } public void put(Key k, Value v) { if (!keyToVal.containsKey(k) && !valToKey.containsKey(v)) { keyToVal.put(k, v); valToKey.put(v, k); } } public boolean containsKey(Key k){ return keyToVal.containsKey(k); } public Value getValue(Key k){ return keyToVal.get(k); } public Key getKey(Value v){ return valToKey.get(v); } public int size(){ return keyToVal.size(); } public Map getKeyToValMap(){ return keyToVal; } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/PreferencesHelper.java","file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import android.content.Context; import android.content.SharedPreferences; import android.content.res.Resources; import android.preference.PreferenceManager; import java.util.ArrayList; import java.util.Collections; import java.util.List; import java.util.Set; import ch.zhaw.facerecognitionlibrary.R; public class PreferencesHelper { public enum Usage {RECOGNITION, DETECTION}; SharedPreferences sharedPreferences; Resources resources; public PreferencesHelper(Context context){ sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context); resources = context.getResources(); } public String getClassificationMethod(){ return sharedPreferences.getString(\"key_classification_method\", resources.getString(R.string.eigenfaces)); } public boolean getClassificationMethodTFCaffe(){ return sharedPreferences.getBoolean(\"key_classificationMethodTFCaffe\", true); } public float getGamma(){ return Float.valueOf(sharedPreferences.getString(\"key_gamma\", resources.getString(R.string.gamma))); } public double[] getSigmas(){ String[] sigmasString = sharedPreferences.getString(\"key_sigmas\", resources.getString(R.string.sigmas)).split(\",\"); if(sigmasString.length != 2){ sigmasString = resources.getString(R.string.sigmas).split(\",\"); } double[] sigmas = new double[3]; for(int i=0; i<2; i++){ sigmas[i] = Double.parseDouble(sigmasString[i]); } return sigmas; } public boolean getEyeDetectionEnabled(){ return sharedPreferences.getBoolean(\"key_eye_detection\", true); } public List<String> getStandardPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_standard_pre\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_standard_pre\"); } else { return new ArrayList<>(); } } public List<String> getBrightnessPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_brightness\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_brightness\"); } else { return new ArrayList<>(); } } public List<String> getContoursPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_contours\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_contours\"); } else { return new ArrayList<>(); } } public List<String> getContrastPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_contrast\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_contrast\"); } else { return new ArrayList<>(); } } public List<String> getStandardPostprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_standard_post\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_standard_post\"); } else { return new ArrayList<>(); } } private List<String> getPreferenceList(String key){ Set<String> set = sharedPreferences.getStringSet(key, null); ArrayList<String> list; if(set != null) { list = new ArrayList<String>(set); Collections.sort(list); return list; } else { return new ArrayList<>(); } } public String getCaffeModelFile(){ return sharedPreferences.getString(\"key_modelFileCaffe\", resources.getString(R.string.modelFileCaffe)); } public String getCaffeWeightsFile(){ return sharedPreferences.getString(\"key_weightsFileCaffe\", resources.getString(R.string.weightsFileCaffe)); } public String getCaffeOutputLayer(){ return sharedPreferences.getString(\"key_outputLayerCaffe\", resources.getString(R.string.weightsFileCaffe)); } public float[] getCaffeMeanValues(){ String[] meanValuesString = sharedPreferences.getString(\"key_meanValuesCaffe\", resources.getString(R.string.meanValuesCaffe)).split(\",\"); if(meanValuesString.length != 3){ meanValuesString = resources.getString(R.string.meanValuesCaffe).split(\",\"); } float[] meanValues = new float[3]; for(int i=0; i<3; i++){ meanValues[i] = Float.parseFloat(meanValuesString[i]); } return meanValues; } public String getSvmTrainOptions(){ return sharedPreferences.getString(\"key_svmTrainOptions\", \"-t 0 \"); } public int getK(){ return Integer.valueOf(sharedPreferences.getString(\"key_K\", \"20\")); } public int getN(){ return Integer.valueOf(sharedPreferences.getString(\"key_N\", \"25\")); } public int getFaceSize(){ return Integer.valueOf(sharedPreferences.getString(\"key_faceSize\", \"160\")); } public int getTensorFlowInputSize(){ return Integer.valueOf(sharedPreferences.getString(\"key_inputSize\", \"160\")); } public int getTensorFlowInputChannels(){ return Integer.valueOf(sharedPreferences.getString(\"key_inputChannels\", \"3\")); } public int getTensorFlowImageMean(){ return Integer.valueOf(sharedPreferences.getString(\"key_imageMean\", \"128\")); } public int getTensorFlowImageStd(){ return Integer.valueOf(sharedPreferences.getString(\"key_imageStd\", \"128\")); } public int getTensorFlowOutputSize(){ return Integer.valueOf(sharedPreferences.getString(\"key_outputSize\", \"128\")); } public String getTensorFlowInputLayer(){ return sharedPreferences.getString(\"key_inputLayer\", \"input\"); } public String getTensorFlowOutputLayer(){ return sharedPreferences.getString(\"key_outputLayer\", \"embeddings\"); } public String getTensorFlowModelFile(){ return sharedPreferences.getString(\"key_modelFileTensorFlow\", \"facenet.pb\"); } public float getPCAThreshold(){ return Float.valueOf(sharedPreferences.getString(\"key_pca_threshold\", \"0.98f\")); } public String getFaceCascadeFile(){ return sharedPreferences.getString(\"key_face_cascade_file\", resources.getString(R.string.haarcascade_alt2)); } public String getLefteyeCascadeFile(){ return sharedPreferences.getString(\"key_lefteye_cascade_file\", resources.getString(R.string.haarcascade_lefteye)); } public String getRighteyeCascadeFile(){ return sharedPreferences.getString(\"key_righteye_cascade_file\", resources.getString(R.string.haarcascade_righteye)); } public double getDetectionScaleFactor(){ return Double.parseDouble(sharedPreferences.getString(\"key_scaleFactor\", \"1.1\")); } public int getDetectionMinNeighbors(){ return Integer.parseInt(sharedPreferences.getString(\"key_minNeighbors\", \"3\")); } public int getDetectionFlags(){ return Integer.parseInt(sharedPreferences.getString(\"key_flags\", \"2\")); } public boolean getDetectionMethod(){ return sharedPreferences.getBoolean(\"key_detection_method\", true); } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Recognition/Recognition.java","file_content":"package ch.zhaw.facerecognitionlibrary.Recognition; import org.opencv.core.Mat; public interface Recognition { public static final int TRAINING = 0; public static final int RECOGNITION = 1; public static final int KNN = 0; public static final int SVM = 1; boolean train(); String recognize(Mat img, String expectedLabel); void saveTestData(); void saveToFile(); void loadFromFile(); void addImage(Mat img, String label, boolean featuresAlreadyExtracted); Mat getFeatureVector(Mat img); }"}]}}
{"project_id":222,"chunk_id":0,"content":{"main_file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Recognition/KNearestNeighbor.java","main_file_content":"package ch.zhaw.facerecognitionlibrary.Recognition; import android.content.Context; import org.opencv.core.CvType; import org.opencv.core.Mat; import org.opencv.ml.KNearest; import java.util.ArrayList; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.FileHelper; import ch.zhaw.facerecognitionlibrary.Helpers.MatName; import ch.zhaw.facerecognitionlibrary.Helpers.OneToOneMap; import ch.zhaw.facerecognitionlibrary.Helpers.PreferencesHelper; public class KNearestNeighbor implements Recognition{ private Context context; private FileHelper fh; private Mat trainingList; private Mat testList; private Mat labels; private int k; private KNearest knn; private List<Integer> labelList; private List<Integer> labelListTest; private OneToOneMap<String,Integer> labelMap; private OneToOneMap<String,Integer> labelMapTest; private String trainingFile; private String testFile; private int method; public KNearestNeighbor(Context context, int method) { this.context = context; fh = new FileHelper(); k = 20; trainingList = new Mat(); testList = new Mat(); this.labelList = new ArrayList<>(); this.labelListTest = new ArrayList<>(); this.labelMap = new OneToOneMap<String, Integer>(); this.labelMapTest = new OneToOneMap<String, Integer>(); trainingFile = \"knn_traininglist.xml\"; testFile = \"knn_testlist.xml\"; this.method = method; if(method == RECOGNITION){ loadFromFile(); } } @Override public boolean train() { if (trainingList.empty()){ return false; } saveToFile(); return true; } @Override public String recognize(Mat img, String expectedLabel) { Mat result = new Mat(); float nearest; img = getFeatureVector(img); addImage(img, expectedLabel, true); nearest = knn.findNearest(img,k,result); return labelMap.getKey((int) nearest); } @Override public void saveToFile() { fh.saveIntegerList(labelList, fh.createLabelFile(fh.KNN_PATH, \"train\")); fh.saveLabelMapToFile(fh.KNN_PATH, labelMap, \"train\"); MatName mtrainingList = new MatName(\"TrainingList\", trainingList); List<MatName> listMat = new ArrayList<MatName>(); listMat.add(mtrainingList); fh.saveMatListToXml(listMat, fh.KNN_PATH, trainingFile); } @Override public void saveTestData() { MatName mTestList = new MatName(\"TestList\", testList); List<MatName> listMat = new ArrayList<>(); listMat.add(mTestList); fh.saveMatListToXml(listMat, fh.KNN_PATH, testFile); fh.saveIntegerList(labelListTest, fh.createLabelFile(fh.KNN_PATH, \"test\")); fh.saveLabelMapToFile(fh.KNN_PATH, labelMapTest, \"test\"); } @Override public void loadFromFile() { MatName mtrainingList = new MatName(\"TrainingList\", trainingList); List<MatName> listMat = new ArrayList<MatName>(); listMat.add(mtrainingList); labelList = fh.loadIntegerList(fh.createLabelFile(fh.KNN_PATH, \"train\")); labelMap = fh.getLabelMapFromFile(fh.KNN_PATH); trainingList = fh.getMatListFromXml(listMat, fh.KNN_PATH, trainingFile).get(0).getMat(); labels = new Mat(labelList.size(), 1, CvType.CV_8UC1); for (int i=0; i<labelList.size(); i++) { Integer label = labelList.get(i); labels.put(i, 0, label); } labels.convertTo(labels, CvType.CV_32F); PreferencesHelper preferencesHelper = new PreferencesHelper(context); k = preferencesHelper.getK(); knn = KNearest.create(); knn.setIsClassifier(true); knn.train(trainingList, 0,labels); } @Override public void addImage(Mat img, String label, boolean featuresAlreadyExtracted) { int iLabel = 0; if(method == TRAINING){ trainingList.push_back(img.reshape(1,1)); if (labelMap.containsKey(label)) { iLabel = labelMap.getValue(label); } else { iLabel = labelMap.size() + 1; labelMap.put(label, iLabel); } labelList.add(iLabel); } else { testList.push_back(img); if (labelMapTest.containsKey(label)){ iLabel = labelMapTest.getValue(label); } else { iLabel = labelMapTest.size() + 1; labelMapTest.put(label, iLabel); } labelListTest.add(iLabel); } } @Override public Mat getFeatureVector(Mat img) { return img.reshape(1,1); } private byte[] stringToByteArray(String s){ return s.getBytes(); } }","dependencies":[{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/FileHelper.java","file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import android.graphics.Bitmap; import android.os.Environment; import org.opencv.android.Utils; import org.opencv.core.Mat; import java.io.BufferedReader; import java.io.File; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.FileReader; import java.io.FileWriter; import java.io.IOException; import java.text.SimpleDateFormat; import java.util.ArrayList; import java.util.List; import java.util.Map; import java.util.Set; import ch.zhaw.facerecognitionlibrary.PreProcessor.PreProcessorFactory; public class FileHelper { public static String getFolderPath() { return FOLDER_PATH; } private static final String FOLDER_PATH = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES) + \"/facerecognition\"; public static final String TRAINING_PATH = FOLDER_PATH + \"/training/\"; public static final String TEST_PATH = FOLDER_PATH + \"/test/\"; public static final String DETECTION_TEST_PATH = FOLDER_PATH + \"/detection_test/\"; public static final String DATA_PATH = FOLDER_PATH + \"/data/\"; public static final String RESULTS_PATH = FOLDER_PATH + \"/results/\"; public static final String EIGENFACES_PATH = DATA_PATH + \"Eigenfaces/\"; public static final String SVM_PATH = DATA_PATH + \"SVM/\"; public static final String KNN_PATH = DATA_PATH + \"KNN/\"; public static final String CAFFE_PATH = DATA_PATH + \"Caffe/\"; public static final String TENSORFLOW_PATH = DATA_PATH + \"TensorFlow/\"; private static final String SEPARATOR = \";\"; private String name = \"\"; public FileHelper(String name) { this.name = name; } public FileHelper(){} public void createDataFolderIfNotExsiting(){ File folder = new File(DATA_PATH); folder.mkdir(); } private void createFolderIfNotExisting(String path){ File folder = new File(path); folder.mkdir(); } public static boolean isFileAnImage(File file){ if (file.toString().endsWith(\".jpg\") || file.toString().endsWith(\".jpeg\") || file.toString().endsWith(\".gif\") || file.toString().endsWith(\".png\")){ return true; } else { return false; } } private File[] getListOfFiles(String path){ File directory = new File(path + name); if(directory.exists()){ return directory.listFiles(); } else { return new File[]{}; } } public File[] getTrainingList(){ return getListOfFiles(TRAINING_PATH); } public File[] getTestList(){ return getListOfFiles(TEST_PATH); } public File[] getDetectionTestList() { return getListOfFiles(DETECTION_TEST_PATH); } public void saveMatListToXml(List<MatName> matList, String path, String filename){ createFolderIfNotExisting(path); MatXml matXml = new MatXml(); matXml.create(path + filename); for(MatName mat : matList){ matXml.writeMat(mat.getName(), mat.getMat()); } matXml.release(); } public List<MatName> getMatListFromXml(List<MatName> matList, String path, String filename){ String filepath = path + filename; MatXml matXml = new MatXml(); File file = new File(filepath); if (file.exists()){ matXml.open(filepath); for (MatName mat : matList){ mat.setMat(matXml.readMat(mat.getName())); } } return matList; } public String saveMatToImage(MatName m, String path){ new File(path).mkdirs(); String fullpath = path + m.getName() + \".png\"; Mat mat = m.getMat(); Bitmap bitmap = Bitmap.createBitmap(mat.cols(), mat.rows(), Bitmap.Config.ARGB_8888); Utils.matToBitmap(mat, bitmap); File file = new File(fullpath); try { FileOutputStream os = new FileOutputStream(file); bitmap.compress(Bitmap.CompressFormat.PNG, 100, os); os.close(); } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } return fullpath; } public void saveBitmapToImage(Bitmap bmp){ File file = new File(DATA_PATH + \"bitmap.png\"); try { FileOutputStream os = new FileOutputStream(file); bmp.compress(Bitmap.CompressFormat.PNG, 100, os); os.close(); } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } } public File createSvmTrainingFile(){ createFolderIfNotExisting(SVM_PATH); String filepath = SVM_PATH + \"svm_train\"; File trainingFile = new File(filepath); return trainingFile; } public File createSvmPredictionFile(){ String filepath = SVM_PATH + \"svm_predict\"; File predictionFile = new File(filepath); return predictionFile; } public File createSvmTestFile(){ String filepath = SVM_PATH + \"svm_test\"; File testFile = new File(filepath); return testFile; } public File createLabelFile(String path, String name){ createFolderIfNotExisting(path); String filepath = path + \"label_\" + name; File trainingFile = new File(filepath); return trainingFile; } public void saveLabelMapToFile(String path, OneToOneMap<String, Integer> labelMap, String name){ createFolderIfNotExisting(path); String filepath = path + \"labelMap_\" + name; try { FileWriter fw = new FileWriter(filepath); for (String s : (Set<String>)labelMap.getKeyToValMap().keySet()){ fw.append(s + SEPARATOR + labelMap.getValue(s) + \"\\n\"); } fw.close(); } catch (IOException e) { e.printStackTrace(); } } public void saveResultsToFile(Map<String, ?> map, double accuracy, double accuracy_reference, double accuracy_deviation, double robustness, int duration, List<String> results){ String timestamp = new SimpleDateFormat(\"ddMMyyyyHHmm\").format(new java.util.Date()); createFolderIfNotExisting(RESULTS_PATH); String filepath = RESULTS_PATH + \"Accuracy_\" + String.format(\"%.2f\", accuracy * 100) + \"_\" + timestamp + \".txt\"; try { FileWriter fw = new FileWriter(filepath); for (Map.Entry entry : map.entrySet()){ fw.append(entry.getKey() + \": \" + entry.getValue() + \"\\n\"); } fw.append(\"Accuracy: \" + accuracy * 100 + \"%\\n\"); fw.append(\"Accuracy reference: \" + accuracy_reference * 100 + \"%\\n\"); fw.append(\"Accuracy deviation: \" + accuracy_deviation * 100 + \"%\\n\"); fw.append(\"Robustness: \" + robustness * 100 + \"%\\n\"); fw.append(\"Duration per image: \" + duration + \"ms\\n\"); for (String result : results){ fw.append(result + \"\\n\"); } fw.close(); } catch (IOException e) { e.printStackTrace(); } } public void saveResultsToFile(Map<String, ?> map, double accuracy, int duration, List<String> results){ String timestamp = new SimpleDateFormat(\"ddMMyyyyHHmm\").format(new java.util.Date()); createFolderIfNotExisting(RESULTS_PATH); String filepath = RESULTS_PATH + \"Accuracy_\" + String.format(\"%.2f\", accuracy * 100) + \"_\" + timestamp + \".txt\"; try { FileWriter fw = new FileWriter(filepath); for (Map.Entry entry : map.entrySet()){ fw.append(entry.getKey() + \": \" + entry.getValue() + \"\\n\"); } fw.append(\"Accuracy: \" + accuracy * 100 + \"%\\n\"); fw.append(\"Duration per image: \" + duration + \"ms\\n\"); for (String result : results){ fw.append(result + \"\\n\"); } fw.close(); } catch (IOException e) { e.printStackTrace(); } } public OneToOneMap<String, Integer> getLabelMapFromFile(String path){ String filepath = path + \"labelMap_train\"; OneToOneMap<String, Integer> labelMap = new OneToOneMap<>(); try { BufferedReader buf = new BufferedReader(new FileReader(filepath)); String line = buf.readLine(); while (line != null){ String[] split = line.split(SEPARATOR); labelMap.put(split[0], Integer.valueOf(split[1])); line = buf.readLine(); } buf.close(); } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } return labelMap; } public void saveStringList(List<String> list, File file){ try { FileWriter fw = new FileWriter(file, false); for (String line : list){ fw.append(line + \"\\n\"); } fw.close(); } catch (IOException e) { e.printStackTrace(); } } public void saveIntegerList(List<Integer> list, File file){ try { FileWriter fw = new FileWriter(file, false); for (int line : list){ fw.append(Integer.toString(line)+ \"\\n\"); } fw.close(); } catch (IOException e) { e.printStackTrace(); } } public List<String> loadStringList(File file){ List<String> list = new ArrayList<>(); try { FileReader fr = new FileReader(file); BufferedReader br = new BufferedReader(fr); String line; while ((line = br.readLine()) != null){ list.add(line); } br.close(); fr.close(); } catch (IOException e) { e.printStackTrace(); } return list; } public List<Integer> loadIntegerList(File file){ List<Integer> list = new ArrayList<>(); try { FileReader fr = new FileReader(file); BufferedReader br = new BufferedReader(fr); Integer line = 0; String sLine; while ((sLine = br.readLine()) != null){ line = Integer.parseInt(sLine); list.add(line); } br.close(); fr.close(); } catch (IOException e) { e.printStackTrace(); } return list; } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/MatName.java","file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import org.opencv.core.Mat; public class MatName { private String name; private Mat mat; public MatName(String name, Mat mat){ this.name = name; this.mat = mat; } public String getName() { return name; } public Mat getMat() { return mat; } public void setMat(Mat mat) { this.mat = mat; } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/OneToOneMap.java","file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import java.util.HashMap; import java.util.Map; public class OneToOneMap<Key, Value> { private Map<Key, Value> keyToVal; private Map<Value, Key> valToKey; public OneToOneMap() { this.keyToVal = new HashMap<>(); this.valToKey = new HashMap<>(); } public void put(Key k, Value v) { if (!keyToVal.containsKey(k) && !valToKey.containsKey(v)) { keyToVal.put(k, v); valToKey.put(v, k); } } public boolean containsKey(Key k){ return keyToVal.containsKey(k); } public Value getValue(Key k){ return keyToVal.get(k); } public Key getKey(Value v){ return valToKey.get(v); } public int size(){ return keyToVal.size(); } public Map getKeyToValMap(){ return keyToVal; } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/PreferencesHelper.java","file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import android.content.Context; import android.content.SharedPreferences; import android.content.res.Resources; import android.preference.PreferenceManager; import java.util.ArrayList; import java.util.Collections; import java.util.List; import java.util.Set; import ch.zhaw.facerecognitionlibrary.R; public class PreferencesHelper { public enum Usage {RECOGNITION, DETECTION}; SharedPreferences sharedPreferences; Resources resources; public PreferencesHelper(Context context){ sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context); resources = context.getResources(); } public String getClassificationMethod(){ return sharedPreferences.getString(\"key_classification_method\", resources.getString(R.string.eigenfaces)); } public boolean getClassificationMethodTFCaffe(){ return sharedPreferences.getBoolean(\"key_classificationMethodTFCaffe\", true); } public float getGamma(){ return Float.valueOf(sharedPreferences.getString(\"key_gamma\", resources.getString(R.string.gamma))); } public double[] getSigmas(){ String[] sigmasString = sharedPreferences.getString(\"key_sigmas\", resources.getString(R.string.sigmas)).split(\",\"); if(sigmasString.length != 2){ sigmasString = resources.getString(R.string.sigmas).split(\",\"); } double[] sigmas = new double[3]; for(int i=0; i<2; i++){ sigmas[i] = Double.parseDouble(sigmasString[i]); } return sigmas; } public boolean getEyeDetectionEnabled(){ return sharedPreferences.getBoolean(\"key_eye_detection\", true); } public List<String> getStandardPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_standard_pre\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_standard_pre\"); } else { return new ArrayList<>(); } } public List<String> getBrightnessPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_brightness\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_brightness\"); } else { return new ArrayList<>(); } } public List<String> getContoursPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_contours\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_contours\"); } else { return new ArrayList<>(); } } public List<String> getContrastPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_contrast\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_contrast\"); } else { return new ArrayList<>(); } } public List<String> getStandardPostprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_standard_post\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_standard_post\"); } else { return new ArrayList<>(); } } private List<String> getPreferenceList(String key){ Set<String> set = sharedPreferences.getStringSet(key, null); ArrayList<String> list; if(set != null) { list = new ArrayList<String>(set); Collections.sort(list); return list; } else { return new ArrayList<>(); } } public String getCaffeModelFile(){ return sharedPreferences.getString(\"key_modelFileCaffe\", resources.getString(R.string.modelFileCaffe)); } public String getCaffeWeightsFile(){ return sharedPreferences.getString(\"key_weightsFileCaffe\", resources.getString(R.string.weightsFileCaffe)); } public String getCaffeOutputLayer(){ return sharedPreferences.getString(\"key_outputLayerCaffe\", resources.getString(R.string.weightsFileCaffe)); } public float[] getCaffeMeanValues(){ String[] meanValuesString = sharedPreferences.getString(\"key_meanValuesCaffe\", resources.getString(R.string.meanValuesCaffe)).split(\",\"); if(meanValuesString.length != 3){ meanValuesString = resources.getString(R.string.meanValuesCaffe).split(\",\"); } float[] meanValues = new float[3]; for(int i=0; i<3; i++){ meanValues[i] = Float.parseFloat(meanValuesString[i]); } return meanValues; } public String getSvmTrainOptions(){ return sharedPreferences.getString(\"key_svmTrainOptions\", \"-t 0 \"); } public int getK(){ return Integer.valueOf(sharedPreferences.getString(\"key_K\", \"20\")); } public int getN(){ return Integer.valueOf(sharedPreferences.getString(\"key_N\", \"25\")); } public int getFaceSize(){ return Integer.valueOf(sharedPreferences.getString(\"key_faceSize\", \"160\")); } public int getTensorFlowInputSize(){ return Integer.valueOf(sharedPreferences.getString(\"key_inputSize\", \"160\")); } public int getTensorFlowInputChannels(){ return Integer.valueOf(sharedPreferences.getString(\"key_inputChannels\", \"3\")); } public int getTensorFlowImageMean(){ return Integer.valueOf(sharedPreferences.getString(\"key_imageMean\", \"128\")); } public int getTensorFlowImageStd(){ return Integer.valueOf(sharedPreferences.getString(\"key_imageStd\", \"128\")); } public int getTensorFlowOutputSize(){ return Integer.valueOf(sharedPreferences.getString(\"key_outputSize\", \"128\")); } public String getTensorFlowInputLayer(){ return sharedPreferences.getString(\"key_inputLayer\", \"input\"); } public String getTensorFlowOutputLayer(){ return sharedPreferences.getString(\"key_outputLayer\", \"embeddings\"); } public String getTensorFlowModelFile(){ return sharedPreferences.getString(\"key_modelFileTensorFlow\", \"facenet.pb\"); } public float getPCAThreshold(){ return Float.valueOf(sharedPreferences.getString(\"key_pca_threshold\", \"0.98f\")); } public String getFaceCascadeFile(){ return sharedPreferences.getString(\"key_face_cascade_file\", resources.getString(R.string.haarcascade_alt2)); } public String getLefteyeCascadeFile(){ return sharedPreferences.getString(\"key_lefteye_cascade_file\", resources.getString(R.string.haarcascade_lefteye)); } public String getRighteyeCascadeFile(){ return sharedPreferences.getString(\"key_righteye_cascade_file\", resources.getString(R.string.haarcascade_righteye)); } public double getDetectionScaleFactor(){ return Double.parseDouble(sharedPreferences.getString(\"key_scaleFactor\", \"1.1\")); } public int getDetectionMinNeighbors(){ return Integer.parseInt(sharedPreferences.getString(\"key_minNeighbors\", \"3\")); } public int getDetectionFlags(){ return Integer.parseInt(sharedPreferences.getString(\"key_flags\", \"2\")); } public boolean getDetectionMethod(){ return sharedPreferences.getBoolean(\"key_detection_method\", true); } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Recognition/Recognition.java","file_content":"package ch.zhaw.facerecognitionlibrary.Recognition; import org.opencv.core.Mat; public interface Recognition { public static final int TRAINING = 0; public static final int RECOGNITION = 1; public static final int KNN = 0; public static final int SVM = 1; boolean train(); String recognize(Mat img, String expectedLabel); void saveTestData(); void saveToFile(); void loadFromFile(); void addImage(Mat img, String label, boolean featuresAlreadyExtracted); Mat getFeatureVector(Mat img); }"}]}}
{"project_id":222,"chunk_id":0,"content":{"main_file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Recognition/Recognition.java","main_file_content":"package ch.zhaw.facerecognitionlibrary.Recognition; import org.opencv.core.Mat; public interface Recognition { public static final int TRAINING = 0; public static final int RECOGNITION = 1; public static final int KNN = 0; public static final int SVM = 1; boolean train(); String recognize(Mat img, String expectedLabel); void saveTestData(); void saveToFile(); void loadFromFile(); void addImage(Mat img, String label, boolean featuresAlreadyExtracted); Mat getFeatureVector(Mat img); }","dependencies":[]}}
{"project_id":222,"chunk_id":0,"content":{"main_file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/Command.java","main_file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor; public interface Command { PreProcessor preprocessImage(PreProcessor preProcessor); }","dependencies":[{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/PreProcessor.java","file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor; import android.content.Context; import android.graphics.Bitmap; import android.graphics.PointF; import android.media.FaceDetector; import org.opencv.android.Utils; import org.opencv.core.Core; import org.opencv.core.CvType; import org.opencv.core.Mat; import org.opencv.core.Rect; import org.opencv.imgcodecs.Imgcodecs; import org.opencv.imgproc.Imgproc; import org.opencv.utils.Converters; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.Eyes; import ch.zhaw.facerecognitionlibrary.Helpers.FaceDetection; import ch.zhaw.facerecognitionlibrary.Helpers.MatOperation; import ch.zhaw.facerecognitionlibrary.Helpers.PreferencesHelper; public class PreProcessor { private Context context; private int angle; private Mat img; private List<Mat> images; private Rect[] faces; private Eyes[] eyes; private FaceDetection faceDetection; public Context getContext(){ return context; } public PreProcessor(FaceDetection faceDetection, List<Mat> images, Context context){ this.faceDetection = faceDetection; this.images = images; this.context = context; } public void setFaces(PreProcessorFactory.PreprocessingMode preprocessingMode) { List<Mat> images = getImages(); PreferencesHelper preferencesHelper = new PreferencesHelper(context); if (preferencesHelper.getDetectionMethod()){ faces = faceDetection.getFaces(images.get(0)); angle = faceDetection.getAngle(); } else { Mat img = images.get(0); FaceDetector faceDetector = new FaceDetector(img.cols(), img.rows(), 1); Bitmap bmp = Bitmap.createBitmap(img.cols(), img.rows(), Bitmap.Config.RGB_565); Utils.matToBitmap(img, bmp); FaceDetector.Face[] facesAndroid = new FaceDetector.Face[1]; if (faceDetector.findFaces(bmp, facesAndroid) > 0){ faces = new Rect[facesAndroid.length]; for (int i=0; i<facesAndroid.length; i++){ PointF pointF = new PointF(); facesAndroid[i].getMidPoint(pointF); int xWidth = (int) (1.34 * facesAndroid[i].eyesDistance()); int yWidth = (int) (1.12 * facesAndroid[i].eyesDistance()); int dist = (int) (2.77 * facesAndroid[i].eyesDistance()); Rect face = new Rect((int) pointF.x - xWidth, (int) pointF.y - yWidth, dist, dist); faces[i] = face; } } } if (preprocessingMode == PreProcessorFactory.PreprocessingMode.RECOGNITION && preferencesHelper.getDetectionMethod()){ images.remove(0); images.add(faceDetection.getImg()); setImages(images); } } public void setFaces(Rect[] faces){ this.faces = faces; } public Eyes[] setEyes() { List<Mat> images = getImages(); eyes = new Eyes[images.size()]; for (int i=0; i<images.size(); i++){ Mat img = images.get(i); normalize0255(img); eyes[i] = faceDetection.getEyes(img); } return eyes; } public Eyes[] getEyes() { return eyes; } public Rect[] getFaces() { return faces; } public int getAngle() { return angle; } public void setAngle(int angle) { this.angle = angle; for (Mat img : images){ MatOperation.rotate_90n(img, angle); } } public Mat getImg() { return img; } public void setImages(List<Mat> images) { this.images = images; } public List<Mat> getImages() { return images; } public void setImg(Mat img) { this.img = img; } public void normalize0255(Mat norm){ Core.normalize(norm, norm, 0, 255, Core.NORM_MINMAX, CvType.CV_8UC1); } }"}]}}
{"project_id":222,"chunk_id":0,"content":{"main_file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/PreProcessor.java","main_file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor; import android.content.Context; import android.graphics.Bitmap; import android.graphics.PointF; import android.media.FaceDetector; import org.opencv.android.Utils; import org.opencv.core.Core; import org.opencv.core.CvType; import org.opencv.core.Mat; import org.opencv.core.Rect; import org.opencv.imgcodecs.Imgcodecs; import org.opencv.imgproc.Imgproc; import org.opencv.utils.Converters; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.Eyes; import ch.zhaw.facerecognitionlibrary.Helpers.FaceDetection; import ch.zhaw.facerecognitionlibrary.Helpers.MatOperation; import ch.zhaw.facerecognitionlibrary.Helpers.PreferencesHelper; public class PreProcessor { private Context context; private int angle; private Mat img; private List<Mat> images; private Rect[] faces; private Eyes[] eyes; private FaceDetection faceDetection; public Context getContext(){ return context; } public PreProcessor(FaceDetection faceDetection, List<Mat> images, Context context){ this.faceDetection = faceDetection; this.images = images; this.context = context; } public void setFaces(PreProcessorFactory.PreprocessingMode preprocessingMode) { List<Mat> images = getImages(); PreferencesHelper preferencesHelper = new PreferencesHelper(context); if (preferencesHelper.getDetectionMethod()){ faces = faceDetection.getFaces(images.get(0)); angle = faceDetection.getAngle(); } else { Mat img = images.get(0); FaceDetector faceDetector = new FaceDetector(img.cols(), img.rows(), 1); Bitmap bmp = Bitmap.createBitmap(img.cols(), img.rows(), Bitmap.Config.RGB_565); Utils.matToBitmap(img, bmp); FaceDetector.Face[] facesAndroid = new FaceDetector.Face[1]; if (faceDetector.findFaces(bmp, facesAndroid) > 0){ faces = new Rect[facesAndroid.length]; for (int i=0; i<facesAndroid.length; i++){ PointF pointF = new PointF(); facesAndroid[i].getMidPoint(pointF); int xWidth = (int) (1.34 * facesAndroid[i].eyesDistance()); int yWidth = (int) (1.12 * facesAndroid[i].eyesDistance()); int dist = (int) (2.77 * facesAndroid[i].eyesDistance()); Rect face = new Rect((int) pointF.x - xWidth, (int) pointF.y - yWidth, dist, dist); faces[i] = face; } } } if (preprocessingMode == PreProcessorFactory.PreprocessingMode.RECOGNITION && preferencesHelper.getDetectionMethod()){ images.remove(0); images.add(faceDetection.getImg()); setImages(images); } } public void setFaces(Rect[] faces){ this.faces = faces; } public Eyes[] setEyes() { List<Mat> images = getImages(); eyes = new Eyes[images.size()]; for (int i=0; i<images.size(); i++){ Mat img = images.get(i); normalize0255(img); eyes[i] = faceDetection.getEyes(img); } return eyes; } public Eyes[] getEyes() { return eyes; } public Rect[] getFaces() { return faces; } public int getAngle() { return angle; } public void setAngle(int angle) { this.angle = angle; for (Mat img : images){ MatOperation.rotate_90n(img, angle); } } public Mat getImg() { return img; } public void setImages(List<Mat> images) { this.images = images; } public List<Mat> getImages() { return images; } public void setImg(Mat img) { this.img = img; } public void normalize0255(Mat norm){ Core.normalize(norm, norm, 0, 255, Core.NORM_MINMAX, CvType.CV_8UC1); } }","dependencies":[{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/Eyes.java","file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import org.opencv.core.MatOfFloat; public class Eyes { double dist; MatOfFloat rightCenter; MatOfFloat leftCenter; double angle; public Eyes(double dist, MatOfFloat rightCenter, MatOfFloat leftCenter, double angle) { this.dist = dist; this.rightCenter = rightCenter; this.leftCenter = leftCenter; this.angle = angle; } public double getDist() { return dist; } public MatOfFloat getRightCenter() { return rightCenter; } public MatOfFloat getLeftCenter() { return leftCenter; } public double getAngle() { return angle; } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/FaceDetection.java","file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import android.content.Context; import android.content.res.AssetManager; import android.util.Log; import org.opencv.core.Core; import org.opencv.core.Mat; import org.opencv.core.MatOfFloat; import org.opencv.core.MatOfRect; import org.opencv.core.Rect; import org.opencv.core.Size; import org.opencv.objdetect.CascadeClassifier; import java.io.File; import java.io.FileOutputStream; import java.io.IOException; import java.io.InputStream; import java.util.List; public class FaceDetection { private Mat img; private int angle; private static final String TAG = \"Face Detection\"; private CascadeClassifier faceDetector; private CascadeClassifier leftEyeDetector; private CascadeClassifier rightEyeDetector; private double scaleFactor; private int minNeighbors; private int flags; public FaceDetection(Context context) { File cascadeDir = context.getDir(\"cascade\", Context.MODE_PRIVATE); PreferencesHelper preferencesHelper = new PreferencesHelper(context); faceDetector = setCascadeClassifier(context.getAssets(), cascadeDir, preferencesHelper.getFaceCascadeFile()); leftEyeDetector = setCascadeClassifier(context.getAssets(), cascadeDir, preferencesHelper.getLefteyeCascadeFile()); rightEyeDetector = setCascadeClassifier(context.getAssets(), cascadeDir, preferencesHelper.getRighteyeCascadeFile()); scaleFactor = preferencesHelper.getDetectionScaleFactor(); minNeighbors = preferencesHelper.getDetectionMinNeighbors(); flags = preferencesHelper.getDetectionFlags(); cascadeDir.delete(); } private CascadeClassifier setCascadeClassifier(AssetManager assetManager, File cascadeDir, String name){ CascadeClassifier cascadeClassifier; try { InputStream is = assetManager.open(name + \".xml\"); File mCascadeFile = new File(cascadeDir, name + \".xml\"); String path = getClassifierPath(mCascadeFile,is); cascadeClassifier = new CascadeClassifier(path); } catch (IOException e){ e.printStackTrace(); return null; } if (cascadeClassifier.empty()) { Log.e(TAG, \"Failed to load classifier: \" + name); cascadeClassifier = null; } return cascadeClassifier; } public void setCascadeClassifierForFaceDetector(Context context, String cascadeAssetName){ CascadeClassifier cascadeClassifier = setCascadeClassifier(context.getAssets(), context.getDir(\"cascade\", Context.MODE_PRIVATE), cascadeAssetName); faceDetector = cascadeClassifier; } public Rect[] getFaces(Mat img) { MatOfRect faces = new MatOfRect(); List<Rect> facesList = null; float mRelativeFaceSize = 0.2f; int mAbsoluteFaceSize = 0; if(faceDetector !=null){ angle = 0; for(int i=1; i<=4; i++){ int height = img.rows(); if (Math.round(height * mRelativeFaceSize) > 0) { mAbsoluteFaceSize = Math.round(height * mRelativeFaceSize); } faceDetector.detectMultiScale(img, faces, scaleFactor , minNeighbors, flags, new Size(mAbsoluteFaceSize,mAbsoluteFaceSize), new Size()); if(faces.empty()){ angle = 90 * i; MatOperation.rotate_90n(img, 90); } else { facesList = faces.toList(); for (Rect face : facesList){ if(!(0 <= face.x && 0 <= face.width && face.x + face.width <= img.cols() && 0 <= face.y && 0 <= face.height && face.y + face.height <= img.rows())){ facesList.remove(face); } } if(!(facesList.size()>0)){ return null; } this.img = img; break; } } } else { Log.e(TAG, \"Detection method is not selected!\"); } if(facesList != null){ return (Rect[])facesList.toArray(); } else { return null; } } public Eyes getEyes(Mat img){ double halfWidth = img.cols() / 2; double height = img.rows(); double[] values = new double[4]; values[0] = 0; values[1] = 0; values[2] = halfWidth; values[3] = height; Rect rightHalf = new Rect(values); values[0] = halfWidth; Rect leftHalf = new Rect(values); MatOfRect rightEyes = new MatOfRect(); MatOfRect leftEyes = new MatOfRect(); Mat rightHalfImg = img.submat(rightHalf); rightEyeDetector.detectMultiScale(rightHalfImg, rightEyes); Mat leftHalfImg = img.submat(leftHalf); leftEyeDetector.detectMultiScale(leftHalfImg, leftEyes); if (rightEyes.empty() || leftEyes.empty() || rightEyes.toArray().length > 1 || leftEyes.toArray().length > 1){ return null; } Rect rightEye = rightEyes.toArray()[0]; Rect leftEye = leftEyes.toArray()[0]; MatOfFloat rightPoint = new MatOfFloat(rightEye.x + rightEye.width / 2, rightEye.y + rightEye.height / 2); MatOfFloat leftPoint = new MatOfFloat(img.cols() / 2 + leftEye.x + leftEye.width / 2, leftEye.y + leftEye.height / 2); MatOfFloat diff = new MatOfFloat(); Core.subtract(leftPoint, rightPoint, diff); double angle = Core.fastAtan2(diff.toArray()[1], diff.toArray()[0]); double dist = Core.norm(leftPoint, rightPoint, Core.NORM_L2); Eyes eyes = new Eyes(dist, rightPoint, leftPoint, angle); return eyes; } private String getClassifierPath(File mCascadeFile, InputStream is){ try { FileOutputStream os = new FileOutputStream(mCascadeFile); byte[] buffer = new byte[4096]; int bytesRead; while ((bytesRead = is.read(buffer)) != -1) { os.write(buffer, 0, bytesRead); } is.close(); os.close(); } catch (IOException e) { e.printStackTrace(); Log.e(TAG, \"Failed to load cascade. Exception thrown: \" + e); } return mCascadeFile.getAbsolutePath(); } public Mat getImg() { return img; } public int getAngle() { return angle; } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/MatOperation.java","file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import org.opencv.core.Core; import org.opencv.core.CvType; import org.opencv.core.Mat; import org.opencv.core.MatOfPoint; import org.opencv.core.MatOfPoint2f; import org.opencv.core.Point; import org.opencv.core.Rect; import org.opencv.core.Scalar; import org.opencv.imgproc.Imgproc; public class MatOperation { private static final Scalar FACE_RECT_COLOR = new Scalar(0, 255, 0, 255); private static final int FONT_SIZE = 5; private static final int THICKNESS = 3; public static void rotate_90n(Mat img, int angle) { if(angle == 270 || angle == -90){ Core.transpose(img, img); Core.flip(img, img, 0); }else if(angle == 180 || angle == -180){ Core.flip(img, img, -1); }else if(angle == 90 || angle == -270){ Core.transpose(img, img); Core.flip(img, img, 1); } } public static Point drawRectangleOnPreview(Mat img, Rect face, boolean front_camera){ if(front_camera){ Rect mirroredFace = getMirroredFaceForFrontCamera(img, face); Imgproc.rectangle(img, mirroredFace.tl(), mirroredFace.br(), FACE_RECT_COLOR, THICKNESS); return mirroredFace.tl(); } else { Imgproc.rectangle(img, face.tl(), face.br(), FACE_RECT_COLOR, THICKNESS); return face.tl(); } } public static void drawRectangleAndLabelOnPreview(Mat img, Rect face, String label, boolean front_camera){ Point tl = drawRectangleOnPreview(img, face, front_camera); Imgproc.putText(img, label, tl, Core.FONT_HERSHEY_PLAIN, FONT_SIZE, FACE_RECT_COLOR, THICKNESS); } public static Rect[] rotateFaces(Mat img, Rect[] faces, int angle){ Point center = new Point(img.cols()/2, img.rows()/2); Mat rotMat = Imgproc.getRotationMatrix2D(center, angle, 1); rotMat.convertTo(rotMat, CvType.CV_32FC1); float scale = img.cols()/img.rows(); for(Rect face : faces){ Mat m = new Mat(3, 1, CvType.CV_32FC1); m.put(0,0,face.x); m.put(1,0,face.y); m.put(2,0,1); Mat res = Mat.zeros(2,1,CvType.CV_32FC1); Core.gemm(rotMat, m, 1, new Mat(), 0, res, 0); face.x = (int)res.get(0,0)[0]; face.y = (int)res.get(1,0)[0]; if(angle == 270 || angle == -90){ face.x = (int)(face.x * scale - face.width); face.x = face.x + face.width/4; face.y = face.y + face.height/4; }else if(angle == 180 || angle == -180){ face.x = face.x - face.width; face.y = face.y - face.height; }else if(angle == 90 || angle == -270){ face.y = (int)(face.y * scale - face.height); face.x = face.x - face.width/4; face.y = face.y - face.height/4; } } return faces; } public static Rect getMirroredFaceForFrontCamera(Mat img, Rect face){ int topLeftX = (int) (img.cols() - (face.tl().x + face.width)); int bottomRightX = (int) (img.cols() - (face.br().x) + face.width); Point tl = new Point(topLeftX, face.tl().y); Point br = new Point(bottomRightX, face.br().y); return new Rect(tl, br); } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/PreferencesHelper.java","file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import android.content.Context; import android.content.SharedPreferences; import android.content.res.Resources; import android.preference.PreferenceManager; import java.util.ArrayList; import java.util.Collections; import java.util.List; import java.util.Set; import ch.zhaw.facerecognitionlibrary.R; public class PreferencesHelper { public enum Usage {RECOGNITION, DETECTION}; SharedPreferences sharedPreferences; Resources resources; public PreferencesHelper(Context context){ sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context); resources = context.getResources(); } public String getClassificationMethod(){ return sharedPreferences.getString(\"key_classification_method\", resources.getString(R.string.eigenfaces)); } public boolean getClassificationMethodTFCaffe(){ return sharedPreferences.getBoolean(\"key_classificationMethodTFCaffe\", true); } public float getGamma(){ return Float.valueOf(sharedPreferences.getString(\"key_gamma\", resources.getString(R.string.gamma))); } public double[] getSigmas(){ String[] sigmasString = sharedPreferences.getString(\"key_sigmas\", resources.getString(R.string.sigmas)).split(\",\"); if(sigmasString.length != 2){ sigmasString = resources.getString(R.string.sigmas).split(\",\"); } double[] sigmas = new double[3]; for(int i=0; i<2; i++){ sigmas[i] = Double.parseDouble(sigmasString[i]); } return sigmas; } public boolean getEyeDetectionEnabled(){ return sharedPreferences.getBoolean(\"key_eye_detection\", true); } public List<String> getStandardPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_standard_pre\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_standard_pre\"); } else { return new ArrayList<>(); } } public List<String> getBrightnessPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_brightness\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_brightness\"); } else { return new ArrayList<>(); } } public List<String> getContoursPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_contours\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_contours\"); } else { return new ArrayList<>(); } } public List<String> getContrastPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_contrast\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_contrast\"); } else { return new ArrayList<>(); } } public List<String> getStandardPostprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_standard_post\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_standard_post\"); } else { return new ArrayList<>(); } } private List<String> getPreferenceList(String key){ Set<String> set = sharedPreferences.getStringSet(key, null); ArrayList<String> list; if(set != null) { list = new ArrayList<String>(set); Collections.sort(list); return list; } else { return new ArrayList<>(); } } public String getCaffeModelFile(){ return sharedPreferences.getString(\"key_modelFileCaffe\", resources.getString(R.string.modelFileCaffe)); } public String getCaffeWeightsFile(){ return sharedPreferences.getString(\"key_weightsFileCaffe\", resources.getString(R.string.weightsFileCaffe)); } public String getCaffeOutputLayer(){ return sharedPreferences.getString(\"key_outputLayerCaffe\", resources.getString(R.string.weightsFileCaffe)); } public float[] getCaffeMeanValues(){ String[] meanValuesString = sharedPreferences.getString(\"key_meanValuesCaffe\", resources.getString(R.string.meanValuesCaffe)).split(\",\"); if(meanValuesString.length != 3){ meanValuesString = resources.getString(R.string.meanValuesCaffe).split(\",\"); } float[] meanValues = new float[3]; for(int i=0; i<3; i++){ meanValues[i] = Float.parseFloat(meanValuesString[i]); } return meanValues; } public String getSvmTrainOptions(){ return sharedPreferences.getString(\"key_svmTrainOptions\", \"-t 0 \"); } public int getK(){ return Integer.valueOf(sharedPreferences.getString(\"key_K\", \"20\")); } public int getN(){ return Integer.valueOf(sharedPreferences.getString(\"key_N\", \"25\")); } public int getFaceSize(){ return Integer.valueOf(sharedPreferences.getString(\"key_faceSize\", \"160\")); } public int getTensorFlowInputSize(){ return Integer.valueOf(sharedPreferences.getString(\"key_inputSize\", \"160\")); } public int getTensorFlowInputChannels(){ return Integer.valueOf(sharedPreferences.getString(\"key_inputChannels\", \"3\")); } public int getTensorFlowImageMean(){ return Integer.valueOf(sharedPreferences.getString(\"key_imageMean\", \"128\")); } public int getTensorFlowImageStd(){ return Integer.valueOf(sharedPreferences.getString(\"key_imageStd\", \"128\")); } public int getTensorFlowOutputSize(){ return Integer.valueOf(sharedPreferences.getString(\"key_outputSize\", \"128\")); } public String getTensorFlowInputLayer(){ return sharedPreferences.getString(\"key_inputLayer\", \"input\"); } public String getTensorFlowOutputLayer(){ return sharedPreferences.getString(\"key_outputLayer\", \"embeddings\"); } public String getTensorFlowModelFile(){ return sharedPreferences.getString(\"key_modelFileTensorFlow\", \"facenet.pb\"); } public float getPCAThreshold(){ return Float.valueOf(sharedPreferences.getString(\"key_pca_threshold\", \"0.98f\")); } public String getFaceCascadeFile(){ return sharedPreferences.getString(\"key_face_cascade_file\", resources.getString(R.string.haarcascade_alt2)); } public String getLefteyeCascadeFile(){ return sharedPreferences.getString(\"key_lefteye_cascade_file\", resources.getString(R.string.haarcascade_lefteye)); } public String getRighteyeCascadeFile(){ return sharedPreferences.getString(\"key_righteye_cascade_file\", resources.getString(R.string.haarcascade_righteye)); } public double getDetectionScaleFactor(){ return Double.parseDouble(sharedPreferences.getString(\"key_scaleFactor\", \"1.1\")); } public int getDetectionMinNeighbors(){ return Integer.parseInt(sharedPreferences.getString(\"key_minNeighbors\", \"3\")); } public int getDetectionFlags(){ return Integer.parseInt(sharedPreferences.getString(\"key_flags\", \"2\")); } public boolean getDetectionMethod(){ return sharedPreferences.getBoolean(\"key_detection_method\", true); } }"}]}}
{"project_id":222,"chunk_id":1,"content":{"main_file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/PreProcessor.java","main_file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor; import android.content.Context; import android.graphics.Bitmap; import android.graphics.PointF; import android.media.FaceDetector; import org.opencv.android.Utils; import org.opencv.core.Core; import org.opencv.core.CvType; import org.opencv.core.Mat; import org.opencv.core.Rect; import org.opencv.imgcodecs.Imgcodecs; import org.opencv.imgproc.Imgproc; import org.opencv.utils.Converters; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.Eyes; import ch.zhaw.facerecognitionlibrary.Helpers.FaceDetection; import ch.zhaw.facerecognitionlibrary.Helpers.MatOperation; import ch.zhaw.facerecognitionlibrary.Helpers.PreferencesHelper; public class PreProcessor { private Context context; private int angle; private Mat img; private List<Mat> images; private Rect[] faces; private Eyes[] eyes; private FaceDetection faceDetection; public Context getContext(){ return context; } public PreProcessor(FaceDetection faceDetection, List<Mat> images, Context context){ this.faceDetection = faceDetection; this.images = images; this.context = context; } public void setFaces(PreProcessorFactory.PreprocessingMode preprocessingMode) { List<Mat> images = getImages(); PreferencesHelper preferencesHelper = new PreferencesHelper(context); if (preferencesHelper.getDetectionMethod()){ faces = faceDetection.getFaces(images.get(0)); angle = faceDetection.getAngle(); } else { Mat img = images.get(0); FaceDetector faceDetector = new FaceDetector(img.cols(), img.rows(), 1); Bitmap bmp = Bitmap.createBitmap(img.cols(), img.rows(), Bitmap.Config.RGB_565); Utils.matToBitmap(img, bmp); FaceDetector.Face[] facesAndroid = new FaceDetector.Face[1]; if (faceDetector.findFaces(bmp, facesAndroid) > 0){ faces = new Rect[facesAndroid.length]; for (int i=0; i<facesAndroid.length; i++){ PointF pointF = new PointF(); facesAndroid[i].getMidPoint(pointF); int xWidth = (int) (1.34 * facesAndroid[i].eyesDistance()); int yWidth = (int) (1.12 * facesAndroid[i].eyesDistance()); int dist = (int) (2.77 * facesAndroid[i].eyesDistance()); Rect face = new Rect((int) pointF.x - xWidth, (int) pointF.y - yWidth, dist, dist); faces[i] = face; } } } if (preprocessingMode == PreProcessorFactory.PreprocessingMode.RECOGNITION && preferencesHelper.getDetectionMethod()){ images.remove(0); images.add(faceDetection.getImg()); setImages(images); } } public void setFaces(Rect[] faces){ this.faces = faces; } public Eyes[] setEyes() { List<Mat> images = getImages(); eyes = new Eyes[images.size()]; for (int i=0; i<images.size(); i++){ Mat img = images.get(i); normalize0255(img); eyes[i] = faceDetection.getEyes(img); } return eyes; } public Eyes[] getEyes() { return eyes; } public Rect[] getFaces() { return faces; } public int getAngle() { return angle; } public void setAngle(int angle) { this.angle = angle; for (Mat img : images){ MatOperation.rotate_90n(img, angle); } } public Mat getImg() { return img; } public void setImages(List<Mat> images) { this.images = images; } public List<Mat> getImages() { return images; } public void setImg(Mat img) { this.img = img; } public void normalize0255(Mat norm){ Core.normalize(norm, norm, 0, 255, Core.NORM_MINMAX, CvType.CV_8UC1); } }","dependencies":[{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/PreProcessorFactory.java","file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor; import android.content.Context; import android.content.res.Resources; import android.util.Log; import org.opencv.core.Mat; import org.opencv.core.Rect; import java.util.ArrayList; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.Eyes; import ch.zhaw.facerecognitionlibrary.Helpers.FaceDetection; import ch.zhaw.facerecognitionlibrary.Helpers.PreferencesHelper; import ch.zhaw.facerecognitionlibrary.PreProcessor.BrightnessCorrection.GammaCorrection; import ch.zhaw.facerecognitionlibrary.PreProcessor.Contours.DifferenceOfGaussian; import ch.zhaw.facerecognitionlibrary.PreProcessor.Contours.LocalBinaryPattern; import ch.zhaw.facerecognitionlibrary.PreProcessor.Contours.Masking; import ch.zhaw.facerecognitionlibrary.PreProcessor.ContrastAdjustment.HistogrammEqualization; import ch.zhaw.facerecognitionlibrary.PreProcessor.StandardPostprocessing.Resize; import ch.zhaw.facerecognitionlibrary.PreProcessor.StandardPreprocessing.Crop; import ch.zhaw.facerecognitionlibrary.PreProcessor.StandardPreprocessing.EyeAlignment; import ch.zhaw.facerecognitionlibrary.PreProcessor.StandardPreprocessing.GrayScale; import ch.zhaw.facerecognitionlibrary.R; public class PreProcessorFactory { private Context context; private PreferencesHelper preferencesHelper; private Resources resources; public enum PreprocessingMode {DETECTION, RECOGNITION}; private PreProcessor preProcessorRecognition; private PreProcessor preProcessorDetection; private List<Mat> images; public CommandFactory commandFactory; private FaceDetection faceDetection; private boolean eyeDetectionEnabled; public PreProcessorFactory(Context context) { this.context = context; this.faceDetection = new FaceDetection(context); preferencesHelper = new PreferencesHelper(context); resources = context.getResources(); eyeDetectionEnabled = preferencesHelper.getEyeDetectionEnabled(); commandFactory = new CommandFactory(); commandFactory.addCommand(resources.getString(R.string.grayscale), new GrayScale()); commandFactory.addCommand(resources.getString(R.string.eyeAlignment), new EyeAlignment()); commandFactory.addCommand(resources.getString(R.string.crop), new Crop()); commandFactory.addCommand(resources.getString(R.string.gammaCorrection), new GammaCorrection(preferencesHelper.getGamma())); commandFactory.addCommand(resources.getString(R.string.doG), new DifferenceOfGaussian(preferencesHelper.getSigmas())); commandFactory.addCommand(resources.getString(R.string.masking), new Masking()); commandFactory.addCommand(resources.getString(R.string.histogrammEqualization), new HistogrammEqualization()); commandFactory.addCommand(resources.getString(R.string.resize), new Resize()); commandFactory.addCommand(resources.getString(R.string.lbp), new LocalBinaryPattern()); } public List<Mat> getCroppedImage(Mat img){ preProcessorDetection = new PreProcessor(faceDetection, getCopiedImageList(img), context); List<String> preprocessingsDetection = getPreprocessings(PreferencesHelper.Usage.DETECTION); images = new ArrayList<Mat>(); images.add(img); preProcessorRecognition = new PreProcessor(faceDetection, images, context); try { preprocess(preProcessorDetection, preprocessingsDetection); preProcessorRecognition.setFaces(PreprocessingMode.RECOGNITION); preProcessorRecognition = commandFactory.executeCommand(resources.getString(R.string.crop), preProcessorRecognition); if (eyeDetectionEnabled) { Eyes[] eyes = preProcessorRecognition.setEyes(); if (eyes == null || eyes[0] == null){ return null; } } preProcessorRecognition.setImages(Resize.preprocessImage(preProcessorRecognition.getImages(), preferencesHelper.getFaceSize())); } catch (NullPointerException e){ Log.d(\"getCroppedImage\", \"No face detected\"); return null; } return preProcessorRecognition.getImages(); } public List<Mat> getProcessedImage(Mat img, PreprocessingMode preprocessingMode) throws NullPointerException { preProcessorDetection = new PreProcessor(faceDetection, getCopiedImageList(img), context); images = new ArrayList<Mat>(); images.add(img); preProcessorRecognition = new PreProcessor(faceDetection, images, context); try { preprocess(preProcessorDetection, getPreprocessings(PreferencesHelper.Usage.DETECTION)); preProcessorDetection.setFaces(preprocessingMode); preProcessorRecognition.setFaces(preProcessorDetection.getFaces()); preProcessorRecognition.setAngle(preProcessorDetection.getAngle()); preProcessorRecognition = commandFactory.executeCommand(resources.getString(R.string.crop), preProcessorRecognition); if (eyeDetectionEnabled) { Eyes[] eyes = preProcessorRecognition.setEyes(); if (eyes == null || eyes[0] == null){ return null; } } if (preprocessingMode == PreprocessingMode.RECOGNITION){ preprocess(preProcessorRecognition, getPreprocessings(PreferencesHelper.Usage.RECOGNITION)); } } catch (NullPointerException e){ Log.d(\"getProcessedImage\", \"No face detected\"); return null; } if (preprocessingMode == PreprocessingMode.DETECTION){ return preProcessorDetection.getImages(); } else { return preProcessorRecognition.getImages(); } } private List<String> getPreprocessings(PreferencesHelper.Usage usage){ ArrayList<String> preprocessings = new ArrayList<String>(); preprocessings.addAll(preferencesHelper.getStandardPreprocessing(usage)); preprocessings.addAll(preferencesHelper.getBrightnessPreprocessing(usage)); preprocessings.addAll(preferencesHelper.getContoursPreprocessing(usage)); preprocessings.addAll(preferencesHelper.getContrastPreprocessing(usage)); preprocessings.addAll(preferencesHelper.getStandardPostprocessing(usage)); return preprocessings; } private void preprocess(PreProcessor preProcessor, List<String> preprocessings){ for (String name : preprocessings){ preProcessor = commandFactory.executeCommand(name, preProcessor); } } public Rect[] getFacesForRecognition() { if(preProcessorRecognition != null){ return preProcessorRecognition.getFaces(); } else { return null; } } private List<Mat> getCopiedImageList(Mat img){ List<Mat> images = new ArrayList<Mat>(); Mat imgCopy = new Mat(); img.copyTo(imgCopy); images.add(imgCopy); return images; } public int getAngleForRecognition(){ return preProcessorRecognition.getAngle(); } public void setCascadeClassifierForFaceDetector(String cascadeAssetName){ faceDetection.setCascadeClassifierForFaceDetector(context, cascadeAssetName); } }"}]}}
{"project_id":222,"chunk_id":0,"content":{"main_file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/PreProcessorFactory.java","main_file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor; import android.content.Context; import android.content.res.Resources; import android.util.Log; import org.opencv.core.Mat; import org.opencv.core.Rect; import java.util.ArrayList; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.Eyes; import ch.zhaw.facerecognitionlibrary.Helpers.FaceDetection; import ch.zhaw.facerecognitionlibrary.Helpers.PreferencesHelper; import ch.zhaw.facerecognitionlibrary.PreProcessor.BrightnessCorrection.GammaCorrection; import ch.zhaw.facerecognitionlibrary.PreProcessor.Contours.DifferenceOfGaussian; import ch.zhaw.facerecognitionlibrary.PreProcessor.Contours.LocalBinaryPattern; import ch.zhaw.facerecognitionlibrary.PreProcessor.Contours.Masking; import ch.zhaw.facerecognitionlibrary.PreProcessor.ContrastAdjustment.HistogrammEqualization; import ch.zhaw.facerecognitionlibrary.PreProcessor.StandardPostprocessing.Resize; import ch.zhaw.facerecognitionlibrary.PreProcessor.StandardPreprocessing.Crop; import ch.zhaw.facerecognitionlibrary.PreProcessor.StandardPreprocessing.EyeAlignment; import ch.zhaw.facerecognitionlibrary.PreProcessor.StandardPreprocessing.GrayScale; import ch.zhaw.facerecognitionlibrary.R; public class PreProcessorFactory { private Context context; private PreferencesHelper preferencesHelper; private Resources resources; public enum PreprocessingMode {DETECTION, RECOGNITION}; private PreProcessor preProcessorRecognition; private PreProcessor preProcessorDetection; private List<Mat> images; public CommandFactory commandFactory; private FaceDetection faceDetection; private boolean eyeDetectionEnabled; public PreProcessorFactory(Context context) { this.context = context; this.faceDetection = new FaceDetection(context); preferencesHelper = new PreferencesHelper(context); resources = context.getResources(); eyeDetectionEnabled = preferencesHelper.getEyeDetectionEnabled(); commandFactory = new CommandFactory(); commandFactory.addCommand(resources.getString(R.string.grayscale), new GrayScale()); commandFactory.addCommand(resources.getString(R.string.eyeAlignment), new EyeAlignment()); commandFactory.addCommand(resources.getString(R.string.crop), new Crop()); commandFactory.addCommand(resources.getString(R.string.gammaCorrection), new GammaCorrection(preferencesHelper.getGamma())); commandFactory.addCommand(resources.getString(R.string.doG), new DifferenceOfGaussian(preferencesHelper.getSigmas())); commandFactory.addCommand(resources.getString(R.string.masking), new Masking()); commandFactory.addCommand(resources.getString(R.string.histogrammEqualization), new HistogrammEqualization()); commandFactory.addCommand(resources.getString(R.string.resize), new Resize()); commandFactory.addCommand(resources.getString(R.string.lbp), new LocalBinaryPattern()); } public List<Mat> getCroppedImage(Mat img){ preProcessorDetection = new PreProcessor(faceDetection, getCopiedImageList(img), context); List<String> preprocessingsDetection = getPreprocessings(PreferencesHelper.Usage.DETECTION); images = new ArrayList<Mat>(); images.add(img); preProcessorRecognition = new PreProcessor(faceDetection, images, context); try { preprocess(preProcessorDetection, preprocessingsDetection); preProcessorRecognition.setFaces(PreprocessingMode.RECOGNITION); preProcessorRecognition = commandFactory.executeCommand(resources.getString(R.string.crop), preProcessorRecognition); if (eyeDetectionEnabled) { Eyes[] eyes = preProcessorRecognition.setEyes(); if (eyes == null || eyes[0] == null){ return null; } } preProcessorRecognition.setImages(Resize.preprocessImage(preProcessorRecognition.getImages(), preferencesHelper.getFaceSize())); } catch (NullPointerException e){ Log.d(\"getCroppedImage\", \"No face detected\"); return null; } return preProcessorRecognition.getImages(); } public List<Mat> getProcessedImage(Mat img, PreprocessingMode preprocessingMode) throws NullPointerException { preProcessorDetection = new PreProcessor(faceDetection, getCopiedImageList(img), context); images = new ArrayList<Mat>(); images.add(img); preProcessorRecognition = new PreProcessor(faceDetection, images, context); try { preprocess(preProcessorDetection, getPreprocessings(PreferencesHelper.Usage.DETECTION)); preProcessorDetection.setFaces(preprocessingMode); preProcessorRecognition.setFaces(preProcessorDetection.getFaces()); preProcessorRecognition.setAngle(preProcessorDetection.getAngle()); preProcessorRecognition = commandFactory.executeCommand(resources.getString(R.string.crop), preProcessorRecognition); if (eyeDetectionEnabled) { Eyes[] eyes = preProcessorRecognition.setEyes(); if (eyes == null || eyes[0] == null){ return null; } } if (preprocessingMode == PreprocessingMode.RECOGNITION){ preprocess(preProcessorRecognition, getPreprocessings(PreferencesHelper.Usage.RECOGNITION)); } } catch (NullPointerException e){ Log.d(\"getProcessedImage\", \"No face detected\"); return null; } if (preprocessingMode == PreprocessingMode.DETECTION){ return preProcessorDetection.getImages(); } else { return preProcessorRecognition.getImages(); } } private List<String> getPreprocessings(PreferencesHelper.Usage usage){ ArrayList<String> preprocessings = new ArrayList<String>(); preprocessings.addAll(preferencesHelper.getStandardPreprocessing(usage)); preprocessings.addAll(preferencesHelper.getBrightnessPreprocessing(usage)); preprocessings.addAll(preferencesHelper.getContoursPreprocessing(usage)); preprocessings.addAll(preferencesHelper.getContrastPreprocessing(usage)); preprocessings.addAll(preferencesHelper.getStandardPostprocessing(usage)); return preprocessings; } private void preprocess(PreProcessor preProcessor, List<String> preprocessings){ for (String name : preprocessings){ preProcessor = commandFactory.executeCommand(name, preProcessor); } } public Rect[] getFacesForRecognition() { if(preProcessorRecognition != null){ return preProcessorRecognition.getFaces(); } else { return null; } } private List<Mat> getCopiedImageList(Mat img){ List<Mat> images = new ArrayList<Mat>(); Mat imgCopy = new Mat(); img.copyTo(imgCopy); images.add(imgCopy); return images; } public int getAngleForRecognition(){ return preProcessorRecognition.getAngle(); } public void setCascadeClassifierForFaceDetector(String cascadeAssetName){ faceDetection.setCascadeClassifierForFaceDetector(context, cascadeAssetName); } }","dependencies":[{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/Eyes.java","file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import org.opencv.core.MatOfFloat; public class Eyes { double dist; MatOfFloat rightCenter; MatOfFloat leftCenter; double angle; public Eyes(double dist, MatOfFloat rightCenter, MatOfFloat leftCenter, double angle) { this.dist = dist; this.rightCenter = rightCenter; this.leftCenter = leftCenter; this.angle = angle; } public double getDist() { return dist; } public MatOfFloat getRightCenter() { return rightCenter; } public MatOfFloat getLeftCenter() { return leftCenter; } public double getAngle() { return angle; } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/FaceDetection.java","file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import android.content.Context; import android.content.res.AssetManager; import android.util.Log; import org.opencv.core.Core; import org.opencv.core.Mat; import org.opencv.core.MatOfFloat; import org.opencv.core.MatOfRect; import org.opencv.core.Rect; import org.opencv.core.Size; import org.opencv.objdetect.CascadeClassifier; import java.io.File; import java.io.FileOutputStream; import java.io.IOException; import java.io.InputStream; import java.util.List; public class FaceDetection { private Mat img; private int angle; private static final String TAG = \"Face Detection\"; private CascadeClassifier faceDetector; private CascadeClassifier leftEyeDetector; private CascadeClassifier rightEyeDetector; private double scaleFactor; private int minNeighbors; private int flags; public FaceDetection(Context context) { File cascadeDir = context.getDir(\"cascade\", Context.MODE_PRIVATE); PreferencesHelper preferencesHelper = new PreferencesHelper(context); faceDetector = setCascadeClassifier(context.getAssets(), cascadeDir, preferencesHelper.getFaceCascadeFile()); leftEyeDetector = setCascadeClassifier(context.getAssets(), cascadeDir, preferencesHelper.getLefteyeCascadeFile()); rightEyeDetector = setCascadeClassifier(context.getAssets(), cascadeDir, preferencesHelper.getRighteyeCascadeFile()); scaleFactor = preferencesHelper.getDetectionScaleFactor(); minNeighbors = preferencesHelper.getDetectionMinNeighbors(); flags = preferencesHelper.getDetectionFlags(); cascadeDir.delete(); } private CascadeClassifier setCascadeClassifier(AssetManager assetManager, File cascadeDir, String name){ CascadeClassifier cascadeClassifier; try { InputStream is = assetManager.open(name + \".xml\"); File mCascadeFile = new File(cascadeDir, name + \".xml\"); String path = getClassifierPath(mCascadeFile,is); cascadeClassifier = new CascadeClassifier(path); } catch (IOException e){ e.printStackTrace(); return null; } if (cascadeClassifier.empty()) { Log.e(TAG, \"Failed to load classifier: \" + name); cascadeClassifier = null; } return cascadeClassifier; } public void setCascadeClassifierForFaceDetector(Context context, String cascadeAssetName){ CascadeClassifier cascadeClassifier = setCascadeClassifier(context.getAssets(), context.getDir(\"cascade\", Context.MODE_PRIVATE), cascadeAssetName); faceDetector = cascadeClassifier; } public Rect[] getFaces(Mat img) { MatOfRect faces = new MatOfRect(); List<Rect> facesList = null; float mRelativeFaceSize = 0.2f; int mAbsoluteFaceSize = 0; if(faceDetector !=null){ angle = 0; for(int i=1; i<=4; i++){ int height = img.rows(); if (Math.round(height * mRelativeFaceSize) > 0) { mAbsoluteFaceSize = Math.round(height * mRelativeFaceSize); } faceDetector.detectMultiScale(img, faces, scaleFactor , minNeighbors, flags, new Size(mAbsoluteFaceSize,mAbsoluteFaceSize), new Size()); if(faces.empty()){ angle = 90 * i; MatOperation.rotate_90n(img, 90); } else { facesList = faces.toList(); for (Rect face : facesList){ if(!(0 <= face.x && 0 <= face.width && face.x + face.width <= img.cols() && 0 <= face.y && 0 <= face.height && face.y + face.height <= img.rows())){ facesList.remove(face); } } if(!(facesList.size()>0)){ return null; } this.img = img; break; } } } else { Log.e(TAG, \"Detection method is not selected!\"); } if(facesList != null){ return (Rect[])facesList.toArray(); } else { return null; } } public Eyes getEyes(Mat img){ double halfWidth = img.cols() / 2; double height = img.rows(); double[] values = new double[4]; values[0] = 0; values[1] = 0; values[2] = halfWidth; values[3] = height; Rect rightHalf = new Rect(values); values[0] = halfWidth; Rect leftHalf = new Rect(values); MatOfRect rightEyes = new MatOfRect(); MatOfRect leftEyes = new MatOfRect(); Mat rightHalfImg = img.submat(rightHalf); rightEyeDetector.detectMultiScale(rightHalfImg, rightEyes); Mat leftHalfImg = img.submat(leftHalf); leftEyeDetector.detectMultiScale(leftHalfImg, leftEyes); if (rightEyes.empty() || leftEyes.empty() || rightEyes.toArray().length > 1 || leftEyes.toArray().length > 1){ return null; } Rect rightEye = rightEyes.toArray()[0]; Rect leftEye = leftEyes.toArray()[0]; MatOfFloat rightPoint = new MatOfFloat(rightEye.x + rightEye.width / 2, rightEye.y + rightEye.height / 2); MatOfFloat leftPoint = new MatOfFloat(img.cols() / 2 + leftEye.x + leftEye.width / 2, leftEye.y + leftEye.height / 2); MatOfFloat diff = new MatOfFloat(); Core.subtract(leftPoint, rightPoint, diff); double angle = Core.fastAtan2(diff.toArray()[1], diff.toArray()[0]); double dist = Core.norm(leftPoint, rightPoint, Core.NORM_L2); Eyes eyes = new Eyes(dist, rightPoint, leftPoint, angle); return eyes; } private String getClassifierPath(File mCascadeFile, InputStream is){ try { FileOutputStream os = new FileOutputStream(mCascadeFile); byte[] buffer = new byte[4096]; int bytesRead; while ((bytesRead = is.read(buffer)) != -1) { os.write(buffer, 0, bytesRead); } is.close(); os.close(); } catch (IOException e) { e.printStackTrace(); Log.e(TAG, \"Failed to load cascade. Exception thrown: \" + e); } return mCascadeFile.getAbsolutePath(); } public Mat getImg() { return img; } public int getAngle() { return angle; } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/PreferencesHelper.java","file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import android.content.Context; import android.content.SharedPreferences; import android.content.res.Resources; import android.preference.PreferenceManager; import java.util.ArrayList; import java.util.Collections; import java.util.List; import java.util.Set; import ch.zhaw.facerecognitionlibrary.R; public class PreferencesHelper { public enum Usage {RECOGNITION, DETECTION}; SharedPreferences sharedPreferences; Resources resources; public PreferencesHelper(Context context){ sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context); resources = context.getResources(); } public String getClassificationMethod(){ return sharedPreferences.getString(\"key_classification_method\", resources.getString(R.string.eigenfaces)); } public boolean getClassificationMethodTFCaffe(){ return sharedPreferences.getBoolean(\"key_classificationMethodTFCaffe\", true); } public float getGamma(){ return Float.valueOf(sharedPreferences.getString(\"key_gamma\", resources.getString(R.string.gamma))); } public double[] getSigmas(){ String[] sigmasString = sharedPreferences.getString(\"key_sigmas\", resources.getString(R.string.sigmas)).split(\",\"); if(sigmasString.length != 2){ sigmasString = resources.getString(R.string.sigmas).split(\",\"); } double[] sigmas = new double[3]; for(int i=0; i<2; i++){ sigmas[i] = Double.parseDouble(sigmasString[i]); } return sigmas; } public boolean getEyeDetectionEnabled(){ return sharedPreferences.getBoolean(\"key_eye_detection\", true); } public List<String> getStandardPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_standard_pre\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_standard_pre\"); } else { return new ArrayList<>(); } } public List<String> getBrightnessPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_brightness\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_brightness\"); } else { return new ArrayList<>(); } } public List<String> getContoursPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_contours\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_contours\"); } else { return new ArrayList<>(); } } public List<String> getContrastPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_contrast\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_contrast\"); } else { return new ArrayList<>(); } } public List<String> getStandardPostprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_standard_post\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_standard_post\"); } else { return new ArrayList<>(); } } private List<String> getPreferenceList(String key){ Set<String> set = sharedPreferences.getStringSet(key, null); ArrayList<String> list; if(set != null) { list = new ArrayList<String>(set); Collections.sort(list); return list; } else { return new ArrayList<>(); } } public String getCaffeModelFile(){ return sharedPreferences.getString(\"key_modelFileCaffe\", resources.getString(R.string.modelFileCaffe)); } public String getCaffeWeightsFile(){ return sharedPreferences.getString(\"key_weightsFileCaffe\", resources.getString(R.string.weightsFileCaffe)); } public String getCaffeOutputLayer(){ return sharedPreferences.getString(\"key_outputLayerCaffe\", resources.getString(R.string.weightsFileCaffe)); } public float[] getCaffeMeanValues(){ String[] meanValuesString = sharedPreferences.getString(\"key_meanValuesCaffe\", resources.getString(R.string.meanValuesCaffe)).split(\",\"); if(meanValuesString.length != 3){ meanValuesString = resources.getString(R.string.meanValuesCaffe).split(\",\"); } float[] meanValues = new float[3]; for(int i=0; i<3; i++){ meanValues[i] = Float.parseFloat(meanValuesString[i]); } return meanValues; } public String getSvmTrainOptions(){ return sharedPreferences.getString(\"key_svmTrainOptions\", \"-t 0 \"); } public int getK(){ return Integer.valueOf(sharedPreferences.getString(\"key_K\", \"20\")); } public int getN(){ return Integer.valueOf(sharedPreferences.getString(\"key_N\", \"25\")); } public int getFaceSize(){ return Integer.valueOf(sharedPreferences.getString(\"key_faceSize\", \"160\")); } public int getTensorFlowInputSize(){ return Integer.valueOf(sharedPreferences.getString(\"key_inputSize\", \"160\")); } public int getTensorFlowInputChannels(){ return Integer.valueOf(sharedPreferences.getString(\"key_inputChannels\", \"3\")); } public int getTensorFlowImageMean(){ return Integer.valueOf(sharedPreferences.getString(\"key_imageMean\", \"128\")); } public int getTensorFlowImageStd(){ return Integer.valueOf(sharedPreferences.getString(\"key_imageStd\", \"128\")); } public int getTensorFlowOutputSize(){ return Integer.valueOf(sharedPreferences.getString(\"key_outputSize\", \"128\")); } public String getTensorFlowInputLayer(){ return sharedPreferences.getString(\"key_inputLayer\", \"input\"); } public String getTensorFlowOutputLayer(){ return sharedPreferences.getString(\"key_outputLayer\", \"embeddings\"); } public String getTensorFlowModelFile(){ return sharedPreferences.getString(\"key_modelFileTensorFlow\", \"facenet.pb\"); } public float getPCAThreshold(){ return Float.valueOf(sharedPreferences.getString(\"key_pca_threshold\", \"0.98f\")); } public String getFaceCascadeFile(){ return sharedPreferences.getString(\"key_face_cascade_file\", resources.getString(R.string.haarcascade_alt2)); } public String getLefteyeCascadeFile(){ return sharedPreferences.getString(\"key_lefteye_cascade_file\", resources.getString(R.string.haarcascade_lefteye)); } public String getRighteyeCascadeFile(){ return sharedPreferences.getString(\"key_righteye_cascade_file\", resources.getString(R.string.haarcascade_righteye)); } public double getDetectionScaleFactor(){ return Double.parseDouble(sharedPreferences.getString(\"key_scaleFactor\", \"1.1\")); } public int getDetectionMinNeighbors(){ return Integer.parseInt(sharedPreferences.getString(\"key_minNeighbors\", \"3\")); } public int getDetectionFlags(){ return Integer.parseInt(sharedPreferences.getString(\"key_flags\", \"2\")); } public boolean getDetectionMethod(){ return sharedPreferences.getBoolean(\"key_detection_method\", true); } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/BrightnessCorrection/GammaCorrection.java","file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor.BrightnessCorrection; import org.opencv.core.Core; import org.opencv.core.CvType; import org.opencv.core.Mat; import org.opencv.core.Scalar; import java.util.ArrayList; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.FileHelper; import ch.zhaw.facerecognitionlibrary.Helpers.MatName; import ch.zhaw.facerecognitionlibrary.PreProcessor.Command; import ch.zhaw.facerecognitionlibrary.PreProcessor.PreProcessor; public class GammaCorrection implements Command { private double gamma; private static final Scalar INT_MAX = new Scalar(255); public GammaCorrection(double gamma) { this.gamma = gamma; } public PreProcessor preprocessImage(PreProcessor preProcessor) { List<Mat> images = preProcessor.getImages(); List<Mat> processed = new ArrayList<Mat>(); for (Mat img : images){ img.convertTo(img, CvType.CV_32F); Core.divide(img, INT_MAX, img); Core.pow(img, gamma, img); Core.multiply(img, INT_MAX, img); img.convertTo(img, CvType.CV_8U); processed.add(img); } preProcessor.setImages(processed); return preProcessor; } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/CommandFactory.java","file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor; import java.util.HashMap; public final class CommandFactory { private final HashMap<String, Command> commands; public CommandFactory() { commands = new HashMap<>(); } public void addCommand(String name, Command command) { commands.put(name, command); } public PreProcessor executeCommand(String name, PreProcessor preProcessor) { if (commands.containsKey(name)) { return commands.get(name).preprocessImage(preProcessor); } else { return null; } } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/Contours/DifferenceOfGaussian.java","file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor.Contours; import org.opencv.core.Core; import org.opencv.core.Mat; import org.opencv.core.Size; import org.opencv.imgproc.Imgproc; import java.util.ArrayList; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.FileHelper; import ch.zhaw.facerecognitionlibrary.Helpers.MatName; import ch.zhaw.facerecognitionlibrary.PreProcessor.Command; import ch.zhaw.facerecognitionlibrary.PreProcessor.PreProcessor; public class DifferenceOfGaussian implements Command { private double sigma1; private double sigma2; private Size size1; private Size size2; public DifferenceOfGaussian(double[] sigmas) { this.sigma1 = sigmas[0]; this.sigma2 = sigmas[1]; this.size1 = new Size(2 * Math.ceil(2*sigma1) + 1, 2 * Math.ceil(2*sigma1) + 1); this.size2 = new Size(2 * Math.ceil(2*sigma2) + 1, 2 * Math.ceil(2*sigma2) + 1); } public PreProcessor preprocessImage(PreProcessor preProcessor) { List<Mat> images = preProcessor.getImages(); List<Mat> processed = new ArrayList<Mat>(); for (Mat img : images){ Mat gauss1 = new Mat(); Mat gauss2 = new Mat(); Imgproc.GaussianBlur(img, gauss1, size1, sigma1); Imgproc.GaussianBlur(img, gauss2, size2, sigma2); Core.absdiff(gauss1, gauss2, img); processed.add(img); } preProcessor.setImages(processed); return preProcessor; } }"}]}}
{"project_id":222,"chunk_id":1,"content":{"main_file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/PreProcessorFactory.java","main_file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor; import android.content.Context; import android.content.res.Resources; import android.util.Log; import org.opencv.core.Mat; import org.opencv.core.Rect; import java.util.ArrayList; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.Eyes; import ch.zhaw.facerecognitionlibrary.Helpers.FaceDetection; import ch.zhaw.facerecognitionlibrary.Helpers.PreferencesHelper; import ch.zhaw.facerecognitionlibrary.PreProcessor.BrightnessCorrection.GammaCorrection; import ch.zhaw.facerecognitionlibrary.PreProcessor.Contours.DifferenceOfGaussian; import ch.zhaw.facerecognitionlibrary.PreProcessor.Contours.LocalBinaryPattern; import ch.zhaw.facerecognitionlibrary.PreProcessor.Contours.Masking; import ch.zhaw.facerecognitionlibrary.PreProcessor.ContrastAdjustment.HistogrammEqualization; import ch.zhaw.facerecognitionlibrary.PreProcessor.StandardPostprocessing.Resize; import ch.zhaw.facerecognitionlibrary.PreProcessor.StandardPreprocessing.Crop; import ch.zhaw.facerecognitionlibrary.PreProcessor.StandardPreprocessing.EyeAlignment; import ch.zhaw.facerecognitionlibrary.PreProcessor.StandardPreprocessing.GrayScale; import ch.zhaw.facerecognitionlibrary.R; public class PreProcessorFactory { private Context context; private PreferencesHelper preferencesHelper; private Resources resources; public enum PreprocessingMode {DETECTION, RECOGNITION}; private PreProcessor preProcessorRecognition; private PreProcessor preProcessorDetection; private List<Mat> images; public CommandFactory commandFactory; private FaceDetection faceDetection; private boolean eyeDetectionEnabled; public PreProcessorFactory(Context context) { this.context = context; this.faceDetection = new FaceDetection(context); preferencesHelper = new PreferencesHelper(context); resources = context.getResources(); eyeDetectionEnabled = preferencesHelper.getEyeDetectionEnabled(); commandFactory = new CommandFactory(); commandFactory.addCommand(resources.getString(R.string.grayscale), new GrayScale()); commandFactory.addCommand(resources.getString(R.string.eyeAlignment), new EyeAlignment()); commandFactory.addCommand(resources.getString(R.string.crop), new Crop()); commandFactory.addCommand(resources.getString(R.string.gammaCorrection), new GammaCorrection(preferencesHelper.getGamma())); commandFactory.addCommand(resources.getString(R.string.doG), new DifferenceOfGaussian(preferencesHelper.getSigmas())); commandFactory.addCommand(resources.getString(R.string.masking), new Masking()); commandFactory.addCommand(resources.getString(R.string.histogrammEqualization), new HistogrammEqualization()); commandFactory.addCommand(resources.getString(R.string.resize), new Resize()); commandFactory.addCommand(resources.getString(R.string.lbp), new LocalBinaryPattern()); } public List<Mat> getCroppedImage(Mat img){ preProcessorDetection = new PreProcessor(faceDetection, getCopiedImageList(img), context); List<String> preprocessingsDetection = getPreprocessings(PreferencesHelper.Usage.DETECTION); images = new ArrayList<Mat>(); images.add(img); preProcessorRecognition = new PreProcessor(faceDetection, images, context); try { preprocess(preProcessorDetection, preprocessingsDetection); preProcessorRecognition.setFaces(PreprocessingMode.RECOGNITION); preProcessorRecognition = commandFactory.executeCommand(resources.getString(R.string.crop), preProcessorRecognition); if (eyeDetectionEnabled) { Eyes[] eyes = preProcessorRecognition.setEyes(); if (eyes == null || eyes[0] == null){ return null; } } preProcessorRecognition.setImages(Resize.preprocessImage(preProcessorRecognition.getImages(), preferencesHelper.getFaceSize())); } catch (NullPointerException e){ Log.d(\"getCroppedImage\", \"No face detected\"); return null; } return preProcessorRecognition.getImages(); } public List<Mat> getProcessedImage(Mat img, PreprocessingMode preprocessingMode) throws NullPointerException { preProcessorDetection = new PreProcessor(faceDetection, getCopiedImageList(img), context); images = new ArrayList<Mat>(); images.add(img); preProcessorRecognition = new PreProcessor(faceDetection, images, context); try { preprocess(preProcessorDetection, getPreprocessings(PreferencesHelper.Usage.DETECTION)); preProcessorDetection.setFaces(preprocessingMode); preProcessorRecognition.setFaces(preProcessorDetection.getFaces()); preProcessorRecognition.setAngle(preProcessorDetection.getAngle()); preProcessorRecognition = commandFactory.executeCommand(resources.getString(R.string.crop), preProcessorRecognition); if (eyeDetectionEnabled) { Eyes[] eyes = preProcessorRecognition.setEyes(); if (eyes == null || eyes[0] == null){ return null; } } if (preprocessingMode == PreprocessingMode.RECOGNITION){ preprocess(preProcessorRecognition, getPreprocessings(PreferencesHelper.Usage.RECOGNITION)); } } catch (NullPointerException e){ Log.d(\"getProcessedImage\", \"No face detected\"); return null; } if (preprocessingMode == PreprocessingMode.DETECTION){ return preProcessorDetection.getImages(); } else { return preProcessorRecognition.getImages(); } } private List<String> getPreprocessings(PreferencesHelper.Usage usage){ ArrayList<String> preprocessings = new ArrayList<String>(); preprocessings.addAll(preferencesHelper.getStandardPreprocessing(usage)); preprocessings.addAll(preferencesHelper.getBrightnessPreprocessing(usage)); preprocessings.addAll(preferencesHelper.getContoursPreprocessing(usage)); preprocessings.addAll(preferencesHelper.getContrastPreprocessing(usage)); preprocessings.addAll(preferencesHelper.getStandardPostprocessing(usage)); return preprocessings; } private void preprocess(PreProcessor preProcessor, List<String> preprocessings){ for (String name : preprocessings){ preProcessor = commandFactory.executeCommand(name, preProcessor); } } public Rect[] getFacesForRecognition() { if(preProcessorRecognition != null){ return preProcessorRecognition.getFaces(); } else { return null; } } private List<Mat> getCopiedImageList(Mat img){ List<Mat> images = new ArrayList<Mat>(); Mat imgCopy = new Mat(); img.copyTo(imgCopy); images.add(imgCopy); return images; } public int getAngleForRecognition(){ return preProcessorRecognition.getAngle(); } public void setCascadeClassifierForFaceDetector(String cascadeAssetName){ faceDetection.setCascadeClassifierForFaceDetector(context, cascadeAssetName); } }","dependencies":[{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/Contours/LocalBinaryPattern.java","file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor.Contours; import org.opencv.core.Mat; import org.opencv.core.Size; import org.opencv.imgproc.Imgproc; import java.util.ArrayList; import java.util.BitSet; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.FileHelper; import ch.zhaw.facerecognitionlibrary.Helpers.MatName; import ch.zhaw.facerecognitionlibrary.Helpers.PreferencesHelper; import ch.zhaw.facerecognitionlibrary.PreProcessor.Command; import ch.zhaw.facerecognitionlibrary.PreProcessor.PreProcessor; public class LocalBinaryPattern implements Command { @Override public PreProcessor preprocessImage(PreProcessor preProcessor) { List<Mat> images = preProcessor.getImages(); List<Mat> processed = new ArrayList<Mat>(); for(Mat img : images){ PreferencesHelper preferencesHelper = new PreferencesHelper(preProcessor.getContext()); Size size = new Size(preferencesHelper.getN(), preferencesHelper.getN()); Imgproc.resize(img, img, size); Mat lbp = new Mat(img.rows()-2, img.cols()-2, img.type()); for (int i=1; i<img.rows()-1; i++){ for (int j=1; j<img.cols()-1; j++){ BitSet out = new BitSet(8); double cen = img.get(i, j)[0]; if(img.get(i-1, j-1)[0] > cen) out.set(0); if(img.get(i-1, j)[0] > cen) out.set(1); if(img.get(i-1, j+1)[0] > cen) out.set(2); if(img.get(i, j+1)[0] > cen) out.set(3); if(img.get(i+1,j+1)[0] > cen) out.set(4); if(img.get(i+1,j)[0] > cen) out.set(5); if(img.get(i+1,j-1)[0] > cen) out.set(6); if(img.get(i,j-1)[0] > cen) out.set(7); int value = 0; for(int k=0; k<out.length(); k++){ int index = out.nextSetBit(k); value += Math.pow(2,out.length() - 1 - index); k = index; } lbp.put(i-1, j-1, value); } } processed.add(lbp); } preProcessor.setImages(processed); return preProcessor; } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/Contours/Masking.java","file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor.Contours; import org.opencv.core.CvType; import org.opencv.core.Mat; import org.opencv.imgproc.Imgproc; import java.util.ArrayList; import java.util.List; import ch.zhaw.facerecognitionlibrary.PreProcessor.Command; import ch.zhaw.facerecognitionlibrary.PreProcessor.PreProcessor; public class Masking implements Command { public PreProcessor preprocessImage(PreProcessor preProcessor) { List<Mat> images = preProcessor.getImages(); List<Mat> processed = new ArrayList<Mat>(); for (Mat img : images){ preProcessor.normalize0255(img); double otsu_thresh_val = Imgproc.threshold(img, img, 0, 255, Imgproc.THRESH_OTSU); Imgproc.Canny(img, img, otsu_thresh_val * 0.5, otsu_thresh_val); processed.add(img); } preProcessor.setImages(processed); return preProcessor; } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/ContrastAdjustment/HistogrammEqualization.java","file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor.ContrastAdjustment; import org.opencv.core.CvType; import org.opencv.core.Mat; import org.opencv.imgproc.Imgproc; import java.util.ArrayList; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.FileHelper; import ch.zhaw.facerecognitionlibrary.Helpers.MatName; import ch.zhaw.facerecognitionlibrary.PreProcessor.Command; import ch.zhaw.facerecognitionlibrary.PreProcessor.PreProcessor; public class HistogrammEqualization implements Command { public PreProcessor preprocessImage(PreProcessor preProcessor) { List<Mat> images = preProcessor.getImages(); List<Mat> processed = new ArrayList<Mat>(); for (Mat img : images){ img.convertTo(img, CvType.CV_8U); Imgproc.equalizeHist(img, img); processed.add(img); } preProcessor.setImages(processed); return preProcessor; } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/PreProcessor.java","file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor; import android.content.Context; import android.graphics.Bitmap; import android.graphics.PointF; import android.media.FaceDetector; import org.opencv.android.Utils; import org.opencv.core.Core; import org.opencv.core.CvType; import org.opencv.core.Mat; import org.opencv.core.Rect; import org.opencv.imgcodecs.Imgcodecs; import org.opencv.imgproc.Imgproc; import org.opencv.utils.Converters; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.Eyes; import ch.zhaw.facerecognitionlibrary.Helpers.FaceDetection; import ch.zhaw.facerecognitionlibrary.Helpers.MatOperation; import ch.zhaw.facerecognitionlibrary.Helpers.PreferencesHelper; public class PreProcessor { private Context context; private int angle; private Mat img; private List<Mat> images; private Rect[] faces; private Eyes[] eyes; private FaceDetection faceDetection; public Context getContext(){ return context; } public PreProcessor(FaceDetection faceDetection, List<Mat> images, Context context){ this.faceDetection = faceDetection; this.images = images; this.context = context; } public void setFaces(PreProcessorFactory.PreprocessingMode preprocessingMode) { List<Mat> images = getImages(); PreferencesHelper preferencesHelper = new PreferencesHelper(context); if (preferencesHelper.getDetectionMethod()){ faces = faceDetection.getFaces(images.get(0)); angle = faceDetection.getAngle(); } else { Mat img = images.get(0); FaceDetector faceDetector = new FaceDetector(img.cols(), img.rows(), 1); Bitmap bmp = Bitmap.createBitmap(img.cols(), img.rows(), Bitmap.Config.RGB_565); Utils.matToBitmap(img, bmp); FaceDetector.Face[] facesAndroid = new FaceDetector.Face[1]; if (faceDetector.findFaces(bmp, facesAndroid) > 0){ faces = new Rect[facesAndroid.length]; for (int i=0; i<facesAndroid.length; i++){ PointF pointF = new PointF(); facesAndroid[i].getMidPoint(pointF); int xWidth = (int) (1.34 * facesAndroid[i].eyesDistance()); int yWidth = (int) (1.12 * facesAndroid[i].eyesDistance()); int dist = (int) (2.77 * facesAndroid[i].eyesDistance()); Rect face = new Rect((int) pointF.x - xWidth, (int) pointF.y - yWidth, dist, dist); faces[i] = face; } } } if (preprocessingMode == PreProcessorFactory.PreprocessingMode.RECOGNITION && preferencesHelper.getDetectionMethod()){ images.remove(0); images.add(faceDetection.getImg()); setImages(images); } } public void setFaces(Rect[] faces){ this.faces = faces; } public Eyes[] setEyes() { List<Mat> images = getImages(); eyes = new Eyes[images.size()]; for (int i=0; i<images.size(); i++){ Mat img = images.get(i); normalize0255(img); eyes[i] = faceDetection.getEyes(img); } return eyes; } public Eyes[] getEyes() { return eyes; } public Rect[] getFaces() { return faces; } public int getAngle() { return angle; } public void setAngle(int angle) { this.angle = angle; for (Mat img : images){ MatOperation.rotate_90n(img, angle); } } public Mat getImg() { return img; } public void setImages(List<Mat> images) { this.images = images; } public List<Mat> getImages() { return images; } public void setImg(Mat img) { this.img = img; } public void normalize0255(Mat norm){ Core.normalize(norm, norm, 0, 255, Core.NORM_MINMAX, CvType.CV_8UC1); } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/StandardPostprocessing/Resize.java","file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor.StandardPostprocessing; import org.opencv.core.Mat; import org.opencv.core.Size; import org.opencv.imgproc.Imgproc; import java.util.ArrayList; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.PreferencesHelper; import ch.zhaw.facerecognitionlibrary.PreProcessor.Command; import ch.zhaw.facerecognitionlibrary.PreProcessor.PreProcessor; public class Resize implements Command { public PreProcessor preprocessImage(PreProcessor preProcessor) { List<Mat> images = preProcessor.getImages(); PreferencesHelper preferencesHelper = new PreferencesHelper(preProcessor.getContext()); Size size = new Size(preferencesHelper.getN(), preferencesHelper.getN()); preProcessor.setImages(preprocessImages(images, size)); return preProcessor; } public static List<Mat> preprocessImage(List<Mat> images, int n){ Size size = new Size(n, n); return preprocessImages(images,size); } private static List<Mat> preprocessImages(List<Mat> images, Size size){ List<Mat> processed = new ArrayList<Mat>(); for (Mat img : images){ Imgproc.resize(img, img, size); processed.add(img); } return processed; } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/StandardPreprocessing/Crop.java","file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor.StandardPreprocessing; import org.opencv.core.Mat; import org.opencv.core.Rect; import java.util.ArrayList; import java.util.List; import ch.zhaw.facerecognitionlibrary.PreProcessor.Command; import ch.zhaw.facerecognitionlibrary.PreProcessor.PreProcessor; public class Crop implements Command { public PreProcessor preprocessImage(PreProcessor preProcessor) { Mat img = preProcessor.getImages().get(0); List<Mat> processed = new ArrayList<Mat>(); if (preProcessor.getFaces().length == 0){ return null; } else { for (Rect rect : preProcessor.getFaces()){ Mat subImg = img.submat(rect); processed.add(subImg); } } preProcessor.setImages(processed); return preProcessor; } public Mat preprocessImage(Mat img, Rect rect){ return img.submat(rect); } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/StandardPreprocessing/EyeAlignment.java","file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor.StandardPreprocessing; import org.opencv.core.Mat; import org.opencv.core.MatOfFloat; import org.opencv.core.Point; import org.opencv.core.Size; import org.opencv.imgproc.Imgproc; import java.util.ArrayList; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.Eyes; import ch.zhaw.facerecognitionlibrary.PreProcessor.Command; import ch.zhaw.facerecognitionlibrary.PreProcessor.PreProcessor; public class EyeAlignment implements Command { private static final double DESIRED_RIGHT_EYE_X = 0.24; private static final double DESIRED_RIGHT_EYE_Y = 0.30; private static final double DESIRED_LEFT_EYE_X = (1.0 - DESIRED_RIGHT_EYE_X); public PreProcessor preprocessImage(PreProcessor preProcessor) { List<Mat> images = preProcessor.getImages(); List<Mat> processed = new ArrayList<Mat>(); Eyes[] eyes = preProcessor.setEyes(); if (eyes == null || eyes[0] == null){ return null; } for (int i=0; i<images.size(); i++){ Mat img = images.get(i); Eyes eye = eyes[i]; double desiredLen = (DESIRED_LEFT_EYE_X - DESIRED_RIGHT_EYE_X) * img.cols(); double scale = 0.9 * desiredLen / eye.getDist(); MatOfFloat leftCenter = eye.getLeftCenter(); MatOfFloat rightCenter = eye.getRightCenter(); double centerX = ((leftCenter.get(0,0)[0] + rightCenter.get(0,0)[0]) / 2); double centerY = ((leftCenter.get(1,0)[0] + rightCenter.get(1,0)[0]) / 2); Mat rotMat = Imgproc.getRotationMatrix2D(new Point(centerX,centerY), eye.getAngle(), scale); rotMat.put(2, 0, img.cols() * 0.5 - centerX); rotMat.put(2, 1, img.rows() * DESIRED_RIGHT_EYE_Y - centerY); Imgproc.warpAffine(img, img, rotMat, new Size(img.cols(),img.rows())); processed.add(img); } preProcessor.setImages(processed); return preProcessor; } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/StandardPreprocessing/GrayScale.java","file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor.StandardPreprocessing; import org.opencv.core.Mat; import org.opencv.imgproc.Imgproc; import java.util.ArrayList; import java.util.List; import ch.zhaw.facerecognitionlibrary.PreProcessor.Command; import ch.zhaw.facerecognitionlibrary.PreProcessor.PreProcessor; public class GrayScale implements Command { public PreProcessor preprocessImage(PreProcessor preProcessor) { List<Mat> images = preProcessor.getImages(); List<Mat> processed = new ArrayList<Mat>(); for (Mat img : images){ if(img.channels()>1) { Imgproc.cvtColor(img, img, Imgproc.COLOR_RGBA2GRAY); } processed.add(img); } preProcessor.setImages(processed); return preProcessor; } }"}]}}
{"project_id":222,"chunk_id":0,"content":{"main_file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/CommandFactory.java","main_file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor; import java.util.HashMap; public final class CommandFactory { private final HashMap<String, Command> commands; public CommandFactory() { commands = new HashMap<>(); } public void addCommand(String name, Command command) { commands.put(name, command); } public PreProcessor executeCommand(String name, PreProcessor preProcessor) { if (commands.containsKey(name)) { return commands.get(name).preprocessImage(preProcessor); } else { return null; } } }","dependencies":[{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/Command.java","file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor; public interface Command { PreProcessor preprocessImage(PreProcessor preProcessor); }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/PreProcessor.java","file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor; import android.content.Context; import android.graphics.Bitmap; import android.graphics.PointF; import android.media.FaceDetector; import org.opencv.android.Utils; import org.opencv.core.Core; import org.opencv.core.CvType; import org.opencv.core.Mat; import org.opencv.core.Rect; import org.opencv.imgcodecs.Imgcodecs; import org.opencv.imgproc.Imgproc; import org.opencv.utils.Converters; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.Eyes; import ch.zhaw.facerecognitionlibrary.Helpers.FaceDetection; import ch.zhaw.facerecognitionlibrary.Helpers.MatOperation; import ch.zhaw.facerecognitionlibrary.Helpers.PreferencesHelper; public class PreProcessor { private Context context; private int angle; private Mat img; private List<Mat> images; private Rect[] faces; private Eyes[] eyes; private FaceDetection faceDetection; public Context getContext(){ return context; } public PreProcessor(FaceDetection faceDetection, List<Mat> images, Context context){ this.faceDetection = faceDetection; this.images = images; this.context = context; } public void setFaces(PreProcessorFactory.PreprocessingMode preprocessingMode) { List<Mat> images = getImages(); PreferencesHelper preferencesHelper = new PreferencesHelper(context); if (preferencesHelper.getDetectionMethod()){ faces = faceDetection.getFaces(images.get(0)); angle = faceDetection.getAngle(); } else { Mat img = images.get(0); FaceDetector faceDetector = new FaceDetector(img.cols(), img.rows(), 1); Bitmap bmp = Bitmap.createBitmap(img.cols(), img.rows(), Bitmap.Config.RGB_565); Utils.matToBitmap(img, bmp); FaceDetector.Face[] facesAndroid = new FaceDetector.Face[1]; if (faceDetector.findFaces(bmp, facesAndroid) > 0){ faces = new Rect[facesAndroid.length]; for (int i=0; i<facesAndroid.length; i++){ PointF pointF = new PointF(); facesAndroid[i].getMidPoint(pointF); int xWidth = (int) (1.34 * facesAndroid[i].eyesDistance()); int yWidth = (int) (1.12 * facesAndroid[i].eyesDistance()); int dist = (int) (2.77 * facesAndroid[i].eyesDistance()); Rect face = new Rect((int) pointF.x - xWidth, (int) pointF.y - yWidth, dist, dist); faces[i] = face; } } } if (preprocessingMode == PreProcessorFactory.PreprocessingMode.RECOGNITION && preferencesHelper.getDetectionMethod()){ images.remove(0); images.add(faceDetection.getImg()); setImages(images); } } public void setFaces(Rect[] faces){ this.faces = faces; } public Eyes[] setEyes() { List<Mat> images = getImages(); eyes = new Eyes[images.size()]; for (int i=0; i<images.size(); i++){ Mat img = images.get(i); normalize0255(img); eyes[i] = faceDetection.getEyes(img); } return eyes; } public Eyes[] getEyes() { return eyes; } public Rect[] getFaces() { return faces; } public int getAngle() { return angle; } public void setAngle(int angle) { this.angle = angle; for (Mat img : images){ MatOperation.rotate_90n(img, angle); } } public Mat getImg() { return img; } public void setImages(List<Mat> images) { this.images = images; } public List<Mat> getImages() { return images; } public void setImg(Mat img) { this.img = img; } public void normalize0255(Mat norm){ Core.normalize(norm, norm, 0, 255, Core.NORM_MINMAX, CvType.CV_8UC1); } }"}]}}
{"project_id":222,"chunk_id":0,"content":{"main_file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/MatXml.java","main_file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import org.opencv.core.CvType; import org.opencv.core.Mat; import org.w3c.dom.Document; import org.w3c.dom.Element; import org.w3c.dom.Node; import org.w3c.dom.NodeList; import java.io.File; import java.util.Scanner; import javax.xml.parsers.DocumentBuilderFactory; import javax.xml.transform.OutputKeys; import javax.xml.transform.Transformer; import javax.xml.transform.TransformerFactory; import javax.xml.transform.dom.DOMSource; import javax.xml.transform.stream.StreamResult; public class MatXml { public static final int READ = 0; public static final int WRITE = 1; private File file; private boolean isWrite; private Document doc; private Element rootElement; public MatXml() { file = null; isWrite = false; doc = null; rootElement = null; } public void open(String filePath, int flags ) { try { if( flags == READ ) { open(filePath); } else { create(filePath); } } catch(Exception e) { e.printStackTrace(); } } public void open(String filePath) { try { file = new File(filePath); if( file == null || file.isFile() == false ) { System.err.println(\"Can not open file: \" + filePath ); } else { isWrite = false; doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(file); doc.getDocumentElement().normalize(); } } catch(Exception e) { e.printStackTrace(); } } public void create(String filePath) { try { file = new File(filePath); if( file == null ) { System.err.println(\"Can not wrtie file: \" + filePath ); } else { isWrite = true; doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument(); rootElement = doc.createElement(\"opencv_storage\"); doc.appendChild(rootElement); } } catch(Exception e) { e.printStackTrace(); } } public Mat readMat(String tag) { if( isWrite ) { System.err.println(\"Try read from file with write flags\"); return null; } NodeList nodelist = doc.getElementsByTagName(tag); Mat readMat = null; for( int i = 0 ; i<nodelist.getLength() ; i++ ) { Node node = nodelist.item(i); if( node.getNodeType() == Node.ELEMENT_NODE ) { Element element = (Element)node; String type_id = element.getAttribute(\"type_id\"); if( \"opencv-matrix\".equals(type_id) == false) { System.out.println(\"Fault type_id \"); } String rowsStr = element.getElementsByTagName(\"rows\").item(0).getTextContent(); String colsStr = element.getElementsByTagName(\"cols\").item(0).getTextContent(); String dtStr = element.getElementsByTagName(\"dt\").item(0).getTextContent(); String dataStr = element.getElementsByTagName(\"data\").item(0).getTextContent(); int rows = Integer.parseInt(rowsStr); int cols = Integer.parseInt(colsStr); int type = CvType.CV_8U; Scanner s = new Scanner(dataStr); if( \"f\".equals(dtStr) ) { type = CvType.CV_32F; readMat = new Mat( rows, cols, type ); float fs[] = new float[1]; for( int r=0 ; r<rows ; r++ ) { for( int c=0 ; c<cols ; c++ ) { if( s.hasNextFloat() ) { fs[0] = s.nextFloat(); } else { fs[0] = 0; System.err.println(\"Unmatched number of float value at rows=\"+r + \" cols=\"+c); } readMat.put(r, c, fs); } } } else if( \"i\".equals(dtStr) ) { type = CvType.CV_32S; readMat = new Mat( rows, cols, type ); int is[] = new int[1]; for( int r=0 ; r<rows ; r++ ) { for( int c=0 ; c<cols ; c++ ) { if( s.hasNextInt() ) { is[0] = s.nextInt(); } else { is[0] = 0; System.err.println(\"Unmatched number of int value at rows=\"+r + \" cols=\"+c); } readMat.put(r, c, is); } } } else if( \"s\".equals(dtStr) ) { type = CvType.CV_16S; readMat = new Mat( rows, cols, type ); short ss[] = new short[1]; for( int r=0 ; r<rows ; r++ ) { for( int c=0 ; c<cols ; c++ ) { if( s.hasNextShort() ) { ss[0] = s.nextShort(); } else { ss[0] = 0; System.err.println(\"Unmatched number of int value at rows=\"+r + \" cols=\"+c); } readMat.put(r, c, ss); } } } else if( \"b\".equals(dtStr) ) { readMat = new Mat( rows, cols, type ); byte bs[] = new byte[1]; for( int r=0 ; r<rows ; r++ ) { for( int c=0 ; c<cols ; c++ ) { if( s.hasNextByte() ) { bs[0] = s.nextByte(); } else { bs[0] = 0; System.err.println(\"Unmatched number of byte value at rows=\"+r + \" cols=\"+c); } readMat.put(r, c, bs); } } } } } return readMat; } public void writeMat(String tag, Mat mat) { try { if( isWrite == false) { System.err.println(\"Try write to file with no write flags\"); return; } Element matrix = doc.createElement(tag); matrix.setAttribute(\"type_id\", \"opencv-matrix\"); rootElement.appendChild(matrix); Element rows = doc.createElement(\"rows\"); rows.appendChild( doc.createTextNode( String.valueOf(mat.rows()) )); Element cols = doc.createElement(\"cols\"); cols.appendChild( doc.createTextNode( String.valueOf(mat.cols()) )); Element dt = doc.createElement(\"dt\"); String dtStr; int type = mat.type(); if(type == CvType.CV_32F ) { dtStr = \"f\"; } else if( type == CvType.CV_32S ) { dtStr = \"i\"; } else if( type == CvType.CV_16S ) { dtStr = \"s\"; } else if( type == CvType.CV_8U ){ dtStr = \"b\"; } else { dtStr = \"unknown\"; } dt.appendChild( doc.createTextNode( dtStr )); Element data = doc.createElement(\"data\"); String dataStr = dataStringBuilder( mat ); data.appendChild( doc.createTextNode( dataStr )); matrix.appendChild( rows ); matrix.appendChild( cols ); matrix.appendChild( dt ); matrix.appendChild( data ); } catch(Exception e) { e.printStackTrace(); } } private String dataStringBuilder(Mat mat) { StringBuilder sb = new StringBuilder(); int rows = mat.rows(); int cols = mat.cols(); int type = mat.type(); if( type == CvType.CV_32F ) { float fs[] = new float[1]; for( int r=0 ; r<rows ; r++ ) { for( int c=0 ; c<cols ; c++ ) { mat.get(r, c, fs); sb.append( String.valueOf(fs[0])); sb.append( ' ' ); } sb.append( '\\n' ); } } else if( type == CvType.CV_32S ) { int is[] = new int[1]; for( int r=0 ; r<rows ; r++ ) { for( int c=0 ; c<cols ; c++ ) { mat.get(r, c, is); sb.append( String.valueOf(is[0])); sb.append( ' ' ); } sb.append( '\\n' ); } } else if( type == CvType.CV_16S ) { short ss[] = new short[1]; for( int r=0 ; r<rows ; r++ ) { for( int c=0 ; c<cols ; c++ ) { mat.get(r, c, ss); sb.append( String.valueOf(ss[0])); sb.append( ' ' ); } sb.append( '\\n' ); } } else if( type == CvType.CV_8U ) { byte bs[] = new byte[1]; for( int r=0 ; r<rows ; r++ ) { for( int c=0 ; c<cols ; c++ ) { mat.get(r, c, bs); sb.append( String.valueOf(bs[0])); sb.append( ' ' ); } sb.append( '\\n' ); } } else { sb.append(\"unknown type\\n\"); } return sb.toString(); } public void release() { try { if( isWrite == false) { System.err.println(\"Try release of file with no write flags\"); return; } DOMSource source = new DOMSource(doc); StreamResult result = new StreamResult(file); Transformer transformer = TransformerFactory.newInstance().newTransformer(); transformer.setOutputProperty(OutputKeys.INDENT, \"yes\"); transformer.transform(source, result); } catch(Exception e) { e.printStackTrace(); } } }","dependencies":[]}}
{"project_id":222,"chunk_id":0,"content":{"main_file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/FaceDetection.java","main_file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import android.content.Context; import android.content.res.AssetManager; import android.util.Log; import org.opencv.core.Core; import org.opencv.core.Mat; import org.opencv.core.MatOfFloat; import org.opencv.core.MatOfRect; import org.opencv.core.Rect; import org.opencv.core.Size; import org.opencv.objdetect.CascadeClassifier; import java.io.File; import java.io.FileOutputStream; import java.io.IOException; import java.io.InputStream; import java.util.List; public class FaceDetection { private Mat img; private int angle; private static final String TAG = \"Face Detection\"; private CascadeClassifier faceDetector; private CascadeClassifier leftEyeDetector; private CascadeClassifier rightEyeDetector; private double scaleFactor; private int minNeighbors; private int flags; public FaceDetection(Context context) { File cascadeDir = context.getDir(\"cascade\", Context.MODE_PRIVATE); PreferencesHelper preferencesHelper = new PreferencesHelper(context); faceDetector = setCascadeClassifier(context.getAssets(), cascadeDir, preferencesHelper.getFaceCascadeFile()); leftEyeDetector = setCascadeClassifier(context.getAssets(), cascadeDir, preferencesHelper.getLefteyeCascadeFile()); rightEyeDetector = setCascadeClassifier(context.getAssets(), cascadeDir, preferencesHelper.getRighteyeCascadeFile()); scaleFactor = preferencesHelper.getDetectionScaleFactor(); minNeighbors = preferencesHelper.getDetectionMinNeighbors(); flags = preferencesHelper.getDetectionFlags(); cascadeDir.delete(); } private CascadeClassifier setCascadeClassifier(AssetManager assetManager, File cascadeDir, String name){ CascadeClassifier cascadeClassifier; try { InputStream is = assetManager.open(name + \".xml\"); File mCascadeFile = new File(cascadeDir, name + \".xml\"); String path = getClassifierPath(mCascadeFile,is); cascadeClassifier = new CascadeClassifier(path); } catch (IOException e){ e.printStackTrace(); return null; } if (cascadeClassifier.empty()) { Log.e(TAG, \"Failed to load classifier: \" + name); cascadeClassifier = null; } return cascadeClassifier; } public void setCascadeClassifierForFaceDetector(Context context, String cascadeAssetName){ CascadeClassifier cascadeClassifier = setCascadeClassifier(context.getAssets(), context.getDir(\"cascade\", Context.MODE_PRIVATE), cascadeAssetName); faceDetector = cascadeClassifier; } public Rect[] getFaces(Mat img) { MatOfRect faces = new MatOfRect(); List<Rect> facesList = null; float mRelativeFaceSize = 0.2f; int mAbsoluteFaceSize = 0; if(faceDetector !=null){ angle = 0; for(int i=1; i<=4; i++){ int height = img.rows(); if (Math.round(height * mRelativeFaceSize) > 0) { mAbsoluteFaceSize = Math.round(height * mRelativeFaceSize); } faceDetector.detectMultiScale(img, faces, scaleFactor , minNeighbors, flags, new Size(mAbsoluteFaceSize,mAbsoluteFaceSize), new Size()); if(faces.empty()){ angle = 90 * i; MatOperation.rotate_90n(img, 90); } else { facesList = faces.toList(); for (Rect face : facesList){ if(!(0 <= face.x && 0 <= face.width && face.x + face.width <= img.cols() && 0 <= face.y && 0 <= face.height && face.y + face.height <= img.rows())){ facesList.remove(face); } } if(!(facesList.size()>0)){ return null; } this.img = img; break; } } } else { Log.e(TAG, \"Detection method is not selected!\"); } if(facesList != null){ return (Rect[])facesList.toArray(); } else { return null; } } public Eyes getEyes(Mat img){ double halfWidth = img.cols() / 2; double height = img.rows(); double[] values = new double[4]; values[0] = 0; values[1] = 0; values[2] = halfWidth; values[3] = height; Rect rightHalf = new Rect(values); values[0] = halfWidth; Rect leftHalf = new Rect(values); MatOfRect rightEyes = new MatOfRect(); MatOfRect leftEyes = new MatOfRect(); Mat rightHalfImg = img.submat(rightHalf); rightEyeDetector.detectMultiScale(rightHalfImg, rightEyes); Mat leftHalfImg = img.submat(leftHalf); leftEyeDetector.detectMultiScale(leftHalfImg, leftEyes); if (rightEyes.empty() || leftEyes.empty() || rightEyes.toArray().length > 1 || leftEyes.toArray().length > 1){ return null; } Rect rightEye = rightEyes.toArray()[0]; Rect leftEye = leftEyes.toArray()[0]; MatOfFloat rightPoint = new MatOfFloat(rightEye.x + rightEye.width / 2, rightEye.y + rightEye.height / 2); MatOfFloat leftPoint = new MatOfFloat(img.cols() / 2 + leftEye.x + leftEye.width / 2, leftEye.y + leftEye.height / 2); MatOfFloat diff = new MatOfFloat(); Core.subtract(leftPoint, rightPoint, diff); double angle = Core.fastAtan2(diff.toArray()[1], diff.toArray()[0]); double dist = Core.norm(leftPoint, rightPoint, Core.NORM_L2); Eyes eyes = new Eyes(dist, rightPoint, leftPoint, angle); return eyes; } private String getClassifierPath(File mCascadeFile, InputStream is){ try { FileOutputStream os = new FileOutputStream(mCascadeFile); byte[] buffer = new byte[4096]; int bytesRead; while ((bytesRead = is.read(buffer)) != -1) { os.write(buffer, 0, bytesRead); } is.close(); os.close(); } catch (IOException e) { e.printStackTrace(); Log.e(TAG, \"Failed to load cascade. Exception thrown: \" + e); } return mCascadeFile.getAbsolutePath(); } public Mat getImg() { return img; } public int getAngle() { return angle; } }","dependencies":[{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/Eyes.java","file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import org.opencv.core.MatOfFloat; public class Eyes { double dist; MatOfFloat rightCenter; MatOfFloat leftCenter; double angle; public Eyes(double dist, MatOfFloat rightCenter, MatOfFloat leftCenter, double angle) { this.dist = dist; this.rightCenter = rightCenter; this.leftCenter = leftCenter; this.angle = angle; } public double getDist() { return dist; } public MatOfFloat getRightCenter() { return rightCenter; } public MatOfFloat getLeftCenter() { return leftCenter; } public double getAngle() { return angle; } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/MatOperation.java","file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import org.opencv.core.Core; import org.opencv.core.CvType; import org.opencv.core.Mat; import org.opencv.core.MatOfPoint; import org.opencv.core.MatOfPoint2f; import org.opencv.core.Point; import org.opencv.core.Rect; import org.opencv.core.Scalar; import org.opencv.imgproc.Imgproc; public class MatOperation { private static final Scalar FACE_RECT_COLOR = new Scalar(0, 255, 0, 255); private static final int FONT_SIZE = 5; private static final int THICKNESS = 3; public static void rotate_90n(Mat img, int angle) { if(angle == 270 || angle == -90){ Core.transpose(img, img); Core.flip(img, img, 0); }else if(angle == 180 || angle == -180){ Core.flip(img, img, -1); }else if(angle == 90 || angle == -270){ Core.transpose(img, img); Core.flip(img, img, 1); } } public static Point drawRectangleOnPreview(Mat img, Rect face, boolean front_camera){ if(front_camera){ Rect mirroredFace = getMirroredFaceForFrontCamera(img, face); Imgproc.rectangle(img, mirroredFace.tl(), mirroredFace.br(), FACE_RECT_COLOR, THICKNESS); return mirroredFace.tl(); } else { Imgproc.rectangle(img, face.tl(), face.br(), FACE_RECT_COLOR, THICKNESS); return face.tl(); } } public static void drawRectangleAndLabelOnPreview(Mat img, Rect face, String label, boolean front_camera){ Point tl = drawRectangleOnPreview(img, face, front_camera); Imgproc.putText(img, label, tl, Core.FONT_HERSHEY_PLAIN, FONT_SIZE, FACE_RECT_COLOR, THICKNESS); } public static Rect[] rotateFaces(Mat img, Rect[] faces, int angle){ Point center = new Point(img.cols()/2, img.rows()/2); Mat rotMat = Imgproc.getRotationMatrix2D(center, angle, 1); rotMat.convertTo(rotMat, CvType.CV_32FC1); float scale = img.cols()/img.rows(); for(Rect face : faces){ Mat m = new Mat(3, 1, CvType.CV_32FC1); m.put(0,0,face.x); m.put(1,0,face.y); m.put(2,0,1); Mat res = Mat.zeros(2,1,CvType.CV_32FC1); Core.gemm(rotMat, m, 1, new Mat(), 0, res, 0); face.x = (int)res.get(0,0)[0]; face.y = (int)res.get(1,0)[0]; if(angle == 270 || angle == -90){ face.x = (int)(face.x * scale - face.width); face.x = face.x + face.width/4; face.y = face.y + face.height/4; }else if(angle == 180 || angle == -180){ face.x = face.x - face.width; face.y = face.y - face.height; }else if(angle == 90 || angle == -270){ face.y = (int)(face.y * scale - face.height); face.x = face.x - face.width/4; face.y = face.y - face.height/4; } } return faces; } public static Rect getMirroredFaceForFrontCamera(Mat img, Rect face){ int topLeftX = (int) (img.cols() - (face.tl().x + face.width)); int bottomRightX = (int) (img.cols() - (face.br().x) + face.width); Point tl = new Point(topLeftX, face.tl().y); Point br = new Point(bottomRightX, face.br().y); return new Rect(tl, br); } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/PreferencesHelper.java","file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import android.content.Context; import android.content.SharedPreferences; import android.content.res.Resources; import android.preference.PreferenceManager; import java.util.ArrayList; import java.util.Collections; import java.util.List; import java.util.Set; import ch.zhaw.facerecognitionlibrary.R; public class PreferencesHelper { public enum Usage {RECOGNITION, DETECTION}; SharedPreferences sharedPreferences; Resources resources; public PreferencesHelper(Context context){ sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context); resources = context.getResources(); } public String getClassificationMethod(){ return sharedPreferences.getString(\"key_classification_method\", resources.getString(R.string.eigenfaces)); } public boolean getClassificationMethodTFCaffe(){ return sharedPreferences.getBoolean(\"key_classificationMethodTFCaffe\", true); } public float getGamma(){ return Float.valueOf(sharedPreferences.getString(\"key_gamma\", resources.getString(R.string.gamma))); } public double[] getSigmas(){ String[] sigmasString = sharedPreferences.getString(\"key_sigmas\", resources.getString(R.string.sigmas)).split(\",\"); if(sigmasString.length != 2){ sigmasString = resources.getString(R.string.sigmas).split(\",\"); } double[] sigmas = new double[3]; for(int i=0; i<2; i++){ sigmas[i] = Double.parseDouble(sigmasString[i]); } return sigmas; } public boolean getEyeDetectionEnabled(){ return sharedPreferences.getBoolean(\"key_eye_detection\", true); } public List<String> getStandardPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_standard_pre\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_standard_pre\"); } else { return new ArrayList<>(); } } public List<String> getBrightnessPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_brightness\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_brightness\"); } else { return new ArrayList<>(); } } public List<String> getContoursPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_contours\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_contours\"); } else { return new ArrayList<>(); } } public List<String> getContrastPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_contrast\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_contrast\"); } else { return new ArrayList<>(); } } public List<String> getStandardPostprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_standard_post\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_standard_post\"); } else { return new ArrayList<>(); } } private List<String> getPreferenceList(String key){ Set<String> set = sharedPreferences.getStringSet(key, null); ArrayList<String> list; if(set != null) { list = new ArrayList<String>(set); Collections.sort(list); return list; } else { return new ArrayList<>(); } } public String getCaffeModelFile(){ return sharedPreferences.getString(\"key_modelFileCaffe\", resources.getString(R.string.modelFileCaffe)); } public String getCaffeWeightsFile(){ return sharedPreferences.getString(\"key_weightsFileCaffe\", resources.getString(R.string.weightsFileCaffe)); } public String getCaffeOutputLayer(){ return sharedPreferences.getString(\"key_outputLayerCaffe\", resources.getString(R.string.weightsFileCaffe)); } public float[] getCaffeMeanValues(){ String[] meanValuesString = sharedPreferences.getString(\"key_meanValuesCaffe\", resources.getString(R.string.meanValuesCaffe)).split(\",\"); if(meanValuesString.length != 3){ meanValuesString = resources.getString(R.string.meanValuesCaffe).split(\",\"); } float[] meanValues = new float[3]; for(int i=0; i<3; i++){ meanValues[i] = Float.parseFloat(meanValuesString[i]); } return meanValues; } public String getSvmTrainOptions(){ return sharedPreferences.getString(\"key_svmTrainOptions\", \"-t 0 \"); } public int getK(){ return Integer.valueOf(sharedPreferences.getString(\"key_K\", \"20\")); } public int getN(){ return Integer.valueOf(sharedPreferences.getString(\"key_N\", \"25\")); } public int getFaceSize(){ return Integer.valueOf(sharedPreferences.getString(\"key_faceSize\", \"160\")); } public int getTensorFlowInputSize(){ return Integer.valueOf(sharedPreferences.getString(\"key_inputSize\", \"160\")); } public int getTensorFlowInputChannels(){ return Integer.valueOf(sharedPreferences.getString(\"key_inputChannels\", \"3\")); } public int getTensorFlowImageMean(){ return Integer.valueOf(sharedPreferences.getString(\"key_imageMean\", \"128\")); } public int getTensorFlowImageStd(){ return Integer.valueOf(sharedPreferences.getString(\"key_imageStd\", \"128\")); } public int getTensorFlowOutputSize(){ return Integer.valueOf(sharedPreferences.getString(\"key_outputSize\", \"128\")); } public String getTensorFlowInputLayer(){ return sharedPreferences.getString(\"key_inputLayer\", \"input\"); } public String getTensorFlowOutputLayer(){ return sharedPreferences.getString(\"key_outputLayer\", \"embeddings\"); } public String getTensorFlowModelFile(){ return sharedPreferences.getString(\"key_modelFileTensorFlow\", \"facenet.pb\"); } public float getPCAThreshold(){ return Float.valueOf(sharedPreferences.getString(\"key_pca_threshold\", \"0.98f\")); } public String getFaceCascadeFile(){ return sharedPreferences.getString(\"key_face_cascade_file\", resources.getString(R.string.haarcascade_alt2)); } public String getLefteyeCascadeFile(){ return sharedPreferences.getString(\"key_lefteye_cascade_file\", resources.getString(R.string.haarcascade_lefteye)); } public String getRighteyeCascadeFile(){ return sharedPreferences.getString(\"key_righteye_cascade_file\", resources.getString(R.string.haarcascade_righteye)); } public double getDetectionScaleFactor(){ return Double.parseDouble(sharedPreferences.getString(\"key_scaleFactor\", \"1.1\")); } public int getDetectionMinNeighbors(){ return Integer.parseInt(sharedPreferences.getString(\"key_minNeighbors\", \"3\")); } public int getDetectionFlags(){ return Integer.parseInt(sharedPreferences.getString(\"key_flags\", \"2\")); } public boolean getDetectionMethod(){ return sharedPreferences.getBoolean(\"key_detection_method\", true); } }"}]}}
{"project_id":222,"chunk_id":0,"content":{"main_file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/FileHelper.java","main_file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import android.graphics.Bitmap; import android.os.Environment; import org.opencv.android.Utils; import org.opencv.core.Mat; import java.io.BufferedReader; import java.io.File; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.FileReader; import java.io.FileWriter; import java.io.IOException; import java.text.SimpleDateFormat; import java.util.ArrayList; import java.util.List; import java.util.Map; import java.util.Set; import ch.zhaw.facerecognitionlibrary.PreProcessor.PreProcessorFactory; public class FileHelper { public static String getFolderPath() { return FOLDER_PATH; } private static final String FOLDER_PATH = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES) + \"/facerecognition\"; public static final String TRAINING_PATH = FOLDER_PATH + \"/training/\"; public static final String TEST_PATH = FOLDER_PATH + \"/test/\"; public static final String DETECTION_TEST_PATH = FOLDER_PATH + \"/detection_test/\"; public static final String DATA_PATH = FOLDER_PATH + \"/data/\"; public static final String RESULTS_PATH = FOLDER_PATH + \"/results/\"; public static final String EIGENFACES_PATH = DATA_PATH + \"Eigenfaces/\"; public static final String SVM_PATH = DATA_PATH + \"SVM/\"; public static final String KNN_PATH = DATA_PATH + \"KNN/\"; public static final String CAFFE_PATH = DATA_PATH + \"Caffe/\"; public static final String TENSORFLOW_PATH = DATA_PATH + \"TensorFlow/\"; private static final String SEPARATOR = \";\"; private String name = \"\"; public FileHelper(String name) { this.name = name; } public FileHelper(){} public void createDataFolderIfNotExsiting(){ File folder = new File(DATA_PATH); folder.mkdir(); } private void createFolderIfNotExisting(String path){ File folder = new File(path); folder.mkdir(); } public static boolean isFileAnImage(File file){ if (file.toString().endsWith(\".jpg\") || file.toString().endsWith(\".jpeg\") || file.toString().endsWith(\".gif\") || file.toString().endsWith(\".png\")){ return true; } else { return false; } } private File[] getListOfFiles(String path){ File directory = new File(path + name); if(directory.exists()){ return directory.listFiles(); } else { return new File[]{}; } } public File[] getTrainingList(){ return getListOfFiles(TRAINING_PATH); } public File[] getTestList(){ return getListOfFiles(TEST_PATH); } public File[] getDetectionTestList() { return getListOfFiles(DETECTION_TEST_PATH); } public void saveMatListToXml(List<MatName> matList, String path, String filename){ createFolderIfNotExisting(path); MatXml matXml = new MatXml(); matXml.create(path + filename); for(MatName mat : matList){ matXml.writeMat(mat.getName(), mat.getMat()); } matXml.release(); } public List<MatName> getMatListFromXml(List<MatName> matList, String path, String filename){ String filepath = path + filename; MatXml matXml = new MatXml(); File file = new File(filepath); if (file.exists()){ matXml.open(filepath); for (MatName mat : matList){ mat.setMat(matXml.readMat(mat.getName())); } } return matList; } public String saveMatToImage(MatName m, String path){ new File(path).mkdirs(); String fullpath = path + m.getName() + \".png\"; Mat mat = m.getMat(); Bitmap bitmap = Bitmap.createBitmap(mat.cols(), mat.rows(), Bitmap.Config.ARGB_8888); Utils.matToBitmap(mat, bitmap); File file = new File(fullpath); try { FileOutputStream os = new FileOutputStream(file); bitmap.compress(Bitmap.CompressFormat.PNG, 100, os); os.close(); } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } return fullpath; } public void saveBitmapToImage(Bitmap bmp){ File file = new File(DATA_PATH + \"bitmap.png\"); try { FileOutputStream os = new FileOutputStream(file); bmp.compress(Bitmap.CompressFormat.PNG, 100, os); os.close(); } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } } public File createSvmTrainingFile(){ createFolderIfNotExisting(SVM_PATH); String filepath = SVM_PATH + \"svm_train\"; File trainingFile = new File(filepath); return trainingFile; } public File createSvmPredictionFile(){ String filepath = SVM_PATH + \"svm_predict\"; File predictionFile = new File(filepath); return predictionFile; } public File createSvmTestFile(){ String filepath = SVM_PATH + \"svm_test\"; File testFile = new File(filepath); return testFile; } public File createLabelFile(String path, String name){ createFolderIfNotExisting(path); String filepath = path + \"label_\" + name; File trainingFile = new File(filepath); return trainingFile; } public void saveLabelMapToFile(String path, OneToOneMap<String, Integer> labelMap, String name){ createFolderIfNotExisting(path); String filepath = path + \"labelMap_\" + name; try { FileWriter fw = new FileWriter(filepath); for (String s : (Set<String>)labelMap.getKeyToValMap().keySet()){ fw.append(s + SEPARATOR + labelMap.getValue(s) + \"\\n\"); } fw.close(); } catch (IOException e) { e.printStackTrace(); } } public void saveResultsToFile(Map<String, ?> map, double accuracy, double accuracy_reference, double accuracy_deviation, double robustness, int duration, List<String> results){ String timestamp = new SimpleDateFormat(\"ddMMyyyyHHmm\").format(new java.util.Date()); createFolderIfNotExisting(RESULTS_PATH); String filepath = RESULTS_PATH + \"Accuracy_\" + String.format(\"%.2f\", accuracy * 100) + \"_\" + timestamp + \".txt\"; try { FileWriter fw = new FileWriter(filepath); for (Map.Entry entry : map.entrySet()){ fw.append(entry.getKey() + \": \" + entry.getValue() + \"\\n\"); } fw.append(\"Accuracy: \" + accuracy * 100 + \"%\\n\"); fw.append(\"Accuracy reference: \" + accuracy_reference * 100 + \"%\\n\"); fw.append(\"Accuracy deviation: \" + accuracy_deviation * 100 + \"%\\n\"); fw.append(\"Robustness: \" + robustness * 100 + \"%\\n\"); fw.append(\"Duration per image: \" + duration + \"ms\\n\"); for (String result : results){ fw.append(result + \"\\n\"); } fw.close(); } catch (IOException e) { e.printStackTrace(); } } public void saveResultsToFile(Map<String, ?> map, double accuracy, int duration, List<String> results){ String timestamp = new SimpleDateFormat(\"ddMMyyyyHHmm\").format(new java.util.Date()); createFolderIfNotExisting(RESULTS_PATH); String filepath = RESULTS_PATH + \"Accuracy_\" + String.format(\"%.2f\", accuracy * 100) + \"_\" + timestamp + \".txt\"; try { FileWriter fw = new FileWriter(filepath); for (Map.Entry entry : map.entrySet()){ fw.append(entry.getKey() + \": \" + entry.getValue() + \"\\n\"); } fw.append(\"Accuracy: \" + accuracy * 100 + \"%\\n\"); fw.append(\"Duration per image: \" + duration + \"ms\\n\"); for (String result : results){ fw.append(result + \"\\n\"); } fw.close(); } catch (IOException e) { e.printStackTrace(); } } public OneToOneMap<String, Integer> getLabelMapFromFile(String path){ String filepath = path + \"labelMap_train\"; OneToOneMap<String, Integer> labelMap = new OneToOneMap<>(); try { BufferedReader buf = new BufferedReader(new FileReader(filepath)); String line = buf.readLine(); while (line != null){ String[] split = line.split(SEPARATOR); labelMap.put(split[0], Integer.valueOf(split[1])); line = buf.readLine(); } buf.close(); } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } return labelMap; } public void saveStringList(List<String> list, File file){ try { FileWriter fw = new FileWriter(file, false); for (String line : list){ fw.append(line + \"\\n\"); } fw.close(); } catch (IOException e) { e.printStackTrace(); } } public void saveIntegerList(List<Integer> list, File file){ try { FileWriter fw = new FileWriter(file, false); for (int line : list){ fw.append(Integer.toString(line)+ \"\\n\"); } fw.close(); } catch (IOException e) { e.printStackTrace(); } } public List<String> loadStringList(File file){ List<String> list = new ArrayList<>(); try { FileReader fr = new FileReader(file); BufferedReader br = new BufferedReader(fr); String line; while ((line = br.readLine()) != null){ list.add(line); } br.close(); fr.close(); } catch (IOException e) { e.printStackTrace(); } return list; } public List<Integer> loadIntegerList(File file){ List<Integer> list = new ArrayList<>(); try { FileReader fr = new FileReader(file); BufferedReader br = new BufferedReader(fr); Integer line = 0; String sLine; while ((sLine = br.readLine()) != null){ line = Integer.parseInt(sLine); list.add(line); } br.close(); fr.close(); } catch (IOException e) { e.printStackTrace(); } return list; } }","dependencies":[{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/MatName.java","file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import org.opencv.core.Mat; public class MatName { private String name; private Mat mat; public MatName(String name, Mat mat){ this.name = name; this.mat = mat; } public String getName() { return name; } public Mat getMat() { return mat; } public void setMat(Mat mat) { this.mat = mat; } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/MatXml.java","file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import org.opencv.core.CvType; import org.opencv.core.Mat; import org.w3c.dom.Document; import org.w3c.dom.Element; import org.w3c.dom.Node; import org.w3c.dom.NodeList; import java.io.File; import java.util.Scanner; import javax.xml.parsers.DocumentBuilderFactory; import javax.xml.transform.OutputKeys; import javax.xml.transform.Transformer; import javax.xml.transform.TransformerFactory; import javax.xml.transform.dom.DOMSource; import javax.xml.transform.stream.StreamResult; public class MatXml { public static final int READ = 0; public static final int WRITE = 1; private File file; private boolean isWrite; private Document doc; private Element rootElement; public MatXml() { file = null; isWrite = false; doc = null; rootElement = null; } public void open(String filePath, int flags ) { try { if( flags == READ ) { open(filePath); } else { create(filePath); } } catch(Exception e) { e.printStackTrace(); } } public void open(String filePath) { try { file = new File(filePath); if( file == null || file.isFile() == false ) { System.err.println(\"Can not open file: \" + filePath ); } else { isWrite = false; doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(file); doc.getDocumentElement().normalize(); } } catch(Exception e) { e.printStackTrace(); } } public void create(String filePath) { try { file = new File(filePath); if( file == null ) { System.err.println(\"Can not wrtie file: \" + filePath ); } else { isWrite = true; doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument(); rootElement = doc.createElement(\"opencv_storage\"); doc.appendChild(rootElement); } } catch(Exception e) { e.printStackTrace(); } } public Mat readMat(String tag) { if( isWrite ) { System.err.println(\"Try read from file with write flags\"); return null; } NodeList nodelist = doc.getElementsByTagName(tag); Mat readMat = null; for( int i = 0 ; i<nodelist.getLength() ; i++ ) { Node node = nodelist.item(i); if( node.getNodeType() == Node.ELEMENT_NODE ) { Element element = (Element)node; String type_id = element.getAttribute(\"type_id\"); if( \"opencv-matrix\".equals(type_id) == false) { System.out.println(\"Fault type_id \"); } String rowsStr = element.getElementsByTagName(\"rows\").item(0).getTextContent(); String colsStr = element.getElementsByTagName(\"cols\").item(0).getTextContent(); String dtStr = element.getElementsByTagName(\"dt\").item(0).getTextContent(); String dataStr = element.getElementsByTagName(\"data\").item(0).getTextContent(); int rows = Integer.parseInt(rowsStr); int cols = Integer.parseInt(colsStr); int type = CvType.CV_8U; Scanner s = new Scanner(dataStr); if( \"f\".equals(dtStr) ) { type = CvType.CV_32F; readMat = new Mat( rows, cols, type ); float fs[] = new float[1]; for( int r=0 ; r<rows ; r++ ) { for( int c=0 ; c<cols ; c++ ) { if( s.hasNextFloat() ) { fs[0] = s.nextFloat(); } else { fs[0] = 0; System.err.println(\"Unmatched number of float value at rows=\"+r + \" cols=\"+c); } readMat.put(r, c, fs); } } } else if( \"i\".equals(dtStr) ) { type = CvType.CV_32S; readMat = new Mat( rows, cols, type ); int is[] = new int[1]; for( int r=0 ; r<rows ; r++ ) { for( int c=0 ; c<cols ; c++ ) { if( s.hasNextInt() ) { is[0] = s.nextInt(); } else { is[0] = 0; System.err.println(\"Unmatched number of int value at rows=\"+r + \" cols=\"+c); } readMat.put(r, c, is); } } } else if( \"s\".equals(dtStr) ) { type = CvType.CV_16S; readMat = new Mat( rows, cols, type ); short ss[] = new short[1]; for( int r=0 ; r<rows ; r++ ) { for( int c=0 ; c<cols ; c++ ) { if( s.hasNextShort() ) { ss[0] = s.nextShort(); } else { ss[0] = 0; System.err.println(\"Unmatched number of int value at rows=\"+r + \" cols=\"+c); } readMat.put(r, c, ss); } } } else if( \"b\".equals(dtStr) ) { readMat = new Mat( rows, cols, type ); byte bs[] = new byte[1]; for( int r=0 ; r<rows ; r++ ) { for( int c=0 ; c<cols ; c++ ) { if( s.hasNextByte() ) { bs[0] = s.nextByte(); } else { bs[0] = 0; System.err.println(\"Unmatched number of byte value at rows=\"+r + \" cols=\"+c); } readMat.put(r, c, bs); } } } } } return readMat; } public void writeMat(String tag, Mat mat) { try { if( isWrite == false) { System.err.println(\"Try write to file with no write flags\"); return; } Element matrix = doc.createElement(tag); matrix.setAttribute(\"type_id\", \"opencv-matrix\"); rootElement.appendChild(matrix); Element rows = doc.createElement(\"rows\"); rows.appendChild( doc.createTextNode( String.valueOf(mat.rows()) )); Element cols = doc.createElement(\"cols\"); cols.appendChild( doc.createTextNode( String.valueOf(mat.cols()) )); Element dt = doc.createElement(\"dt\"); String dtStr; int type = mat.type(); if(type == CvType.CV_32F ) { dtStr = \"f\"; } else if( type == CvType.CV_32S ) { dtStr = \"i\"; } else if( type == CvType.CV_16S ) { dtStr = \"s\"; } else if( type == CvType.CV_8U ){ dtStr = \"b\"; } else { dtStr = \"unknown\"; } dt.appendChild( doc.createTextNode( dtStr )); Element data = doc.createElement(\"data\"); String dataStr = dataStringBuilder( mat ); data.appendChild( doc.createTextNode( dataStr )); matrix.appendChild( rows ); matrix.appendChild( cols ); matrix.appendChild( dt ); matrix.appendChild( data ); } catch(Exception e) { e.printStackTrace(); } } private String dataStringBuilder(Mat mat) { StringBuilder sb = new StringBuilder(); int rows = mat.rows(); int cols = mat.cols(); int type = mat.type(); if( type == CvType.CV_32F ) { float fs[] = new float[1]; for( int r=0 ; r<rows ; r++ ) { for( int c=0 ; c<cols ; c++ ) { mat.get(r, c, fs); sb.append( String.valueOf(fs[0])); sb.append( ' ' ); } sb.append( '\\n' ); } } else if( type == CvType.CV_32S ) { int is[] = new int[1]; for( int r=0 ; r<rows ; r++ ) { for( int c=0 ; c<cols ; c++ ) { mat.get(r, c, is); sb.append( String.valueOf(is[0])); sb.append( ' ' ); } sb.append( '\\n' ); } } else if( type == CvType.CV_16S ) { short ss[] = new short[1]; for( int r=0 ; r<rows ; r++ ) { for( int c=0 ; c<cols ; c++ ) { mat.get(r, c, ss); sb.append( String.valueOf(ss[0])); sb.append( ' ' ); } sb.append( '\\n' ); } } else if( type == CvType.CV_8U ) { byte bs[] = new byte[1]; for( int r=0 ; r<rows ; r++ ) { for( int c=0 ; c<cols ; c++ ) { mat.get(r, c, bs); sb.append( String.valueOf(bs[0])); sb.append( ' ' ); } sb.append( '\\n' ); } } else { sb.append(\"unknown type\\n\"); } return sb.toString(); } public void release() { try { if( isWrite == false) { System.err.println(\"Try release of file with no write flags\"); return; } DOMSource source = new DOMSource(doc); StreamResult result = new StreamResult(file); Transformer transformer = TransformerFactory.newInstance().newTransformer(); transformer.setOutputProperty(OutputKeys.INDENT, \"yes\"); transformer.transform(source, result); } catch(Exception e) { e.printStackTrace(); } } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/OneToOneMap.java","file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import java.util.HashMap; import java.util.Map; public class OneToOneMap<Key, Value> { private Map<Key, Value> keyToVal; private Map<Value, Key> valToKey; public OneToOneMap() { this.keyToVal = new HashMap<>(); this.valToKey = new HashMap<>(); } public void put(Key k, Value v) { if (!keyToVal.containsKey(k) && !valToKey.containsKey(v)) { keyToVal.put(k, v); valToKey.put(v, k); } } public boolean containsKey(Key k){ return keyToVal.containsKey(k); } public Value getValue(Key k){ return keyToVal.get(k); } public Key getKey(Value v){ return valToKey.get(v); } public int size(){ return keyToVal.size(); } public Map getKeyToValMap(){ return keyToVal; } }"}]}}
{"project_id":222,"chunk_id":0,"content":{"main_file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/CustomCameraView.java","main_file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import android.content.Context; import android.hardware.Camera; import android.util.AttributeSet; import android.util.Log; import android.widget.Toast; import org.opencv.android.JavaCameraView; import java.util.List; public class CustomCameraView extends JavaCameraView { private Camera.Parameters params; public CustomCameraView(Context context, AttributeSet attrs) { super(context, attrs);} public void setExposure(int exposure) { params = mCamera.getParameters(); float minEx = params.getMinExposureCompensation(); float maxEx = params.getMaxExposureCompensation(); exposure = Math.round((maxEx - minEx) / 100 * exposure + minEx); params.setExposureCompensation(exposure); Log.d(\"JavaCameraViewSettings\", \"Exposure Compensation \" + String.valueOf(exposure)); mCamera.setParameters(params); } public void setNightPortrait() { params = mCamera.getParameters(); List<String> sceneModes = params.getSupportedSceneModes(); if (sceneModes != null){ if (sceneModes.contains(Camera.Parameters.SCENE_MODE_NIGHT_PORTRAIT)) { Log.d(\"JavaCameraViewSettings\", \"Night portrait mode supported\"); params.setSceneMode(Camera.Parameters.SCENE_MODE_NIGHT_PORTRAIT); } else { Log.d(\"JavaCameraViewSettings\", \"Night portrait mode supported\"); } mCamera.setParameters(params); } else { Toast.makeText(getContext(), \"The selected camera doesn't support Night Portrait Mode\", Toast.LENGTH_SHORT).show(); } } }","dependencies":[]}}
{"project_id":222,"chunk_id":0,"content":{"main_file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/MatName.java","main_file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import org.opencv.core.Mat; public class MatName { private String name; private Mat mat; public MatName(String name, Mat mat){ this.name = name; this.mat = mat; } public String getName() { return name; } public Mat getMat() { return mat; } public void setMat(Mat mat) { this.mat = mat; } }","dependencies":[]}}
{"project_id":222,"chunk_id":0,"content":{"main_file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/CaffeMobile.java","main_file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; public class CaffeMobile { public native void setNumThreads(int numThreads); public native void enableLog(boolean enabled); public native int loadModel(String modelPath, String weightsPath); private native void setMeanWithMeanFile(String meanFile); private native void setMeanWithMeanValues(float[] meanValues); public native void setScale(float scale); public native float[] getConfidenceScore(String imgPath); public native int[] predictImage(String imgPath, int k); public native float[][] extractFeatures(String imgPath, String blobNames); public void setMean(float[] meanValues) { setMeanWithMeanValues(meanValues); } public void setMean(String meanFile) { setMeanWithMeanFile(meanFile); } public int[] predictImage(String imgPath) { return predictImage(imgPath, 1); } public float[][] getRepresentationLayer(String imgPath, String layer){ return extractFeatures(imgPath, layer); } }","dependencies":[]}}
{"project_id":222,"chunk_id":0,"content":{"main_file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/OneToOneMap.java","main_file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import java.util.HashMap; import java.util.Map; public class OneToOneMap<Key, Value> { private Map<Key, Value> keyToVal; private Map<Value, Key> valToKey; public OneToOneMap() { this.keyToVal = new HashMap<>(); this.valToKey = new HashMap<>(); } public void put(Key k, Value v) { if (!keyToVal.containsKey(k) && !valToKey.containsKey(v)) { keyToVal.put(k, v); valToKey.put(v, k); } } public boolean containsKey(Key k){ return keyToVal.containsKey(k); } public Value getValue(Key k){ return keyToVal.get(k); } public Key getKey(Value v){ return valToKey.get(v); } public int size(){ return keyToVal.size(); } public Map getKeyToValMap(){ return keyToVal; } }","dependencies":[]}}
{"project_id":222,"chunk_id":0,"content":{"main_file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/PreferencesHelper.java","main_file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import android.content.Context; import android.content.SharedPreferences; import android.content.res.Resources; import android.preference.PreferenceManager; import java.util.ArrayList; import java.util.Collections; import java.util.List; import java.util.Set; import ch.zhaw.facerecognitionlibrary.R; public class PreferencesHelper { public enum Usage {RECOGNITION, DETECTION}; SharedPreferences sharedPreferences; Resources resources; public PreferencesHelper(Context context){ sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context); resources = context.getResources(); } public String getClassificationMethod(){ return sharedPreferences.getString(\"key_classification_method\", resources.getString(R.string.eigenfaces)); } public boolean getClassificationMethodTFCaffe(){ return sharedPreferences.getBoolean(\"key_classificationMethodTFCaffe\", true); } public float getGamma(){ return Float.valueOf(sharedPreferences.getString(\"key_gamma\", resources.getString(R.string.gamma))); } public double[] getSigmas(){ String[] sigmasString = sharedPreferences.getString(\"key_sigmas\", resources.getString(R.string.sigmas)).split(\",\"); if(sigmasString.length != 2){ sigmasString = resources.getString(R.string.sigmas).split(\",\"); } double[] sigmas = new double[3]; for(int i=0; i<2; i++){ sigmas[i] = Double.parseDouble(sigmasString[i]); } return sigmas; } public boolean getEyeDetectionEnabled(){ return sharedPreferences.getBoolean(\"key_eye_detection\", true); } public List<String> getStandardPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_standard_pre\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_standard_pre\"); } else { return new ArrayList<>(); } } public List<String> getBrightnessPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_brightness\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_brightness\"); } else { return new ArrayList<>(); } } public List<String> getContoursPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_contours\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_contours\"); } else { return new ArrayList<>(); } } public List<String> getContrastPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_contrast\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_contrast\"); } else { return new ArrayList<>(); } } public List<String> getStandardPostprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_standard_post\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_standard_post\"); } else { return new ArrayList<>(); } } private List<String> getPreferenceList(String key){ Set<String> set = sharedPreferences.getStringSet(key, null); ArrayList<String> list; if(set != null) { list = new ArrayList<String>(set); Collections.sort(list); return list; } else { return new ArrayList<>(); } } public String getCaffeModelFile(){ return sharedPreferences.getString(\"key_modelFileCaffe\", resources.getString(R.string.modelFileCaffe)); } public String getCaffeWeightsFile(){ return sharedPreferences.getString(\"key_weightsFileCaffe\", resources.getString(R.string.weightsFileCaffe)); } public String getCaffeOutputLayer(){ return sharedPreferences.getString(\"key_outputLayerCaffe\", resources.getString(R.string.weightsFileCaffe)); } public float[] getCaffeMeanValues(){ String[] meanValuesString = sharedPreferences.getString(\"key_meanValuesCaffe\", resources.getString(R.string.meanValuesCaffe)).split(\",\"); if(meanValuesString.length != 3){ meanValuesString = resources.getString(R.string.meanValuesCaffe).split(\",\"); } float[] meanValues = new float[3]; for(int i=0; i<3; i++){ meanValues[i] = Float.parseFloat(meanValuesString[i]); } return meanValues; } public String getSvmTrainOptions(){ return sharedPreferences.getString(\"key_svmTrainOptions\", \"-t 0 \"); } public int getK(){ return Integer.valueOf(sharedPreferences.getString(\"key_K\", \"20\")); } public int getN(){ return Integer.valueOf(sharedPreferences.getString(\"key_N\", \"25\")); } public int getFaceSize(){ return Integer.valueOf(sharedPreferences.getString(\"key_faceSize\", \"160\")); } public int getTensorFlowInputSize(){ return Integer.valueOf(sharedPreferences.getString(\"key_inputSize\", \"160\")); } public int getTensorFlowInputChannels(){ return Integer.valueOf(sharedPreferences.getString(\"key_inputChannels\", \"3\")); } public int getTensorFlowImageMean(){ return Integer.valueOf(sharedPreferences.getString(\"key_imageMean\", \"128\")); } public int getTensorFlowImageStd(){ return Integer.valueOf(sharedPreferences.getString(\"key_imageStd\", \"128\")); } public int getTensorFlowOutputSize(){ return Integer.valueOf(sharedPreferences.getString(\"key_outputSize\", \"128\")); } public String getTensorFlowInputLayer(){ return sharedPreferences.getString(\"key_inputLayer\", \"input\"); } public String getTensorFlowOutputLayer(){ return sharedPreferences.getString(\"key_outputLayer\", \"embeddings\"); } public String getTensorFlowModelFile(){ return sharedPreferences.getString(\"key_modelFileTensorFlow\", \"facenet.pb\"); } public float getPCAThreshold(){ return Float.valueOf(sharedPreferences.getString(\"key_pca_threshold\", \"0.98f\")); } public String getFaceCascadeFile(){ return sharedPreferences.getString(\"key_face_cascade_file\", resources.getString(R.string.haarcascade_alt2)); } public String getLefteyeCascadeFile(){ return sharedPreferences.getString(\"key_lefteye_cascade_file\", resources.getString(R.string.haarcascade_lefteye)); } public String getRighteyeCascadeFile(){ return sharedPreferences.getString(\"key_righteye_cascade_file\", resources.getString(R.string.haarcascade_righteye)); } public double getDetectionScaleFactor(){ return Double.parseDouble(sharedPreferences.getString(\"key_scaleFactor\", \"1.1\")); } public int getDetectionMinNeighbors(){ return Integer.parseInt(sharedPreferences.getString(\"key_minNeighbors\", \"3\")); } public int getDetectionFlags(){ return Integer.parseInt(sharedPreferences.getString(\"key_flags\", \"2\")); } public boolean getDetectionMethod(){ return sharedPreferences.getBoolean(\"key_detection_method\", true); } }","dependencies":[]}}
{"project_id":222,"chunk_id":0,"content":{"main_file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/MatOperation.java","main_file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import org.opencv.core.Core; import org.opencv.core.CvType; import org.opencv.core.Mat; import org.opencv.core.MatOfPoint; import org.opencv.core.MatOfPoint2f; import org.opencv.core.Point; import org.opencv.core.Rect; import org.opencv.core.Scalar; import org.opencv.imgproc.Imgproc; public class MatOperation { private static final Scalar FACE_RECT_COLOR = new Scalar(0, 255, 0, 255); private static final int FONT_SIZE = 5; private static final int THICKNESS = 3; public static void rotate_90n(Mat img, int angle) { if(angle == 270 || angle == -90){ Core.transpose(img, img); Core.flip(img, img, 0); }else if(angle == 180 || angle == -180){ Core.flip(img, img, -1); }else if(angle == 90 || angle == -270){ Core.transpose(img, img); Core.flip(img, img, 1); } } public static Point drawRectangleOnPreview(Mat img, Rect face, boolean front_camera){ if(front_camera){ Rect mirroredFace = getMirroredFaceForFrontCamera(img, face); Imgproc.rectangle(img, mirroredFace.tl(), mirroredFace.br(), FACE_RECT_COLOR, THICKNESS); return mirroredFace.tl(); } else { Imgproc.rectangle(img, face.tl(), face.br(), FACE_RECT_COLOR, THICKNESS); return face.tl(); } } public static void drawRectangleAndLabelOnPreview(Mat img, Rect face, String label, boolean front_camera){ Point tl = drawRectangleOnPreview(img, face, front_camera); Imgproc.putText(img, label, tl, Core.FONT_HERSHEY_PLAIN, FONT_SIZE, FACE_RECT_COLOR, THICKNESS); } public static Rect[] rotateFaces(Mat img, Rect[] faces, int angle){ Point center = new Point(img.cols()/2, img.rows()/2); Mat rotMat = Imgproc.getRotationMatrix2D(center, angle, 1); rotMat.convertTo(rotMat, CvType.CV_32FC1); float scale = img.cols()/img.rows(); for(Rect face : faces){ Mat m = new Mat(3, 1, CvType.CV_32FC1); m.put(0,0,face.x); m.put(1,0,face.y); m.put(2,0,1); Mat res = Mat.zeros(2,1,CvType.CV_32FC1); Core.gemm(rotMat, m, 1, new Mat(), 0, res, 0); face.x = (int)res.get(0,0)[0]; face.y = (int)res.get(1,0)[0]; if(angle == 270 || angle == -90){ face.x = (int)(face.x * scale - face.width); face.x = face.x + face.width/4; face.y = face.y + face.height/4; }else if(angle == 180 || angle == -180){ face.x = face.x - face.width; face.y = face.y - face.height; }else if(angle == 90 || angle == -270){ face.y = (int)(face.y * scale - face.height); face.x = face.x - face.width/4; face.y = face.y - face.height/4; } } return faces; } public static Rect getMirroredFaceForFrontCamera(Mat img, Rect face){ int topLeftX = (int) (img.cols() - (face.tl().x + face.width)); int bottomRightX = (int) (img.cols() - (face.br().x) + face.width); Point tl = new Point(topLeftX, face.tl().y); Point br = new Point(bottomRightX, face.br().y); return new Rect(tl, br); } }","dependencies":[]}}
{"project_id":222,"chunk_id":0,"content":{"main_file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/Eyes.java","main_file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import org.opencv.core.MatOfFloat; public class Eyes { double dist; MatOfFloat rightCenter; MatOfFloat leftCenter; double angle; public Eyes(double dist, MatOfFloat rightCenter, MatOfFloat leftCenter, double angle) { this.dist = dist; this.rightCenter = rightCenter; this.leftCenter = leftCenter; this.angle = angle; } public double getDist() { return dist; } public MatOfFloat getRightCenter() { return rightCenter; } public MatOfFloat getLeftCenter() { return leftCenter; } public double getAngle() { return angle; } }","dependencies":[]}}
{"project_id":222,"chunk_id":0,"content":{"main_file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/StandardPostprocessing/Resize.java","main_file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor.StandardPostprocessing; import org.opencv.core.Mat; import org.opencv.core.Size; import org.opencv.imgproc.Imgproc; import java.util.ArrayList; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.PreferencesHelper; import ch.zhaw.facerecognitionlibrary.PreProcessor.Command; import ch.zhaw.facerecognitionlibrary.PreProcessor.PreProcessor; public class Resize implements Command { public PreProcessor preprocessImage(PreProcessor preProcessor) { List<Mat> images = preProcessor.getImages(); PreferencesHelper preferencesHelper = new PreferencesHelper(preProcessor.getContext()); Size size = new Size(preferencesHelper.getN(), preferencesHelper.getN()); preProcessor.setImages(preprocessImages(images, size)); return preProcessor; } public static List<Mat> preprocessImage(List<Mat> images, int n){ Size size = new Size(n, n); return preprocessImages(images,size); } private static List<Mat> preprocessImages(List<Mat> images, Size size){ List<Mat> processed = new ArrayList<Mat>(); for (Mat img : images){ Imgproc.resize(img, img, size); processed.add(img); } return processed; } }","dependencies":[{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/PreferencesHelper.java","file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import android.content.Context; import android.content.SharedPreferences; import android.content.res.Resources; import android.preference.PreferenceManager; import java.util.ArrayList; import java.util.Collections; import java.util.List; import java.util.Set; import ch.zhaw.facerecognitionlibrary.R; public class PreferencesHelper { public enum Usage {RECOGNITION, DETECTION}; SharedPreferences sharedPreferences; Resources resources; public PreferencesHelper(Context context){ sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context); resources = context.getResources(); } public String getClassificationMethod(){ return sharedPreferences.getString(\"key_classification_method\", resources.getString(R.string.eigenfaces)); } public boolean getClassificationMethodTFCaffe(){ return sharedPreferences.getBoolean(\"key_classificationMethodTFCaffe\", true); } public float getGamma(){ return Float.valueOf(sharedPreferences.getString(\"key_gamma\", resources.getString(R.string.gamma))); } public double[] getSigmas(){ String[] sigmasString = sharedPreferences.getString(\"key_sigmas\", resources.getString(R.string.sigmas)).split(\",\"); if(sigmasString.length != 2){ sigmasString = resources.getString(R.string.sigmas).split(\",\"); } double[] sigmas = new double[3]; for(int i=0; i<2; i++){ sigmas[i] = Double.parseDouble(sigmasString[i]); } return sigmas; } public boolean getEyeDetectionEnabled(){ return sharedPreferences.getBoolean(\"key_eye_detection\", true); } public List<String> getStandardPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_standard_pre\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_standard_pre\"); } else { return new ArrayList<>(); } } public List<String> getBrightnessPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_brightness\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_brightness\"); } else { return new ArrayList<>(); } } public List<String> getContoursPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_contours\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_contours\"); } else { return new ArrayList<>(); } } public List<String> getContrastPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_contrast\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_contrast\"); } else { return new ArrayList<>(); } } public List<String> getStandardPostprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_standard_post\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_standard_post\"); } else { return new ArrayList<>(); } } private List<String> getPreferenceList(String key){ Set<String> set = sharedPreferences.getStringSet(key, null); ArrayList<String> list; if(set != null) { list = new ArrayList<String>(set); Collections.sort(list); return list; } else { return new ArrayList<>(); } } public String getCaffeModelFile(){ return sharedPreferences.getString(\"key_modelFileCaffe\", resources.getString(R.string.modelFileCaffe)); } public String getCaffeWeightsFile(){ return sharedPreferences.getString(\"key_weightsFileCaffe\", resources.getString(R.string.weightsFileCaffe)); } public String getCaffeOutputLayer(){ return sharedPreferences.getString(\"key_outputLayerCaffe\", resources.getString(R.string.weightsFileCaffe)); } public float[] getCaffeMeanValues(){ String[] meanValuesString = sharedPreferences.getString(\"key_meanValuesCaffe\", resources.getString(R.string.meanValuesCaffe)).split(\",\"); if(meanValuesString.length != 3){ meanValuesString = resources.getString(R.string.meanValuesCaffe).split(\",\"); } float[] meanValues = new float[3]; for(int i=0; i<3; i++){ meanValues[i] = Float.parseFloat(meanValuesString[i]); } return meanValues; } public String getSvmTrainOptions(){ return sharedPreferences.getString(\"key_svmTrainOptions\", \"-t 0 \"); } public int getK(){ return Integer.valueOf(sharedPreferences.getString(\"key_K\", \"20\")); } public int getN(){ return Integer.valueOf(sharedPreferences.getString(\"key_N\", \"25\")); } public int getFaceSize(){ return Integer.valueOf(sharedPreferences.getString(\"key_faceSize\", \"160\")); } public int getTensorFlowInputSize(){ return Integer.valueOf(sharedPreferences.getString(\"key_inputSize\", \"160\")); } public int getTensorFlowInputChannels(){ return Integer.valueOf(sharedPreferences.getString(\"key_inputChannels\", \"3\")); } public int getTensorFlowImageMean(){ return Integer.valueOf(sharedPreferences.getString(\"key_imageMean\", \"128\")); } public int getTensorFlowImageStd(){ return Integer.valueOf(sharedPreferences.getString(\"key_imageStd\", \"128\")); } public int getTensorFlowOutputSize(){ return Integer.valueOf(sharedPreferences.getString(\"key_outputSize\", \"128\")); } public String getTensorFlowInputLayer(){ return sharedPreferences.getString(\"key_inputLayer\", \"input\"); } public String getTensorFlowOutputLayer(){ return sharedPreferences.getString(\"key_outputLayer\", \"embeddings\"); } public String getTensorFlowModelFile(){ return sharedPreferences.getString(\"key_modelFileTensorFlow\", \"facenet.pb\"); } public float getPCAThreshold(){ return Float.valueOf(sharedPreferences.getString(\"key_pca_threshold\", \"0.98f\")); } public String getFaceCascadeFile(){ return sharedPreferences.getString(\"key_face_cascade_file\", resources.getString(R.string.haarcascade_alt2)); } public String getLefteyeCascadeFile(){ return sharedPreferences.getString(\"key_lefteye_cascade_file\", resources.getString(R.string.haarcascade_lefteye)); } public String getRighteyeCascadeFile(){ return sharedPreferences.getString(\"key_righteye_cascade_file\", resources.getString(R.string.haarcascade_righteye)); } public double getDetectionScaleFactor(){ return Double.parseDouble(sharedPreferences.getString(\"key_scaleFactor\", \"1.1\")); } public int getDetectionMinNeighbors(){ return Integer.parseInt(sharedPreferences.getString(\"key_minNeighbors\", \"3\")); } public int getDetectionFlags(){ return Integer.parseInt(sharedPreferences.getString(\"key_flags\", \"2\")); } public boolean getDetectionMethod(){ return sharedPreferences.getBoolean(\"key_detection_method\", true); } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/Command.java","file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor; public interface Command { PreProcessor preprocessImage(PreProcessor preProcessor); }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/PreProcessor.java","file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor; import android.content.Context; import android.graphics.Bitmap; import android.graphics.PointF; import android.media.FaceDetector; import org.opencv.android.Utils; import org.opencv.core.Core; import org.opencv.core.CvType; import org.opencv.core.Mat; import org.opencv.core.Rect; import org.opencv.imgcodecs.Imgcodecs; import org.opencv.imgproc.Imgproc; import org.opencv.utils.Converters; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.Eyes; import ch.zhaw.facerecognitionlibrary.Helpers.FaceDetection; import ch.zhaw.facerecognitionlibrary.Helpers.MatOperation; import ch.zhaw.facerecognitionlibrary.Helpers.PreferencesHelper; public class PreProcessor { private Context context; private int angle; private Mat img; private List<Mat> images; private Rect[] faces; private Eyes[] eyes; private FaceDetection faceDetection; public Context getContext(){ return context; } public PreProcessor(FaceDetection faceDetection, List<Mat> images, Context context){ this.faceDetection = faceDetection; this.images = images; this.context = context; } public void setFaces(PreProcessorFactory.PreprocessingMode preprocessingMode) { List<Mat> images = getImages(); PreferencesHelper preferencesHelper = new PreferencesHelper(context); if (preferencesHelper.getDetectionMethod()){ faces = faceDetection.getFaces(images.get(0)); angle = faceDetection.getAngle(); } else { Mat img = images.get(0); FaceDetector faceDetector = new FaceDetector(img.cols(), img.rows(), 1); Bitmap bmp = Bitmap.createBitmap(img.cols(), img.rows(), Bitmap.Config.RGB_565); Utils.matToBitmap(img, bmp); FaceDetector.Face[] facesAndroid = new FaceDetector.Face[1]; if (faceDetector.findFaces(bmp, facesAndroid) > 0){ faces = new Rect[facesAndroid.length]; for (int i=0; i<facesAndroid.length; i++){ PointF pointF = new PointF(); facesAndroid[i].getMidPoint(pointF); int xWidth = (int) (1.34 * facesAndroid[i].eyesDistance()); int yWidth = (int) (1.12 * facesAndroid[i].eyesDistance()); int dist = (int) (2.77 * facesAndroid[i].eyesDistance()); Rect face = new Rect((int) pointF.x - xWidth, (int) pointF.y - yWidth, dist, dist); faces[i] = face; } } } if (preprocessingMode == PreProcessorFactory.PreprocessingMode.RECOGNITION && preferencesHelper.getDetectionMethod()){ images.remove(0); images.add(faceDetection.getImg()); setImages(images); } } public void setFaces(Rect[] faces){ this.faces = faces; } public Eyes[] setEyes() { List<Mat> images = getImages(); eyes = new Eyes[images.size()]; for (int i=0; i<images.size(); i++){ Mat img = images.get(i); normalize0255(img); eyes[i] = faceDetection.getEyes(img); } return eyes; } public Eyes[] getEyes() { return eyes; } public Rect[] getFaces() { return faces; } public int getAngle() { return angle; } public void setAngle(int angle) { this.angle = angle; for (Mat img : images){ MatOperation.rotate_90n(img, angle); } } public Mat getImg() { return img; } public void setImages(List<Mat> images) { this.images = images; } public List<Mat> getImages() { return images; } public void setImg(Mat img) { this.img = img; } public void normalize0255(Mat norm){ Core.normalize(norm, norm, 0, 255, Core.NORM_MINMAX, CvType.CV_8UC1); } }"}]}}
{"project_id":222,"chunk_id":0,"content":{"main_file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/BrightnessCorrection/GammaCorrection.java","main_file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor.BrightnessCorrection; import org.opencv.core.Core; import org.opencv.core.CvType; import org.opencv.core.Mat; import org.opencv.core.Scalar; import java.util.ArrayList; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.FileHelper; import ch.zhaw.facerecognitionlibrary.Helpers.MatName; import ch.zhaw.facerecognitionlibrary.PreProcessor.Command; import ch.zhaw.facerecognitionlibrary.PreProcessor.PreProcessor; public class GammaCorrection implements Command { private double gamma; private static final Scalar INT_MAX = new Scalar(255); public GammaCorrection(double gamma) { this.gamma = gamma; } public PreProcessor preprocessImage(PreProcessor preProcessor) { List<Mat> images = preProcessor.getImages(); List<Mat> processed = new ArrayList<Mat>(); for (Mat img : images){ img.convertTo(img, CvType.CV_32F); Core.divide(img, INT_MAX, img); Core.pow(img, gamma, img); Core.multiply(img, INT_MAX, img); img.convertTo(img, CvType.CV_8U); processed.add(img); } preProcessor.setImages(processed); return preProcessor; } }","dependencies":[{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/Command.java","file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor; public interface Command { PreProcessor preprocessImage(PreProcessor preProcessor); }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/PreProcessor.java","file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor; import android.content.Context; import android.graphics.Bitmap; import android.graphics.PointF; import android.media.FaceDetector; import org.opencv.android.Utils; import org.opencv.core.Core; import org.opencv.core.CvType; import org.opencv.core.Mat; import org.opencv.core.Rect; import org.opencv.imgcodecs.Imgcodecs; import org.opencv.imgproc.Imgproc; import org.opencv.utils.Converters; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.Eyes; import ch.zhaw.facerecognitionlibrary.Helpers.FaceDetection; import ch.zhaw.facerecognitionlibrary.Helpers.MatOperation; import ch.zhaw.facerecognitionlibrary.Helpers.PreferencesHelper; public class PreProcessor { private Context context; private int angle; private Mat img; private List<Mat> images; private Rect[] faces; private Eyes[] eyes; private FaceDetection faceDetection; public Context getContext(){ return context; } public PreProcessor(FaceDetection faceDetection, List<Mat> images, Context context){ this.faceDetection = faceDetection; this.images = images; this.context = context; } public void setFaces(PreProcessorFactory.PreprocessingMode preprocessingMode) { List<Mat> images = getImages(); PreferencesHelper preferencesHelper = new PreferencesHelper(context); if (preferencesHelper.getDetectionMethod()){ faces = faceDetection.getFaces(images.get(0)); angle = faceDetection.getAngle(); } else { Mat img = images.get(0); FaceDetector faceDetector = new FaceDetector(img.cols(), img.rows(), 1); Bitmap bmp = Bitmap.createBitmap(img.cols(), img.rows(), Bitmap.Config.RGB_565); Utils.matToBitmap(img, bmp); FaceDetector.Face[] facesAndroid = new FaceDetector.Face[1]; if (faceDetector.findFaces(bmp, facesAndroid) > 0){ faces = new Rect[facesAndroid.length]; for (int i=0; i<facesAndroid.length; i++){ PointF pointF = new PointF(); facesAndroid[i].getMidPoint(pointF); int xWidth = (int) (1.34 * facesAndroid[i].eyesDistance()); int yWidth = (int) (1.12 * facesAndroid[i].eyesDistance()); int dist = (int) (2.77 * facesAndroid[i].eyesDistance()); Rect face = new Rect((int) pointF.x - xWidth, (int) pointF.y - yWidth, dist, dist); faces[i] = face; } } } if (preprocessingMode == PreProcessorFactory.PreprocessingMode.RECOGNITION && preferencesHelper.getDetectionMethod()){ images.remove(0); images.add(faceDetection.getImg()); setImages(images); } } public void setFaces(Rect[] faces){ this.faces = faces; } public Eyes[] setEyes() { List<Mat> images = getImages(); eyes = new Eyes[images.size()]; for (int i=0; i<images.size(); i++){ Mat img = images.get(i); normalize0255(img); eyes[i] = faceDetection.getEyes(img); } return eyes; } public Eyes[] getEyes() { return eyes; } public Rect[] getFaces() { return faces; } public int getAngle() { return angle; } public void setAngle(int angle) { this.angle = angle; for (Mat img : images){ MatOperation.rotate_90n(img, angle); } } public Mat getImg() { return img; } public void setImages(List<Mat> images) { this.images = images; } public List<Mat> getImages() { return images; } public void setImg(Mat img) { this.img = img; } public void normalize0255(Mat norm){ Core.normalize(norm, norm, 0, 255, Core.NORM_MINMAX, CvType.CV_8UC1); } }"}]}}
{"project_id":222,"chunk_id":0,"content":{"main_file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/Contours/Masking.java","main_file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor.Contours; import org.opencv.core.CvType; import org.opencv.core.Mat; import org.opencv.imgproc.Imgproc; import java.util.ArrayList; import java.util.List; import ch.zhaw.facerecognitionlibrary.PreProcessor.Command; import ch.zhaw.facerecognitionlibrary.PreProcessor.PreProcessor; public class Masking implements Command { public PreProcessor preprocessImage(PreProcessor preProcessor) { List<Mat> images = preProcessor.getImages(); List<Mat> processed = new ArrayList<Mat>(); for (Mat img : images){ preProcessor.normalize0255(img); double otsu_thresh_val = Imgproc.threshold(img, img, 0, 255, Imgproc.THRESH_OTSU); Imgproc.Canny(img, img, otsu_thresh_val * 0.5, otsu_thresh_val); processed.add(img); } preProcessor.setImages(processed); return preProcessor; } }","dependencies":[{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/Command.java","file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor; public interface Command { PreProcessor preprocessImage(PreProcessor preProcessor); }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/PreProcessor.java","file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor; import android.content.Context; import android.graphics.Bitmap; import android.graphics.PointF; import android.media.FaceDetector; import org.opencv.android.Utils; import org.opencv.core.Core; import org.opencv.core.CvType; import org.opencv.core.Mat; import org.opencv.core.Rect; import org.opencv.imgcodecs.Imgcodecs; import org.opencv.imgproc.Imgproc; import org.opencv.utils.Converters; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.Eyes; import ch.zhaw.facerecognitionlibrary.Helpers.FaceDetection; import ch.zhaw.facerecognitionlibrary.Helpers.MatOperation; import ch.zhaw.facerecognitionlibrary.Helpers.PreferencesHelper; public class PreProcessor { private Context context; private int angle; private Mat img; private List<Mat> images; private Rect[] faces; private Eyes[] eyes; private FaceDetection faceDetection; public Context getContext(){ return context; } public PreProcessor(FaceDetection faceDetection, List<Mat> images, Context context){ this.faceDetection = faceDetection; this.images = images; this.context = context; } public void setFaces(PreProcessorFactory.PreprocessingMode preprocessingMode) { List<Mat> images = getImages(); PreferencesHelper preferencesHelper = new PreferencesHelper(context); if (preferencesHelper.getDetectionMethod()){ faces = faceDetection.getFaces(images.get(0)); angle = faceDetection.getAngle(); } else { Mat img = images.get(0); FaceDetector faceDetector = new FaceDetector(img.cols(), img.rows(), 1); Bitmap bmp = Bitmap.createBitmap(img.cols(), img.rows(), Bitmap.Config.RGB_565); Utils.matToBitmap(img, bmp); FaceDetector.Face[] facesAndroid = new FaceDetector.Face[1]; if (faceDetector.findFaces(bmp, facesAndroid) > 0){ faces = new Rect[facesAndroid.length]; for (int i=0; i<facesAndroid.length; i++){ PointF pointF = new PointF(); facesAndroid[i].getMidPoint(pointF); int xWidth = (int) (1.34 * facesAndroid[i].eyesDistance()); int yWidth = (int) (1.12 * facesAndroid[i].eyesDistance()); int dist = (int) (2.77 * facesAndroid[i].eyesDistance()); Rect face = new Rect((int) pointF.x - xWidth, (int) pointF.y - yWidth, dist, dist); faces[i] = face; } } } if (preprocessingMode == PreProcessorFactory.PreprocessingMode.RECOGNITION && preferencesHelper.getDetectionMethod()){ images.remove(0); images.add(faceDetection.getImg()); setImages(images); } } public void setFaces(Rect[] faces){ this.faces = faces; } public Eyes[] setEyes() { List<Mat> images = getImages(); eyes = new Eyes[images.size()]; for (int i=0; i<images.size(); i++){ Mat img = images.get(i); normalize0255(img); eyes[i] = faceDetection.getEyes(img); } return eyes; } public Eyes[] getEyes() { return eyes; } public Rect[] getFaces() { return faces; } public int getAngle() { return angle; } public void setAngle(int angle) { this.angle = angle; for (Mat img : images){ MatOperation.rotate_90n(img, angle); } } public Mat getImg() { return img; } public void setImages(List<Mat> images) { this.images = images; } public List<Mat> getImages() { return images; } public void setImg(Mat img) { this.img = img; } public void normalize0255(Mat norm){ Core.normalize(norm, norm, 0, 255, Core.NORM_MINMAX, CvType.CV_8UC1); } }"}]}}
{"project_id":222,"chunk_id":0,"content":{"main_file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/Contours/LocalBinaryPattern.java","main_file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor.Contours; import org.opencv.core.Mat; import org.opencv.core.Size; import org.opencv.imgproc.Imgproc; import java.util.ArrayList; import java.util.BitSet; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.FileHelper; import ch.zhaw.facerecognitionlibrary.Helpers.MatName; import ch.zhaw.facerecognitionlibrary.Helpers.PreferencesHelper; import ch.zhaw.facerecognitionlibrary.PreProcessor.Command; import ch.zhaw.facerecognitionlibrary.PreProcessor.PreProcessor; public class LocalBinaryPattern implements Command { @Override public PreProcessor preprocessImage(PreProcessor preProcessor) { List<Mat> images = preProcessor.getImages(); List<Mat> processed = new ArrayList<Mat>(); for(Mat img : images){ PreferencesHelper preferencesHelper = new PreferencesHelper(preProcessor.getContext()); Size size = new Size(preferencesHelper.getN(), preferencesHelper.getN()); Imgproc.resize(img, img, size); Mat lbp = new Mat(img.rows()-2, img.cols()-2, img.type()); for (int i=1; i<img.rows()-1; i++){ for (int j=1; j<img.cols()-1; j++){ BitSet out = new BitSet(8); double cen = img.get(i, j)[0]; if(img.get(i-1, j-1)[0] > cen) out.set(0); if(img.get(i-1, j)[0] > cen) out.set(1); if(img.get(i-1, j+1)[0] > cen) out.set(2); if(img.get(i, j+1)[0] > cen) out.set(3); if(img.get(i+1,j+1)[0] > cen) out.set(4); if(img.get(i+1,j)[0] > cen) out.set(5); if(img.get(i+1,j-1)[0] > cen) out.set(6); if(img.get(i,j-1)[0] > cen) out.set(7); int value = 0; for(int k=0; k<out.length(); k++){ int index = out.nextSetBit(k); value += Math.pow(2,out.length() - 1 - index); k = index; } lbp.put(i-1, j-1, value); } } processed.add(lbp); } preProcessor.setImages(processed); return preProcessor; } }","dependencies":[{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/PreferencesHelper.java","file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import android.content.Context; import android.content.SharedPreferences; import android.content.res.Resources; import android.preference.PreferenceManager; import java.util.ArrayList; import java.util.Collections; import java.util.List; import java.util.Set; import ch.zhaw.facerecognitionlibrary.R; public class PreferencesHelper { public enum Usage {RECOGNITION, DETECTION}; SharedPreferences sharedPreferences; Resources resources; public PreferencesHelper(Context context){ sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context); resources = context.getResources(); } public String getClassificationMethod(){ return sharedPreferences.getString(\"key_classification_method\", resources.getString(R.string.eigenfaces)); } public boolean getClassificationMethodTFCaffe(){ return sharedPreferences.getBoolean(\"key_classificationMethodTFCaffe\", true); } public float getGamma(){ return Float.valueOf(sharedPreferences.getString(\"key_gamma\", resources.getString(R.string.gamma))); } public double[] getSigmas(){ String[] sigmasString = sharedPreferences.getString(\"key_sigmas\", resources.getString(R.string.sigmas)).split(\",\"); if(sigmasString.length != 2){ sigmasString = resources.getString(R.string.sigmas).split(\",\"); } double[] sigmas = new double[3]; for(int i=0; i<2; i++){ sigmas[i] = Double.parseDouble(sigmasString[i]); } return sigmas; } public boolean getEyeDetectionEnabled(){ return sharedPreferences.getBoolean(\"key_eye_detection\", true); } public List<String> getStandardPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_standard_pre\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_standard_pre\"); } else { return new ArrayList<>(); } } public List<String> getBrightnessPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_brightness\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_brightness\"); } else { return new ArrayList<>(); } } public List<String> getContoursPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_contours\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_contours\"); } else { return new ArrayList<>(); } } public List<String> getContrastPreprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_contrast\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_contrast\"); } else { return new ArrayList<>(); } } public List<String> getStandardPostprocessing(Usage usage){ if (usage == Usage.RECOGNITION){ return getPreferenceList(\"key_standard_post\"); } else if (usage == Usage.DETECTION){ return getPreferenceList(\"key_detection_standard_post\"); } else { return new ArrayList<>(); } } private List<String> getPreferenceList(String key){ Set<String> set = sharedPreferences.getStringSet(key, null); ArrayList<String> list; if(set != null) { list = new ArrayList<String>(set); Collections.sort(list); return list; } else { return new ArrayList<>(); } } public String getCaffeModelFile(){ return sharedPreferences.getString(\"key_modelFileCaffe\", resources.getString(R.string.modelFileCaffe)); } public String getCaffeWeightsFile(){ return sharedPreferences.getString(\"key_weightsFileCaffe\", resources.getString(R.string.weightsFileCaffe)); } public String getCaffeOutputLayer(){ return sharedPreferences.getString(\"key_outputLayerCaffe\", resources.getString(R.string.weightsFileCaffe)); } public float[] getCaffeMeanValues(){ String[] meanValuesString = sharedPreferences.getString(\"key_meanValuesCaffe\", resources.getString(R.string.meanValuesCaffe)).split(\",\"); if(meanValuesString.length != 3){ meanValuesString = resources.getString(R.string.meanValuesCaffe).split(\",\"); } float[] meanValues = new float[3]; for(int i=0; i<3; i++){ meanValues[i] = Float.parseFloat(meanValuesString[i]); } return meanValues; } public String getSvmTrainOptions(){ return sharedPreferences.getString(\"key_svmTrainOptions\", \"-t 0 \"); } public int getK(){ return Integer.valueOf(sharedPreferences.getString(\"key_K\", \"20\")); } public int getN(){ return Integer.valueOf(sharedPreferences.getString(\"key_N\", \"25\")); } public int getFaceSize(){ return Integer.valueOf(sharedPreferences.getString(\"key_faceSize\", \"160\")); } public int getTensorFlowInputSize(){ return Integer.valueOf(sharedPreferences.getString(\"key_inputSize\", \"160\")); } public int getTensorFlowInputChannels(){ return Integer.valueOf(sharedPreferences.getString(\"key_inputChannels\", \"3\")); } public int getTensorFlowImageMean(){ return Integer.valueOf(sharedPreferences.getString(\"key_imageMean\", \"128\")); } public int getTensorFlowImageStd(){ return Integer.valueOf(sharedPreferences.getString(\"key_imageStd\", \"128\")); } public int getTensorFlowOutputSize(){ return Integer.valueOf(sharedPreferences.getString(\"key_outputSize\", \"128\")); } public String getTensorFlowInputLayer(){ return sharedPreferences.getString(\"key_inputLayer\", \"input\"); } public String getTensorFlowOutputLayer(){ return sharedPreferences.getString(\"key_outputLayer\", \"embeddings\"); } public String getTensorFlowModelFile(){ return sharedPreferences.getString(\"key_modelFileTensorFlow\", \"facenet.pb\"); } public float getPCAThreshold(){ return Float.valueOf(sharedPreferences.getString(\"key_pca_threshold\", \"0.98f\")); } public String getFaceCascadeFile(){ return sharedPreferences.getString(\"key_face_cascade_file\", resources.getString(R.string.haarcascade_alt2)); } public String getLefteyeCascadeFile(){ return sharedPreferences.getString(\"key_lefteye_cascade_file\", resources.getString(R.string.haarcascade_lefteye)); } public String getRighteyeCascadeFile(){ return sharedPreferences.getString(\"key_righteye_cascade_file\", resources.getString(R.string.haarcascade_righteye)); } public double getDetectionScaleFactor(){ return Double.parseDouble(sharedPreferences.getString(\"key_scaleFactor\", \"1.1\")); } public int getDetectionMinNeighbors(){ return Integer.parseInt(sharedPreferences.getString(\"key_minNeighbors\", \"3\")); } public int getDetectionFlags(){ return Integer.parseInt(sharedPreferences.getString(\"key_flags\", \"2\")); } public boolean getDetectionMethod(){ return sharedPreferences.getBoolean(\"key_detection_method\", true); } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/Command.java","file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor; public interface Command { PreProcessor preprocessImage(PreProcessor preProcessor); }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/PreProcessor.java","file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor; import android.content.Context; import android.graphics.Bitmap; import android.graphics.PointF; import android.media.FaceDetector; import org.opencv.android.Utils; import org.opencv.core.Core; import org.opencv.core.CvType; import org.opencv.core.Mat; import org.opencv.core.Rect; import org.opencv.imgcodecs.Imgcodecs; import org.opencv.imgproc.Imgproc; import org.opencv.utils.Converters; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.Eyes; import ch.zhaw.facerecognitionlibrary.Helpers.FaceDetection; import ch.zhaw.facerecognitionlibrary.Helpers.MatOperation; import ch.zhaw.facerecognitionlibrary.Helpers.PreferencesHelper; public class PreProcessor { private Context context; private int angle; private Mat img; private List<Mat> images; private Rect[] faces; private Eyes[] eyes; private FaceDetection faceDetection; public Context getContext(){ return context; } public PreProcessor(FaceDetection faceDetection, List<Mat> images, Context context){ this.faceDetection = faceDetection; this.images = images; this.context = context; } public void setFaces(PreProcessorFactory.PreprocessingMode preprocessingMode) { List<Mat> images = getImages(); PreferencesHelper preferencesHelper = new PreferencesHelper(context); if (preferencesHelper.getDetectionMethod()){ faces = faceDetection.getFaces(images.get(0)); angle = faceDetection.getAngle(); } else { Mat img = images.get(0); FaceDetector faceDetector = new FaceDetector(img.cols(), img.rows(), 1); Bitmap bmp = Bitmap.createBitmap(img.cols(), img.rows(), Bitmap.Config.RGB_565); Utils.matToBitmap(img, bmp); FaceDetector.Face[] facesAndroid = new FaceDetector.Face[1]; if (faceDetector.findFaces(bmp, facesAndroid) > 0){ faces = new Rect[facesAndroid.length]; for (int i=0; i<facesAndroid.length; i++){ PointF pointF = new PointF(); facesAndroid[i].getMidPoint(pointF); int xWidth = (int) (1.34 * facesAndroid[i].eyesDistance()); int yWidth = (int) (1.12 * facesAndroid[i].eyesDistance()); int dist = (int) (2.77 * facesAndroid[i].eyesDistance()); Rect face = new Rect((int) pointF.x - xWidth, (int) pointF.y - yWidth, dist, dist); faces[i] = face; } } } if (preprocessingMode == PreProcessorFactory.PreprocessingMode.RECOGNITION && preferencesHelper.getDetectionMethod()){ images.remove(0); images.add(faceDetection.getImg()); setImages(images); } } public void setFaces(Rect[] faces){ this.faces = faces; } public Eyes[] setEyes() { List<Mat> images = getImages(); eyes = new Eyes[images.size()]; for (int i=0; i<images.size(); i++){ Mat img = images.get(i); normalize0255(img); eyes[i] = faceDetection.getEyes(img); } return eyes; } public Eyes[] getEyes() { return eyes; } public Rect[] getFaces() { return faces; } public int getAngle() { return angle; } public void setAngle(int angle) { this.angle = angle; for (Mat img : images){ MatOperation.rotate_90n(img, angle); } } public Mat getImg() { return img; } public void setImages(List<Mat> images) { this.images = images; } public List<Mat> getImages() { return images; } public void setImg(Mat img) { this.img = img; } public void normalize0255(Mat norm){ Core.normalize(norm, norm, 0, 255, Core.NORM_MINMAX, CvType.CV_8UC1); } }"}]}}
{"project_id":222,"chunk_id":0,"content":{"main_file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/Contours/DifferenceOfGaussian.java","main_file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor.Contours; import org.opencv.core.Core; import org.opencv.core.Mat; import org.opencv.core.Size; import org.opencv.imgproc.Imgproc; import java.util.ArrayList; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.FileHelper; import ch.zhaw.facerecognitionlibrary.Helpers.MatName; import ch.zhaw.facerecognitionlibrary.PreProcessor.Command; import ch.zhaw.facerecognitionlibrary.PreProcessor.PreProcessor; public class DifferenceOfGaussian implements Command { private double sigma1; private double sigma2; private Size size1; private Size size2; public DifferenceOfGaussian(double[] sigmas) { this.sigma1 = sigmas[0]; this.sigma2 = sigmas[1]; this.size1 = new Size(2 * Math.ceil(2*sigma1) + 1, 2 * Math.ceil(2*sigma1) + 1); this.size2 = new Size(2 * Math.ceil(2*sigma2) + 1, 2 * Math.ceil(2*sigma2) + 1); } public PreProcessor preprocessImage(PreProcessor preProcessor) { List<Mat> images = preProcessor.getImages(); List<Mat> processed = new ArrayList<Mat>(); for (Mat img : images){ Mat gauss1 = new Mat(); Mat gauss2 = new Mat(); Imgproc.GaussianBlur(img, gauss1, size1, sigma1); Imgproc.GaussianBlur(img, gauss2, size2, sigma2); Core.absdiff(gauss1, gauss2, img); processed.add(img); } preProcessor.setImages(processed); return preProcessor; } }","dependencies":[{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/Command.java","file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor; public interface Command { PreProcessor preprocessImage(PreProcessor preProcessor); }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/PreProcessor.java","file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor; import android.content.Context; import android.graphics.Bitmap; import android.graphics.PointF; import android.media.FaceDetector; import org.opencv.android.Utils; import org.opencv.core.Core; import org.opencv.core.CvType; import org.opencv.core.Mat; import org.opencv.core.Rect; import org.opencv.imgcodecs.Imgcodecs; import org.opencv.imgproc.Imgproc; import org.opencv.utils.Converters; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.Eyes; import ch.zhaw.facerecognitionlibrary.Helpers.FaceDetection; import ch.zhaw.facerecognitionlibrary.Helpers.MatOperation; import ch.zhaw.facerecognitionlibrary.Helpers.PreferencesHelper; public class PreProcessor { private Context context; private int angle; private Mat img; private List<Mat> images; private Rect[] faces; private Eyes[] eyes; private FaceDetection faceDetection; public Context getContext(){ return context; } public PreProcessor(FaceDetection faceDetection, List<Mat> images, Context context){ this.faceDetection = faceDetection; this.images = images; this.context = context; } public void setFaces(PreProcessorFactory.PreprocessingMode preprocessingMode) { List<Mat> images = getImages(); PreferencesHelper preferencesHelper = new PreferencesHelper(context); if (preferencesHelper.getDetectionMethod()){ faces = faceDetection.getFaces(images.get(0)); angle = faceDetection.getAngle(); } else { Mat img = images.get(0); FaceDetector faceDetector = new FaceDetector(img.cols(), img.rows(), 1); Bitmap bmp = Bitmap.createBitmap(img.cols(), img.rows(), Bitmap.Config.RGB_565); Utils.matToBitmap(img, bmp); FaceDetector.Face[] facesAndroid = new FaceDetector.Face[1]; if (faceDetector.findFaces(bmp, facesAndroid) > 0){ faces = new Rect[facesAndroid.length]; for (int i=0; i<facesAndroid.length; i++){ PointF pointF = new PointF(); facesAndroid[i].getMidPoint(pointF); int xWidth = (int) (1.34 * facesAndroid[i].eyesDistance()); int yWidth = (int) (1.12 * facesAndroid[i].eyesDistance()); int dist = (int) (2.77 * facesAndroid[i].eyesDistance()); Rect face = new Rect((int) pointF.x - xWidth, (int) pointF.y - yWidth, dist, dist); faces[i] = face; } } } if (preprocessingMode == PreProcessorFactory.PreprocessingMode.RECOGNITION && preferencesHelper.getDetectionMethod()){ images.remove(0); images.add(faceDetection.getImg()); setImages(images); } } public void setFaces(Rect[] faces){ this.faces = faces; } public Eyes[] setEyes() { List<Mat> images = getImages(); eyes = new Eyes[images.size()]; for (int i=0; i<images.size(); i++){ Mat img = images.get(i); normalize0255(img); eyes[i] = faceDetection.getEyes(img); } return eyes; } public Eyes[] getEyes() { return eyes; } public Rect[] getFaces() { return faces; } public int getAngle() { return angle; } public void setAngle(int angle) { this.angle = angle; for (Mat img : images){ MatOperation.rotate_90n(img, angle); } } public Mat getImg() { return img; } public void setImages(List<Mat> images) { this.images = images; } public List<Mat> getImages() { return images; } public void setImg(Mat img) { this.img = img; } public void normalize0255(Mat norm){ Core.normalize(norm, norm, 0, 255, Core.NORM_MINMAX, CvType.CV_8UC1); } }"}]}}
{"project_id":222,"chunk_id":0,"content":{"main_file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/ContrastAdjustment/HistogrammEqualization.java","main_file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor.ContrastAdjustment; import org.opencv.core.CvType; import org.opencv.core.Mat; import org.opencv.imgproc.Imgproc; import java.util.ArrayList; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.FileHelper; import ch.zhaw.facerecognitionlibrary.Helpers.MatName; import ch.zhaw.facerecognitionlibrary.PreProcessor.Command; import ch.zhaw.facerecognitionlibrary.PreProcessor.PreProcessor; public class HistogrammEqualization implements Command { public PreProcessor preprocessImage(PreProcessor preProcessor) { List<Mat> images = preProcessor.getImages(); List<Mat> processed = new ArrayList<Mat>(); for (Mat img : images){ img.convertTo(img, CvType.CV_8U); Imgproc.equalizeHist(img, img); processed.add(img); } preProcessor.setImages(processed); return preProcessor; } }","dependencies":[{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/Command.java","file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor; public interface Command { PreProcessor preprocessImage(PreProcessor preProcessor); }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/PreProcessor.java","file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor; import android.content.Context; import android.graphics.Bitmap; import android.graphics.PointF; import android.media.FaceDetector; import org.opencv.android.Utils; import org.opencv.core.Core; import org.opencv.core.CvType; import org.opencv.core.Mat; import org.opencv.core.Rect; import org.opencv.imgcodecs.Imgcodecs; import org.opencv.imgproc.Imgproc; import org.opencv.utils.Converters; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.Eyes; import ch.zhaw.facerecognitionlibrary.Helpers.FaceDetection; import ch.zhaw.facerecognitionlibrary.Helpers.MatOperation; import ch.zhaw.facerecognitionlibrary.Helpers.PreferencesHelper; public class PreProcessor { private Context context; private int angle; private Mat img; private List<Mat> images; private Rect[] faces; private Eyes[] eyes; private FaceDetection faceDetection; public Context getContext(){ return context; } public PreProcessor(FaceDetection faceDetection, List<Mat> images, Context context){ this.faceDetection = faceDetection; this.images = images; this.context = context; } public void setFaces(PreProcessorFactory.PreprocessingMode preprocessingMode) { List<Mat> images = getImages(); PreferencesHelper preferencesHelper = new PreferencesHelper(context); if (preferencesHelper.getDetectionMethod()){ faces = faceDetection.getFaces(images.get(0)); angle = faceDetection.getAngle(); } else { Mat img = images.get(0); FaceDetector faceDetector = new FaceDetector(img.cols(), img.rows(), 1); Bitmap bmp = Bitmap.createBitmap(img.cols(), img.rows(), Bitmap.Config.RGB_565); Utils.matToBitmap(img, bmp); FaceDetector.Face[] facesAndroid = new FaceDetector.Face[1]; if (faceDetector.findFaces(bmp, facesAndroid) > 0){ faces = new Rect[facesAndroid.length]; for (int i=0; i<facesAndroid.length; i++){ PointF pointF = new PointF(); facesAndroid[i].getMidPoint(pointF); int xWidth = (int) (1.34 * facesAndroid[i].eyesDistance()); int yWidth = (int) (1.12 * facesAndroid[i].eyesDistance()); int dist = (int) (2.77 * facesAndroid[i].eyesDistance()); Rect face = new Rect((int) pointF.x - xWidth, (int) pointF.y - yWidth, dist, dist); faces[i] = face; } } } if (preprocessingMode == PreProcessorFactory.PreprocessingMode.RECOGNITION && preferencesHelper.getDetectionMethod()){ images.remove(0); images.add(faceDetection.getImg()); setImages(images); } } public void setFaces(Rect[] faces){ this.faces = faces; } public Eyes[] setEyes() { List<Mat> images = getImages(); eyes = new Eyes[images.size()]; for (int i=0; i<images.size(); i++){ Mat img = images.get(i); normalize0255(img); eyes[i] = faceDetection.getEyes(img); } return eyes; } public Eyes[] getEyes() { return eyes; } public Rect[] getFaces() { return faces; } public int getAngle() { return angle; } public void setAngle(int angle) { this.angle = angle; for (Mat img : images){ MatOperation.rotate_90n(img, angle); } } public Mat getImg() { return img; } public void setImages(List<Mat> images) { this.images = images; } public List<Mat> getImages() { return images; } public void setImg(Mat img) { this.img = img; } public void normalize0255(Mat norm){ Core.normalize(norm, norm, 0, 255, Core.NORM_MINMAX, CvType.CV_8UC1); } }"}]}}
{"project_id":222,"chunk_id":0,"content":{"main_file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/StandardPreprocessing/EyeAlignment.java","main_file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor.StandardPreprocessing; import org.opencv.core.Mat; import org.opencv.core.MatOfFloat; import org.opencv.core.Point; import org.opencv.core.Size; import org.opencv.imgproc.Imgproc; import java.util.ArrayList; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.Eyes; import ch.zhaw.facerecognitionlibrary.PreProcessor.Command; import ch.zhaw.facerecognitionlibrary.PreProcessor.PreProcessor; public class EyeAlignment implements Command { private static final double DESIRED_RIGHT_EYE_X = 0.24; private static final double DESIRED_RIGHT_EYE_Y = 0.30; private static final double DESIRED_LEFT_EYE_X = (1.0 - DESIRED_RIGHT_EYE_X); public PreProcessor preprocessImage(PreProcessor preProcessor) { List<Mat> images = preProcessor.getImages(); List<Mat> processed = new ArrayList<Mat>(); Eyes[] eyes = preProcessor.setEyes(); if (eyes == null || eyes[0] == null){ return null; } for (int i=0; i<images.size(); i++){ Mat img = images.get(i); Eyes eye = eyes[i]; double desiredLen = (DESIRED_LEFT_EYE_X - DESIRED_RIGHT_EYE_X) * img.cols(); double scale = 0.9 * desiredLen / eye.getDist(); MatOfFloat leftCenter = eye.getLeftCenter(); MatOfFloat rightCenter = eye.getRightCenter(); double centerX = ((leftCenter.get(0,0)[0] + rightCenter.get(0,0)[0]) / 2); double centerY = ((leftCenter.get(1,0)[0] + rightCenter.get(1,0)[0]) / 2); Mat rotMat = Imgproc.getRotationMatrix2D(new Point(centerX,centerY), eye.getAngle(), scale); rotMat.put(2, 0, img.cols() * 0.5 - centerX); rotMat.put(2, 1, img.rows() * DESIRED_RIGHT_EYE_Y - centerY); Imgproc.warpAffine(img, img, rotMat, new Size(img.cols(),img.rows())); processed.add(img); } preProcessor.setImages(processed); return preProcessor; } }","dependencies":[{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/Helpers/Eyes.java","file_content":"package ch.zhaw.facerecognitionlibrary.Helpers; import org.opencv.core.MatOfFloat; public class Eyes { double dist; MatOfFloat rightCenter; MatOfFloat leftCenter; double angle; public Eyes(double dist, MatOfFloat rightCenter, MatOfFloat leftCenter, double angle) { this.dist = dist; this.rightCenter = rightCenter; this.leftCenter = leftCenter; this.angle = angle; } public double getDist() { return dist; } public MatOfFloat getRightCenter() { return rightCenter; } public MatOfFloat getLeftCenter() { return leftCenter; } public double getAngle() { return angle; } }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/Command.java","file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor; public interface Command { PreProcessor preprocessImage(PreProcessor preProcessor); }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/PreProcessor.java","file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor; import android.content.Context; import android.graphics.Bitmap; import android.graphics.PointF; import android.media.FaceDetector; import org.opencv.android.Utils; import org.opencv.core.Core; import org.opencv.core.CvType; import org.opencv.core.Mat; import org.opencv.core.Rect; import org.opencv.imgcodecs.Imgcodecs; import org.opencv.imgproc.Imgproc; import org.opencv.utils.Converters; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.Eyes; import ch.zhaw.facerecognitionlibrary.Helpers.FaceDetection; import ch.zhaw.facerecognitionlibrary.Helpers.MatOperation; import ch.zhaw.facerecognitionlibrary.Helpers.PreferencesHelper; public class PreProcessor { private Context context; private int angle; private Mat img; private List<Mat> images; private Rect[] faces; private Eyes[] eyes; private FaceDetection faceDetection; public Context getContext(){ return context; } public PreProcessor(FaceDetection faceDetection, List<Mat> images, Context context){ this.faceDetection = faceDetection; this.images = images; this.context = context; } public void setFaces(PreProcessorFactory.PreprocessingMode preprocessingMode) { List<Mat> images = getImages(); PreferencesHelper preferencesHelper = new PreferencesHelper(context); if (preferencesHelper.getDetectionMethod()){ faces = faceDetection.getFaces(images.get(0)); angle = faceDetection.getAngle(); } else { Mat img = images.get(0); FaceDetector faceDetector = new FaceDetector(img.cols(), img.rows(), 1); Bitmap bmp = Bitmap.createBitmap(img.cols(), img.rows(), Bitmap.Config.RGB_565); Utils.matToBitmap(img, bmp); FaceDetector.Face[] facesAndroid = new FaceDetector.Face[1]; if (faceDetector.findFaces(bmp, facesAndroid) > 0){ faces = new Rect[facesAndroid.length]; for (int i=0; i<facesAndroid.length; i++){ PointF pointF = new PointF(); facesAndroid[i].getMidPoint(pointF); int xWidth = (int) (1.34 * facesAndroid[i].eyesDistance()); int yWidth = (int) (1.12 * facesAndroid[i].eyesDistance()); int dist = (int) (2.77 * facesAndroid[i].eyesDistance()); Rect face = new Rect((int) pointF.x - xWidth, (int) pointF.y - yWidth, dist, dist); faces[i] = face; } } } if (preprocessingMode == PreProcessorFactory.PreprocessingMode.RECOGNITION && preferencesHelper.getDetectionMethod()){ images.remove(0); images.add(faceDetection.getImg()); setImages(images); } } public void setFaces(Rect[] faces){ this.faces = faces; } public Eyes[] setEyes() { List<Mat> images = getImages(); eyes = new Eyes[images.size()]; for (int i=0; i<images.size(); i++){ Mat img = images.get(i); normalize0255(img); eyes[i] = faceDetection.getEyes(img); } return eyes; } public Eyes[] getEyes() { return eyes; } public Rect[] getFaces() { return faces; } public int getAngle() { return angle; } public void setAngle(int angle) { this.angle = angle; for (Mat img : images){ MatOperation.rotate_90n(img, angle); } } public Mat getImg() { return img; } public void setImages(List<Mat> images) { this.images = images; } public List<Mat> getImages() { return images; } public void setImg(Mat img) { this.img = img; } public void normalize0255(Mat norm){ Core.normalize(norm, norm, 0, 255, Core.NORM_MINMAX, CvType.CV_8UC1); } }"}]}}
{"project_id":222,"chunk_id":0,"content":{"main_file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/StandardPreprocessing/Crop.java","main_file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor.StandardPreprocessing; import org.opencv.core.Mat; import org.opencv.core.Rect; import java.util.ArrayList; import java.util.List; import ch.zhaw.facerecognitionlibrary.PreProcessor.Command; import ch.zhaw.facerecognitionlibrary.PreProcessor.PreProcessor; public class Crop implements Command { public PreProcessor preprocessImage(PreProcessor preProcessor) { Mat img = preProcessor.getImages().get(0); List<Mat> processed = new ArrayList<Mat>(); if (preProcessor.getFaces().length == 0){ return null; } else { for (Rect rect : preProcessor.getFaces()){ Mat subImg = img.submat(rect); processed.add(subImg); } } preProcessor.setImages(processed); return preProcessor; } public Mat preprocessImage(Mat img, Rect rect){ return img.submat(rect); } }","dependencies":[{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/Command.java","file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor; public interface Command { PreProcessor preprocessImage(PreProcessor preProcessor); }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/PreProcessor.java","file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor; import android.content.Context; import android.graphics.Bitmap; import android.graphics.PointF; import android.media.FaceDetector; import org.opencv.android.Utils; import org.opencv.core.Core; import org.opencv.core.CvType; import org.opencv.core.Mat; import org.opencv.core.Rect; import org.opencv.imgcodecs.Imgcodecs; import org.opencv.imgproc.Imgproc; import org.opencv.utils.Converters; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.Eyes; import ch.zhaw.facerecognitionlibrary.Helpers.FaceDetection; import ch.zhaw.facerecognitionlibrary.Helpers.MatOperation; import ch.zhaw.facerecognitionlibrary.Helpers.PreferencesHelper; public class PreProcessor { private Context context; private int angle; private Mat img; private List<Mat> images; private Rect[] faces; private Eyes[] eyes; private FaceDetection faceDetection; public Context getContext(){ return context; } public PreProcessor(FaceDetection faceDetection, List<Mat> images, Context context){ this.faceDetection = faceDetection; this.images = images; this.context = context; } public void setFaces(PreProcessorFactory.PreprocessingMode preprocessingMode) { List<Mat> images = getImages(); PreferencesHelper preferencesHelper = new PreferencesHelper(context); if (preferencesHelper.getDetectionMethod()){ faces = faceDetection.getFaces(images.get(0)); angle = faceDetection.getAngle(); } else { Mat img = images.get(0); FaceDetector faceDetector = new FaceDetector(img.cols(), img.rows(), 1); Bitmap bmp = Bitmap.createBitmap(img.cols(), img.rows(), Bitmap.Config.RGB_565); Utils.matToBitmap(img, bmp); FaceDetector.Face[] facesAndroid = new FaceDetector.Face[1]; if (faceDetector.findFaces(bmp, facesAndroid) > 0){ faces = new Rect[facesAndroid.length]; for (int i=0; i<facesAndroid.length; i++){ PointF pointF = new PointF(); facesAndroid[i].getMidPoint(pointF); int xWidth = (int) (1.34 * facesAndroid[i].eyesDistance()); int yWidth = (int) (1.12 * facesAndroid[i].eyesDistance()); int dist = (int) (2.77 * facesAndroid[i].eyesDistance()); Rect face = new Rect((int) pointF.x - xWidth, (int) pointF.y - yWidth, dist, dist); faces[i] = face; } } } if (preprocessingMode == PreProcessorFactory.PreprocessingMode.RECOGNITION && preferencesHelper.getDetectionMethod()){ images.remove(0); images.add(faceDetection.getImg()); setImages(images); } } public void setFaces(Rect[] faces){ this.faces = faces; } public Eyes[] setEyes() { List<Mat> images = getImages(); eyes = new Eyes[images.size()]; for (int i=0; i<images.size(); i++){ Mat img = images.get(i); normalize0255(img); eyes[i] = faceDetection.getEyes(img); } return eyes; } public Eyes[] getEyes() { return eyes; } public Rect[] getFaces() { return faces; } public int getAngle() { return angle; } public void setAngle(int angle) { this.angle = angle; for (Mat img : images){ MatOperation.rotate_90n(img, angle); } } public Mat getImg() { return img; } public void setImages(List<Mat> images) { this.images = images; } public List<Mat> getImages() { return images; } public void setImg(Mat img) { this.img = img; } public void normalize0255(Mat norm){ Core.normalize(norm, norm, 0, 255, Core.NORM_MINMAX, CvType.CV_8UC1); } }"}]}}
{"project_id":222,"chunk_id":0,"content":{"main_file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/StandardPreprocessing/GrayScale.java","main_file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor.StandardPreprocessing; import org.opencv.core.Mat; import org.opencv.imgproc.Imgproc; import java.util.ArrayList; import java.util.List; import ch.zhaw.facerecognitionlibrary.PreProcessor.Command; import ch.zhaw.facerecognitionlibrary.PreProcessor.PreProcessor; public class GrayScale implements Command { public PreProcessor preprocessImage(PreProcessor preProcessor) { List<Mat> images = preProcessor.getImages(); List<Mat> processed = new ArrayList<Mat>(); for (Mat img : images){ if(img.channels()>1) { Imgproc.cvtColor(img, img, Imgproc.COLOR_RGBA2GRAY); } processed.add(img); } preProcessor.setImages(processed); return preProcessor; } }","dependencies":[{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/Command.java","file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor; public interface Command { PreProcessor preprocessImage(PreProcessor preProcessor); }"},{"file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/main/java/ch/zhaw/facerecognitionlibrary/PreProcessor/PreProcessor.java","file_content":"package ch.zhaw.facerecognitionlibrary.PreProcessor; import android.content.Context; import android.graphics.Bitmap; import android.graphics.PointF; import android.media.FaceDetector; import org.opencv.android.Utils; import org.opencv.core.Core; import org.opencv.core.CvType; import org.opencv.core.Mat; import org.opencv.core.Rect; import org.opencv.imgcodecs.Imgcodecs; import org.opencv.imgproc.Imgproc; import org.opencv.utils.Converters; import java.util.List; import ch.zhaw.facerecognitionlibrary.Helpers.Eyes; import ch.zhaw.facerecognitionlibrary.Helpers.FaceDetection; import ch.zhaw.facerecognitionlibrary.Helpers.MatOperation; import ch.zhaw.facerecognitionlibrary.Helpers.PreferencesHelper; public class PreProcessor { private Context context; private int angle; private Mat img; private List<Mat> images; private Rect[] faces; private Eyes[] eyes; private FaceDetection faceDetection; public Context getContext(){ return context; } public PreProcessor(FaceDetection faceDetection, List<Mat> images, Context context){ this.faceDetection = faceDetection; this.images = images; this.context = context; } public void setFaces(PreProcessorFactory.PreprocessingMode preprocessingMode) { List<Mat> images = getImages(); PreferencesHelper preferencesHelper = new PreferencesHelper(context); if (preferencesHelper.getDetectionMethod()){ faces = faceDetection.getFaces(images.get(0)); angle = faceDetection.getAngle(); } else { Mat img = images.get(0); FaceDetector faceDetector = new FaceDetector(img.cols(), img.rows(), 1); Bitmap bmp = Bitmap.createBitmap(img.cols(), img.rows(), Bitmap.Config.RGB_565); Utils.matToBitmap(img, bmp); FaceDetector.Face[] facesAndroid = new FaceDetector.Face[1]; if (faceDetector.findFaces(bmp, facesAndroid) > 0){ faces = new Rect[facesAndroid.length]; for (int i=0; i<facesAndroid.length; i++){ PointF pointF = new PointF(); facesAndroid[i].getMidPoint(pointF); int xWidth = (int) (1.34 * facesAndroid[i].eyesDistance()); int yWidth = (int) (1.12 * facesAndroid[i].eyesDistance()); int dist = (int) (2.77 * facesAndroid[i].eyesDistance()); Rect face = new Rect((int) pointF.x - xWidth, (int) pointF.y - yWidth, dist, dist); faces[i] = face; } } } if (preprocessingMode == PreProcessorFactory.PreprocessingMode.RECOGNITION && preferencesHelper.getDetectionMethod()){ images.remove(0); images.add(faceDetection.getImg()); setImages(images); } } public void setFaces(Rect[] faces){ this.faces = faces; } public Eyes[] setEyes() { List<Mat> images = getImages(); eyes = new Eyes[images.size()]; for (int i=0; i<images.size(); i++){ Mat img = images.get(i); normalize0255(img); eyes[i] = faceDetection.getEyes(img); } return eyes; } public Eyes[] getEyes() { return eyes; } public Rect[] getFaces() { return faces; } public int getAngle() { return angle; } public void setAngle(int angle) { this.angle = angle; for (Mat img : images){ MatOperation.rotate_90n(img, angle); } } public Mat getImg() { return img; } public void setImages(List<Mat> images) { this.images = images; } public List<Mat> getImages() { return images; } public void setImg(Mat img) { this.img = img; } public void normalize0255(Mat norm){ Core.normalize(norm, norm, 0, 255, Core.NORM_MINMAX, CvType.CV_8UC1); } }"}]}}
{"project_id":222,"chunk_id":0,"content":{"main_file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/test/java/ch/zhaw/facerecognitionlibrary/ExampleUnitTest.java","main_file_content":"package ch.zhaw.facerecognitionlibrary; import org.junit.Test; import static org.junit.Assert.*; public class ExampleUnitTest { @Test public void addition_isCorrect() throws Exception { assertEquals(4, 2 + 2); } }","dependencies":[]}}
{"project_id":222,"chunk_id":0,"content":{"main_file_path":"Android-Face-Recognition-with-Deep-Learning-Library-master/Android-Face-Recognition-with-Deep-Learning-Library-master/facerecognitionlibrary/src/androidTest/java/ch/zhaw/facerecognitionlibrary/ApplicationTest.java","main_file_content":"package ch.zhaw.facerecognitionlibrary; import android.app.Application; import android.test.ApplicationTestCase; public class ApplicationTest extends ApplicationTestCase<Application> { public ApplicationTest() { super(Application.class); } }","dependencies":[]}}
{"project_id":227,"chunk_id":0,"content":{"main_file_path":"ListItemFold-master/ListItemFold-master/app/src/main/java/com/dodola/flip/RecyclerFragment.java","main_file_content":"package com.dodola.flip; import android.app.Activity; import android.os.Bundle; import android.support.v4.app.Fragment; import android.support.v7.widget.LinearLayoutManager; import android.support.v7.widget.RecyclerView; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.AbsListView; import android.widget.AdapterView; import com.dodola.flip.dummy.ItemDataAdapter; import com.dodola.flip.dummy.RecyclerDataAdapter; import com.dodola.flip.dummy.SimpleData; import com.loopj.android.http.AsyncHttpClient; import com.loopj.android.http.JsonHttpResponseHandler; import org.apache.http.Header; import org.json.JSONArray; import org.json.JSONObject; import java.util.ArrayList; import java.util.List; public class RecyclerFragment extends Fragment implements RecyclerDataAdapter.IOnRecyclerItemClick { private OnFragmentInteractionListener mListener; private RecyclerView mRecyclerView; private RecyclerDataAdapter mAdapter; public static RecyclerFragment newInstance() { RecyclerFragment fragment = new RecyclerFragment(); Bundle args = new Bundle(); fragment.setArguments(args); return fragment; } public RecyclerFragment() { } @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); if (getArguments() != null) { } } @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { View view = inflater.inflate(R.layout.fragment_item_list, container, false); mAdapter = new RecyclerDataAdapter(getActivity()); mRecyclerView = (RecyclerView) view.findViewById(R.id.recycler); LinearLayoutManager layoutManager = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false); mRecyclerView.setLayoutManager(layoutManager); mRecyclerView.setAdapter(mAdapter); mAdapter.setOnItemClick(this); DetailAnimViewGroup wrapper = new DetailAnimViewGroup(inflater.getContext(), view, 0); loadData(); return wrapper; } @Override public void onAttach(Activity activity) { super.onAttach(activity); try { mListener = (OnFragmentInteractionListener) activity; } catch (ClassCastException e) { throw new ClassCastException(activity.toString() + \" must implement OnFragmentInteractionListener\"); } } @Override public void onDetach() { super.onDetach(); mListener = null; } public void onItemClick(SimpleData data, View view) { if (null != mListener) { mListener.onFragmentInteraction(data, view); } } public interface OnFragmentInteractionListener { public void onFragmentInteraction(SimpleData data, View view); } private void loadData() { AsyncHttpClient client = new AsyncHttpClient(); client.get(getActivity(), \"https: @Override public void onSuccess(int statusCode, Header[] headers, JSONObject response) { super.onSuccess(statusCode, headers, response); if (response != null) { final JSONArray posts = response.optJSONArray(\"posts\"); int length = posts.length(); List<SimpleData> resultDatas = new ArrayList<SimpleData>(length); for (int i = 0; i < length; i++) { JSONObject obj = posts.optJSONObject(i); SimpleData data = new SimpleData(); data.content = obj.optString(\"abstract\"); data.title = obj.optString(\"title\"); data.url = obj.optString(\"url\"); JSONArray thumbs = obj.optJSONArray(\"thumbs\"); if (thumbs.length() > 0) { JSONObject thumb = thumbs.optJSONObject(0); thumb = thumb.optJSONObject(\"large\"); if (thumb != null) { data.picUrl = thumb.optString(\"url\"); resultDatas.add(data); } } } mAdapter.addAll(resultDatas); } } }); } }","dependencies":[{"file_path":"ListItemFold-master/ListItemFold-master/app/src/main/java/com/dodola/flip/DetailAnimViewGroup.java","file_content":"package com.dodola.flip; import android.content.Context; import android.graphics.Canvas; import android.graphics.LinearGradient; import android.graphics.Matrix; import android.graphics.Paint; import android.graphics.Paint.Style; import android.graphics.Rect; import android.graphics.RectF; import android.graphics.Shader.TileMode; import android.support.annotation.NonNull; import android.view.View; import android.view.ViewGroup; public class DetailAnimViewGroup extends ViewGroup { public static final int ANIMATION_DURATION = 540; private float bottomFoldFactor; final View child; private RectF clip; private Matrix firstHalfMatrix; private Rect firstHalfRect; private Paint firstShadowGradientPaint; private Paint foldLinePaint; private float halfPageFoldedHeight; private float halfPageFoldedWidth; private int halfPageHeight; private int halfPageWidth; private final int halfPages; private int initialFoldCenter; public int number; private float[] polygonFlat; private float[] polygonFolded; protected boolean prepared; boolean reversed; private int scaledHeight; private Matrix secondHalfMatrix; private Rect secondHalfRect; private Paint secondShadowGradientPaint; private float topFoldFactor; private RectF transformedClip; public static final float DEFAULT_BACKOFF_MULT = 1.0f; public DetailAnimViewGroup(Context context, @NonNull View child, int number) { super(context); this.reversed = true; this.halfPages = 2; this.bottomFoldFactor = 0.0f; this.topFoldFactor = 0.0f; this.clip = new RectF(); this.transformedClip = new RectF(); this.child = child; if (child != null) { addView(child); } this.number = number; } protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { for (int i = 0; i < getChildCount(); i++) { getChildAt(i).measure(widthMeasureSpec, heightMeasureSpec); } super.onMeasure(widthMeasureSpec, heightMeasureSpec); } protected void onLayout(boolean arg0, int x1, int y1, int x2, int y2) { int width = x2 - x1; int height = y2 - y1; for (int i = 0; i < getChildCount(); i++) { getChildAt(i).layout(0, 0, width, height); } if (!this.prepared) { prepareFold(); } } public void setReversed(boolean reversed) { this.reversed = reversed; } public void setBottomFoldFactor(float foldFactor) { foldFactor = ViewUtil.clamp(foldFactor, 0.0f, DEFAULT_BACKOFF_MULT); if (foldFactor != this.bottomFoldFactor) { this.bottomFoldFactor = foldFactor; calculateMatrix(false); invalidate(); } updateVisibility(); } private void updateVisibility() { if (this.topFoldFactor == DEFAULT_BACKOFF_MULT && this.bottomFoldFactor == DEFAULT_BACKOFF_MULT) { if (getVisibility() != View.GONE) { setVisibility(View.GONE); } } else if (getVisibility() != View.VISIBLE) { setVisibility(View.VISIBLE); } } public void setTopFoldFactor(float foldFactor) { foldFactor = ViewUtil.clamp(foldFactor, 0.0f, DEFAULT_BACKOFF_MULT); if (foldFactor != this.topFoldFactor) { this.topFoldFactor = foldFactor; calculateMatrix(true); invalidate(); } updateLayer(this.child); updateVisibility(); } public float getTopFoldFactor() { return this.topFoldFactor; } protected void prepareFold() { this.polygonFlat = new float[8]; this.polygonFlat[0] = 0.0f; this.polygonFlat[1] = 0.0f; this.polygonFlat[2] = 0.0f; this.polygonFlat[5] = 0.0f; this.polygonFolded = new float[8]; this.firstShadowGradientPaint = new Paint(); this.firstShadowGradientPaint.setStyle(Style.FILL); this.secondShadowGradientPaint = new Paint(); this.secondShadowGradientPaint.setStyle(Style.FILL); this.foldLinePaint = new Paint(); this.foldLinePaint.setStrokeWidth(getResources().getDisplayMetrics().density * 2.0f); this.foldLinePaint.setColor(-1); this.foldLinePaint.setAlpha(0); int height = Math.round(((float) getMeasuredHeight()) / 2.0f); LinearGradient firstShadowGradient = new LinearGradient(0.0f, 0.0f, 0.0f, (float) height, 0x3f000000, 0xbb000000, TileMode.CLAMP); LinearGradient secondShadowGradient = new LinearGradient(0.0f, 0.0f, 0.0f, (float) height, 0xbb000000, 0, TileMode.CLAMP); this.firstShadowGradientPaint.setShader(firstShadowGradient); this.secondShadowGradientPaint.setShader(secondShadowGradient); this.firstHalfRect = new Rect(); this.secondHalfRect = new Rect(); this.firstHalfMatrix = new Matrix(); this.secondHalfMatrix = new Matrix(); this.firstHalfRect = new Rect(0, 0, getMeasuredWidth(), Math.round(((float) getMeasuredHeight()) / 2.0f)); this.secondHalfRect = new Rect(0, Math.round(((float) getMeasuredHeight()) / 2.0f), getMeasuredWidth(), getMeasuredHeight()); this.halfPageHeight = (int) Math.ceil((double) (((float) getMeasuredHeight()) / 2.0f)); this.halfPageWidth = getMeasuredWidth(); this.prepared = true; calculateMatrix(true); calculateMatrix(false); } void calculateMatrix(boolean first) { if (this.prepared) { float f; float translationFactor = DEFAULT_BACKOFF_MULT - (first ? this.topFoldFactor : this.bottomFoldFactor); float translatedDistancePerFold = (float) Math.round((((float) getMeasuredHeight()) * translationFactor) / 2.0f); this.halfPageFoldedWidth = ((float) this.halfPageWidth) < translatedDistancePerFold ? translatedDistancePerFold : (float) this.halfPageWidth; if (((float) this.halfPageHeight) < translatedDistancePerFold) { f = translatedDistancePerFold; } else { f = (float) this.halfPageHeight; } this.halfPageFoldedHeight = f; this.polygonFlat[3] = this.halfPageFoldedHeight; this.polygonFlat[4] = this.halfPageFoldedWidth; this.polygonFlat[6] = this.halfPageFoldedWidth; this.polygonFlat[7] = this.halfPageFoldedHeight; int scaledWidth = (int) Math.ceil((double) (this.halfPageFoldedWidth * (DEFAULT_BACKOFF_MULT * (3600.0f / (3600.0f + ((float) Math.sqrt((double) ((this.halfPageFoldedHeight * this.halfPageFoldedHeight) - (translatedDistancePerFold * translatedDistancePerFold))))))))); this.scaledHeight = (int) Math.ceil((double) (this.halfPageFoldedHeight * translationFactor)); int anchorPoint = (int) ((((float) this.initialFoldCenter) * this.topFoldFactor) + ((((float) getHeight()) / 2.0f) * (DEFAULT_BACKOFF_MULT - this.topFoldFactor))); if (first) { calculateFirstHalf((float) anchorPoint, (float) scaledWidth, (float) this.scaledHeight); } else { calculateSecondHalf((float) anchorPoint, (float) scaledWidth, (float) this.scaledHeight); } } } void calculateFirstHalf(float anchorPoint, float scaledWidth, float scaledHeight) { float leftScaledPoint = (this.halfPageFoldedWidth - scaledWidth) / 2.0f; float rightScaledPoint = leftScaledPoint + scaledWidth; if (!this.reversed) { this.polygonFolded[0] = 0.0f; this.polygonFolded[1] = anchorPoint - scaledHeight; this.polygonFolded[2] = leftScaledPoint; this.polygonFolded[3] = anchorPoint; this.polygonFolded[4] = (float) getMeasuredWidth(); this.polygonFolded[5] = this.polygonFolded[1]; this.polygonFolded[6] = rightScaledPoint; this.polygonFolded[7] = this.polygonFolded[3]; } int shadowAlpha = (int) (255.0f - ((255.0f * scaledHeight) / (((float) getMeasuredHeight()) / 2.0f))); this.firstHalfMatrix.reset(); this.firstHalfMatrix.setPolyToPoly(this.polygonFlat, 0, this.polygonFolded, 0, 4); this.firstShadowGradientPaint.setAlpha(shadowAlpha); } void calculateSecondHalf(float anchorPoint, float scaledWidth, float scaledHeight) { float leftScaledPoint = (this.halfPageFoldedWidth - scaledWidth) / 2.0f; float rightScaledPoint = leftScaledPoint + scaledWidth; if (!this.reversed) { this.polygonFolded[0] = leftScaledPoint; this.polygonFolded[1] = anchorPoint; this.polygonFolded[2] = 0.0f; this.polygonFolded[3] = anchorPoint + scaledHeight; this.polygonFolded[4] = rightScaledPoint; this.polygonFolded[5] = this.polygonFolded[1]; this.polygonFolded[6] = (float) getMeasuredWidth(); this.polygonFolded[7] = this.polygonFolded[3]; } int shadowAlpha = (int) (255.0f - ((255.0f * scaledHeight) / (((float) getMeasuredHeight()) / 2.0f))); this.secondHalfMatrix.reset(); this.secondHalfMatrix.setPolyToPoly(this.polygonFlat, 0, this.polygonFolded, 0, 4); this.secondShadowGradientPaint.setAlpha(shadowAlpha); this.foldLinePaint.setAlpha((int) (Math.min(DEFAULT_BACKOFF_MULT, this.bottomFoldFactor * 2.0f) * 255.0f)); } boolean hasFold() { return this.topFoldFactor > 0.0f; } protected void dispatchDraw(Canvas canvas) { if (this.prepared && hasFold()) { if (this.topFoldFactor < DEFAULT_BACKOFF_MULT) { drawHalf(canvas, this.firstHalfRect, this.firstHalfMatrix, this.firstShadowGradientPaint, true); } if (this.bottomFoldFactor < DEFAULT_BACKOFF_MULT) { drawHalf(canvas, this.secondHalfRect, this.secondHalfMatrix, this.secondShadowGradientPaint, false); return; } return; } super.dispatchDraw(canvas); } void drawHalf(Canvas canvas, @NonNull Rect src, @NonNull Matrix transform, Paint shadowPaint, boolean top) { canvas.save(); if (this.reversed) { canvas.save(); canvas.translate(0.0f, (float) ((int) (((float) (top ? -1 : 1)) * (this.topFoldFactor * ((float) src.height()))))); canvas.clipRect(src); } else { this.clip.set(0.0f, 0.0f, (float) (src.right - src.left), (float) (src.bottom - src.top)); transform.mapRect(this.transformedClip, this.clip); canvas.clipRect(this.transformedClip); canvas.concat(transform); canvas.save(); canvas.translate(0.0f, (float) (-src.top)); } super.dispatchDraw(canvas); if (this.reversed) { int y = this.initialFoldCenter; canvas.drawLine(0.0f, (float) y, (float) getWidth(), (float) y, this.foldLinePaint); } canvas.restore(); if (!this.reversed) { canvas.drawRect(0.0f, 0.0f, (float) getMeasuredWidth(), (float) getMeasuredHeight(), shadowPaint); } canvas.restore(); } public void setInitialFoldCenter(int initialFoldCenter) { this.initialFoldCenter = initialFoldCenter; this.firstHalfRect = new Rect(0, 0, getMeasuredWidth(), initialFoldCenter); this.secondHalfRect = new Rect(0, initialFoldCenter, getMeasuredWidth(), getMeasuredHeight()); } private void updateLayer(@NonNull View view) { if (hasFold() && view.getLayerType() != 2) { view.setLayerType(2, null); } else if (!hasFold() && view.getLayerType() != 0) { view.setLayerType(0, null); } } }"},{"file_path":"ListItemFold-master/ListItemFold-master/app/src/main/java/com/dodola/flip/dummy/RecyclerDataAdapter.java","file_content":"package com.dodola.flip.dummy; import android.content.Context; import android.graphics.drawable.ColorDrawable; import android.net.Uri; import android.support.v7.widget.RecyclerView; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.TextView; import com.dodola.flip.CircularProgressDrawable; import com.dodola.flip.R; import com.dodola.flip.RecyclerFragment; import com.facebook.drawee.generic.GenericDraweeHierarchy; import com.facebook.drawee.generic.GenericDraweeHierarchyBuilder; import com.facebook.drawee.view.SimpleDraweeView; import java.util.ArrayList; import java.util.List; public class RecyclerDataAdapter extends RecyclerView.Adapter<RecyclerDataAdapter.ViewHolder> { private LayoutInflater mLayoutInflater; private ArrayList<SimpleData> mDatas; private Context mContext; private IOnRecyclerItemClick mOnItemClick; public void setOnItemClick(IOnRecyclerItemClick onItemClick) { mOnItemClick = onItemClick; } public interface IOnRecyclerItemClick { void onItemClick(SimpleData data, View view); } public RecyclerDataAdapter(Context context) { mLayoutInflater = LayoutInflater.from(context); mDatas = new ArrayList<>(); mContext = context; } @Override public ViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) { final View convertView = mLayoutInflater.inflate(R.layout.item_data, viewGroup, false); ViewHolder holder = new ViewHolder(convertView); return holder; } @Override public void onBindViewHolder(ViewHolder viewHolder, int i) { final SimpleData simpleData = mDatas.get(i); viewHolder.myContent.setText(simpleData.content); viewHolder.myTitle.setText(simpleData.title); viewHolder.myImageView.setImageURI(Uri.parse(simpleData.picUrl)); } @Override public int getItemCount() { return mDatas == null ? 0 : mDatas.size(); } public void addAll(List<SimpleData> resultDatas) { if (mDatas == null) { mDatas = new ArrayList<>(); } mDatas.addAll(resultDatas); notifyDataSetChanged(); } public SimpleData getItemAtPosition(int position) { return mDatas.get(position); } public class ViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener { private SimpleDraweeView myImageView; private TextView myTitle; private TextView myContent; public ViewHolder(View convertView) { super(convertView); myImageView = (SimpleDraweeView) convertView.findViewById(R.id.my_image_view); myTitle = (TextView) convertView.findViewById(R.id.my_title); myContent = (TextView) convertView.findViewById(R.id.my_content); GenericDraweeHierarchyBuilder builder = new GenericDraweeHierarchyBuilder(mContext.getResources()); GenericDraweeHierarchy hierarchy = builder .setFadeDuration(200) .setPlaceholderImage(new ColorDrawable(0xf2f2f2)) .setProgressBarImage(new CircularProgressDrawable()) .build(); myImageView.setHierarchy(hierarchy); convertView.setOnClickListener(this); } @Override public void onClick(View v) { final int adapterPosition = getAdapterPosition(); final SimpleData itemAtPosition = getItemAtPosition(adapterPosition); if (mOnItemClick != null) { mOnItemClick.onItemClick(itemAtPosition, v); } } } }"},{"file_path":"ListItemFold-master/ListItemFold-master/app/src/main/java/com/dodola/flip/dummy/SimpleData.java","file_content":"package com.dodola.flip.dummy; public class SimpleData { public String title; public String url; public String content; public String picUrl; }"}]}}
{"project_id":227,"chunk_id":0,"content":{"main_file_path":"ListItemFold-master/ListItemFold-master/app/src/main/java/com/dodola/flip/MainActivity.java","main_file_content":"package com.dodola.flip; import android.support.v4.app.Fragment; import android.support.v4.app.FragmentTransaction; import android.support.v7.app.ActionBarActivity; import android.os.Bundle; import android.view.Menu; import android.view.MenuItem; import android.view.View; import com.dodola.flip.dummy.SimpleData; public class MainActivity extends ActionBarActivity implements RecyclerFragment.OnFragmentInteractionListener { FoldLayout foldLayout; @Override public void onBackPressed() { } @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); foldLayout = (FoldLayout) this.findViewById(R.id.main_view_container); foldLayout.setFragmentManager(this.getSupportFragmentManager()); RecyclerFragment feedFragment = RecyclerFragment.newInstance(); final FragmentTransaction fragmentTransaction = getSupportFragmentManager().beginTransaction(); Fragment detailFrag = getSupportFragmentManager().findFragmentByTag(FoldLayout.FRAGMENT_DETAIL_VIEW_TAG ); fragmentTransaction.replace(R.id.main_view_container, feedFragment, \"feed\"); if (detailFrag != null) { fragmentTransaction.remove(detailFrag); } fragmentTransaction.commit(); } void openItemDetailView(String url, int location) { DetailFragment detail = DetailFragment.newInstance(url); this.foldLayout.setFoldCenter(location); getSupportFragmentManager().beginTransaction().add(R.id.main_view_container, detail, FoldLayout.FRAGMENT_DETAIL_VIEW_TAG) .commitAllowingStateLoss(); } @Override public boolean onCreateOptionsMenu(Menu menu) { getMenuInflater().inflate(R.menu.menu_main, menu); return true; } @Override public boolean onOptionsItemSelected(MenuItem item) { return super.onOptionsItemSelected(item); } @Override public void onFragmentInteraction(SimpleData data, View view) { int[] containerLocation = new int[2]; this.foldLayout.getLocationInWindow(containerLocation); int[] viewLocation = new int[2]; view.getLocationInWindow(viewLocation); int location = viewLocation[1] + getResources().getDimensionPixelSize(R.dimen.image_height) - containerLocation[1]; openItemDetailView(data.url, location); } }","dependencies":[{"file_path":"ListItemFold-master/ListItemFold-master/app/src/main/java/com/dodola/flip/DetailFragment.java","file_content":"package com.dodola.flip; import android.app.Activity; import android.net.Uri; import android.os.Bundle; import android.support.v4.app.Fragment; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.webkit.WebChromeClient; import android.webkit.WebSettings; import android.webkit.WebView; import android.webkit.WebViewClient; public class DetailFragment extends Fragment { private WebView mWebview; private String mUrl; public static DetailFragment newInstance(String url) { DetailFragment fragment = new DetailFragment(); Bundle args = new Bundle(); args.putString(\"url\", url); fragment.setArguments(args); return fragment; } public DetailFragment() { } @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); if (getArguments() != null) { mUrl = getArguments().getString(\"url\"); } } @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { View view = inflater.inflate(R.layout.fragment_blank, container, false); mWebview = (WebView) view.findViewById(R.id.h5_web); WebSettings webSettings = mWebview.getSettings(); webSettings.setSupportZoom(false); webSettings.setPluginState(WebSettings.PluginState.ON); webSettings.setLoadWithOverviewMode(true); webSettings.setJavaScriptEnabled(true); mWebview.setWebChromeClient(new WebChromeClient()); mWebview.setWebViewClient(new WebViewClient()); mWebview.loadUrl(mUrl); DetailAnimViewGroup wrapper = new DetailAnimViewGroup(inflater.getContext(), view, 0); wrapper.setReversed(false); return wrapper; } @Override public void onAttach(Activity activity) { super.onAttach(activity); } @Override public void onDetach() { super.onDetach(); } }"},{"file_path":"ListItemFold-master/ListItemFold-master/app/src/main/java/com/dodola/flip/FoldLayout.java","file_content":"package com.dodola.flip; import android.animation.Animator; import android.animation.Animator.AnimatorListener; import android.animation.ObjectAnimator; import android.animation.ValueAnimator; import android.annotation.TargetApi; import android.content.Context; import android.os.Build; import android.support.annotation.Nullable; import android.support.v4.app.Fragment; import android.support.v4.app.FragmentManager; import android.support.v4.view.ScaleGestureDetectorCompat; import android.support.v4.view.ViewCompat; import android.util.AttributeSet; import android.util.Log; import android.view.MotionEvent; import android.view.ScaleGestureDetector; import android.view.ScaleGestureDetector.OnScaleGestureListener; import android.view.VelocityTracker; import android.view.View; import android.view.ViewConfiguration; import android.view.ViewGroup; import android.view.animation.AccelerateDecelerateInterpolator; import android.view.animation.Interpolator; import android.widget.FrameLayout; import java.lang.ref.WeakReference; import java.util.ArrayList; import java.util.List; public class FoldLayout extends FrameLayout implements OnScaleGestureListener { public static final String FRAGMENT_DETAIL_VIEW_TAG = \"detail\"; private boolean animatingToMain; List<WeakReference<ValueAnimator>> animatorWeakHashMap; private boolean closeDown; @Nullable private DetailAnimViewGroup detail; @Nullable private View detailWrapper; private float downY; private int foldCenter; FragmentManager fragmentManager; private float initialPercentY; private Interpolator interpolatorFling; private Interpolator interpolatorTap; private boolean isTouchReservedForPinch; private float latestScaleDistance; private long latestScaleDuration; @Nullable DetailAnimViewGroup main; @Nullable private View mainWrapper; private ScaleGestureDetector pinchDetector; private boolean startedSwipeToClose; VelocityTracker velocityTracker; private ViewConfiguration viewConfig; public static final float DEFAULT_BACKOFF_MULT = 1.0f; public FoldLayout(Context context) { super(context); this.animatorWeakHashMap = new ArrayList(); this.foldCenter = -1; } public FoldLayout(Context context, AttributeSet attrs) { super(context, attrs); this.animatorWeakHashMap = new ArrayList(); this.foldCenter = -1; } public FoldLayout(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); this.animatorWeakHashMap = new ArrayList(); this.foldCenter = -1; } @TargetApi(Build.VERSION_CODES.KITKAT) protected void onAttachedToWindow() { super.onAttachedToWindow(); this.velocityTracker = VelocityTracker.obtain(); this.interpolatorFling = new FoldInterpolator(); this.interpolatorTap = new AccelerateDecelerateInterpolator(); this.pinchDetector = new ScaleGestureDetector(getContext(), this); ScaleGestureDetectorCompat.setQuickScaleEnabled(pinchDetector, false); this.viewConfig = ViewConfiguration.get(getContext()); } protected void onDetachedFromWindow() { super.onDetachedFromWindow(); this.velocityTracker.recycle(); } public void setFragmentManager(FragmentManager fragmentManager) { this.fragmentManager = fragmentManager; } public void addView(View child) { super.addView(child); ViewGroup fragmentFrame = (ViewGroup) child; if (this.main == null) { if (child instanceof DetailAnimViewGroup) { this.main = (DetailAnimViewGroup) child; } else { this.main = (DetailAnimViewGroup) fragmentFrame.getChildAt(0); } this.main.setInitialFoldCenter(this.foldCenter); this.mainWrapper = child; if (this.detailWrapper != null) { this.detailWrapper.bringToFront(); this.main.setTopFoldFactor(DEFAULT_BACKOFF_MULT); this.main.setBottomFoldFactor(DEFAULT_BACKOFF_MULT); return; } return; } if (this.detailWrapper != null) { removeView(this.detailWrapper); } if (child instanceof DetailAnimViewGroup) { this.detail = (DetailAnimViewGroup) child; } else { this.detail = (DetailAnimViewGroup) fragmentFrame.getChildAt(0); } this.detail.setTopFoldFactor(DEFAULT_BACKOFF_MULT); this.detail.setBottomFoldFactor(DEFAULT_BACKOFF_MULT); this.detail.setInitialFoldCenter(this.foldCenter); this.detailWrapper = child; this.main.setInitialFoldCenter(this.foldCenter); animateToDetail(DEFAULT_BACKOFF_MULT, 0.0f, DetailAnimViewGroup.ANIMATION_DURATION, this.interpolatorTap); } public void setFoldCenter(int foldCenter) { this.foldCenter = foldCenter; } public void removeView(View view) { super.removeView(view); if (view == this.detailWrapper) { this.detail = null; this.detailWrapper = null; } else if (view == this.mainWrapper) { this.main = null; this.mainWrapper = null; } else { } } public boolean onInterceptTouchEvent(MotionEvent ev) { boolean handled = false; if (this.detail != null) { this.pinchDetector.onTouchEvent(ev); if (this.pinchDetector.isInProgress()) { handled = true; } else { handled = this.isTouchReservedForPinch || handleTouch(ev); } } if (ev.getAction() == MotionEvent.ACTION_UP || ev.getAction() == MotionEvent.ACTION_CANCEL) { this.isTouchReservedForPinch = false; } return handled; } public boolean onTouchEvent(MotionEvent ev) { boolean handled; if (this.startedSwipeToClose) { handled = handleTouch(ev); } else { handled = this.pinchDetector.onTouchEvent(ev); } if (ev.getAction() == MotionEvent.ACTION_UP || ev.getAction() == MotionEvent.ACTION_CANCEL) { this.isTouchReservedForPinch = false; } return handled; } private boolean handleTouch(MotionEvent ev) { if (this.detail == null) { return false; } if (ev.getAction() == MotionEvent.ACTION_DOWN) { this.downY = ev.getY(); } if (!this.startedSwipeToClose) { boolean scrolledTouchSlop = Math.abs(ev.getY() - this.downY) > ((float) this.viewConfig.getScaledTouchSlop()); boolean canScroll = canScroll(this.detail, false, (int) (ev.getY() - this.downY), (int) ev.getX(), (int) ev.getY()); boolean currentlyFolding = this.detail.hasFold(); if (currentlyFolding || (scrolledTouchSlop && !canScroll)) { this.velocityTracker.clear(); this.velocityTracker.addMovement(ev); if (currentlyFolding) { this.closeDown = ev.getY() < ((float) this.foldCenter); } else { this.closeDown = this.downY < ev.getY(); } this.downY = ev.getY(); this.startedSwipeToClose = true; this.initialPercentY = this.detail.getTopFoldFactor(); clearAnimations(); requestDisallowInterceptTouchEvent(true); } } if (!this.startedSwipeToClose) { return false; } if (ev.getAction() == MotionEvent.ACTION_MOVE) { this.velocityTracker.addMovement(ev); float totalDistanceY = ev.getY() - this.downY; if (!this.closeDown) { totalDistanceY = -totalDistanceY; } float percentY = ((totalDistanceY / ((float) getHeight())) * 2.0f) + this.initialPercentY; this.detail.setTopFoldFactor(percentY); this.detail.setBottomFoldFactor(percentY); this.main.setTopFoldFactor(DEFAULT_BACKOFF_MULT - percentY); this.main.setBottomFoldFactor(DEFAULT_BACKOFF_MULT - percentY); } if (ev.getAction() == MotionEvent.ACTION_UP || ev.getAction() == MotionEvent.ACTION_CANCEL) { this.velocityTracker.computeCurrentVelocity(1); this.startedSwipeToClose = false; handleFling(this.velocityTracker.getYVelocity()); requestDisallowInterceptTouchEvent(false); } return true; } private void handleFling(float speed) { float absoluteSpeed = Math.abs(speed); if (((double) absoluteSpeed) > 0.5d) { float startFoldFactor = this.main.getTopFoldFactor() - ((210.0f * speed) / ((float) getHeight())); boolean animateToMain = (this.closeDown && speed > 0.0f) || (!this.closeDown && speed < 0.0f); if (animateToMain) { animateToMain(DEFAULT_BACKOFF_MULT - startFoldFactor, startFoldFactor, (int) Math.max(135.0f, (((float) ((int) Math.max(0.0f, (((float) getHeight()) * startFoldFactor) / 2.0f))) / absoluteSpeed) * FoldInterpolator.initialSpeedFactor), this.interpolatorFling); } else { animateToDetail(DEFAULT_BACKOFF_MULT - startFoldFactor, startFoldFactor, (int) ViewUtil.clamp((float) ((int) ((((float) ((int) Math.max(0.0f, (this.detail.getTopFoldFactor() * ((float) getHeight())) / 2.0f))) / absoluteSpeed) * FoldInterpolator.initialSpeedFactor)), 135.0f, 810.0f), this.interpolatorFling); } } else if (((double) this.detail.getTopFoldFactor()) < 0.5d) { animateToDetail(this.detail.getTopFoldFactor(), this.main.getTopFoldFactor(), 270, this.interpolatorTap); } else { animateToMain(this.detail.getTopFoldFactor(), this.main.getTopFoldFactor(), 270, this.interpolatorTap); } } protected boolean canScroll(View v, boolean checkV, int dy, int x, int y) { if (v instanceof ViewGroup) { ViewGroup group = (ViewGroup) v; int scrollX = v.getScrollX(); int scrollY = v.getScrollY(); for (int i = group.getChildCount() - 1; i >= 0; i--) { View child = group.getChildAt(i); if (x + scrollX >= child.getLeft() && x + scrollX < child.getRight() && y + scrollY >= child.getTop() && y + scrollY < child.getBottom()) { if (canScroll(child, true, dy, (x + scrollX) - child.getLeft(), (y + scrollY) - child.getTop())) { return true; } } } } return checkV && ViewCompat.canScrollVertically(v, -dy); } public void animateToDetail(float detailStart, float mainStart, int duration, Interpolator interpolator) { this.animatingToMain = false; ObjectAnimator topAngleAnimator = ObjectAnimator.ofFloat(this.detail, \"topFoldFactor\", new float[]{detailStart, 0.0f}).setDuration((long) duration); topAngleAnimator.setInterpolator(interpolator); this.animatorWeakHashMap.add(new WeakReference(topAngleAnimator)); topAngleAnimator.start(); ObjectAnimator bottomAngleAnimator = ObjectAnimator.ofFloat(this.detail, \"bottomFoldFactor\", new float[]{detailStart, 0.0f}).setDuration((long) duration); bottomAngleAnimator.setInterpolator(interpolator); this.animatorWeakHashMap.add(new WeakReference(bottomAngleAnimator)); bottomAngleAnimator.start(); ObjectAnimator topAngleMain = ObjectAnimator.ofFloat(this.main, \"topFoldFactor\", new float[]{mainStart, DEFAULT_BACKOFF_MULT}).setDuration((long) duration); topAngleMain.setInterpolator(interpolator); this.animatorWeakHashMap.add(new WeakReference(topAngleMain)); topAngleMain.start(); ObjectAnimator bottomAngleMain = ObjectAnimator.ofFloat(this.main, \"bottomFoldFactor\", new float[]{mainStart, DEFAULT_BACKOFF_MULT}).setDuration((long) duration); bottomAngleMain.setInterpolator(interpolator); this.animatorWeakHashMap.add(new WeakReference(bottomAngleMain)); bottomAngleMain.start(); } public void animateToMain(float detailStart, float mainStart, int duration, Interpolator interpolator) { this.animatingToMain = true; ObjectAnimator topAngleDetail = ObjectAnimator.ofFloat(this.detail, \"topFoldFactor\", new float[]{detailStart, DEFAULT_BACKOFF_MULT}).setDuration((long) duration); topAngleDetail.setInterpolator(interpolator); this.animatorWeakHashMap.add(new WeakReference(topAngleDetail)); topAngleDetail.start(); ObjectAnimator bottomAngleDetail = ObjectAnimator.ofFloat(this.detail, \"bottomFoldFactor\", new float[]{detailStart, DEFAULT_BACKOFF_MULT}).setDuration((long) duration); bottomAngleDetail.setInterpolator(interpolator); this.animatorWeakHashMap.add(new WeakReference(bottomAngleDetail)); bottomAngleDetail.start(); ObjectAnimator topAngleMain = ObjectAnimator.ofFloat(this.main, \"topFoldFactor\", new float[]{mainStart, 0.0f}).setDuration((long) duration); topAngleMain.setInterpolator(interpolator); this.animatorWeakHashMap.add(new WeakReference(topAngleMain)); topAngleMain.start(); ValueAnimator anim = ObjectAnimator.ofFloat(this.main, \"bottomFoldFactor\", new float[]{mainStart, 0.0f}).setDuration((long) duration); anim.setInterpolator(interpolator); anim.addListener(new AnimatorListener() { public boolean cancelled; public void onAnimationStart(Animator animation) { } public void onAnimationEnd(Animator animation) { if (!this.cancelled) { final Fragment detailFragment = FoldLayout.this.fragmentManager.findFragmentByTag(FRAGMENT_DETAIL_VIEW_TAG); if (detailFragment != null) { FoldLayout.this.post(new Runnable() { public void run() { FoldLayout.this.fragmentManager.beginTransaction().remove(detailFragment).commitAllowingStateLoss(); } }); } FoldLayout.this.animatingToMain = false; } } public void onAnimationCancel(Animator animation) { this.cancelled = true; } public void onAnimationRepeat(Animator animation) { } }); this.animatorWeakHashMap.add(new WeakReference(anim)); anim.start(); } void clearAnimations() { for (WeakReference<ValueAnimator> reference : this.animatorWeakHashMap) { ValueAnimator anim = reference.get(); if (anim != null) { anim.cancel(); } } this.animatorWeakHashMap.clear(); } public boolean onBackPressed() { if (this.detail == null || this.animatingToMain) { return false; } clearAnimations(); animateToMain(this.detail.getTopFoldFactor(), this.main.getTopFoldFactor(), DetailAnimViewGroup.ANIMATION_DURATION, this.interpolatorTap); return true; } public boolean onScale(ScaleGestureDetector detector) { if (this.detail == null) { return false; } this.latestScaleDistance = detector.getScaleFactor() - DEFAULT_BACKOFF_MULT; this.latestScaleDuration = detector.getTimeDelta(); float fold = this.main.getTopFoldFactor() + this.latestScaleDistance; this.main.setTopFoldFactor(fold); this.main.setBottomFoldFactor(fold); this.detail.setTopFoldFactor(DEFAULT_BACKOFF_MULT - fold); this.detail.setBottomFoldFactor(DEFAULT_BACKOFF_MULT - fold); return true; } public boolean onScaleBegin(ScaleGestureDetector detector) { if (this.detail == null) { return false; } clearAnimations(); this.startedSwipeToClose = false; this.initialPercentY = this.main.getTopFoldFactor(); this.isTouchReservedForPinch = true; requestDisallowInterceptTouchEvent(true); return true; } public void onScaleEnd(ScaleGestureDetector detector) { if (this.detail != null) { float pixelSpeed = ((-this.latestScaleDistance) * ((float) getHeight())) / ((float) this.latestScaleDuration); this.closeDown = true; handleFling(pixelSpeed); requestDisallowInterceptTouchEvent(false); } } protected void onLayout(boolean changed, int left, int top, int right, int bottom) { super.onLayout(changed, left, top, right, bottom); if (this.foldCenter < 0) { this.foldCenter = ((bottom - top) / 2) + 1; if (this.main != null) { this.main.setInitialFoldCenter(this.foldCenter); } if (this.detail != null) { this.detail.setInitialFoldCenter(this.foldCenter); } } } class FoldInterpolator implements Interpolator { public static final float initialSpeedFactor = 1.5f; public float getInterpolation(float input) { return (float) Math.sin((((double) input) * Math.PI) / 2.0d); } } }"},{"file_path":"ListItemFold-master/ListItemFold-master/app/src/main/java/com/dodola/flip/RecyclerFragment.java","file_content":"package com.dodola.flip; import android.app.Activity; import android.os.Bundle; import android.support.v4.app.Fragment; import android.support.v7.widget.LinearLayoutManager; import android.support.v7.widget.RecyclerView; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.AbsListView; import android.widget.AdapterView; import com.dodola.flip.dummy.ItemDataAdapter; import com.dodola.flip.dummy.RecyclerDataAdapter; import com.dodola.flip.dummy.SimpleData; import com.loopj.android.http.AsyncHttpClient; import com.loopj.android.http.JsonHttpResponseHandler; import org.apache.http.Header; import org.json.JSONArray; import org.json.JSONObject; import java.util.ArrayList; import java.util.List; public class RecyclerFragment extends Fragment implements RecyclerDataAdapter.IOnRecyclerItemClick { private OnFragmentInteractionListener mListener; private RecyclerView mRecyclerView; private RecyclerDataAdapter mAdapter; public static RecyclerFragment newInstance() { RecyclerFragment fragment = new RecyclerFragment(); Bundle args = new Bundle(); fragment.setArguments(args); return fragment; } public RecyclerFragment() { } @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); if (getArguments() != null) { } } @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { View view = inflater.inflate(R.layout.fragment_item_list, container, false); mAdapter = new RecyclerDataAdapter(getActivity()); mRecyclerView = (RecyclerView) view.findViewById(R.id.recycler); LinearLayoutManager layoutManager = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false); mRecyclerView.setLayoutManager(layoutManager); mRecyclerView.setAdapter(mAdapter); mAdapter.setOnItemClick(this); DetailAnimViewGroup wrapper = new DetailAnimViewGroup(inflater.getContext(), view, 0); loadData(); return wrapper; } @Override public void onAttach(Activity activity) { super.onAttach(activity); try { mListener = (OnFragmentInteractionListener) activity; } catch (ClassCastException e) { throw new ClassCastException(activity.toString() + \" must implement OnFragmentInteractionListener\"); } } @Override public void onDetach() { super.onDetach(); mListener = null; } public void onItemClick(SimpleData data, View view) { if (null != mListener) { mListener.onFragmentInteraction(data, view); } } public interface OnFragmentInteractionListener { public void onFragmentInteraction(SimpleData data, View view); } private void loadData() { AsyncHttpClient client = new AsyncHttpClient(); client.get(getActivity(), \"https: @Override public void onSuccess(int statusCode, Header[] headers, JSONObject response) { super.onSuccess(statusCode, headers, response); if (response != null) { final JSONArray posts = response.optJSONArray(\"posts\"); int length = posts.length(); List<SimpleData> resultDatas = new ArrayList<SimpleData>(length); for (int i = 0; i < length; i++) { JSONObject obj = posts.optJSONObject(i); SimpleData data = new SimpleData(); data.content = obj.optString(\"abstract\"); data.title = obj.optString(\"title\"); data.url = obj.optString(\"url\"); JSONArray thumbs = obj.optJSONArray(\"thumbs\"); if (thumbs.length() > 0) { JSONObject thumb = thumbs.optJSONObject(0); thumb = thumb.optJSONObject(\"large\"); if (thumb != null) { data.picUrl = thumb.optString(\"url\"); resultDatas.add(data); } } } mAdapter.addAll(resultDatas); } } }); } }"},{"file_path":"ListItemFold-master/ListItemFold-master/app/src/main/java/com/dodola/flip/dummy/SimpleData.java","file_content":"package com.dodola.flip.dummy; public class SimpleData { public String title; public String url; public String content; public String picUrl; }"}]}}
{"project_id":227,"chunk_id":0,"content":{"main_file_path":"ListItemFold-master/ListItemFold-master/app/src/main/java/com/dodola/flip/FlipApplcation.java","main_file_content":"package com.dodola.flip; import android.app.Application; import com.facebook.drawee.backends.pipeline.Fresco; public class FlipApplcation extends Application { private static FlipApplcation flipApplcation; public static FlipApplcation getInstance() { return flipApplcation; } @Override public void onCreate() { super.onCreate(); flipApplcation = this; Fresco.initialize(this); } }","dependencies":[]}}
{"project_id":227,"chunk_id":0,"content":{"main_file_path":"ListItemFold-master/ListItemFold-master/app/src/main/java/com/dodola/flip/CircularProgressDrawable.java","main_file_content":"package com.dodola.flip; import android.graphics.Canvas; import android.graphics.ColorFilter; import android.graphics.Paint; import android.graphics.Rect; import android.graphics.RectF; import android.graphics.drawable.Drawable; public class CircularProgressDrawable extends Drawable { public CircularProgressDrawable() { this(dip2px(60), dip2px(8), 0xfff6f6f6, 0xffe1e1e1); } public static int dip2px(float dpValue) { final float scale = FlipApplcation.getInstance().getResources().getDisplayMetrics().density; return (int) (dpValue * scale + 0.5f); } public static final int PROGRESS_FACTOR = 360; public static final String TAG = \"CircularProgressDrawable\"; private Rect sizeBounds; private final Paint paint; protected float progress; protected int outlineColor; protected int ringColor; protected final RectF arcElements; protected final int ringWidth; protected boolean indeterminate; CircularProgressDrawable(int size, int ringWidth, int outlineColor, int ringColor) { this.progress = 0; this.outlineColor = outlineColor; this.ringColor = ringColor; this.paint = new Paint(); this.paint.setAntiAlias(true); this.ringWidth = ringWidth; this.arcElements = new RectF(); this.indeterminate = false; sizeBounds = new Rect(0, 0, size, size); } @Override public void draw(Canvas canvas) { if (isVisible()) { final Rect bounds = getBounds(); int size = Math.min(sizeBounds.height(), sizeBounds.width()); float outerRadius = (size / 2) - (ringWidth / 2); float offsetX = (bounds.width() - outerRadius * 2) / 2; float offsetY = (bounds.height() - outerRadius * 2) / 2; paint.setStyle(Paint.Style.STROKE); paint.setStrokeWidth(ringWidth); paint.setColor(outlineColor); canvas.drawCircle(bounds.centerX(), bounds.centerY(), outerRadius, paint); float arcX0 = offsetX; float arcY0 = offsetY; float arcX = offsetX + outerRadius * 2; float arcY = offsetY + outerRadius * 2; paint.setColor(ringColor); paint.setStyle(Paint.Style.STROKE); paint.setStrokeWidth(ringWidth); paint.setStrokeCap(Paint.Cap.ROUND); arcElements.set(arcX0, arcY0, arcX, arcY); if (indeterminate) { canvas.drawArc(arcElements, progress, 90, false, paint); } else { canvas.drawArc(arcElements, -90, progress, false, paint); } } else { canvas.drawColor(0x00ffffff); } } @Override public void setAlpha(int alpha) { paint.setAlpha(alpha); } @Override public void setColorFilter(ColorFilter cf) { paint.setColorFilter(cf); } protected boolean onLevelChange(int level) { if (level == 10000) { setVisible(false, true); } else { setVisible(true, true); } setProgress(level / 10000f); return false; } @Override public int getOpacity() { return 1 - paint.getAlpha(); } public void setProgress(float progress) { if (indeterminate) { this.progress = progress; } else { this.progress = PROGRESS_FACTOR * progress; } invalidateSelf(); } }","dependencies":[{"file_path":"ListItemFold-master/ListItemFold-master/app/src/main/java/com/dodola/flip/FlipApplcation.java","file_content":"package com.dodola.flip; import android.app.Application; import com.facebook.drawee.backends.pipeline.Fresco; public class FlipApplcation extends Application { private static FlipApplcation flipApplcation; public static FlipApplcation getInstance() { return flipApplcation; } @Override public void onCreate() { super.onCreate(); flipApplcation = this; Fresco.initialize(this); } }"}]}}
{"project_id":227,"chunk_id":0,"content":{"main_file_path":"ListItemFold-master/ListItemFold-master/app/src/main/java/com/dodola/flip/DetailFragment.java","main_file_content":"package com.dodola.flip; import android.app.Activity; import android.net.Uri; import android.os.Bundle; import android.support.v4.app.Fragment; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.webkit.WebChromeClient; import android.webkit.WebSettings; import android.webkit.WebView; import android.webkit.WebViewClient; public class DetailFragment extends Fragment { private WebView mWebview; private String mUrl; public static DetailFragment newInstance(String url) { DetailFragment fragment = new DetailFragment(); Bundle args = new Bundle(); args.putString(\"url\", url); fragment.setArguments(args); return fragment; } public DetailFragment() { } @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); if (getArguments() != null) { mUrl = getArguments().getString(\"url\"); } } @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { View view = inflater.inflate(R.layout.fragment_blank, container, false); mWebview = (WebView) view.findViewById(R.id.h5_web); WebSettings webSettings = mWebview.getSettings(); webSettings.setSupportZoom(false); webSettings.setPluginState(WebSettings.PluginState.ON); webSettings.setLoadWithOverviewMode(true); webSettings.setJavaScriptEnabled(true); mWebview.setWebChromeClient(new WebChromeClient()); mWebview.setWebViewClient(new WebViewClient()); mWebview.loadUrl(mUrl); DetailAnimViewGroup wrapper = new DetailAnimViewGroup(inflater.getContext(), view, 0); wrapper.setReversed(false); return wrapper; } @Override public void onAttach(Activity activity) { super.onAttach(activity); } @Override public void onDetach() { super.onDetach(); } }","dependencies":[{"file_path":"ListItemFold-master/ListItemFold-master/app/src/main/java/com/dodola/flip/DetailAnimViewGroup.java","file_content":"package com.dodola.flip; import android.content.Context; import android.graphics.Canvas; import android.graphics.LinearGradient; import android.graphics.Matrix; import android.graphics.Paint; import android.graphics.Paint.Style; import android.graphics.Rect; import android.graphics.RectF; import android.graphics.Shader.TileMode; import android.support.annotation.NonNull; import android.view.View; import android.view.ViewGroup; public class DetailAnimViewGroup extends ViewGroup { public static final int ANIMATION_DURATION = 540; private float bottomFoldFactor; final View child; private RectF clip; private Matrix firstHalfMatrix; private Rect firstHalfRect; private Paint firstShadowGradientPaint; private Paint foldLinePaint; private float halfPageFoldedHeight; private float halfPageFoldedWidth; private int halfPageHeight; private int halfPageWidth; private final int halfPages; private int initialFoldCenter; public int number; private float[] polygonFlat; private float[] polygonFolded; protected boolean prepared; boolean reversed; private int scaledHeight; private Matrix secondHalfMatrix; private Rect secondHalfRect; private Paint secondShadowGradientPaint; private float topFoldFactor; private RectF transformedClip; public static final float DEFAULT_BACKOFF_MULT = 1.0f; public DetailAnimViewGroup(Context context, @NonNull View child, int number) { super(context); this.reversed = true; this.halfPages = 2; this.bottomFoldFactor = 0.0f; this.topFoldFactor = 0.0f; this.clip = new RectF(); this.transformedClip = new RectF(); this.child = child; if (child != null) { addView(child); } this.number = number; } protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { for (int i = 0; i < getChildCount(); i++) { getChildAt(i).measure(widthMeasureSpec, heightMeasureSpec); } super.onMeasure(widthMeasureSpec, heightMeasureSpec); } protected void onLayout(boolean arg0, int x1, int y1, int x2, int y2) { int width = x2 - x1; int height = y2 - y1; for (int i = 0; i < getChildCount(); i++) { getChildAt(i).layout(0, 0, width, height); } if (!this.prepared) { prepareFold(); } } public void setReversed(boolean reversed) { this.reversed = reversed; } public void setBottomFoldFactor(float foldFactor) { foldFactor = ViewUtil.clamp(foldFactor, 0.0f, DEFAULT_BACKOFF_MULT); if (foldFactor != this.bottomFoldFactor) { this.bottomFoldFactor = foldFactor; calculateMatrix(false); invalidate(); } updateVisibility(); } private void updateVisibility() { if (this.topFoldFactor == DEFAULT_BACKOFF_MULT && this.bottomFoldFactor == DEFAULT_BACKOFF_MULT) { if (getVisibility() != View.GONE) { setVisibility(View.GONE); } } else if (getVisibility() != View.VISIBLE) { setVisibility(View.VISIBLE); } } public void setTopFoldFactor(float foldFactor) { foldFactor = ViewUtil.clamp(foldFactor, 0.0f, DEFAULT_BACKOFF_MULT); if (foldFactor != this.topFoldFactor) { this.topFoldFactor = foldFactor; calculateMatrix(true); invalidate(); } updateLayer(this.child); updateVisibility(); } public float getTopFoldFactor() { return this.topFoldFactor; } protected void prepareFold() { this.polygonFlat = new float[8]; this.polygonFlat[0] = 0.0f; this.polygonFlat[1] = 0.0f; this.polygonFlat[2] = 0.0f; this.polygonFlat[5] = 0.0f; this.polygonFolded = new float[8]; this.firstShadowGradientPaint = new Paint(); this.firstShadowGradientPaint.setStyle(Style.FILL); this.secondShadowGradientPaint = new Paint(); this.secondShadowGradientPaint.setStyle(Style.FILL); this.foldLinePaint = new Paint(); this.foldLinePaint.setStrokeWidth(getResources().getDisplayMetrics().density * 2.0f); this.foldLinePaint.setColor(-1); this.foldLinePaint.setAlpha(0); int height = Math.round(((float) getMeasuredHeight()) / 2.0f); LinearGradient firstShadowGradient = new LinearGradient(0.0f, 0.0f, 0.0f, (float) height, 0x3f000000, 0xbb000000, TileMode.CLAMP); LinearGradient secondShadowGradient = new LinearGradient(0.0f, 0.0f, 0.0f, (float) height, 0xbb000000, 0, TileMode.CLAMP); this.firstShadowGradientPaint.setShader(firstShadowGradient); this.secondShadowGradientPaint.setShader(secondShadowGradient); this.firstHalfRect = new Rect(); this.secondHalfRect = new Rect(); this.firstHalfMatrix = new Matrix(); this.secondHalfMatrix = new Matrix(); this.firstHalfRect = new Rect(0, 0, getMeasuredWidth(), Math.round(((float) getMeasuredHeight()) / 2.0f)); this.secondHalfRect = new Rect(0, Math.round(((float) getMeasuredHeight()) / 2.0f), getMeasuredWidth(), getMeasuredHeight()); this.halfPageHeight = (int) Math.ceil((double) (((float) getMeasuredHeight()) / 2.0f)); this.halfPageWidth = getMeasuredWidth(); this.prepared = true; calculateMatrix(true); calculateMatrix(false); } void calculateMatrix(boolean first) { if (this.prepared) { float f; float translationFactor = DEFAULT_BACKOFF_MULT - (first ? this.topFoldFactor : this.bottomFoldFactor); float translatedDistancePerFold = (float) Math.round((((float) getMeasuredHeight()) * translationFactor) / 2.0f); this.halfPageFoldedWidth = ((float) this.halfPageWidth) < translatedDistancePerFold ? translatedDistancePerFold : (float) this.halfPageWidth; if (((float) this.halfPageHeight) < translatedDistancePerFold) { f = translatedDistancePerFold; } else { f = (float) this.halfPageHeight; } this.halfPageFoldedHeight = f; this.polygonFlat[3] = this.halfPageFoldedHeight; this.polygonFlat[4] = this.halfPageFoldedWidth; this.polygonFlat[6] = this.halfPageFoldedWidth; this.polygonFlat[7] = this.halfPageFoldedHeight; int scaledWidth = (int) Math.ceil((double) (this.halfPageFoldedWidth * (DEFAULT_BACKOFF_MULT * (3600.0f / (3600.0f + ((float) Math.sqrt((double) ((this.halfPageFoldedHeight * this.halfPageFoldedHeight) - (translatedDistancePerFold * translatedDistancePerFold))))))))); this.scaledHeight = (int) Math.ceil((double) (this.halfPageFoldedHeight * translationFactor)); int anchorPoint = (int) ((((float) this.initialFoldCenter) * this.topFoldFactor) + ((((float) getHeight()) / 2.0f) * (DEFAULT_BACKOFF_MULT - this.topFoldFactor))); if (first) { calculateFirstHalf((float) anchorPoint, (float) scaledWidth, (float) this.scaledHeight); } else { calculateSecondHalf((float) anchorPoint, (float) scaledWidth, (float) this.scaledHeight); } } } void calculateFirstHalf(float anchorPoint, float scaledWidth, float scaledHeight) { float leftScaledPoint = (this.halfPageFoldedWidth - scaledWidth) / 2.0f; float rightScaledPoint = leftScaledPoint + scaledWidth; if (!this.reversed) { this.polygonFolded[0] = 0.0f; this.polygonFolded[1] = anchorPoint - scaledHeight; this.polygonFolded[2] = leftScaledPoint; this.polygonFolded[3] = anchorPoint; this.polygonFolded[4] = (float) getMeasuredWidth(); this.polygonFolded[5] = this.polygonFolded[1]; this.polygonFolded[6] = rightScaledPoint; this.polygonFolded[7] = this.polygonFolded[3]; } int shadowAlpha = (int) (255.0f - ((255.0f * scaledHeight) / (((float) getMeasuredHeight()) / 2.0f))); this.firstHalfMatrix.reset(); this.firstHalfMatrix.setPolyToPoly(this.polygonFlat, 0, this.polygonFolded, 0, 4); this.firstShadowGradientPaint.setAlpha(shadowAlpha); } void calculateSecondHalf(float anchorPoint, float scaledWidth, float scaledHeight) { float leftScaledPoint = (this.halfPageFoldedWidth - scaledWidth) / 2.0f; float rightScaledPoint = leftScaledPoint + scaledWidth; if (!this.reversed) { this.polygonFolded[0] = leftScaledPoint; this.polygonFolded[1] = anchorPoint; this.polygonFolded[2] = 0.0f; this.polygonFolded[3] = anchorPoint + scaledHeight; this.polygonFolded[4] = rightScaledPoint; this.polygonFolded[5] = this.polygonFolded[1]; this.polygonFolded[6] = (float) getMeasuredWidth(); this.polygonFolded[7] = this.polygonFolded[3]; } int shadowAlpha = (int) (255.0f - ((255.0f * scaledHeight) / (((float) getMeasuredHeight()) / 2.0f))); this.secondHalfMatrix.reset(); this.secondHalfMatrix.setPolyToPoly(this.polygonFlat, 0, this.polygonFolded, 0, 4); this.secondShadowGradientPaint.setAlpha(shadowAlpha); this.foldLinePaint.setAlpha((int) (Math.min(DEFAULT_BACKOFF_MULT, this.bottomFoldFactor * 2.0f) * 255.0f)); } boolean hasFold() { return this.topFoldFactor > 0.0f; } protected void dispatchDraw(Canvas canvas) { if (this.prepared && hasFold()) { if (this.topFoldFactor < DEFAULT_BACKOFF_MULT) { drawHalf(canvas, this.firstHalfRect, this.firstHalfMatrix, this.firstShadowGradientPaint, true); } if (this.bottomFoldFactor < DEFAULT_BACKOFF_MULT) { drawHalf(canvas, this.secondHalfRect, this.secondHalfMatrix, this.secondShadowGradientPaint, false); return; } return; } super.dispatchDraw(canvas); } void drawHalf(Canvas canvas, @NonNull Rect src, @NonNull Matrix transform, Paint shadowPaint, boolean top) { canvas.save(); if (this.reversed) { canvas.save(); canvas.translate(0.0f, (float) ((int) (((float) (top ? -1 : 1)) * (this.topFoldFactor * ((float) src.height()))))); canvas.clipRect(src); } else { this.clip.set(0.0f, 0.0f, (float) (src.right - src.left), (float) (src.bottom - src.top)); transform.mapRect(this.transformedClip, this.clip); canvas.clipRect(this.transformedClip); canvas.concat(transform); canvas.save(); canvas.translate(0.0f, (float) (-src.top)); } super.dispatchDraw(canvas); if (this.reversed) { int y = this.initialFoldCenter; canvas.drawLine(0.0f, (float) y, (float) getWidth(), (float) y, this.foldLinePaint); } canvas.restore(); if (!this.reversed) { canvas.drawRect(0.0f, 0.0f, (float) getMeasuredWidth(), (float) getMeasuredHeight(), shadowPaint); } canvas.restore(); } public void setInitialFoldCenter(int initialFoldCenter) { this.initialFoldCenter = initialFoldCenter; this.firstHalfRect = new Rect(0, 0, getMeasuredWidth(), initialFoldCenter); this.secondHalfRect = new Rect(0, initialFoldCenter, getMeasuredWidth(), getMeasuredHeight()); } private void updateLayer(@NonNull View view) { if (hasFold() && view.getLayerType() != 2) { view.setLayerType(2, null); } else if (!hasFold() && view.getLayerType() != 0) { view.setLayerType(0, null); } } }"}]}}
{"project_id":227,"chunk_id":0,"content":{"main_file_path":"ListItemFold-master/ListItemFold-master/app/src/main/java/com/dodola/flip/FoldLayout.java","main_file_content":"package com.dodola.flip; import android.animation.Animator; import android.animation.Animator.AnimatorListener; import android.animation.ObjectAnimator; import android.animation.ValueAnimator; import android.annotation.TargetApi; import android.content.Context; import android.os.Build; import android.support.annotation.Nullable; import android.support.v4.app.Fragment; import android.support.v4.app.FragmentManager; import android.support.v4.view.ScaleGestureDetectorCompat; import android.support.v4.view.ViewCompat; import android.util.AttributeSet; import android.util.Log; import android.view.MotionEvent; import android.view.ScaleGestureDetector; import android.view.ScaleGestureDetector.OnScaleGestureListener; import android.view.VelocityTracker; import android.view.View; import android.view.ViewConfiguration; import android.view.ViewGroup; import android.view.animation.AccelerateDecelerateInterpolator; import android.view.animation.Interpolator; import android.widget.FrameLayout; import java.lang.ref.WeakReference; import java.util.ArrayList; import java.util.List; public class FoldLayout extends FrameLayout implements OnScaleGestureListener { public static final String FRAGMENT_DETAIL_VIEW_TAG = \"detail\"; private boolean animatingToMain; List<WeakReference<ValueAnimator>> animatorWeakHashMap; private boolean closeDown; @Nullable private DetailAnimViewGroup detail; @Nullable private View detailWrapper; private float downY; private int foldCenter; FragmentManager fragmentManager; private float initialPercentY; private Interpolator interpolatorFling; private Interpolator interpolatorTap; private boolean isTouchReservedForPinch; private float latestScaleDistance; private long latestScaleDuration; @Nullable DetailAnimViewGroup main; @Nullable private View mainWrapper; private ScaleGestureDetector pinchDetector; private boolean startedSwipeToClose; VelocityTracker velocityTracker; private ViewConfiguration viewConfig; public static final float DEFAULT_BACKOFF_MULT = 1.0f; public FoldLayout(Context context) { super(context); this.animatorWeakHashMap = new ArrayList(); this.foldCenter = -1; } public FoldLayout(Context context, AttributeSet attrs) { super(context, attrs); this.animatorWeakHashMap = new ArrayList(); this.foldCenter = -1; } public FoldLayout(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); this.animatorWeakHashMap = new ArrayList(); this.foldCenter = -1; } @TargetApi(Build.VERSION_CODES.KITKAT) protected void onAttachedToWindow() { super.onAttachedToWindow(); this.velocityTracker = VelocityTracker.obtain(); this.interpolatorFling = new FoldInterpolator(); this.interpolatorTap = new AccelerateDecelerateInterpolator(); this.pinchDetector = new ScaleGestureDetector(getContext(), this); ScaleGestureDetectorCompat.setQuickScaleEnabled(pinchDetector, false); this.viewConfig = ViewConfiguration.get(getContext()); } protected void onDetachedFromWindow() { super.onDetachedFromWindow(); this.velocityTracker.recycle(); } public void setFragmentManager(FragmentManager fragmentManager) { this.fragmentManager = fragmentManager; } public void addView(View child) { super.addView(child); ViewGroup fragmentFrame = (ViewGroup) child; if (this.main == null) { if (child instanceof DetailAnimViewGroup) { this.main = (DetailAnimViewGroup) child; } else { this.main = (DetailAnimViewGroup) fragmentFrame.getChildAt(0); } this.main.setInitialFoldCenter(this.foldCenter); this.mainWrapper = child; if (this.detailWrapper != null) { this.detailWrapper.bringToFront(); this.main.setTopFoldFactor(DEFAULT_BACKOFF_MULT); this.main.setBottomFoldFactor(DEFAULT_BACKOFF_MULT); return; } return; } if (this.detailWrapper != null) { removeView(this.detailWrapper); } if (child instanceof DetailAnimViewGroup) { this.detail = (DetailAnimViewGroup) child; } else { this.detail = (DetailAnimViewGroup) fragmentFrame.getChildAt(0); } this.detail.setTopFoldFactor(DEFAULT_BACKOFF_MULT); this.detail.setBottomFoldFactor(DEFAULT_BACKOFF_MULT); this.detail.setInitialFoldCenter(this.foldCenter); this.detailWrapper = child; this.main.setInitialFoldCenter(this.foldCenter); animateToDetail(DEFAULT_BACKOFF_MULT, 0.0f, DetailAnimViewGroup.ANIMATION_DURATION, this.interpolatorTap); } public void setFoldCenter(int foldCenter) { this.foldCenter = foldCenter; } public void removeView(View view) { super.removeView(view); if (view == this.detailWrapper) { this.detail = null; this.detailWrapper = null; } else if (view == this.mainWrapper) { this.main = null; this.mainWrapper = null; } else { } } public boolean onInterceptTouchEvent(MotionEvent ev) { boolean handled = false; if (this.detail != null) { this.pinchDetector.onTouchEvent(ev); if (this.pinchDetector.isInProgress()) { handled = true; } else { handled = this.isTouchReservedForPinch || handleTouch(ev); } } if (ev.getAction() == MotionEvent.ACTION_UP || ev.getAction() == MotionEvent.ACTION_CANCEL) { this.isTouchReservedForPinch = false; } return handled; } public boolean onTouchEvent(MotionEvent ev) { boolean handled; if (this.startedSwipeToClose) { handled = handleTouch(ev); } else { handled = this.pinchDetector.onTouchEvent(ev); } if (ev.getAction() == MotionEvent.ACTION_UP || ev.getAction() == MotionEvent.ACTION_CANCEL) { this.isTouchReservedForPinch = false; } return handled; } private boolean handleTouch(MotionEvent ev) { if (this.detail == null) { return false; } if (ev.getAction() == MotionEvent.ACTION_DOWN) { this.downY = ev.getY(); } if (!this.startedSwipeToClose) { boolean scrolledTouchSlop = Math.abs(ev.getY() - this.downY) > ((float) this.viewConfig.getScaledTouchSlop()); boolean canScroll = canScroll(this.detail, false, (int) (ev.getY() - this.downY), (int) ev.getX(), (int) ev.getY()); boolean currentlyFolding = this.detail.hasFold(); if (currentlyFolding || (scrolledTouchSlop && !canScroll)) { this.velocityTracker.clear(); this.velocityTracker.addMovement(ev); if (currentlyFolding) { this.closeDown = ev.getY() < ((float) this.foldCenter); } else { this.closeDown = this.downY < ev.getY(); } this.downY = ev.getY(); this.startedSwipeToClose = true; this.initialPercentY = this.detail.getTopFoldFactor(); clearAnimations(); requestDisallowInterceptTouchEvent(true); } } if (!this.startedSwipeToClose) { return false; } if (ev.getAction() == MotionEvent.ACTION_MOVE) { this.velocityTracker.addMovement(ev); float totalDistanceY = ev.getY() - this.downY; if (!this.closeDown) { totalDistanceY = -totalDistanceY; } float percentY = ((totalDistanceY / ((float) getHeight())) * 2.0f) + this.initialPercentY; this.detail.setTopFoldFactor(percentY); this.detail.setBottomFoldFactor(percentY); this.main.setTopFoldFactor(DEFAULT_BACKOFF_MULT - percentY); this.main.setBottomFoldFactor(DEFAULT_BACKOFF_MULT - percentY); } if (ev.getAction() == MotionEvent.ACTION_UP || ev.getAction() == MotionEvent.ACTION_CANCEL) { this.velocityTracker.computeCurrentVelocity(1); this.startedSwipeToClose = false; handleFling(this.velocityTracker.getYVelocity()); requestDisallowInterceptTouchEvent(false); } return true; } private void handleFling(float speed) { float absoluteSpeed = Math.abs(speed); if (((double) absoluteSpeed) > 0.5d) { float startFoldFactor = this.main.getTopFoldFactor() - ((210.0f * speed) / ((float) getHeight())); boolean animateToMain = (this.closeDown && speed > 0.0f) || (!this.closeDown && speed < 0.0f); if (animateToMain) { animateToMain(DEFAULT_BACKOFF_MULT - startFoldFactor, startFoldFactor, (int) Math.max(135.0f, (((float) ((int) Math.max(0.0f, (((float) getHeight()) * startFoldFactor) / 2.0f))) / absoluteSpeed) * FoldInterpolator.initialSpeedFactor), this.interpolatorFling); } else { animateToDetail(DEFAULT_BACKOFF_MULT - startFoldFactor, startFoldFactor, (int) ViewUtil.clamp((float) ((int) ((((float) ((int) Math.max(0.0f, (this.detail.getTopFoldFactor() * ((float) getHeight())) / 2.0f))) / absoluteSpeed) * FoldInterpolator.initialSpeedFactor)), 135.0f, 810.0f), this.interpolatorFling); } } else if (((double) this.detail.getTopFoldFactor()) < 0.5d) { animateToDetail(this.detail.getTopFoldFactor(), this.main.getTopFoldFactor(), 270, this.interpolatorTap); } else { animateToMain(this.detail.getTopFoldFactor(), this.main.getTopFoldFactor(), 270, this.interpolatorTap); } } protected boolean canScroll(View v, boolean checkV, int dy, int x, int y) { if (v instanceof ViewGroup) { ViewGroup group = (ViewGroup) v; int scrollX = v.getScrollX(); int scrollY = v.getScrollY(); for (int i = group.getChildCount() - 1; i >= 0; i--) { View child = group.getChildAt(i); if (x + scrollX >= child.getLeft() && x + scrollX < child.getRight() && y + scrollY >= child.getTop() && y + scrollY < child.getBottom()) { if (canScroll(child, true, dy, (x + scrollX) - child.getLeft(), (y + scrollY) - child.getTop())) { return true; } } } } return checkV && ViewCompat.canScrollVertically(v, -dy); } public void animateToDetail(float detailStart, float mainStart, int duration, Interpolator interpolator) { this.animatingToMain = false; ObjectAnimator topAngleAnimator = ObjectAnimator.ofFloat(this.detail, \"topFoldFactor\", new float[]{detailStart, 0.0f}).setDuration((long) duration); topAngleAnimator.setInterpolator(interpolator); this.animatorWeakHashMap.add(new WeakReference(topAngleAnimator)); topAngleAnimator.start(); ObjectAnimator bottomAngleAnimator = ObjectAnimator.ofFloat(this.detail, \"bottomFoldFactor\", new float[]{detailStart, 0.0f}).setDuration((long) duration); bottomAngleAnimator.setInterpolator(interpolator); this.animatorWeakHashMap.add(new WeakReference(bottomAngleAnimator)); bottomAngleAnimator.start(); ObjectAnimator topAngleMain = ObjectAnimator.ofFloat(this.main, \"topFoldFactor\", new float[]{mainStart, DEFAULT_BACKOFF_MULT}).setDuration((long) duration); topAngleMain.setInterpolator(interpolator); this.animatorWeakHashMap.add(new WeakReference(topAngleMain)); topAngleMain.start(); ObjectAnimator bottomAngleMain = ObjectAnimator.ofFloat(this.main, \"bottomFoldFactor\", new float[]{mainStart, DEFAULT_BACKOFF_MULT}).setDuration((long) duration); bottomAngleMain.setInterpolator(interpolator); this.animatorWeakHashMap.add(new WeakReference(bottomAngleMain)); bottomAngleMain.start(); } public void animateToMain(float detailStart, float mainStart, int duration, Interpolator interpolator) { this.animatingToMain = true; ObjectAnimator topAngleDetail = ObjectAnimator.ofFloat(this.detail, \"topFoldFactor\", new float[]{detailStart, DEFAULT_BACKOFF_MULT}).setDuration((long) duration); topAngleDetail.setInterpolator(interpolator); this.animatorWeakHashMap.add(new WeakReference(topAngleDetail)); topAngleDetail.start(); ObjectAnimator bottomAngleDetail = ObjectAnimator.ofFloat(this.detail, \"bottomFoldFactor\", new float[]{detailStart, DEFAULT_BACKOFF_MULT}).setDuration((long) duration); bottomAngleDetail.setInterpolator(interpolator); this.animatorWeakHashMap.add(new WeakReference(bottomAngleDetail)); bottomAngleDetail.start(); ObjectAnimator topAngleMain = ObjectAnimator.ofFloat(this.main, \"topFoldFactor\", new float[]{mainStart, 0.0f}).setDuration((long) duration); topAngleMain.setInterpolator(interpolator); this.animatorWeakHashMap.add(new WeakReference(topAngleMain)); topAngleMain.start(); ValueAnimator anim = ObjectAnimator.ofFloat(this.main, \"bottomFoldFactor\", new float[]{mainStart, 0.0f}).setDuration((long) duration); anim.setInterpolator(interpolator); anim.addListener(new AnimatorListener() { public boolean cancelled; public void onAnimationStart(Animator animation) { } public void onAnimationEnd(Animator animation) { if (!this.cancelled) { final Fragment detailFragment = FoldLayout.this.fragmentManager.findFragmentByTag(FRAGMENT_DETAIL_VIEW_TAG); if (detailFragment != null) { FoldLayout.this.post(new Runnable() { public void run() { FoldLayout.this.fragmentManager.beginTransaction().remove(detailFragment).commitAllowingStateLoss(); } }); } FoldLayout.this.animatingToMain = false; } } public void onAnimationCancel(Animator animation) { this.cancelled = true; } public void onAnimationRepeat(Animator animation) { } }); this.animatorWeakHashMap.add(new WeakReference(anim)); anim.start(); } void clearAnimations() { for (WeakReference<ValueAnimator> reference : this.animatorWeakHashMap) { ValueAnimator anim = reference.get(); if (anim != null) { anim.cancel(); } } this.animatorWeakHashMap.clear(); } public boolean onBackPressed() { if (this.detail == null || this.animatingToMain) { return false; } clearAnimations(); animateToMain(this.detail.getTopFoldFactor(), this.main.getTopFoldFactor(), DetailAnimViewGroup.ANIMATION_DURATION, this.interpolatorTap); return true; } public boolean onScale(ScaleGestureDetector detector) { if (this.detail == null) { return false; } this.latestScaleDistance = detector.getScaleFactor() - DEFAULT_BACKOFF_MULT; this.latestScaleDuration = detector.getTimeDelta(); float fold = this.main.getTopFoldFactor() + this.latestScaleDistance; this.main.setTopFoldFactor(fold); this.main.setBottomFoldFactor(fold); this.detail.setTopFoldFactor(DEFAULT_BACKOFF_MULT - fold); this.detail.setBottomFoldFactor(DEFAULT_BACKOFF_MULT - fold); return true; } public boolean onScaleBegin(ScaleGestureDetector detector) { if (this.detail == null) { return false; } clearAnimations(); this.startedSwipeToClose = false; this.initialPercentY = this.main.getTopFoldFactor(); this.isTouchReservedForPinch = true; requestDisallowInterceptTouchEvent(true); return true; } public void onScaleEnd(ScaleGestureDetector detector) { if (this.detail != null) { float pixelSpeed = ((-this.latestScaleDistance) * ((float) getHeight())) / ((float) this.latestScaleDuration); this.closeDown = true; handleFling(pixelSpeed); requestDisallowInterceptTouchEvent(false); } } protected void onLayout(boolean changed, int left, int top, int right, int bottom) { super.onLayout(changed, left, top, right, bottom); if (this.foldCenter < 0) { this.foldCenter = ((bottom - top) / 2) + 1; if (this.main != null) { this.main.setInitialFoldCenter(this.foldCenter); } if (this.detail != null) { this.detail.setInitialFoldCenter(this.foldCenter); } } } class FoldInterpolator implements Interpolator { public static final float initialSpeedFactor = 1.5f; public float getInterpolation(float input) { return (float) Math.sin((((double) input) * Math.PI) / 2.0d); } } }","dependencies":[]}}
{"project_id":227,"chunk_id":1,"content":{"main_file_path":"ListItemFold-master/ListItemFold-master/app/src/main/java/com/dodola/flip/FoldLayout.java","main_file_content":"package com.dodola.flip; import android.animation.Animator; import android.animation.Animator.AnimatorListener; import android.animation.ObjectAnimator; import android.animation.ValueAnimator; import android.annotation.TargetApi; import android.content.Context; import android.os.Build; import android.support.annotation.Nullable; import android.support.v4.app.Fragment; import android.support.v4.app.FragmentManager; import android.support.v4.view.ScaleGestureDetectorCompat; import android.support.v4.view.ViewCompat; import android.util.AttributeSet; import android.util.Log; import android.view.MotionEvent; import android.view.ScaleGestureDetector; import android.view.ScaleGestureDetector.OnScaleGestureListener; import android.view.VelocityTracker; import android.view.View; import android.view.ViewConfiguration; import android.view.ViewGroup; import android.view.animation.AccelerateDecelerateInterpolator; import android.view.animation.Interpolator; import android.widget.FrameLayout; import java.lang.ref.WeakReference; import java.util.ArrayList; import java.util.List; public class FoldLayout extends FrameLayout implements OnScaleGestureListener { public static final String FRAGMENT_DETAIL_VIEW_TAG = \"detail\"; private boolean animatingToMain; List<WeakReference<ValueAnimator>> animatorWeakHashMap; private boolean closeDown; @Nullable private DetailAnimViewGroup detail; @Nullable private View detailWrapper; private float downY; private int foldCenter; FragmentManager fragmentManager; private float initialPercentY; private Interpolator interpolatorFling; private Interpolator interpolatorTap; private boolean isTouchReservedForPinch; private float latestScaleDistance; private long latestScaleDuration; @Nullable DetailAnimViewGroup main; @Nullable private View mainWrapper; private ScaleGestureDetector pinchDetector; private boolean startedSwipeToClose; VelocityTracker velocityTracker; private ViewConfiguration viewConfig; public static final float DEFAULT_BACKOFF_MULT = 1.0f; public FoldLayout(Context context) { super(context); this.animatorWeakHashMap = new ArrayList(); this.foldCenter = -1; } public FoldLayout(Context context, AttributeSet attrs) { super(context, attrs); this.animatorWeakHashMap = new ArrayList(); this.foldCenter = -1; } public FoldLayout(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); this.animatorWeakHashMap = new ArrayList(); this.foldCenter = -1; } @TargetApi(Build.VERSION_CODES.KITKAT) protected void onAttachedToWindow() { super.onAttachedToWindow(); this.velocityTracker = VelocityTracker.obtain(); this.interpolatorFling = new FoldInterpolator(); this.interpolatorTap = new AccelerateDecelerateInterpolator(); this.pinchDetector = new ScaleGestureDetector(getContext(), this); ScaleGestureDetectorCompat.setQuickScaleEnabled(pinchDetector, false); this.viewConfig = ViewConfiguration.get(getContext()); } protected void onDetachedFromWindow() { super.onDetachedFromWindow(); this.velocityTracker.recycle(); } public void setFragmentManager(FragmentManager fragmentManager) { this.fragmentManager = fragmentManager; } public void addView(View child) { super.addView(child); ViewGroup fragmentFrame = (ViewGroup) child; if (this.main == null) { if (child instanceof DetailAnimViewGroup) { this.main = (DetailAnimViewGroup) child; } else { this.main = (DetailAnimViewGroup) fragmentFrame.getChildAt(0); } this.main.setInitialFoldCenter(this.foldCenter); this.mainWrapper = child; if (this.detailWrapper != null) { this.detailWrapper.bringToFront(); this.main.setTopFoldFactor(DEFAULT_BACKOFF_MULT); this.main.setBottomFoldFactor(DEFAULT_BACKOFF_MULT); return; } return; } if (this.detailWrapper != null) { removeView(this.detailWrapper); } if (child instanceof DetailAnimViewGroup) { this.detail = (DetailAnimViewGroup) child; } else { this.detail = (DetailAnimViewGroup) fragmentFrame.getChildAt(0); } this.detail.setTopFoldFactor(DEFAULT_BACKOFF_MULT); this.detail.setBottomFoldFactor(DEFAULT_BACKOFF_MULT); this.detail.setInitialFoldCenter(this.foldCenter); this.detailWrapper = child; this.main.setInitialFoldCenter(this.foldCenter); animateToDetail(DEFAULT_BACKOFF_MULT, 0.0f, DetailAnimViewGroup.ANIMATION_DURATION, this.interpolatorTap); } public void setFoldCenter(int foldCenter) { this.foldCenter = foldCenter; } public void removeView(View view) { super.removeView(view); if (view == this.detailWrapper) { this.detail = null; this.detailWrapper = null; } else if (view == this.mainWrapper) { this.main = null; this.mainWrapper = null; } else { } } public boolean onInterceptTouchEvent(MotionEvent ev) { boolean handled = false; if (this.detail != null) { this.pinchDetector.onTouchEvent(ev); if (this.pinchDetector.isInProgress()) { handled = true; } else { handled = this.isTouchReservedForPinch || handleTouch(ev); } } if (ev.getAction() == MotionEvent.ACTION_UP || ev.getAction() == MotionEvent.ACTION_CANCEL) { this.isTouchReservedForPinch = false; } return handled; } public boolean onTouchEvent(MotionEvent ev) { boolean handled; if (this.startedSwipeToClose) { handled = handleTouch(ev); } else { handled = this.pinchDetector.onTouchEvent(ev); } if (ev.getAction() == MotionEvent.ACTION_UP || ev.getAction() == MotionEvent.ACTION_CANCEL) { this.isTouchReservedForPinch = false; } return handled; } private boolean handleTouch(MotionEvent ev) { if (this.detail == null) { return false; } if (ev.getAction() == MotionEvent.ACTION_DOWN) { this.downY = ev.getY(); } if (!this.startedSwipeToClose) { boolean scrolledTouchSlop = Math.abs(ev.getY() - this.downY) > ((float) this.viewConfig.getScaledTouchSlop()); boolean canScroll = canScroll(this.detail, false, (int) (ev.getY() - this.downY), (int) ev.getX(), (int) ev.getY()); boolean currentlyFolding = this.detail.hasFold(); if (currentlyFolding || (scrolledTouchSlop && !canScroll)) { this.velocityTracker.clear(); this.velocityTracker.addMovement(ev); if (currentlyFolding) { this.closeDown = ev.getY() < ((float) this.foldCenter); } else { this.closeDown = this.downY < ev.getY(); } this.downY = ev.getY(); this.startedSwipeToClose = true; this.initialPercentY = this.detail.getTopFoldFactor(); clearAnimations(); requestDisallowInterceptTouchEvent(true); } } if (!this.startedSwipeToClose) { return false; } if (ev.getAction() == MotionEvent.ACTION_MOVE) { this.velocityTracker.addMovement(ev); float totalDistanceY = ev.getY() - this.downY; if (!this.closeDown) { totalDistanceY = -totalDistanceY; } float percentY = ((totalDistanceY / ((float) getHeight())) * 2.0f) + this.initialPercentY; this.detail.setTopFoldFactor(percentY); this.detail.setBottomFoldFactor(percentY); this.main.setTopFoldFactor(DEFAULT_BACKOFF_MULT - percentY); this.main.setBottomFoldFactor(DEFAULT_BACKOFF_MULT - percentY); } if (ev.getAction() == MotionEvent.ACTION_UP || ev.getAction() == MotionEvent.ACTION_CANCEL) { this.velocityTracker.computeCurrentVelocity(1); this.startedSwipeToClose = false; handleFling(this.velocityTracker.getYVelocity()); requestDisallowInterceptTouchEvent(false); } return true; } private void handleFling(float speed) { float absoluteSpeed = Math.abs(speed); if (((double) absoluteSpeed) > 0.5d) { float startFoldFactor = this.main.getTopFoldFactor() - ((210.0f * speed) / ((float) getHeight())); boolean animateToMain = (this.closeDown && speed > 0.0f) || (!this.closeDown && speed < 0.0f); if (animateToMain) { animateToMain(DEFAULT_BACKOFF_MULT - startFoldFactor, startFoldFactor, (int) Math.max(135.0f, (((float) ((int) Math.max(0.0f, (((float) getHeight()) * startFoldFactor) / 2.0f))) / absoluteSpeed) * FoldInterpolator.initialSpeedFactor), this.interpolatorFling); } else { animateToDetail(DEFAULT_BACKOFF_MULT - startFoldFactor, startFoldFactor, (int) ViewUtil.clamp((float) ((int) ((((float) ((int) Math.max(0.0f, (this.detail.getTopFoldFactor() * ((float) getHeight())) / 2.0f))) / absoluteSpeed) * FoldInterpolator.initialSpeedFactor)), 135.0f, 810.0f), this.interpolatorFling); } } else if (((double) this.detail.getTopFoldFactor()) < 0.5d) { animateToDetail(this.detail.getTopFoldFactor(), this.main.getTopFoldFactor(), 270, this.interpolatorTap); } else { animateToMain(this.detail.getTopFoldFactor(), this.main.getTopFoldFactor(), 270, this.interpolatorTap); } } protected boolean canScroll(View v, boolean checkV, int dy, int x, int y) { if (v instanceof ViewGroup) { ViewGroup group = (ViewGroup) v; int scrollX = v.getScrollX(); int scrollY = v.getScrollY(); for (int i = group.getChildCount() - 1; i >= 0; i--) { View child = group.getChildAt(i); if (x + scrollX >= child.getLeft() && x + scrollX < child.getRight() && y + scrollY >= child.getTop() && y + scrollY < child.getBottom()) { if (canScroll(child, true, dy, (x + scrollX) - child.getLeft(), (y + scrollY) - child.getTop())) { return true; } } } } return checkV && ViewCompat.canScrollVertically(v, -dy); } public void animateToDetail(float detailStart, float mainStart, int duration, Interpolator interpolator) { this.animatingToMain = false; ObjectAnimator topAngleAnimator = ObjectAnimator.ofFloat(this.detail, \"topFoldFactor\", new float[]{detailStart, 0.0f}).setDuration((long) duration); topAngleAnimator.setInterpolator(interpolator); this.animatorWeakHashMap.add(new WeakReference(topAngleAnimator)); topAngleAnimator.start(); ObjectAnimator bottomAngleAnimator = ObjectAnimator.ofFloat(this.detail, \"bottomFoldFactor\", new float[]{detailStart, 0.0f}).setDuration((long) duration); bottomAngleAnimator.setInterpolator(interpolator); this.animatorWeakHashMap.add(new WeakReference(bottomAngleAnimator)); bottomAngleAnimator.start(); ObjectAnimator topAngleMain = ObjectAnimator.ofFloat(this.main, \"topFoldFactor\", new float[]{mainStart, DEFAULT_BACKOFF_MULT}).setDuration((long) duration); topAngleMain.setInterpolator(interpolator); this.animatorWeakHashMap.add(new WeakReference(topAngleMain)); topAngleMain.start(); ObjectAnimator bottomAngleMain = ObjectAnimator.ofFloat(this.main, \"bottomFoldFactor\", new float[]{mainStart, DEFAULT_BACKOFF_MULT}).setDuration((long) duration); bottomAngleMain.setInterpolator(interpolator); this.animatorWeakHashMap.add(new WeakReference(bottomAngleMain)); bottomAngleMain.start(); } public void animateToMain(float detailStart, float mainStart, int duration, Interpolator interpolator) { this.animatingToMain = true; ObjectAnimator topAngleDetail = ObjectAnimator.ofFloat(this.detail, \"topFoldFactor\", new float[]{detailStart, DEFAULT_BACKOFF_MULT}).setDuration((long) duration); topAngleDetail.setInterpolator(interpolator); this.animatorWeakHashMap.add(new WeakReference(topAngleDetail)); topAngleDetail.start(); ObjectAnimator bottomAngleDetail = ObjectAnimator.ofFloat(this.detail, \"bottomFoldFactor\", new float[]{detailStart, DEFAULT_BACKOFF_MULT}).setDuration((long) duration); bottomAngleDetail.setInterpolator(interpolator); this.animatorWeakHashMap.add(new WeakReference(bottomAngleDetail)); bottomAngleDetail.start(); ObjectAnimator topAngleMain = ObjectAnimator.ofFloat(this.main, \"topFoldFactor\", new float[]{mainStart, 0.0f}).setDuration((long) duration); topAngleMain.setInterpolator(interpolator); this.animatorWeakHashMap.add(new WeakReference(topAngleMain)); topAngleMain.start(); ValueAnimator anim = ObjectAnimator.ofFloat(this.main, \"bottomFoldFactor\", new float[]{mainStart, 0.0f}).setDuration((long) duration); anim.setInterpolator(interpolator); anim.addListener(new AnimatorListener() { public boolean cancelled; public void onAnimationStart(Animator animation) { } public void onAnimationEnd(Animator animation) { if (!this.cancelled) { final Fragment detailFragment = FoldLayout.this.fragmentManager.findFragmentByTag(FRAGMENT_DETAIL_VIEW_TAG); if (detailFragment != null) { FoldLayout.this.post(new Runnable() { public void run() { FoldLayout.this.fragmentManager.beginTransaction().remove(detailFragment).commitAllowingStateLoss(); } }); } FoldLayout.this.animatingToMain = false; } } public void onAnimationCancel(Animator animation) { this.cancelled = true; } public void onAnimationRepeat(Animator animation) { } }); this.animatorWeakHashMap.add(new WeakReference(anim)); anim.start(); } void clearAnimations() { for (WeakReference<ValueAnimator> reference : this.animatorWeakHashMap) { ValueAnimator anim = reference.get(); if (anim != null) { anim.cancel(); } } this.animatorWeakHashMap.clear(); } public boolean onBackPressed() { if (this.detail == null || this.animatingToMain) { return false; } clearAnimations(); animateToMain(this.detail.getTopFoldFactor(), this.main.getTopFoldFactor(), DetailAnimViewGroup.ANIMATION_DURATION, this.interpolatorTap); return true; } public boolean onScale(ScaleGestureDetector detector) { if (this.detail == null) { return false; } this.latestScaleDistance = detector.getScaleFactor() - DEFAULT_BACKOFF_MULT; this.latestScaleDuration = detector.getTimeDelta(); float fold = this.main.getTopFoldFactor() + this.latestScaleDistance; this.main.setTopFoldFactor(fold); this.main.setBottomFoldFactor(fold); this.detail.setTopFoldFactor(DEFAULT_BACKOFF_MULT - fold); this.detail.setBottomFoldFactor(DEFAULT_BACKOFF_MULT - fold); return true; } public boolean onScaleBegin(ScaleGestureDetector detector) { if (this.detail == null) { return false; } clearAnimations(); this.startedSwipeToClose = false; this.initialPercentY = this.main.getTopFoldFactor(); this.isTouchReservedForPinch = true; requestDisallowInterceptTouchEvent(true); return true; } public void onScaleEnd(ScaleGestureDetector detector) { if (this.detail != null) { float pixelSpeed = ((-this.latestScaleDistance) * ((float) getHeight())) / ((float) this.latestScaleDuration); this.closeDown = true; handleFling(pixelSpeed); requestDisallowInterceptTouchEvent(false); } } protected void onLayout(boolean changed, int left, int top, int right, int bottom) { super.onLayout(changed, left, top, right, bottom); if (this.foldCenter < 0) { this.foldCenter = ((bottom - top) / 2) + 1; if (this.main != null) { this.main.setInitialFoldCenter(this.foldCenter); } if (this.detail != null) { this.detail.setInitialFoldCenter(this.foldCenter); } } } class FoldInterpolator implements Interpolator { public static final float initialSpeedFactor = 1.5f; public float getInterpolation(float input) { return (float) Math.sin((((double) input) * Math.PI) / 2.0d); } } }","dependencies":[{"file_path":"ListItemFold-master/ListItemFold-master/app/src/main/java/com/dodola/flip/DetailAnimViewGroup.java","file_content":"package com.dodola.flip; import android.content.Context; import android.graphics.Canvas; import android.graphics.LinearGradient; import android.graphics.Matrix; import android.graphics.Paint; import android.graphics.Paint.Style; import android.graphics.Rect; import android.graphics.RectF; import android.graphics.Shader.TileMode; import android.support.annotation.NonNull; import android.view.View; import android.view.ViewGroup; public class DetailAnimViewGroup extends ViewGroup { public static final int ANIMATION_DURATION = 540; private float bottomFoldFactor; final View child; private RectF clip; private Matrix firstHalfMatrix; private Rect firstHalfRect; private Paint firstShadowGradientPaint; private Paint foldLinePaint; private float halfPageFoldedHeight; private float halfPageFoldedWidth; private int halfPageHeight; private int halfPageWidth; private final int halfPages; private int initialFoldCenter; public int number; private float[] polygonFlat; private float[] polygonFolded; protected boolean prepared; boolean reversed; private int scaledHeight; private Matrix secondHalfMatrix; private Rect secondHalfRect; private Paint secondShadowGradientPaint; private float topFoldFactor; private RectF transformedClip; public static final float DEFAULT_BACKOFF_MULT = 1.0f; public DetailAnimViewGroup(Context context, @NonNull View child, int number) { super(context); this.reversed = true; this.halfPages = 2; this.bottomFoldFactor = 0.0f; this.topFoldFactor = 0.0f; this.clip = new RectF(); this.transformedClip = new RectF(); this.child = child; if (child != null) { addView(child); } this.number = number; } protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { for (int i = 0; i < getChildCount(); i++) { getChildAt(i).measure(widthMeasureSpec, heightMeasureSpec); } super.onMeasure(widthMeasureSpec, heightMeasureSpec); } protected void onLayout(boolean arg0, int x1, int y1, int x2, int y2) { int width = x2 - x1; int height = y2 - y1; for (int i = 0; i < getChildCount(); i++) { getChildAt(i).layout(0, 0, width, height); } if (!this.prepared) { prepareFold(); } } public void setReversed(boolean reversed) { this.reversed = reversed; } public void setBottomFoldFactor(float foldFactor) { foldFactor = ViewUtil.clamp(foldFactor, 0.0f, DEFAULT_BACKOFF_MULT); if (foldFactor != this.bottomFoldFactor) { this.bottomFoldFactor = foldFactor; calculateMatrix(false); invalidate(); } updateVisibility(); } private void updateVisibility() { if (this.topFoldFactor == DEFAULT_BACKOFF_MULT && this.bottomFoldFactor == DEFAULT_BACKOFF_MULT) { if (getVisibility() != View.GONE) { setVisibility(View.GONE); } } else if (getVisibility() != View.VISIBLE) { setVisibility(View.VISIBLE); } } public void setTopFoldFactor(float foldFactor) { foldFactor = ViewUtil.clamp(foldFactor, 0.0f, DEFAULT_BACKOFF_MULT); if (foldFactor != this.topFoldFactor) { this.topFoldFactor = foldFactor; calculateMatrix(true); invalidate(); } updateLayer(this.child); updateVisibility(); } public float getTopFoldFactor() { return this.topFoldFactor; } protected void prepareFold() { this.polygonFlat = new float[8]; this.polygonFlat[0] = 0.0f; this.polygonFlat[1] = 0.0f; this.polygonFlat[2] = 0.0f; this.polygonFlat[5] = 0.0f; this.polygonFolded = new float[8]; this.firstShadowGradientPaint = new Paint(); this.firstShadowGradientPaint.setStyle(Style.FILL); this.secondShadowGradientPaint = new Paint(); this.secondShadowGradientPaint.setStyle(Style.FILL); this.foldLinePaint = new Paint(); this.foldLinePaint.setStrokeWidth(getResources().getDisplayMetrics().density * 2.0f); this.foldLinePaint.setColor(-1); this.foldLinePaint.setAlpha(0); int height = Math.round(((float) getMeasuredHeight()) / 2.0f); LinearGradient firstShadowGradient = new LinearGradient(0.0f, 0.0f, 0.0f, (float) height, 0x3f000000, 0xbb000000, TileMode.CLAMP); LinearGradient secondShadowGradient = new LinearGradient(0.0f, 0.0f, 0.0f, (float) height, 0xbb000000, 0, TileMode.CLAMP); this.firstShadowGradientPaint.setShader(firstShadowGradient); this.secondShadowGradientPaint.setShader(secondShadowGradient); this.firstHalfRect = new Rect(); this.secondHalfRect = new Rect(); this.firstHalfMatrix = new Matrix(); this.secondHalfMatrix = new Matrix(); this.firstHalfRect = new Rect(0, 0, getMeasuredWidth(), Math.round(((float) getMeasuredHeight()) / 2.0f)); this.secondHalfRect = new Rect(0, Math.round(((float) getMeasuredHeight()) / 2.0f), getMeasuredWidth(), getMeasuredHeight()); this.halfPageHeight = (int) Math.ceil((double) (((float) getMeasuredHeight()) / 2.0f)); this.halfPageWidth = getMeasuredWidth(); this.prepared = true; calculateMatrix(true); calculateMatrix(false); } void calculateMatrix(boolean first) { if (this.prepared) { float f; float translationFactor = DEFAULT_BACKOFF_MULT - (first ? this.topFoldFactor : this.bottomFoldFactor); float translatedDistancePerFold = (float) Math.round((((float) getMeasuredHeight()) * translationFactor) / 2.0f); this.halfPageFoldedWidth = ((float) this.halfPageWidth) < translatedDistancePerFold ? translatedDistancePerFold : (float) this.halfPageWidth; if (((float) this.halfPageHeight) < translatedDistancePerFold) { f = translatedDistancePerFold; } else { f = (float) this.halfPageHeight; } this.halfPageFoldedHeight = f; this.polygonFlat[3] = this.halfPageFoldedHeight; this.polygonFlat[4] = this.halfPageFoldedWidth; this.polygonFlat[6] = this.halfPageFoldedWidth; this.polygonFlat[7] = this.halfPageFoldedHeight; int scaledWidth = (int) Math.ceil((double) (this.halfPageFoldedWidth * (DEFAULT_BACKOFF_MULT * (3600.0f / (3600.0f + ((float) Math.sqrt((double) ((this.halfPageFoldedHeight * this.halfPageFoldedHeight) - (translatedDistancePerFold * translatedDistancePerFold))))))))); this.scaledHeight = (int) Math.ceil((double) (this.halfPageFoldedHeight * translationFactor)); int anchorPoint = (int) ((((float) this.initialFoldCenter) * this.topFoldFactor) + ((((float) getHeight()) / 2.0f) * (DEFAULT_BACKOFF_MULT - this.topFoldFactor))); if (first) { calculateFirstHalf((float) anchorPoint, (float) scaledWidth, (float) this.scaledHeight); } else { calculateSecondHalf((float) anchorPoint, (float) scaledWidth, (float) this.scaledHeight); } } } void calculateFirstHalf(float anchorPoint, float scaledWidth, float scaledHeight) { float leftScaledPoint = (this.halfPageFoldedWidth - scaledWidth) / 2.0f; float rightScaledPoint = leftScaledPoint + scaledWidth; if (!this.reversed) { this.polygonFolded[0] = 0.0f; this.polygonFolded[1] = anchorPoint - scaledHeight; this.polygonFolded[2] = leftScaledPoint; this.polygonFolded[3] = anchorPoint; this.polygonFolded[4] = (float) getMeasuredWidth(); this.polygonFolded[5] = this.polygonFolded[1]; this.polygonFolded[6] = rightScaledPoint; this.polygonFolded[7] = this.polygonFolded[3]; } int shadowAlpha = (int) (255.0f - ((255.0f * scaledHeight) / (((float) getMeasuredHeight()) / 2.0f))); this.firstHalfMatrix.reset(); this.firstHalfMatrix.setPolyToPoly(this.polygonFlat, 0, this.polygonFolded, 0, 4); this.firstShadowGradientPaint.setAlpha(shadowAlpha); } void calculateSecondHalf(float anchorPoint, float scaledWidth, float scaledHeight) { float leftScaledPoint = (this.halfPageFoldedWidth - scaledWidth) / 2.0f; float rightScaledPoint = leftScaledPoint + scaledWidth; if (!this.reversed) { this.polygonFolded[0] = leftScaledPoint; this.polygonFolded[1] = anchorPoint; this.polygonFolded[2] = 0.0f; this.polygonFolded[3] = anchorPoint + scaledHeight; this.polygonFolded[4] = rightScaledPoint; this.polygonFolded[5] = this.polygonFolded[1]; this.polygonFolded[6] = (float) getMeasuredWidth(); this.polygonFolded[7] = this.polygonFolded[3]; } int shadowAlpha = (int) (255.0f - ((255.0f * scaledHeight) / (((float) getMeasuredHeight()) / 2.0f))); this.secondHalfMatrix.reset(); this.secondHalfMatrix.setPolyToPoly(this.polygonFlat, 0, this.polygonFolded, 0, 4); this.secondShadowGradientPaint.setAlpha(shadowAlpha); this.foldLinePaint.setAlpha((int) (Math.min(DEFAULT_BACKOFF_MULT, this.bottomFoldFactor * 2.0f) * 255.0f)); } boolean hasFold() { return this.topFoldFactor > 0.0f; } protected void dispatchDraw(Canvas canvas) { if (this.prepared && hasFold()) { if (this.topFoldFactor < DEFAULT_BACKOFF_MULT) { drawHalf(canvas, this.firstHalfRect, this.firstHalfMatrix, this.firstShadowGradientPaint, true); } if (this.bottomFoldFactor < DEFAULT_BACKOFF_MULT) { drawHalf(canvas, this.secondHalfRect, this.secondHalfMatrix, this.secondShadowGradientPaint, false); return; } return; } super.dispatchDraw(canvas); } void drawHalf(Canvas canvas, @NonNull Rect src, @NonNull Matrix transform, Paint shadowPaint, boolean top) { canvas.save(); if (this.reversed) { canvas.save(); canvas.translate(0.0f, (float) ((int) (((float) (top ? -1 : 1)) * (this.topFoldFactor * ((float) src.height()))))); canvas.clipRect(src); } else { this.clip.set(0.0f, 0.0f, (float) (src.right - src.left), (float) (src.bottom - src.top)); transform.mapRect(this.transformedClip, this.clip); canvas.clipRect(this.transformedClip); canvas.concat(transform); canvas.save(); canvas.translate(0.0f, (float) (-src.top)); } super.dispatchDraw(canvas); if (this.reversed) { int y = this.initialFoldCenter; canvas.drawLine(0.0f, (float) y, (float) getWidth(), (float) y, this.foldLinePaint); } canvas.restore(); if (!this.reversed) { canvas.drawRect(0.0f, 0.0f, (float) getMeasuredWidth(), (float) getMeasuredHeight(), shadowPaint); } canvas.restore(); } public void setInitialFoldCenter(int initialFoldCenter) { this.initialFoldCenter = initialFoldCenter; this.firstHalfRect = new Rect(0, 0, getMeasuredWidth(), initialFoldCenter); this.secondHalfRect = new Rect(0, initialFoldCenter, getMeasuredWidth(), getMeasuredHeight()); } private void updateLayer(@NonNull View view) { if (hasFold() && view.getLayerType() != 2) { view.setLayerType(2, null); } else if (!hasFold() && view.getLayerType() != 0) { view.setLayerType(0, null); } } }"}]}}
{"project_id":227,"chunk_id":2,"content":{"main_file_path":"ListItemFold-master/ListItemFold-master/app/src/main/java/com/dodola/flip/FoldLayout.java","main_file_content":"package com.dodola.flip; import android.animation.Animator; import android.animation.Animator.AnimatorListener; import android.animation.ObjectAnimator; import android.animation.ValueAnimator; import android.annotation.TargetApi; import android.content.Context; import android.os.Build; import android.support.annotation.Nullable; import android.support.v4.app.Fragment; import android.support.v4.app.FragmentManager; import android.support.v4.view.ScaleGestureDetectorCompat; import android.support.v4.view.ViewCompat; import android.util.AttributeSet; import android.util.Log; import android.view.MotionEvent; import android.view.ScaleGestureDetector; import android.view.ScaleGestureDetector.OnScaleGestureListener; import android.view.VelocityTracker; import android.view.View; import android.view.ViewConfiguration; import android.view.ViewGroup; import android.view.animation.AccelerateDecelerateInterpolator; import android.view.animation.Interpolator; import android.widget.FrameLayout; import java.lang.ref.WeakReference; import java.util.ArrayList; import java.util.List; public class FoldLayout extends FrameLayout implements OnScaleGestureListener { public static final String FRAGMENT_DETAIL_VIEW_TAG = \"detail\"; private boolean animatingToMain; List<WeakReference<ValueAnimator>> animatorWeakHashMap; private boolean closeDown; @Nullable private DetailAnimViewGroup detail; @Nullable private View detailWrapper; private float downY; private int foldCenter; FragmentManager fragmentManager; private float initialPercentY; private Interpolator interpolatorFling; private Interpolator interpolatorTap; private boolean isTouchReservedForPinch; private float latestScaleDistance; private long latestScaleDuration; @Nullable DetailAnimViewGroup main; @Nullable private View mainWrapper; private ScaleGestureDetector pinchDetector; private boolean startedSwipeToClose; VelocityTracker velocityTracker; private ViewConfiguration viewConfig; public static final float DEFAULT_BACKOFF_MULT = 1.0f; public FoldLayout(Context context) { super(context); this.animatorWeakHashMap = new ArrayList(); this.foldCenter = -1; } public FoldLayout(Context context, AttributeSet attrs) { super(context, attrs); this.animatorWeakHashMap = new ArrayList(); this.foldCenter = -1; } public FoldLayout(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); this.animatorWeakHashMap = new ArrayList(); this.foldCenter = -1; } @TargetApi(Build.VERSION_CODES.KITKAT) protected void onAttachedToWindow() { super.onAttachedToWindow(); this.velocityTracker = VelocityTracker.obtain(); this.interpolatorFling = new FoldInterpolator(); this.interpolatorTap = new AccelerateDecelerateInterpolator(); this.pinchDetector = new ScaleGestureDetector(getContext(), this); ScaleGestureDetectorCompat.setQuickScaleEnabled(pinchDetector, false); this.viewConfig = ViewConfiguration.get(getContext()); } protected void onDetachedFromWindow() { super.onDetachedFromWindow(); this.velocityTracker.recycle(); } public void setFragmentManager(FragmentManager fragmentManager) { this.fragmentManager = fragmentManager; } public void addView(View child) { super.addView(child); ViewGroup fragmentFrame = (ViewGroup) child; if (this.main == null) { if (child instanceof DetailAnimViewGroup) { this.main = (DetailAnimViewGroup) child; } else { this.main = (DetailAnimViewGroup) fragmentFrame.getChildAt(0); } this.main.setInitialFoldCenter(this.foldCenter); this.mainWrapper = child; if (this.detailWrapper != null) { this.detailWrapper.bringToFront(); this.main.setTopFoldFactor(DEFAULT_BACKOFF_MULT); this.main.setBottomFoldFactor(DEFAULT_BACKOFF_MULT); return; } return; } if (this.detailWrapper != null) { removeView(this.detailWrapper); } if (child instanceof DetailAnimViewGroup) { this.detail = (DetailAnimViewGroup) child; } else { this.detail = (DetailAnimViewGroup) fragmentFrame.getChildAt(0); } this.detail.setTopFoldFactor(DEFAULT_BACKOFF_MULT); this.detail.setBottomFoldFactor(DEFAULT_BACKOFF_MULT); this.detail.setInitialFoldCenter(this.foldCenter); this.detailWrapper = child; this.main.setInitialFoldCenter(this.foldCenter); animateToDetail(DEFAULT_BACKOFF_MULT, 0.0f, DetailAnimViewGroup.ANIMATION_DURATION, this.interpolatorTap); } public void setFoldCenter(int foldCenter) { this.foldCenter = foldCenter; } public void removeView(View view) { super.removeView(view); if (view == this.detailWrapper) { this.detail = null; this.detailWrapper = null; } else if (view == this.mainWrapper) { this.main = null; this.mainWrapper = null; } else { } } public boolean onInterceptTouchEvent(MotionEvent ev) { boolean handled = false; if (this.detail != null) { this.pinchDetector.onTouchEvent(ev); if (this.pinchDetector.isInProgress()) { handled = true; } else { handled = this.isTouchReservedForPinch || handleTouch(ev); } } if (ev.getAction() == MotionEvent.ACTION_UP || ev.getAction() == MotionEvent.ACTION_CANCEL) { this.isTouchReservedForPinch = false; } return handled; } public boolean onTouchEvent(MotionEvent ev) { boolean handled; if (this.startedSwipeToClose) { handled = handleTouch(ev); } else { handled = this.pinchDetector.onTouchEvent(ev); } if (ev.getAction() == MotionEvent.ACTION_UP || ev.getAction() == MotionEvent.ACTION_CANCEL) { this.isTouchReservedForPinch = false; } return handled; } private boolean handleTouch(MotionEvent ev) { if (this.detail == null) { return false; } if (ev.getAction() == MotionEvent.ACTION_DOWN) { this.downY = ev.getY(); } if (!this.startedSwipeToClose) { boolean scrolledTouchSlop = Math.abs(ev.getY() - this.downY) > ((float) this.viewConfig.getScaledTouchSlop()); boolean canScroll = canScroll(this.detail, false, (int) (ev.getY() - this.downY), (int) ev.getX(), (int) ev.getY()); boolean currentlyFolding = this.detail.hasFold(); if (currentlyFolding || (scrolledTouchSlop && !canScroll)) { this.velocityTracker.clear(); this.velocityTracker.addMovement(ev); if (currentlyFolding) { this.closeDown = ev.getY() < ((float) this.foldCenter); } else { this.closeDown = this.downY < ev.getY(); } this.downY = ev.getY(); this.startedSwipeToClose = true; this.initialPercentY = this.detail.getTopFoldFactor(); clearAnimations(); requestDisallowInterceptTouchEvent(true); } } if (!this.startedSwipeToClose) { return false; } if (ev.getAction() == MotionEvent.ACTION_MOVE) { this.velocityTracker.addMovement(ev); float totalDistanceY = ev.getY() - this.downY; if (!this.closeDown) { totalDistanceY = -totalDistanceY; } float percentY = ((totalDistanceY / ((float) getHeight())) * 2.0f) + this.initialPercentY; this.detail.setTopFoldFactor(percentY); this.detail.setBottomFoldFactor(percentY); this.main.setTopFoldFactor(DEFAULT_BACKOFF_MULT - percentY); this.main.setBottomFoldFactor(DEFAULT_BACKOFF_MULT - percentY); } if (ev.getAction() == MotionEvent.ACTION_UP || ev.getAction() == MotionEvent.ACTION_CANCEL) { this.velocityTracker.computeCurrentVelocity(1); this.startedSwipeToClose = false; handleFling(this.velocityTracker.getYVelocity()); requestDisallowInterceptTouchEvent(false); } return true; } private void handleFling(float speed) { float absoluteSpeed = Math.abs(speed); if (((double) absoluteSpeed) > 0.5d) { float startFoldFactor = this.main.getTopFoldFactor() - ((210.0f * speed) / ((float) getHeight())); boolean animateToMain = (this.closeDown && speed > 0.0f) || (!this.closeDown && speed < 0.0f); if (animateToMain) { animateToMain(DEFAULT_BACKOFF_MULT - startFoldFactor, startFoldFactor, (int) Math.max(135.0f, (((float) ((int) Math.max(0.0f, (((float) getHeight()) * startFoldFactor) / 2.0f))) / absoluteSpeed) * FoldInterpolator.initialSpeedFactor), this.interpolatorFling); } else { animateToDetail(DEFAULT_BACKOFF_MULT - startFoldFactor, startFoldFactor, (int) ViewUtil.clamp((float) ((int) ((((float) ((int) Math.max(0.0f, (this.detail.getTopFoldFactor() * ((float) getHeight())) / 2.0f))) / absoluteSpeed) * FoldInterpolator.initialSpeedFactor)), 135.0f, 810.0f), this.interpolatorFling); } } else if (((double) this.detail.getTopFoldFactor()) < 0.5d) { animateToDetail(this.detail.getTopFoldFactor(), this.main.getTopFoldFactor(), 270, this.interpolatorTap); } else { animateToMain(this.detail.getTopFoldFactor(), this.main.getTopFoldFactor(), 270, this.interpolatorTap); } } protected boolean canScroll(View v, boolean checkV, int dy, int x, int y) { if (v instanceof ViewGroup) { ViewGroup group = (ViewGroup) v; int scrollX = v.getScrollX(); int scrollY = v.getScrollY(); for (int i = group.getChildCount() - 1; i >= 0; i--) { View child = group.getChildAt(i); if (x + scrollX >= child.getLeft() && x + scrollX < child.getRight() && y + scrollY >= child.getTop() && y + scrollY < child.getBottom()) { if (canScroll(child, true, dy, (x + scrollX) - child.getLeft(), (y + scrollY) - child.getTop())) { return true; } } } } return checkV && ViewCompat.canScrollVertically(v, -dy); } public void animateToDetail(float detailStart, float mainStart, int duration, Interpolator interpolator) { this.animatingToMain = false; ObjectAnimator topAngleAnimator = ObjectAnimator.ofFloat(this.detail, \"topFoldFactor\", new float[]{detailStart, 0.0f}).setDuration((long) duration); topAngleAnimator.setInterpolator(interpolator); this.animatorWeakHashMap.add(new WeakReference(topAngleAnimator)); topAngleAnimator.start(); ObjectAnimator bottomAngleAnimator = ObjectAnimator.ofFloat(this.detail, \"bottomFoldFactor\", new float[]{detailStart, 0.0f}).setDuration((long) duration); bottomAngleAnimator.setInterpolator(interpolator); this.animatorWeakHashMap.add(new WeakReference(bottomAngleAnimator)); bottomAngleAnimator.start(); ObjectAnimator topAngleMain = ObjectAnimator.ofFloat(this.main, \"topFoldFactor\", new float[]{mainStart, DEFAULT_BACKOFF_MULT}).setDuration((long) duration); topAngleMain.setInterpolator(interpolator); this.animatorWeakHashMap.add(new WeakReference(topAngleMain)); topAngleMain.start(); ObjectAnimator bottomAngleMain = ObjectAnimator.ofFloat(this.main, \"bottomFoldFactor\", new float[]{mainStart, DEFAULT_BACKOFF_MULT}).setDuration((long) duration); bottomAngleMain.setInterpolator(interpolator); this.animatorWeakHashMap.add(new WeakReference(bottomAngleMain)); bottomAngleMain.start(); } public void animateToMain(float detailStart, float mainStart, int duration, Interpolator interpolator) { this.animatingToMain = true; ObjectAnimator topAngleDetail = ObjectAnimator.ofFloat(this.detail, \"topFoldFactor\", new float[]{detailStart, DEFAULT_BACKOFF_MULT}).setDuration((long) duration); topAngleDetail.setInterpolator(interpolator); this.animatorWeakHashMap.add(new WeakReference(topAngleDetail)); topAngleDetail.start(); ObjectAnimator bottomAngleDetail = ObjectAnimator.ofFloat(this.detail, \"bottomFoldFactor\", new float[]{detailStart, DEFAULT_BACKOFF_MULT}).setDuration((long) duration); bottomAngleDetail.setInterpolator(interpolator); this.animatorWeakHashMap.add(new WeakReference(bottomAngleDetail)); bottomAngleDetail.start(); ObjectAnimator topAngleMain = ObjectAnimator.ofFloat(this.main, \"topFoldFactor\", new float[]{mainStart, 0.0f}).setDuration((long) duration); topAngleMain.setInterpolator(interpolator); this.animatorWeakHashMap.add(new WeakReference(topAngleMain)); topAngleMain.start(); ValueAnimator anim = ObjectAnimator.ofFloat(this.main, \"bottomFoldFactor\", new float[]{mainStart, 0.0f}).setDuration((long) duration); anim.setInterpolator(interpolator); anim.addListener(new AnimatorListener() { public boolean cancelled; public void onAnimationStart(Animator animation) { } public void onAnimationEnd(Animator animation) { if (!this.cancelled) { final Fragment detailFragment = FoldLayout.this.fragmentManager.findFragmentByTag(FRAGMENT_DETAIL_VIEW_TAG); if (detailFragment != null) { FoldLayout.this.post(new Runnable() { public void run() { FoldLayout.this.fragmentManager.beginTransaction().remove(detailFragment).commitAllowingStateLoss(); } }); } FoldLayout.this.animatingToMain = false; } } public void onAnimationCancel(Animator animation) { this.cancelled = true; } public void onAnimationRepeat(Animator animation) { } }); this.animatorWeakHashMap.add(new WeakReference(anim)); anim.start(); } void clearAnimations() { for (WeakReference<ValueAnimator> reference : this.animatorWeakHashMap) { ValueAnimator anim = reference.get(); if (anim != null) { anim.cancel(); } } this.animatorWeakHashMap.clear(); } public boolean onBackPressed() { if (this.detail == null || this.animatingToMain) { return false; } clearAnimations(); animateToMain(this.detail.getTopFoldFactor(), this.main.getTopFoldFactor(), DetailAnimViewGroup.ANIMATION_DURATION, this.interpolatorTap); return true; } public boolean onScale(ScaleGestureDetector detector) { if (this.detail == null) { return false; } this.latestScaleDistance = detector.getScaleFactor() - DEFAULT_BACKOFF_MULT; this.latestScaleDuration = detector.getTimeDelta(); float fold = this.main.getTopFoldFactor() + this.latestScaleDistance; this.main.setTopFoldFactor(fold); this.main.setBottomFoldFactor(fold); this.detail.setTopFoldFactor(DEFAULT_BACKOFF_MULT - fold); this.detail.setBottomFoldFactor(DEFAULT_BACKOFF_MULT - fold); return true; } public boolean onScaleBegin(ScaleGestureDetector detector) { if (this.detail == null) { return false; } clearAnimations(); this.startedSwipeToClose = false; this.initialPercentY = this.main.getTopFoldFactor(); this.isTouchReservedForPinch = true; requestDisallowInterceptTouchEvent(true); return true; } public void onScaleEnd(ScaleGestureDetector detector) { if (this.detail != null) { float pixelSpeed = ((-this.latestScaleDistance) * ((float) getHeight())) / ((float) this.latestScaleDuration); this.closeDown = true; handleFling(pixelSpeed); requestDisallowInterceptTouchEvent(false); } } protected void onLayout(boolean changed, int left, int top, int right, int bottom) { super.onLayout(changed, left, top, right, bottom); if (this.foldCenter < 0) { this.foldCenter = ((bottom - top) / 2) + 1; if (this.main != null) { this.main.setInitialFoldCenter(this.foldCenter); } if (this.detail != null) { this.detail.setInitialFoldCenter(this.foldCenter); } } } class FoldInterpolator implements Interpolator { public static final float initialSpeedFactor = 1.5f; public float getInterpolation(float input) { return (float) Math.sin((((double) input) * Math.PI) / 2.0d); } } }","dependencies":[{"file_path":"ListItemFold-master/ListItemFold-master/app/src/main/java/com/dodola/flip/ViewUtil.java","file_content":"package com.dodola.flip; public class ViewUtil { public static float clamp(float value, float limit1, float limit2) { float min; float max; if (limit1 < limit2) { min = limit1; max = limit2; } else { min = limit2; max = limit1; } return Math.max(min, Math.min(value, max)); } }"}]}}
{"project_id":227,"chunk_id":0,"content":{"main_file_path":"ListItemFold-master/ListItemFold-master/app/src/main/java/com/dodola/flip/ViewUtil.java","main_file_content":"package com.dodola.flip; public class ViewUtil { public static float clamp(float value, float limit1, float limit2) { float min; float max; if (limit1 < limit2) { min = limit1; max = limit2; } else { min = limit2; max = limit1; } return Math.max(min, Math.min(value, max)); } }","dependencies":[]}}
{"project_id":227,"chunk_id":0,"content":{"main_file_path":"ListItemFold-master/ListItemFold-master/app/src/main/java/com/dodola/flip/ListFragment.java","main_file_content":"package com.dodola.flip; import android.app.Activity; import android.os.Bundle; import android.support.v4.app.Fragment; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.AbsListView; import android.widget.AdapterView; import com.dodola.flip.dummy.ItemDataAdapter; import com.dodola.flip.dummy.SimpleData; import com.loopj.android.http.AsyncHttpClient; import com.loopj.android.http.JsonHttpResponseHandler; import org.apache.http.Header; import org.json.JSONArray; import org.json.JSONObject; import java.util.ArrayList; import java.util.List; public class ListFragment extends Fragment implements AbsListView.OnItemClickListener { private OnFragmentInteractionListener mListener; private AbsListView mListView; private ItemDataAdapter mAdapter; public static ListFragment newInstance() { ListFragment fragment = new ListFragment(); Bundle args = new Bundle(); fragment.setArguments(args); return fragment; } public ListFragment() { } @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); if (getArguments() != null) { } } @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { View view = inflater.inflate(R.layout.fragment_item_list, container, false); mAdapter = new ItemDataAdapter(getActivity()); mListView = (AbsListView) view.findViewById(android.R.id.list); mListView.setAdapter(mAdapter); mListView.setOnItemClickListener(this); DetailAnimViewGroup wrapper = new DetailAnimViewGroup(inflater.getContext(), view, 0); loadData(); return wrapper; } @Override public void onAttach(Activity activity) { super.onAttach(activity); try { mListener = (OnFragmentInteractionListener) activity; } catch (ClassCastException e) { throw new ClassCastException(activity.toString() + \" must implement OnFragmentInteractionListener\"); } } @Override public void onDetach() { super.onDetach(); mListener = null; } @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (null != mListener) { SimpleData data = (SimpleData) parent.getItemAtPosition(position); mListener.onFragmentInteraction(data, view); } } public interface OnFragmentInteractionListener { public void onFragmentInteraction(SimpleData data, View view); } private void loadData() { AsyncHttpClient client = new AsyncHttpClient(); client.get(getActivity(), \"https: @Override public void onSuccess(int statusCode, Header[] headers, JSONObject response) { super.onSuccess(statusCode, headers, response); if (response != null) { final JSONArray posts = response.optJSONArray(\"posts\"); int length = posts.length(); List<SimpleData> resultDatas = new ArrayList<SimpleData>(length); for (int i = 0; i < length; i++) { JSONObject obj = posts.optJSONObject(i); SimpleData data = new SimpleData(); data.content = obj.optString(\"abstract\"); data.title = obj.optString(\"title\"); data.url = obj.optString(\"url\"); JSONArray thumbs = obj.optJSONArray(\"thumbs\"); if (thumbs.length() > 0) { JSONObject thumb = thumbs.optJSONObject(0); thumb = thumb.optJSONObject(\"large\"); if (thumb != null) { data.picUrl = thumb.optString(\"url\"); resultDatas.add(data); } } } mAdapter.addAll(resultDatas); } } }); } }","dependencies":[{"file_path":"ListItemFold-master/ListItemFold-master/app/src/main/java/com/dodola/flip/DetailAnimViewGroup.java","file_content":"package com.dodola.flip; import android.content.Context; import android.graphics.Canvas; import android.graphics.LinearGradient; import android.graphics.Matrix; import android.graphics.Paint; import android.graphics.Paint.Style; import android.graphics.Rect; import android.graphics.RectF; import android.graphics.Shader.TileMode; import android.support.annotation.NonNull; import android.view.View; import android.view.ViewGroup; public class DetailAnimViewGroup extends ViewGroup { public static final int ANIMATION_DURATION = 540; private float bottomFoldFactor; final View child; private RectF clip; private Matrix firstHalfMatrix; private Rect firstHalfRect; private Paint firstShadowGradientPaint; private Paint foldLinePaint; private float halfPageFoldedHeight; private float halfPageFoldedWidth; private int halfPageHeight; private int halfPageWidth; private final int halfPages; private int initialFoldCenter; public int number; private float[] polygonFlat; private float[] polygonFolded; protected boolean prepared; boolean reversed; private int scaledHeight; private Matrix secondHalfMatrix; private Rect secondHalfRect; private Paint secondShadowGradientPaint; private float topFoldFactor; private RectF transformedClip; public static final float DEFAULT_BACKOFF_MULT = 1.0f; public DetailAnimViewGroup(Context context, @NonNull View child, int number) { super(context); this.reversed = true; this.halfPages = 2; this.bottomFoldFactor = 0.0f; this.topFoldFactor = 0.0f; this.clip = new RectF(); this.transformedClip = new RectF(); this.child = child; if (child != null) { addView(child); } this.number = number; } protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { for (int i = 0; i < getChildCount(); i++) { getChildAt(i).measure(widthMeasureSpec, heightMeasureSpec); } super.onMeasure(widthMeasureSpec, heightMeasureSpec); } protected void onLayout(boolean arg0, int x1, int y1, int x2, int y2) { int width = x2 - x1; int height = y2 - y1; for (int i = 0; i < getChildCount(); i++) { getChildAt(i).layout(0, 0, width, height); } if (!this.prepared) { prepareFold(); } } public void setReversed(boolean reversed) { this.reversed = reversed; } public void setBottomFoldFactor(float foldFactor) { foldFactor = ViewUtil.clamp(foldFactor, 0.0f, DEFAULT_BACKOFF_MULT); if (foldFactor != this.bottomFoldFactor) { this.bottomFoldFactor = foldFactor; calculateMatrix(false); invalidate(); } updateVisibility(); } private void updateVisibility() { if (this.topFoldFactor == DEFAULT_BACKOFF_MULT && this.bottomFoldFactor == DEFAULT_BACKOFF_MULT) { if (getVisibility() != View.GONE) { setVisibility(View.GONE); } } else if (getVisibility() != View.VISIBLE) { setVisibility(View.VISIBLE); } } public void setTopFoldFactor(float foldFactor) { foldFactor = ViewUtil.clamp(foldFactor, 0.0f, DEFAULT_BACKOFF_MULT); if (foldFactor != this.topFoldFactor) { this.topFoldFactor = foldFactor; calculateMatrix(true); invalidate(); } updateLayer(this.child); updateVisibility(); } public float getTopFoldFactor() { return this.topFoldFactor; } protected void prepareFold() { this.polygonFlat = new float[8]; this.polygonFlat[0] = 0.0f; this.polygonFlat[1] = 0.0f; this.polygonFlat[2] = 0.0f; this.polygonFlat[5] = 0.0f; this.polygonFolded = new float[8]; this.firstShadowGradientPaint = new Paint(); this.firstShadowGradientPaint.setStyle(Style.FILL); this.secondShadowGradientPaint = new Paint(); this.secondShadowGradientPaint.setStyle(Style.FILL); this.foldLinePaint = new Paint(); this.foldLinePaint.setStrokeWidth(getResources().getDisplayMetrics().density * 2.0f); this.foldLinePaint.setColor(-1); this.foldLinePaint.setAlpha(0); int height = Math.round(((float) getMeasuredHeight()) / 2.0f); LinearGradient firstShadowGradient = new LinearGradient(0.0f, 0.0f, 0.0f, (float) height, 0x3f000000, 0xbb000000, TileMode.CLAMP); LinearGradient secondShadowGradient = new LinearGradient(0.0f, 0.0f, 0.0f, (float) height, 0xbb000000, 0, TileMode.CLAMP); this.firstShadowGradientPaint.setShader(firstShadowGradient); this.secondShadowGradientPaint.setShader(secondShadowGradient); this.firstHalfRect = new Rect(); this.secondHalfRect = new Rect(); this.firstHalfMatrix = new Matrix(); this.secondHalfMatrix = new Matrix(); this.firstHalfRect = new Rect(0, 0, getMeasuredWidth(), Math.round(((float) getMeasuredHeight()) / 2.0f)); this.secondHalfRect = new Rect(0, Math.round(((float) getMeasuredHeight()) / 2.0f), getMeasuredWidth(), getMeasuredHeight()); this.halfPageHeight = (int) Math.ceil((double) (((float) getMeasuredHeight()) / 2.0f)); this.halfPageWidth = getMeasuredWidth(); this.prepared = true; calculateMatrix(true); calculateMatrix(false); } void calculateMatrix(boolean first) { if (this.prepared) { float f; float translationFactor = DEFAULT_BACKOFF_MULT - (first ? this.topFoldFactor : this.bottomFoldFactor); float translatedDistancePerFold = (float) Math.round((((float) getMeasuredHeight()) * translationFactor) / 2.0f); this.halfPageFoldedWidth = ((float) this.halfPageWidth) < translatedDistancePerFold ? translatedDistancePerFold : (float) this.halfPageWidth; if (((float) this.halfPageHeight) < translatedDistancePerFold) { f = translatedDistancePerFold; } else { f = (float) this.halfPageHeight; } this.halfPageFoldedHeight = f; this.polygonFlat[3] = this.halfPageFoldedHeight; this.polygonFlat[4] = this.halfPageFoldedWidth; this.polygonFlat[6] = this.halfPageFoldedWidth; this.polygonFlat[7] = this.halfPageFoldedHeight; int scaledWidth = (int) Math.ceil((double) (this.halfPageFoldedWidth * (DEFAULT_BACKOFF_MULT * (3600.0f / (3600.0f + ((float) Math.sqrt((double) ((this.halfPageFoldedHeight * this.halfPageFoldedHeight) - (translatedDistancePerFold * translatedDistancePerFold))))))))); this.scaledHeight = (int) Math.ceil((double) (this.halfPageFoldedHeight * translationFactor)); int anchorPoint = (int) ((((float) this.initialFoldCenter) * this.topFoldFactor) + ((((float) getHeight()) / 2.0f) * (DEFAULT_BACKOFF_MULT - this.topFoldFactor))); if (first) { calculateFirstHalf((float) anchorPoint, (float) scaledWidth, (float) this.scaledHeight); } else { calculateSecondHalf((float) anchorPoint, (float) scaledWidth, (float) this.scaledHeight); } } } void calculateFirstHalf(float anchorPoint, float scaledWidth, float scaledHeight) { float leftScaledPoint = (this.halfPageFoldedWidth - scaledWidth) / 2.0f; float rightScaledPoint = leftScaledPoint + scaledWidth; if (!this.reversed) { this.polygonFolded[0] = 0.0f; this.polygonFolded[1] = anchorPoint - scaledHeight; this.polygonFolded[2] = leftScaledPoint; this.polygonFolded[3] = anchorPoint; this.polygonFolded[4] = (float) getMeasuredWidth(); this.polygonFolded[5] = this.polygonFolded[1]; this.polygonFolded[6] = rightScaledPoint; this.polygonFolded[7] = this.polygonFolded[3]; } int shadowAlpha = (int) (255.0f - ((255.0f * scaledHeight) / (((float) getMeasuredHeight()) / 2.0f))); this.firstHalfMatrix.reset(); this.firstHalfMatrix.setPolyToPoly(this.polygonFlat, 0, this.polygonFolded, 0, 4); this.firstShadowGradientPaint.setAlpha(shadowAlpha); } void calculateSecondHalf(float anchorPoint, float scaledWidth, float scaledHeight) { float leftScaledPoint = (this.halfPageFoldedWidth - scaledWidth) / 2.0f; float rightScaledPoint = leftScaledPoint + scaledWidth; if (!this.reversed) { this.polygonFolded[0] = leftScaledPoint; this.polygonFolded[1] = anchorPoint; this.polygonFolded[2] = 0.0f; this.polygonFolded[3] = anchorPoint + scaledHeight; this.polygonFolded[4] = rightScaledPoint; this.polygonFolded[5] = this.polygonFolded[1]; this.polygonFolded[6] = (float) getMeasuredWidth(); this.polygonFolded[7] = this.polygonFolded[3]; } int shadowAlpha = (int) (255.0f - ((255.0f * scaledHeight) / (((float) getMeasuredHeight()) / 2.0f))); this.secondHalfMatrix.reset(); this.secondHalfMatrix.setPolyToPoly(this.polygonFlat, 0, this.polygonFolded, 0, 4); this.secondShadowGradientPaint.setAlpha(shadowAlpha); this.foldLinePaint.setAlpha((int) (Math.min(DEFAULT_BACKOFF_MULT, this.bottomFoldFactor * 2.0f) * 255.0f)); } boolean hasFold() { return this.topFoldFactor > 0.0f; } protected void dispatchDraw(Canvas canvas) { if (this.prepared && hasFold()) { if (this.topFoldFactor < DEFAULT_BACKOFF_MULT) { drawHalf(canvas, this.firstHalfRect, this.firstHalfMatrix, this.firstShadowGradientPaint, true); } if (this.bottomFoldFactor < DEFAULT_BACKOFF_MULT) { drawHalf(canvas, this.secondHalfRect, this.secondHalfMatrix, this.secondShadowGradientPaint, false); return; } return; } super.dispatchDraw(canvas); } void drawHalf(Canvas canvas, @NonNull Rect src, @NonNull Matrix transform, Paint shadowPaint, boolean top) { canvas.save(); if (this.reversed) { canvas.save(); canvas.translate(0.0f, (float) ((int) (((float) (top ? -1 : 1)) * (this.topFoldFactor * ((float) src.height()))))); canvas.clipRect(src); } else { this.clip.set(0.0f, 0.0f, (float) (src.right - src.left), (float) (src.bottom - src.top)); transform.mapRect(this.transformedClip, this.clip); canvas.clipRect(this.transformedClip); canvas.concat(transform); canvas.save(); canvas.translate(0.0f, (float) (-src.top)); } super.dispatchDraw(canvas); if (this.reversed) { int y = this.initialFoldCenter; canvas.drawLine(0.0f, (float) y, (float) getWidth(), (float) y, this.foldLinePaint); } canvas.restore(); if (!this.reversed) { canvas.drawRect(0.0f, 0.0f, (float) getMeasuredWidth(), (float) getMeasuredHeight(), shadowPaint); } canvas.restore(); } public void setInitialFoldCenter(int initialFoldCenter) { this.initialFoldCenter = initialFoldCenter; this.firstHalfRect = new Rect(0, 0, getMeasuredWidth(), initialFoldCenter); this.secondHalfRect = new Rect(0, initialFoldCenter, getMeasuredWidth(), getMeasuredHeight()); } private void updateLayer(@NonNull View view) { if (hasFold() && view.getLayerType() != 2) { view.setLayerType(2, null); } else if (!hasFold() && view.getLayerType() != 0) { view.setLayerType(0, null); } } }"},{"file_path":"ListItemFold-master/ListItemFold-master/app/src/main/java/com/dodola/flip/dummy/ItemDataAdapter.java","file_content":"package com.dodola.flip.dummy; import java.util.ArrayList; import java.util.List; import android.content.Context; import android.graphics.drawable.ColorDrawable; import android.net.Uri; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.ArrayAdapter; import android.widget.BaseAdapter; import com.dodola.flip.CircularProgressDrawable; import com.dodola.flip.R; import com.facebook.drawee.generic.GenericDraweeHierarchy; import com.facebook.drawee.generic.GenericDraweeHierarchyBuilder; import com.facebook.drawee.view.SimpleDraweeView; import android.widget.TextView; public class ItemDataAdapter extends ArrayAdapter<SimpleData> { private Context context; private LayoutInflater layoutInflater; public ItemDataAdapter(Context context) { super(context, -1); this.context = context; this.layoutInflater = LayoutInflater.from(context); } @Override public View getView(int position, View convertView, ViewGroup parent) { if (convertView == null) { convertView = layoutInflater.inflate(R.layout.item_data, null); ViewHolder viewHolder = new ViewHolder(); viewHolder.myImageView = (SimpleDraweeView) convertView.findViewById(R.id.my_image_view); viewHolder.myTitle = (TextView) convertView.findViewById(R.id.my_title); viewHolder.myContent = (TextView) convertView.findViewById(R.id.my_content); GenericDraweeHierarchyBuilder builder = new GenericDraweeHierarchyBuilder(context.getResources()); GenericDraweeHierarchy hierarchy = builder .setFadeDuration(200) .setPlaceholderImage(new ColorDrawable(0xf2f2f2)) .setProgressBarImage(new CircularProgressDrawable()) .build(); viewHolder.myImageView.setHierarchy(hierarchy); convertView.setTag(viewHolder); } initializeViews(getItem(position), (ViewHolder) convertView.getTag()); return convertView; } private void initializeViews(SimpleData simpleData, ViewHolder holder) { holder.myContent.setText(simpleData.content); holder.myTitle.setText(simpleData.title); holder.myImageView.setImageURI(Uri.parse(simpleData.picUrl)); } protected class ViewHolder { private SimpleDraweeView myImageView; private TextView myTitle; private TextView myContent; } }"},{"file_path":"ListItemFold-master/ListItemFold-master/app/src/main/java/com/dodola/flip/dummy/SimpleData.java","file_content":"package com.dodola.flip.dummy; public class SimpleData { public String title; public String url; public String content; public String picUrl; }"}]}}
{"project_id":227,"chunk_id":0,"content":{"main_file_path":"ListItemFold-master/ListItemFold-master/app/src/main/java/com/dodola/flip/DetailAnimViewGroup.java","main_file_content":"package com.dodola.flip; import android.content.Context; import android.graphics.Canvas; import android.graphics.LinearGradient; import android.graphics.Matrix; import android.graphics.Paint; import android.graphics.Paint.Style; import android.graphics.Rect; import android.graphics.RectF; import android.graphics.Shader.TileMode; import android.support.annotation.NonNull; import android.view.View; import android.view.ViewGroup; public class DetailAnimViewGroup extends ViewGroup { public static final int ANIMATION_DURATION = 540; private float bottomFoldFactor; final View child; private RectF clip; private Matrix firstHalfMatrix; private Rect firstHalfRect; private Paint firstShadowGradientPaint; private Paint foldLinePaint; private float halfPageFoldedHeight; private float halfPageFoldedWidth; private int halfPageHeight; private int halfPageWidth; private final int halfPages; private int initialFoldCenter; public int number; private float[] polygonFlat; private float[] polygonFolded; protected boolean prepared; boolean reversed; private int scaledHeight; private Matrix secondHalfMatrix; private Rect secondHalfRect; private Paint secondShadowGradientPaint; private float topFoldFactor; private RectF transformedClip; public static final float DEFAULT_BACKOFF_MULT = 1.0f; public DetailAnimViewGroup(Context context, @NonNull View child, int number) { super(context); this.reversed = true; this.halfPages = 2; this.bottomFoldFactor = 0.0f; this.topFoldFactor = 0.0f; this.clip = new RectF(); this.transformedClip = new RectF(); this.child = child; if (child != null) { addView(child); } this.number = number; } protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { for (int i = 0; i < getChildCount(); i++) { getChildAt(i).measure(widthMeasureSpec, heightMeasureSpec); } super.onMeasure(widthMeasureSpec, heightMeasureSpec); } protected void onLayout(boolean arg0, int x1, int y1, int x2, int y2) { int width = x2 - x1; int height = y2 - y1; for (int i = 0; i < getChildCount(); i++) { getChildAt(i).layout(0, 0, width, height); } if (!this.prepared) { prepareFold(); } } public void setReversed(boolean reversed) { this.reversed = reversed; } public void setBottomFoldFactor(float foldFactor) { foldFactor = ViewUtil.clamp(foldFactor, 0.0f, DEFAULT_BACKOFF_MULT); if (foldFactor != this.bottomFoldFactor) { this.bottomFoldFactor = foldFactor; calculateMatrix(false); invalidate(); } updateVisibility(); } private void updateVisibility() { if (this.topFoldFactor == DEFAULT_BACKOFF_MULT && this.bottomFoldFactor == DEFAULT_BACKOFF_MULT) { if (getVisibility() != View.GONE) { setVisibility(View.GONE); } } else if (getVisibility() != View.VISIBLE) { setVisibility(View.VISIBLE); } } public void setTopFoldFactor(float foldFactor) { foldFactor = ViewUtil.clamp(foldFactor, 0.0f, DEFAULT_BACKOFF_MULT); if (foldFactor != this.topFoldFactor) { this.topFoldFactor = foldFactor; calculateMatrix(true); invalidate(); } updateLayer(this.child); updateVisibility(); } public float getTopFoldFactor() { return this.topFoldFactor; } protected void prepareFold() { this.polygonFlat = new float[8]; this.polygonFlat[0] = 0.0f; this.polygonFlat[1] = 0.0f; this.polygonFlat[2] = 0.0f; this.polygonFlat[5] = 0.0f; this.polygonFolded = new float[8]; this.firstShadowGradientPaint = new Paint(); this.firstShadowGradientPaint.setStyle(Style.FILL); this.secondShadowGradientPaint = new Paint(); this.secondShadowGradientPaint.setStyle(Style.FILL); this.foldLinePaint = new Paint(); this.foldLinePaint.setStrokeWidth(getResources().getDisplayMetrics().density * 2.0f); this.foldLinePaint.setColor(-1); this.foldLinePaint.setAlpha(0); int height = Math.round(((float) getMeasuredHeight()) / 2.0f); LinearGradient firstShadowGradient = new LinearGradient(0.0f, 0.0f, 0.0f, (float) height, 0x3f000000, 0xbb000000, TileMode.CLAMP); LinearGradient secondShadowGradient = new LinearGradient(0.0f, 0.0f, 0.0f, (float) height, 0xbb000000, 0, TileMode.CLAMP); this.firstShadowGradientPaint.setShader(firstShadowGradient); this.secondShadowGradientPaint.setShader(secondShadowGradient); this.firstHalfRect = new Rect(); this.secondHalfRect = new Rect(); this.firstHalfMatrix = new Matrix(); this.secondHalfMatrix = new Matrix(); this.firstHalfRect = new Rect(0, 0, getMeasuredWidth(), Math.round(((float) getMeasuredHeight()) / 2.0f)); this.secondHalfRect = new Rect(0, Math.round(((float) getMeasuredHeight()) / 2.0f), getMeasuredWidth(), getMeasuredHeight()); this.halfPageHeight = (int) Math.ceil((double) (((float) getMeasuredHeight()) / 2.0f)); this.halfPageWidth = getMeasuredWidth(); this.prepared = true; calculateMatrix(true); calculateMatrix(false); } void calculateMatrix(boolean first) { if (this.prepared) { float f; float translationFactor = DEFAULT_BACKOFF_MULT - (first ? this.topFoldFactor : this.bottomFoldFactor); float translatedDistancePerFold = (float) Math.round((((float) getMeasuredHeight()) * translationFactor) / 2.0f); this.halfPageFoldedWidth = ((float) this.halfPageWidth) < translatedDistancePerFold ? translatedDistancePerFold : (float) this.halfPageWidth; if (((float) this.halfPageHeight) < translatedDistancePerFold) { f = translatedDistancePerFold; } else { f = (float) this.halfPageHeight; } this.halfPageFoldedHeight = f; this.polygonFlat[3] = this.halfPageFoldedHeight; this.polygonFlat[4] = this.halfPageFoldedWidth; this.polygonFlat[6] = this.halfPageFoldedWidth; this.polygonFlat[7] = this.halfPageFoldedHeight; int scaledWidth = (int) Math.ceil((double) (this.halfPageFoldedWidth * (DEFAULT_BACKOFF_MULT * (3600.0f / (3600.0f + ((float) Math.sqrt((double) ((this.halfPageFoldedHeight * this.halfPageFoldedHeight) - (translatedDistancePerFold * translatedDistancePerFold))))))))); this.scaledHeight = (int) Math.ceil((double) (this.halfPageFoldedHeight * translationFactor)); int anchorPoint = (int) ((((float) this.initialFoldCenter) * this.topFoldFactor) + ((((float) getHeight()) / 2.0f) * (DEFAULT_BACKOFF_MULT - this.topFoldFactor))); if (first) { calculateFirstHalf((float) anchorPoint, (float) scaledWidth, (float) this.scaledHeight); } else { calculateSecondHalf((float) anchorPoint, (float) scaledWidth, (float) this.scaledHeight); } } } void calculateFirstHalf(float anchorPoint, float scaledWidth, float scaledHeight) { float leftScaledPoint = (this.halfPageFoldedWidth - scaledWidth) / 2.0f; float rightScaledPoint = leftScaledPoint + scaledWidth; if (!this.reversed) { this.polygonFolded[0] = 0.0f; this.polygonFolded[1] = anchorPoint - scaledHeight; this.polygonFolded[2] = leftScaledPoint; this.polygonFolded[3] = anchorPoint; this.polygonFolded[4] = (float) getMeasuredWidth(); this.polygonFolded[5] = this.polygonFolded[1]; this.polygonFolded[6] = rightScaledPoint; this.polygonFolded[7] = this.polygonFolded[3]; } int shadowAlpha = (int) (255.0f - ((255.0f * scaledHeight) / (((float) getMeasuredHeight()) / 2.0f))); this.firstHalfMatrix.reset(); this.firstHalfMatrix.setPolyToPoly(this.polygonFlat, 0, this.polygonFolded, 0, 4); this.firstShadowGradientPaint.setAlpha(shadowAlpha); } void calculateSecondHalf(float anchorPoint, float scaledWidth, float scaledHeight) { float leftScaledPoint = (this.halfPageFoldedWidth - scaledWidth) / 2.0f; float rightScaledPoint = leftScaledPoint + scaledWidth; if (!this.reversed) { this.polygonFolded[0] = leftScaledPoint; this.polygonFolded[1] = anchorPoint; this.polygonFolded[2] = 0.0f; this.polygonFolded[3] = anchorPoint + scaledHeight; this.polygonFolded[4] = rightScaledPoint; this.polygonFolded[5] = this.polygonFolded[1]; this.polygonFolded[6] = (float) getMeasuredWidth(); this.polygonFolded[7] = this.polygonFolded[3]; } int shadowAlpha = (int) (255.0f - ((255.0f * scaledHeight) / (((float) getMeasuredHeight()) / 2.0f))); this.secondHalfMatrix.reset(); this.secondHalfMatrix.setPolyToPoly(this.polygonFlat, 0, this.polygonFolded, 0, 4); this.secondShadowGradientPaint.setAlpha(shadowAlpha); this.foldLinePaint.setAlpha((int) (Math.min(DEFAULT_BACKOFF_MULT, this.bottomFoldFactor * 2.0f) * 255.0f)); } boolean hasFold() { return this.topFoldFactor > 0.0f; } protected void dispatchDraw(Canvas canvas) { if (this.prepared && hasFold()) { if (this.topFoldFactor < DEFAULT_BACKOFF_MULT) { drawHalf(canvas, this.firstHalfRect, this.firstHalfMatrix, this.firstShadowGradientPaint, true); } if (this.bottomFoldFactor < DEFAULT_BACKOFF_MULT) { drawHalf(canvas, this.secondHalfRect, this.secondHalfMatrix, this.secondShadowGradientPaint, false); return; } return; } super.dispatchDraw(canvas); } void drawHalf(Canvas canvas, @NonNull Rect src, @NonNull Matrix transform, Paint shadowPaint, boolean top) { canvas.save(); if (this.reversed) { canvas.save(); canvas.translate(0.0f, (float) ((int) (((float) (top ? -1 : 1)) * (this.topFoldFactor * ((float) src.height()))))); canvas.clipRect(src); } else { this.clip.set(0.0f, 0.0f, (float) (src.right - src.left), (float) (src.bottom - src.top)); transform.mapRect(this.transformedClip, this.clip); canvas.clipRect(this.transformedClip); canvas.concat(transform); canvas.save(); canvas.translate(0.0f, (float) (-src.top)); } super.dispatchDraw(canvas); if (this.reversed) { int y = this.initialFoldCenter; canvas.drawLine(0.0f, (float) y, (float) getWidth(), (float) y, this.foldLinePaint); } canvas.restore(); if (!this.reversed) { canvas.drawRect(0.0f, 0.0f, (float) getMeasuredWidth(), (float) getMeasuredHeight(), shadowPaint); } canvas.restore(); } public void setInitialFoldCenter(int initialFoldCenter) { this.initialFoldCenter = initialFoldCenter; this.firstHalfRect = new Rect(0, 0, getMeasuredWidth(), initialFoldCenter); this.secondHalfRect = new Rect(0, initialFoldCenter, getMeasuredWidth(), getMeasuredHeight()); } private void updateLayer(@NonNull View view) { if (hasFold() && view.getLayerType() != 2) { view.setLayerType(2, null); } else if (!hasFold() && view.getLayerType() != 0) { view.setLayerType(0, null); } } }","dependencies":[{"file_path":"ListItemFold-master/ListItemFold-master/app/src/main/java/com/dodola/flip/ViewUtil.java","file_content":"package com.dodola.flip; public class ViewUtil { public static float clamp(float value, float limit1, float limit2) { float min; float max; if (limit1 < limit2) { min = limit1; max = limit2; } else { min = limit2; max = limit1; } return Math.max(min, Math.min(value, max)); } }"}]}}
{"project_id":227,"chunk_id":0,"content":{"main_file_path":"ListItemFold-master/ListItemFold-master/app/src/main/java/com/dodola/flip/dummy/ItemDataAdapter.java","main_file_content":"package com.dodola.flip.dummy; import java.util.ArrayList; import java.util.List; import android.content.Context; import android.graphics.drawable.ColorDrawable; import android.net.Uri; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.ArrayAdapter; import android.widget.BaseAdapter; import com.dodola.flip.CircularProgressDrawable; import com.dodola.flip.R; import com.facebook.drawee.generic.GenericDraweeHierarchy; import com.facebook.drawee.generic.GenericDraweeHierarchyBuilder; import com.facebook.drawee.view.SimpleDraweeView; import android.widget.TextView; public class ItemDataAdapter extends ArrayAdapter<SimpleData> { private Context context; private LayoutInflater layoutInflater; public ItemDataAdapter(Context context) { super(context, -1); this.context = context; this.layoutInflater = LayoutInflater.from(context); } @Override public View getView(int position, View convertView, ViewGroup parent) { if (convertView == null) { convertView = layoutInflater.inflate(R.layout.item_data, null); ViewHolder viewHolder = new ViewHolder(); viewHolder.myImageView = (SimpleDraweeView) convertView.findViewById(R.id.my_image_view); viewHolder.myTitle = (TextView) convertView.findViewById(R.id.my_title); viewHolder.myContent = (TextView) convertView.findViewById(R.id.my_content); GenericDraweeHierarchyBuilder builder = new GenericDraweeHierarchyBuilder(context.getResources()); GenericDraweeHierarchy hierarchy = builder .setFadeDuration(200) .setPlaceholderImage(new ColorDrawable(0xf2f2f2)) .setProgressBarImage(new CircularProgressDrawable()) .build(); viewHolder.myImageView.setHierarchy(hierarchy); convertView.setTag(viewHolder); } initializeViews(getItem(position), (ViewHolder) convertView.getTag()); return convertView; } private void initializeViews(SimpleData simpleData, ViewHolder holder) { holder.myContent.setText(simpleData.content); holder.myTitle.setText(simpleData.title); holder.myImageView.setImageURI(Uri.parse(simpleData.picUrl)); } protected class ViewHolder { private SimpleDraweeView myImageView; private TextView myTitle; private TextView myContent; } }","dependencies":[{"file_path":"ListItemFold-master/ListItemFold-master/app/src/main/java/com/dodola/flip/CircularProgressDrawable.java","file_content":"package com.dodola.flip; import android.graphics.Canvas; import android.graphics.ColorFilter; import android.graphics.Paint; import android.graphics.Rect; import android.graphics.RectF; import android.graphics.drawable.Drawable; public class CircularProgressDrawable extends Drawable { public CircularProgressDrawable() { this(dip2px(60), dip2px(8), 0xfff6f6f6, 0xffe1e1e1); } public static int dip2px(float dpValue) { final float scale = FlipApplcation.getInstance().getResources().getDisplayMetrics().density; return (int) (dpValue * scale + 0.5f); } public static final int PROGRESS_FACTOR = 360; public static final String TAG = \"CircularProgressDrawable\"; private Rect sizeBounds; private final Paint paint; protected float progress; protected int outlineColor; protected int ringColor; protected final RectF arcElements; protected final int ringWidth; protected boolean indeterminate; CircularProgressDrawable(int size, int ringWidth, int outlineColor, int ringColor) { this.progress = 0; this.outlineColor = outlineColor; this.ringColor = ringColor; this.paint = new Paint(); this.paint.setAntiAlias(true); this.ringWidth = ringWidth; this.arcElements = new RectF(); this.indeterminate = false; sizeBounds = new Rect(0, 0, size, size); } @Override public void draw(Canvas canvas) { if (isVisible()) { final Rect bounds = getBounds(); int size = Math.min(sizeBounds.height(), sizeBounds.width()); float outerRadius = (size / 2) - (ringWidth / 2); float offsetX = (bounds.width() - outerRadius * 2) / 2; float offsetY = (bounds.height() - outerRadius * 2) / 2; paint.setStyle(Paint.Style.STROKE); paint.setStrokeWidth(ringWidth); paint.setColor(outlineColor); canvas.drawCircle(bounds.centerX(), bounds.centerY(), outerRadius, paint); float arcX0 = offsetX; float arcY0 = offsetY; float arcX = offsetX + outerRadius * 2; float arcY = offsetY + outerRadius * 2; paint.setColor(ringColor); paint.setStyle(Paint.Style.STROKE); paint.setStrokeWidth(ringWidth); paint.setStrokeCap(Paint.Cap.ROUND); arcElements.set(arcX0, arcY0, arcX, arcY); if (indeterminate) { canvas.drawArc(arcElements, progress, 90, false, paint); } else { canvas.drawArc(arcElements, -90, progress, false, paint); } } else { canvas.drawColor(0x00ffffff); } } @Override public void setAlpha(int alpha) { paint.setAlpha(alpha); } @Override public void setColorFilter(ColorFilter cf) { paint.setColorFilter(cf); } protected boolean onLevelChange(int level) { if (level == 10000) { setVisible(false, true); } else { setVisible(true, true); } setProgress(level / 10000f); return false; } @Override public int getOpacity() { return 1 - paint.getAlpha(); } public void setProgress(float progress) { if (indeterminate) { this.progress = progress; } else { this.progress = PROGRESS_FACTOR * progress; } invalidateSelf(); } }"},{"file_path":"ListItemFold-master/ListItemFold-master/app/src/main/java/com/dodola/flip/dummy/SimpleData.java","file_content":"package com.dodola.flip.dummy; public class SimpleData { public String title; public String url; public String content; public String picUrl; }"}]}}
{"project_id":227,"chunk_id":0,"content":{"main_file_path":"ListItemFold-master/ListItemFold-master/app/src/main/java/com/dodola/flip/dummy/RecyclerDataAdapter.java","main_file_content":"package com.dodola.flip.dummy; import android.content.Context; import android.graphics.drawable.ColorDrawable; import android.net.Uri; import android.support.v7.widget.RecyclerView; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.TextView; import com.dodola.flip.CircularProgressDrawable; import com.dodola.flip.R; import com.dodola.flip.RecyclerFragment; import com.facebook.drawee.generic.GenericDraweeHierarchy; import com.facebook.drawee.generic.GenericDraweeHierarchyBuilder; import com.facebook.drawee.view.SimpleDraweeView; import java.util.ArrayList; import java.util.List; public class RecyclerDataAdapter extends RecyclerView.Adapter<RecyclerDataAdapter.ViewHolder> { private LayoutInflater mLayoutInflater; private ArrayList<SimpleData> mDatas; private Context mContext; private IOnRecyclerItemClick mOnItemClick; public void setOnItemClick(IOnRecyclerItemClick onItemClick) { mOnItemClick = onItemClick; } public interface IOnRecyclerItemClick { void onItemClick(SimpleData data, View view); } public RecyclerDataAdapter(Context context) { mLayoutInflater = LayoutInflater.from(context); mDatas = new ArrayList<>(); mContext = context; } @Override public ViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) { final View convertView = mLayoutInflater.inflate(R.layout.item_data, viewGroup, false); ViewHolder holder = new ViewHolder(convertView); return holder; } @Override public void onBindViewHolder(ViewHolder viewHolder, int i) { final SimpleData simpleData = mDatas.get(i); viewHolder.myContent.setText(simpleData.content); viewHolder.myTitle.setText(simpleData.title); viewHolder.myImageView.setImageURI(Uri.parse(simpleData.picUrl)); } @Override public int getItemCount() { return mDatas == null ? 0 : mDatas.size(); } public void addAll(List<SimpleData> resultDatas) { if (mDatas == null) { mDatas = new ArrayList<>(); } mDatas.addAll(resultDatas); notifyDataSetChanged(); } public SimpleData getItemAtPosition(int position) { return mDatas.get(position); } public class ViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener { private SimpleDraweeView myImageView; private TextView myTitle; private TextView myContent; public ViewHolder(View convertView) { super(convertView); myImageView = (SimpleDraweeView) convertView.findViewById(R.id.my_image_view); myTitle = (TextView) convertView.findViewById(R.id.my_title); myContent = (TextView) convertView.findViewById(R.id.my_content); GenericDraweeHierarchyBuilder builder = new GenericDraweeHierarchyBuilder(mContext.getResources()); GenericDraweeHierarchy hierarchy = builder .setFadeDuration(200) .setPlaceholderImage(new ColorDrawable(0xf2f2f2)) .setProgressBarImage(new CircularProgressDrawable()) .build(); myImageView.setHierarchy(hierarchy); convertView.setOnClickListener(this); } @Override public void onClick(View v) { final int adapterPosition = getAdapterPosition(); final SimpleData itemAtPosition = getItemAtPosition(adapterPosition); if (mOnItemClick != null) { mOnItemClick.onItemClick(itemAtPosition, v); } } } }","dependencies":[{"file_path":"ListItemFold-master/ListItemFold-master/app/src/main/java/com/dodola/flip/CircularProgressDrawable.java","file_content":"package com.dodola.flip; import android.graphics.Canvas; import android.graphics.ColorFilter; import android.graphics.Paint; import android.graphics.Rect; import android.graphics.RectF; import android.graphics.drawable.Drawable; public class CircularProgressDrawable extends Drawable { public CircularProgressDrawable() { this(dip2px(60), dip2px(8), 0xfff6f6f6, 0xffe1e1e1); } public static int dip2px(float dpValue) { final float scale = FlipApplcation.getInstance().getResources().getDisplayMetrics().density; return (int) (dpValue * scale + 0.5f); } public static final int PROGRESS_FACTOR = 360; public static final String TAG = \"CircularProgressDrawable\"; private Rect sizeBounds; private final Paint paint; protected float progress; protected int outlineColor; protected int ringColor; protected final RectF arcElements; protected final int ringWidth; protected boolean indeterminate; CircularProgressDrawable(int size, int ringWidth, int outlineColor, int ringColor) { this.progress = 0; this.outlineColor = outlineColor; this.ringColor = ringColor; this.paint = new Paint(); this.paint.setAntiAlias(true); this.ringWidth = ringWidth; this.arcElements = new RectF(); this.indeterminate = false; sizeBounds = new Rect(0, 0, size, size); } @Override public void draw(Canvas canvas) { if (isVisible()) { final Rect bounds = getBounds(); int size = Math.min(sizeBounds.height(), sizeBounds.width()); float outerRadius = (size / 2) - (ringWidth / 2); float offsetX = (bounds.width() - outerRadius * 2) / 2; float offsetY = (bounds.height() - outerRadius * 2) / 2; paint.setStyle(Paint.Style.STROKE); paint.setStrokeWidth(ringWidth); paint.setColor(outlineColor); canvas.drawCircle(bounds.centerX(), bounds.centerY(), outerRadius, paint); float arcX0 = offsetX; float arcY0 = offsetY; float arcX = offsetX + outerRadius * 2; float arcY = offsetY + outerRadius * 2; paint.setColor(ringColor); paint.setStyle(Paint.Style.STROKE); paint.setStrokeWidth(ringWidth); paint.setStrokeCap(Paint.Cap.ROUND); arcElements.set(arcX0, arcY0, arcX, arcY); if (indeterminate) { canvas.drawArc(arcElements, progress, 90, false, paint); } else { canvas.drawArc(arcElements, -90, progress, false, paint); } } else { canvas.drawColor(0x00ffffff); } } @Override public void setAlpha(int alpha) { paint.setAlpha(alpha); } @Override public void setColorFilter(ColorFilter cf) { paint.setColorFilter(cf); } protected boolean onLevelChange(int level) { if (level == 10000) { setVisible(false, true); } else { setVisible(true, true); } setProgress(level / 10000f); return false; } @Override public int getOpacity() { return 1 - paint.getAlpha(); } public void setProgress(float progress) { if (indeterminate) { this.progress = progress; } else { this.progress = PROGRESS_FACTOR * progress; } invalidateSelf(); } }"},{"file_path":"ListItemFold-master/ListItemFold-master/app/src/main/java/com/dodola/flip/dummy/SimpleData.java","file_content":"package com.dodola.flip.dummy; public class SimpleData { public String title; public String url; public String content; public String picUrl; }"}]}}
{"project_id":227,"chunk_id":0,"content":{"main_file_path":"ListItemFold-master/ListItemFold-master/app/src/main/java/com/dodola/flip/dummy/SimpleData.java","main_file_content":"package com.dodola.flip.dummy; public class SimpleData { public String title; public String url; public String content; public String picUrl; }","dependencies":[]}}
{"project_id":227,"chunk_id":0,"content":{"main_file_path":"ListItemFold-master/ListItemFold-master/app/src/androidTest/java/com/dodola/flip/ApplicationTest.java","main_file_content":"package com.dodola.flip; import android.app.Application; import android.test.ApplicationTestCase; public class ApplicationTest extends ApplicationTestCase<Application> { public ApplicationTest() { super(Application.class); } }","dependencies":[]}}
{"project_id":231,"chunk_id":0,"content":{"main_file_path":"Note-app-main/src/Main.java","main_file_content":"import app.Login; public class Main { public static void main(String[] args) { new Login(); } }","dependencies":[{"file_path":"Note-app-main/Note-app-main/src/app/Login.java","file_content":"package app; import javax.swing.*; import java.awt.*; public class Login { JFrame loginFrame; JLabel nameLabel, passLabel, massLabel; JTextField nameF, passF; JButton loginBtn, signupBtn; public Login() { createLabels(); createFields(); createLoginButton(); createSignupButton(); createLoginFrame(); } private void createLoginFrame() { loginFrame = new JFrame(\"Login\"); loginFrame.setLocation(500, 200); loginFrame.setSize(420, 420); loginFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); loginFrame.setLayout(null); loginFrame.getContentPane().setBackground(new Color(181, 241, 195)); loginFrame.add(nameF); loginFrame.add(passF); loginFrame.add(nameLabel); loginFrame.add(passLabel); loginFrame.add(massLabel); loginFrame.add(loginBtn); loginFrame.add(signupBtn); loginFrame.setVisible(true); } private void createFields() { nameF = new JTextField(); passF = new JPasswordField(); nameF.setBounds(125, 100, 200, 25); passF.setBounds(125, 150, 200, 25); } private void createLabels() { nameLabel = new JLabel(\"Username:\"); passLabel = new JLabel(\"Password:\"); massLabel = new JLabel(); nameLabel.setBounds(50, 100, 75, 25); passLabel.setBounds(50, 150, 75, 25); massLabel.setBounds(110, 250, 250, 35); massLabel.setFont(new Font(null, Font.PLAIN, 20)); massLabel.setForeground(Color.red); } private void createLoginButton() { loginBtn = new JButton(\"Log in\"); loginBtn.setBounds(125, 200, 100, 25); loginBtn.setFocusable(false); loginBtn.setCursor(new Cursor(Cursor.HAND_CURSOR)); loginBtn.addActionListener(e -> { String name = nameF.getText(); String pass = passF.getText(); FileManager fileManager = new FileManager(); if (fileManager.isUserExist(new User(name, pass))) { loginFrame.dispose(); new WelcomePage(name); } else { massLabel.setText(\"Invalid name or password!\"); } }); } private void createSignupButton() { signupBtn = new JButton(\"Sign up\"); signupBtn.setBounds(225, 200, 100, 25); signupBtn.setFocusable(false); signupBtn.setCursor(new Cursor(Cursor.HAND_CURSOR)); signupBtn.addActionListener(e -> new SignUp()); } }"}]}}
{"project_id":231,"chunk_id":0,"content":{"main_file_path":"Note-app-main/src/app/User.java","main_file_content":"package app; public class User { private final String name; private final String password; public User(String name, String password) { this.name = name; this.password = password; } public String getName() { return name; } public String getPassword() { return password; } }","dependencies":[]}}
{"project_id":231,"chunk_id":0,"content":{"main_file_path":"Note-app-main/src/app/Login.java","main_file_content":"package app; import javax.swing.*; import java.awt.*; public class Login { JFrame loginFrame; JLabel nameLabel, passLabel, massLabel; JTextField nameF, passF; JButton loginBtn, signupBtn; public Login() { createLabels(); createFields(); createLoginButton(); createSignupButton(); createLoginFrame(); } private void createLoginFrame() { loginFrame = new JFrame(\"Login\"); loginFrame.setLocation(500, 200); loginFrame.setSize(420, 420); loginFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); loginFrame.setLayout(null); loginFrame.getContentPane().setBackground(new Color(181, 241, 195)); loginFrame.add(nameF); loginFrame.add(passF); loginFrame.add(nameLabel); loginFrame.add(passLabel); loginFrame.add(massLabel); loginFrame.add(loginBtn); loginFrame.add(signupBtn); loginFrame.setVisible(true); } private void createFields() { nameF = new JTextField(); passF = new JPasswordField(); nameF.setBounds(125, 100, 200, 25); passF.setBounds(125, 150, 200, 25); } private void createLabels() { nameLabel = new JLabel(\"Username:\"); passLabel = new JLabel(\"Password:\"); massLabel = new JLabel(); nameLabel.setBounds(50, 100, 75, 25); passLabel.setBounds(50, 150, 75, 25); massLabel.setBounds(110, 250, 250, 35); massLabel.setFont(new Font(null, Font.PLAIN, 20)); massLabel.setForeground(Color.red); } private void createLoginButton() { loginBtn = new JButton(\"Log in\"); loginBtn.setBounds(125, 200, 100, 25); loginBtn.setFocusable(false); loginBtn.setCursor(new Cursor(Cursor.HAND_CURSOR)); loginBtn.addActionListener(e -> { String name = nameF.getText(); String pass = passF.getText(); FileManager fileManager = new FileManager(); if (fileManager.isUserExist(new User(name, pass))) { loginFrame.dispose(); new WelcomePage(name); } else { massLabel.setText(\"Invalid name or password!\"); } }); } private void createSignupButton() { signupBtn = new JButton(\"Sign up\"); signupBtn.setBounds(225, 200, 100, 25); signupBtn.setFocusable(false); signupBtn.setCursor(new Cursor(Cursor.HAND_CURSOR)); signupBtn.addActionListener(e -> new SignUp()); } }","dependencies":[{"file_path":"Note-app-main/Note-app-main/src/app/FileManager.java","file_content":"package app; import java.io.BufferedReader; import java.io.FileReader; import java.io.FileWriter; import java.io.IOException; import java.nio.file.DirectoryStream; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.util.HashSet; import java.util.Set; public class FileManager { private FileReader fileReader; private BufferedReader bufferedReader; public void createFolder(String path) { try { Files.createDirectories(Paths.get(path)); } catch (IOException ignored) { } } public void addUser(User user) { try { createFolder(\"users_note/\" + user.getName()); FileWriter fileWriter = new FileWriter(\"users.txt\", true); fileWriter.write(user.getName() + \"|\" + user.getPassword() + \"\\n\"); fileWriter.close(); } catch (Exception ignored) { } } public boolean isUserExist(User user) { boolean matched = false; String name = user.getName(); String pass = user.getPassword(); try { fileReader = new FileReader(\"users.txt\"); bufferedReader = new BufferedReader(fileReader); String line; while ((line = bufferedReader.readLine()) != null) { if (line.equals(name + \"|\" + pass)) { matched = true; break; } } fileReader.close(); } catch (Exception ignored) { } return matched; } public String getContentFile(String path) { String content = \"\"; try { fileReader = new FileReader(path); bufferedReader = new BufferedReader(fileReader); String line; while ((line = bufferedReader.readLine()) != null) { content = content.concat(line).concat(\"\\n\"); } fileReader.close(); } catch (Exception ignored) { } return content; } public Set<String> listFilesImagesAndSketches(String directoryPath) { Set<String> fileSet = new HashSet<>(); try { DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(directoryPath)); for (Path path : stream) { if (!Files.isDirectory(path) && !path.getFileName().toString().equals(\"note.txt\")) { fileSet.add(path.getFileName().toString()); } } stream.close(); } catch (IOException ignored) { } return fileSet; } public Set<String> listDirectory(String directoryPath) { Set<String> fileSet = new HashSet<>(); try { DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(directoryPath)); for (Path path : stream) { if (Files.isDirectory(path) && !path.getFileName().toString().equals(\"note.txt\")) { fileSet.add(path.getFileName().toString()); } } stream.close(); } catch (IOException ignored) { } return fileSet; } }"},{"file_path":"Note-app-main/Note-app-main/src/app/SignUp.java","file_content":"package app; import javax.swing.*; import java.awt.*; public class SignUp { JFrame signupFrame; JLabel nameLabel, passLabel; JTextField nameF, passF; JButton submitBtn; public SignUp() { createLabels(); createFields(); createSubmitButton(); createSignupFrame(); } private void createSignupFrame() { signupFrame = new JFrame(\"Login\"); signupFrame.setLocation(400, 200); signupFrame.setSize(420, 300); signupFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); signupFrame.setLayout(null); signupFrame.getContentPane().setBackground(new Color(154, 234, 223)); signupFrame.add(nameF); signupFrame.add(passF); signupFrame.add(nameLabel); signupFrame.add(passLabel); signupFrame.add(submitBtn); signupFrame.setVisible(true); } private void createFields() { nameF = new JTextField(); passF = new JPasswordField(); nameF.setBounds(125, 50, 200, 25); passF.setBounds(125, 100, 200, 25); } private void createLabels() { nameLabel = new JLabel(\"Username:\"); passLabel = new JLabel(\"Password:\"); nameLabel.setBounds(50, 50, 75, 25); passLabel.setBounds(50, 100, 75, 25); } private void createSubmitButton() { submitBtn = new JButton(\"Submit\"); submitBtn.setBounds(125, 150, 100, 25); submitBtn.setFocusable(false); submitBtn.setCursor(new Cursor(Cursor.HAND_CURSOR)); submitBtn.addActionListener(e -> { User user = new User(nameF.getText(), passF.getText()); FileManager fileManager = new FileManager(); fileManager.addUser(user); JOptionPane.showMessageDialog(null, \"Registration Completed.\"); signupFrame.dispose(); }); } }"},{"file_path":"Note-app-main/Note-app-main/src/app/User.java","file_content":"package app; public class User { private final String name; private final String password; public User(String name, String password) { this.name = name; this.password = password; } public String getName() { return name; } public String getPassword() { return password; } }"},{"file_path":"Note-app-main/Note-app-main/src/app/WelcomePage.java","file_content":"package app; import javax.swing.*; import java.awt.*; import java.util.Set; public class WelcomePage { private JFrame frame; private JLabel welcomeLabel; private JButton createBtn, editBtn, exitBtn, showTitlesBtn; private FileManager fileManager; public WelcomePage(String name) { createWelcomeLabel(name); createShowTitlesBtn(name); createCreateBtn(name); createEditBtn(name); createExitBtn(); createFrame(); } private void createFrame() { frame = new JFrame(); frame.setSize(400, 400); frame.setLocation(400, 200); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setLayout(null); frame.getContentPane().setBackground(new Color(0xFF9800)); frame.add(exitBtn); frame.add(createBtn); frame.add(editBtn); frame.add(showTitlesBtn); frame.add(welcomeLabel); frame.setVisible(true); } private void createWelcomeLabel(String name) { welcomeLabel = new JLabel(); welcomeLabel.setText(\"Welcome \" + name); welcomeLabel.setFont(new Font(\"Georgia\", Font.BOLD, 20)); welcomeLabel.setBounds(90, 60, 350, 50); } private void createShowTitlesBtn(String name) { showTitlesBtn = new JButton(\"Show notes Title\"); showTitlesBtn.setFocusable(false); showTitlesBtn.setBounds(45, 200, 300, 25); showTitlesBtn.setFont(new Font(\"Georgia\", Font.ITALIC, 15)); showTitlesBtn.addActionListener(e -> { fileManager = new FileManager(); Set<String> titleList = fileManager.listDirectory(\"users_note/\" + name); String dirs = \"\"; for (String dirName : titleList) { dirs = dirs.concat(dirName).concat(\"\\n\"); } if (dirs.isEmpty()) { JOptionPane.showMessageDialog(null, \"You don't have any notes yet!\"); } else { JOptionPane.showMessageDialog(null, dirs); } }); } private void createCreateBtn(String name) { createBtn = new JButton(\"Create note\"); createBtn.setFocusable(false); createBtn.setBounds(40, 250, 150, 50); createBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 20)); createBtn.addActionListener(e -> { String title = JOptionPane.showInputDialog(null, \"Enter the title for note:\"); FileManager fileManager = new FileManager(); fileManager.createFolder(\"users_note/\" + name + \"/\" + title); frame.dispose(); new CreateNote(name, title); }); } private void createEditBtn(String name) { editBtn = new JButton(\"Edit note\"); editBtn.setFocusable(false); editBtn.setBounds(200, 250, 150, 50); editBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 20)); editBtn.addActionListener(e -> { String title = JOptionPane.showInputDialog(null, \"Enter the title for note:\"); frame.dispose(); new EditNote(name, title); }); } private void createExitBtn() { exitBtn = new JButton(\"Exit\"); exitBtn.setFocusable(false); exitBtn.setBounds(120, 310, 160, 30); exitBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 25)); exitBtn.addActionListener(e -> frame.dispose()); } }"}]}}
{"project_id":231,"chunk_id":0,"content":{"main_file_path":"Note-app-main/src/app/CreateNote.java","main_file_content":"package app; import javax.swing.*; import java.awt.*; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.util.Set; public class CreateNote { JFrame frame; JLabel label; JTextArea textArea; JButton addImageBtn, addSketchBtn, showImagesAndSketchBtn, saveBtn, exitBtn; public CreateNote(String name, String title) { createLabel(); createTextArea(); JScrollPane scrollPane = new JScrollPane(textArea, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED); scrollPane.setBorder(BorderFactory.createEmptyBorder()); scrollPane.setBounds(20, 50, 350, 300); createShowImagesAndSketchBtn(name, title); createAddImageBtn(name, title); createAddSketchBtn(name, title); createSaveBtn(name, title); createExitBtn(); createFrame(scrollPane); } private void createFrame(JScrollPane scrollPane) { frame = new JFrame(); frame.setSize(400, 600); frame.setLocation(400, 100); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setLayout(null); frame.getContentPane().setBackground(new Color(0xFF9800)); frame.add(exitBtn); frame.add(showImagesAndSketchBtn); frame.add(saveBtn); frame.add(addImageBtn); frame.add(addSketchBtn); frame.add(label); frame.add(scrollPane); frame.setVisible(true); } private void createLabel() { label = new JLabel(\"Text note:\"); label.setBounds(20, 20, 200, 30); label.setFont(new Font(\"Georgia\", Font.BOLD, 20)); } private void createTextArea() { textArea = new JTextArea(); textArea.setFont(new Font(\"Georgia\", Font.BOLD, 20)); textArea.setForeground(new Color(0x191D88)); textArea.setCaretColor(Color.red); } private void createShowImagesAndSketchBtn(String name, String title) { showImagesAndSketchBtn = new JButton(\"Show images and sketches\"); showImagesAndSketchBtn.setFocusable(false); showImagesAndSketchBtn.setBounds(45, 365, 300, 20); showImagesAndSketchBtn.setFont(new Font(\"Georgia\", Font.ITALIC, 15)); showImagesAndSketchBtn.addActionListener(e -> { String show = \"\"; FileManager fileManager = new FileManager(); Set<String> imageAndSketchFileNameList = fileManager.listFilesImagesAndSketches(\"users_note/\" + name + \"/\" + title); for (String fileName : imageAndSketchFileNameList) { show = show.concat(fileName).concat(\"\\n\"); } JOptionPane.showMessageDialog(null, show); }); } private void createAddImageBtn(String name, String title) { addImageBtn = new JButton(\"Add image\"); addImageBtn.setFocusable(false); addImageBtn.setBounds(40, 400, 150, 50); addImageBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 20)); addImageBtn.addActionListener(e -> { JFileChooser fileChooser = new JFileChooser(); fileChooser.setCurrentDirectory(new File(\".\")); int num = fileChooser.showOpenDialog(null); if (num == JFileChooser.APPROVE_OPTION) { String sourceImagePath = fileChooser.getSelectedFile().getAbsolutePath(); String destinationFolderPath = \"users_note/\" + name + \"/\" + title; try { Path sourcePath = Paths.get(sourceImagePath); Path destinationPath = Paths.get(destinationFolderPath, sourcePath.getFileName().toString()); Files.copy(sourcePath, destinationPath); } catch (IOException ignored) { } } }); } private void createAddSketchBtn(String name, String title) { addSketchBtn = new JButton(\"Add Sketch\"); addSketchBtn.setFocusable(false); addSketchBtn.setBounds(200, 400, 150, 50); addSketchBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 20)); addSketchBtn.addActionListener(e -> { JFileChooser fileChooser = new JFileChooser(); fileChooser.setCurrentDirectory(new File(\".\")); int num = fileChooser.showOpenDialog(null); if (num == JFileChooser.APPROVE_OPTION) { String sourceSketchPath = fileChooser.getSelectedFile().getAbsolutePath(); String destinationFolderPath = \"users_note/\" + name + \"/\" + title; try { Path sourcePath = Paths.get(sourceSketchPath); Path destinationPath = Paths.get(destinationFolderPath, sourcePath.getFileName().toString()); Files.copy(sourcePath, destinationPath); } catch (IOException ignored) { } } }); } private void createSaveBtn(String name, String title) { saveBtn = new JButton(\"Save\"); saveBtn.setFocusable(false); saveBtn.setBounds(100, 460, 200, 40); saveBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 25)); saveBtn.addActionListener(e -> { try { FileWriter fileWriter = new FileWriter(\"users_note/\" + name + \"/\" + title + \"/\" + \"note.txt\", true); fileWriter.write(textArea.getText()); fileWriter.close(); } catch (Exception ignored) { } frame.dispose(); new WelcomePage(name); }); } private void createExitBtn() { exitBtn = new JButton(\"Exit\"); exitBtn.setFocusable(false); exitBtn.setBounds(120, 510, 160, 30); exitBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 25)); exitBtn.addActionListener(e -> frame.dispose()); } }","dependencies":[{"file_path":"Note-app-main/Note-app-main/src/app/FileManager.java","file_content":"package app; import java.io.BufferedReader; import java.io.FileReader; import java.io.FileWriter; import java.io.IOException; import java.nio.file.DirectoryStream; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.util.HashSet; import java.util.Set; public class FileManager { private FileReader fileReader; private BufferedReader bufferedReader; public void createFolder(String path) { try { Files.createDirectories(Paths.get(path)); } catch (IOException ignored) { } } public void addUser(User user) { try { createFolder(\"users_note/\" + user.getName()); FileWriter fileWriter = new FileWriter(\"users.txt\", true); fileWriter.write(user.getName() + \"|\" + user.getPassword() + \"\\n\"); fileWriter.close(); } catch (Exception ignored) { } } public boolean isUserExist(User user) { boolean matched = false; String name = user.getName(); String pass = user.getPassword(); try { fileReader = new FileReader(\"users.txt\"); bufferedReader = new BufferedReader(fileReader); String line; while ((line = bufferedReader.readLine()) != null) { if (line.equals(name + \"|\" + pass)) { matched = true; break; } } fileReader.close(); } catch (Exception ignored) { } return matched; } public String getContentFile(String path) { String content = \"\"; try { fileReader = new FileReader(path); bufferedReader = new BufferedReader(fileReader); String line; while ((line = bufferedReader.readLine()) != null) { content = content.concat(line).concat(\"\\n\"); } fileReader.close(); } catch (Exception ignored) { } return content; } public Set<String> listFilesImagesAndSketches(String directoryPath) { Set<String> fileSet = new HashSet<>(); try { DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(directoryPath)); for (Path path : stream) { if (!Files.isDirectory(path) && !path.getFileName().toString().equals(\"note.txt\")) { fileSet.add(path.getFileName().toString()); } } stream.close(); } catch (IOException ignored) { } return fileSet; } public Set<String> listDirectory(String directoryPath) { Set<String> fileSet = new HashSet<>(); try { DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(directoryPath)); for (Path path : stream) { if (Files.isDirectory(path) && !path.getFileName().toString().equals(\"note.txt\")) { fileSet.add(path.getFileName().toString()); } } stream.close(); } catch (IOException ignored) { } return fileSet; } }"},{"file_path":"Note-app-main/Note-app-main/src/app/WelcomePage.java","file_content":"package app; import javax.swing.*; import java.awt.*; import java.util.Set; public class WelcomePage { private JFrame frame; private JLabel welcomeLabel; private JButton createBtn, editBtn, exitBtn, showTitlesBtn; private FileManager fileManager; public WelcomePage(String name) { createWelcomeLabel(name); createShowTitlesBtn(name); createCreateBtn(name); createEditBtn(name); createExitBtn(); createFrame(); } private void createFrame() { frame = new JFrame(); frame.setSize(400, 400); frame.setLocation(400, 200); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setLayout(null); frame.getContentPane().setBackground(new Color(0xFF9800)); frame.add(exitBtn); frame.add(createBtn); frame.add(editBtn); frame.add(showTitlesBtn); frame.add(welcomeLabel); frame.setVisible(true); } private void createWelcomeLabel(String name) { welcomeLabel = new JLabel(); welcomeLabel.setText(\"Welcome \" + name); welcomeLabel.setFont(new Font(\"Georgia\", Font.BOLD, 20)); welcomeLabel.setBounds(90, 60, 350, 50); } private void createShowTitlesBtn(String name) { showTitlesBtn = new JButton(\"Show notes Title\"); showTitlesBtn.setFocusable(false); showTitlesBtn.setBounds(45, 200, 300, 25); showTitlesBtn.setFont(new Font(\"Georgia\", Font.ITALIC, 15)); showTitlesBtn.addActionListener(e -> { fileManager = new FileManager(); Set<String> titleList = fileManager.listDirectory(\"users_note/\" + name); String dirs = \"\"; for (String dirName : titleList) { dirs = dirs.concat(dirName).concat(\"\\n\"); } if (dirs.isEmpty()) { JOptionPane.showMessageDialog(null, \"You don't have any notes yet!\"); } else { JOptionPane.showMessageDialog(null, dirs); } }); } private void createCreateBtn(String name) { createBtn = new JButton(\"Create note\"); createBtn.setFocusable(false); createBtn.setBounds(40, 250, 150, 50); createBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 20)); createBtn.addActionListener(e -> { String title = JOptionPane.showInputDialog(null, \"Enter the title for note:\"); FileManager fileManager = new FileManager(); fileManager.createFolder(\"users_note/\" + name + \"/\" + title); frame.dispose(); new CreateNote(name, title); }); } private void createEditBtn(String name) { editBtn = new JButton(\"Edit note\"); editBtn.setFocusable(false); editBtn.setBounds(200, 250, 150, 50); editBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 20)); editBtn.addActionListener(e -> { String title = JOptionPane.showInputDialog(null, \"Enter the title for note:\"); frame.dispose(); new EditNote(name, title); }); } private void createExitBtn() { exitBtn = new JButton(\"Exit\"); exitBtn.setFocusable(false); exitBtn.setBounds(120, 310, 160, 30); exitBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 25)); exitBtn.addActionListener(e -> frame.dispose()); } }"}]}}
{"project_id":231,"chunk_id":0,"content":{"main_file_path":"Note-app-main/src/app/EditNote.java","main_file_content":"package app; import javax.swing.*; import java.awt.*; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.util.Set; public class EditNote { JFrame frame; JLabel label; JTextArea textArea; JButton addImageBtn, addSketchBtn, showImagesAndSketchBtn, saveBtn, exitBtn; FileManager fileManager; public EditNote(String name, String title) { createLabel(); createTextArea(name, title); JScrollPane scrollPane = new JScrollPane(textArea, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED); scrollPane.setBorder(BorderFactory.createEmptyBorder()); scrollPane.setBounds(20, 50, 350, 300); createAddImageBtn(name, title); createAddSketchBtn(name, title); createShowImagesAndSketchBtn(name, title); createSaveBtn(name, title); createExitBtn(); createFrame(scrollPane); } private void createFrame(JScrollPane scrollPane) { frame = new JFrame(); frame.setSize(400, 600); frame.setLocation(400, 100); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setLayout(null); frame.getContentPane().setBackground(new Color(0xFF9800)); frame.add(exitBtn); frame.add(showImagesAndSketchBtn); frame.add(saveBtn); frame.add(addImageBtn); frame.add(addSketchBtn); frame.add(label); frame.add(scrollPane); frame.setVisible(true); } private void createLabel() { label = new JLabel(\"Text note:\"); label.setBounds(20, 20, 200, 30); label.setFont(new Font(\"Georgia\", Font.BOLD, 20)); } private void createTextArea(String name, String title) { textArea = new JTextArea(); textArea.setFont(new Font(\"Georgia\", Font.BOLD, 20)); textArea.setForeground(new Color(0x191D88)); textArea.setCaretColor(Color.red); fileManager = new FileManager(); String content = fileManager.getContentFile(\"users_note/\" + name + \"/\" + title + \"/\" + \"note.txt\"); textArea.setText(content); } private void createAddImageBtn(String name, String title) { addImageBtn = new JButton(\"Add image\"); addImageBtn.setFocusable(false); addImageBtn.setBounds(40, 400, 150, 50); addImageBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 20)); addImageBtn.addActionListener(e -> { JFileChooser fileChooser = new JFileChooser(); fileChooser.setCurrentDirectory(new File(\".\")); int num = fileChooser.showOpenDialog(null); if (num == JFileChooser.APPROVE_OPTION) { String sourceImagePath = fileChooser.getSelectedFile().getAbsolutePath(); String destinationFolderPath = \"users_note/\" + name + \"/\" + title; try { Path sourcePath = Paths.get(sourceImagePath); Path destinationPath = Paths.get(destinationFolderPath, sourcePath.getFileName().toString()); Files.copy(sourcePath, destinationPath); } catch (IOException ignored) { } } }); } private void createAddSketchBtn(String name, String title) { addSketchBtn = new JButton(\"Add Sketch\"); addSketchBtn.setFocusable(false); addSketchBtn.setBounds(200, 400, 150, 50); addSketchBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 20)); addSketchBtn.addActionListener(e -> { JFileChooser fileChooser = new JFileChooser(); fileChooser.setCurrentDirectory(new File(\".\")); int num = fileChooser.showOpenDialog(null); if (num == JFileChooser.APPROVE_OPTION) { String sourceSketchPath = fileChooser.getSelectedFile().getAbsolutePath(); String destinationFolderPath = \"users_note/\" + name + \"/\" + title; try { Path sourcePath = Paths.get(sourceSketchPath); Path destinationPath = Paths.get(destinationFolderPath, sourcePath.getFileName().toString()); Files.copy(sourcePath, destinationPath); } catch (IOException ignored) { } } }); } private void createShowImagesAndSketchBtn(String name, String title) { showImagesAndSketchBtn = new JButton(\"Show images and sketches\"); showImagesAndSketchBtn.setFocusable(false); showImagesAndSketchBtn.setBounds(45, 365, 300, 20); showImagesAndSketchBtn.setFont(new Font(\"Georgia\", Font.ITALIC, 15)); showImagesAndSketchBtn.addActionListener(e -> { String show = \"\"; Set<String> imageAndSketchFileNameList = fileManager.listFilesImagesAndSketches(\"users_note/\" + name + \"/\" + title); for (String fileName : imageAndSketchFileNameList) { show = show.concat(fileName).concat(\"\\n\"); } JOptionPane.showMessageDialog(null, show); }); } private void createSaveBtn(String name, String title) { saveBtn = new JButton(\"Save\"); saveBtn.setFocusable(false); saveBtn.setBounds(100, 460, 200, 40); saveBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 25)); saveBtn.addActionListener(e -> { try { FileWriter fileWriter = new FileWriter(\"users_note/\" + name + \"/\" + title, true); fileWriter.write(textArea.getText()); fileWriter.close(); } catch (Exception ignored) { } frame.dispose(); new WelcomePage(name); }); } private void createExitBtn() { exitBtn = new JButton(\"Exit\"); exitBtn.setFocusable(false); exitBtn.setBounds(120, 510, 160, 30); exitBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 25)); exitBtn.addActionListener(e -> frame.dispose()); } }","dependencies":[{"file_path":"Note-app-main/Note-app-main/src/app/FileManager.java","file_content":"package app; import java.io.BufferedReader; import java.io.FileReader; import java.io.FileWriter; import java.io.IOException; import java.nio.file.DirectoryStream; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.util.HashSet; import java.util.Set; public class FileManager { private FileReader fileReader; private BufferedReader bufferedReader; public void createFolder(String path) { try { Files.createDirectories(Paths.get(path)); } catch (IOException ignored) { } } public void addUser(User user) { try { createFolder(\"users_note/\" + user.getName()); FileWriter fileWriter = new FileWriter(\"users.txt\", true); fileWriter.write(user.getName() + \"|\" + user.getPassword() + \"\\n\"); fileWriter.close(); } catch (Exception ignored) { } } public boolean isUserExist(User user) { boolean matched = false; String name = user.getName(); String pass = user.getPassword(); try { fileReader = new FileReader(\"users.txt\"); bufferedReader = new BufferedReader(fileReader); String line; while ((line = bufferedReader.readLine()) != null) { if (line.equals(name + \"|\" + pass)) { matched = true; break; } } fileReader.close(); } catch (Exception ignored) { } return matched; } public String getContentFile(String path) { String content = \"\"; try { fileReader = new FileReader(path); bufferedReader = new BufferedReader(fileReader); String line; while ((line = bufferedReader.readLine()) != null) { content = content.concat(line).concat(\"\\n\"); } fileReader.close(); } catch (Exception ignored) { } return content; } public Set<String> listFilesImagesAndSketches(String directoryPath) { Set<String> fileSet = new HashSet<>(); try { DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(directoryPath)); for (Path path : stream) { if (!Files.isDirectory(path) && !path.getFileName().toString().equals(\"note.txt\")) { fileSet.add(path.getFileName().toString()); } } stream.close(); } catch (IOException ignored) { } return fileSet; } public Set<String> listDirectory(String directoryPath) { Set<String> fileSet = new HashSet<>(); try { DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(directoryPath)); for (Path path : stream) { if (Files.isDirectory(path) && !path.getFileName().toString().equals(\"note.txt\")) { fileSet.add(path.getFileName().toString()); } } stream.close(); } catch (IOException ignored) { } return fileSet; } }"},{"file_path":"Note-app-main/Note-app-main/src/app/WelcomePage.java","file_content":"package app; import javax.swing.*; import java.awt.*; import java.util.Set; public class WelcomePage { private JFrame frame; private JLabel welcomeLabel; private JButton createBtn, editBtn, exitBtn, showTitlesBtn; private FileManager fileManager; public WelcomePage(String name) { createWelcomeLabel(name); createShowTitlesBtn(name); createCreateBtn(name); createEditBtn(name); createExitBtn(); createFrame(); } private void createFrame() { frame = new JFrame(); frame.setSize(400, 400); frame.setLocation(400, 200); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setLayout(null); frame.getContentPane().setBackground(new Color(0xFF9800)); frame.add(exitBtn); frame.add(createBtn); frame.add(editBtn); frame.add(showTitlesBtn); frame.add(welcomeLabel); frame.setVisible(true); } private void createWelcomeLabel(String name) { welcomeLabel = new JLabel(); welcomeLabel.setText(\"Welcome \" + name); welcomeLabel.setFont(new Font(\"Georgia\", Font.BOLD, 20)); welcomeLabel.setBounds(90, 60, 350, 50); } private void createShowTitlesBtn(String name) { showTitlesBtn = new JButton(\"Show notes Title\"); showTitlesBtn.setFocusable(false); showTitlesBtn.setBounds(45, 200, 300, 25); showTitlesBtn.setFont(new Font(\"Georgia\", Font.ITALIC, 15)); showTitlesBtn.addActionListener(e -> { fileManager = new FileManager(); Set<String> titleList = fileManager.listDirectory(\"users_note/\" + name); String dirs = \"\"; for (String dirName : titleList) { dirs = dirs.concat(dirName).concat(\"\\n\"); } if (dirs.isEmpty()) { JOptionPane.showMessageDialog(null, \"You don't have any notes yet!\"); } else { JOptionPane.showMessageDialog(null, dirs); } }); } private void createCreateBtn(String name) { createBtn = new JButton(\"Create note\"); createBtn.setFocusable(false); createBtn.setBounds(40, 250, 150, 50); createBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 20)); createBtn.addActionListener(e -> { String title = JOptionPane.showInputDialog(null, \"Enter the title for note:\"); FileManager fileManager = new FileManager(); fileManager.createFolder(\"users_note/\" + name + \"/\" + title); frame.dispose(); new CreateNote(name, title); }); } private void createEditBtn(String name) { editBtn = new JButton(\"Edit note\"); editBtn.setFocusable(false); editBtn.setBounds(200, 250, 150, 50); editBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 20)); editBtn.addActionListener(e -> { String title = JOptionPane.showInputDialog(null, \"Enter the title for note:\"); frame.dispose(); new EditNote(name, title); }); } private void createExitBtn() { exitBtn = new JButton(\"Exit\"); exitBtn.setFocusable(false); exitBtn.setBounds(120, 310, 160, 30); exitBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 25)); exitBtn.addActionListener(e -> frame.dispose()); } }"}]}}
{"project_id":231,"chunk_id":0,"content":{"main_file_path":"Note-app-main/src/app/FileManager.java","main_file_content":"package app; import java.io.BufferedReader; import java.io.FileReader; import java.io.FileWriter; import java.io.IOException; import java.nio.file.DirectoryStream; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.util.HashSet; import java.util.Set; public class FileManager { private FileReader fileReader; private BufferedReader bufferedReader; public void createFolder(String path) { try { Files.createDirectories(Paths.get(path)); } catch (IOException ignored) { } } public void addUser(User user) { try { createFolder(\"users_note/\" + user.getName()); FileWriter fileWriter = new FileWriter(\"users.txt\", true); fileWriter.write(user.getName() + \"|\" + user.getPassword() + \"\\n\"); fileWriter.close(); } catch (Exception ignored) { } } public boolean isUserExist(User user) { boolean matched = false; String name = user.getName(); String pass = user.getPassword(); try { fileReader = new FileReader(\"users.txt\"); bufferedReader = new BufferedReader(fileReader); String line; while ((line = bufferedReader.readLine()) != null) { if (line.equals(name + \"|\" + pass)) { matched = true; break; } } fileReader.close(); } catch (Exception ignored) { } return matched; } public String getContentFile(String path) { String content = \"\"; try { fileReader = new FileReader(path); bufferedReader = new BufferedReader(fileReader); String line; while ((line = bufferedReader.readLine()) != null) { content = content.concat(line).concat(\"\\n\"); } fileReader.close(); } catch (Exception ignored) { } return content; } public Set<String> listFilesImagesAndSketches(String directoryPath) { Set<String> fileSet = new HashSet<>(); try { DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(directoryPath)); for (Path path : stream) { if (!Files.isDirectory(path) && !path.getFileName().toString().equals(\"note.txt\")) { fileSet.add(path.getFileName().toString()); } } stream.close(); } catch (IOException ignored) { } return fileSet; } public Set<String> listDirectory(String directoryPath) { Set<String> fileSet = new HashSet<>(); try { DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(directoryPath)); for (Path path : stream) { if (Files.isDirectory(path) && !path.getFileName().toString().equals(\"note.txt\")) { fileSet.add(path.getFileName().toString()); } } stream.close(); } catch (IOException ignored) { } return fileSet; } }","dependencies":[{"file_path":"Note-app-main/Note-app-main/src/app/User.java","file_content":"package app; public class User { private final String name; private final String password; public User(String name, String password) { this.name = name; this.password = password; } public String getName() { return name; } public String getPassword() { return password; } }"}]}}
{"project_id":231,"chunk_id":0,"content":{"main_file_path":"Note-app-main/src/app/SignUp.java","main_file_content":"package app; import javax.swing.*; import java.awt.*; public class SignUp { JFrame signupFrame; JLabel nameLabel, passLabel; JTextField nameF, passF; JButton submitBtn; public SignUp() { createLabels(); createFields(); createSubmitButton(); createSignupFrame(); } private void createSignupFrame() { signupFrame = new JFrame(\"Login\"); signupFrame.setLocation(400, 200); signupFrame.setSize(420, 300); signupFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); signupFrame.setLayout(null); signupFrame.getContentPane().setBackground(new Color(154, 234, 223)); signupFrame.add(nameF); signupFrame.add(passF); signupFrame.add(nameLabel); signupFrame.add(passLabel); signupFrame.add(submitBtn); signupFrame.setVisible(true); } private void createFields() { nameF = new JTextField(); passF = new JPasswordField(); nameF.setBounds(125, 50, 200, 25); passF.setBounds(125, 100, 200, 25); } private void createLabels() { nameLabel = new JLabel(\"Username:\"); passLabel = new JLabel(\"Password:\"); nameLabel.setBounds(50, 50, 75, 25); passLabel.setBounds(50, 100, 75, 25); } private void createSubmitButton() { submitBtn = new JButton(\"Submit\"); submitBtn.setBounds(125, 150, 100, 25); submitBtn.setFocusable(false); submitBtn.setCursor(new Cursor(Cursor.HAND_CURSOR)); submitBtn.addActionListener(e -> { User user = new User(nameF.getText(), passF.getText()); FileManager fileManager = new FileManager(); fileManager.addUser(user); JOptionPane.showMessageDialog(null, \"Registration Completed.\"); signupFrame.dispose(); }); } }","dependencies":[{"file_path":"Note-app-main/Note-app-main/src/app/FileManager.java","file_content":"package app; import java.io.BufferedReader; import java.io.FileReader; import java.io.FileWriter; import java.io.IOException; import java.nio.file.DirectoryStream; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.util.HashSet; import java.util.Set; public class FileManager { private FileReader fileReader; private BufferedReader bufferedReader; public void createFolder(String path) { try { Files.createDirectories(Paths.get(path)); } catch (IOException ignored) { } } public void addUser(User user) { try { createFolder(\"users_note/\" + user.getName()); FileWriter fileWriter = new FileWriter(\"users.txt\", true); fileWriter.write(user.getName() + \"|\" + user.getPassword() + \"\\n\"); fileWriter.close(); } catch (Exception ignored) { } } public boolean isUserExist(User user) { boolean matched = false; String name = user.getName(); String pass = user.getPassword(); try { fileReader = new FileReader(\"users.txt\"); bufferedReader = new BufferedReader(fileReader); String line; while ((line = bufferedReader.readLine()) != null) { if (line.equals(name + \"|\" + pass)) { matched = true; break; } } fileReader.close(); } catch (Exception ignored) { } return matched; } public String getContentFile(String path) { String content = \"\"; try { fileReader = new FileReader(path); bufferedReader = new BufferedReader(fileReader); String line; while ((line = bufferedReader.readLine()) != null) { content = content.concat(line).concat(\"\\n\"); } fileReader.close(); } catch (Exception ignored) { } return content; } public Set<String> listFilesImagesAndSketches(String directoryPath) { Set<String> fileSet = new HashSet<>(); try { DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(directoryPath)); for (Path path : stream) { if (!Files.isDirectory(path) && !path.getFileName().toString().equals(\"note.txt\")) { fileSet.add(path.getFileName().toString()); } } stream.close(); } catch (IOException ignored) { } return fileSet; } public Set<String> listDirectory(String directoryPath) { Set<String> fileSet = new HashSet<>(); try { DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(directoryPath)); for (Path path : stream) { if (Files.isDirectory(path) && !path.getFileName().toString().equals(\"note.txt\")) { fileSet.add(path.getFileName().toString()); } } stream.close(); } catch (IOException ignored) { } return fileSet; } }"},{"file_path":"Note-app-main/Note-app-main/src/app/User.java","file_content":"package app; public class User { private final String name; private final String password; public User(String name, String password) { this.name = name; this.password = password; } public String getName() { return name; } public String getPassword() { return password; } }"}]}}
{"project_id":231,"chunk_id":0,"content":{"main_file_path":"Note-app-main/src/app/WelcomePage.java","main_file_content":"package app; import javax.swing.*; import java.awt.*; import java.util.Set; public class WelcomePage { private JFrame frame; private JLabel welcomeLabel; private JButton createBtn, editBtn, exitBtn, showTitlesBtn; private FileManager fileManager; public WelcomePage(String name) { createWelcomeLabel(name); createShowTitlesBtn(name); createCreateBtn(name); createEditBtn(name); createExitBtn(); createFrame(); } private void createFrame() { frame = new JFrame(); frame.setSize(400, 400); frame.setLocation(400, 200); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setLayout(null); frame.getContentPane().setBackground(new Color(0xFF9800)); frame.add(exitBtn); frame.add(createBtn); frame.add(editBtn); frame.add(showTitlesBtn); frame.add(welcomeLabel); frame.setVisible(true); } private void createWelcomeLabel(String name) { welcomeLabel = new JLabel(); welcomeLabel.setText(\"Welcome \" + name); welcomeLabel.setFont(new Font(\"Georgia\", Font.BOLD, 20)); welcomeLabel.setBounds(90, 60, 350, 50); } private void createShowTitlesBtn(String name) { showTitlesBtn = new JButton(\"Show notes Title\"); showTitlesBtn.setFocusable(false); showTitlesBtn.setBounds(45, 200, 300, 25); showTitlesBtn.setFont(new Font(\"Georgia\", Font.ITALIC, 15)); showTitlesBtn.addActionListener(e -> { fileManager = new FileManager(); Set<String> titleList = fileManager.listDirectory(\"users_note/\" + name); String dirs = \"\"; for (String dirName : titleList) { dirs = dirs.concat(dirName).concat(\"\\n\"); } if (dirs.isEmpty()) { JOptionPane.showMessageDialog(null, \"You don't have any notes yet!\"); } else { JOptionPane.showMessageDialog(null, dirs); } }); } private void createCreateBtn(String name) { createBtn = new JButton(\"Create note\"); createBtn.setFocusable(false); createBtn.setBounds(40, 250, 150, 50); createBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 20)); createBtn.addActionListener(e -> { String title = JOptionPane.showInputDialog(null, \"Enter the title for note:\"); FileManager fileManager = new FileManager(); fileManager.createFolder(\"users_note/\" + name + \"/\" + title); frame.dispose(); new CreateNote(name, title); }); } private void createEditBtn(String name) { editBtn = new JButton(\"Edit note\"); editBtn.setFocusable(false); editBtn.setBounds(200, 250, 150, 50); editBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 20)); editBtn.addActionListener(e -> { String title = JOptionPane.showInputDialog(null, \"Enter the title for note:\"); frame.dispose(); new EditNote(name, title); }); } private void createExitBtn() { exitBtn = new JButton(\"Exit\"); exitBtn.setFocusable(false); exitBtn.setBounds(120, 310, 160, 30); exitBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 25)); exitBtn.addActionListener(e -> frame.dispose()); } }","dependencies":[{"file_path":"Note-app-main/Note-app-main/src/app/CreateNote.java","file_content":"package app; import javax.swing.*; import java.awt.*; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.util.Set; public class CreateNote { JFrame frame; JLabel label; JTextArea textArea; JButton addImageBtn, addSketchBtn, showImagesAndSketchBtn, saveBtn, exitBtn; public CreateNote(String name, String title) { createLabel(); createTextArea(); JScrollPane scrollPane = new JScrollPane(textArea, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED); scrollPane.setBorder(BorderFactory.createEmptyBorder()); scrollPane.setBounds(20, 50, 350, 300); createShowImagesAndSketchBtn(name, title); createAddImageBtn(name, title); createAddSketchBtn(name, title); createSaveBtn(name, title); createExitBtn(); createFrame(scrollPane); } private void createFrame(JScrollPane scrollPane) { frame = new JFrame(); frame.setSize(400, 600); frame.setLocation(400, 100); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setLayout(null); frame.getContentPane().setBackground(new Color(0xFF9800)); frame.add(exitBtn); frame.add(showImagesAndSketchBtn); frame.add(saveBtn); frame.add(addImageBtn); frame.add(addSketchBtn); frame.add(label); frame.add(scrollPane); frame.setVisible(true); } private void createLabel() { label = new JLabel(\"Text note:\"); label.setBounds(20, 20, 200, 30); label.setFont(new Font(\"Georgia\", Font.BOLD, 20)); } private void createTextArea() { textArea = new JTextArea(); textArea.setFont(new Font(\"Georgia\", Font.BOLD, 20)); textArea.setForeground(new Color(0x191D88)); textArea.setCaretColor(Color.red); } private void createShowImagesAndSketchBtn(String name, String title) { showImagesAndSketchBtn = new JButton(\"Show images and sketches\"); showImagesAndSketchBtn.setFocusable(false); showImagesAndSketchBtn.setBounds(45, 365, 300, 20); showImagesAndSketchBtn.setFont(new Font(\"Georgia\", Font.ITALIC, 15)); showImagesAndSketchBtn.addActionListener(e -> { String show = \"\"; FileManager fileManager = new FileManager(); Set<String> imageAndSketchFileNameList = fileManager.listFilesImagesAndSketches(\"users_note/\" + name + \"/\" + title); for (String fileName : imageAndSketchFileNameList) { show = show.concat(fileName).concat(\"\\n\"); } JOptionPane.showMessageDialog(null, show); }); } private void createAddImageBtn(String name, String title) { addImageBtn = new JButton(\"Add image\"); addImageBtn.setFocusable(false); addImageBtn.setBounds(40, 400, 150, 50); addImageBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 20)); addImageBtn.addActionListener(e -> { JFileChooser fileChooser = new JFileChooser(); fileChooser.setCurrentDirectory(new File(\".\")); int num = fileChooser.showOpenDialog(null); if (num == JFileChooser.APPROVE_OPTION) { String sourceImagePath = fileChooser.getSelectedFile().getAbsolutePath(); String destinationFolderPath = \"users_note/\" + name + \"/\" + title; try { Path sourcePath = Paths.get(sourceImagePath); Path destinationPath = Paths.get(destinationFolderPath, sourcePath.getFileName().toString()); Files.copy(sourcePath, destinationPath); } catch (IOException ignored) { } } }); } private void createAddSketchBtn(String name, String title) { addSketchBtn = new JButton(\"Add Sketch\"); addSketchBtn.setFocusable(false); addSketchBtn.setBounds(200, 400, 150, 50); addSketchBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 20)); addSketchBtn.addActionListener(e -> { JFileChooser fileChooser = new JFileChooser(); fileChooser.setCurrentDirectory(new File(\".\")); int num = fileChooser.showOpenDialog(null); if (num == JFileChooser.APPROVE_OPTION) { String sourceSketchPath = fileChooser.getSelectedFile().getAbsolutePath(); String destinationFolderPath = \"users_note/\" + name + \"/\" + title; try { Path sourcePath = Paths.get(sourceSketchPath); Path destinationPath = Paths.get(destinationFolderPath, sourcePath.getFileName().toString()); Files.copy(sourcePath, destinationPath); } catch (IOException ignored) { } } }); } private void createSaveBtn(String name, String title) { saveBtn = new JButton(\"Save\"); saveBtn.setFocusable(false); saveBtn.setBounds(100, 460, 200, 40); saveBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 25)); saveBtn.addActionListener(e -> { try { FileWriter fileWriter = new FileWriter(\"users_note/\" + name + \"/\" + title + \"/\" + \"note.txt\", true); fileWriter.write(textArea.getText()); fileWriter.close(); } catch (Exception ignored) { } frame.dispose(); new WelcomePage(name); }); } private void createExitBtn() { exitBtn = new JButton(\"Exit\"); exitBtn.setFocusable(false); exitBtn.setBounds(120, 510, 160, 30); exitBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 25)); exitBtn.addActionListener(e -> frame.dispose()); } }"},{"file_path":"Note-app-main/Note-app-main/src/app/EditNote.java","file_content":"package app; import javax.swing.*; import java.awt.*; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.util.Set; public class EditNote { JFrame frame; JLabel label; JTextArea textArea; JButton addImageBtn, addSketchBtn, showImagesAndSketchBtn, saveBtn, exitBtn; FileManager fileManager; public EditNote(String name, String title) { createLabel(); createTextArea(name, title); JScrollPane scrollPane = new JScrollPane(textArea, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED); scrollPane.setBorder(BorderFactory.createEmptyBorder()); scrollPane.setBounds(20, 50, 350, 300); createAddImageBtn(name, title); createAddSketchBtn(name, title); createShowImagesAndSketchBtn(name, title); createSaveBtn(name, title); createExitBtn(); createFrame(scrollPane); } private void createFrame(JScrollPane scrollPane) { frame = new JFrame(); frame.setSize(400, 600); frame.setLocation(400, 100); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setLayout(null); frame.getContentPane().setBackground(new Color(0xFF9800)); frame.add(exitBtn); frame.add(showImagesAndSketchBtn); frame.add(saveBtn); frame.add(addImageBtn); frame.add(addSketchBtn); frame.add(label); frame.add(scrollPane); frame.setVisible(true); } private void createLabel() { label = new JLabel(\"Text note:\"); label.setBounds(20, 20, 200, 30); label.setFont(new Font(\"Georgia\", Font.BOLD, 20)); } private void createTextArea(String name, String title) { textArea = new JTextArea(); textArea.setFont(new Font(\"Georgia\", Font.BOLD, 20)); textArea.setForeground(new Color(0x191D88)); textArea.setCaretColor(Color.red); fileManager = new FileManager(); String content = fileManager.getContentFile(\"users_note/\" + name + \"/\" + title + \"/\" + \"note.txt\"); textArea.setText(content); } private void createAddImageBtn(String name, String title) { addImageBtn = new JButton(\"Add image\"); addImageBtn.setFocusable(false); addImageBtn.setBounds(40, 400, 150, 50); addImageBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 20)); addImageBtn.addActionListener(e -> { JFileChooser fileChooser = new JFileChooser(); fileChooser.setCurrentDirectory(new File(\".\")); int num = fileChooser.showOpenDialog(null); if (num == JFileChooser.APPROVE_OPTION) { String sourceImagePath = fileChooser.getSelectedFile().getAbsolutePath(); String destinationFolderPath = \"users_note/\" + name + \"/\" + title; try { Path sourcePath = Paths.get(sourceImagePath); Path destinationPath = Paths.get(destinationFolderPath, sourcePath.getFileName().toString()); Files.copy(sourcePath, destinationPath); } catch (IOException ignored) { } } }); } private void createAddSketchBtn(String name, String title) { addSketchBtn = new JButton(\"Add Sketch\"); addSketchBtn.setFocusable(false); addSketchBtn.setBounds(200, 400, 150, 50); addSketchBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 20)); addSketchBtn.addActionListener(e -> { JFileChooser fileChooser = new JFileChooser(); fileChooser.setCurrentDirectory(new File(\".\")); int num = fileChooser.showOpenDialog(null); if (num == JFileChooser.APPROVE_OPTION) { String sourceSketchPath = fileChooser.getSelectedFile().getAbsolutePath(); String destinationFolderPath = \"users_note/\" + name + \"/\" + title; try { Path sourcePath = Paths.get(sourceSketchPath); Path destinationPath = Paths.get(destinationFolderPath, sourcePath.getFileName().toString()); Files.copy(sourcePath, destinationPath); } catch (IOException ignored) { } } }); } private void createShowImagesAndSketchBtn(String name, String title) { showImagesAndSketchBtn = new JButton(\"Show images and sketches\"); showImagesAndSketchBtn.setFocusable(false); showImagesAndSketchBtn.setBounds(45, 365, 300, 20); showImagesAndSketchBtn.setFont(new Font(\"Georgia\", Font.ITALIC, 15)); showImagesAndSketchBtn.addActionListener(e -> { String show = \"\"; Set<String> imageAndSketchFileNameList = fileManager.listFilesImagesAndSketches(\"users_note/\" + name + \"/\" + title); for (String fileName : imageAndSketchFileNameList) { show = show.concat(fileName).concat(\"\\n\"); } JOptionPane.showMessageDialog(null, show); }); } private void createSaveBtn(String name, String title) { saveBtn = new JButton(\"Save\"); saveBtn.setFocusable(false); saveBtn.setBounds(100, 460, 200, 40); saveBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 25)); saveBtn.addActionListener(e -> { try { FileWriter fileWriter = new FileWriter(\"users_note/\" + name + \"/\" + title, true); fileWriter.write(textArea.getText()); fileWriter.close(); } catch (Exception ignored) { } frame.dispose(); new WelcomePage(name); }); } private void createExitBtn() { exitBtn = new JButton(\"Exit\"); exitBtn.setFocusable(false); exitBtn.setBounds(120, 510, 160, 30); exitBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 25)); exitBtn.addActionListener(e -> frame.dispose()); } }"},{"file_path":"Note-app-main/Note-app-main/src/app/FileManager.java","file_content":"package app; import java.io.BufferedReader; import java.io.FileReader; import java.io.FileWriter; import java.io.IOException; import java.nio.file.DirectoryStream; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.util.HashSet; import java.util.Set; public class FileManager { private FileReader fileReader; private BufferedReader bufferedReader; public void createFolder(String path) { try { Files.createDirectories(Paths.get(path)); } catch (IOException ignored) { } } public void addUser(User user) { try { createFolder(\"users_note/\" + user.getName()); FileWriter fileWriter = new FileWriter(\"users.txt\", true); fileWriter.write(user.getName() + \"|\" + user.getPassword() + \"\\n\"); fileWriter.close(); } catch (Exception ignored) { } } public boolean isUserExist(User user) { boolean matched = false; String name = user.getName(); String pass = user.getPassword(); try { fileReader = new FileReader(\"users.txt\"); bufferedReader = new BufferedReader(fileReader); String line; while ((line = bufferedReader.readLine()) != null) { if (line.equals(name + \"|\" + pass)) { matched = true; break; } } fileReader.close(); } catch (Exception ignored) { } return matched; } public String getContentFile(String path) { String content = \"\"; try { fileReader = new FileReader(path); bufferedReader = new BufferedReader(fileReader); String line; while ((line = bufferedReader.readLine()) != null) { content = content.concat(line).concat(\"\\n\"); } fileReader.close(); } catch (Exception ignored) { } return content; } public Set<String> listFilesImagesAndSketches(String directoryPath) { Set<String> fileSet = new HashSet<>(); try { DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(directoryPath)); for (Path path : stream) { if (!Files.isDirectory(path) && !path.getFileName().toString().equals(\"note.txt\")) { fileSet.add(path.getFileName().toString()); } } stream.close(); } catch (IOException ignored) { } return fileSet; } public Set<String> listDirectory(String directoryPath) { Set<String> fileSet = new HashSet<>(); try { DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(directoryPath)); for (Path path : stream) { if (Files.isDirectory(path) && !path.getFileName().toString().equals(\"note.txt\")) { fileSet.add(path.getFileName().toString()); } } stream.close(); } catch (IOException ignored) { } return fileSet; } }"}]}}
{"project_id":231,"chunk_id":0,"content":{"main_file_path":"Note-app-main/Note-app-main/src/Main.java","main_file_content":"import app.Login; public class Main { public static void main(String[] args) { new Login(); } }","dependencies":[{"file_path":"Note-app-main/Note-app-main/src/app/Login.java","file_content":"package app; import javax.swing.*; import java.awt.*; public class Login { JFrame loginFrame; JLabel nameLabel, passLabel, massLabel; JTextField nameF, passF; JButton loginBtn, signupBtn; public Login() { createLabels(); createFields(); createLoginButton(); createSignupButton(); createLoginFrame(); } private void createLoginFrame() { loginFrame = new JFrame(\"Login\"); loginFrame.setLocation(500, 200); loginFrame.setSize(420, 420); loginFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); loginFrame.setLayout(null); loginFrame.getContentPane().setBackground(new Color(181, 241, 195)); loginFrame.add(nameF); loginFrame.add(passF); loginFrame.add(nameLabel); loginFrame.add(passLabel); loginFrame.add(massLabel); loginFrame.add(loginBtn); loginFrame.add(signupBtn); loginFrame.setVisible(true); } private void createFields() { nameF = new JTextField(); passF = new JPasswordField(); nameF.setBounds(125, 100, 200, 25); passF.setBounds(125, 150, 200, 25); } private void createLabels() { nameLabel = new JLabel(\"Username:\"); passLabel = new JLabel(\"Password:\"); massLabel = new JLabel(); nameLabel.setBounds(50, 100, 75, 25); passLabel.setBounds(50, 150, 75, 25); massLabel.setBounds(110, 250, 250, 35); massLabel.setFont(new Font(null, Font.PLAIN, 20)); massLabel.setForeground(Color.red); } private void createLoginButton() { loginBtn = new JButton(\"Log in\"); loginBtn.setBounds(125, 200, 100, 25); loginBtn.setFocusable(false); loginBtn.setCursor(new Cursor(Cursor.HAND_CURSOR)); loginBtn.addActionListener(e -> { String name = nameF.getText(); String pass = passF.getText(); FileManager fileManager = new FileManager(); if (fileManager.isUserExist(new User(name, pass))) { loginFrame.dispose(); new WelcomePage(name); } else { massLabel.setText(\"Invalid name or password!\"); } }); } private void createSignupButton() { signupBtn = new JButton(\"Sign up\"); signupBtn.setBounds(225, 200, 100, 25); signupBtn.setFocusable(false); signupBtn.setCursor(new Cursor(Cursor.HAND_CURSOR)); signupBtn.addActionListener(e -> new SignUp()); } }"}]}}
{"project_id":231,"chunk_id":0,"content":{"main_file_path":"Note-app-main/Note-app-main/src/app/User.java","main_file_content":"package app; public class User { private final String name; private final String password; public User(String name, String password) { this.name = name; this.password = password; } public String getName() { return name; } public String getPassword() { return password; } }","dependencies":[]}}
{"project_id":231,"chunk_id":0,"content":{"main_file_path":"Note-app-main/Note-app-main/src/app/Login.java","main_file_content":"package app; import javax.swing.*; import java.awt.*; public class Login { JFrame loginFrame; JLabel nameLabel, passLabel, massLabel; JTextField nameF, passF; JButton loginBtn, signupBtn; public Login() { createLabels(); createFields(); createLoginButton(); createSignupButton(); createLoginFrame(); } private void createLoginFrame() { loginFrame = new JFrame(\"Login\"); loginFrame.setLocation(500, 200); loginFrame.setSize(420, 420); loginFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); loginFrame.setLayout(null); loginFrame.getContentPane().setBackground(new Color(181, 241, 195)); loginFrame.add(nameF); loginFrame.add(passF); loginFrame.add(nameLabel); loginFrame.add(passLabel); loginFrame.add(massLabel); loginFrame.add(loginBtn); loginFrame.add(signupBtn); loginFrame.setVisible(true); } private void createFields() { nameF = new JTextField(); passF = new JPasswordField(); nameF.setBounds(125, 100, 200, 25); passF.setBounds(125, 150, 200, 25); } private void createLabels() { nameLabel = new JLabel(\"Username:\"); passLabel = new JLabel(\"Password:\"); massLabel = new JLabel(); nameLabel.setBounds(50, 100, 75, 25); passLabel.setBounds(50, 150, 75, 25); massLabel.setBounds(110, 250, 250, 35); massLabel.setFont(new Font(null, Font.PLAIN, 20)); massLabel.setForeground(Color.red); } private void createLoginButton() { loginBtn = new JButton(\"Log in\"); loginBtn.setBounds(125, 200, 100, 25); loginBtn.setFocusable(false); loginBtn.setCursor(new Cursor(Cursor.HAND_CURSOR)); loginBtn.addActionListener(e -> { String name = nameF.getText(); String pass = passF.getText(); FileManager fileManager = new FileManager(); if (fileManager.isUserExist(new User(name, pass))) { loginFrame.dispose(); new WelcomePage(name); } else { massLabel.setText(\"Invalid name or password!\"); } }); } private void createSignupButton() { signupBtn = new JButton(\"Sign up\"); signupBtn.setBounds(225, 200, 100, 25); signupBtn.setFocusable(false); signupBtn.setCursor(new Cursor(Cursor.HAND_CURSOR)); signupBtn.addActionListener(e -> new SignUp()); } }","dependencies":[{"file_path":"Note-app-main/Note-app-main/src/app/FileManager.java","file_content":"package app; import java.io.BufferedReader; import java.io.FileReader; import java.io.FileWriter; import java.io.IOException; import java.nio.file.DirectoryStream; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.util.HashSet; import java.util.Set; public class FileManager { private FileReader fileReader; private BufferedReader bufferedReader; public void createFolder(String path) { try { Files.createDirectories(Paths.get(path)); } catch (IOException ignored) { } } public void addUser(User user) { try { createFolder(\"users_note/\" + user.getName()); FileWriter fileWriter = new FileWriter(\"users.txt\", true); fileWriter.write(user.getName() + \"|\" + user.getPassword() + \"\\n\"); fileWriter.close(); } catch (Exception ignored) { } } public boolean isUserExist(User user) { boolean matched = false; String name = user.getName(); String pass = user.getPassword(); try { fileReader = new FileReader(\"users.txt\"); bufferedReader = new BufferedReader(fileReader); String line; while ((line = bufferedReader.readLine()) != null) { if (line.equals(name + \"|\" + pass)) { matched = true; break; } } fileReader.close(); } catch (Exception ignored) { } return matched; } public String getContentFile(String path) { String content = \"\"; try { fileReader = new FileReader(path); bufferedReader = new BufferedReader(fileReader); String line; while ((line = bufferedReader.readLine()) != null) { content = content.concat(line).concat(\"\\n\"); } fileReader.close(); } catch (Exception ignored) { } return content; } public Set<String> listFilesImagesAndSketches(String directoryPath) { Set<String> fileSet = new HashSet<>(); try { DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(directoryPath)); for (Path path : stream) { if (!Files.isDirectory(path) && !path.getFileName().toString().equals(\"note.txt\")) { fileSet.add(path.getFileName().toString()); } } stream.close(); } catch (IOException ignored) { } return fileSet; } public Set<String> listDirectory(String directoryPath) { Set<String> fileSet = new HashSet<>(); try { DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(directoryPath)); for (Path path : stream) { if (Files.isDirectory(path) && !path.getFileName().toString().equals(\"note.txt\")) { fileSet.add(path.getFileName().toString()); } } stream.close(); } catch (IOException ignored) { } return fileSet; } }"},{"file_path":"Note-app-main/Note-app-main/src/app/SignUp.java","file_content":"package app; import javax.swing.*; import java.awt.*; public class SignUp { JFrame signupFrame; JLabel nameLabel, passLabel; JTextField nameF, passF; JButton submitBtn; public SignUp() { createLabels(); createFields(); createSubmitButton(); createSignupFrame(); } private void createSignupFrame() { signupFrame = new JFrame(\"Login\"); signupFrame.setLocation(400, 200); signupFrame.setSize(420, 300); signupFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); signupFrame.setLayout(null); signupFrame.getContentPane().setBackground(new Color(154, 234, 223)); signupFrame.add(nameF); signupFrame.add(passF); signupFrame.add(nameLabel); signupFrame.add(passLabel); signupFrame.add(submitBtn); signupFrame.setVisible(true); } private void createFields() { nameF = new JTextField(); passF = new JPasswordField(); nameF.setBounds(125, 50, 200, 25); passF.setBounds(125, 100, 200, 25); } private void createLabels() { nameLabel = new JLabel(\"Username:\"); passLabel = new JLabel(\"Password:\"); nameLabel.setBounds(50, 50, 75, 25); passLabel.setBounds(50, 100, 75, 25); } private void createSubmitButton() { submitBtn = new JButton(\"Submit\"); submitBtn.setBounds(125, 150, 100, 25); submitBtn.setFocusable(false); submitBtn.setCursor(new Cursor(Cursor.HAND_CURSOR)); submitBtn.addActionListener(e -> { User user = new User(nameF.getText(), passF.getText()); FileManager fileManager = new FileManager(); fileManager.addUser(user); JOptionPane.showMessageDialog(null, \"Registration Completed.\"); signupFrame.dispose(); }); } }"},{"file_path":"Note-app-main/Note-app-main/src/app/User.java","file_content":"package app; public class User { private final String name; private final String password; public User(String name, String password) { this.name = name; this.password = password; } public String getName() { return name; } public String getPassword() { return password; } }"},{"file_path":"Note-app-main/Note-app-main/src/app/WelcomePage.java","file_content":"package app; import javax.swing.*; import java.awt.*; import java.util.Set; public class WelcomePage { private JFrame frame; private JLabel welcomeLabel; private JButton createBtn, editBtn, exitBtn, showTitlesBtn; private FileManager fileManager; public WelcomePage(String name) { createWelcomeLabel(name); createShowTitlesBtn(name); createCreateBtn(name); createEditBtn(name); createExitBtn(); createFrame(); } private void createFrame() { frame = new JFrame(); frame.setSize(400, 400); frame.setLocation(400, 200); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setLayout(null); frame.getContentPane().setBackground(new Color(0xFF9800)); frame.add(exitBtn); frame.add(createBtn); frame.add(editBtn); frame.add(showTitlesBtn); frame.add(welcomeLabel); frame.setVisible(true); } private void createWelcomeLabel(String name) { welcomeLabel = new JLabel(); welcomeLabel.setText(\"Welcome \" + name); welcomeLabel.setFont(new Font(\"Georgia\", Font.BOLD, 20)); welcomeLabel.setBounds(90, 60, 350, 50); } private void createShowTitlesBtn(String name) { showTitlesBtn = new JButton(\"Show notes Title\"); showTitlesBtn.setFocusable(false); showTitlesBtn.setBounds(45, 200, 300, 25); showTitlesBtn.setFont(new Font(\"Georgia\", Font.ITALIC, 15)); showTitlesBtn.addActionListener(e -> { fileManager = new FileManager(); Set<String> titleList = fileManager.listDirectory(\"users_note/\" + name); String dirs = \"\"; for (String dirName : titleList) { dirs = dirs.concat(dirName).concat(\"\\n\"); } if (dirs.isEmpty()) { JOptionPane.showMessageDialog(null, \"You don't have any notes yet!\"); } else { JOptionPane.showMessageDialog(null, dirs); } }); } private void createCreateBtn(String name) { createBtn = new JButton(\"Create note\"); createBtn.setFocusable(false); createBtn.setBounds(40, 250, 150, 50); createBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 20)); createBtn.addActionListener(e -> { String title = JOptionPane.showInputDialog(null, \"Enter the title for note:\"); FileManager fileManager = new FileManager(); fileManager.createFolder(\"users_note/\" + name + \"/\" + title); frame.dispose(); new CreateNote(name, title); }); } private void createEditBtn(String name) { editBtn = new JButton(\"Edit note\"); editBtn.setFocusable(false); editBtn.setBounds(200, 250, 150, 50); editBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 20)); editBtn.addActionListener(e -> { String title = JOptionPane.showInputDialog(null, \"Enter the title for note:\"); frame.dispose(); new EditNote(name, title); }); } private void createExitBtn() { exitBtn = new JButton(\"Exit\"); exitBtn.setFocusable(false); exitBtn.setBounds(120, 310, 160, 30); exitBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 25)); exitBtn.addActionListener(e -> frame.dispose()); } }"}]}}
{"project_id":231,"chunk_id":0,"content":{"main_file_path":"Note-app-main/Note-app-main/src/app/CreateNote.java","main_file_content":"package app; import javax.swing.*; import java.awt.*; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.util.Set; public class CreateNote { JFrame frame; JLabel label; JTextArea textArea; JButton addImageBtn, addSketchBtn, showImagesAndSketchBtn, saveBtn, exitBtn; public CreateNote(String name, String title) { createLabel(); createTextArea(); JScrollPane scrollPane = new JScrollPane(textArea, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED); scrollPane.setBorder(BorderFactory.createEmptyBorder()); scrollPane.setBounds(20, 50, 350, 300); createShowImagesAndSketchBtn(name, title); createAddImageBtn(name, title); createAddSketchBtn(name, title); createSaveBtn(name, title); createExitBtn(); createFrame(scrollPane); } private void createFrame(JScrollPane scrollPane) { frame = new JFrame(); frame.setSize(400, 600); frame.setLocation(400, 100); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setLayout(null); frame.getContentPane().setBackground(new Color(0xFF9800)); frame.add(exitBtn); frame.add(showImagesAndSketchBtn); frame.add(saveBtn); frame.add(addImageBtn); frame.add(addSketchBtn); frame.add(label); frame.add(scrollPane); frame.setVisible(true); } private void createLabel() { label = new JLabel(\"Text note:\"); label.setBounds(20, 20, 200, 30); label.setFont(new Font(\"Georgia\", Font.BOLD, 20)); } private void createTextArea() { textArea = new JTextArea(); textArea.setFont(new Font(\"Georgia\", Font.BOLD, 20)); textArea.setForeground(new Color(0x191D88)); textArea.setCaretColor(Color.red); } private void createShowImagesAndSketchBtn(String name, String title) { showImagesAndSketchBtn = new JButton(\"Show images and sketches\"); showImagesAndSketchBtn.setFocusable(false); showImagesAndSketchBtn.setBounds(45, 365, 300, 20); showImagesAndSketchBtn.setFont(new Font(\"Georgia\", Font.ITALIC, 15)); showImagesAndSketchBtn.addActionListener(e -> { String show = \"\"; FileManager fileManager = new FileManager(); Set<String> imageAndSketchFileNameList = fileManager.listFilesImagesAndSketches(\"users_note/\" + name + \"/\" + title); for (String fileName : imageAndSketchFileNameList) { show = show.concat(fileName).concat(\"\\n\"); } JOptionPane.showMessageDialog(null, show); }); } private void createAddImageBtn(String name, String title) { addImageBtn = new JButton(\"Add image\"); addImageBtn.setFocusable(false); addImageBtn.setBounds(40, 400, 150, 50); addImageBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 20)); addImageBtn.addActionListener(e -> { JFileChooser fileChooser = new JFileChooser(); fileChooser.setCurrentDirectory(new File(\".\")); int num = fileChooser.showOpenDialog(null); if (num == JFileChooser.APPROVE_OPTION) { String sourceImagePath = fileChooser.getSelectedFile().getAbsolutePath(); String destinationFolderPath = \"users_note/\" + name + \"/\" + title; try { Path sourcePath = Paths.get(sourceImagePath); Path destinationPath = Paths.get(destinationFolderPath, sourcePath.getFileName().toString()); Files.copy(sourcePath, destinationPath); } catch (IOException ignored) { } } }); } private void createAddSketchBtn(String name, String title) { addSketchBtn = new JButton(\"Add Sketch\"); addSketchBtn.setFocusable(false); addSketchBtn.setBounds(200, 400, 150, 50); addSketchBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 20)); addSketchBtn.addActionListener(e -> { JFileChooser fileChooser = new JFileChooser(); fileChooser.setCurrentDirectory(new File(\".\")); int num = fileChooser.showOpenDialog(null); if (num == JFileChooser.APPROVE_OPTION) { String sourceSketchPath = fileChooser.getSelectedFile().getAbsolutePath(); String destinationFolderPath = \"users_note/\" + name + \"/\" + title; try { Path sourcePath = Paths.get(sourceSketchPath); Path destinationPath = Paths.get(destinationFolderPath, sourcePath.getFileName().toString()); Files.copy(sourcePath, destinationPath); } catch (IOException ignored) { } } }); } private void createSaveBtn(String name, String title) { saveBtn = new JButton(\"Save\"); saveBtn.setFocusable(false); saveBtn.setBounds(100, 460, 200, 40); saveBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 25)); saveBtn.addActionListener(e -> { try { FileWriter fileWriter = new FileWriter(\"users_note/\" + name + \"/\" + title + \"/\" + \"note.txt\", true); fileWriter.write(textArea.getText()); fileWriter.close(); } catch (Exception ignored) { } frame.dispose(); new WelcomePage(name); }); } private void createExitBtn() { exitBtn = new JButton(\"Exit\"); exitBtn.setFocusable(false); exitBtn.setBounds(120, 510, 160, 30); exitBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 25)); exitBtn.addActionListener(e -> frame.dispose()); } }","dependencies":[{"file_path":"Note-app-main/Note-app-main/src/app/FileManager.java","file_content":"package app; import java.io.BufferedReader; import java.io.FileReader; import java.io.FileWriter; import java.io.IOException; import java.nio.file.DirectoryStream; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.util.HashSet; import java.util.Set; public class FileManager { private FileReader fileReader; private BufferedReader bufferedReader; public void createFolder(String path) { try { Files.createDirectories(Paths.get(path)); } catch (IOException ignored) { } } public void addUser(User user) { try { createFolder(\"users_note/\" + user.getName()); FileWriter fileWriter = new FileWriter(\"users.txt\", true); fileWriter.write(user.getName() + \"|\" + user.getPassword() + \"\\n\"); fileWriter.close(); } catch (Exception ignored) { } } public boolean isUserExist(User user) { boolean matched = false; String name = user.getName(); String pass = user.getPassword(); try { fileReader = new FileReader(\"users.txt\"); bufferedReader = new BufferedReader(fileReader); String line; while ((line = bufferedReader.readLine()) != null) { if (line.equals(name + \"|\" + pass)) { matched = true; break; } } fileReader.close(); } catch (Exception ignored) { } return matched; } public String getContentFile(String path) { String content = \"\"; try { fileReader = new FileReader(path); bufferedReader = new BufferedReader(fileReader); String line; while ((line = bufferedReader.readLine()) != null) { content = content.concat(line).concat(\"\\n\"); } fileReader.close(); } catch (Exception ignored) { } return content; } public Set<String> listFilesImagesAndSketches(String directoryPath) { Set<String> fileSet = new HashSet<>(); try { DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(directoryPath)); for (Path path : stream) { if (!Files.isDirectory(path) && !path.getFileName().toString().equals(\"note.txt\")) { fileSet.add(path.getFileName().toString()); } } stream.close(); } catch (IOException ignored) { } return fileSet; } public Set<String> listDirectory(String directoryPath) { Set<String> fileSet = new HashSet<>(); try { DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(directoryPath)); for (Path path : stream) { if (Files.isDirectory(path) && !path.getFileName().toString().equals(\"note.txt\")) { fileSet.add(path.getFileName().toString()); } } stream.close(); } catch (IOException ignored) { } return fileSet; } }"},{"file_path":"Note-app-main/Note-app-main/src/app/WelcomePage.java","file_content":"package app; import javax.swing.*; import java.awt.*; import java.util.Set; public class WelcomePage { private JFrame frame; private JLabel welcomeLabel; private JButton createBtn, editBtn, exitBtn, showTitlesBtn; private FileManager fileManager; public WelcomePage(String name) { createWelcomeLabel(name); createShowTitlesBtn(name); createCreateBtn(name); createEditBtn(name); createExitBtn(); createFrame(); } private void createFrame() { frame = new JFrame(); frame.setSize(400, 400); frame.setLocation(400, 200); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setLayout(null); frame.getContentPane().setBackground(new Color(0xFF9800)); frame.add(exitBtn); frame.add(createBtn); frame.add(editBtn); frame.add(showTitlesBtn); frame.add(welcomeLabel); frame.setVisible(true); } private void createWelcomeLabel(String name) { welcomeLabel = new JLabel(); welcomeLabel.setText(\"Welcome \" + name); welcomeLabel.setFont(new Font(\"Georgia\", Font.BOLD, 20)); welcomeLabel.setBounds(90, 60, 350, 50); } private void createShowTitlesBtn(String name) { showTitlesBtn = new JButton(\"Show notes Title\"); showTitlesBtn.setFocusable(false); showTitlesBtn.setBounds(45, 200, 300, 25); showTitlesBtn.setFont(new Font(\"Georgia\", Font.ITALIC, 15)); showTitlesBtn.addActionListener(e -> { fileManager = new FileManager(); Set<String> titleList = fileManager.listDirectory(\"users_note/\" + name); String dirs = \"\"; for (String dirName : titleList) { dirs = dirs.concat(dirName).concat(\"\\n\"); } if (dirs.isEmpty()) { JOptionPane.showMessageDialog(null, \"You don't have any notes yet!\"); } else { JOptionPane.showMessageDialog(null, dirs); } }); } private void createCreateBtn(String name) { createBtn = new JButton(\"Create note\"); createBtn.setFocusable(false); createBtn.setBounds(40, 250, 150, 50); createBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 20)); createBtn.addActionListener(e -> { String title = JOptionPane.showInputDialog(null, \"Enter the title for note:\"); FileManager fileManager = new FileManager(); fileManager.createFolder(\"users_note/\" + name + \"/\" + title); frame.dispose(); new CreateNote(name, title); }); } private void createEditBtn(String name) { editBtn = new JButton(\"Edit note\"); editBtn.setFocusable(false); editBtn.setBounds(200, 250, 150, 50); editBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 20)); editBtn.addActionListener(e -> { String title = JOptionPane.showInputDialog(null, \"Enter the title for note:\"); frame.dispose(); new EditNote(name, title); }); } private void createExitBtn() { exitBtn = new JButton(\"Exit\"); exitBtn.setFocusable(false); exitBtn.setBounds(120, 310, 160, 30); exitBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 25)); exitBtn.addActionListener(e -> frame.dispose()); } }"}]}}
{"project_id":231,"chunk_id":0,"content":{"main_file_path":"Note-app-main/Note-app-main/src/app/EditNote.java","main_file_content":"package app; import javax.swing.*; import java.awt.*; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.util.Set; public class EditNote { JFrame frame; JLabel label; JTextArea textArea; JButton addImageBtn, addSketchBtn, showImagesAndSketchBtn, saveBtn, exitBtn; FileManager fileManager; public EditNote(String name, String title) { createLabel(); createTextArea(name, title); JScrollPane scrollPane = new JScrollPane(textArea, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED); scrollPane.setBorder(BorderFactory.createEmptyBorder()); scrollPane.setBounds(20, 50, 350, 300); createAddImageBtn(name, title); createAddSketchBtn(name, title); createShowImagesAndSketchBtn(name, title); createSaveBtn(name, title); createExitBtn(); createFrame(scrollPane); } private void createFrame(JScrollPane scrollPane) { frame = new JFrame(); frame.setSize(400, 600); frame.setLocation(400, 100); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setLayout(null); frame.getContentPane().setBackground(new Color(0xFF9800)); frame.add(exitBtn); frame.add(showImagesAndSketchBtn); frame.add(saveBtn); frame.add(addImageBtn); frame.add(addSketchBtn); frame.add(label); frame.add(scrollPane); frame.setVisible(true); } private void createLabel() { label = new JLabel(\"Text note:\"); label.setBounds(20, 20, 200, 30); label.setFont(new Font(\"Georgia\", Font.BOLD, 20)); } private void createTextArea(String name, String title) { textArea = new JTextArea(); textArea.setFont(new Font(\"Georgia\", Font.BOLD, 20)); textArea.setForeground(new Color(0x191D88)); textArea.setCaretColor(Color.red); fileManager = new FileManager(); String content = fileManager.getContentFile(\"users_note/\" + name + \"/\" + title + \"/\" + \"note.txt\"); textArea.setText(content); } private void createAddImageBtn(String name, String title) { addImageBtn = new JButton(\"Add image\"); addImageBtn.setFocusable(false); addImageBtn.setBounds(40, 400, 150, 50); addImageBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 20)); addImageBtn.addActionListener(e -> { JFileChooser fileChooser = new JFileChooser(); fileChooser.setCurrentDirectory(new File(\".\")); int num = fileChooser.showOpenDialog(null); if (num == JFileChooser.APPROVE_OPTION) { String sourceImagePath = fileChooser.getSelectedFile().getAbsolutePath(); String destinationFolderPath = \"users_note/\" + name + \"/\" + title; try { Path sourcePath = Paths.get(sourceImagePath); Path destinationPath = Paths.get(destinationFolderPath, sourcePath.getFileName().toString()); Files.copy(sourcePath, destinationPath); } catch (IOException ignored) { } } }); } private void createAddSketchBtn(String name, String title) { addSketchBtn = new JButton(\"Add Sketch\"); addSketchBtn.setFocusable(false); addSketchBtn.setBounds(200, 400, 150, 50); addSketchBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 20)); addSketchBtn.addActionListener(e -> { JFileChooser fileChooser = new JFileChooser(); fileChooser.setCurrentDirectory(new File(\".\")); int num = fileChooser.showOpenDialog(null); if (num == JFileChooser.APPROVE_OPTION) { String sourceSketchPath = fileChooser.getSelectedFile().getAbsolutePath(); String destinationFolderPath = \"users_note/\" + name + \"/\" + title; try { Path sourcePath = Paths.get(sourceSketchPath); Path destinationPath = Paths.get(destinationFolderPath, sourcePath.getFileName().toString()); Files.copy(sourcePath, destinationPath); } catch (IOException ignored) { } } }); } private void createShowImagesAndSketchBtn(String name, String title) { showImagesAndSketchBtn = new JButton(\"Show images and sketches\"); showImagesAndSketchBtn.setFocusable(false); showImagesAndSketchBtn.setBounds(45, 365, 300, 20); showImagesAndSketchBtn.setFont(new Font(\"Georgia\", Font.ITALIC, 15)); showImagesAndSketchBtn.addActionListener(e -> { String show = \"\"; Set<String> imageAndSketchFileNameList = fileManager.listFilesImagesAndSketches(\"users_note/\" + name + \"/\" + title); for (String fileName : imageAndSketchFileNameList) { show = show.concat(fileName).concat(\"\\n\"); } JOptionPane.showMessageDialog(null, show); }); } private void createSaveBtn(String name, String title) { saveBtn = new JButton(\"Save\"); saveBtn.setFocusable(false); saveBtn.setBounds(100, 460, 200, 40); saveBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 25)); saveBtn.addActionListener(e -> { try { FileWriter fileWriter = new FileWriter(\"users_note/\" + name + \"/\" + title, true); fileWriter.write(textArea.getText()); fileWriter.close(); } catch (Exception ignored) { } frame.dispose(); new WelcomePage(name); }); } private void createExitBtn() { exitBtn = new JButton(\"Exit\"); exitBtn.setFocusable(false); exitBtn.setBounds(120, 510, 160, 30); exitBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 25)); exitBtn.addActionListener(e -> frame.dispose()); } }","dependencies":[{"file_path":"Note-app-main/Note-app-main/src/app/FileManager.java","file_content":"package app; import java.io.BufferedReader; import java.io.FileReader; import java.io.FileWriter; import java.io.IOException; import java.nio.file.DirectoryStream; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.util.HashSet; import java.util.Set; public class FileManager { private FileReader fileReader; private BufferedReader bufferedReader; public void createFolder(String path) { try { Files.createDirectories(Paths.get(path)); } catch (IOException ignored) { } } public void addUser(User user) { try { createFolder(\"users_note/\" + user.getName()); FileWriter fileWriter = new FileWriter(\"users.txt\", true); fileWriter.write(user.getName() + \"|\" + user.getPassword() + \"\\n\"); fileWriter.close(); } catch (Exception ignored) { } } public boolean isUserExist(User user) { boolean matched = false; String name = user.getName(); String pass = user.getPassword(); try { fileReader = new FileReader(\"users.txt\"); bufferedReader = new BufferedReader(fileReader); String line; while ((line = bufferedReader.readLine()) != null) { if (line.equals(name + \"|\" + pass)) { matched = true; break; } } fileReader.close(); } catch (Exception ignored) { } return matched; } public String getContentFile(String path) { String content = \"\"; try { fileReader = new FileReader(path); bufferedReader = new BufferedReader(fileReader); String line; while ((line = bufferedReader.readLine()) != null) { content = content.concat(line).concat(\"\\n\"); } fileReader.close(); } catch (Exception ignored) { } return content; } public Set<String> listFilesImagesAndSketches(String directoryPath) { Set<String> fileSet = new HashSet<>(); try { DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(directoryPath)); for (Path path : stream) { if (!Files.isDirectory(path) && !path.getFileName().toString().equals(\"note.txt\")) { fileSet.add(path.getFileName().toString()); } } stream.close(); } catch (IOException ignored) { } return fileSet; } public Set<String> listDirectory(String directoryPath) { Set<String> fileSet = new HashSet<>(); try { DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(directoryPath)); for (Path path : stream) { if (Files.isDirectory(path) && !path.getFileName().toString().equals(\"note.txt\")) { fileSet.add(path.getFileName().toString()); } } stream.close(); } catch (IOException ignored) { } return fileSet; } }"},{"file_path":"Note-app-main/Note-app-main/src/app/WelcomePage.java","file_content":"package app; import javax.swing.*; import java.awt.*; import java.util.Set; public class WelcomePage { private JFrame frame; private JLabel welcomeLabel; private JButton createBtn, editBtn, exitBtn, showTitlesBtn; private FileManager fileManager; public WelcomePage(String name) { createWelcomeLabel(name); createShowTitlesBtn(name); createCreateBtn(name); createEditBtn(name); createExitBtn(); createFrame(); } private void createFrame() { frame = new JFrame(); frame.setSize(400, 400); frame.setLocation(400, 200); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setLayout(null); frame.getContentPane().setBackground(new Color(0xFF9800)); frame.add(exitBtn); frame.add(createBtn); frame.add(editBtn); frame.add(showTitlesBtn); frame.add(welcomeLabel); frame.setVisible(true); } private void createWelcomeLabel(String name) { welcomeLabel = new JLabel(); welcomeLabel.setText(\"Welcome \" + name); welcomeLabel.setFont(new Font(\"Georgia\", Font.BOLD, 20)); welcomeLabel.setBounds(90, 60, 350, 50); } private void createShowTitlesBtn(String name) { showTitlesBtn = new JButton(\"Show notes Title\"); showTitlesBtn.setFocusable(false); showTitlesBtn.setBounds(45, 200, 300, 25); showTitlesBtn.setFont(new Font(\"Georgia\", Font.ITALIC, 15)); showTitlesBtn.addActionListener(e -> { fileManager = new FileManager(); Set<String> titleList = fileManager.listDirectory(\"users_note/\" + name); String dirs = \"\"; for (String dirName : titleList) { dirs = dirs.concat(dirName).concat(\"\\n\"); } if (dirs.isEmpty()) { JOptionPane.showMessageDialog(null, \"You don't have any notes yet!\"); } else { JOptionPane.showMessageDialog(null, dirs); } }); } private void createCreateBtn(String name) { createBtn = new JButton(\"Create note\"); createBtn.setFocusable(false); createBtn.setBounds(40, 250, 150, 50); createBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 20)); createBtn.addActionListener(e -> { String title = JOptionPane.showInputDialog(null, \"Enter the title for note:\"); FileManager fileManager = new FileManager(); fileManager.createFolder(\"users_note/\" + name + \"/\" + title); frame.dispose(); new CreateNote(name, title); }); } private void createEditBtn(String name) { editBtn = new JButton(\"Edit note\"); editBtn.setFocusable(false); editBtn.setBounds(200, 250, 150, 50); editBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 20)); editBtn.addActionListener(e -> { String title = JOptionPane.showInputDialog(null, \"Enter the title for note:\"); frame.dispose(); new EditNote(name, title); }); } private void createExitBtn() { exitBtn = new JButton(\"Exit\"); exitBtn.setFocusable(false); exitBtn.setBounds(120, 310, 160, 30); exitBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 25)); exitBtn.addActionListener(e -> frame.dispose()); } }"}]}}
{"project_id":231,"chunk_id":0,"content":{"main_file_path":"Note-app-main/Note-app-main/src/app/FileManager.java","main_file_content":"package app; import java.io.BufferedReader; import java.io.FileReader; import java.io.FileWriter; import java.io.IOException; import java.nio.file.DirectoryStream; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.util.HashSet; import java.util.Set; public class FileManager { private FileReader fileReader; private BufferedReader bufferedReader; public void createFolder(String path) { try { Files.createDirectories(Paths.get(path)); } catch (IOException ignored) { } } public void addUser(User user) { try { createFolder(\"users_note/\" + user.getName()); FileWriter fileWriter = new FileWriter(\"users.txt\", true); fileWriter.write(user.getName() + \"|\" + user.getPassword() + \"\\n\"); fileWriter.close(); } catch (Exception ignored) { } } public boolean isUserExist(User user) { boolean matched = false; String name = user.getName(); String pass = user.getPassword(); try { fileReader = new FileReader(\"users.txt\"); bufferedReader = new BufferedReader(fileReader); String line; while ((line = bufferedReader.readLine()) != null) { if (line.equals(name + \"|\" + pass)) { matched = true; break; } } fileReader.close(); } catch (Exception ignored) { } return matched; } public String getContentFile(String path) { String content = \"\"; try { fileReader = new FileReader(path); bufferedReader = new BufferedReader(fileReader); String line; while ((line = bufferedReader.readLine()) != null) { content = content.concat(line).concat(\"\\n\"); } fileReader.close(); } catch (Exception ignored) { } return content; } public Set<String> listFilesImagesAndSketches(String directoryPath) { Set<String> fileSet = new HashSet<>(); try { DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(directoryPath)); for (Path path : stream) { if (!Files.isDirectory(path) && !path.getFileName().toString().equals(\"note.txt\")) { fileSet.add(path.getFileName().toString()); } } stream.close(); } catch (IOException ignored) { } return fileSet; } public Set<String> listDirectory(String directoryPath) { Set<String> fileSet = new HashSet<>(); try { DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(directoryPath)); for (Path path : stream) { if (Files.isDirectory(path) && !path.getFileName().toString().equals(\"note.txt\")) { fileSet.add(path.getFileName().toString()); } } stream.close(); } catch (IOException ignored) { } return fileSet; } }","dependencies":[{"file_path":"Note-app-main/Note-app-main/src/app/User.java","file_content":"package app; public class User { private final String name; private final String password; public User(String name, String password) { this.name = name; this.password = password; } public String getName() { return name; } public String getPassword() { return password; } }"}]}}
{"project_id":231,"chunk_id":0,"content":{"main_file_path":"Note-app-main/Note-app-main/src/app/SignUp.java","main_file_content":"package app; import javax.swing.*; import java.awt.*; public class SignUp { JFrame signupFrame; JLabel nameLabel, passLabel; JTextField nameF, passF; JButton submitBtn; public SignUp() { createLabels(); createFields(); createSubmitButton(); createSignupFrame(); } private void createSignupFrame() { signupFrame = new JFrame(\"Login\"); signupFrame.setLocation(400, 200); signupFrame.setSize(420, 300); signupFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); signupFrame.setLayout(null); signupFrame.getContentPane().setBackground(new Color(154, 234, 223)); signupFrame.add(nameF); signupFrame.add(passF); signupFrame.add(nameLabel); signupFrame.add(passLabel); signupFrame.add(submitBtn); signupFrame.setVisible(true); } private void createFields() { nameF = new JTextField(); passF = new JPasswordField(); nameF.setBounds(125, 50, 200, 25); passF.setBounds(125, 100, 200, 25); } private void createLabels() { nameLabel = new JLabel(\"Username:\"); passLabel = new JLabel(\"Password:\"); nameLabel.setBounds(50, 50, 75, 25); passLabel.setBounds(50, 100, 75, 25); } private void createSubmitButton() { submitBtn = new JButton(\"Submit\"); submitBtn.setBounds(125, 150, 100, 25); submitBtn.setFocusable(false); submitBtn.setCursor(new Cursor(Cursor.HAND_CURSOR)); submitBtn.addActionListener(e -> { User user = new User(nameF.getText(), passF.getText()); FileManager fileManager = new FileManager(); fileManager.addUser(user); JOptionPane.showMessageDialog(null, \"Registration Completed.\"); signupFrame.dispose(); }); } }","dependencies":[{"file_path":"Note-app-main/Note-app-main/src/app/FileManager.java","file_content":"package app; import java.io.BufferedReader; import java.io.FileReader; import java.io.FileWriter; import java.io.IOException; import java.nio.file.DirectoryStream; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.util.HashSet; import java.util.Set; public class FileManager { private FileReader fileReader; private BufferedReader bufferedReader; public void createFolder(String path) { try { Files.createDirectories(Paths.get(path)); } catch (IOException ignored) { } } public void addUser(User user) { try { createFolder(\"users_note/\" + user.getName()); FileWriter fileWriter = new FileWriter(\"users.txt\", true); fileWriter.write(user.getName() + \"|\" + user.getPassword() + \"\\n\"); fileWriter.close(); } catch (Exception ignored) { } } public boolean isUserExist(User user) { boolean matched = false; String name = user.getName(); String pass = user.getPassword(); try { fileReader = new FileReader(\"users.txt\"); bufferedReader = new BufferedReader(fileReader); String line; while ((line = bufferedReader.readLine()) != null) { if (line.equals(name + \"|\" + pass)) { matched = true; break; } } fileReader.close(); } catch (Exception ignored) { } return matched; } public String getContentFile(String path) { String content = \"\"; try { fileReader = new FileReader(path); bufferedReader = new BufferedReader(fileReader); String line; while ((line = bufferedReader.readLine()) != null) { content = content.concat(line).concat(\"\\n\"); } fileReader.close(); } catch (Exception ignored) { } return content; } public Set<String> listFilesImagesAndSketches(String directoryPath) { Set<String> fileSet = new HashSet<>(); try { DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(directoryPath)); for (Path path : stream) { if (!Files.isDirectory(path) && !path.getFileName().toString().equals(\"note.txt\")) { fileSet.add(path.getFileName().toString()); } } stream.close(); } catch (IOException ignored) { } return fileSet; } public Set<String> listDirectory(String directoryPath) { Set<String> fileSet = new HashSet<>(); try { DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(directoryPath)); for (Path path : stream) { if (Files.isDirectory(path) && !path.getFileName().toString().equals(\"note.txt\")) { fileSet.add(path.getFileName().toString()); } } stream.close(); } catch (IOException ignored) { } return fileSet; } }"},{"file_path":"Note-app-main/Note-app-main/src/app/User.java","file_content":"package app; public class User { private final String name; private final String password; public User(String name, String password) { this.name = name; this.password = password; } public String getName() { return name; } public String getPassword() { return password; } }"}]}}
{"project_id":231,"chunk_id":0,"content":{"main_file_path":"Note-app-main/Note-app-main/src/app/WelcomePage.java","main_file_content":"package app; import javax.swing.*; import java.awt.*; import java.util.Set; public class WelcomePage { private JFrame frame; private JLabel welcomeLabel; private JButton createBtn, editBtn, exitBtn, showTitlesBtn; private FileManager fileManager; public WelcomePage(String name) { createWelcomeLabel(name); createShowTitlesBtn(name); createCreateBtn(name); createEditBtn(name); createExitBtn(); createFrame(); } private void createFrame() { frame = new JFrame(); frame.setSize(400, 400); frame.setLocation(400, 200); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setLayout(null); frame.getContentPane().setBackground(new Color(0xFF9800)); frame.add(exitBtn); frame.add(createBtn); frame.add(editBtn); frame.add(showTitlesBtn); frame.add(welcomeLabel); frame.setVisible(true); } private void createWelcomeLabel(String name) { welcomeLabel = new JLabel(); welcomeLabel.setText(\"Welcome \" + name); welcomeLabel.setFont(new Font(\"Georgia\", Font.BOLD, 20)); welcomeLabel.setBounds(90, 60, 350, 50); } private void createShowTitlesBtn(String name) { showTitlesBtn = new JButton(\"Show notes Title\"); showTitlesBtn.setFocusable(false); showTitlesBtn.setBounds(45, 200, 300, 25); showTitlesBtn.setFont(new Font(\"Georgia\", Font.ITALIC, 15)); showTitlesBtn.addActionListener(e -> { fileManager = new FileManager(); Set<String> titleList = fileManager.listDirectory(\"users_note/\" + name); String dirs = \"\"; for (String dirName : titleList) { dirs = dirs.concat(dirName).concat(\"\\n\"); } if (dirs.isEmpty()) { JOptionPane.showMessageDialog(null, \"You don't have any notes yet!\"); } else { JOptionPane.showMessageDialog(null, dirs); } }); } private void createCreateBtn(String name) { createBtn = new JButton(\"Create note\"); createBtn.setFocusable(false); createBtn.setBounds(40, 250, 150, 50); createBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 20)); createBtn.addActionListener(e -> { String title = JOptionPane.showInputDialog(null, \"Enter the title for note:\"); FileManager fileManager = new FileManager(); fileManager.createFolder(\"users_note/\" + name + \"/\" + title); frame.dispose(); new CreateNote(name, title); }); } private void createEditBtn(String name) { editBtn = new JButton(\"Edit note\"); editBtn.setFocusable(false); editBtn.setBounds(200, 250, 150, 50); editBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 20)); editBtn.addActionListener(e -> { String title = JOptionPane.showInputDialog(null, \"Enter the title for note:\"); frame.dispose(); new EditNote(name, title); }); } private void createExitBtn() { exitBtn = new JButton(\"Exit\"); exitBtn.setFocusable(false); exitBtn.setBounds(120, 310, 160, 30); exitBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 25)); exitBtn.addActionListener(e -> frame.dispose()); } }","dependencies":[{"file_path":"Note-app-main/Note-app-main/src/app/CreateNote.java","file_content":"package app; import javax.swing.*; import java.awt.*; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.util.Set; public class CreateNote { JFrame frame; JLabel label; JTextArea textArea; JButton addImageBtn, addSketchBtn, showImagesAndSketchBtn, saveBtn, exitBtn; public CreateNote(String name, String title) { createLabel(); createTextArea(); JScrollPane scrollPane = new JScrollPane(textArea, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED); scrollPane.setBorder(BorderFactory.createEmptyBorder()); scrollPane.setBounds(20, 50, 350, 300); createShowImagesAndSketchBtn(name, title); createAddImageBtn(name, title); createAddSketchBtn(name, title); createSaveBtn(name, title); createExitBtn(); createFrame(scrollPane); } private void createFrame(JScrollPane scrollPane) { frame = new JFrame(); frame.setSize(400, 600); frame.setLocation(400, 100); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setLayout(null); frame.getContentPane().setBackground(new Color(0xFF9800)); frame.add(exitBtn); frame.add(showImagesAndSketchBtn); frame.add(saveBtn); frame.add(addImageBtn); frame.add(addSketchBtn); frame.add(label); frame.add(scrollPane); frame.setVisible(true); } private void createLabel() { label = new JLabel(\"Text note:\"); label.setBounds(20, 20, 200, 30); label.setFont(new Font(\"Georgia\", Font.BOLD, 20)); } private void createTextArea() { textArea = new JTextArea(); textArea.setFont(new Font(\"Georgia\", Font.BOLD, 20)); textArea.setForeground(new Color(0x191D88)); textArea.setCaretColor(Color.red); } private void createShowImagesAndSketchBtn(String name, String title) { showImagesAndSketchBtn = new JButton(\"Show images and sketches\"); showImagesAndSketchBtn.setFocusable(false); showImagesAndSketchBtn.setBounds(45, 365, 300, 20); showImagesAndSketchBtn.setFont(new Font(\"Georgia\", Font.ITALIC, 15)); showImagesAndSketchBtn.addActionListener(e -> { String show = \"\"; FileManager fileManager = new FileManager(); Set<String> imageAndSketchFileNameList = fileManager.listFilesImagesAndSketches(\"users_note/\" + name + \"/\" + title); for (String fileName : imageAndSketchFileNameList) { show = show.concat(fileName).concat(\"\\n\"); } JOptionPane.showMessageDialog(null, show); }); } private void createAddImageBtn(String name, String title) { addImageBtn = new JButton(\"Add image\"); addImageBtn.setFocusable(false); addImageBtn.setBounds(40, 400, 150, 50); addImageBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 20)); addImageBtn.addActionListener(e -> { JFileChooser fileChooser = new JFileChooser(); fileChooser.setCurrentDirectory(new File(\".\")); int num = fileChooser.showOpenDialog(null); if (num == JFileChooser.APPROVE_OPTION) { String sourceImagePath = fileChooser.getSelectedFile().getAbsolutePath(); String destinationFolderPath = \"users_note/\" + name + \"/\" + title; try { Path sourcePath = Paths.get(sourceImagePath); Path destinationPath = Paths.get(destinationFolderPath, sourcePath.getFileName().toString()); Files.copy(sourcePath, destinationPath); } catch (IOException ignored) { } } }); } private void createAddSketchBtn(String name, String title) { addSketchBtn = new JButton(\"Add Sketch\"); addSketchBtn.setFocusable(false); addSketchBtn.setBounds(200, 400, 150, 50); addSketchBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 20)); addSketchBtn.addActionListener(e -> { JFileChooser fileChooser = new JFileChooser(); fileChooser.setCurrentDirectory(new File(\".\")); int num = fileChooser.showOpenDialog(null); if (num == JFileChooser.APPROVE_OPTION) { String sourceSketchPath = fileChooser.getSelectedFile().getAbsolutePath(); String destinationFolderPath = \"users_note/\" + name + \"/\" + title; try { Path sourcePath = Paths.get(sourceSketchPath); Path destinationPath = Paths.get(destinationFolderPath, sourcePath.getFileName().toString()); Files.copy(sourcePath, destinationPath); } catch (IOException ignored) { } } }); } private void createSaveBtn(String name, String title) { saveBtn = new JButton(\"Save\"); saveBtn.setFocusable(false); saveBtn.setBounds(100, 460, 200, 40); saveBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 25)); saveBtn.addActionListener(e -> { try { FileWriter fileWriter = new FileWriter(\"users_note/\" + name + \"/\" + title + \"/\" + \"note.txt\", true); fileWriter.write(textArea.getText()); fileWriter.close(); } catch (Exception ignored) { } frame.dispose(); new WelcomePage(name); }); } private void createExitBtn() { exitBtn = new JButton(\"Exit\"); exitBtn.setFocusable(false); exitBtn.setBounds(120, 510, 160, 30); exitBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 25)); exitBtn.addActionListener(e -> frame.dispose()); } }"},{"file_path":"Note-app-main/Note-app-main/src/app/EditNote.java","file_content":"package app; import javax.swing.*; import java.awt.*; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.util.Set; public class EditNote { JFrame frame; JLabel label; JTextArea textArea; JButton addImageBtn, addSketchBtn, showImagesAndSketchBtn, saveBtn, exitBtn; FileManager fileManager; public EditNote(String name, String title) { createLabel(); createTextArea(name, title); JScrollPane scrollPane = new JScrollPane(textArea, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED); scrollPane.setBorder(BorderFactory.createEmptyBorder()); scrollPane.setBounds(20, 50, 350, 300); createAddImageBtn(name, title); createAddSketchBtn(name, title); createShowImagesAndSketchBtn(name, title); createSaveBtn(name, title); createExitBtn(); createFrame(scrollPane); } private void createFrame(JScrollPane scrollPane) { frame = new JFrame(); frame.setSize(400, 600); frame.setLocation(400, 100); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setLayout(null); frame.getContentPane().setBackground(new Color(0xFF9800)); frame.add(exitBtn); frame.add(showImagesAndSketchBtn); frame.add(saveBtn); frame.add(addImageBtn); frame.add(addSketchBtn); frame.add(label); frame.add(scrollPane); frame.setVisible(true); } private void createLabel() { label = new JLabel(\"Text note:\"); label.setBounds(20, 20, 200, 30); label.setFont(new Font(\"Georgia\", Font.BOLD, 20)); } private void createTextArea(String name, String title) { textArea = new JTextArea(); textArea.setFont(new Font(\"Georgia\", Font.BOLD, 20)); textArea.setForeground(new Color(0x191D88)); textArea.setCaretColor(Color.red); fileManager = new FileManager(); String content = fileManager.getContentFile(\"users_note/\" + name + \"/\" + title + \"/\" + \"note.txt\"); textArea.setText(content); } private void createAddImageBtn(String name, String title) { addImageBtn = new JButton(\"Add image\"); addImageBtn.setFocusable(false); addImageBtn.setBounds(40, 400, 150, 50); addImageBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 20)); addImageBtn.addActionListener(e -> { JFileChooser fileChooser = new JFileChooser(); fileChooser.setCurrentDirectory(new File(\".\")); int num = fileChooser.showOpenDialog(null); if (num == JFileChooser.APPROVE_OPTION) { String sourceImagePath = fileChooser.getSelectedFile().getAbsolutePath(); String destinationFolderPath = \"users_note/\" + name + \"/\" + title; try { Path sourcePath = Paths.get(sourceImagePath); Path destinationPath = Paths.get(destinationFolderPath, sourcePath.getFileName().toString()); Files.copy(sourcePath, destinationPath); } catch (IOException ignored) { } } }); } private void createAddSketchBtn(String name, String title) { addSketchBtn = new JButton(\"Add Sketch\"); addSketchBtn.setFocusable(false); addSketchBtn.setBounds(200, 400, 150, 50); addSketchBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 20)); addSketchBtn.addActionListener(e -> { JFileChooser fileChooser = new JFileChooser(); fileChooser.setCurrentDirectory(new File(\".\")); int num = fileChooser.showOpenDialog(null); if (num == JFileChooser.APPROVE_OPTION) { String sourceSketchPath = fileChooser.getSelectedFile().getAbsolutePath(); String destinationFolderPath = \"users_note/\" + name + \"/\" + title; try { Path sourcePath = Paths.get(sourceSketchPath); Path destinationPath = Paths.get(destinationFolderPath, sourcePath.getFileName().toString()); Files.copy(sourcePath, destinationPath); } catch (IOException ignored) { } } }); } private void createShowImagesAndSketchBtn(String name, String title) { showImagesAndSketchBtn = new JButton(\"Show images and sketches\"); showImagesAndSketchBtn.setFocusable(false); showImagesAndSketchBtn.setBounds(45, 365, 300, 20); showImagesAndSketchBtn.setFont(new Font(\"Georgia\", Font.ITALIC, 15)); showImagesAndSketchBtn.addActionListener(e -> { String show = \"\"; Set<String> imageAndSketchFileNameList = fileManager.listFilesImagesAndSketches(\"users_note/\" + name + \"/\" + title); for (String fileName : imageAndSketchFileNameList) { show = show.concat(fileName).concat(\"\\n\"); } JOptionPane.showMessageDialog(null, show); }); } private void createSaveBtn(String name, String title) { saveBtn = new JButton(\"Save\"); saveBtn.setFocusable(false); saveBtn.setBounds(100, 460, 200, 40); saveBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 25)); saveBtn.addActionListener(e -> { try { FileWriter fileWriter = new FileWriter(\"users_note/\" + name + \"/\" + title, true); fileWriter.write(textArea.getText()); fileWriter.close(); } catch (Exception ignored) { } frame.dispose(); new WelcomePage(name); }); } private void createExitBtn() { exitBtn = new JButton(\"Exit\"); exitBtn.setFocusable(false); exitBtn.setBounds(120, 510, 160, 30); exitBtn.setFont(new Font(\"Georgia\", Font.PLAIN, 25)); exitBtn.addActionListener(e -> frame.dispose()); } }"},{"file_path":"Note-app-main/Note-app-main/src/app/FileManager.java","file_content":"package app; import java.io.BufferedReader; import java.io.FileReader; import java.io.FileWriter; import java.io.IOException; import java.nio.file.DirectoryStream; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.util.HashSet; import java.util.Set; public class FileManager { private FileReader fileReader; private BufferedReader bufferedReader; public void createFolder(String path) { try { Files.createDirectories(Paths.get(path)); } catch (IOException ignored) { } } public void addUser(User user) { try { createFolder(\"users_note/\" + user.getName()); FileWriter fileWriter = new FileWriter(\"users.txt\", true); fileWriter.write(user.getName() + \"|\" + user.getPassword() + \"\\n\"); fileWriter.close(); } catch (Exception ignored) { } } public boolean isUserExist(User user) { boolean matched = false; String name = user.getName(); String pass = user.getPassword(); try { fileReader = new FileReader(\"users.txt\"); bufferedReader = new BufferedReader(fileReader); String line; while ((line = bufferedReader.readLine()) != null) { if (line.equals(name + \"|\" + pass)) { matched = true; break; } } fileReader.close(); } catch (Exception ignored) { } return matched; } public String getContentFile(String path) { String content = \"\"; try { fileReader = new FileReader(path); bufferedReader = new BufferedReader(fileReader); String line; while ((line = bufferedReader.readLine()) != null) { content = content.concat(line).concat(\"\\n\"); } fileReader.close(); } catch (Exception ignored) { } return content; } public Set<String> listFilesImagesAndSketches(String directoryPath) { Set<String> fileSet = new HashSet<>(); try { DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(directoryPath)); for (Path path : stream) { if (!Files.isDirectory(path) && !path.getFileName().toString().equals(\"note.txt\")) { fileSet.add(path.getFileName().toString()); } } stream.close(); } catch (IOException ignored) { } return fileSet; } public Set<String> listDirectory(String directoryPath) { Set<String> fileSet = new HashSet<>(); try { DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(directoryPath)); for (Path path : stream) { if (Files.isDirectory(path) && !path.getFileName().toString().equals(\"note.txt\")) { fileSet.add(path.getFileName().toString()); } } stream.close(); } catch (IOException ignored) { } return fileSet; } }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/NightOwlTable.java","main_file_content":"package com.asha.nightowllib; import com.asha.nightowllib.handler.annotations.OwlAttr; import com.asha.nightowllib.handler.annotations.OwlAttrScope; import com.asha.nightowllib.handler.annotations.OwlStyleable; import com.asha.nightowllib.handler.impls.ButtonHandler; import com.asha.nightowllib.handler.impls.ImageViewHandler; import com.asha.nightowllib.handler.impls.ListViewHandler; import com.asha.nightowllib.handler.impls.TextViewHandler; import com.asha.nightowllib.handler.impls.ViewHandler; import com.asha.nightowllib.paint.imps.AlphaPaint; import com.asha.nightowllib.paint.imps.BackgroundPaint; import com.asha.nightowllib.paint.imps.ImageViewSrcPaint; import com.asha.nightowllib.paint.imps.ListViewDividerPaint; import com.asha.nightowllib.paint.imps.ListViewSelectorPaint; import com.asha.nightowllib.paint.imps.TextColorPaint; import static com.asha.nightowllib.handler.OwlHandlerManager.registerHandler; public class NightOwlTable { protected static void init(){ registerHandler(ListViewHandler.class); registerHandler(ImageViewHandler.class); registerHandler(TextViewHandler.class); registerHandler(ButtonHandler.class); registerHandler(ViewHandler.class); } @OwlAttrScope(2000) public interface OwlView { @OwlStyleable int[] NightOwl_View = R.styleable.NightOwl_View; @OwlAttr(BackgroundPaint.class) int NightOwl_View_night_background = R.styleable.NightOwl_View_night_background; @OwlAttr(AlphaPaint.class) int NightOwl_View_night_alpha = R.styleable.NightOwl_View_night_alpha; } @OwlAttrScope(2100) public interface OwlTextView extends OwlView { @OwlStyleable int[] NightOwl_TextView = R.styleable.NightOwl_TextView; @OwlAttr(TextColorPaint.class) int NightOwl_TextView_night_textColor = R.styleable.NightOwl_TextView_night_textColor; @OwlAttr(TextColorPaint.class) int NightOwl_TextView_night_textColorHint = R.styleable.NightOwl_TextView_night_textColorHint; } @OwlAttrScope(2200) public interface OwlButton extends OwlTextView { } @OwlAttrScope(2300) public interface OwlImageView extends OwlView { @OwlStyleable int[] NightOwl_ImageView = R.styleable.NightOwl_ImageView; @OwlAttr(ImageViewSrcPaint.class) int NightOwl_ImageView_night_src = R.styleable.NightOwl_ImageView_night_src; } @OwlAttrScope(2400) public interface OwlListView extends OwlView { @OwlStyleable int[] NightOwl_ListView = R.styleable.NightOwl_ListView; @OwlAttr(ListViewDividerPaint.class) int NightOwl_ListView_night_divider = R.styleable.NightOwl_ListView_night_divider; @OwlAttr(ListViewSelectorPaint.class) int NightOwl_ListView_night_listSelector = R.styleable.NightOwl_ListView_night_listSelector; } }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/impls/ButtonHandler.java","file_content":"package com.asha.nightowllib.handler.impls; import android.widget.Button; import com.asha.nightowllib.NightOwlTable; import com.asha.nightowllib.handler.annotations.OwlHandle; import com.asha.nightowllib.handler.annotations.OwlSysStyleable; @OwlSysStyleable(\"textAppearance\") @OwlHandle(Button.class) public class ButtonHandler extends AbsSkinHandler implements NightOwlTable.OwlButton { }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/impls/ImageViewHandler.java","file_content":"package com.asha.nightowllib.handler.impls; import android.widget.ImageView; import com.asha.nightowllib.NightOwlTable; import com.asha.nightowllib.handler.annotations.OwlHandle; @OwlHandle({ImageView.class}) public class ImageViewHandler extends AbsSkinHandler implements NightOwlTable.OwlImageView { }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/impls/ListViewHandler.java","file_content":"package com.asha.nightowllib.handler.impls; import android.widget.ListView; import com.asha.nightowllib.NightOwlTable; import com.asha.nightowllib.handler.annotations.OwlHandle; @OwlHandle(ListView.class) public class ListViewHandler extends AbsSkinHandler implements NightOwlTable.OwlListView { }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/impls/TextViewHandler.java","file_content":"package com.asha.nightowllib.handler.impls; import android.widget.TextView; import com.asha.nightowllib.NightOwlTable; import com.asha.nightowllib.handler.annotations.OwlHandle; import com.asha.nightowllib.handler.annotations.OwlSysStyleable; @OwlSysStyleable(\"textAppearance\") @OwlHandle({TextView.class}) public class TextViewHandler extends AbsSkinHandler implements NightOwlTable.OwlTextView { }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/impls/ViewHandler.java","file_content":"package com.asha.nightowllib.handler.impls; import android.view.View; import com.asha.nightowllib.NightOwlTable; import com.asha.nightowllib.handler.annotations.OwlHandle; @OwlHandle(View.class) public class ViewHandler extends AbsSkinHandler implements NightOwlTable.OwlView { }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/paint/imps/AlphaPaint.java","file_content":"package com.asha.nightowllib.paint.imps; import android.content.res.TypedArray; import android.os.Build; import android.view.View; import com.asha.nightowllib.paint.IOwlPaint; public class AlphaPaint implements IOwlPaint { @Override public void draw(View view, Object value) { Float alpha = (Float) value; if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) { view.setAlpha(alpha); } } @Override public Object[] setup(View view, TypedArray a, int attr) { Float alpha1 = 1.0f; if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.HONEYCOMB) { alpha1 = view.getAlpha(); } Float alpha2 = a.getFloat(attr, alpha1); return new Float[]{ alpha1, alpha2 }; } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/paint/imps/BackgroundPaint.java","file_content":"package com.asha.nightowllib.paint.imps; import android.content.res.TypedArray; import android.graphics.drawable.Drawable; import android.os.Build; import android.view.View; import com.asha.nightowllib.paint.IOwlPaint; public class BackgroundPaint implements IOwlPaint { @Override public void draw(View view, Object value) { Drawable drawable = (Drawable) value; setBackgroundCompact(view,drawable); } @Override public Object[] setup(View view, TypedArray a, int attr) { Drawable bg1 = view.getBackground(); Drawable bg2 = a.getDrawable(attr); return new Drawable[]{bg1, bg2}; } private void setBackgroundCompact(View view,Drawable drawable){ if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) { view.setBackground(drawable); } else { setBackgroundPrev15(view, drawable); } } @SuppressWarnings(\"deprecation\") private void setBackgroundPrev15(View view,Drawable drawable){ view.setBackgroundDrawable(drawable); } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/paint/imps/ImageViewSrcPaint.java","file_content":"package com.asha.nightowllib.paint.imps; import android.content.res.TypedArray; import android.graphics.drawable.Drawable; import android.view.View; import android.widget.ImageView; import com.asha.nightowllib.paint.IOwlPaint; public class ImageViewSrcPaint implements IOwlPaint { @Override public void draw(View view, Object value) { ImageView imageView = (ImageView) view; Drawable drawable = (Drawable) value; imageView.setImageDrawable(drawable); } @Override public Object[] setup(View view, TypedArray a, int attr) { ImageView imageView = (ImageView) view; Drawable bg1 = imageView.getDrawable(); Drawable bg2 = a.getDrawable(attr); return new Drawable[]{ bg1, bg2 }; } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/paint/imps/ListViewDividerPaint.java","file_content":"package com.asha.nightowllib.paint.imps; import android.content.res.TypedArray; import android.graphics.drawable.Drawable; import android.view.View; import android.widget.ListView; import com.asha.nightowllib.paint.IOwlPaint; public class ListViewDividerPaint implements IOwlPaint { @Override public void draw(View view, Object value) { ListView listView = (ListView) view; int listHeight = listView.getDividerHeight(); listView.setDivider((Drawable) value); listView.setDividerHeight(listHeight); } @Override public Object[] setup(View view, TypedArray a, int attr) { ListView listView = (ListView) view; Drawable drawable1 = listView.getDivider(); Drawable drawable2 = a.getDrawable(attr); return new Drawable[]{ drawable1, drawable2 }; } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/paint/imps/ListViewSelectorPaint.java","file_content":"package com.asha.nightowllib.paint.imps; import android.content.res.TypedArray; import android.graphics.drawable.Drawable; import android.view.View; import android.widget.ListView; import com.asha.nightowllib.paint.IOwlPaint; public class ListViewSelectorPaint implements IOwlPaint { @Override public void draw(View view, Object value) { ListView listView = (ListView) view; listView.setSelector((Drawable) value); } @Override public Object[] setup(View view, TypedArray a, int attr) { ListView listView = (ListView) view; Drawable drawable1 = listView.getSelector(); Drawable drawable2 = a.getDrawable(attr); return new Drawable[]{ drawable1, drawable2 }; } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/paint/imps/TextColorPaint.java","file_content":"package com.asha.nightowllib.paint.imps; import android.content.res.ColorStateList; import android.content.res.TypedArray; import android.view.View; import android.widget.TextView; import com.asha.nightowllib.paint.IOwlPaint; public class TextColorPaint implements IOwlPaint { @Override public void draw(View view, Object value) { TextView tv = (TextView) view; ColorStateList color = (ColorStateList) value; tv.setTextColor(color); } @Override public Object[] setup(View view, TypedArray a, int attr) { TextView tv = (TextView) view; ColorStateList color1 = tv.getTextColors(); ColorStateList color2 = a.getColorStateList(attr); return new ColorStateList[]{ color1, color2 }; } }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/NightOwl.java","main_file_content":"package com.asha.nightowllib; import android.app.Activity; import android.view.ContextThemeWrapper; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.view.Window; import com.asha.nightowllib.handler.ISkinHandler; import com.asha.nightowllib.handler.OwlHandlerManager; import com.asha.nightowllib.inflater.Factory4InjectedInflater; import com.asha.nightowllib.observer.IOwlObserver; import com.asha.nightowllib.observer.OwlViewContext; import com.asha.nightowllib.paint.ColorBox; import com.asha.nightowllib.paint.OwlPaintManager; import static com.asha.nightowllib.NightOwlUtil.checkNonNull; import static com.asha.nightowllib.NightOwlUtil.checkViewCollected; import static com.asha.nightowllib.NightOwlUtil.injectLayoutInflater; import static com.asha.nightowllib.NightOwlUtil.insertEmptyTag; import static com.asha.nightowllib.NightOwlUtil.insertViewContext; import static com.asha.nightowllib.NightOwlUtil.obtainSkinBox; import static com.asha.nightowllib.NightOwlUtil.obtainViewContext; public class NightOwl { private static final String TAG = \"NightOwl\"; private static final String WINDOW_INFLATER = \"mLayoutInflater\"; private static final String THEME_INFLATER = \"mInflater\"; private static NightOwl sInstance; static { NightOwlTable.init(); } private int mMode = 0; private IOwlObserver mOwlObserver; private NightOwl(){ } public static void owlBeforeCreate(Activity activity){ Window window = activity.getWindow(); LayoutInflater layoutInflater = window.getLayoutInflater(); LayoutInflater injectLayoutInflater1 = Factory4InjectedInflater.newInstance(layoutInflater, activity); injectLayoutInflater(injectLayoutInflater1 , activity.getWindow() , activity.getWindow().getClass() , WINDOW_INFLATER); LayoutInflater injectLayoutInflater2 = injectLayoutInflater1.cloneInContext(activity); injectLayoutInflater(injectLayoutInflater2 , activity , ContextThemeWrapper.class , THEME_INFLATER); View v = activity.getWindow().getDecorView(); OwlViewContext owlObservable = new OwlViewContext(); insertViewContext(v, owlObservable); } public static void owlAfterCreate(Activity activity){ View root = activity.getWindow().getDecorView(); OwlViewContext viewContext = obtainViewContext(root); checkNonNull(viewContext, \"OwlViewContext can not be null!\"); viewContext.setupWithCurrentActivity(activity); viewContext.notifyObserver(sharedInstance().mMode, activity); } public static void owlResume( Activity activity ){ NightOwl nightOwl = sharedInstance(); int targetMode = nightOwl.mMode; owlDressUp(targetMode, activity); } public static void owlNewDress( Activity activity ) { int current = owlCurrentMode() + 1; current %= 2; owlDressUp(current, activity); } public static void owlRecyclerFix(View view){ int mode = owlCurrentMode(); innerRefreshSkin(mode, view); } private static void owlDressUp( int mode, Activity activity ){ NightOwl owl = sharedInstance(); View root = activity.getWindow().getDecorView(); OwlViewContext viewContext = obtainViewContext(root); checkNonNull(viewContext, \"OwlViewContext can not be null!\"); if ( viewContext.needSync(mode) ){ innerRefreshSkin(mode, root); viewContext.notifyObserver(mode, activity); } owl.mMode = mode; if ( owl.mOwlObserver != null ) owl.mOwlObserver.onSkinChange(mode,activity); } public static void owlRegisterCustom(IOwlObserver view){ if ( view instanceof View ) { View target = (View) view; insertEmptyTag(target); view.onSkinChange(owlCurrentMode(), null); } else { throw new IllegalArgumentException(\"owlRegisterCustom param must be a instance of View\"); } } public static void owlRegisterHandler(Class<? extends ISkinHandler> clz, Class paintTable){ OwlHandlerManager.registerHandler(clz); OwlPaintManager.registerPaint(paintTable); } public static int owlCurrentMode(){ return sharedInstance().mMode; } private static void innerRefreshSkin(int mode, View view ){ if ( checkViewCollected(view) ){ ColorBox box = obtainSkinBox(view); if ( box != null ) box.refreshSkin(mode, view); if ( view instanceof IOwlObserver ){ ((IOwlObserver) view).onSkinChange(mode,null); } } if ( view instanceof ViewGroup){ ViewGroup vg = (ViewGroup) view; View sub; for (int i = 0; i < vg.getChildCount(); i++) { sub = vg.getChildAt(i); innerRefreshSkin(mode, sub); } } } private static NightOwl sharedInstance(){ checkNonNull(sInstance,\"You must create NightOwl in Application onCreate.\"); return sInstance; } public static Builder builder(){ return new Builder(); } public static class Builder { private int mode; private IOwlObserver owlObserver; public Builder defaultMode(int mode){ this.mode = mode; return this; } public Builder subscribedBy(IOwlObserver owlObserver){ this.owlObserver = owlObserver; return this; } public NightOwl create(){ if ( sInstance != null ) throw new RuntimeException(\"Do not create NightOwl again.\"); sInstance = new NightOwl(); sInstance.mMode = mode; sInstance.mOwlObserver = owlObserver; return sInstance; } } }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/NightOwlTable.java","file_content":"package com.asha.nightowllib; import com.asha.nightowllib.handler.annotations.OwlAttr; import com.asha.nightowllib.handler.annotations.OwlAttrScope; import com.asha.nightowllib.handler.annotations.OwlStyleable; import com.asha.nightowllib.handler.impls.ButtonHandler; import com.asha.nightowllib.handler.impls.ImageViewHandler; import com.asha.nightowllib.handler.impls.ListViewHandler; import com.asha.nightowllib.handler.impls.TextViewHandler; import com.asha.nightowllib.handler.impls.ViewHandler; import com.asha.nightowllib.paint.imps.AlphaPaint; import com.asha.nightowllib.paint.imps.BackgroundPaint; import com.asha.nightowllib.paint.imps.ImageViewSrcPaint; import com.asha.nightowllib.paint.imps.ListViewDividerPaint; import com.asha.nightowllib.paint.imps.ListViewSelectorPaint; import com.asha.nightowllib.paint.imps.TextColorPaint; import static com.asha.nightowllib.handler.OwlHandlerManager.registerHandler; public class NightOwlTable { protected static void init(){ registerHandler(ListViewHandler.class); registerHandler(ImageViewHandler.class); registerHandler(TextViewHandler.class); registerHandler(ButtonHandler.class); registerHandler(ViewHandler.class); } @OwlAttrScope(2000) public interface OwlView { @OwlStyleable int[] NightOwl_View = R.styleable.NightOwl_View; @OwlAttr(BackgroundPaint.class) int NightOwl_View_night_background = R.styleable.NightOwl_View_night_background; @OwlAttr(AlphaPaint.class) int NightOwl_View_night_alpha = R.styleable.NightOwl_View_night_alpha; } @OwlAttrScope(2100) public interface OwlTextView extends OwlView { @OwlStyleable int[] NightOwl_TextView = R.styleable.NightOwl_TextView; @OwlAttr(TextColorPaint.class) int NightOwl_TextView_night_textColor = R.styleable.NightOwl_TextView_night_textColor; @OwlAttr(TextColorPaint.class) int NightOwl_TextView_night_textColorHint = R.styleable.NightOwl_TextView_night_textColorHint; } @OwlAttrScope(2200) public interface OwlButton extends OwlTextView { } @OwlAttrScope(2300) public interface OwlImageView extends OwlView { @OwlStyleable int[] NightOwl_ImageView = R.styleable.NightOwl_ImageView; @OwlAttr(ImageViewSrcPaint.class) int NightOwl_ImageView_night_src = R.styleable.NightOwl_ImageView_night_src; } @OwlAttrScope(2400) public interface OwlListView extends OwlView { @OwlStyleable int[] NightOwl_ListView = R.styleable.NightOwl_ListView; @OwlAttr(ListViewDividerPaint.class) int NightOwl_ListView_night_divider = R.styleable.NightOwl_ListView_night_divider; @OwlAttr(ListViewSelectorPaint.class) int NightOwl_ListView_night_listSelector = R.styleable.NightOwl_ListView_night_listSelector; } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/ISkinHandler.java","file_content":"package com.asha.nightowllib.handler; import android.content.Context; import android.util.AttributeSet; import android.view.View; public interface ISkinHandler { void collect(int mode, View view, Context context, AttributeSet attrs); void onSkinChanged(int skin, View view); }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/OwlHandlerManager.java","file_content":"package com.asha.nightowllib.handler; import android.view.View; import com.asha.nightowllib.handler.ISkinHandler; import com.asha.nightowllib.handler.annotations.OwlHandle; import java.util.HashMap; import static com.asha.nightowllib.NightOwlUtil.newInstanceSafely; public class OwlHandlerManager { private static HashMap<Class,ISkinHandler> sHandlers = new HashMap<>(); private static HashMap<Class,Class<? extends ISkinHandler>> sHandlerTable = new HashMap<>(); private static Class<ISkinHandler> generateHandler() { return null; } public static void registerView(Class<? extends View> clz){ sHandlerTable.put(clz, generateHandler()); } public static void registerHandler(Class key, Class<? extends ISkinHandler> clz){ sHandlerTable.put(key,clz); } public static void registerHandler(Class<? extends ISkinHandler> clz){ OwlHandle owlHandle = clz.getAnnotation(OwlHandle.class); if ( owlHandle != null ){ Class<? extends View>[] keys = owlHandle.value(); for ( Class<? extends View> key : keys ) registerHandler(key,clz); } } public static ISkinHandler queryHandler(Class clz) { Class<? extends ISkinHandler> handlerClz = sHandlerTable.get(clz); while( handlerClz == null ){ clz = clz.getSuperclass(); handlerClz = sHandlerTable.get(clz); } ISkinHandler skinHandler = sHandlers.get(handlerClz); if ( skinHandler == null ) { skinHandler = newInstanceSafely(handlerClz); sHandlers.put(handlerClz, skinHandler); } return skinHandler; } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/inflater/Factory4InjectedInflater.java","file_content":"package com.asha.nightowllib.inflater; import android.content.Context; import android.os.Build; import android.view.LayoutInflater; public class Factory4InjectedInflater { public static LayoutInflater newInstance(LayoutInflater original, Context newContext) { final int version = Build.VERSION.SDK_INT; if (version >= 11) { return new InjectedInflaterV11(original,newContext); } else { return new InjectedInflaterV7(original,newContext); } } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/observer/IOwlObserver.java","file_content":"package com.asha.nightowllib.observer; import android.app.Activity; import android.util.AttributeSet; import android.view.View; public interface IOwlObserver { void onSkinChange(int mode, Activity activity); }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/observer/OwlViewContext.java","file_content":"package com.asha.nightowllib.observer; import android.app.Activity; import android.content.res.Resources; import android.content.res.TypedArray; import android.util.SparseArray; import com.asha.nightowllib.R; import com.asha.nightowllib.observer.impls.AdditionThemeObserver; import com.asha.nightowllib.observer.impls.NavBarObserver; import com.asha.nightowllib.observer.impls.StatusBarObserver; import static com.asha.nightowllib.NightOwlUtil.checkBeforeLollipop; public class OwlViewContext { private int mLastMode = -1; private SparseArray<IOwlObserverWithId> observers; public OwlViewContext() { observers = new SparseArray<>(); } public void registerObserver( IOwlObserverWithId owlObserver ){ observers.put(owlObserver.getObserverId(), owlObserver); } public void unregisterObserver( IOwlObserverWithId owlObserver ){ observers.delete(owlObserver.getObserverId()); } public void notifyObserver(int mode, Activity activity){ if ( mode == mLastMode ) return; mLastMode = mode; int size = observers.size(); for (int i = 0; i < size; i++) { IOwlObserverWithId owlObserver = observers.valueAt(i); owlObserver.onSkinChange(mode, activity); } } public void setupWithCurrentActivity(Activity activity){ Resources.Theme theme = activity.getTheme(); TypedArray a = theme.obtainStyledAttributes(R.styleable.NightOwl_Theme); if (a != null) { if ( !checkBeforeLollipop() ){ if ( a.hasValue(R.styleable.NightOwl_Theme_night_navigationBarColor) ) registerObserver(new NavBarObserver(activity, a, R.styleable.NightOwl_Theme_night_navigationBarColor)); if ( a.hasValue(R.styleable.NightOwl_Theme_night_statusBarColor) ) registerObserver(new StatusBarObserver(activity, a, R.styleable.NightOwl_Theme_night_statusBarColor)); } if ( a.hasValue(R.styleable.NightOwl_Theme_night_additionThemeDay) && a.hasValue(R.styleable.NightOwl_Theme_night_additionThemeNight) ){ int themeDay = a.getResourceId(R.styleable.NightOwl_Theme_night_additionThemeDay,0 ); int themeNight = a.getResourceId(R.styleable.NightOwl_Theme_night_additionThemeNight,0 ); registerObserver(new AdditionThemeObserver(themeDay,themeNight)); } a.recycle(); } } public boolean needSync( int target ){ return mLastMode != target; } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/paint/ColorBox.java","file_content":"package com.asha.nightowllib.paint; import android.util.SparseArray; import android.view.View; import static com.asha.nightowllib.paint.OwlPaintManager.queryPaint; public class ColorBox { private int mMode = -1; private SparseArray<Object[]> mBox; private ColorBox() { mBox = new SparseArray<>(4); } public void put(int attr, int scope, Object... objects){ mBox.put(attr + scope, objects); } public void refreshSkin(int mode, View view, boolean force){ if ( force ) mMode = -1; refreshSkin(mode,view); } public Object[] get(int attr, int scope){ return mBox.get( attr + scope ); } public void refreshSkin(int mode, View view){ if ( mMode != mode ){ int size = mBox.size(); for (int i = 0; i < size; i++) { int attrWithScope = mBox.keyAt(i); Object[] res = mBox.valueAt(i); IOwlPaint paint = queryPaint(attrWithScope); if ( paint != null ) paint.draw(view, res[mode]); } } mMode = mode; } public int getMode() { return mMode; } public static ColorBox newInstance() { return new ColorBox(); } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/paint/OwlPaintManager.java","file_content":"package com.asha.nightowllib.paint; import android.util.SparseArray; import com.asha.nightowllib.NightOwlTable; import com.asha.nightowllib.handler.annotations.OwlAttr; import com.asha.nightowllib.handler.annotations.OwlAttrScope; import java.lang.reflect.Field; import java.util.HashMap; import java.util.Map; import static com.asha.nightowllib.NightOwlUtil.getStaticFieldIntSafely; import static com.asha.nightowllib.NightOwlUtil.newInstanceSafely; public class OwlPaintManager { private static final SparseArray<Class< ? extends IOwlPaint>> sPaints = new SparseArray<>(); private static final Map<Class< ? extends IOwlPaint>,IOwlPaint> sPaintInstances = new HashMap<>(); static { Class<?>[] classes = NightOwlTable.class.getDeclaredClasses(); for ( Class subClz : classes ){ registerPaint(subClz); } } public static void registerPaint(Class subClz){ OwlAttrScope owlAttrScope = (OwlAttrScope) subClz.getAnnotation(OwlAttrScope.class); if ( owlAttrScope == null ) return; int scope = owlAttrScope.value(); Field[] fields = subClz.getDeclaredFields(); for (Field field : fields){ OwlAttr attr = field.getAnnotation(OwlAttr.class); if ( attr == null ) continue; int attrId = getStaticFieldIntSafely(field); Class< ? extends IOwlPaint> targetClz = attr.value(); sPaints.append( attrId + scope,targetClz ); } } public static IOwlPaint queryPaint(int attrWithScope){ Class< ? extends IOwlPaint> clz = sPaints.get(attrWithScope); if ( clz == null ) return null; IOwlPaint instance = sPaintInstances.get(clz); if ( instance == null ){ instance = newInstanceSafely(clz); sPaintInstances.put(clz,instance); } return instance; } }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/NightOwlUtil.java","main_file_content":"package com.asha.nightowllib; import android.util.Log; import android.view.LayoutInflater; import android.view.View; import com.asha.nightowllib.handler.ISkinHandler; import com.asha.nightowllib.observer.OwlViewContext; import com.asha.nightowllib.paint.ColorBox; import java.lang.reflect.Field; public class NightOwlUtil { public static final int NIGHT_OWL_VIEW_TAG = (2 << 24) | (1 << 23); private static final String TAG = \"NightOwlUtil\"; private static final Boolean EMPTY_TAG = true; public static void checkNonNull(Object obj,String msg){ if ( obj == null ) throw new NullPointerException(msg); } public static boolean checkHandler(ISkinHandler handler,View view){ if ( handler == null ){ Log.e(TAG, \"Can't find handler of clz:\" + view.getClass().getName()); return false; } return true; } public static boolean checkViewCollected(View view){ return view.getTag( NIGHT_OWL_VIEW_TAG ) != null; } public static boolean checkBeforeLollipop(){ if (android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.LOLLIPOP) return true; else return false; } public static void insertSkinBox(View view, ColorBox box){ view.setTag(NIGHT_OWL_VIEW_TAG, box); } public static void insertEmptyTag(View view){ view.setTag(NIGHT_OWL_VIEW_TAG, EMPTY_TAG); } public static ColorBox obtainSkinBox(View view){ Object box = view.getTag(NIGHT_OWL_VIEW_TAG); checkNonNull(box,\"wtf, it can't be null.\"); if ( box instanceof ColorBox ){ return (ColorBox) box; } else if ( box.equals(EMPTY_TAG) ) { Log.d(TAG, \"EMPTY_TAG...\"); return null; } else { Log.e(TAG, \"wtf, NIGHT_OWL_VIEW_TAG had been used by someone else.\"); } return null; } public static void insertViewContext(View view, OwlViewContext viewContext){ view.setTag(NIGHT_OWL_VIEW_TAG + 1,viewContext); } public static OwlViewContext obtainViewContext(View view){ Object observable = view.getTag(NIGHT_OWL_VIEW_TAG + 1); if ( observable != null && observable instanceof OwlViewContext){ return (OwlViewContext) observable; } return null; } public static int getFieldIntSafely(Class clz, String fieldName, Object instance){ try { Field field = clz.getDeclaredField(fieldName); field.setAccessible(true); return field.getInt(instance); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (NoSuchFieldException e) { e.printStackTrace(); } return 0; } public static int getStaticFieldIntSafely(Field field){ try { return field.getInt(null); } catch (IllegalAccessException e) { e.printStackTrace(); } return 0; } public static int[] getStaticFieldIntArraySafely(Field field){ try { return (int[]) field.get(null); } catch (IllegalAccessException e) { e.printStackTrace(); } return null; } public static <T> T newInstanceSafely(Class<T> clz){ try { return clz.newInstance(); } catch (InstantiationException e) { e.printStackTrace(); } catch (IllegalAccessException e) { e.printStackTrace(); } return null; } public static void injectLayoutInflater(LayoutInflater layoutInflater, Object src,Class clz, String name){ try { Field field = clz.getDeclaredField(name); field.setAccessible(true); field.set(src, layoutInflater); } catch (NoSuchFieldException e) { e.printStackTrace(); } catch (IllegalAccessException e) { e.printStackTrace(); } } }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/ISkinHandler.java","file_content":"package com.asha.nightowllib.handler; import android.content.Context; import android.util.AttributeSet; import android.view.View; public interface ISkinHandler { void collect(int mode, View view, Context context, AttributeSet attrs); void onSkinChanged(int skin, View view); }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/observer/OwlViewContext.java","file_content":"package com.asha.nightowllib.observer; import android.app.Activity; import android.content.res.Resources; import android.content.res.TypedArray; import android.util.SparseArray; import com.asha.nightowllib.R; import com.asha.nightowllib.observer.impls.AdditionThemeObserver; import com.asha.nightowllib.observer.impls.NavBarObserver; import com.asha.nightowllib.observer.impls.StatusBarObserver; import static com.asha.nightowllib.NightOwlUtil.checkBeforeLollipop; public class OwlViewContext { private int mLastMode = -1; private SparseArray<IOwlObserverWithId> observers; public OwlViewContext() { observers = new SparseArray<>(); } public void registerObserver( IOwlObserverWithId owlObserver ){ observers.put(owlObserver.getObserverId(), owlObserver); } public void unregisterObserver( IOwlObserverWithId owlObserver ){ observers.delete(owlObserver.getObserverId()); } public void notifyObserver(int mode, Activity activity){ if ( mode == mLastMode ) return; mLastMode = mode; int size = observers.size(); for (int i = 0; i < size; i++) { IOwlObserverWithId owlObserver = observers.valueAt(i); owlObserver.onSkinChange(mode, activity); } } public void setupWithCurrentActivity(Activity activity){ Resources.Theme theme = activity.getTheme(); TypedArray a = theme.obtainStyledAttributes(R.styleable.NightOwl_Theme); if (a != null) { if ( !checkBeforeLollipop() ){ if ( a.hasValue(R.styleable.NightOwl_Theme_night_navigationBarColor) ) registerObserver(new NavBarObserver(activity, a, R.styleable.NightOwl_Theme_night_navigationBarColor)); if ( a.hasValue(R.styleable.NightOwl_Theme_night_statusBarColor) ) registerObserver(new StatusBarObserver(activity, a, R.styleable.NightOwl_Theme_night_statusBarColor)); } if ( a.hasValue(R.styleable.NightOwl_Theme_night_additionThemeDay) && a.hasValue(R.styleable.NightOwl_Theme_night_additionThemeNight) ){ int themeDay = a.getResourceId(R.styleable.NightOwl_Theme_night_additionThemeDay,0 ); int themeNight = a.getResourceId(R.styleable.NightOwl_Theme_night_additionThemeNight,0 ); registerObserver(new AdditionThemeObserver(themeDay,themeNight)); } a.recycle(); } } public boolean needSync( int target ){ return mLastMode != target; } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/paint/ColorBox.java","file_content":"package com.asha.nightowllib.paint; import android.util.SparseArray; import android.view.View; import static com.asha.nightowllib.paint.OwlPaintManager.queryPaint; public class ColorBox { private int mMode = -1; private SparseArray<Object[]> mBox; private ColorBox() { mBox = new SparseArray<>(4); } public void put(int attr, int scope, Object... objects){ mBox.put(attr + scope, objects); } public void refreshSkin(int mode, View view, boolean force){ if ( force ) mMode = -1; refreshSkin(mode,view); } public Object[] get(int attr, int scope){ return mBox.get( attr + scope ); } public void refreshSkin(int mode, View view){ if ( mMode != mode ){ int size = mBox.size(); for (int i = 0; i < size; i++) { int attrWithScope = mBox.keyAt(i); Object[] res = mBox.valueAt(i); IOwlPaint paint = queryPaint(attrWithScope); if ( paint != null ) paint.draw(view, res[mode]); } } mMode = mode; } public int getMode() { return mMode; } public static ColorBox newInstance() { return new ColorBox(); } }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/paint/ColorBox.java","main_file_content":"package com.asha.nightowllib.paint; import android.util.SparseArray; import android.view.View; import static com.asha.nightowllib.paint.OwlPaintManager.queryPaint; public class ColorBox { private int mMode = -1; private SparseArray<Object[]> mBox; private ColorBox() { mBox = new SparseArray<>(4); } public void put(int attr, int scope, Object... objects){ mBox.put(attr + scope, objects); } public void refreshSkin(int mode, View view, boolean force){ if ( force ) mMode = -1; refreshSkin(mode,view); } public Object[] get(int attr, int scope){ return mBox.get( attr + scope ); } public void refreshSkin(int mode, View view){ if ( mMode != mode ){ int size = mBox.size(); for (int i = 0; i < size; i++) { int attrWithScope = mBox.keyAt(i); Object[] res = mBox.valueAt(i); IOwlPaint paint = queryPaint(attrWithScope); if ( paint != null ) paint.draw(view, res[mode]); } } mMode = mode; } public int getMode() { return mMode; } public static ColorBox newInstance() { return new ColorBox(); } }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/paint/IOwlPaint.java","file_content":"package com.asha.nightowllib.paint; import android.content.res.TypedArray; import android.view.View; public interface IOwlPaint { void draw(View view, Object value); Object[] setup(View view, TypedArray a, int attr); }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/paint/OwlPaintManager.java","main_file_content":"package com.asha.nightowllib.paint; import android.util.SparseArray; import com.asha.nightowllib.NightOwlTable; import com.asha.nightowllib.handler.annotations.OwlAttr; import com.asha.nightowllib.handler.annotations.OwlAttrScope; import java.lang.reflect.Field; import java.util.HashMap; import java.util.Map; import static com.asha.nightowllib.NightOwlUtil.getStaticFieldIntSafely; import static com.asha.nightowllib.NightOwlUtil.newInstanceSafely; public class OwlPaintManager { private static final SparseArray<Class< ? extends IOwlPaint>> sPaints = new SparseArray<>(); private static final Map<Class< ? extends IOwlPaint>,IOwlPaint> sPaintInstances = new HashMap<>(); static { Class<?>[] classes = NightOwlTable.class.getDeclaredClasses(); for ( Class subClz : classes ){ registerPaint(subClz); } } public static void registerPaint(Class subClz){ OwlAttrScope owlAttrScope = (OwlAttrScope) subClz.getAnnotation(OwlAttrScope.class); if ( owlAttrScope == null ) return; int scope = owlAttrScope.value(); Field[] fields = subClz.getDeclaredFields(); for (Field field : fields){ OwlAttr attr = field.getAnnotation(OwlAttr.class); if ( attr == null ) continue; int attrId = getStaticFieldIntSafely(field); Class< ? extends IOwlPaint> targetClz = attr.value(); sPaints.append( attrId + scope,targetClz ); } } public static IOwlPaint queryPaint(int attrWithScope){ Class< ? extends IOwlPaint> clz = sPaints.get(attrWithScope); if ( clz == null ) return null; IOwlPaint instance = sPaintInstances.get(clz); if ( instance == null ){ instance = newInstanceSafely(clz); sPaintInstances.put(clz,instance); } return instance; } }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/NightOwlTable.java","file_content":"package com.asha.nightowllib; import com.asha.nightowllib.handler.annotations.OwlAttr; import com.asha.nightowllib.handler.annotations.OwlAttrScope; import com.asha.nightowllib.handler.annotations.OwlStyleable; import com.asha.nightowllib.handler.impls.ButtonHandler; import com.asha.nightowllib.handler.impls.ImageViewHandler; import com.asha.nightowllib.handler.impls.ListViewHandler; import com.asha.nightowllib.handler.impls.TextViewHandler; import com.asha.nightowllib.handler.impls.ViewHandler; import com.asha.nightowllib.paint.imps.AlphaPaint; import com.asha.nightowllib.paint.imps.BackgroundPaint; import com.asha.nightowllib.paint.imps.ImageViewSrcPaint; import com.asha.nightowllib.paint.imps.ListViewDividerPaint; import com.asha.nightowllib.paint.imps.ListViewSelectorPaint; import com.asha.nightowllib.paint.imps.TextColorPaint; import static com.asha.nightowllib.handler.OwlHandlerManager.registerHandler; public class NightOwlTable { protected static void init(){ registerHandler(ListViewHandler.class); registerHandler(ImageViewHandler.class); registerHandler(TextViewHandler.class); registerHandler(ButtonHandler.class); registerHandler(ViewHandler.class); } @OwlAttrScope(2000) public interface OwlView { @OwlStyleable int[] NightOwl_View = R.styleable.NightOwl_View; @OwlAttr(BackgroundPaint.class) int NightOwl_View_night_background = R.styleable.NightOwl_View_night_background; @OwlAttr(AlphaPaint.class) int NightOwl_View_night_alpha = R.styleable.NightOwl_View_night_alpha; } @OwlAttrScope(2100) public interface OwlTextView extends OwlView { @OwlStyleable int[] NightOwl_TextView = R.styleable.NightOwl_TextView; @OwlAttr(TextColorPaint.class) int NightOwl_TextView_night_textColor = R.styleable.NightOwl_TextView_night_textColor; @OwlAttr(TextColorPaint.class) int NightOwl_TextView_night_textColorHint = R.styleable.NightOwl_TextView_night_textColorHint; } @OwlAttrScope(2200) public interface OwlButton extends OwlTextView { } @OwlAttrScope(2300) public interface OwlImageView extends OwlView { @OwlStyleable int[] NightOwl_ImageView = R.styleable.NightOwl_ImageView; @OwlAttr(ImageViewSrcPaint.class) int NightOwl_ImageView_night_src = R.styleable.NightOwl_ImageView_night_src; } @OwlAttrScope(2400) public interface OwlListView extends OwlView { @OwlStyleable int[] NightOwl_ListView = R.styleable.NightOwl_ListView; @OwlAttr(ListViewDividerPaint.class) int NightOwl_ListView_night_divider = R.styleable.NightOwl_ListView_night_divider; @OwlAttr(ListViewSelectorPaint.class) int NightOwl_ListView_night_listSelector = R.styleable.NightOwl_ListView_night_listSelector; } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/annotations/OwlAttr.java","file_content":"package com.asha.nightowllib.handler.annotations; import com.asha.nightowllib.paint.IOwlPaint; import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.FIELD) public @interface OwlAttr { Class<? extends IOwlPaint> value(); }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/annotations/OwlAttrScope.java","file_content":"package com.asha.nightowllib.handler.annotations; import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.TYPE) public @interface OwlAttrScope { int value(); }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/paint/IOwlPaint.java","file_content":"package com.asha.nightowllib.paint; import android.content.res.TypedArray; import android.view.View; public interface IOwlPaint { void draw(View view, Object value); Object[] setup(View view, TypedArray a, int attr); }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/paint/IOwlPaint.java","main_file_content":"package com.asha.nightowllib.paint; import android.content.res.TypedArray; import android.view.View; public interface IOwlPaint { void draw(View view, Object value); Object[] setup(View view, TypedArray a, int attr); }","dependencies":[]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/OwlHandlerManager.java","main_file_content":"package com.asha.nightowllib.handler; import android.view.View; import com.asha.nightowllib.handler.ISkinHandler; import com.asha.nightowllib.handler.annotations.OwlHandle; import java.util.HashMap; import static com.asha.nightowllib.NightOwlUtil.newInstanceSafely; public class OwlHandlerManager { private static HashMap<Class,ISkinHandler> sHandlers = new HashMap<>(); private static HashMap<Class,Class<? extends ISkinHandler>> sHandlerTable = new HashMap<>(); private static Class<ISkinHandler> generateHandler() { return null; } public static void registerView(Class<? extends View> clz){ sHandlerTable.put(clz, generateHandler()); } public static void registerHandler(Class key, Class<? extends ISkinHandler> clz){ sHandlerTable.put(key,clz); } public static void registerHandler(Class<? extends ISkinHandler> clz){ OwlHandle owlHandle = clz.getAnnotation(OwlHandle.class); if ( owlHandle != null ){ Class<? extends View>[] keys = owlHandle.value(); for ( Class<? extends View> key : keys ) registerHandler(key,clz); } } public static ISkinHandler queryHandler(Class clz) { Class<? extends ISkinHandler> handlerClz = sHandlerTable.get(clz); while( handlerClz == null ){ clz = clz.getSuperclass(); handlerClz = sHandlerTable.get(clz); } ISkinHandler skinHandler = sHandlers.get(handlerClz); if ( skinHandler == null ) { skinHandler = newInstanceSafely(handlerClz); sHandlers.put(handlerClz, skinHandler); } return skinHandler; } }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/ISkinHandler.java","file_content":"package com.asha.nightowllib.handler; import android.content.Context; import android.util.AttributeSet; import android.view.View; public interface ISkinHandler { void collect(int mode, View view, Context context, AttributeSet attrs); void onSkinChanged(int skin, View view); }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/annotations/OwlHandle.java","file_content":"package com.asha.nightowllib.handler.annotations; import android.view.View; import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.TYPE) public @interface OwlHandle { Class<? extends View>[] value(); }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/ISkinHandler.java","main_file_content":"package com.asha.nightowllib.handler; import android.content.Context; import android.util.AttributeSet; import android.view.View; public interface ISkinHandler { void collect(int mode, View view, Context context, AttributeSet attrs); void onSkinChanged(int skin, View view); }","dependencies":[]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/observer/IOwlObserver.java","main_file_content":"package com.asha.nightowllib.observer; import android.app.Activity; import android.util.AttributeSet; import android.view.View; public interface IOwlObserver { void onSkinChange(int mode, Activity activity); }","dependencies":[]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/observer/OwlViewContext.java","main_file_content":"package com.asha.nightowllib.observer; import android.app.Activity; import android.content.res.Resources; import android.content.res.TypedArray; import android.util.SparseArray; import com.asha.nightowllib.R; import com.asha.nightowllib.observer.impls.AdditionThemeObserver; import com.asha.nightowllib.observer.impls.NavBarObserver; import com.asha.nightowllib.observer.impls.StatusBarObserver; import static com.asha.nightowllib.NightOwlUtil.checkBeforeLollipop; public class OwlViewContext { private int mLastMode = -1; private SparseArray<IOwlObserverWithId> observers; public OwlViewContext() { observers = new SparseArray<>(); } public void registerObserver( IOwlObserverWithId owlObserver ){ observers.put(owlObserver.getObserverId(), owlObserver); } public void unregisterObserver( IOwlObserverWithId owlObserver ){ observers.delete(owlObserver.getObserverId()); } public void notifyObserver(int mode, Activity activity){ if ( mode == mLastMode ) return; mLastMode = mode; int size = observers.size(); for (int i = 0; i < size; i++) { IOwlObserverWithId owlObserver = observers.valueAt(i); owlObserver.onSkinChange(mode, activity); } } public void setupWithCurrentActivity(Activity activity){ Resources.Theme theme = activity.getTheme(); TypedArray a = theme.obtainStyledAttributes(R.styleable.NightOwl_Theme); if (a != null) { if ( !checkBeforeLollipop() ){ if ( a.hasValue(R.styleable.NightOwl_Theme_night_navigationBarColor) ) registerObserver(new NavBarObserver(activity, a, R.styleable.NightOwl_Theme_night_navigationBarColor)); if ( a.hasValue(R.styleable.NightOwl_Theme_night_statusBarColor) ) registerObserver(new StatusBarObserver(activity, a, R.styleable.NightOwl_Theme_night_statusBarColor)); } if ( a.hasValue(R.styleable.NightOwl_Theme_night_additionThemeDay) && a.hasValue(R.styleable.NightOwl_Theme_night_additionThemeNight) ){ int themeDay = a.getResourceId(R.styleable.NightOwl_Theme_night_additionThemeDay,0 ); int themeNight = a.getResourceId(R.styleable.NightOwl_Theme_night_additionThemeNight,0 ); registerObserver(new AdditionThemeObserver(themeDay,themeNight)); } a.recycle(); } } public boolean needSync( int target ){ return mLastMode != target; } }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/observer/IOwlObserverWithId.java","file_content":"package com.asha.nightowllib.observer; public interface IOwlObserverWithId extends IOwlObserver { int getObserverId(); }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/observer/impls/AdditionThemeObserver.java","file_content":"package com.asha.nightowllib.observer.impls; import android.app.Activity; import com.asha.nightowllib.observer.IOwlObserverWithId; public class AdditionThemeObserver implements IOwlObserverWithId { private static final String TAG = \"AdditionThemeObserver\"; private int mThemeDay; private int mThemeNight; public AdditionThemeObserver(int themeDay, int themeNight) { mThemeDay = themeDay; mThemeNight = themeNight; } @Override public int getObserverId() { return AdditionThemeObserver.this.hashCode(); } @Override public void onSkinChange(int mode, Activity activity) { int theme = mode == 0 ? mThemeDay : mThemeNight; activity.getTheme().applyStyle(theme, true); } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/observer/impls/NavBarObserver.java","file_content":"package com.asha.nightowllib.observer.impls; import android.annotation.TargetApi; import android.app.Activity; import android.content.res.TypedArray; import android.os.Build; import android.view.Window; import com.asha.nightowllib.observer.IOwlObserverWithId; public class NavBarObserver implements IOwlObserverWithId { int mNavigationBarColor; int mNavigationBarColorNight; @TargetApi(Build.VERSION_CODES.LOLLIPOP) public NavBarObserver(Activity activity, TypedArray a, int attr) { Window window = activity.getWindow(); mNavigationBarColor = window.getNavigationBarColor(); mNavigationBarColorNight = a.getColor(attr,mNavigationBarColor); } @Override public int getObserverId() { return NavBarObserver.this.hashCode(); } @TargetApi(Build.VERSION_CODES.LOLLIPOP) @Override public void onSkinChange(int mode, Activity activity) { activity.getWindow().setNavigationBarColor( mode == 0 ? mNavigationBarColor : mNavigationBarColorNight); } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/observer/impls/StatusBarObserver.java","file_content":"package com.asha.nightowllib.observer.impls; import android.annotation.TargetApi; import android.app.Activity; import android.content.res.TypedArray; import android.os.Build; import android.view.Window; import com.asha.nightowllib.observer.IOwlObserverWithId; public class StatusBarObserver implements IOwlObserverWithId { int mStatusBarColor; int mStatusBarColorNight; @TargetApi(Build.VERSION_CODES.LOLLIPOP) public StatusBarObserver(Activity activity, TypedArray a, int attr) { Window window = activity.getWindow(); mStatusBarColor = window.getStatusBarColor(); mStatusBarColorNight = a.getColor(attr,mStatusBarColorNight); } @Override public int getObserverId() { return StatusBarObserver.this.hashCode(); } @TargetApi(Build.VERSION_CODES.LOLLIPOP) @Override public void onSkinChange(int mode, Activity activity) { activity.getWindow().setStatusBarColor( mode == 0 ? mStatusBarColor : mStatusBarColorNight); } }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/observer/IOwlObserverWithId.java","main_file_content":"package com.asha.nightowllib.observer; public interface IOwlObserverWithId extends IOwlObserver { int getObserverId(); }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/observer/IOwlObserver.java","file_content":"package com.asha.nightowllib.observer; import android.app.Activity; import android.util.AttributeSet; import android.view.View; public interface IOwlObserver { void onSkinChange(int mode, Activity activity); }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/inflater/LastChance2Inflater.java","main_file_content":"package com.asha.nightowllib.inflater; import android.content.Context; import android.util.AttributeSet; import android.view.View; import static com.asha.nightowllib.NightOwlUtil.checkNonNull; public class LastChance2Inflater { private InjectedInflaterBase mInflater; protected LastChance2Inflater(InjectedInflaterBase inflater) { mInflater = inflater; } protected View lastChance2CreateView(View parent, String name, Context context, AttributeSet attrs){ View view = null; Object[] tmpConstructorArgs = mInflater.getConstructorArgs(); checkNonNull(tmpConstructorArgs,\"LayoutInflater mConstructorArgs is null.\"); final Object lastContext = tmpConstructorArgs[0]; tmpConstructorArgs[0] = context; try { if (-1 == name.indexOf('.')) { view = onCreateViewCompact(parent, name, attrs); } else { view = mInflater.createView(name, null, attrs); } } catch (ClassNotFoundException e) { e.printStackTrace(); } finally { tmpConstructorArgs[0] = lastContext; } return view; } private View onCreateViewCompact(View parent,String name,AttributeSet attrs) throws ClassNotFoundException { View view = null; if ( mInflater instanceof InjectedInflaterV11 ) view = mInflater.onCreateView( parent, name, attrs); else { view = mInflater.onCreateView( name, attrs); } return view; } }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/inflater/InjectedInflaterBase.java","file_content":"package com.asha.nightowllib.inflater; import android.content.Context; import android.util.AttributeSet; import android.view.LayoutInflater; import android.view.View; import com.asha.nightowllib.NightOwl; import com.asha.nightowllib.handler.ISkinHandler; import com.asha.nightowllib.observer.IOwlObserver; import java.lang.reflect.Field; import static com.asha.nightowllib.NightOwlUtil.checkHandler; import static com.asha.nightowllib.NightOwlUtil.checkViewCollected; import static com.asha.nightowllib.NightOwlUtil.insertEmptyTag; import static com.asha.nightowllib.handler.OwlHandlerManager.queryHandler; public class InjectedInflaterBase extends LayoutInflater { private static Field sConstructorArgsField; private static boolean sCheckConstructorArgsField; private static final String[] sClassPrefixList = { \"android.widget.\", \"android.webkit.\", \"android.app.\" }; private static final String TAG = \"InjectLayoutInflater\"; protected InjectedInflaterBase(LayoutInflater original, Context newContext) { super(original, newContext); } @Override public LayoutInflater cloneInContext(Context newContext) { return Factory4InjectedInflater.newInstance(this,newContext); } @Override protected View onCreateView(String name, AttributeSet attrs) throws ClassNotFoundException { View v = null; for (String prefix : sClassPrefixList) { try { v = createView(name, prefix, attrs); } catch (ClassNotFoundException e) { } } if ( v == null ){ v = super.onCreateView(name, attrs); } handleOnCreateView(v,name,attrs); return v; } @Override protected View onCreateView(View parent, String name, AttributeSet attrs) throws ClassNotFoundException { View v = super.onCreateView(parent, name, attrs); handleOnCreateView(v,name,attrs); return v; } public Object[] getConstructorArgs(){ if ( !sCheckConstructorArgsField ){ try { sConstructorArgsField = LayoutInflater.class.getDeclaredField(\"mConstructorArgs\"); sConstructorArgsField.setAccessible(true); } catch (NoSuchFieldException e) { e.printStackTrace(); } sCheckConstructorArgsField = true; } try { return (Object[]) sConstructorArgsField.get(this); } catch (IllegalAccessException e) { e.printStackTrace(); } return null; } public static void handleOnCreateView(View view,String name,AttributeSet attrs){ if ( view == null ) return; if ( checkViewCollected(view) ) return; ISkinHandler handler = queryHandler(view.getClass()); if ( !checkHandler(handler,view) ) return; int mode = NightOwl.owlCurrentMode(); handler.collect(mode, view, view.getContext(), attrs); if ( view instanceof IOwlObserver){ if ( !checkViewCollected(view) ) insertEmptyTag(view); ((IOwlObserver) view).onSkinChange( mode, null ); } } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/inflater/InjectedInflaterV11.java","file_content":"package com.asha.nightowllib.inflater; import android.annotation.TargetApi; import android.content.Context; import android.os.Build; import android.util.AttributeSet; import android.util.Log; import android.view.LayoutInflater; import android.view.View; import java.lang.reflect.Field; import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Method; public class InjectedInflaterV11 extends InjectedInflaterBase { private static final String TAG = \"InjectedInflaterV11\"; private static Method sSetPrivateFactoryMethod; private static Field sPrivateFactoryField; static { try { sSetPrivateFactoryMethod = LayoutInflater.class.getDeclaredMethod(\"setPrivateFactory\",Factory2.class); sSetPrivateFactoryMethod.setAccessible(true); sPrivateFactoryField = LayoutInflater.class.getDeclaredField(\"mPrivateFactory\"); sPrivateFactoryField.setAccessible(true); } catch (NoSuchMethodException e) { e.printStackTrace(); } catch (NoSuchFieldException e) { e.printStackTrace(); } } protected InjectedInflaterV11(LayoutInflater original, Context newContext) { super(original, newContext); installPrivateFactory(); } private void installPrivateFactory(){ try { Factory2 originPrivateFactory = (Factory2) sPrivateFactoryField.get(this); installPrivateFactory(originPrivateFactory); } catch (IllegalAccessException e) { e.printStackTrace(); } } private void installPrivateFactory(Factory2 originPrivateFactory){ try { if ( originPrivateFactory == null ) return; if ( originPrivateFactory instanceof PrivateFactoryWrapperImpl ) return; Factory2 privateFactory = PrivateFactoryWrapperImpl.wrap(originPrivateFactory, this); sPrivateFactoryField.set(this, privateFactory); } catch (IllegalAccessException e) { e.printStackTrace(); } } @Override public void setFactory(Factory factory) { if ( factory == null ) return; if ( getFactory() == null ){ super.setFactory(FactoryWrapperImpl.wrap(factory)); } } @TargetApi(Build.VERSION_CODES.HONEYCOMB) @Override public void setFactory2(Factory2 factory) { if ( factory == null ) return; if ( getFactory2() == null ){ super.setFactory(Factory2WrapperImpl.wrap(factory)); } } public void setPrivateFactory(Factory2 factory2){ Log.e(TAG, \"warning=== setPrivateFactory\"); try { Factory2 privateFactory = (Factory2) sPrivateFactoryField.get(this); if ( privateFactory != null && privateFactory instanceof PrivateFactoryWrapperImpl ){ privateFactory = ((PrivateFactoryWrapperImpl) privateFactory) .getCoreFactory(); sPrivateFactoryField.set(this, privateFactory); } sSetPrivateFactoryMethod.invoke(this, factory2); installPrivateFactory(factory2); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } } public static class FactoryWrapperImpl implements LayoutInflater.Factory { private LayoutInflater.Factory mFactory; private FactoryWrapperImpl(LayoutInflater.Factory factory) { mFactory = factory; } @Override public View onCreateView(String name, Context context, AttributeSet attrs) { View v = mFactory.onCreateView(name,context,attrs); InjectedInflaterBase.handleOnCreateView(v, name, attrs); return v; } public static LayoutInflater.Factory wrap(LayoutInflater.Factory factory){ return new FactoryWrapperImpl(factory); } } @TargetApi(Build.VERSION_CODES.HONEYCOMB) public static class Factory2WrapperImpl implements LayoutInflater.Factory2 { private LayoutInflater.Factory2 mFactory; private Factory2WrapperImpl(LayoutInflater.Factory2 factory) { mFactory = factory; } @Override public View onCreateView(String name, Context context, AttributeSet attrs) { View v = mFactory.onCreateView(name,context,attrs); InjectedInflaterBase.handleOnCreateView(v, name, attrs); return v; } @Override public View onCreateView(View parent, String name, Context context, AttributeSet attrs) { View v = mFactory.onCreateView(name,context,attrs); InjectedInflaterBase.handleOnCreateView(v, name, attrs); return v; } @TargetApi(Build.VERSION_CODES.HONEYCOMB) public static LayoutInflater.Factory2 wrap(LayoutInflater.Factory2 factory){ return new Factory2WrapperImpl(factory); } } @TargetApi(Build.VERSION_CODES.HONEYCOMB) public static class PrivateFactoryWrapperImpl extends LastChance2Inflater implements LayoutInflater.Factory2 { private LayoutInflater.Factory2 mFactory; private PrivateFactoryWrapperImpl(LayoutInflater.Factory2 factory, InjectedInflaterBase inflater) { super(inflater); mFactory = factory; } @Override public View onCreateView(String name, Context context, AttributeSet attrs) { View v = mFactory.onCreateView(name,context,attrs); if ( v == null ) v = lastChance2CreateView(null, name, context, attrs); InjectedInflaterBase.handleOnCreateView(v, name, attrs); return v; } @Override public View onCreateView(View parent, String name, Context context, AttributeSet attrs) { View v = mFactory.onCreateView(name,context,attrs); if ( v == null ) v = lastChance2CreateView(parent, name, context, attrs); InjectedInflaterBase.handleOnCreateView(v, name, attrs); return v; } public LayoutInflater.Factory2 getCoreFactory() { return mFactory; } @TargetApi(Build.VERSION_CODES.HONEYCOMB) public static LayoutInflater.Factory2 wrap(LayoutInflater.Factory2 factory , InjectedInflaterBase inflater){ return new PrivateFactoryWrapperImpl(factory,inflater); } } }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/inflater/InjectedInflaterBase.java","main_file_content":"package com.asha.nightowllib.inflater; import android.content.Context; import android.util.AttributeSet; import android.view.LayoutInflater; import android.view.View; import com.asha.nightowllib.NightOwl; import com.asha.nightowllib.handler.ISkinHandler; import com.asha.nightowllib.observer.IOwlObserver; import java.lang.reflect.Field; import static com.asha.nightowllib.NightOwlUtil.checkHandler; import static com.asha.nightowllib.NightOwlUtil.checkViewCollected; import static com.asha.nightowllib.NightOwlUtil.insertEmptyTag; import static com.asha.nightowllib.handler.OwlHandlerManager.queryHandler; public class InjectedInflaterBase extends LayoutInflater { private static Field sConstructorArgsField; private static boolean sCheckConstructorArgsField; private static final String[] sClassPrefixList = { \"android.widget.\", \"android.webkit.\", \"android.app.\" }; private static final String TAG = \"InjectLayoutInflater\"; protected InjectedInflaterBase(LayoutInflater original, Context newContext) { super(original, newContext); } @Override public LayoutInflater cloneInContext(Context newContext) { return Factory4InjectedInflater.newInstance(this,newContext); } @Override protected View onCreateView(String name, AttributeSet attrs) throws ClassNotFoundException { View v = null; for (String prefix : sClassPrefixList) { try { v = createView(name, prefix, attrs); } catch (ClassNotFoundException e) { } } if ( v == null ){ v = super.onCreateView(name, attrs); } handleOnCreateView(v,name,attrs); return v; } @Override protected View onCreateView(View parent, String name, AttributeSet attrs) throws ClassNotFoundException { View v = super.onCreateView(parent, name, attrs); handleOnCreateView(v,name,attrs); return v; } public Object[] getConstructorArgs(){ if ( !sCheckConstructorArgsField ){ try { sConstructorArgsField = LayoutInflater.class.getDeclaredField(\"mConstructorArgs\"); sConstructorArgsField.setAccessible(true); } catch (NoSuchFieldException e) { e.printStackTrace(); } sCheckConstructorArgsField = true; } try { return (Object[]) sConstructorArgsField.get(this); } catch (IllegalAccessException e) { e.printStackTrace(); } return null; } public static void handleOnCreateView(View view,String name,AttributeSet attrs){ if ( view == null ) return; if ( checkViewCollected(view) ) return; ISkinHandler handler = queryHandler(view.getClass()); if ( !checkHandler(handler,view) ) return; int mode = NightOwl.owlCurrentMode(); handler.collect(mode, view, view.getContext(), attrs); if ( view instanceof IOwlObserver){ if ( !checkViewCollected(view) ) insertEmptyTag(view); ((IOwlObserver) view).onSkinChange( mode, null ); } } }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/NightOwl.java","file_content":"package com.asha.nightowllib; import android.app.Activity; import android.view.ContextThemeWrapper; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.view.Window; import com.asha.nightowllib.handler.ISkinHandler; import com.asha.nightowllib.handler.OwlHandlerManager; import com.asha.nightowllib.inflater.Factory4InjectedInflater; import com.asha.nightowllib.observer.IOwlObserver; import com.asha.nightowllib.observer.OwlViewContext; import com.asha.nightowllib.paint.ColorBox; import com.asha.nightowllib.paint.OwlPaintManager; import static com.asha.nightowllib.NightOwlUtil.checkNonNull; import static com.asha.nightowllib.NightOwlUtil.checkViewCollected; import static com.asha.nightowllib.NightOwlUtil.injectLayoutInflater; import static com.asha.nightowllib.NightOwlUtil.insertEmptyTag; import static com.asha.nightowllib.NightOwlUtil.insertViewContext; import static com.asha.nightowllib.NightOwlUtil.obtainSkinBox; import static com.asha.nightowllib.NightOwlUtil.obtainViewContext; public class NightOwl { private static final String TAG = \"NightOwl\"; private static final String WINDOW_INFLATER = \"mLayoutInflater\"; private static final String THEME_INFLATER = \"mInflater\"; private static NightOwl sInstance; static { NightOwlTable.init(); } private int mMode = 0; private IOwlObserver mOwlObserver; private NightOwl(){ } public static void owlBeforeCreate(Activity activity){ Window window = activity.getWindow(); LayoutInflater layoutInflater = window.getLayoutInflater(); LayoutInflater injectLayoutInflater1 = Factory4InjectedInflater.newInstance(layoutInflater, activity); injectLayoutInflater(injectLayoutInflater1 , activity.getWindow() , activity.getWindow().getClass() , WINDOW_INFLATER); LayoutInflater injectLayoutInflater2 = injectLayoutInflater1.cloneInContext(activity); injectLayoutInflater(injectLayoutInflater2 , activity , ContextThemeWrapper.class , THEME_INFLATER); View v = activity.getWindow().getDecorView(); OwlViewContext owlObservable = new OwlViewContext(); insertViewContext(v, owlObservable); } public static void owlAfterCreate(Activity activity){ View root = activity.getWindow().getDecorView(); OwlViewContext viewContext = obtainViewContext(root); checkNonNull(viewContext, \"OwlViewContext can not be null!\"); viewContext.setupWithCurrentActivity(activity); viewContext.notifyObserver(sharedInstance().mMode, activity); } public static void owlResume( Activity activity ){ NightOwl nightOwl = sharedInstance(); int targetMode = nightOwl.mMode; owlDressUp(targetMode, activity); } public static void owlNewDress( Activity activity ) { int current = owlCurrentMode() + 1; current %= 2; owlDressUp(current, activity); } public static void owlRecyclerFix(View view){ int mode = owlCurrentMode(); innerRefreshSkin(mode, view); } private static void owlDressUp( int mode, Activity activity ){ NightOwl owl = sharedInstance(); View root = activity.getWindow().getDecorView(); OwlViewContext viewContext = obtainViewContext(root); checkNonNull(viewContext, \"OwlViewContext can not be null!\"); if ( viewContext.needSync(mode) ){ innerRefreshSkin(mode, root); viewContext.notifyObserver(mode, activity); } owl.mMode = mode; if ( owl.mOwlObserver != null ) owl.mOwlObserver.onSkinChange(mode,activity); } public static void owlRegisterCustom(IOwlObserver view){ if ( view instanceof View ) { View target = (View) view; insertEmptyTag(target); view.onSkinChange(owlCurrentMode(), null); } else { throw new IllegalArgumentException(\"owlRegisterCustom param must be a instance of View\"); } } public static void owlRegisterHandler(Class<? extends ISkinHandler> clz, Class paintTable){ OwlHandlerManager.registerHandler(clz); OwlPaintManager.registerPaint(paintTable); } public static int owlCurrentMode(){ return sharedInstance().mMode; } private static void innerRefreshSkin(int mode, View view ){ if ( checkViewCollected(view) ){ ColorBox box = obtainSkinBox(view); if ( box != null ) box.refreshSkin(mode, view); if ( view instanceof IOwlObserver ){ ((IOwlObserver) view).onSkinChange(mode,null); } } if ( view instanceof ViewGroup){ ViewGroup vg = (ViewGroup) view; View sub; for (int i = 0; i < vg.getChildCount(); i++) { sub = vg.getChildAt(i); innerRefreshSkin(mode, sub); } } } private static NightOwl sharedInstance(){ checkNonNull(sInstance,\"You must create NightOwl in Application onCreate.\"); return sInstance; } public static Builder builder(){ return new Builder(); } public static class Builder { private int mode; private IOwlObserver owlObserver; public Builder defaultMode(int mode){ this.mode = mode; return this; } public Builder subscribedBy(IOwlObserver owlObserver){ this.owlObserver = owlObserver; return this; } public NightOwl create(){ if ( sInstance != null ) throw new RuntimeException(\"Do not create NightOwl again.\"); sInstance = new NightOwl(); sInstance.mMode = mode; sInstance.mOwlObserver = owlObserver; return sInstance; } } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/ISkinHandler.java","file_content":"package com.asha.nightowllib.handler; import android.content.Context; import android.util.AttributeSet; import android.view.View; public interface ISkinHandler { void collect(int mode, View view, Context context, AttributeSet attrs); void onSkinChanged(int skin, View view); }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/inflater/Factory4InjectedInflater.java","file_content":"package com.asha.nightowllib.inflater; import android.content.Context; import android.os.Build; import android.view.LayoutInflater; public class Factory4InjectedInflater { public static LayoutInflater newInstance(LayoutInflater original, Context newContext) { final int version = Build.VERSION.SDK_INT; if (version >= 11) { return new InjectedInflaterV11(original,newContext); } else { return new InjectedInflaterV7(original,newContext); } } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/observer/IOwlObserver.java","file_content":"package com.asha.nightowllib.observer; import android.app.Activity; import android.util.AttributeSet; import android.view.View; public interface IOwlObserver { void onSkinChange(int mode, Activity activity); }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/inflater/InjectedInflaterV11.java","main_file_content":"package com.asha.nightowllib.inflater; import android.annotation.TargetApi; import android.content.Context; import android.os.Build; import android.util.AttributeSet; import android.util.Log; import android.view.LayoutInflater; import android.view.View; import java.lang.reflect.Field; import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Method; public class InjectedInflaterV11 extends InjectedInflaterBase { private static final String TAG = \"InjectedInflaterV11\"; private static Method sSetPrivateFactoryMethod; private static Field sPrivateFactoryField; static { try { sSetPrivateFactoryMethod = LayoutInflater.class.getDeclaredMethod(\"setPrivateFactory\",Factory2.class); sSetPrivateFactoryMethod.setAccessible(true); sPrivateFactoryField = LayoutInflater.class.getDeclaredField(\"mPrivateFactory\"); sPrivateFactoryField.setAccessible(true); } catch (NoSuchMethodException e) { e.printStackTrace(); } catch (NoSuchFieldException e) { e.printStackTrace(); } } protected InjectedInflaterV11(LayoutInflater original, Context newContext) { super(original, newContext); installPrivateFactory(); } private void installPrivateFactory(){ try { Factory2 originPrivateFactory = (Factory2) sPrivateFactoryField.get(this); installPrivateFactory(originPrivateFactory); } catch (IllegalAccessException e) { e.printStackTrace(); } } private void installPrivateFactory(Factory2 originPrivateFactory){ try { if ( originPrivateFactory == null ) return; if ( originPrivateFactory instanceof PrivateFactoryWrapperImpl ) return; Factory2 privateFactory = PrivateFactoryWrapperImpl.wrap(originPrivateFactory, this); sPrivateFactoryField.set(this, privateFactory); } catch (IllegalAccessException e) { e.printStackTrace(); } } @Override public void setFactory(Factory factory) { if ( factory == null ) return; if ( getFactory() == null ){ super.setFactory(FactoryWrapperImpl.wrap(factory)); } } @TargetApi(Build.VERSION_CODES.HONEYCOMB) @Override public void setFactory2(Factory2 factory) { if ( factory == null ) return; if ( getFactory2() == null ){ super.setFactory(Factory2WrapperImpl.wrap(factory)); } } public void setPrivateFactory(Factory2 factory2){ Log.e(TAG, \"warning=== setPrivateFactory\"); try { Factory2 privateFactory = (Factory2) sPrivateFactoryField.get(this); if ( privateFactory != null && privateFactory instanceof PrivateFactoryWrapperImpl ){ privateFactory = ((PrivateFactoryWrapperImpl) privateFactory) .getCoreFactory(); sPrivateFactoryField.set(this, privateFactory); } sSetPrivateFactoryMethod.invoke(this, factory2); installPrivateFactory(factory2); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } } public static class FactoryWrapperImpl implements LayoutInflater.Factory { private LayoutInflater.Factory mFactory; private FactoryWrapperImpl(LayoutInflater.Factory factory) { mFactory = factory; } @Override public View onCreateView(String name, Context context, AttributeSet attrs) { View v = mFactory.onCreateView(name,context,attrs); InjectedInflaterBase.handleOnCreateView(v, name, attrs); return v; } public static LayoutInflater.Factory wrap(LayoutInflater.Factory factory){ return new FactoryWrapperImpl(factory); } } @TargetApi(Build.VERSION_CODES.HONEYCOMB) public static class Factory2WrapperImpl implements LayoutInflater.Factory2 { private LayoutInflater.Factory2 mFactory; private Factory2WrapperImpl(LayoutInflater.Factory2 factory) { mFactory = factory; } @Override public View onCreateView(String name, Context context, AttributeSet attrs) { View v = mFactory.onCreateView(name,context,attrs); InjectedInflaterBase.handleOnCreateView(v, name, attrs); return v; } @Override public View onCreateView(View parent, String name, Context context, AttributeSet attrs) { View v = mFactory.onCreateView(name,context,attrs); InjectedInflaterBase.handleOnCreateView(v, name, attrs); return v; } @TargetApi(Build.VERSION_CODES.HONEYCOMB) public static LayoutInflater.Factory2 wrap(LayoutInflater.Factory2 factory){ return new Factory2WrapperImpl(factory); } } @TargetApi(Build.VERSION_CODES.HONEYCOMB) public static class PrivateFactoryWrapperImpl extends LastChance2Inflater implements LayoutInflater.Factory2 { private LayoutInflater.Factory2 mFactory; private PrivateFactoryWrapperImpl(LayoutInflater.Factory2 factory, InjectedInflaterBase inflater) { super(inflater); mFactory = factory; } @Override public View onCreateView(String name, Context context, AttributeSet attrs) { View v = mFactory.onCreateView(name,context,attrs); if ( v == null ) v = lastChance2CreateView(null, name, context, attrs); InjectedInflaterBase.handleOnCreateView(v, name, attrs); return v; } @Override public View onCreateView(View parent, String name, Context context, AttributeSet attrs) { View v = mFactory.onCreateView(name,context,attrs); if ( v == null ) v = lastChance2CreateView(parent, name, context, attrs); InjectedInflaterBase.handleOnCreateView(v, name, attrs); return v; } public LayoutInflater.Factory2 getCoreFactory() { return mFactory; } @TargetApi(Build.VERSION_CODES.HONEYCOMB) public static LayoutInflater.Factory2 wrap(LayoutInflater.Factory2 factory , InjectedInflaterBase inflater){ return new PrivateFactoryWrapperImpl(factory,inflater); } } }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/inflater/InjectedInflaterBase.java","file_content":"package com.asha.nightowllib.inflater; import android.content.Context; import android.util.AttributeSet; import android.view.LayoutInflater; import android.view.View; import com.asha.nightowllib.NightOwl; import com.asha.nightowllib.handler.ISkinHandler; import com.asha.nightowllib.observer.IOwlObserver; import java.lang.reflect.Field; import static com.asha.nightowllib.NightOwlUtil.checkHandler; import static com.asha.nightowllib.NightOwlUtil.checkViewCollected; import static com.asha.nightowllib.NightOwlUtil.insertEmptyTag; import static com.asha.nightowllib.handler.OwlHandlerManager.queryHandler; public class InjectedInflaterBase extends LayoutInflater { private static Field sConstructorArgsField; private static boolean sCheckConstructorArgsField; private static final String[] sClassPrefixList = { \"android.widget.\", \"android.webkit.\", \"android.app.\" }; private static final String TAG = \"InjectLayoutInflater\"; protected InjectedInflaterBase(LayoutInflater original, Context newContext) { super(original, newContext); } @Override public LayoutInflater cloneInContext(Context newContext) { return Factory4InjectedInflater.newInstance(this,newContext); } @Override protected View onCreateView(String name, AttributeSet attrs) throws ClassNotFoundException { View v = null; for (String prefix : sClassPrefixList) { try { v = createView(name, prefix, attrs); } catch (ClassNotFoundException e) { } } if ( v == null ){ v = super.onCreateView(name, attrs); } handleOnCreateView(v,name,attrs); return v; } @Override protected View onCreateView(View parent, String name, AttributeSet attrs) throws ClassNotFoundException { View v = super.onCreateView(parent, name, attrs); handleOnCreateView(v,name,attrs); return v; } public Object[] getConstructorArgs(){ if ( !sCheckConstructorArgsField ){ try { sConstructorArgsField = LayoutInflater.class.getDeclaredField(\"mConstructorArgs\"); sConstructorArgsField.setAccessible(true); } catch (NoSuchFieldException e) { e.printStackTrace(); } sCheckConstructorArgsField = true; } try { return (Object[]) sConstructorArgsField.get(this); } catch (IllegalAccessException e) { e.printStackTrace(); } return null; } public static void handleOnCreateView(View view,String name,AttributeSet attrs){ if ( view == null ) return; if ( checkViewCollected(view) ) return; ISkinHandler handler = queryHandler(view.getClass()); if ( !checkHandler(handler,view) ) return; int mode = NightOwl.owlCurrentMode(); handler.collect(mode, view, view.getContext(), attrs); if ( view instanceof IOwlObserver){ if ( !checkViewCollected(view) ) insertEmptyTag(view); ((IOwlObserver) view).onSkinChange( mode, null ); } } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/inflater/LastChance2Inflater.java","file_content":"package com.asha.nightowllib.inflater; import android.content.Context; import android.util.AttributeSet; import android.view.View; import static com.asha.nightowllib.NightOwlUtil.checkNonNull; public class LastChance2Inflater { private InjectedInflaterBase mInflater; protected LastChance2Inflater(InjectedInflaterBase inflater) { mInflater = inflater; } protected View lastChance2CreateView(View parent, String name, Context context, AttributeSet attrs){ View view = null; Object[] tmpConstructorArgs = mInflater.getConstructorArgs(); checkNonNull(tmpConstructorArgs,\"LayoutInflater mConstructorArgs is null.\"); final Object lastContext = tmpConstructorArgs[0]; tmpConstructorArgs[0] = context; try { if (-1 == name.indexOf('.')) { view = onCreateViewCompact(parent, name, attrs); } else { view = mInflater.createView(name, null, attrs); } } catch (ClassNotFoundException e) { e.printStackTrace(); } finally { tmpConstructorArgs[0] = lastContext; } return view; } private View onCreateViewCompact(View parent,String name,AttributeSet attrs) throws ClassNotFoundException { View view = null; if ( mInflater instanceof InjectedInflaterV11 ) view = mInflater.onCreateView( parent, name, attrs); else { view = mInflater.onCreateView( name, attrs); } return view; } }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/inflater/Factory4InjectedInflater.java","main_file_content":"package com.asha.nightowllib.inflater; import android.content.Context; import android.os.Build; import android.view.LayoutInflater; public class Factory4InjectedInflater { public static LayoutInflater newInstance(LayoutInflater original, Context newContext) { final int version = Build.VERSION.SDK_INT; if (version >= 11) { return new InjectedInflaterV11(original,newContext); } else { return new InjectedInflaterV7(original,newContext); } } }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/inflater/InjectedInflaterV11.java","file_content":"package com.asha.nightowllib.inflater; import android.annotation.TargetApi; import android.content.Context; import android.os.Build; import android.util.AttributeSet; import android.util.Log; import android.view.LayoutInflater; import android.view.View; import java.lang.reflect.Field; import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Method; public class InjectedInflaterV11 extends InjectedInflaterBase { private static final String TAG = \"InjectedInflaterV11\"; private static Method sSetPrivateFactoryMethod; private static Field sPrivateFactoryField; static { try { sSetPrivateFactoryMethod = LayoutInflater.class.getDeclaredMethod(\"setPrivateFactory\",Factory2.class); sSetPrivateFactoryMethod.setAccessible(true); sPrivateFactoryField = LayoutInflater.class.getDeclaredField(\"mPrivateFactory\"); sPrivateFactoryField.setAccessible(true); } catch (NoSuchMethodException e) { e.printStackTrace(); } catch (NoSuchFieldException e) { e.printStackTrace(); } } protected InjectedInflaterV11(LayoutInflater original, Context newContext) { super(original, newContext); installPrivateFactory(); } private void installPrivateFactory(){ try { Factory2 originPrivateFactory = (Factory2) sPrivateFactoryField.get(this); installPrivateFactory(originPrivateFactory); } catch (IllegalAccessException e) { e.printStackTrace(); } } private void installPrivateFactory(Factory2 originPrivateFactory){ try { if ( originPrivateFactory == null ) return; if ( originPrivateFactory instanceof PrivateFactoryWrapperImpl ) return; Factory2 privateFactory = PrivateFactoryWrapperImpl.wrap(originPrivateFactory, this); sPrivateFactoryField.set(this, privateFactory); } catch (IllegalAccessException e) { e.printStackTrace(); } } @Override public void setFactory(Factory factory) { if ( factory == null ) return; if ( getFactory() == null ){ super.setFactory(FactoryWrapperImpl.wrap(factory)); } } @TargetApi(Build.VERSION_CODES.HONEYCOMB) @Override public void setFactory2(Factory2 factory) { if ( factory == null ) return; if ( getFactory2() == null ){ super.setFactory(Factory2WrapperImpl.wrap(factory)); } } public void setPrivateFactory(Factory2 factory2){ Log.e(TAG, \"warning=== setPrivateFactory\"); try { Factory2 privateFactory = (Factory2) sPrivateFactoryField.get(this); if ( privateFactory != null && privateFactory instanceof PrivateFactoryWrapperImpl ){ privateFactory = ((PrivateFactoryWrapperImpl) privateFactory) .getCoreFactory(); sPrivateFactoryField.set(this, privateFactory); } sSetPrivateFactoryMethod.invoke(this, factory2); installPrivateFactory(factory2); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } } public static class FactoryWrapperImpl implements LayoutInflater.Factory { private LayoutInflater.Factory mFactory; private FactoryWrapperImpl(LayoutInflater.Factory factory) { mFactory = factory; } @Override public View onCreateView(String name, Context context, AttributeSet attrs) { View v = mFactory.onCreateView(name,context,attrs); InjectedInflaterBase.handleOnCreateView(v, name, attrs); return v; } public static LayoutInflater.Factory wrap(LayoutInflater.Factory factory){ return new FactoryWrapperImpl(factory); } } @TargetApi(Build.VERSION_CODES.HONEYCOMB) public static class Factory2WrapperImpl implements LayoutInflater.Factory2 { private LayoutInflater.Factory2 mFactory; private Factory2WrapperImpl(LayoutInflater.Factory2 factory) { mFactory = factory; } @Override public View onCreateView(String name, Context context, AttributeSet attrs) { View v = mFactory.onCreateView(name,context,attrs); InjectedInflaterBase.handleOnCreateView(v, name, attrs); return v; } @Override public View onCreateView(View parent, String name, Context context, AttributeSet attrs) { View v = mFactory.onCreateView(name,context,attrs); InjectedInflaterBase.handleOnCreateView(v, name, attrs); return v; } @TargetApi(Build.VERSION_CODES.HONEYCOMB) public static LayoutInflater.Factory2 wrap(LayoutInflater.Factory2 factory){ return new Factory2WrapperImpl(factory); } } @TargetApi(Build.VERSION_CODES.HONEYCOMB) public static class PrivateFactoryWrapperImpl extends LastChance2Inflater implements LayoutInflater.Factory2 { private LayoutInflater.Factory2 mFactory; private PrivateFactoryWrapperImpl(LayoutInflater.Factory2 factory, InjectedInflaterBase inflater) { super(inflater); mFactory = factory; } @Override public View onCreateView(String name, Context context, AttributeSet attrs) { View v = mFactory.onCreateView(name,context,attrs); if ( v == null ) v = lastChance2CreateView(null, name, context, attrs); InjectedInflaterBase.handleOnCreateView(v, name, attrs); return v; } @Override public View onCreateView(View parent, String name, Context context, AttributeSet attrs) { View v = mFactory.onCreateView(name,context,attrs); if ( v == null ) v = lastChance2CreateView(parent, name, context, attrs); InjectedInflaterBase.handleOnCreateView(v, name, attrs); return v; } public LayoutInflater.Factory2 getCoreFactory() { return mFactory; } @TargetApi(Build.VERSION_CODES.HONEYCOMB) public static LayoutInflater.Factory2 wrap(LayoutInflater.Factory2 factory , InjectedInflaterBase inflater){ return new PrivateFactoryWrapperImpl(factory,inflater); } } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/inflater/InjectedInflaterV7.java","file_content":"package com.asha.nightowllib.inflater; import android.content.Context; import android.util.AttributeSet; import android.view.LayoutInflater; import android.view.View; import java.lang.reflect.Field; public class InjectedInflaterV7 extends InjectedInflaterBase { private static Field sFactoryField; private static boolean sCheckFactoryField; protected InjectedInflaterV7(LayoutInflater original, Context newContext) { super(original, newContext); installFactory(); } private void installFactory(){ Factory factory = getFactory(); if ( factory == null ) return; if ( factory instanceof FactoryWrapperImpl ) return; Factory newFactory = FactoryWrapperImpl.wrap(this,factory); ensureMethod(); try { sFactoryField.set(this,newFactory); } catch (IllegalAccessException e) { e.printStackTrace(); } } @Override public void setFactory(Factory factory) { if ( factory == null ) return; if ( getFactory() == null ){ super.setFactory(FactoryWrapperImpl.wrap(this,factory)); } } private static void ensureMethod(){ if ( sCheckFactoryField ) return; try { sFactoryField = LayoutInflater.class.getDeclaredField(\"mFactory\"); sFactoryField.setAccessible(true); } catch (NoSuchFieldException e) { e.printStackTrace(); } sCheckFactoryField = true; } public static class FactoryWrapperImpl extends LastChance2Inflater implements LayoutInflater.Factory { private LayoutInflater.Factory mFactory; private FactoryWrapperImpl(InjectedInflaterBase inflater, LayoutInflater.Factory factory) { super(inflater); mFactory = factory; } @Override public View onCreateView(String name, Context context, AttributeSet attrs) { View v = mFactory.onCreateView(name,context,attrs); if ( v == null ) v = lastChance2CreateView(null, name, context, attrs); InjectedInflaterBase.handleOnCreateView(v, name, attrs); return v; } public static LayoutInflater.Factory wrap(InjectedInflaterBase inflater, LayoutInflater.Factory factory){ return new FactoryWrapperImpl(inflater,factory); } } }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/inflater/InjectedInflaterV7.java","main_file_content":"package com.asha.nightowllib.inflater; import android.content.Context; import android.util.AttributeSet; import android.view.LayoutInflater; import android.view.View; import java.lang.reflect.Field; public class InjectedInflaterV7 extends InjectedInflaterBase { private static Field sFactoryField; private static boolean sCheckFactoryField; protected InjectedInflaterV7(LayoutInflater original, Context newContext) { super(original, newContext); installFactory(); } private void installFactory(){ Factory factory = getFactory(); if ( factory == null ) return; if ( factory instanceof FactoryWrapperImpl ) return; Factory newFactory = FactoryWrapperImpl.wrap(this,factory); ensureMethod(); try { sFactoryField.set(this,newFactory); } catch (IllegalAccessException e) { e.printStackTrace(); } } @Override public void setFactory(Factory factory) { if ( factory == null ) return; if ( getFactory() == null ){ super.setFactory(FactoryWrapperImpl.wrap(this,factory)); } } private static void ensureMethod(){ if ( sCheckFactoryField ) return; try { sFactoryField = LayoutInflater.class.getDeclaredField(\"mFactory\"); sFactoryField.setAccessible(true); } catch (NoSuchFieldException e) { e.printStackTrace(); } sCheckFactoryField = true; } public static class FactoryWrapperImpl extends LastChance2Inflater implements LayoutInflater.Factory { private LayoutInflater.Factory mFactory; private FactoryWrapperImpl(InjectedInflaterBase inflater, LayoutInflater.Factory factory) { super(inflater); mFactory = factory; } @Override public View onCreateView(String name, Context context, AttributeSet attrs) { View v = mFactory.onCreateView(name,context,attrs); if ( v == null ) v = lastChance2CreateView(null, name, context, attrs); InjectedInflaterBase.handleOnCreateView(v, name, attrs); return v; } public static LayoutInflater.Factory wrap(InjectedInflaterBase inflater, LayoutInflater.Factory factory){ return new FactoryWrapperImpl(inflater,factory); } } }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/inflater/InjectedInflaterBase.java","file_content":"package com.asha.nightowllib.inflater; import android.content.Context; import android.util.AttributeSet; import android.view.LayoutInflater; import android.view.View; import com.asha.nightowllib.NightOwl; import com.asha.nightowllib.handler.ISkinHandler; import com.asha.nightowllib.observer.IOwlObserver; import java.lang.reflect.Field; import static com.asha.nightowllib.NightOwlUtil.checkHandler; import static com.asha.nightowllib.NightOwlUtil.checkViewCollected; import static com.asha.nightowllib.NightOwlUtil.insertEmptyTag; import static com.asha.nightowllib.handler.OwlHandlerManager.queryHandler; public class InjectedInflaterBase extends LayoutInflater { private static Field sConstructorArgsField; private static boolean sCheckConstructorArgsField; private static final String[] sClassPrefixList = { \"android.widget.\", \"android.webkit.\", \"android.app.\" }; private static final String TAG = \"InjectLayoutInflater\"; protected InjectedInflaterBase(LayoutInflater original, Context newContext) { super(original, newContext); } @Override public LayoutInflater cloneInContext(Context newContext) { return Factory4InjectedInflater.newInstance(this,newContext); } @Override protected View onCreateView(String name, AttributeSet attrs) throws ClassNotFoundException { View v = null; for (String prefix : sClassPrefixList) { try { v = createView(name, prefix, attrs); } catch (ClassNotFoundException e) { } } if ( v == null ){ v = super.onCreateView(name, attrs); } handleOnCreateView(v,name,attrs); return v; } @Override protected View onCreateView(View parent, String name, AttributeSet attrs) throws ClassNotFoundException { View v = super.onCreateView(parent, name, attrs); handleOnCreateView(v,name,attrs); return v; } public Object[] getConstructorArgs(){ if ( !sCheckConstructorArgsField ){ try { sConstructorArgsField = LayoutInflater.class.getDeclaredField(\"mConstructorArgs\"); sConstructorArgsField.setAccessible(true); } catch (NoSuchFieldException e) { e.printStackTrace(); } sCheckConstructorArgsField = true; } try { return (Object[]) sConstructorArgsField.get(this); } catch (IllegalAccessException e) { e.printStackTrace(); } return null; } public static void handleOnCreateView(View view,String name,AttributeSet attrs){ if ( view == null ) return; if ( checkViewCollected(view) ) return; ISkinHandler handler = queryHandler(view.getClass()); if ( !checkHandler(handler,view) ) return; int mode = NightOwl.owlCurrentMode(); handler.collect(mode, view, view.getContext(), attrs); if ( view instanceof IOwlObserver){ if ( !checkViewCollected(view) ) insertEmptyTag(view); ((IOwlObserver) view).onSkinChange( mode, null ); } } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/inflater/LastChance2Inflater.java","file_content":"package com.asha.nightowllib.inflater; import android.content.Context; import android.util.AttributeSet; import android.view.View; import static com.asha.nightowllib.NightOwlUtil.checkNonNull; public class LastChance2Inflater { private InjectedInflaterBase mInflater; protected LastChance2Inflater(InjectedInflaterBase inflater) { mInflater = inflater; } protected View lastChance2CreateView(View parent, String name, Context context, AttributeSet attrs){ View view = null; Object[] tmpConstructorArgs = mInflater.getConstructorArgs(); checkNonNull(tmpConstructorArgs,\"LayoutInflater mConstructorArgs is null.\"); final Object lastContext = tmpConstructorArgs[0]; tmpConstructorArgs[0] = context; try { if (-1 == name.indexOf('.')) { view = onCreateViewCompact(parent, name, attrs); } else { view = mInflater.createView(name, null, attrs); } } catch (ClassNotFoundException e) { e.printStackTrace(); } finally { tmpConstructorArgs[0] = lastContext; } return view; } private View onCreateViewCompact(View parent,String name,AttributeSet attrs) throws ClassNotFoundException { View view = null; if ( mInflater instanceof InjectedInflaterV11 ) view = mInflater.onCreateView( parent, name, attrs); else { view = mInflater.onCreateView( name, attrs); } return view; } }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/observer/impls/NavBarObserver.java","main_file_content":"package com.asha.nightowllib.observer.impls; import android.annotation.TargetApi; import android.app.Activity; import android.content.res.TypedArray; import android.os.Build; import android.view.Window; import com.asha.nightowllib.observer.IOwlObserverWithId; public class NavBarObserver implements IOwlObserverWithId { int mNavigationBarColor; int mNavigationBarColorNight; @TargetApi(Build.VERSION_CODES.LOLLIPOP) public NavBarObserver(Activity activity, TypedArray a, int attr) { Window window = activity.getWindow(); mNavigationBarColor = window.getNavigationBarColor(); mNavigationBarColorNight = a.getColor(attr,mNavigationBarColor); } @Override public int getObserverId() { return NavBarObserver.this.hashCode(); } @TargetApi(Build.VERSION_CODES.LOLLIPOP) @Override public void onSkinChange(int mode, Activity activity) { activity.getWindow().setNavigationBarColor( mode == 0 ? mNavigationBarColor : mNavigationBarColorNight); } }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/observer/IOwlObserverWithId.java","file_content":"package com.asha.nightowllib.observer; public interface IOwlObserverWithId extends IOwlObserver { int getObserverId(); }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/observer/impls/AdditionThemeObserver.java","main_file_content":"package com.asha.nightowllib.observer.impls; import android.app.Activity; import com.asha.nightowllib.observer.IOwlObserverWithId; public class AdditionThemeObserver implements IOwlObserverWithId { private static final String TAG = \"AdditionThemeObserver\"; private int mThemeDay; private int mThemeNight; public AdditionThemeObserver(int themeDay, int themeNight) { mThemeDay = themeDay; mThemeNight = themeNight; } @Override public int getObserverId() { return AdditionThemeObserver.this.hashCode(); } @Override public void onSkinChange(int mode, Activity activity) { int theme = mode == 0 ? mThemeDay : mThemeNight; activity.getTheme().applyStyle(theme, true); } }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/observer/IOwlObserverWithId.java","file_content":"package com.asha.nightowllib.observer; public interface IOwlObserverWithId extends IOwlObserver { int getObserverId(); }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/observer/impls/StatusBarObserver.java","main_file_content":"package com.asha.nightowllib.observer.impls; import android.annotation.TargetApi; import android.app.Activity; import android.content.res.TypedArray; import android.os.Build; import android.view.Window; import com.asha.nightowllib.observer.IOwlObserverWithId; public class StatusBarObserver implements IOwlObserverWithId { int mStatusBarColor; int mStatusBarColorNight; @TargetApi(Build.VERSION_CODES.LOLLIPOP) public StatusBarObserver(Activity activity, TypedArray a, int attr) { Window window = activity.getWindow(); mStatusBarColor = window.getStatusBarColor(); mStatusBarColorNight = a.getColor(attr,mStatusBarColorNight); } @Override public int getObserverId() { return StatusBarObserver.this.hashCode(); } @TargetApi(Build.VERSION_CODES.LOLLIPOP) @Override public void onSkinChange(int mode, Activity activity) { activity.getWindow().setStatusBarColor( mode == 0 ? mStatusBarColor : mStatusBarColorNight); } }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/observer/IOwlObserverWithId.java","file_content":"package com.asha.nightowllib.observer; public interface IOwlObserverWithId extends IOwlObserver { int getObserverId(); }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/impls/ListViewHandler.java","main_file_content":"package com.asha.nightowllib.handler.impls; import android.widget.ListView; import com.asha.nightowllib.NightOwlTable; import com.asha.nightowllib.handler.annotations.OwlHandle; @OwlHandle(ListView.class) public class ListViewHandler extends AbsSkinHandler implements NightOwlTable.OwlListView { }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/NightOwlTable.java","file_content":"package com.asha.nightowllib; import com.asha.nightowllib.handler.annotations.OwlAttr; import com.asha.nightowllib.handler.annotations.OwlAttrScope; import com.asha.nightowllib.handler.annotations.OwlStyleable; import com.asha.nightowllib.handler.impls.ButtonHandler; import com.asha.nightowllib.handler.impls.ImageViewHandler; import com.asha.nightowllib.handler.impls.ListViewHandler; import com.asha.nightowllib.handler.impls.TextViewHandler; import com.asha.nightowllib.handler.impls.ViewHandler; import com.asha.nightowllib.paint.imps.AlphaPaint; import com.asha.nightowllib.paint.imps.BackgroundPaint; import com.asha.nightowllib.paint.imps.ImageViewSrcPaint; import com.asha.nightowllib.paint.imps.ListViewDividerPaint; import com.asha.nightowllib.paint.imps.ListViewSelectorPaint; import com.asha.nightowllib.paint.imps.TextColorPaint; import static com.asha.nightowllib.handler.OwlHandlerManager.registerHandler; public class NightOwlTable { protected static void init(){ registerHandler(ListViewHandler.class); registerHandler(ImageViewHandler.class); registerHandler(TextViewHandler.class); registerHandler(ButtonHandler.class); registerHandler(ViewHandler.class); } @OwlAttrScope(2000) public interface OwlView { @OwlStyleable int[] NightOwl_View = R.styleable.NightOwl_View; @OwlAttr(BackgroundPaint.class) int NightOwl_View_night_background = R.styleable.NightOwl_View_night_background; @OwlAttr(AlphaPaint.class) int NightOwl_View_night_alpha = R.styleable.NightOwl_View_night_alpha; } @OwlAttrScope(2100) public interface OwlTextView extends OwlView { @OwlStyleable int[] NightOwl_TextView = R.styleable.NightOwl_TextView; @OwlAttr(TextColorPaint.class) int NightOwl_TextView_night_textColor = R.styleable.NightOwl_TextView_night_textColor; @OwlAttr(TextColorPaint.class) int NightOwl_TextView_night_textColorHint = R.styleable.NightOwl_TextView_night_textColorHint; } @OwlAttrScope(2200) public interface OwlButton extends OwlTextView { } @OwlAttrScope(2300) public interface OwlImageView extends OwlView { @OwlStyleable int[] NightOwl_ImageView = R.styleable.NightOwl_ImageView; @OwlAttr(ImageViewSrcPaint.class) int NightOwl_ImageView_night_src = R.styleable.NightOwl_ImageView_night_src; } @OwlAttrScope(2400) public interface OwlListView extends OwlView { @OwlStyleable int[] NightOwl_ListView = R.styleable.NightOwl_ListView; @OwlAttr(ListViewDividerPaint.class) int NightOwl_ListView_night_divider = R.styleable.NightOwl_ListView_night_divider; @OwlAttr(ListViewSelectorPaint.class) int NightOwl_ListView_night_listSelector = R.styleable.NightOwl_ListView_night_listSelector; } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/impls/AbsSkinHandler.java","file_content":"package com.asha.nightowllib.handler.impls; import android.content.Context; import android.content.res.Resources; import android.content.res.TypedArray; import android.util.AttributeSet; import android.util.Log; import android.view.View; import com.asha.nightowllib.handler.ISkinHandler; import com.asha.nightowllib.handler.annotations.OwlAttrScope; import com.asha.nightowllib.handler.annotations.OwlStyleable; import com.asha.nightowllib.handler.annotations.OwlSysStyleable; import com.asha.nightowllib.paint.ColorBox; import com.asha.nightowllib.paint.IOwlPaint; import java.lang.reflect.Field; import static com.asha.nightowllib.NightOwlUtil.getStaticFieldIntArraySafely; import static com.asha.nightowllib.NightOwlUtil.insertSkinBox; import static com.asha.nightowllib.NightOwlUtil.obtainSkinBox; import static com.asha.nightowllib.paint.OwlPaintManager.queryPaint; public abstract class AbsSkinHandler implements ISkinHandler { private final static String ANDROID_XML = \"http: private static final String TAG = \"AbsSkinHandler\"; @Override public void collect(int mode, View view, Context context, AttributeSet attrs) { Log.d(TAG, String.format(\"collected %s %s %s\", view, context, attrs)); ColorBox box = ColorBox.newInstance(); onBeforeCollect(view,context,attrs,box); final Resources.Theme theme = context.getTheme(); int systemStyleResId = 0; Class clz = this.getClass(); OwlSysStyleable systemStyleable = (OwlSysStyleable) clz.getAnnotation(OwlSysStyleable.class); if ( systemStyleable != null ){ String value = systemStyleable.value(); systemStyleResId = attrs.getAttributeResourceValue(ANDROID_XML, value, 0); } Field[] fields = clz.getFields(); for ( Field field : fields ){ OwlStyleable owlStyleable = field.getAnnotation(OwlStyleable.class); if ( owlStyleable == null ) continue; Class scopeClz = field.getDeclaringClass(); OwlAttrScope owlAttrScope = (OwlAttrScope) scopeClz.getAnnotation(OwlAttrScope.class); if ( owlAttrScope == null ) continue; int scope = owlAttrScope.value(); int[] styleableResId = getStaticFieldIntArraySafely(field); if ( styleableResId == null ) continue; TypedArray a = theme.obtainStyledAttributes(attrs, styleableResId, 0, systemStyleResId); if ( a != null ){ obtainStyle(view, box, scope, a); a.recycle(); } } onAfterCollect(view,context,attrs,box); insertSkinBox(view, box); box.refreshSkin(mode, view, true); } private void obtainStyle(View view , ColorBox box , int scope , TypedArray a ){ int n = a.getIndexCount(); for (int i = 0; i < n; i++) { int attr = a.getIndex(i); IOwlPaint paint = queryPaint(attr+scope); if ( paint == null) { Log.d(TAG, \"Can't find paint of attr:\" + attr + \" scope:\" + scope); continue; } Object[] values = paint.setup(view,a,attr); if ( values != null ) box.put(attr, scope, values); } } protected void onBeforeCollect(View view, Context context, AttributeSet attrs, ColorBox box){} protected void onAfterCollect(View view, Context context, AttributeSet attrs, ColorBox box){} @Override final public void onSkinChanged(int skin, View view) { ColorBox box = obtainSkinBox(view); if ( box != null ) box.refreshSkin(skin, view); } }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/impls/ImageViewHandler.java","main_file_content":"package com.asha.nightowllib.handler.impls; import android.widget.ImageView; import com.asha.nightowllib.NightOwlTable; import com.asha.nightowllib.handler.annotations.OwlHandle; @OwlHandle({ImageView.class}) public class ImageViewHandler extends AbsSkinHandler implements NightOwlTable.OwlImageView { }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/NightOwlTable.java","file_content":"package com.asha.nightowllib; import com.asha.nightowllib.handler.annotations.OwlAttr; import com.asha.nightowllib.handler.annotations.OwlAttrScope; import com.asha.nightowllib.handler.annotations.OwlStyleable; import com.asha.nightowllib.handler.impls.ButtonHandler; import com.asha.nightowllib.handler.impls.ImageViewHandler; import com.asha.nightowllib.handler.impls.ListViewHandler; import com.asha.nightowllib.handler.impls.TextViewHandler; import com.asha.nightowllib.handler.impls.ViewHandler; import com.asha.nightowllib.paint.imps.AlphaPaint; import com.asha.nightowllib.paint.imps.BackgroundPaint; import com.asha.nightowllib.paint.imps.ImageViewSrcPaint; import com.asha.nightowllib.paint.imps.ListViewDividerPaint; import com.asha.nightowllib.paint.imps.ListViewSelectorPaint; import com.asha.nightowllib.paint.imps.TextColorPaint; import static com.asha.nightowllib.handler.OwlHandlerManager.registerHandler; public class NightOwlTable { protected static void init(){ registerHandler(ListViewHandler.class); registerHandler(ImageViewHandler.class); registerHandler(TextViewHandler.class); registerHandler(ButtonHandler.class); registerHandler(ViewHandler.class); } @OwlAttrScope(2000) public interface OwlView { @OwlStyleable int[] NightOwl_View = R.styleable.NightOwl_View; @OwlAttr(BackgroundPaint.class) int NightOwl_View_night_background = R.styleable.NightOwl_View_night_background; @OwlAttr(AlphaPaint.class) int NightOwl_View_night_alpha = R.styleable.NightOwl_View_night_alpha; } @OwlAttrScope(2100) public interface OwlTextView extends OwlView { @OwlStyleable int[] NightOwl_TextView = R.styleable.NightOwl_TextView; @OwlAttr(TextColorPaint.class) int NightOwl_TextView_night_textColor = R.styleable.NightOwl_TextView_night_textColor; @OwlAttr(TextColorPaint.class) int NightOwl_TextView_night_textColorHint = R.styleable.NightOwl_TextView_night_textColorHint; } @OwlAttrScope(2200) public interface OwlButton extends OwlTextView { } @OwlAttrScope(2300) public interface OwlImageView extends OwlView { @OwlStyleable int[] NightOwl_ImageView = R.styleable.NightOwl_ImageView; @OwlAttr(ImageViewSrcPaint.class) int NightOwl_ImageView_night_src = R.styleable.NightOwl_ImageView_night_src; } @OwlAttrScope(2400) public interface OwlListView extends OwlView { @OwlStyleable int[] NightOwl_ListView = R.styleable.NightOwl_ListView; @OwlAttr(ListViewDividerPaint.class) int NightOwl_ListView_night_divider = R.styleable.NightOwl_ListView_night_divider; @OwlAttr(ListViewSelectorPaint.class) int NightOwl_ListView_night_listSelector = R.styleable.NightOwl_ListView_night_listSelector; } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/impls/AbsSkinHandler.java","file_content":"package com.asha.nightowllib.handler.impls; import android.content.Context; import android.content.res.Resources; import android.content.res.TypedArray; import android.util.AttributeSet; import android.util.Log; import android.view.View; import com.asha.nightowllib.handler.ISkinHandler; import com.asha.nightowllib.handler.annotations.OwlAttrScope; import com.asha.nightowllib.handler.annotations.OwlStyleable; import com.asha.nightowllib.handler.annotations.OwlSysStyleable; import com.asha.nightowllib.paint.ColorBox; import com.asha.nightowllib.paint.IOwlPaint; import java.lang.reflect.Field; import static com.asha.nightowllib.NightOwlUtil.getStaticFieldIntArraySafely; import static com.asha.nightowllib.NightOwlUtil.insertSkinBox; import static com.asha.nightowllib.NightOwlUtil.obtainSkinBox; import static com.asha.nightowllib.paint.OwlPaintManager.queryPaint; public abstract class AbsSkinHandler implements ISkinHandler { private final static String ANDROID_XML = \"http: private static final String TAG = \"AbsSkinHandler\"; @Override public void collect(int mode, View view, Context context, AttributeSet attrs) { Log.d(TAG, String.format(\"collected %s %s %s\", view, context, attrs)); ColorBox box = ColorBox.newInstance(); onBeforeCollect(view,context,attrs,box); final Resources.Theme theme = context.getTheme(); int systemStyleResId = 0; Class clz = this.getClass(); OwlSysStyleable systemStyleable = (OwlSysStyleable) clz.getAnnotation(OwlSysStyleable.class); if ( systemStyleable != null ){ String value = systemStyleable.value(); systemStyleResId = attrs.getAttributeResourceValue(ANDROID_XML, value, 0); } Field[] fields = clz.getFields(); for ( Field field : fields ){ OwlStyleable owlStyleable = field.getAnnotation(OwlStyleable.class); if ( owlStyleable == null ) continue; Class scopeClz = field.getDeclaringClass(); OwlAttrScope owlAttrScope = (OwlAttrScope) scopeClz.getAnnotation(OwlAttrScope.class); if ( owlAttrScope == null ) continue; int scope = owlAttrScope.value(); int[] styleableResId = getStaticFieldIntArraySafely(field); if ( styleableResId == null ) continue; TypedArray a = theme.obtainStyledAttributes(attrs, styleableResId, 0, systemStyleResId); if ( a != null ){ obtainStyle(view, box, scope, a); a.recycle(); } } onAfterCollect(view,context,attrs,box); insertSkinBox(view, box); box.refreshSkin(mode, view, true); } private void obtainStyle(View view , ColorBox box , int scope , TypedArray a ){ int n = a.getIndexCount(); for (int i = 0; i < n; i++) { int attr = a.getIndex(i); IOwlPaint paint = queryPaint(attr+scope); if ( paint == null) { Log.d(TAG, \"Can't find paint of attr:\" + attr + \" scope:\" + scope); continue; } Object[] values = paint.setup(view,a,attr); if ( values != null ) box.put(attr, scope, values); } } protected void onBeforeCollect(View view, Context context, AttributeSet attrs, ColorBox box){} protected void onAfterCollect(View view, Context context, AttributeSet attrs, ColorBox box){} @Override final public void onSkinChanged(int skin, View view) { ColorBox box = obtainSkinBox(view); if ( box != null ) box.refreshSkin(skin, view); } }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/impls/TextViewHandler.java","main_file_content":"package com.asha.nightowllib.handler.impls; import android.widget.TextView; import com.asha.nightowllib.NightOwlTable; import com.asha.nightowllib.handler.annotations.OwlHandle; import com.asha.nightowllib.handler.annotations.OwlSysStyleable; @OwlSysStyleable(\"textAppearance\") @OwlHandle({TextView.class}) public class TextViewHandler extends AbsSkinHandler implements NightOwlTable.OwlTextView { }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/NightOwlTable.java","file_content":"package com.asha.nightowllib; import com.asha.nightowllib.handler.annotations.OwlAttr; import com.asha.nightowllib.handler.annotations.OwlAttrScope; import com.asha.nightowllib.handler.annotations.OwlStyleable; import com.asha.nightowllib.handler.impls.ButtonHandler; import com.asha.nightowllib.handler.impls.ImageViewHandler; import com.asha.nightowllib.handler.impls.ListViewHandler; import com.asha.nightowllib.handler.impls.TextViewHandler; import com.asha.nightowllib.handler.impls.ViewHandler; import com.asha.nightowllib.paint.imps.AlphaPaint; import com.asha.nightowllib.paint.imps.BackgroundPaint; import com.asha.nightowllib.paint.imps.ImageViewSrcPaint; import com.asha.nightowllib.paint.imps.ListViewDividerPaint; import com.asha.nightowllib.paint.imps.ListViewSelectorPaint; import com.asha.nightowllib.paint.imps.TextColorPaint; import static com.asha.nightowllib.handler.OwlHandlerManager.registerHandler; public class NightOwlTable { protected static void init(){ registerHandler(ListViewHandler.class); registerHandler(ImageViewHandler.class); registerHandler(TextViewHandler.class); registerHandler(ButtonHandler.class); registerHandler(ViewHandler.class); } @OwlAttrScope(2000) public interface OwlView { @OwlStyleable int[] NightOwl_View = R.styleable.NightOwl_View; @OwlAttr(BackgroundPaint.class) int NightOwl_View_night_background = R.styleable.NightOwl_View_night_background; @OwlAttr(AlphaPaint.class) int NightOwl_View_night_alpha = R.styleable.NightOwl_View_night_alpha; } @OwlAttrScope(2100) public interface OwlTextView extends OwlView { @OwlStyleable int[] NightOwl_TextView = R.styleable.NightOwl_TextView; @OwlAttr(TextColorPaint.class) int NightOwl_TextView_night_textColor = R.styleable.NightOwl_TextView_night_textColor; @OwlAttr(TextColorPaint.class) int NightOwl_TextView_night_textColorHint = R.styleable.NightOwl_TextView_night_textColorHint; } @OwlAttrScope(2200) public interface OwlButton extends OwlTextView { } @OwlAttrScope(2300) public interface OwlImageView extends OwlView { @OwlStyleable int[] NightOwl_ImageView = R.styleable.NightOwl_ImageView; @OwlAttr(ImageViewSrcPaint.class) int NightOwl_ImageView_night_src = R.styleable.NightOwl_ImageView_night_src; } @OwlAttrScope(2400) public interface OwlListView extends OwlView { @OwlStyleable int[] NightOwl_ListView = R.styleable.NightOwl_ListView; @OwlAttr(ListViewDividerPaint.class) int NightOwl_ListView_night_divider = R.styleable.NightOwl_ListView_night_divider; @OwlAttr(ListViewSelectorPaint.class) int NightOwl_ListView_night_listSelector = R.styleable.NightOwl_ListView_night_listSelector; } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/impls/AbsSkinHandler.java","file_content":"package com.asha.nightowllib.handler.impls; import android.content.Context; import android.content.res.Resources; import android.content.res.TypedArray; import android.util.AttributeSet; import android.util.Log; import android.view.View; import com.asha.nightowllib.handler.ISkinHandler; import com.asha.nightowllib.handler.annotations.OwlAttrScope; import com.asha.nightowllib.handler.annotations.OwlStyleable; import com.asha.nightowllib.handler.annotations.OwlSysStyleable; import com.asha.nightowllib.paint.ColorBox; import com.asha.nightowllib.paint.IOwlPaint; import java.lang.reflect.Field; import static com.asha.nightowllib.NightOwlUtil.getStaticFieldIntArraySafely; import static com.asha.nightowllib.NightOwlUtil.insertSkinBox; import static com.asha.nightowllib.NightOwlUtil.obtainSkinBox; import static com.asha.nightowllib.paint.OwlPaintManager.queryPaint; public abstract class AbsSkinHandler implements ISkinHandler { private final static String ANDROID_XML = \"http: private static final String TAG = \"AbsSkinHandler\"; @Override public void collect(int mode, View view, Context context, AttributeSet attrs) { Log.d(TAG, String.format(\"collected %s %s %s\", view, context, attrs)); ColorBox box = ColorBox.newInstance(); onBeforeCollect(view,context,attrs,box); final Resources.Theme theme = context.getTheme(); int systemStyleResId = 0; Class clz = this.getClass(); OwlSysStyleable systemStyleable = (OwlSysStyleable) clz.getAnnotation(OwlSysStyleable.class); if ( systemStyleable != null ){ String value = systemStyleable.value(); systemStyleResId = attrs.getAttributeResourceValue(ANDROID_XML, value, 0); } Field[] fields = clz.getFields(); for ( Field field : fields ){ OwlStyleable owlStyleable = field.getAnnotation(OwlStyleable.class); if ( owlStyleable == null ) continue; Class scopeClz = field.getDeclaringClass(); OwlAttrScope owlAttrScope = (OwlAttrScope) scopeClz.getAnnotation(OwlAttrScope.class); if ( owlAttrScope == null ) continue; int scope = owlAttrScope.value(); int[] styleableResId = getStaticFieldIntArraySafely(field); if ( styleableResId == null ) continue; TypedArray a = theme.obtainStyledAttributes(attrs, styleableResId, 0, systemStyleResId); if ( a != null ){ obtainStyle(view, box, scope, a); a.recycle(); } } onAfterCollect(view,context,attrs,box); insertSkinBox(view, box); box.refreshSkin(mode, view, true); } private void obtainStyle(View view , ColorBox box , int scope , TypedArray a ){ int n = a.getIndexCount(); for (int i = 0; i < n; i++) { int attr = a.getIndex(i); IOwlPaint paint = queryPaint(attr+scope); if ( paint == null) { Log.d(TAG, \"Can't find paint of attr:\" + attr + \" scope:\" + scope); continue; } Object[] values = paint.setup(view,a,attr); if ( values != null ) box.put(attr, scope, values); } } protected void onBeforeCollect(View view, Context context, AttributeSet attrs, ColorBox box){} protected void onAfterCollect(View view, Context context, AttributeSet attrs, ColorBox box){} @Override final public void onSkinChanged(int skin, View view) { ColorBox box = obtainSkinBox(view); if ( box != null ) box.refreshSkin(skin, view); } }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/impls/AbsSkinHandler.java","main_file_content":"package com.asha.nightowllib.handler.impls; import android.content.Context; import android.content.res.Resources; import android.content.res.TypedArray; import android.util.AttributeSet; import android.util.Log; import android.view.View; import com.asha.nightowllib.handler.ISkinHandler; import com.asha.nightowllib.handler.annotations.OwlAttrScope; import com.asha.nightowllib.handler.annotations.OwlStyleable; import com.asha.nightowllib.handler.annotations.OwlSysStyleable; import com.asha.nightowllib.paint.ColorBox; import com.asha.nightowllib.paint.IOwlPaint; import java.lang.reflect.Field; import static com.asha.nightowllib.NightOwlUtil.getStaticFieldIntArraySafely; import static com.asha.nightowllib.NightOwlUtil.insertSkinBox; import static com.asha.nightowllib.NightOwlUtil.obtainSkinBox; import static com.asha.nightowllib.paint.OwlPaintManager.queryPaint; public abstract class AbsSkinHandler implements ISkinHandler { private final static String ANDROID_XML = \"http: private static final String TAG = \"AbsSkinHandler\"; @Override public void collect(int mode, View view, Context context, AttributeSet attrs) { Log.d(TAG, String.format(\"collected %s %s %s\", view, context, attrs)); ColorBox box = ColorBox.newInstance(); onBeforeCollect(view,context,attrs,box); final Resources.Theme theme = context.getTheme(); int systemStyleResId = 0; Class clz = this.getClass(); OwlSysStyleable systemStyleable = (OwlSysStyleable) clz.getAnnotation(OwlSysStyleable.class); if ( systemStyleable != null ){ String value = systemStyleable.value(); systemStyleResId = attrs.getAttributeResourceValue(ANDROID_XML, value, 0); } Field[] fields = clz.getFields(); for ( Field field : fields ){ OwlStyleable owlStyleable = field.getAnnotation(OwlStyleable.class); if ( owlStyleable == null ) continue; Class scopeClz = field.getDeclaringClass(); OwlAttrScope owlAttrScope = (OwlAttrScope) scopeClz.getAnnotation(OwlAttrScope.class); if ( owlAttrScope == null ) continue; int scope = owlAttrScope.value(); int[] styleableResId = getStaticFieldIntArraySafely(field); if ( styleableResId == null ) continue; TypedArray a = theme.obtainStyledAttributes(attrs, styleableResId, 0, systemStyleResId); if ( a != null ){ obtainStyle(view, box, scope, a); a.recycle(); } } onAfterCollect(view,context,attrs,box); insertSkinBox(view, box); box.refreshSkin(mode, view, true); } private void obtainStyle(View view , ColorBox box , int scope , TypedArray a ){ int n = a.getIndexCount(); for (int i = 0; i < n; i++) { int attr = a.getIndex(i); IOwlPaint paint = queryPaint(attr+scope); if ( paint == null) { Log.d(TAG, \"Can't find paint of attr:\" + attr + \" scope:\" + scope); continue; } Object[] values = paint.setup(view,a,attr); if ( values != null ) box.put(attr, scope, values); } } protected void onBeforeCollect(View view, Context context, AttributeSet attrs, ColorBox box){} protected void onAfterCollect(View view, Context context, AttributeSet attrs, ColorBox box){} @Override final public void onSkinChanged(int skin, View view) { ColorBox box = obtainSkinBox(view); if ( box != null ) box.refreshSkin(skin, view); } }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/ISkinHandler.java","file_content":"package com.asha.nightowllib.handler; import android.content.Context; import android.util.AttributeSet; import android.view.View; public interface ISkinHandler { void collect(int mode, View view, Context context, AttributeSet attrs); void onSkinChanged(int skin, View view); }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/annotations/OwlAttrScope.java","file_content":"package com.asha.nightowllib.handler.annotations; import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.TYPE) public @interface OwlAttrScope { int value(); }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/annotations/OwlStyleable.java","file_content":"package com.asha.nightowllib.handler.annotations; import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.FIELD) public @interface OwlStyleable { }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/annotations/OwlSysStyleable.java","file_content":"package com.asha.nightowllib.handler.annotations; import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.TYPE) public @interface OwlSysStyleable { String value(); }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/paint/ColorBox.java","file_content":"package com.asha.nightowllib.paint; import android.util.SparseArray; import android.view.View; import static com.asha.nightowllib.paint.OwlPaintManager.queryPaint; public class ColorBox { private int mMode = -1; private SparseArray<Object[]> mBox; private ColorBox() { mBox = new SparseArray<>(4); } public void put(int attr, int scope, Object... objects){ mBox.put(attr + scope, objects); } public void refreshSkin(int mode, View view, boolean force){ if ( force ) mMode = -1; refreshSkin(mode,view); } public Object[] get(int attr, int scope){ return mBox.get( attr + scope ); } public void refreshSkin(int mode, View view){ if ( mMode != mode ){ int size = mBox.size(); for (int i = 0; i < size; i++) { int attrWithScope = mBox.keyAt(i); Object[] res = mBox.valueAt(i); IOwlPaint paint = queryPaint(attrWithScope); if ( paint != null ) paint.draw(view, res[mode]); } } mMode = mode; } public int getMode() { return mMode; } public static ColorBox newInstance() { return new ColorBox(); } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/paint/IOwlPaint.java","file_content":"package com.asha.nightowllib.paint; import android.content.res.TypedArray; import android.view.View; public interface IOwlPaint { void draw(View view, Object value); Object[] setup(View view, TypedArray a, int attr); }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/impls/ViewHandler.java","main_file_content":"package com.asha.nightowllib.handler.impls; import android.view.View; import com.asha.nightowllib.NightOwlTable; import com.asha.nightowllib.handler.annotations.OwlHandle; @OwlHandle(View.class) public class ViewHandler extends AbsSkinHandler implements NightOwlTable.OwlView { }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/NightOwlTable.java","file_content":"package com.asha.nightowllib; import com.asha.nightowllib.handler.annotations.OwlAttr; import com.asha.nightowllib.handler.annotations.OwlAttrScope; import com.asha.nightowllib.handler.annotations.OwlStyleable; import com.asha.nightowllib.handler.impls.ButtonHandler; import com.asha.nightowllib.handler.impls.ImageViewHandler; import com.asha.nightowllib.handler.impls.ListViewHandler; import com.asha.nightowllib.handler.impls.TextViewHandler; import com.asha.nightowllib.handler.impls.ViewHandler; import com.asha.nightowllib.paint.imps.AlphaPaint; import com.asha.nightowllib.paint.imps.BackgroundPaint; import com.asha.nightowllib.paint.imps.ImageViewSrcPaint; import com.asha.nightowllib.paint.imps.ListViewDividerPaint; import com.asha.nightowllib.paint.imps.ListViewSelectorPaint; import com.asha.nightowllib.paint.imps.TextColorPaint; import static com.asha.nightowllib.handler.OwlHandlerManager.registerHandler; public class NightOwlTable { protected static void init(){ registerHandler(ListViewHandler.class); registerHandler(ImageViewHandler.class); registerHandler(TextViewHandler.class); registerHandler(ButtonHandler.class); registerHandler(ViewHandler.class); } @OwlAttrScope(2000) public interface OwlView { @OwlStyleable int[] NightOwl_View = R.styleable.NightOwl_View; @OwlAttr(BackgroundPaint.class) int NightOwl_View_night_background = R.styleable.NightOwl_View_night_background; @OwlAttr(AlphaPaint.class) int NightOwl_View_night_alpha = R.styleable.NightOwl_View_night_alpha; } @OwlAttrScope(2100) public interface OwlTextView extends OwlView { @OwlStyleable int[] NightOwl_TextView = R.styleable.NightOwl_TextView; @OwlAttr(TextColorPaint.class) int NightOwl_TextView_night_textColor = R.styleable.NightOwl_TextView_night_textColor; @OwlAttr(TextColorPaint.class) int NightOwl_TextView_night_textColorHint = R.styleable.NightOwl_TextView_night_textColorHint; } @OwlAttrScope(2200) public interface OwlButton extends OwlTextView { } @OwlAttrScope(2300) public interface OwlImageView extends OwlView { @OwlStyleable int[] NightOwl_ImageView = R.styleable.NightOwl_ImageView; @OwlAttr(ImageViewSrcPaint.class) int NightOwl_ImageView_night_src = R.styleable.NightOwl_ImageView_night_src; } @OwlAttrScope(2400) public interface OwlListView extends OwlView { @OwlStyleable int[] NightOwl_ListView = R.styleable.NightOwl_ListView; @OwlAttr(ListViewDividerPaint.class) int NightOwl_ListView_night_divider = R.styleable.NightOwl_ListView_night_divider; @OwlAttr(ListViewSelectorPaint.class) int NightOwl_ListView_night_listSelector = R.styleable.NightOwl_ListView_night_listSelector; } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/impls/AbsSkinHandler.java","file_content":"package com.asha.nightowllib.handler.impls; import android.content.Context; import android.content.res.Resources; import android.content.res.TypedArray; import android.util.AttributeSet; import android.util.Log; import android.view.View; import com.asha.nightowllib.handler.ISkinHandler; import com.asha.nightowllib.handler.annotations.OwlAttrScope; import com.asha.nightowllib.handler.annotations.OwlStyleable; import com.asha.nightowllib.handler.annotations.OwlSysStyleable; import com.asha.nightowllib.paint.ColorBox; import com.asha.nightowllib.paint.IOwlPaint; import java.lang.reflect.Field; import static com.asha.nightowllib.NightOwlUtil.getStaticFieldIntArraySafely; import static com.asha.nightowllib.NightOwlUtil.insertSkinBox; import static com.asha.nightowllib.NightOwlUtil.obtainSkinBox; import static com.asha.nightowllib.paint.OwlPaintManager.queryPaint; public abstract class AbsSkinHandler implements ISkinHandler { private final static String ANDROID_XML = \"http: private static final String TAG = \"AbsSkinHandler\"; @Override public void collect(int mode, View view, Context context, AttributeSet attrs) { Log.d(TAG, String.format(\"collected %s %s %s\", view, context, attrs)); ColorBox box = ColorBox.newInstance(); onBeforeCollect(view,context,attrs,box); final Resources.Theme theme = context.getTheme(); int systemStyleResId = 0; Class clz = this.getClass(); OwlSysStyleable systemStyleable = (OwlSysStyleable) clz.getAnnotation(OwlSysStyleable.class); if ( systemStyleable != null ){ String value = systemStyleable.value(); systemStyleResId = attrs.getAttributeResourceValue(ANDROID_XML, value, 0); } Field[] fields = clz.getFields(); for ( Field field : fields ){ OwlStyleable owlStyleable = field.getAnnotation(OwlStyleable.class); if ( owlStyleable == null ) continue; Class scopeClz = field.getDeclaringClass(); OwlAttrScope owlAttrScope = (OwlAttrScope) scopeClz.getAnnotation(OwlAttrScope.class); if ( owlAttrScope == null ) continue; int scope = owlAttrScope.value(); int[] styleableResId = getStaticFieldIntArraySafely(field); if ( styleableResId == null ) continue; TypedArray a = theme.obtainStyledAttributes(attrs, styleableResId, 0, systemStyleResId); if ( a != null ){ obtainStyle(view, box, scope, a); a.recycle(); } } onAfterCollect(view,context,attrs,box); insertSkinBox(view, box); box.refreshSkin(mode, view, true); } private void obtainStyle(View view , ColorBox box , int scope , TypedArray a ){ int n = a.getIndexCount(); for (int i = 0; i < n; i++) { int attr = a.getIndex(i); IOwlPaint paint = queryPaint(attr+scope); if ( paint == null) { Log.d(TAG, \"Can't find paint of attr:\" + attr + \" scope:\" + scope); continue; } Object[] values = paint.setup(view,a,attr); if ( values != null ) box.put(attr, scope, values); } } protected void onBeforeCollect(View view, Context context, AttributeSet attrs, ColorBox box){} protected void onAfterCollect(View view, Context context, AttributeSet attrs, ColorBox box){} @Override final public void onSkinChanged(int skin, View view) { ColorBox box = obtainSkinBox(view); if ( box != null ) box.refreshSkin(skin, view); } }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/impls/ButtonHandler.java","main_file_content":"package com.asha.nightowllib.handler.impls; import android.widget.Button; import com.asha.nightowllib.NightOwlTable; import com.asha.nightowllib.handler.annotations.OwlHandle; import com.asha.nightowllib.handler.annotations.OwlSysStyleable; @OwlSysStyleable(\"textAppearance\") @OwlHandle(Button.class) public class ButtonHandler extends AbsSkinHandler implements NightOwlTable.OwlButton { }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/NightOwlTable.java","file_content":"package com.asha.nightowllib; import com.asha.nightowllib.handler.annotations.OwlAttr; import com.asha.nightowllib.handler.annotations.OwlAttrScope; import com.asha.nightowllib.handler.annotations.OwlStyleable; import com.asha.nightowllib.handler.impls.ButtonHandler; import com.asha.nightowllib.handler.impls.ImageViewHandler; import com.asha.nightowllib.handler.impls.ListViewHandler; import com.asha.nightowllib.handler.impls.TextViewHandler; import com.asha.nightowllib.handler.impls.ViewHandler; import com.asha.nightowllib.paint.imps.AlphaPaint; import com.asha.nightowllib.paint.imps.BackgroundPaint; import com.asha.nightowllib.paint.imps.ImageViewSrcPaint; import com.asha.nightowllib.paint.imps.ListViewDividerPaint; import com.asha.nightowllib.paint.imps.ListViewSelectorPaint; import com.asha.nightowllib.paint.imps.TextColorPaint; import static com.asha.nightowllib.handler.OwlHandlerManager.registerHandler; public class NightOwlTable { protected static void init(){ registerHandler(ListViewHandler.class); registerHandler(ImageViewHandler.class); registerHandler(TextViewHandler.class); registerHandler(ButtonHandler.class); registerHandler(ViewHandler.class); } @OwlAttrScope(2000) public interface OwlView { @OwlStyleable int[] NightOwl_View = R.styleable.NightOwl_View; @OwlAttr(BackgroundPaint.class) int NightOwl_View_night_background = R.styleable.NightOwl_View_night_background; @OwlAttr(AlphaPaint.class) int NightOwl_View_night_alpha = R.styleable.NightOwl_View_night_alpha; } @OwlAttrScope(2100) public interface OwlTextView extends OwlView { @OwlStyleable int[] NightOwl_TextView = R.styleable.NightOwl_TextView; @OwlAttr(TextColorPaint.class) int NightOwl_TextView_night_textColor = R.styleable.NightOwl_TextView_night_textColor; @OwlAttr(TextColorPaint.class) int NightOwl_TextView_night_textColorHint = R.styleable.NightOwl_TextView_night_textColorHint; } @OwlAttrScope(2200) public interface OwlButton extends OwlTextView { } @OwlAttrScope(2300) public interface OwlImageView extends OwlView { @OwlStyleable int[] NightOwl_ImageView = R.styleable.NightOwl_ImageView; @OwlAttr(ImageViewSrcPaint.class) int NightOwl_ImageView_night_src = R.styleable.NightOwl_ImageView_night_src; } @OwlAttrScope(2400) public interface OwlListView extends OwlView { @OwlStyleable int[] NightOwl_ListView = R.styleable.NightOwl_ListView; @OwlAttr(ListViewDividerPaint.class) int NightOwl_ListView_night_divider = R.styleable.NightOwl_ListView_night_divider; @OwlAttr(ListViewSelectorPaint.class) int NightOwl_ListView_night_listSelector = R.styleable.NightOwl_ListView_night_listSelector; } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/impls/AbsSkinHandler.java","file_content":"package com.asha.nightowllib.handler.impls; import android.content.Context; import android.content.res.Resources; import android.content.res.TypedArray; import android.util.AttributeSet; import android.util.Log; import android.view.View; import com.asha.nightowllib.handler.ISkinHandler; import com.asha.nightowllib.handler.annotations.OwlAttrScope; import com.asha.nightowllib.handler.annotations.OwlStyleable; import com.asha.nightowllib.handler.annotations.OwlSysStyleable; import com.asha.nightowllib.paint.ColorBox; import com.asha.nightowllib.paint.IOwlPaint; import java.lang.reflect.Field; import static com.asha.nightowllib.NightOwlUtil.getStaticFieldIntArraySafely; import static com.asha.nightowllib.NightOwlUtil.insertSkinBox; import static com.asha.nightowllib.NightOwlUtil.obtainSkinBox; import static com.asha.nightowllib.paint.OwlPaintManager.queryPaint; public abstract class AbsSkinHandler implements ISkinHandler { private final static String ANDROID_XML = \"http: private static final String TAG = \"AbsSkinHandler\"; @Override public void collect(int mode, View view, Context context, AttributeSet attrs) { Log.d(TAG, String.format(\"collected %s %s %s\", view, context, attrs)); ColorBox box = ColorBox.newInstance(); onBeforeCollect(view,context,attrs,box); final Resources.Theme theme = context.getTheme(); int systemStyleResId = 0; Class clz = this.getClass(); OwlSysStyleable systemStyleable = (OwlSysStyleable) clz.getAnnotation(OwlSysStyleable.class); if ( systemStyleable != null ){ String value = systemStyleable.value(); systemStyleResId = attrs.getAttributeResourceValue(ANDROID_XML, value, 0); } Field[] fields = clz.getFields(); for ( Field field : fields ){ OwlStyleable owlStyleable = field.getAnnotation(OwlStyleable.class); if ( owlStyleable == null ) continue; Class scopeClz = field.getDeclaringClass(); OwlAttrScope owlAttrScope = (OwlAttrScope) scopeClz.getAnnotation(OwlAttrScope.class); if ( owlAttrScope == null ) continue; int scope = owlAttrScope.value(); int[] styleableResId = getStaticFieldIntArraySafely(field); if ( styleableResId == null ) continue; TypedArray a = theme.obtainStyledAttributes(attrs, styleableResId, 0, systemStyleResId); if ( a != null ){ obtainStyle(view, box, scope, a); a.recycle(); } } onAfterCollect(view,context,attrs,box); insertSkinBox(view, box); box.refreshSkin(mode, view, true); } private void obtainStyle(View view , ColorBox box , int scope , TypedArray a ){ int n = a.getIndexCount(); for (int i = 0; i < n; i++) { int attr = a.getIndex(i); IOwlPaint paint = queryPaint(attr+scope); if ( paint == null) { Log.d(TAG, \"Can't find paint of attr:\" + attr + \" scope:\" + scope); continue; } Object[] values = paint.setup(view,a,attr); if ( values != null ) box.put(attr, scope, values); } } protected void onBeforeCollect(View view, Context context, AttributeSet attrs, ColorBox box){} protected void onAfterCollect(View view, Context context, AttributeSet attrs, ColorBox box){} @Override final public void onSkinChanged(int skin, View view) { ColorBox box = obtainSkinBox(view); if ( box != null ) box.refreshSkin(skin, view); } }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/annotations/OwlAttr.java","main_file_content":"package com.asha.nightowllib.handler.annotations; import com.asha.nightowllib.paint.IOwlPaint; import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.FIELD) public @interface OwlAttr { Class<? extends IOwlPaint> value(); }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/paint/IOwlPaint.java","file_content":"package com.asha.nightowllib.paint; import android.content.res.TypedArray; import android.view.View; public interface IOwlPaint { void draw(View view, Object value); Object[] setup(View view, TypedArray a, int attr); }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/annotations/OwlSysStyleable.java","main_file_content":"package com.asha.nightowllib.handler.annotations; import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.TYPE) public @interface OwlSysStyleable { String value(); }","dependencies":[]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/annotations/OwlAttrScope.java","main_file_content":"package com.asha.nightowllib.handler.annotations; import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.TYPE) public @interface OwlAttrScope { int value(); }","dependencies":[]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/annotations/OwlHandleClzName.java","main_file_content":"package com.asha.nightowllib.handler.annotations; import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.TYPE) public @interface OwlHandleClzName { String[] value(); }","dependencies":[]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/annotations/OwlHandle.java","main_file_content":"package com.asha.nightowllib.handler.annotations; import android.view.View; import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.TYPE) public @interface OwlHandle { Class<? extends View>[] value(); }","dependencies":[]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/annotations/OwlStyleable.java","main_file_content":"package com.asha.nightowllib.handler.annotations; import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.FIELD) public @interface OwlStyleable { }","dependencies":[]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/paint/imps/TextColorPaint.java","main_file_content":"package com.asha.nightowllib.paint.imps; import android.content.res.ColorStateList; import android.content.res.TypedArray; import android.view.View; import android.widget.TextView; import com.asha.nightowllib.paint.IOwlPaint; public class TextColorPaint implements IOwlPaint { @Override public void draw(View view, Object value) { TextView tv = (TextView) view; ColorStateList color = (ColorStateList) value; tv.setTextColor(color); } @Override public Object[] setup(View view, TypedArray a, int attr) { TextView tv = (TextView) view; ColorStateList color1 = tv.getTextColors(); ColorStateList color2 = a.getColorStateList(attr); return new ColorStateList[]{ color1, color2 }; } }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/paint/IOwlPaint.java","file_content":"package com.asha.nightowllib.paint; import android.content.res.TypedArray; import android.view.View; public interface IOwlPaint { void draw(View view, Object value); Object[] setup(View view, TypedArray a, int attr); }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/paint/imps/ListViewSelectorPaint.java","main_file_content":"package com.asha.nightowllib.paint.imps; import android.content.res.TypedArray; import android.graphics.drawable.Drawable; import android.view.View; import android.widget.ListView; import com.asha.nightowllib.paint.IOwlPaint; public class ListViewSelectorPaint implements IOwlPaint { @Override public void draw(View view, Object value) { ListView listView = (ListView) view; listView.setSelector((Drawable) value); } @Override public Object[] setup(View view, TypedArray a, int attr) { ListView listView = (ListView) view; Drawable drawable1 = listView.getSelector(); Drawable drawable2 = a.getDrawable(attr); return new Drawable[]{ drawable1, drawable2 }; } }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/paint/IOwlPaint.java","file_content":"package com.asha.nightowllib.paint; import android.content.res.TypedArray; import android.view.View; public interface IOwlPaint { void draw(View view, Object value); Object[] setup(View view, TypedArray a, int attr); }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/paint/imps/AlphaPaint.java","main_file_content":"package com.asha.nightowllib.paint.imps; import android.content.res.TypedArray; import android.os.Build; import android.view.View; import com.asha.nightowllib.paint.IOwlPaint; public class AlphaPaint implements IOwlPaint { @Override public void draw(View view, Object value) { Float alpha = (Float) value; if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) { view.setAlpha(alpha); } } @Override public Object[] setup(View view, TypedArray a, int attr) { Float alpha1 = 1.0f; if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.HONEYCOMB) { alpha1 = view.getAlpha(); } Float alpha2 = a.getFloat(attr, alpha1); return new Float[]{ alpha1, alpha2 }; } }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/paint/IOwlPaint.java","file_content":"package com.asha.nightowllib.paint; import android.content.res.TypedArray; import android.view.View; public interface IOwlPaint { void draw(View view, Object value); Object[] setup(View view, TypedArray a, int attr); }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/paint/imps/BackgroundPaint.java","main_file_content":"package com.asha.nightowllib.paint.imps; import android.content.res.TypedArray; import android.graphics.drawable.Drawable; import android.os.Build; import android.view.View; import com.asha.nightowllib.paint.IOwlPaint; public class BackgroundPaint implements IOwlPaint { @Override public void draw(View view, Object value) { Drawable drawable = (Drawable) value; setBackgroundCompact(view,drawable); } @Override public Object[] setup(View view, TypedArray a, int attr) { Drawable bg1 = view.getBackground(); Drawable bg2 = a.getDrawable(attr); return new Drawable[]{bg1, bg2}; } private void setBackgroundCompact(View view,Drawable drawable){ if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) { view.setBackground(drawable); } else { setBackgroundPrev15(view, drawable); } } @SuppressWarnings(\"deprecation\") private void setBackgroundPrev15(View view,Drawable drawable){ view.setBackgroundDrawable(drawable); } }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/paint/IOwlPaint.java","file_content":"package com.asha.nightowllib.paint; import android.content.res.TypedArray; import android.view.View; public interface IOwlPaint { void draw(View view, Object value); Object[] setup(View view, TypedArray a, int attr); }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/paint/imps/ImageViewSrcPaint.java","main_file_content":"package com.asha.nightowllib.paint.imps; import android.content.res.TypedArray; import android.graphics.drawable.Drawable; import android.view.View; import android.widget.ImageView; import com.asha.nightowllib.paint.IOwlPaint; public class ImageViewSrcPaint implements IOwlPaint { @Override public void draw(View view, Object value) { ImageView imageView = (ImageView) view; Drawable drawable = (Drawable) value; imageView.setImageDrawable(drawable); } @Override public Object[] setup(View view, TypedArray a, int attr) { ImageView imageView = (ImageView) view; Drawable bg1 = imageView.getDrawable(); Drawable bg2 = a.getDrawable(attr); return new Drawable[]{ bg1, bg2 }; } }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/paint/IOwlPaint.java","file_content":"package com.asha.nightowllib.paint; import android.content.res.TypedArray; import android.view.View; public interface IOwlPaint { void draw(View view, Object value); Object[] setup(View view, TypedArray a, int attr); }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/paint/imps/ListViewDividerPaint.java","main_file_content":"package com.asha.nightowllib.paint.imps; import android.content.res.TypedArray; import android.graphics.drawable.Drawable; import android.view.View; import android.widget.ListView; import com.asha.nightowllib.paint.IOwlPaint; public class ListViewDividerPaint implements IOwlPaint { @Override public void draw(View view, Object value) { ListView listView = (ListView) view; int listHeight = listView.getDividerHeight(); listView.setDivider((Drawable) value); listView.setDividerHeight(listHeight); } @Override public Object[] setup(View view, TypedArray a, int attr) { ListView listView = (ListView) view; Drawable drawable1 = listView.getDivider(); Drawable drawable2 = a.getDrawable(attr); return new Drawable[]{ drawable1, drawable2 }; } }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/paint/IOwlPaint.java","file_content":"package com.asha.nightowllib.paint; import android.content.res.TypedArray; import android.view.View; public interface IOwlPaint { void draw(View view, Object value); Object[] setup(View view, TypedArray a, int attr); }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/test/java/com/asha/nightowllib/ExampleUnitTest.java","main_file_content":"package com.asha.nightowllib; import org.junit.Test; import static org.junit.Assert.*; public class ExampleUnitTest { @Test public void addition_isCorrect() throws Exception { assertEquals(4, 2 + 2); } }","dependencies":[]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/nightowllib/src/androidTest/java/com/asha/nightowllib/ApplicationTest.java","main_file_content":"package com.asha.nightowllib; import android.app.Application; import android.test.ApplicationTestCase; public class ApplicationTest extends ApplicationTestCase<Application> { public ApplicationTest() { super(Application.class); } }","dependencies":[]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/app/src/main/java/com/asha/nightowl/RecyclerViewFix.java","main_file_content":"package com.asha.nightowl; import android.content.Context; import android.support.v7.widget.RecyclerView; import android.util.AttributeSet; import android.view.View; import android.view.ViewGroup; import com.asha.nightowllib.NightOwl; public class RecyclerViewFix extends RecyclerView { public RecyclerViewFix(Context context) { super(context); } public RecyclerViewFix(Context context, AttributeSet attrs) { super(context, attrs); } public RecyclerViewFix(Context context, AttributeSet attrs, int defStyle) { super(context, attrs, defStyle); } @Override public void addView(View child, int index, ViewGroup.LayoutParams params) { NightOwl.owlRecyclerFix(child); super.addView(child, index, params); } }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/NightOwl.java","file_content":"package com.asha.nightowllib; import android.app.Activity; import android.view.ContextThemeWrapper; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.view.Window; import com.asha.nightowllib.handler.ISkinHandler; import com.asha.nightowllib.handler.OwlHandlerManager; import com.asha.nightowllib.inflater.Factory4InjectedInflater; import com.asha.nightowllib.observer.IOwlObserver; import com.asha.nightowllib.observer.OwlViewContext; import com.asha.nightowllib.paint.ColorBox; import com.asha.nightowllib.paint.OwlPaintManager; import static com.asha.nightowllib.NightOwlUtil.checkNonNull; import static com.asha.nightowllib.NightOwlUtil.checkViewCollected; import static com.asha.nightowllib.NightOwlUtil.injectLayoutInflater; import static com.asha.nightowllib.NightOwlUtil.insertEmptyTag; import static com.asha.nightowllib.NightOwlUtil.insertViewContext; import static com.asha.nightowllib.NightOwlUtil.obtainSkinBox; import static com.asha.nightowllib.NightOwlUtil.obtainViewContext; public class NightOwl { private static final String TAG = \"NightOwl\"; private static final String WINDOW_INFLATER = \"mLayoutInflater\"; private static final String THEME_INFLATER = \"mInflater\"; private static NightOwl sInstance; static { NightOwlTable.init(); } private int mMode = 0; private IOwlObserver mOwlObserver; private NightOwl(){ } public static void owlBeforeCreate(Activity activity){ Window window = activity.getWindow(); LayoutInflater layoutInflater = window.getLayoutInflater(); LayoutInflater injectLayoutInflater1 = Factory4InjectedInflater.newInstance(layoutInflater, activity); injectLayoutInflater(injectLayoutInflater1 , activity.getWindow() , activity.getWindow().getClass() , WINDOW_INFLATER); LayoutInflater injectLayoutInflater2 = injectLayoutInflater1.cloneInContext(activity); injectLayoutInflater(injectLayoutInflater2 , activity , ContextThemeWrapper.class , THEME_INFLATER); View v = activity.getWindow().getDecorView(); OwlViewContext owlObservable = new OwlViewContext(); insertViewContext(v, owlObservable); } public static void owlAfterCreate(Activity activity){ View root = activity.getWindow().getDecorView(); OwlViewContext viewContext = obtainViewContext(root); checkNonNull(viewContext, \"OwlViewContext can not be null!\"); viewContext.setupWithCurrentActivity(activity); viewContext.notifyObserver(sharedInstance().mMode, activity); } public static void owlResume( Activity activity ){ NightOwl nightOwl = sharedInstance(); int targetMode = nightOwl.mMode; owlDressUp(targetMode, activity); } public static void owlNewDress( Activity activity ) { int current = owlCurrentMode() + 1; current %= 2; owlDressUp(current, activity); } public static void owlRecyclerFix(View view){ int mode = owlCurrentMode(); innerRefreshSkin(mode, view); } private static void owlDressUp( int mode, Activity activity ){ NightOwl owl = sharedInstance(); View root = activity.getWindow().getDecorView(); OwlViewContext viewContext = obtainViewContext(root); checkNonNull(viewContext, \"OwlViewContext can not be null!\"); if ( viewContext.needSync(mode) ){ innerRefreshSkin(mode, root); viewContext.notifyObserver(mode, activity); } owl.mMode = mode; if ( owl.mOwlObserver != null ) owl.mOwlObserver.onSkinChange(mode,activity); } public static void owlRegisterCustom(IOwlObserver view){ if ( view instanceof View ) { View target = (View) view; insertEmptyTag(target); view.onSkinChange(owlCurrentMode(), null); } else { throw new IllegalArgumentException(\"owlRegisterCustom param must be a instance of View\"); } } public static void owlRegisterHandler(Class<? extends ISkinHandler> clz, Class paintTable){ OwlHandlerManager.registerHandler(clz); OwlPaintManager.registerPaint(paintTable); } public static int owlCurrentMode(){ return sharedInstance().mMode; } private static void innerRefreshSkin(int mode, View view ){ if ( checkViewCollected(view) ){ ColorBox box = obtainSkinBox(view); if ( box != null ) box.refreshSkin(mode, view); if ( view instanceof IOwlObserver ){ ((IOwlObserver) view).onSkinChange(mode,null); } } if ( view instanceof ViewGroup){ ViewGroup vg = (ViewGroup) view; View sub; for (int i = 0; i < vg.getChildCount(); i++) { sub = vg.getChildAt(i); innerRefreshSkin(mode, sub); } } } private static NightOwl sharedInstance(){ checkNonNull(sInstance,\"You must create NightOwl in Application onCreate.\"); return sInstance; } public static Builder builder(){ return new Builder(); } public static class Builder { private int mode; private IOwlObserver owlObserver; public Builder defaultMode(int mode){ this.mode = mode; return this; } public Builder subscribedBy(IOwlObserver owlObserver){ this.owlObserver = owlObserver; return this; } public NightOwl create(){ if ( sInstance != null ) throw new RuntimeException(\"Do not create NightOwl again.\"); sInstance = new NightOwl(); sInstance.mMode = mode; sInstance.mOwlObserver = owlObserver; return sInstance; } } }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/app/src/main/java/com/asha/nightowl/CustomView.java","main_file_content":"package com.asha.nightowl; import android.annotation.TargetApi; import android.app.Activity; import android.content.Context; import android.graphics.Canvas; import android.graphics.Paint; import android.os.Build; import android.support.v4.content.ContextCompat; import android.util.AttributeSet; import android.view.View; import com.asha.nightowllib.observer.IOwlObserver; public class CustomView extends View implements IOwlObserver { private Paint mPaint; private int mColor; private int mColorNight; public CustomView(Context context) { super(context); init(); } public CustomView(Context context, AttributeSet attrs) { super(context, attrs); init(); } public CustomView(Context context, AttributeSet attrs, int defStyleAttr) { super(context, attrs, defStyleAttr); init(); } @TargetApi(Build.VERSION_CODES.LOLLIPOP) public CustomView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) { super(context, attrs, defStyleAttr, defStyleRes); init(); } private void init() { mColor = ContextCompat.getColor(getContext(),R.color.background_color_pressed); mColorNight = ContextCompat.getColor(getContext(),R.color.background_color_n_pressed); mPaint = new Paint(); mPaint.setColor(mColor); mPaint.setAntiAlias(true); } @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { super.onMeasure(widthMeasureSpec, heightMeasureSpec); } @Override protected void onDraw(Canvas canvas) { float radius = getMeasuredHeight()>>1; float centerX = getMeasuredWidth()>>1; float centerY = getMeasuredHeight()>>1; canvas.drawCircle(centerX,centerY,radius,mPaint); canvas.drawCircle(centerX-radius*4,centerY,radius,mPaint); canvas.drawCircle(centerX-radius*8,centerY,radius,mPaint); canvas.drawCircle(centerX-radius*12,centerY,radius,mPaint); canvas.drawCircle(centerX+radius*4,centerY,radius,mPaint); canvas.drawCircle(centerX+radius*8,centerY,radius,mPaint); canvas.drawCircle(centerX+radius*12,centerY,radius,mPaint); } @Override public void onSkinChange(int mode, Activity activity) { int color = mode == 0 ? mColor : mColorNight; mPaint.setColor(color); this.invalidate(); } }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/observer/IOwlObserver.java","file_content":"package com.asha.nightowllib.observer; import android.app.Activity; import android.util.AttributeSet; import android.view.View; public interface IOwlObserver { void onSkinChange(int mode, Activity activity); }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/app/src/main/java/com/asha/nightowl/MainApplication.java","main_file_content":"package com.asha.nightowl; import android.app.Activity; import android.app.Application; import android.content.SharedPreferences; import android.support.v4.content.SharedPreferencesCompat; import com.asha.nightowl.custom.CardViewHandler; import com.asha.nightowl.custom.CollapsingToolbarLayoutHandler; import com.asha.nightowl.custom.OwlCustomTable; import com.asha.nightowl.custom.TabLayoutHandler; import com.asha.nightowl.custom.ToolbarHandler; import com.asha.nightowllib.NightOwl; import com.asha.nightowllib.observer.IOwlObserver; public class MainApplication extends Application { @Override public void onCreate() { super.onCreate(); SharedPreferences preferences = getSharedPreferences(\"NightOwlDemo\",Activity.MODE_PRIVATE); int mode = preferences.getInt(\"mode\",0); NightOwl.builder().subscribedBy(new SkinObserver()).defaultMode(mode).create(); NightOwl.owlRegisterHandler(TabLayoutHandler.class, OwlCustomTable.OwlTabLayout.class); NightOwl.owlRegisterHandler(ToolbarHandler.class, OwlCustomTable.OwlToolbar.class); NightOwl.owlRegisterHandler(CollapsingToolbarLayoutHandler.class, OwlCustomTable.OwlCollapsingToolbarLayout.class); NightOwl.owlRegisterHandler(CardViewHandler.class,OwlCustomTable.OwlCardView.class); } public static class SkinObserver implements IOwlObserver { @Override public void onSkinChange(int mode, Activity activity) { SharedPreferences preferences = activity.getSharedPreferences(\"NightOwlDemo\", Activity.MODE_PRIVATE); SharedPreferences.Editor editor = preferences.edit(); editor.putInt(\"mode\", mode); SharedPreferencesCompat.EditorCompat.getInstance().apply(editor); } } }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/app/src/main/java/com/asha/nightowl/custom/CardViewHandler.java","file_content":"package com.asha.nightowl.custom; import android.content.Context; import android.content.res.TypedArray; import android.support.annotation.NonNull; import android.support.v7.widget.CardView; import android.util.AttributeSet; import android.view.View; import com.asha.nightowl.R; import com.asha.nightowllib.handler.annotations.OwlHandle; import com.asha.nightowllib.handler.impls.AbsSkinHandler; import com.asha.nightowllib.paint.ColorBox; import com.asha.nightowllib.paint.IOwlPaint; @OwlHandle(CardView.class) public class CardViewHandler extends AbsSkinHandler implements OwlCustomTable.OwlCardView { @Override protected void onAfterCollect(View view, Context context, AttributeSet attrs, ColorBox box) { Object[] objects = box.get(R.styleable.NightOwl_CardView_night_cardBackgroundColor , OwlCustomTable.CardViewScope); if ( objects != null ){ TypedArray a = context.obtainStyledAttributes(attrs, android.support.v7.cardview.R.styleable.CardView, 0, android.support.v7.cardview.R.style.CardView_Light); if ( a != null ){ int backgroundColor = a.getColor(android.support.v7.cardview.R.styleable.CardView_cardBackgroundColor, 0); objects[0] = backgroundColor; a.recycle(); } } } public static class BackgroundPaint implements IOwlPaint{ @Override public void draw(@NonNull View view, @NonNull Object value) { CardView cardView = (CardView) view; cardView.setCardBackgroundColor((Integer) value); } @Override public Object[] setup(@NonNull View view, @NonNull TypedArray a, int attr) { int color1 = 0; int color2 = a.getColor(attr,0); return new Integer[]{ color1,color2}; } } }"},{"file_path":"NightOwl-master/NightOwl-master/app/src/main/java/com/asha/nightowl/custom/CollapsingToolbarLayoutHandler.java","file_content":"package com.asha.nightowl.custom; import android.content.res.TypedArray; import android.graphics.drawable.Drawable; import android.support.annotation.NonNull; import android.support.design.widget.CollapsingToolbarLayout; import android.view.View; import com.asha.nightowllib.handler.annotations.OwlHandle; import com.asha.nightowllib.handler.impls.AbsSkinHandler; import com.asha.nightowllib.paint.IOwlPaint; @OwlHandle(CollapsingToolbarLayout.class) public class CollapsingToolbarLayoutHandler extends AbsSkinHandler implements OwlCustomTable.OwlCollapsingToolbarLayout { public static class ContentScrimPaint implements IOwlPaint{ @Override public void draw(@NonNull View view, @NonNull Object value) { CollapsingToolbarLayout layout = (CollapsingToolbarLayout) view; layout.setContentScrim((Drawable) value); } @Override public Object[] setup(@NonNull View view, @NonNull TypedArray a, int attr) { CollapsingToolbarLayout layout = (CollapsingToolbarLayout) view; Drawable drawable1 = layout.getContentScrim(); Drawable drawable2 = a.getDrawable(attr); return new Drawable[]{drawable1,drawable2}; } } }"},{"file_path":"NightOwl-master/NightOwl-master/app/src/main/java/com/asha/nightowl/custom/OwlCustomTable.java","file_content":"package com.asha.nightowl.custom; import com.asha.nightowl.R; import com.asha.nightowllib.NightOwlTable; import com.asha.nightowllib.handler.annotations.OwlAttr; import com.asha.nightowllib.handler.annotations.OwlAttrScope; import com.asha.nightowllib.handler.annotations.OwlStyleable; public class OwlCustomTable { public static final int TabLayoutScope = 10000; @OwlAttrScope(TabLayoutScope) public interface OwlTabLayout extends NightOwlTable.OwlView { @OwlStyleable int[] NightOwl_TabLayout = R.styleable.NightOwl_TabLayout; @OwlAttr(TabLayoutHandler.TextColorPaint.class) int NightOwl_TabLayout_night_textColorSelector = R.styleable.NightOwl_TabLayout_night_textColorSelector; @OwlAttr(TabLayoutHandler.IndicatorColorPaint.class) int NightOwl_TabLayout_night_tabIndicatorColor = R.styleable.NightOwl_TabLayout_night_tabIndicatorColor; } @OwlAttrScope(10100) public interface OwlToolbar extends NightOwlTable.OwlView { @OwlStyleable int[] NightOwl_Toolbar = R.styleable.NightOwl_Toolbar; @OwlAttr(ToolbarHandler.TitleTextColorPaint.class) int NightOwl_Toolbar_night_titleTextColor = R.styleable.NightOwl_Toolbar_night_titleTextColor; @OwlAttr(ToolbarHandler.PopupThemePaint.class) int NightOwl_Toolbar_night_popupTheme = R.styleable.NightOwl_Toolbar_night_popupTheme; } @OwlAttrScope(10200) public interface OwlCollapsingToolbarLayout { @OwlStyleable int[] NightOwl_CollapsingToolbarLayout = R.styleable.NightOwl_CollapsingToolbarLayout; @OwlAttr(CollapsingToolbarLayoutHandler.ContentScrimPaint.class) int NightOwl_CollapsingToolbarLayout_night_contentScrim = R.styleable.NightOwl_CollapsingToolbarLayout_night_contentScrim; } public static final int CardViewScope = 10300; @OwlAttrScope(CardViewScope) public interface OwlCardView { @OwlStyleable int[] NightOwl_CardView = R.styleable.NightOwl_CardView; @OwlAttr(CardViewHandler.BackgroundPaint.class) int NightOwl_CardView_night_cardBackgroundColor = R.styleable.NightOwl_CardView_night_cardBackgroundColor; } }"},{"file_path":"NightOwl-master/NightOwl-master/app/src/main/java/com/asha/nightowl/custom/TabLayoutHandler.java","file_content":"package com.asha.nightowl.custom; import android.content.Context; import android.content.res.ColorStateList; import android.content.res.TypedArray; import android.support.annotation.NonNull; import android.support.design.widget.TabLayout; import android.util.AttributeSet; import android.view.View; import com.asha.nightowl.R; import com.asha.nightowllib.handler.annotations.OwlHandle; import com.asha.nightowllib.handler.impls.AbsSkinHandler; import com.asha.nightowllib.paint.ColorBox; import com.asha.nightowllib.paint.IOwlPaint; @OwlHandle(TabLayout.class) public class TabLayoutHandler extends AbsSkinHandler implements OwlCustomTable.OwlTabLayout { @Override protected void onAfterCollect(View view, Context context, AttributeSet attrs, ColorBox box) { Object[] objects = box.get(R.styleable.NightOwl_TabLayout_night_tabIndicatorColor , OwlCustomTable.TabLayoutScope); if ( objects != null ){ TypedArray a = context.obtainStyledAttributes(attrs, android.support.design.R.styleable.TabLayout, 0, android.support.design.R.style.Widget_Design_TabLayout); if ( a != null ){ int color = a.getColor(android.support.design.R.styleable.TabLayout_tabIndicatorColor, 0); objects[0] = color; a.recycle(); } } } public static class TextColorPaint implements IOwlPaint { @Override public void draw(@NonNull View view, @NonNull Object value) { TabLayout tabLayout = (TabLayout) view; ColorStateList csl = (ColorStateList) value; tabLayout.setTabTextColors(csl); } @Override public Object[] setup(@NonNull View view, @NonNull TypedArray a, int attr) { TabLayout tabLayout = (TabLayout) view; ColorStateList csl1 = tabLayout.getTabTextColors(); ColorStateList csl2 = a.getColorStateList(attr); return new ColorStateList[]{ csl1, csl2 }; } } public static class IndicatorColorPaint implements IOwlPaint { @Override public void draw(@NonNull View view, @NonNull Object value) { TabLayout tabLayout = (TabLayout) view; int color = (int) value; tabLayout.setSelectedTabIndicatorColor(color); } @Override public Object[] setup(@NonNull View view, @NonNull TypedArray a, int attr) { int color = 0; int color2 = a.getColor(attr,0); return new Integer[]{color,color2}; } } }"},{"file_path":"NightOwl-master/NightOwl-master/app/src/main/java/com/asha/nightowl/custom/ToolbarHandler.java","file_content":"package com.asha.nightowl.custom; import android.content.Context; import android.content.res.TypedArray; import android.support.annotation.NonNull; import android.support.v7.view.menu.BaseMenuPresenter; import android.support.v7.view.menu.MenuPresenter; import android.support.v7.widget.ActionMenuView; import android.support.v7.widget.Toolbar; import android.view.View; import com.asha.nightowllib.NightOwlUtil; import com.asha.nightowllib.handler.annotations.OwlHandle; import com.asha.nightowllib.handler.impls.AbsSkinHandler; import com.asha.nightowllib.paint.IOwlPaint; import java.lang.reflect.Field; @OwlHandle(Toolbar.class) public class ToolbarHandler extends AbsSkinHandler implements OwlCustomTable.OwlToolbar { public ToolbarHandler() { } public static class PopupThemePaint implements IOwlPaint{ private static Field sActionMenuViewField; private static Field sPresenterField; private static Field sContextField; static { try { sActionMenuViewField = Toolbar.class.getDeclaredField(\"mMenuView\"); sActionMenuViewField.setAccessible(true); sPresenterField = ActionMenuView.class.getDeclaredField(\"mPresenter\"); sPresenterField.setAccessible(true); sContextField = BaseMenuPresenter.class.getDeclaredField(\"mContext\"); sContextField.setAccessible(true); } catch (NoSuchFieldException e) { e.printStackTrace(); } } @Override public void draw(@NonNull View view, @NonNull Object value) { Toolbar toolbar = (Toolbar) view; int themeId = (int) value; try { ActionMenuView actionMenuView = (ActionMenuView) sActionMenuViewField.get(toolbar); if ( actionMenuView == null ){ toolbar.getContext().setTheme(themeId); } else { MenuPresenter presenter = (MenuPresenter) sPresenterField.get(actionMenuView); Context context = (Context) sContextField.get(presenter); context.setTheme(themeId); } } catch (IllegalAccessException e) { e.printStackTrace(); } toolbar.setPopupTheme((Integer) value); } @Override public Object[] setup(@NonNull View view, @NonNull TypedArray a, int attr) { Toolbar toolbar = (Toolbar) view; int theme1 = toolbar.getPopupTheme(); int theme2 = a.getResourceId(attr,0); return new Integer[]{theme1,theme2}; } } public static class TitleTextColorPaint implements IOwlPaint{ @Override public void draw(@NonNull View view, @NonNull Object value) { Toolbar toolbar = (Toolbar) view; int color = (int) value; toolbar.setTitleTextColor(color); } @Override public Object[] setup(@NonNull View view, @NonNull TypedArray a, int attr) { Toolbar toolbar = (Toolbar) view; int color1 = NightOwlUtil.getFieldIntSafely(Toolbar.class, \"mTitleTextColor\", toolbar); int color2 = a.getColor(attr,color1); return new Integer[]{ color1,color2 }; } } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/NightOwl.java","file_content":"package com.asha.nightowllib; import android.app.Activity; import android.view.ContextThemeWrapper; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.view.Window; import com.asha.nightowllib.handler.ISkinHandler; import com.asha.nightowllib.handler.OwlHandlerManager; import com.asha.nightowllib.inflater.Factory4InjectedInflater; import com.asha.nightowllib.observer.IOwlObserver; import com.asha.nightowllib.observer.OwlViewContext; import com.asha.nightowllib.paint.ColorBox; import com.asha.nightowllib.paint.OwlPaintManager; import static com.asha.nightowllib.NightOwlUtil.checkNonNull; import static com.asha.nightowllib.NightOwlUtil.checkViewCollected; import static com.asha.nightowllib.NightOwlUtil.injectLayoutInflater; import static com.asha.nightowllib.NightOwlUtil.insertEmptyTag; import static com.asha.nightowllib.NightOwlUtil.insertViewContext; import static com.asha.nightowllib.NightOwlUtil.obtainSkinBox; import static com.asha.nightowllib.NightOwlUtil.obtainViewContext; public class NightOwl { private static final String TAG = \"NightOwl\"; private static final String WINDOW_INFLATER = \"mLayoutInflater\"; private static final String THEME_INFLATER = \"mInflater\"; private static NightOwl sInstance; static { NightOwlTable.init(); } private int mMode = 0; private IOwlObserver mOwlObserver; private NightOwl(){ } public static void owlBeforeCreate(Activity activity){ Window window = activity.getWindow(); LayoutInflater layoutInflater = window.getLayoutInflater(); LayoutInflater injectLayoutInflater1 = Factory4InjectedInflater.newInstance(layoutInflater, activity); injectLayoutInflater(injectLayoutInflater1 , activity.getWindow() , activity.getWindow().getClass() , WINDOW_INFLATER); LayoutInflater injectLayoutInflater2 = injectLayoutInflater1.cloneInContext(activity); injectLayoutInflater(injectLayoutInflater2 , activity , ContextThemeWrapper.class , THEME_INFLATER); View v = activity.getWindow().getDecorView(); OwlViewContext owlObservable = new OwlViewContext(); insertViewContext(v, owlObservable); } public static void owlAfterCreate(Activity activity){ View root = activity.getWindow().getDecorView(); OwlViewContext viewContext = obtainViewContext(root); checkNonNull(viewContext, \"OwlViewContext can not be null!\"); viewContext.setupWithCurrentActivity(activity); viewContext.notifyObserver(sharedInstance().mMode, activity); } public static void owlResume( Activity activity ){ NightOwl nightOwl = sharedInstance(); int targetMode = nightOwl.mMode; owlDressUp(targetMode, activity); } public static void owlNewDress( Activity activity ) { int current = owlCurrentMode() + 1; current %= 2; owlDressUp(current, activity); } public static void owlRecyclerFix(View view){ int mode = owlCurrentMode(); innerRefreshSkin(mode, view); } private static void owlDressUp( int mode, Activity activity ){ NightOwl owl = sharedInstance(); View root = activity.getWindow().getDecorView(); OwlViewContext viewContext = obtainViewContext(root); checkNonNull(viewContext, \"OwlViewContext can not be null!\"); if ( viewContext.needSync(mode) ){ innerRefreshSkin(mode, root); viewContext.notifyObserver(mode, activity); } owl.mMode = mode; if ( owl.mOwlObserver != null ) owl.mOwlObserver.onSkinChange(mode,activity); } public static void owlRegisterCustom(IOwlObserver view){ if ( view instanceof View ) { View target = (View) view; insertEmptyTag(target); view.onSkinChange(owlCurrentMode(), null); } else { throw new IllegalArgumentException(\"owlRegisterCustom param must be a instance of View\"); } } public static void owlRegisterHandler(Class<? extends ISkinHandler> clz, Class paintTable){ OwlHandlerManager.registerHandler(clz); OwlPaintManager.registerPaint(paintTable); } public static int owlCurrentMode(){ return sharedInstance().mMode; } private static void innerRefreshSkin(int mode, View view ){ if ( checkViewCollected(view) ){ ColorBox box = obtainSkinBox(view); if ( box != null ) box.refreshSkin(mode, view); if ( view instanceof IOwlObserver ){ ((IOwlObserver) view).onSkinChange(mode,null); } } if ( view instanceof ViewGroup){ ViewGroup vg = (ViewGroup) view; View sub; for (int i = 0; i < vg.getChildCount(); i++) { sub = vg.getChildAt(i); innerRefreshSkin(mode, sub); } } } private static NightOwl sharedInstance(){ checkNonNull(sInstance,\"You must create NightOwl in Application onCreate.\"); return sInstance; } public static Builder builder(){ return new Builder(); } public static class Builder { private int mode; private IOwlObserver owlObserver; public Builder defaultMode(int mode){ this.mode = mode; return this; } public Builder subscribedBy(IOwlObserver owlObserver){ this.owlObserver = owlObserver; return this; } public NightOwl create(){ if ( sInstance != null ) throw new RuntimeException(\"Do not create NightOwl again.\"); sInstance = new NightOwl(); sInstance.mMode = mode; sInstance.mOwlObserver = owlObserver; return sInstance; } } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/observer/IOwlObserver.java","file_content":"package com.asha.nightowllib.observer; import android.app.Activity; import android.util.AttributeSet; import android.view.View; public interface IOwlObserver { void onSkinChange(int mode, Activity activity); }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/app/src/main/java/com/asha/nightowl/DemoUtil.java","main_file_content":"package com.asha.nightowl; public class DemoUtil { private static final int[] FakeImage = {R.drawable.demo01,R.drawable.demo02,R.drawable.demo03,R.drawable.demo04}; public static int fetchFakeImage(int positon){ return FakeImage[positon % FakeImage.length]; } }","dependencies":[]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/app/src/main/java/com/asha/nightowl/SettingActivity.java","main_file_content":"package com.asha.nightowl; import android.content.Context; import android.content.Intent; import android.os.Bundle; import android.support.v7.app.AppCompatActivity; import android.support.v7.widget.Toolbar; import android.view.MenuItem; import android.view.View; import android.view.ViewGroup; import com.asha.nightowllib.NightOwl; public class SettingActivity extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { NightOwl.owlBeforeCreate(this); super.onCreate(savedInstanceState); setContentView(R.layout.activity_setting); NightOwl.owlAfterCreate(this); Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar); View v = findViewById(R.id.button); v.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { NightOwl.owlNewDress(SettingActivity.this); } }); if ( getSupportActionBar() != null ) getSupportActionBar().setDisplayHomeAsUpEnabled(true); ViewGroup vp = (ViewGroup) findViewById(R.id.custom); CustomView customView = new CustomView(this); vp.addView(customView, ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT); NightOwl.owlRegisterCustom(customView); } public static void launch(Context context){ Intent i = new Intent(context,SettingActivity.class); context.startActivity(i); } @Override public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()){ case android.R.id.home: this.finish(); return true; } return super.onOptionsItemSelected(item); } @Override protected void onResume() { super.onResume(); NightOwl.owlResume(this); } }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/app/src/main/java/com/asha/nightowl/CustomView.java","file_content":"package com.asha.nightowl; import android.annotation.TargetApi; import android.app.Activity; import android.content.Context; import android.graphics.Canvas; import android.graphics.Paint; import android.os.Build; import android.support.v4.content.ContextCompat; import android.util.AttributeSet; import android.view.View; import com.asha.nightowllib.observer.IOwlObserver; public class CustomView extends View implements IOwlObserver { private Paint mPaint; private int mColor; private int mColorNight; public CustomView(Context context) { super(context); init(); } public CustomView(Context context, AttributeSet attrs) { super(context, attrs); init(); } public CustomView(Context context, AttributeSet attrs, int defStyleAttr) { super(context, attrs, defStyleAttr); init(); } @TargetApi(Build.VERSION_CODES.LOLLIPOP) public CustomView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) { super(context, attrs, defStyleAttr, defStyleRes); init(); } private void init() { mColor = ContextCompat.getColor(getContext(),R.color.background_color_pressed); mColorNight = ContextCompat.getColor(getContext(),R.color.background_color_n_pressed); mPaint = new Paint(); mPaint.setColor(mColor); mPaint.setAntiAlias(true); } @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { super.onMeasure(widthMeasureSpec, heightMeasureSpec); } @Override protected void onDraw(Canvas canvas) { float radius = getMeasuredHeight()>>1; float centerX = getMeasuredWidth()>>1; float centerY = getMeasuredHeight()>>1; canvas.drawCircle(centerX,centerY,radius,mPaint); canvas.drawCircle(centerX-radius*4,centerY,radius,mPaint); canvas.drawCircle(centerX-radius*8,centerY,radius,mPaint); canvas.drawCircle(centerX-radius*12,centerY,radius,mPaint); canvas.drawCircle(centerX+radius*4,centerY,radius,mPaint); canvas.drawCircle(centerX+radius*8,centerY,radius,mPaint); canvas.drawCircle(centerX+radius*12,centerY,radius,mPaint); } @Override public void onSkinChange(int mode, Activity activity) { int color = mode == 0 ? mColor : mColorNight; mPaint.setColor(color); this.invalidate(); } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/NightOwl.java","file_content":"package com.asha.nightowllib; import android.app.Activity; import android.view.ContextThemeWrapper; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.view.Window; import com.asha.nightowllib.handler.ISkinHandler; import com.asha.nightowllib.handler.OwlHandlerManager; import com.asha.nightowllib.inflater.Factory4InjectedInflater; import com.asha.nightowllib.observer.IOwlObserver; import com.asha.nightowllib.observer.OwlViewContext; import com.asha.nightowllib.paint.ColorBox; import com.asha.nightowllib.paint.OwlPaintManager; import static com.asha.nightowllib.NightOwlUtil.checkNonNull; import static com.asha.nightowllib.NightOwlUtil.checkViewCollected; import static com.asha.nightowllib.NightOwlUtil.injectLayoutInflater; import static com.asha.nightowllib.NightOwlUtil.insertEmptyTag; import static com.asha.nightowllib.NightOwlUtil.insertViewContext; import static com.asha.nightowllib.NightOwlUtil.obtainSkinBox; import static com.asha.nightowllib.NightOwlUtil.obtainViewContext; public class NightOwl { private static final String TAG = \"NightOwl\"; private static final String WINDOW_INFLATER = \"mLayoutInflater\"; private static final String THEME_INFLATER = \"mInflater\"; private static NightOwl sInstance; static { NightOwlTable.init(); } private int mMode = 0; private IOwlObserver mOwlObserver; private NightOwl(){ } public static void owlBeforeCreate(Activity activity){ Window window = activity.getWindow(); LayoutInflater layoutInflater = window.getLayoutInflater(); LayoutInflater injectLayoutInflater1 = Factory4InjectedInflater.newInstance(layoutInflater, activity); injectLayoutInflater(injectLayoutInflater1 , activity.getWindow() , activity.getWindow().getClass() , WINDOW_INFLATER); LayoutInflater injectLayoutInflater2 = injectLayoutInflater1.cloneInContext(activity); injectLayoutInflater(injectLayoutInflater2 , activity , ContextThemeWrapper.class , THEME_INFLATER); View v = activity.getWindow().getDecorView(); OwlViewContext owlObservable = new OwlViewContext(); insertViewContext(v, owlObservable); } public static void owlAfterCreate(Activity activity){ View root = activity.getWindow().getDecorView(); OwlViewContext viewContext = obtainViewContext(root); checkNonNull(viewContext, \"OwlViewContext can not be null!\"); viewContext.setupWithCurrentActivity(activity); viewContext.notifyObserver(sharedInstance().mMode, activity); } public static void owlResume( Activity activity ){ NightOwl nightOwl = sharedInstance(); int targetMode = nightOwl.mMode; owlDressUp(targetMode, activity); } public static void owlNewDress( Activity activity ) { int current = owlCurrentMode() + 1; current %= 2; owlDressUp(current, activity); } public static void owlRecyclerFix(View view){ int mode = owlCurrentMode(); innerRefreshSkin(mode, view); } private static void owlDressUp( int mode, Activity activity ){ NightOwl owl = sharedInstance(); View root = activity.getWindow().getDecorView(); OwlViewContext viewContext = obtainViewContext(root); checkNonNull(viewContext, \"OwlViewContext can not be null!\"); if ( viewContext.needSync(mode) ){ innerRefreshSkin(mode, root); viewContext.notifyObserver(mode, activity); } owl.mMode = mode; if ( owl.mOwlObserver != null ) owl.mOwlObserver.onSkinChange(mode,activity); } public static void owlRegisterCustom(IOwlObserver view){ if ( view instanceof View ) { View target = (View) view; insertEmptyTag(target); view.onSkinChange(owlCurrentMode(), null); } else { throw new IllegalArgumentException(\"owlRegisterCustom param must be a instance of View\"); } } public static void owlRegisterHandler(Class<? extends ISkinHandler> clz, Class paintTable){ OwlHandlerManager.registerHandler(clz); OwlPaintManager.registerPaint(paintTable); } public static int owlCurrentMode(){ return sharedInstance().mMode; } private static void innerRefreshSkin(int mode, View view ){ if ( checkViewCollected(view) ){ ColorBox box = obtainSkinBox(view); if ( box != null ) box.refreshSkin(mode, view); if ( view instanceof IOwlObserver ){ ((IOwlObserver) view).onSkinChange(mode,null); } } if ( view instanceof ViewGroup){ ViewGroup vg = (ViewGroup) view; View sub; for (int i = 0; i < vg.getChildCount(); i++) { sub = vg.getChildAt(i); innerRefreshSkin(mode, sub); } } } private static NightOwl sharedInstance(){ checkNonNull(sInstance,\"You must create NightOwl in Application onCreate.\"); return sInstance; } public static Builder builder(){ return new Builder(); } public static class Builder { private int mode; private IOwlObserver owlObserver; public Builder defaultMode(int mode){ this.mode = mode; return this; } public Builder subscribedBy(IOwlObserver owlObserver){ this.owlObserver = owlObserver; return this; } public NightOwl create(){ if ( sInstance != null ) throw new RuntimeException(\"Do not create NightOwl again.\"); sInstance = new NightOwl(); sInstance.mMode = mode; sInstance.mOwlObserver = owlObserver; return sInstance; } } }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/app/src/main/java/com/asha/nightowl/DetailActivity.java","main_file_content":"package com.asha.nightowl; import android.content.Context; import android.content.Intent; import android.os.Bundle; import android.support.v7.app.AppCompatActivity; import android.support.v7.widget.Toolbar; import android.view.MenuItem; import com.asha.nightowllib.NightOwl; public class DetailActivity extends AppCompatActivity { public static void launch(Context context){ Intent i = new Intent(context,DetailActivity.class); context.startActivity(i); } @Override protected void onCreate(Bundle savedInstanceState) { NightOwl.owlBeforeCreate(this); super.onCreate(savedInstanceState); setContentView(R.layout.activity_detail); NightOwl.owlAfterCreate(this); Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar); if (getSupportActionBar() != null) getSupportActionBar().setDisplayShowHomeEnabled(true); } @Override protected void onResume() { super.onResume(); NightOwl.owlResume(this); } @Override public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()){ case android.R.id.home: this.finish(); return true; } return super.onOptionsItemSelected(item); } }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/NightOwl.java","file_content":"package com.asha.nightowllib; import android.app.Activity; import android.view.ContextThemeWrapper; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.view.Window; import com.asha.nightowllib.handler.ISkinHandler; import com.asha.nightowllib.handler.OwlHandlerManager; import com.asha.nightowllib.inflater.Factory4InjectedInflater; import com.asha.nightowllib.observer.IOwlObserver; import com.asha.nightowllib.observer.OwlViewContext; import com.asha.nightowllib.paint.ColorBox; import com.asha.nightowllib.paint.OwlPaintManager; import static com.asha.nightowllib.NightOwlUtil.checkNonNull; import static com.asha.nightowllib.NightOwlUtil.checkViewCollected; import static com.asha.nightowllib.NightOwlUtil.injectLayoutInflater; import static com.asha.nightowllib.NightOwlUtil.insertEmptyTag; import static com.asha.nightowllib.NightOwlUtil.insertViewContext; import static com.asha.nightowllib.NightOwlUtil.obtainSkinBox; import static com.asha.nightowllib.NightOwlUtil.obtainViewContext; public class NightOwl { private static final String TAG = \"NightOwl\"; private static final String WINDOW_INFLATER = \"mLayoutInflater\"; private static final String THEME_INFLATER = \"mInflater\"; private static NightOwl sInstance; static { NightOwlTable.init(); } private int mMode = 0; private IOwlObserver mOwlObserver; private NightOwl(){ } public static void owlBeforeCreate(Activity activity){ Window window = activity.getWindow(); LayoutInflater layoutInflater = window.getLayoutInflater(); LayoutInflater injectLayoutInflater1 = Factory4InjectedInflater.newInstance(layoutInflater, activity); injectLayoutInflater(injectLayoutInflater1 , activity.getWindow() , activity.getWindow().getClass() , WINDOW_INFLATER); LayoutInflater injectLayoutInflater2 = injectLayoutInflater1.cloneInContext(activity); injectLayoutInflater(injectLayoutInflater2 , activity , ContextThemeWrapper.class , THEME_INFLATER); View v = activity.getWindow().getDecorView(); OwlViewContext owlObservable = new OwlViewContext(); insertViewContext(v, owlObservable); } public static void owlAfterCreate(Activity activity){ View root = activity.getWindow().getDecorView(); OwlViewContext viewContext = obtainViewContext(root); checkNonNull(viewContext, \"OwlViewContext can not be null!\"); viewContext.setupWithCurrentActivity(activity); viewContext.notifyObserver(sharedInstance().mMode, activity); } public static void owlResume( Activity activity ){ NightOwl nightOwl = sharedInstance(); int targetMode = nightOwl.mMode; owlDressUp(targetMode, activity); } public static void owlNewDress( Activity activity ) { int current = owlCurrentMode() + 1; current %= 2; owlDressUp(current, activity); } public static void owlRecyclerFix(View view){ int mode = owlCurrentMode(); innerRefreshSkin(mode, view); } private static void owlDressUp( int mode, Activity activity ){ NightOwl owl = sharedInstance(); View root = activity.getWindow().getDecorView(); OwlViewContext viewContext = obtainViewContext(root); checkNonNull(viewContext, \"OwlViewContext can not be null!\"); if ( viewContext.needSync(mode) ){ innerRefreshSkin(mode, root); viewContext.notifyObserver(mode, activity); } owl.mMode = mode; if ( owl.mOwlObserver != null ) owl.mOwlObserver.onSkinChange(mode,activity); } public static void owlRegisterCustom(IOwlObserver view){ if ( view instanceof View ) { View target = (View) view; insertEmptyTag(target); view.onSkinChange(owlCurrentMode(), null); } else { throw new IllegalArgumentException(\"owlRegisterCustom param must be a instance of View\"); } } public static void owlRegisterHandler(Class<? extends ISkinHandler> clz, Class paintTable){ OwlHandlerManager.registerHandler(clz); OwlPaintManager.registerPaint(paintTable); } public static int owlCurrentMode(){ return sharedInstance().mMode; } private static void innerRefreshSkin(int mode, View view ){ if ( checkViewCollected(view) ){ ColorBox box = obtainSkinBox(view); if ( box != null ) box.refreshSkin(mode, view); if ( view instanceof IOwlObserver ){ ((IOwlObserver) view).onSkinChange(mode,null); } } if ( view instanceof ViewGroup){ ViewGroup vg = (ViewGroup) view; View sub; for (int i = 0; i < vg.getChildCount(); i++) { sub = vg.getChildAt(i); innerRefreshSkin(mode, sub); } } } private static NightOwl sharedInstance(){ checkNonNull(sInstance,\"You must create NightOwl in Application onCreate.\"); return sInstance; } public static Builder builder(){ return new Builder(); } public static class Builder { private int mode; private IOwlObserver owlObserver; public Builder defaultMode(int mode){ this.mode = mode; return this; } public Builder subscribedBy(IOwlObserver owlObserver){ this.owlObserver = owlObserver; return this; } public NightOwl create(){ if ( sInstance != null ) throw new RuntimeException(\"Do not create NightOwl again.\"); sInstance = new NightOwl(); sInstance.mMode = mode; sInstance.mOwlObserver = owlObserver; return sInstance; } } }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/app/src/main/java/com/asha/nightowl/DemoActivity.java","main_file_content":"package com.asha.nightowl; import android.os.Bundle; import android.support.design.widget.TabLayout; import android.support.v4.app.Fragment; import android.support.v4.app.FragmentManager; import android.support.v4.app.FragmentPagerAdapter; import android.support.v4.view.PagerAdapter; import android.support.v4.view.ViewPager; import android.support.v7.app.AppCompatActivity; import android.support.v7.widget.Toolbar; import android.view.Menu; import android.view.MenuItem; import com.asha.nightowl.fragments.ListViewFragment; import com.asha.nightowl.fragments.RecyclerViewFragment; import com.asha.nightowllib.NightOwl; public class DemoActivity extends AppCompatActivity { private static final String TAG = \"DemoActivity\"; Toolbar toolbar; @Override protected void onCreate(Bundle savedInstanceState) { NightOwl.owlBeforeCreate(this); super.onCreate(savedInstanceState); setContentView(R.layout.activity_demo); NightOwl.owlAfterCreate(this); toolbar = (Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar); TabLayout tabLayout = (TabLayout) findViewById(R.id.tabLayout); ViewPager viewPager = (ViewPager) findViewById(R.id.viewPager); PagerAdapter pa = new DemoPagerAdapter(getSupportFragmentManager()); viewPager.setAdapter(pa); tabLayout.setupWithViewPager(viewPager); } @Override protected void onResume() { super.onResume(); NightOwl.owlResume(this); } @Override public boolean onCreateOptionsMenu(Menu menu) { getMenuInflater().inflate(R.menu.menu_setting,menu); return true; } @Override public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()){ case R.id.action_settings: SettingActivity.launch(this); return true; } return super.onOptionsItemSelected(item); } public static class DemoPagerAdapter extends FragmentPagerAdapter { private static final String[] titles = {\"recyclerview\",\"listview\"}; public DemoPagerAdapter(FragmentManager fm) { super(fm); } @Override public int getCount() { return titles.length; } @Override public Fragment getItem(int position) { switch (position){ case 0: return RecyclerViewFragment.newInstance(); case 1: default: return ListViewFragment.newInstance(); } } @Override public CharSequence getPageTitle(int position) { return titles[position]; } } }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/app/src/main/java/com/asha/nightowl/SettingActivity.java","file_content":"package com.asha.nightowl; import android.content.Context; import android.content.Intent; import android.os.Bundle; import android.support.v7.app.AppCompatActivity; import android.support.v7.widget.Toolbar; import android.view.MenuItem; import android.view.View; import android.view.ViewGroup; import com.asha.nightowllib.NightOwl; public class SettingActivity extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { NightOwl.owlBeforeCreate(this); super.onCreate(savedInstanceState); setContentView(R.layout.activity_setting); NightOwl.owlAfterCreate(this); Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar); View v = findViewById(R.id.button); v.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { NightOwl.owlNewDress(SettingActivity.this); } }); if ( getSupportActionBar() != null ) getSupportActionBar().setDisplayHomeAsUpEnabled(true); ViewGroup vp = (ViewGroup) findViewById(R.id.custom); CustomView customView = new CustomView(this); vp.addView(customView, ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT); NightOwl.owlRegisterCustom(customView); } public static void launch(Context context){ Intent i = new Intent(context,SettingActivity.class); context.startActivity(i); } @Override public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()){ case android.R.id.home: this.finish(); return true; } return super.onOptionsItemSelected(item); } @Override protected void onResume() { super.onResume(); NightOwl.owlResume(this); } }"},{"file_path":"NightOwl-master/NightOwl-master/app/src/main/java/com/asha/nightowl/fragments/ListViewFragment.java","file_content":"package com.asha.nightowl.fragments; import android.os.Bundle; import android.support.v4.app.Fragment; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.AdapterView; import android.widget.BaseAdapter; import android.widget.ImageView; import android.widget.ListView; import com.asha.nightowl.DetailActivity; import com.asha.nightowl.R; import static com.asha.nightowl.DemoUtil.fetchFakeImage; public class ListViewFragment extends Fragment { public static ListViewFragment newInstance() { Bundle args = new Bundle(); ListViewFragment fragment = new ListViewFragment(); fragment.setArguments(args); return fragment; } public ListViewFragment() { } @Override public void onViewCreated(View view, Bundle savedInstanceState) { ListView listView = (ListView) view.findViewById(R.id.listview); listView.setAdapter(new DemoAdapter()); listView.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { DetailActivity.launch(view.getContext()); } }); } @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { return inflater.inflate(R.layout.fragment_list_view, container, false); } public static class DemoAdapter extends BaseAdapter{ LayoutInflater mLayoutInflater; @Override public int getCount() { return 40; } @Override public Object getItem(int position) { return null; } @Override public long getItemId(int position) { return position; } @Override public View getView(int position, View convertView, ViewGroup parent) { if ( convertView == null ){ if ( mLayoutInflater == null ) mLayoutInflater = LayoutInflater.from(parent.getContext()); convertView = mLayoutInflater.inflate(R.layout.item_view1,parent,false); } VH vh = (VH) convertView.getTag(); if( vh == null ){ vh = new VH(convertView); convertView.setTag(vh); } vh.bind(position); return convertView; } } public static class VH { ImageView mImageView; public VH(View mView) { mImageView = (ImageView) mView.findViewById(R.id.image); } public void bind(int position){ mImageView.setImageResource(fetchFakeImage(position)); } } }"},{"file_path":"NightOwl-master/NightOwl-master/app/src/main/java/com/asha/nightowl/fragments/RecyclerViewFragment.java","file_content":"package com.asha.nightowl.fragments; import android.os.Bundle; import android.support.v4.app.Fragment; import android.support.v7.widget.LinearLayoutManager; import android.support.v7.widget.RecyclerView; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.ImageView; import com.asha.nightowl.DetailActivity; import com.asha.nightowl.R; import static com.asha.nightowl.DemoUtil.fetchFakeImage; public class RecyclerViewFragment extends Fragment { public static RecyclerViewFragment newInstance() { Bundle args = new Bundle(); RecyclerViewFragment fragment = new RecyclerViewFragment(); fragment.setArguments(args); return fragment; } public RecyclerViewFragment() { } RecyclerView recyclerView; @Override public void onViewCreated(View view, Bundle savedInstanceState) { recyclerView = (RecyclerView) view.findViewById(R.id.recyclerView); recyclerView.setLayoutManager(new LinearLayoutManager(view.getContext())); recyclerView.setAdapter(new DemoAdapter()); } @Override public void onResume() { super.onResume(); } @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { return inflater.inflate(R.layout.fragment_recycler_view, container, false); } public static class VH extends RecyclerView.ViewHolder{ ImageView mImageView; public VH(View itemView) { super(itemView); itemView.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { DetailActivity.launch(v.getContext()); } }); mImageView = (ImageView) itemView.findViewById(R.id.image); } public void bind(int position){ mImageView.setImageResource(fetchFakeImage(position)); } } public static class DemoAdapter extends RecyclerView.Adapter<VH>{ LayoutInflater mLayoutInflater; @Override public VH onCreateViewHolder(ViewGroup parent, int viewType) { if ( mLayoutInflater == null ) mLayoutInflater = LayoutInflater.from(parent.getContext()); View v = mLayoutInflater.inflate(R.layout.item_view2,parent,false); VH vh = new VH(v); return vh; } @Override public void onBindViewHolder(VH holder, int position) { holder.bind(position); } @Override public int getItemCount() { return 40; } } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/NightOwl.java","file_content":"package com.asha.nightowllib; import android.app.Activity; import android.view.ContextThemeWrapper; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.view.Window; import com.asha.nightowllib.handler.ISkinHandler; import com.asha.nightowllib.handler.OwlHandlerManager; import com.asha.nightowllib.inflater.Factory4InjectedInflater; import com.asha.nightowllib.observer.IOwlObserver; import com.asha.nightowllib.observer.OwlViewContext; import com.asha.nightowllib.paint.ColorBox; import com.asha.nightowllib.paint.OwlPaintManager; import static com.asha.nightowllib.NightOwlUtil.checkNonNull; import static com.asha.nightowllib.NightOwlUtil.checkViewCollected; import static com.asha.nightowllib.NightOwlUtil.injectLayoutInflater; import static com.asha.nightowllib.NightOwlUtil.insertEmptyTag; import static com.asha.nightowllib.NightOwlUtil.insertViewContext; import static com.asha.nightowllib.NightOwlUtil.obtainSkinBox; import static com.asha.nightowllib.NightOwlUtil.obtainViewContext; public class NightOwl { private static final String TAG = \"NightOwl\"; private static final String WINDOW_INFLATER = \"mLayoutInflater\"; private static final String THEME_INFLATER = \"mInflater\"; private static NightOwl sInstance; static { NightOwlTable.init(); } private int mMode = 0; private IOwlObserver mOwlObserver; private NightOwl(){ } public static void owlBeforeCreate(Activity activity){ Window window = activity.getWindow(); LayoutInflater layoutInflater = window.getLayoutInflater(); LayoutInflater injectLayoutInflater1 = Factory4InjectedInflater.newInstance(layoutInflater, activity); injectLayoutInflater(injectLayoutInflater1 , activity.getWindow() , activity.getWindow().getClass() , WINDOW_INFLATER); LayoutInflater injectLayoutInflater2 = injectLayoutInflater1.cloneInContext(activity); injectLayoutInflater(injectLayoutInflater2 , activity , ContextThemeWrapper.class , THEME_INFLATER); View v = activity.getWindow().getDecorView(); OwlViewContext owlObservable = new OwlViewContext(); insertViewContext(v, owlObservable); } public static void owlAfterCreate(Activity activity){ View root = activity.getWindow().getDecorView(); OwlViewContext viewContext = obtainViewContext(root); checkNonNull(viewContext, \"OwlViewContext can not be null!\"); viewContext.setupWithCurrentActivity(activity); viewContext.notifyObserver(sharedInstance().mMode, activity); } public static void owlResume( Activity activity ){ NightOwl nightOwl = sharedInstance(); int targetMode = nightOwl.mMode; owlDressUp(targetMode, activity); } public static void owlNewDress( Activity activity ) { int current = owlCurrentMode() + 1; current %= 2; owlDressUp(current, activity); } public static void owlRecyclerFix(View view){ int mode = owlCurrentMode(); innerRefreshSkin(mode, view); } private static void owlDressUp( int mode, Activity activity ){ NightOwl owl = sharedInstance(); View root = activity.getWindow().getDecorView(); OwlViewContext viewContext = obtainViewContext(root); checkNonNull(viewContext, \"OwlViewContext can not be null!\"); if ( viewContext.needSync(mode) ){ innerRefreshSkin(mode, root); viewContext.notifyObserver(mode, activity); } owl.mMode = mode; if ( owl.mOwlObserver != null ) owl.mOwlObserver.onSkinChange(mode,activity); } public static void owlRegisterCustom(IOwlObserver view){ if ( view instanceof View ) { View target = (View) view; insertEmptyTag(target); view.onSkinChange(owlCurrentMode(), null); } else { throw new IllegalArgumentException(\"owlRegisterCustom param must be a instance of View\"); } } public static void owlRegisterHandler(Class<? extends ISkinHandler> clz, Class paintTable){ OwlHandlerManager.registerHandler(clz); OwlPaintManager.registerPaint(paintTable); } public static int owlCurrentMode(){ return sharedInstance().mMode; } private static void innerRefreshSkin(int mode, View view ){ if ( checkViewCollected(view) ){ ColorBox box = obtainSkinBox(view); if ( box != null ) box.refreshSkin(mode, view); if ( view instanceof IOwlObserver ){ ((IOwlObserver) view).onSkinChange(mode,null); } } if ( view instanceof ViewGroup){ ViewGroup vg = (ViewGroup) view; View sub; for (int i = 0; i < vg.getChildCount(); i++) { sub = vg.getChildAt(i); innerRefreshSkin(mode, sub); } } } private static NightOwl sharedInstance(){ checkNonNull(sInstance,\"You must create NightOwl in Application onCreate.\"); return sInstance; } public static Builder builder(){ return new Builder(); } public static class Builder { private int mode; private IOwlObserver owlObserver; public Builder defaultMode(int mode){ this.mode = mode; return this; } public Builder subscribedBy(IOwlObserver owlObserver){ this.owlObserver = owlObserver; return this; } public NightOwl create(){ if ( sInstance != null ) throw new RuntimeException(\"Do not create NightOwl again.\"); sInstance = new NightOwl(); sInstance.mMode = mode; sInstance.mOwlObserver = owlObserver; return sInstance; } } }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/app/src/main/java/com/asha/nightowl/fragments/ListViewFragment.java","main_file_content":"package com.asha.nightowl.fragments; import android.os.Bundle; import android.support.v4.app.Fragment; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.AdapterView; import android.widget.BaseAdapter; import android.widget.ImageView; import android.widget.ListView; import com.asha.nightowl.DetailActivity; import com.asha.nightowl.R; import static com.asha.nightowl.DemoUtil.fetchFakeImage; public class ListViewFragment extends Fragment { public static ListViewFragment newInstance() { Bundle args = new Bundle(); ListViewFragment fragment = new ListViewFragment(); fragment.setArguments(args); return fragment; } public ListViewFragment() { } @Override public void onViewCreated(View view, Bundle savedInstanceState) { ListView listView = (ListView) view.findViewById(R.id.listview); listView.setAdapter(new DemoAdapter()); listView.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { DetailActivity.launch(view.getContext()); } }); } @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { return inflater.inflate(R.layout.fragment_list_view, container, false); } public static class DemoAdapter extends BaseAdapter{ LayoutInflater mLayoutInflater; @Override public int getCount() { return 40; } @Override public Object getItem(int position) { return null; } @Override public long getItemId(int position) { return position; } @Override public View getView(int position, View convertView, ViewGroup parent) { if ( convertView == null ){ if ( mLayoutInflater == null ) mLayoutInflater = LayoutInflater.from(parent.getContext()); convertView = mLayoutInflater.inflate(R.layout.item_view1,parent,false); } VH vh = (VH) convertView.getTag(); if( vh == null ){ vh = new VH(convertView); convertView.setTag(vh); } vh.bind(position); return convertView; } } public static class VH { ImageView mImageView; public VH(View mView) { mImageView = (ImageView) mView.findViewById(R.id.image); } public void bind(int position){ mImageView.setImageResource(fetchFakeImage(position)); } } }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/app/src/main/java/com/asha/nightowl/DetailActivity.java","file_content":"package com.asha.nightowl; import android.content.Context; import android.content.Intent; import android.os.Bundle; import android.support.v7.app.AppCompatActivity; import android.support.v7.widget.Toolbar; import android.view.MenuItem; import com.asha.nightowllib.NightOwl; public class DetailActivity extends AppCompatActivity { public static void launch(Context context){ Intent i = new Intent(context,DetailActivity.class); context.startActivity(i); } @Override protected void onCreate(Bundle savedInstanceState) { NightOwl.owlBeforeCreate(this); super.onCreate(savedInstanceState); setContentView(R.layout.activity_detail); NightOwl.owlAfterCreate(this); Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar); if (getSupportActionBar() != null) getSupportActionBar().setDisplayShowHomeEnabled(true); } @Override protected void onResume() { super.onResume(); NightOwl.owlResume(this); } @Override public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()){ case android.R.id.home: this.finish(); return true; } return super.onOptionsItemSelected(item); } }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/app/src/main/java/com/asha/nightowl/fragments/RecyclerViewFragment.java","main_file_content":"package com.asha.nightowl.fragments; import android.os.Bundle; import android.support.v4.app.Fragment; import android.support.v7.widget.LinearLayoutManager; import android.support.v7.widget.RecyclerView; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.ImageView; import com.asha.nightowl.DetailActivity; import com.asha.nightowl.R; import static com.asha.nightowl.DemoUtil.fetchFakeImage; public class RecyclerViewFragment extends Fragment { public static RecyclerViewFragment newInstance() { Bundle args = new Bundle(); RecyclerViewFragment fragment = new RecyclerViewFragment(); fragment.setArguments(args); return fragment; } public RecyclerViewFragment() { } RecyclerView recyclerView; @Override public void onViewCreated(View view, Bundle savedInstanceState) { recyclerView = (RecyclerView) view.findViewById(R.id.recyclerView); recyclerView.setLayoutManager(new LinearLayoutManager(view.getContext())); recyclerView.setAdapter(new DemoAdapter()); } @Override public void onResume() { super.onResume(); } @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { return inflater.inflate(R.layout.fragment_recycler_view, container, false); } public static class VH extends RecyclerView.ViewHolder{ ImageView mImageView; public VH(View itemView) { super(itemView); itemView.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { DetailActivity.launch(v.getContext()); } }); mImageView = (ImageView) itemView.findViewById(R.id.image); } public void bind(int position){ mImageView.setImageResource(fetchFakeImage(position)); } } public static class DemoAdapter extends RecyclerView.Adapter<VH>{ LayoutInflater mLayoutInflater; @Override public VH onCreateViewHolder(ViewGroup parent, int viewType) { if ( mLayoutInflater == null ) mLayoutInflater = LayoutInflater.from(parent.getContext()); View v = mLayoutInflater.inflate(R.layout.item_view2,parent,false); VH vh = new VH(v); return vh; } @Override public void onBindViewHolder(VH holder, int position) { holder.bind(position); } @Override public int getItemCount() { return 40; } } }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/app/src/main/java/com/asha/nightowl/DetailActivity.java","file_content":"package com.asha.nightowl; import android.content.Context; import android.content.Intent; import android.os.Bundle; import android.support.v7.app.AppCompatActivity; import android.support.v7.widget.Toolbar; import android.view.MenuItem; import com.asha.nightowllib.NightOwl; public class DetailActivity extends AppCompatActivity { public static void launch(Context context){ Intent i = new Intent(context,DetailActivity.class); context.startActivity(i); } @Override protected void onCreate(Bundle savedInstanceState) { NightOwl.owlBeforeCreate(this); super.onCreate(savedInstanceState); setContentView(R.layout.activity_detail); NightOwl.owlAfterCreate(this); Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar); if (getSupportActionBar() != null) getSupportActionBar().setDisplayShowHomeEnabled(true); } @Override protected void onResume() { super.onResume(); NightOwl.owlResume(this); } @Override public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()){ case android.R.id.home: this.finish(); return true; } return super.onOptionsItemSelected(item); } }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/app/src/main/java/com/asha/nightowl/custom/ToolbarHandler.java","main_file_content":"package com.asha.nightowl.custom; import android.content.Context; import android.content.res.TypedArray; import android.support.annotation.NonNull; import android.support.v7.view.menu.BaseMenuPresenter; import android.support.v7.view.menu.MenuPresenter; import android.support.v7.widget.ActionMenuView; import android.support.v7.widget.Toolbar; import android.view.View; import com.asha.nightowllib.NightOwlUtil; import com.asha.nightowllib.handler.annotations.OwlHandle; import com.asha.nightowllib.handler.impls.AbsSkinHandler; import com.asha.nightowllib.paint.IOwlPaint; import java.lang.reflect.Field; @OwlHandle(Toolbar.class) public class ToolbarHandler extends AbsSkinHandler implements OwlCustomTable.OwlToolbar { public ToolbarHandler() { } public static class PopupThemePaint implements IOwlPaint{ private static Field sActionMenuViewField; private static Field sPresenterField; private static Field sContextField; static { try { sActionMenuViewField = Toolbar.class.getDeclaredField(\"mMenuView\"); sActionMenuViewField.setAccessible(true); sPresenterField = ActionMenuView.class.getDeclaredField(\"mPresenter\"); sPresenterField.setAccessible(true); sContextField = BaseMenuPresenter.class.getDeclaredField(\"mContext\"); sContextField.setAccessible(true); } catch (NoSuchFieldException e) { e.printStackTrace(); } } @Override public void draw(@NonNull View view, @NonNull Object value) { Toolbar toolbar = (Toolbar) view; int themeId = (int) value; try { ActionMenuView actionMenuView = (ActionMenuView) sActionMenuViewField.get(toolbar); if ( actionMenuView == null ){ toolbar.getContext().setTheme(themeId); } else { MenuPresenter presenter = (MenuPresenter) sPresenterField.get(actionMenuView); Context context = (Context) sContextField.get(presenter); context.setTheme(themeId); } } catch (IllegalAccessException e) { e.printStackTrace(); } toolbar.setPopupTheme((Integer) value); } @Override public Object[] setup(@NonNull View view, @NonNull TypedArray a, int attr) { Toolbar toolbar = (Toolbar) view; int theme1 = toolbar.getPopupTheme(); int theme2 = a.getResourceId(attr,0); return new Integer[]{theme1,theme2}; } } public static class TitleTextColorPaint implements IOwlPaint{ @Override public void draw(@NonNull View view, @NonNull Object value) { Toolbar toolbar = (Toolbar) view; int color = (int) value; toolbar.setTitleTextColor(color); } @Override public Object[] setup(@NonNull View view, @NonNull TypedArray a, int attr) { Toolbar toolbar = (Toolbar) view; int color1 = NightOwlUtil.getFieldIntSafely(Toolbar.class, \"mTitleTextColor\", toolbar); int color2 = a.getColor(attr,color1); return new Integer[]{ color1,color2 }; } } }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/app/src/main/java/com/asha/nightowl/custom/OwlCustomTable.java","file_content":"package com.asha.nightowl.custom; import com.asha.nightowl.R; import com.asha.nightowllib.NightOwlTable; import com.asha.nightowllib.handler.annotations.OwlAttr; import com.asha.nightowllib.handler.annotations.OwlAttrScope; import com.asha.nightowllib.handler.annotations.OwlStyleable; public class OwlCustomTable { public static final int TabLayoutScope = 10000; @OwlAttrScope(TabLayoutScope) public interface OwlTabLayout extends NightOwlTable.OwlView { @OwlStyleable int[] NightOwl_TabLayout = R.styleable.NightOwl_TabLayout; @OwlAttr(TabLayoutHandler.TextColorPaint.class) int NightOwl_TabLayout_night_textColorSelector = R.styleable.NightOwl_TabLayout_night_textColorSelector; @OwlAttr(TabLayoutHandler.IndicatorColorPaint.class) int NightOwl_TabLayout_night_tabIndicatorColor = R.styleable.NightOwl_TabLayout_night_tabIndicatorColor; } @OwlAttrScope(10100) public interface OwlToolbar extends NightOwlTable.OwlView { @OwlStyleable int[] NightOwl_Toolbar = R.styleable.NightOwl_Toolbar; @OwlAttr(ToolbarHandler.TitleTextColorPaint.class) int NightOwl_Toolbar_night_titleTextColor = R.styleable.NightOwl_Toolbar_night_titleTextColor; @OwlAttr(ToolbarHandler.PopupThemePaint.class) int NightOwl_Toolbar_night_popupTheme = R.styleable.NightOwl_Toolbar_night_popupTheme; } @OwlAttrScope(10200) public interface OwlCollapsingToolbarLayout { @OwlStyleable int[] NightOwl_CollapsingToolbarLayout = R.styleable.NightOwl_CollapsingToolbarLayout; @OwlAttr(CollapsingToolbarLayoutHandler.ContentScrimPaint.class) int NightOwl_CollapsingToolbarLayout_night_contentScrim = R.styleable.NightOwl_CollapsingToolbarLayout_night_contentScrim; } public static final int CardViewScope = 10300; @OwlAttrScope(CardViewScope) public interface OwlCardView { @OwlStyleable int[] NightOwl_CardView = R.styleable.NightOwl_CardView; @OwlAttr(CardViewHandler.BackgroundPaint.class) int NightOwl_CardView_night_cardBackgroundColor = R.styleable.NightOwl_CardView_night_cardBackgroundColor; } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/NightOwlUtil.java","file_content":"package com.asha.nightowllib; import android.util.Log; import android.view.LayoutInflater; import android.view.View; import com.asha.nightowllib.handler.ISkinHandler; import com.asha.nightowllib.observer.OwlViewContext; import com.asha.nightowllib.paint.ColorBox; import java.lang.reflect.Field; public class NightOwlUtil { public static final int NIGHT_OWL_VIEW_TAG = (2 << 24) | (1 << 23); private static final String TAG = \"NightOwlUtil\"; private static final Boolean EMPTY_TAG = true; public static void checkNonNull(Object obj,String msg){ if ( obj == null ) throw new NullPointerException(msg); } public static boolean checkHandler(ISkinHandler handler,View view){ if ( handler == null ){ Log.e(TAG, \"Can't find handler of clz:\" + view.getClass().getName()); return false; } return true; } public static boolean checkViewCollected(View view){ return view.getTag( NIGHT_OWL_VIEW_TAG ) != null; } public static boolean checkBeforeLollipop(){ if (android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.LOLLIPOP) return true; else return false; } public static void insertSkinBox(View view, ColorBox box){ view.setTag(NIGHT_OWL_VIEW_TAG, box); } public static void insertEmptyTag(View view){ view.setTag(NIGHT_OWL_VIEW_TAG, EMPTY_TAG); } public static ColorBox obtainSkinBox(View view){ Object box = view.getTag(NIGHT_OWL_VIEW_TAG); checkNonNull(box,\"wtf, it can't be null.\"); if ( box instanceof ColorBox ){ return (ColorBox) box; } else if ( box.equals(EMPTY_TAG) ) { Log.d(TAG, \"EMPTY_TAG...\"); return null; } else { Log.e(TAG, \"wtf, NIGHT_OWL_VIEW_TAG had been used by someone else.\"); } return null; } public static void insertViewContext(View view, OwlViewContext viewContext){ view.setTag(NIGHT_OWL_VIEW_TAG + 1,viewContext); } public static OwlViewContext obtainViewContext(View view){ Object observable = view.getTag(NIGHT_OWL_VIEW_TAG + 1); if ( observable != null && observable instanceof OwlViewContext){ return (OwlViewContext) observable; } return null; } public static int getFieldIntSafely(Class clz, String fieldName, Object instance){ try { Field field = clz.getDeclaredField(fieldName); field.setAccessible(true); return field.getInt(instance); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (NoSuchFieldException e) { e.printStackTrace(); } return 0; } public static int getStaticFieldIntSafely(Field field){ try { return field.getInt(null); } catch (IllegalAccessException e) { e.printStackTrace(); } return 0; } public static int[] getStaticFieldIntArraySafely(Field field){ try { return (int[]) field.get(null); } catch (IllegalAccessException e) { e.printStackTrace(); } return null; } public static <T> T newInstanceSafely(Class<T> clz){ try { return clz.newInstance(); } catch (InstantiationException e) { e.printStackTrace(); } catch (IllegalAccessException e) { e.printStackTrace(); } return null; } public static void injectLayoutInflater(LayoutInflater layoutInflater, Object src,Class clz, String name){ try { Field field = clz.getDeclaredField(name); field.setAccessible(true); field.set(src, layoutInflater); } catch (NoSuchFieldException e) { e.printStackTrace(); } catch (IllegalAccessException e) { e.printStackTrace(); } } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/impls/AbsSkinHandler.java","file_content":"package com.asha.nightowllib.handler.impls; import android.content.Context; import android.content.res.Resources; import android.content.res.TypedArray; import android.util.AttributeSet; import android.util.Log; import android.view.View; import com.asha.nightowllib.handler.ISkinHandler; import com.asha.nightowllib.handler.annotations.OwlAttrScope; import com.asha.nightowllib.handler.annotations.OwlStyleable; import com.asha.nightowllib.handler.annotations.OwlSysStyleable; import com.asha.nightowllib.paint.ColorBox; import com.asha.nightowllib.paint.IOwlPaint; import java.lang.reflect.Field; import static com.asha.nightowllib.NightOwlUtil.getStaticFieldIntArraySafely; import static com.asha.nightowllib.NightOwlUtil.insertSkinBox; import static com.asha.nightowllib.NightOwlUtil.obtainSkinBox; import static com.asha.nightowllib.paint.OwlPaintManager.queryPaint; public abstract class AbsSkinHandler implements ISkinHandler { private final static String ANDROID_XML = \"http: private static final String TAG = \"AbsSkinHandler\"; @Override public void collect(int mode, View view, Context context, AttributeSet attrs) { Log.d(TAG, String.format(\"collected %s %s %s\", view, context, attrs)); ColorBox box = ColorBox.newInstance(); onBeforeCollect(view,context,attrs,box); final Resources.Theme theme = context.getTheme(); int systemStyleResId = 0; Class clz = this.getClass(); OwlSysStyleable systemStyleable = (OwlSysStyleable) clz.getAnnotation(OwlSysStyleable.class); if ( systemStyleable != null ){ String value = systemStyleable.value(); systemStyleResId = attrs.getAttributeResourceValue(ANDROID_XML, value, 0); } Field[] fields = clz.getFields(); for ( Field field : fields ){ OwlStyleable owlStyleable = field.getAnnotation(OwlStyleable.class); if ( owlStyleable == null ) continue; Class scopeClz = field.getDeclaringClass(); OwlAttrScope owlAttrScope = (OwlAttrScope) scopeClz.getAnnotation(OwlAttrScope.class); if ( owlAttrScope == null ) continue; int scope = owlAttrScope.value(); int[] styleableResId = getStaticFieldIntArraySafely(field); if ( styleableResId == null ) continue; TypedArray a = theme.obtainStyledAttributes(attrs, styleableResId, 0, systemStyleResId); if ( a != null ){ obtainStyle(view, box, scope, a); a.recycle(); } } onAfterCollect(view,context,attrs,box); insertSkinBox(view, box); box.refreshSkin(mode, view, true); } private void obtainStyle(View view , ColorBox box , int scope , TypedArray a ){ int n = a.getIndexCount(); for (int i = 0; i < n; i++) { int attr = a.getIndex(i); IOwlPaint paint = queryPaint(attr+scope); if ( paint == null) { Log.d(TAG, \"Can't find paint of attr:\" + attr + \" scope:\" + scope); continue; } Object[] values = paint.setup(view,a,attr); if ( values != null ) box.put(attr, scope, values); } } protected void onBeforeCollect(View view, Context context, AttributeSet attrs, ColorBox box){} protected void onAfterCollect(View view, Context context, AttributeSet attrs, ColorBox box){} @Override final public void onSkinChanged(int skin, View view) { ColorBox box = obtainSkinBox(view); if ( box != null ) box.refreshSkin(skin, view); } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/paint/IOwlPaint.java","file_content":"package com.asha.nightowllib.paint; import android.content.res.TypedArray; import android.view.View; public interface IOwlPaint { void draw(View view, Object value); Object[] setup(View view, TypedArray a, int attr); }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/app/src/main/java/com/asha/nightowl/custom/TabLayoutHandler.java","main_file_content":"package com.asha.nightowl.custom; import android.content.Context; import android.content.res.ColorStateList; import android.content.res.TypedArray; import android.support.annotation.NonNull; import android.support.design.widget.TabLayout; import android.util.AttributeSet; import android.view.View; import com.asha.nightowl.R; import com.asha.nightowllib.handler.annotations.OwlHandle; import com.asha.nightowllib.handler.impls.AbsSkinHandler; import com.asha.nightowllib.paint.ColorBox; import com.asha.nightowllib.paint.IOwlPaint; @OwlHandle(TabLayout.class) public class TabLayoutHandler extends AbsSkinHandler implements OwlCustomTable.OwlTabLayout { @Override protected void onAfterCollect(View view, Context context, AttributeSet attrs, ColorBox box) { Object[] objects = box.get(R.styleable.NightOwl_TabLayout_night_tabIndicatorColor , OwlCustomTable.TabLayoutScope); if ( objects != null ){ TypedArray a = context.obtainStyledAttributes(attrs, android.support.design.R.styleable.TabLayout, 0, android.support.design.R.style.Widget_Design_TabLayout); if ( a != null ){ int color = a.getColor(android.support.design.R.styleable.TabLayout_tabIndicatorColor, 0); objects[0] = color; a.recycle(); } } } public static class TextColorPaint implements IOwlPaint { @Override public void draw(@NonNull View view, @NonNull Object value) { TabLayout tabLayout = (TabLayout) view; ColorStateList csl = (ColorStateList) value; tabLayout.setTabTextColors(csl); } @Override public Object[] setup(@NonNull View view, @NonNull TypedArray a, int attr) { TabLayout tabLayout = (TabLayout) view; ColorStateList csl1 = tabLayout.getTabTextColors(); ColorStateList csl2 = a.getColorStateList(attr); return new ColorStateList[]{ csl1, csl2 }; } } public static class IndicatorColorPaint implements IOwlPaint { @Override public void draw(@NonNull View view, @NonNull Object value) { TabLayout tabLayout = (TabLayout) view; int color = (int) value; tabLayout.setSelectedTabIndicatorColor(color); } @Override public Object[] setup(@NonNull View view, @NonNull TypedArray a, int attr) { int color = 0; int color2 = a.getColor(attr,0); return new Integer[]{color,color2}; } } }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/app/src/main/java/com/asha/nightowl/custom/OwlCustomTable.java","file_content":"package com.asha.nightowl.custom; import com.asha.nightowl.R; import com.asha.nightowllib.NightOwlTable; import com.asha.nightowllib.handler.annotations.OwlAttr; import com.asha.nightowllib.handler.annotations.OwlAttrScope; import com.asha.nightowllib.handler.annotations.OwlStyleable; public class OwlCustomTable { public static final int TabLayoutScope = 10000; @OwlAttrScope(TabLayoutScope) public interface OwlTabLayout extends NightOwlTable.OwlView { @OwlStyleable int[] NightOwl_TabLayout = R.styleable.NightOwl_TabLayout; @OwlAttr(TabLayoutHandler.TextColorPaint.class) int NightOwl_TabLayout_night_textColorSelector = R.styleable.NightOwl_TabLayout_night_textColorSelector; @OwlAttr(TabLayoutHandler.IndicatorColorPaint.class) int NightOwl_TabLayout_night_tabIndicatorColor = R.styleable.NightOwl_TabLayout_night_tabIndicatorColor; } @OwlAttrScope(10100) public interface OwlToolbar extends NightOwlTable.OwlView { @OwlStyleable int[] NightOwl_Toolbar = R.styleable.NightOwl_Toolbar; @OwlAttr(ToolbarHandler.TitleTextColorPaint.class) int NightOwl_Toolbar_night_titleTextColor = R.styleable.NightOwl_Toolbar_night_titleTextColor; @OwlAttr(ToolbarHandler.PopupThemePaint.class) int NightOwl_Toolbar_night_popupTheme = R.styleable.NightOwl_Toolbar_night_popupTheme; } @OwlAttrScope(10200) public interface OwlCollapsingToolbarLayout { @OwlStyleable int[] NightOwl_CollapsingToolbarLayout = R.styleable.NightOwl_CollapsingToolbarLayout; @OwlAttr(CollapsingToolbarLayoutHandler.ContentScrimPaint.class) int NightOwl_CollapsingToolbarLayout_night_contentScrim = R.styleable.NightOwl_CollapsingToolbarLayout_night_contentScrim; } public static final int CardViewScope = 10300; @OwlAttrScope(CardViewScope) public interface OwlCardView { @OwlStyleable int[] NightOwl_CardView = R.styleable.NightOwl_CardView; @OwlAttr(CardViewHandler.BackgroundPaint.class) int NightOwl_CardView_night_cardBackgroundColor = R.styleable.NightOwl_CardView_night_cardBackgroundColor; } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/impls/AbsSkinHandler.java","file_content":"package com.asha.nightowllib.handler.impls; import android.content.Context; import android.content.res.Resources; import android.content.res.TypedArray; import android.util.AttributeSet; import android.util.Log; import android.view.View; import com.asha.nightowllib.handler.ISkinHandler; import com.asha.nightowllib.handler.annotations.OwlAttrScope; import com.asha.nightowllib.handler.annotations.OwlStyleable; import com.asha.nightowllib.handler.annotations.OwlSysStyleable; import com.asha.nightowllib.paint.ColorBox; import com.asha.nightowllib.paint.IOwlPaint; import java.lang.reflect.Field; import static com.asha.nightowllib.NightOwlUtil.getStaticFieldIntArraySafely; import static com.asha.nightowllib.NightOwlUtil.insertSkinBox; import static com.asha.nightowllib.NightOwlUtil.obtainSkinBox; import static com.asha.nightowllib.paint.OwlPaintManager.queryPaint; public abstract class AbsSkinHandler implements ISkinHandler { private final static String ANDROID_XML = \"http: private static final String TAG = \"AbsSkinHandler\"; @Override public void collect(int mode, View view, Context context, AttributeSet attrs) { Log.d(TAG, String.format(\"collected %s %s %s\", view, context, attrs)); ColorBox box = ColorBox.newInstance(); onBeforeCollect(view,context,attrs,box); final Resources.Theme theme = context.getTheme(); int systemStyleResId = 0; Class clz = this.getClass(); OwlSysStyleable systemStyleable = (OwlSysStyleable) clz.getAnnotation(OwlSysStyleable.class); if ( systemStyleable != null ){ String value = systemStyleable.value(); systemStyleResId = attrs.getAttributeResourceValue(ANDROID_XML, value, 0); } Field[] fields = clz.getFields(); for ( Field field : fields ){ OwlStyleable owlStyleable = field.getAnnotation(OwlStyleable.class); if ( owlStyleable == null ) continue; Class scopeClz = field.getDeclaringClass(); OwlAttrScope owlAttrScope = (OwlAttrScope) scopeClz.getAnnotation(OwlAttrScope.class); if ( owlAttrScope == null ) continue; int scope = owlAttrScope.value(); int[] styleableResId = getStaticFieldIntArraySafely(field); if ( styleableResId == null ) continue; TypedArray a = theme.obtainStyledAttributes(attrs, styleableResId, 0, systemStyleResId); if ( a != null ){ obtainStyle(view, box, scope, a); a.recycle(); } } onAfterCollect(view,context,attrs,box); insertSkinBox(view, box); box.refreshSkin(mode, view, true); } private void obtainStyle(View view , ColorBox box , int scope , TypedArray a ){ int n = a.getIndexCount(); for (int i = 0; i < n; i++) { int attr = a.getIndex(i); IOwlPaint paint = queryPaint(attr+scope); if ( paint == null) { Log.d(TAG, \"Can't find paint of attr:\" + attr + \" scope:\" + scope); continue; } Object[] values = paint.setup(view,a,attr); if ( values != null ) box.put(attr, scope, values); } } protected void onBeforeCollect(View view, Context context, AttributeSet attrs, ColorBox box){} protected void onAfterCollect(View view, Context context, AttributeSet attrs, ColorBox box){} @Override final public void onSkinChanged(int skin, View view) { ColorBox box = obtainSkinBox(view); if ( box != null ) box.refreshSkin(skin, view); } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/paint/ColorBox.java","file_content":"package com.asha.nightowllib.paint; import android.util.SparseArray; import android.view.View; import static com.asha.nightowllib.paint.OwlPaintManager.queryPaint; public class ColorBox { private int mMode = -1; private SparseArray<Object[]> mBox; private ColorBox() { mBox = new SparseArray<>(4); } public void put(int attr, int scope, Object... objects){ mBox.put(attr + scope, objects); } public void refreshSkin(int mode, View view, boolean force){ if ( force ) mMode = -1; refreshSkin(mode,view); } public Object[] get(int attr, int scope){ return mBox.get( attr + scope ); } public void refreshSkin(int mode, View view){ if ( mMode != mode ){ int size = mBox.size(); for (int i = 0; i < size; i++) { int attrWithScope = mBox.keyAt(i); Object[] res = mBox.valueAt(i); IOwlPaint paint = queryPaint(attrWithScope); if ( paint != null ) paint.draw(view, res[mode]); } } mMode = mode; } public int getMode() { return mMode; } public static ColorBox newInstance() { return new ColorBox(); } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/paint/IOwlPaint.java","file_content":"package com.asha.nightowllib.paint; import android.content.res.TypedArray; import android.view.View; public interface IOwlPaint { void draw(View view, Object value); Object[] setup(View view, TypedArray a, int attr); }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/app/src/main/java/com/asha/nightowl/custom/CollapsingToolbarLayoutHandler.java","main_file_content":"package com.asha.nightowl.custom; import android.content.res.TypedArray; import android.graphics.drawable.Drawable; import android.support.annotation.NonNull; import android.support.design.widget.CollapsingToolbarLayout; import android.view.View; import com.asha.nightowllib.handler.annotations.OwlHandle; import com.asha.nightowllib.handler.impls.AbsSkinHandler; import com.asha.nightowllib.paint.IOwlPaint; @OwlHandle(CollapsingToolbarLayout.class) public class CollapsingToolbarLayoutHandler extends AbsSkinHandler implements OwlCustomTable.OwlCollapsingToolbarLayout { public static class ContentScrimPaint implements IOwlPaint{ @Override public void draw(@NonNull View view, @NonNull Object value) { CollapsingToolbarLayout layout = (CollapsingToolbarLayout) view; layout.setContentScrim((Drawable) value); } @Override public Object[] setup(@NonNull View view, @NonNull TypedArray a, int attr) { CollapsingToolbarLayout layout = (CollapsingToolbarLayout) view; Drawable drawable1 = layout.getContentScrim(); Drawable drawable2 = a.getDrawable(attr); return new Drawable[]{drawable1,drawable2}; } } }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/app/src/main/java/com/asha/nightowl/custom/OwlCustomTable.java","file_content":"package com.asha.nightowl.custom; import com.asha.nightowl.R; import com.asha.nightowllib.NightOwlTable; import com.asha.nightowllib.handler.annotations.OwlAttr; import com.asha.nightowllib.handler.annotations.OwlAttrScope; import com.asha.nightowllib.handler.annotations.OwlStyleable; public class OwlCustomTable { public static final int TabLayoutScope = 10000; @OwlAttrScope(TabLayoutScope) public interface OwlTabLayout extends NightOwlTable.OwlView { @OwlStyleable int[] NightOwl_TabLayout = R.styleable.NightOwl_TabLayout; @OwlAttr(TabLayoutHandler.TextColorPaint.class) int NightOwl_TabLayout_night_textColorSelector = R.styleable.NightOwl_TabLayout_night_textColorSelector; @OwlAttr(TabLayoutHandler.IndicatorColorPaint.class) int NightOwl_TabLayout_night_tabIndicatorColor = R.styleable.NightOwl_TabLayout_night_tabIndicatorColor; } @OwlAttrScope(10100) public interface OwlToolbar extends NightOwlTable.OwlView { @OwlStyleable int[] NightOwl_Toolbar = R.styleable.NightOwl_Toolbar; @OwlAttr(ToolbarHandler.TitleTextColorPaint.class) int NightOwl_Toolbar_night_titleTextColor = R.styleable.NightOwl_Toolbar_night_titleTextColor; @OwlAttr(ToolbarHandler.PopupThemePaint.class) int NightOwl_Toolbar_night_popupTheme = R.styleable.NightOwl_Toolbar_night_popupTheme; } @OwlAttrScope(10200) public interface OwlCollapsingToolbarLayout { @OwlStyleable int[] NightOwl_CollapsingToolbarLayout = R.styleable.NightOwl_CollapsingToolbarLayout; @OwlAttr(CollapsingToolbarLayoutHandler.ContentScrimPaint.class) int NightOwl_CollapsingToolbarLayout_night_contentScrim = R.styleable.NightOwl_CollapsingToolbarLayout_night_contentScrim; } public static final int CardViewScope = 10300; @OwlAttrScope(CardViewScope) public interface OwlCardView { @OwlStyleable int[] NightOwl_CardView = R.styleable.NightOwl_CardView; @OwlAttr(CardViewHandler.BackgroundPaint.class) int NightOwl_CardView_night_cardBackgroundColor = R.styleable.NightOwl_CardView_night_cardBackgroundColor; } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/impls/AbsSkinHandler.java","file_content":"package com.asha.nightowllib.handler.impls; import android.content.Context; import android.content.res.Resources; import android.content.res.TypedArray; import android.util.AttributeSet; import android.util.Log; import android.view.View; import com.asha.nightowllib.handler.ISkinHandler; import com.asha.nightowllib.handler.annotations.OwlAttrScope; import com.asha.nightowllib.handler.annotations.OwlStyleable; import com.asha.nightowllib.handler.annotations.OwlSysStyleable; import com.asha.nightowllib.paint.ColorBox; import com.asha.nightowllib.paint.IOwlPaint; import java.lang.reflect.Field; import static com.asha.nightowllib.NightOwlUtil.getStaticFieldIntArraySafely; import static com.asha.nightowllib.NightOwlUtil.insertSkinBox; import static com.asha.nightowllib.NightOwlUtil.obtainSkinBox; import static com.asha.nightowllib.paint.OwlPaintManager.queryPaint; public abstract class AbsSkinHandler implements ISkinHandler { private final static String ANDROID_XML = \"http: private static final String TAG = \"AbsSkinHandler\"; @Override public void collect(int mode, View view, Context context, AttributeSet attrs) { Log.d(TAG, String.format(\"collected %s %s %s\", view, context, attrs)); ColorBox box = ColorBox.newInstance(); onBeforeCollect(view,context,attrs,box); final Resources.Theme theme = context.getTheme(); int systemStyleResId = 0; Class clz = this.getClass(); OwlSysStyleable systemStyleable = (OwlSysStyleable) clz.getAnnotation(OwlSysStyleable.class); if ( systemStyleable != null ){ String value = systemStyleable.value(); systemStyleResId = attrs.getAttributeResourceValue(ANDROID_XML, value, 0); } Field[] fields = clz.getFields(); for ( Field field : fields ){ OwlStyleable owlStyleable = field.getAnnotation(OwlStyleable.class); if ( owlStyleable == null ) continue; Class scopeClz = field.getDeclaringClass(); OwlAttrScope owlAttrScope = (OwlAttrScope) scopeClz.getAnnotation(OwlAttrScope.class); if ( owlAttrScope == null ) continue; int scope = owlAttrScope.value(); int[] styleableResId = getStaticFieldIntArraySafely(field); if ( styleableResId == null ) continue; TypedArray a = theme.obtainStyledAttributes(attrs, styleableResId, 0, systemStyleResId); if ( a != null ){ obtainStyle(view, box, scope, a); a.recycle(); } } onAfterCollect(view,context,attrs,box); insertSkinBox(view, box); box.refreshSkin(mode, view, true); } private void obtainStyle(View view , ColorBox box , int scope , TypedArray a ){ int n = a.getIndexCount(); for (int i = 0; i < n; i++) { int attr = a.getIndex(i); IOwlPaint paint = queryPaint(attr+scope); if ( paint == null) { Log.d(TAG, \"Can't find paint of attr:\" + attr + \" scope:\" + scope); continue; } Object[] values = paint.setup(view,a,attr); if ( values != null ) box.put(attr, scope, values); } } protected void onBeforeCollect(View view, Context context, AttributeSet attrs, ColorBox box){} protected void onAfterCollect(View view, Context context, AttributeSet attrs, ColorBox box){} @Override final public void onSkinChanged(int skin, View view) { ColorBox box = obtainSkinBox(view); if ( box != null ) box.refreshSkin(skin, view); } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/paint/IOwlPaint.java","file_content":"package com.asha.nightowllib.paint; import android.content.res.TypedArray; import android.view.View; public interface IOwlPaint { void draw(View view, Object value); Object[] setup(View view, TypedArray a, int attr); }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/app/src/main/java/com/asha/nightowl/custom/CardViewHandler.java","main_file_content":"package com.asha.nightowl.custom; import android.content.Context; import android.content.res.TypedArray; import android.support.annotation.NonNull; import android.support.v7.widget.CardView; import android.util.AttributeSet; import android.view.View; import com.asha.nightowl.R; import com.asha.nightowllib.handler.annotations.OwlHandle; import com.asha.nightowllib.handler.impls.AbsSkinHandler; import com.asha.nightowllib.paint.ColorBox; import com.asha.nightowllib.paint.IOwlPaint; @OwlHandle(CardView.class) public class CardViewHandler extends AbsSkinHandler implements OwlCustomTable.OwlCardView { @Override protected void onAfterCollect(View view, Context context, AttributeSet attrs, ColorBox box) { Object[] objects = box.get(R.styleable.NightOwl_CardView_night_cardBackgroundColor , OwlCustomTable.CardViewScope); if ( objects != null ){ TypedArray a = context.obtainStyledAttributes(attrs, android.support.v7.cardview.R.styleable.CardView, 0, android.support.v7.cardview.R.style.CardView_Light); if ( a != null ){ int backgroundColor = a.getColor(android.support.v7.cardview.R.styleable.CardView_cardBackgroundColor, 0); objects[0] = backgroundColor; a.recycle(); } } } public static class BackgroundPaint implements IOwlPaint{ @Override public void draw(@NonNull View view, @NonNull Object value) { CardView cardView = (CardView) view; cardView.setCardBackgroundColor((Integer) value); } @Override public Object[] setup(@NonNull View view, @NonNull TypedArray a, int attr) { int color1 = 0; int color2 = a.getColor(attr,0); return new Integer[]{ color1,color2}; } } }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/app/src/main/java/com/asha/nightowl/custom/OwlCustomTable.java","file_content":"package com.asha.nightowl.custom; import com.asha.nightowl.R; import com.asha.nightowllib.NightOwlTable; import com.asha.nightowllib.handler.annotations.OwlAttr; import com.asha.nightowllib.handler.annotations.OwlAttrScope; import com.asha.nightowllib.handler.annotations.OwlStyleable; public class OwlCustomTable { public static final int TabLayoutScope = 10000; @OwlAttrScope(TabLayoutScope) public interface OwlTabLayout extends NightOwlTable.OwlView { @OwlStyleable int[] NightOwl_TabLayout = R.styleable.NightOwl_TabLayout; @OwlAttr(TabLayoutHandler.TextColorPaint.class) int NightOwl_TabLayout_night_textColorSelector = R.styleable.NightOwl_TabLayout_night_textColorSelector; @OwlAttr(TabLayoutHandler.IndicatorColorPaint.class) int NightOwl_TabLayout_night_tabIndicatorColor = R.styleable.NightOwl_TabLayout_night_tabIndicatorColor; } @OwlAttrScope(10100) public interface OwlToolbar extends NightOwlTable.OwlView { @OwlStyleable int[] NightOwl_Toolbar = R.styleable.NightOwl_Toolbar; @OwlAttr(ToolbarHandler.TitleTextColorPaint.class) int NightOwl_Toolbar_night_titleTextColor = R.styleable.NightOwl_Toolbar_night_titleTextColor; @OwlAttr(ToolbarHandler.PopupThemePaint.class) int NightOwl_Toolbar_night_popupTheme = R.styleable.NightOwl_Toolbar_night_popupTheme; } @OwlAttrScope(10200) public interface OwlCollapsingToolbarLayout { @OwlStyleable int[] NightOwl_CollapsingToolbarLayout = R.styleable.NightOwl_CollapsingToolbarLayout; @OwlAttr(CollapsingToolbarLayoutHandler.ContentScrimPaint.class) int NightOwl_CollapsingToolbarLayout_night_contentScrim = R.styleable.NightOwl_CollapsingToolbarLayout_night_contentScrim; } public static final int CardViewScope = 10300; @OwlAttrScope(CardViewScope) public interface OwlCardView { @OwlStyleable int[] NightOwl_CardView = R.styleable.NightOwl_CardView; @OwlAttr(CardViewHandler.BackgroundPaint.class) int NightOwl_CardView_night_cardBackgroundColor = R.styleable.NightOwl_CardView_night_cardBackgroundColor; } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/handler/impls/AbsSkinHandler.java","file_content":"package com.asha.nightowllib.handler.impls; import android.content.Context; import android.content.res.Resources; import android.content.res.TypedArray; import android.util.AttributeSet; import android.util.Log; import android.view.View; import com.asha.nightowllib.handler.ISkinHandler; import com.asha.nightowllib.handler.annotations.OwlAttrScope; import com.asha.nightowllib.handler.annotations.OwlStyleable; import com.asha.nightowllib.handler.annotations.OwlSysStyleable; import com.asha.nightowllib.paint.ColorBox; import com.asha.nightowllib.paint.IOwlPaint; import java.lang.reflect.Field; import static com.asha.nightowllib.NightOwlUtil.getStaticFieldIntArraySafely; import static com.asha.nightowllib.NightOwlUtil.insertSkinBox; import static com.asha.nightowllib.NightOwlUtil.obtainSkinBox; import static com.asha.nightowllib.paint.OwlPaintManager.queryPaint; public abstract class AbsSkinHandler implements ISkinHandler { private final static String ANDROID_XML = \"http: private static final String TAG = \"AbsSkinHandler\"; @Override public void collect(int mode, View view, Context context, AttributeSet attrs) { Log.d(TAG, String.format(\"collected %s %s %s\", view, context, attrs)); ColorBox box = ColorBox.newInstance(); onBeforeCollect(view,context,attrs,box); final Resources.Theme theme = context.getTheme(); int systemStyleResId = 0; Class clz = this.getClass(); OwlSysStyleable systemStyleable = (OwlSysStyleable) clz.getAnnotation(OwlSysStyleable.class); if ( systemStyleable != null ){ String value = systemStyleable.value(); systemStyleResId = attrs.getAttributeResourceValue(ANDROID_XML, value, 0); } Field[] fields = clz.getFields(); for ( Field field : fields ){ OwlStyleable owlStyleable = field.getAnnotation(OwlStyleable.class); if ( owlStyleable == null ) continue; Class scopeClz = field.getDeclaringClass(); OwlAttrScope owlAttrScope = (OwlAttrScope) scopeClz.getAnnotation(OwlAttrScope.class); if ( owlAttrScope == null ) continue; int scope = owlAttrScope.value(); int[] styleableResId = getStaticFieldIntArraySafely(field); if ( styleableResId == null ) continue; TypedArray a = theme.obtainStyledAttributes(attrs, styleableResId, 0, systemStyleResId); if ( a != null ){ obtainStyle(view, box, scope, a); a.recycle(); } } onAfterCollect(view,context,attrs,box); insertSkinBox(view, box); box.refreshSkin(mode, view, true); } private void obtainStyle(View view , ColorBox box , int scope , TypedArray a ){ int n = a.getIndexCount(); for (int i = 0; i < n; i++) { int attr = a.getIndex(i); IOwlPaint paint = queryPaint(attr+scope); if ( paint == null) { Log.d(TAG, \"Can't find paint of attr:\" + attr + \" scope:\" + scope); continue; } Object[] values = paint.setup(view,a,attr); if ( values != null ) box.put(attr, scope, values); } } protected void onBeforeCollect(View view, Context context, AttributeSet attrs, ColorBox box){} protected void onAfterCollect(View view, Context context, AttributeSet attrs, ColorBox box){} @Override final public void onSkinChanged(int skin, View view) { ColorBox box = obtainSkinBox(view); if ( box != null ) box.refreshSkin(skin, view); } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/paint/ColorBox.java","file_content":"package com.asha.nightowllib.paint; import android.util.SparseArray; import android.view.View; import static com.asha.nightowllib.paint.OwlPaintManager.queryPaint; public class ColorBox { private int mMode = -1; private SparseArray<Object[]> mBox; private ColorBox() { mBox = new SparseArray<>(4); } public void put(int attr, int scope, Object... objects){ mBox.put(attr + scope, objects); } public void refreshSkin(int mode, View view, boolean force){ if ( force ) mMode = -1; refreshSkin(mode,view); } public Object[] get(int attr, int scope){ return mBox.get( attr + scope ); } public void refreshSkin(int mode, View view){ if ( mMode != mode ){ int size = mBox.size(); for (int i = 0; i < size; i++) { int attrWithScope = mBox.keyAt(i); Object[] res = mBox.valueAt(i); IOwlPaint paint = queryPaint(attrWithScope); if ( paint != null ) paint.draw(view, res[mode]); } } mMode = mode; } public int getMode() { return mMode; } public static ColorBox newInstance() { return new ColorBox(); } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/paint/IOwlPaint.java","file_content":"package com.asha.nightowllib.paint; import android.content.res.TypedArray; import android.view.View; public interface IOwlPaint { void draw(View view, Object value); Object[] setup(View view, TypedArray a, int attr); }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/app/src/main/java/com/asha/nightowl/custom/OwlCustomTable.java","main_file_content":"package com.asha.nightowl.custom; import com.asha.nightowl.R; import com.asha.nightowllib.NightOwlTable; import com.asha.nightowllib.handler.annotations.OwlAttr; import com.asha.nightowllib.handler.annotations.OwlAttrScope; import com.asha.nightowllib.handler.annotations.OwlStyleable; public class OwlCustomTable { public static final int TabLayoutScope = 10000; @OwlAttrScope(TabLayoutScope) public interface OwlTabLayout extends NightOwlTable.OwlView { @OwlStyleable int[] NightOwl_TabLayout = R.styleable.NightOwl_TabLayout; @OwlAttr(TabLayoutHandler.TextColorPaint.class) int NightOwl_TabLayout_night_textColorSelector = R.styleable.NightOwl_TabLayout_night_textColorSelector; @OwlAttr(TabLayoutHandler.IndicatorColorPaint.class) int NightOwl_TabLayout_night_tabIndicatorColor = R.styleable.NightOwl_TabLayout_night_tabIndicatorColor; } @OwlAttrScope(10100) public interface OwlToolbar extends NightOwlTable.OwlView { @OwlStyleable int[] NightOwl_Toolbar = R.styleable.NightOwl_Toolbar; @OwlAttr(ToolbarHandler.TitleTextColorPaint.class) int NightOwl_Toolbar_night_titleTextColor = R.styleable.NightOwl_Toolbar_night_titleTextColor; @OwlAttr(ToolbarHandler.PopupThemePaint.class) int NightOwl_Toolbar_night_popupTheme = R.styleable.NightOwl_Toolbar_night_popupTheme; } @OwlAttrScope(10200) public interface OwlCollapsingToolbarLayout { @OwlStyleable int[] NightOwl_CollapsingToolbarLayout = R.styleable.NightOwl_CollapsingToolbarLayout; @OwlAttr(CollapsingToolbarLayoutHandler.ContentScrimPaint.class) int NightOwl_CollapsingToolbarLayout_night_contentScrim = R.styleable.NightOwl_CollapsingToolbarLayout_night_contentScrim; } public static final int CardViewScope = 10300; @OwlAttrScope(CardViewScope) public interface OwlCardView { @OwlStyleable int[] NightOwl_CardView = R.styleable.NightOwl_CardView; @OwlAttr(CardViewHandler.BackgroundPaint.class) int NightOwl_CardView_night_cardBackgroundColor = R.styleable.NightOwl_CardView_night_cardBackgroundColor; } }","dependencies":[{"file_path":"NightOwl-master/NightOwl-master/app/src/main/java/com/asha/nightowl/custom/CardViewHandler.java","file_content":"package com.asha.nightowl.custom; import android.content.Context; import android.content.res.TypedArray; import android.support.annotation.NonNull; import android.support.v7.widget.CardView; import android.util.AttributeSet; import android.view.View; import com.asha.nightowl.R; import com.asha.nightowllib.handler.annotations.OwlHandle; import com.asha.nightowllib.handler.impls.AbsSkinHandler; import com.asha.nightowllib.paint.ColorBox; import com.asha.nightowllib.paint.IOwlPaint; @OwlHandle(CardView.class) public class CardViewHandler extends AbsSkinHandler implements OwlCustomTable.OwlCardView { @Override protected void onAfterCollect(View view, Context context, AttributeSet attrs, ColorBox box) { Object[] objects = box.get(R.styleable.NightOwl_CardView_night_cardBackgroundColor , OwlCustomTable.CardViewScope); if ( objects != null ){ TypedArray a = context.obtainStyledAttributes(attrs, android.support.v7.cardview.R.styleable.CardView, 0, android.support.v7.cardview.R.style.CardView_Light); if ( a != null ){ int backgroundColor = a.getColor(android.support.v7.cardview.R.styleable.CardView_cardBackgroundColor, 0); objects[0] = backgroundColor; a.recycle(); } } } public static class BackgroundPaint implements IOwlPaint{ @Override public void draw(@NonNull View view, @NonNull Object value) { CardView cardView = (CardView) view; cardView.setCardBackgroundColor((Integer) value); } @Override public Object[] setup(@NonNull View view, @NonNull TypedArray a, int attr) { int color1 = 0; int color2 = a.getColor(attr,0); return new Integer[]{ color1,color2}; } } }"},{"file_path":"NightOwl-master/NightOwl-master/app/src/main/java/com/asha/nightowl/custom/CollapsingToolbarLayoutHandler.java","file_content":"package com.asha.nightowl.custom; import android.content.res.TypedArray; import android.graphics.drawable.Drawable; import android.support.annotation.NonNull; import android.support.design.widget.CollapsingToolbarLayout; import android.view.View; import com.asha.nightowllib.handler.annotations.OwlHandle; import com.asha.nightowllib.handler.impls.AbsSkinHandler; import com.asha.nightowllib.paint.IOwlPaint; @OwlHandle(CollapsingToolbarLayout.class) public class CollapsingToolbarLayoutHandler extends AbsSkinHandler implements OwlCustomTable.OwlCollapsingToolbarLayout { public static class ContentScrimPaint implements IOwlPaint{ @Override public void draw(@NonNull View view, @NonNull Object value) { CollapsingToolbarLayout layout = (CollapsingToolbarLayout) view; layout.setContentScrim((Drawable) value); } @Override public Object[] setup(@NonNull View view, @NonNull TypedArray a, int attr) { CollapsingToolbarLayout layout = (CollapsingToolbarLayout) view; Drawable drawable1 = layout.getContentScrim(); Drawable drawable2 = a.getDrawable(attr); return new Drawable[]{drawable1,drawable2}; } } }"},{"file_path":"NightOwl-master/NightOwl-master/app/src/main/java/com/asha/nightowl/custom/TabLayoutHandler.java","file_content":"package com.asha.nightowl.custom; import android.content.Context; import android.content.res.ColorStateList; import android.content.res.TypedArray; import android.support.annotation.NonNull; import android.support.design.widget.TabLayout; import android.util.AttributeSet; import android.view.View; import com.asha.nightowl.R; import com.asha.nightowllib.handler.annotations.OwlHandle; import com.asha.nightowllib.handler.impls.AbsSkinHandler; import com.asha.nightowllib.paint.ColorBox; import com.asha.nightowllib.paint.IOwlPaint; @OwlHandle(TabLayout.class) public class TabLayoutHandler extends AbsSkinHandler implements OwlCustomTable.OwlTabLayout { @Override protected void onAfterCollect(View view, Context context, AttributeSet attrs, ColorBox box) { Object[] objects = box.get(R.styleable.NightOwl_TabLayout_night_tabIndicatorColor , OwlCustomTable.TabLayoutScope); if ( objects != null ){ TypedArray a = context.obtainStyledAttributes(attrs, android.support.design.R.styleable.TabLayout, 0, android.support.design.R.style.Widget_Design_TabLayout); if ( a != null ){ int color = a.getColor(android.support.design.R.styleable.TabLayout_tabIndicatorColor, 0); objects[0] = color; a.recycle(); } } } public static class TextColorPaint implements IOwlPaint { @Override public void draw(@NonNull View view, @NonNull Object value) { TabLayout tabLayout = (TabLayout) view; ColorStateList csl = (ColorStateList) value; tabLayout.setTabTextColors(csl); } @Override public Object[] setup(@NonNull View view, @NonNull TypedArray a, int attr) { TabLayout tabLayout = (TabLayout) view; ColorStateList csl1 = tabLayout.getTabTextColors(); ColorStateList csl2 = a.getColorStateList(attr); return new ColorStateList[]{ csl1, csl2 }; } } public static class IndicatorColorPaint implements IOwlPaint { @Override public void draw(@NonNull View view, @NonNull Object value) { TabLayout tabLayout = (TabLayout) view; int color = (int) value; tabLayout.setSelectedTabIndicatorColor(color); } @Override public Object[] setup(@NonNull View view, @NonNull TypedArray a, int attr) { int color = 0; int color2 = a.getColor(attr,0); return new Integer[]{color,color2}; } } }"},{"file_path":"NightOwl-master/NightOwl-master/app/src/main/java/com/asha/nightowl/custom/ToolbarHandler.java","file_content":"package com.asha.nightowl.custom; import android.content.Context; import android.content.res.TypedArray; import android.support.annotation.NonNull; import android.support.v7.view.menu.BaseMenuPresenter; import android.support.v7.view.menu.MenuPresenter; import android.support.v7.widget.ActionMenuView; import android.support.v7.widget.Toolbar; import android.view.View; import com.asha.nightowllib.NightOwlUtil; import com.asha.nightowllib.handler.annotations.OwlHandle; import com.asha.nightowllib.handler.impls.AbsSkinHandler; import com.asha.nightowllib.paint.IOwlPaint; import java.lang.reflect.Field; @OwlHandle(Toolbar.class) public class ToolbarHandler extends AbsSkinHandler implements OwlCustomTable.OwlToolbar { public ToolbarHandler() { } public static class PopupThemePaint implements IOwlPaint{ private static Field sActionMenuViewField; private static Field sPresenterField; private static Field sContextField; static { try { sActionMenuViewField = Toolbar.class.getDeclaredField(\"mMenuView\"); sActionMenuViewField.setAccessible(true); sPresenterField = ActionMenuView.class.getDeclaredField(\"mPresenter\"); sPresenterField.setAccessible(true); sContextField = BaseMenuPresenter.class.getDeclaredField(\"mContext\"); sContextField.setAccessible(true); } catch (NoSuchFieldException e) { e.printStackTrace(); } } @Override public void draw(@NonNull View view, @NonNull Object value) { Toolbar toolbar = (Toolbar) view; int themeId = (int) value; try { ActionMenuView actionMenuView = (ActionMenuView) sActionMenuViewField.get(toolbar); if ( actionMenuView == null ){ toolbar.getContext().setTheme(themeId); } else { MenuPresenter presenter = (MenuPresenter) sPresenterField.get(actionMenuView); Context context = (Context) sContextField.get(presenter); context.setTheme(themeId); } } catch (IllegalAccessException e) { e.printStackTrace(); } toolbar.setPopupTheme((Integer) value); } @Override public Object[] setup(@NonNull View view, @NonNull TypedArray a, int attr) { Toolbar toolbar = (Toolbar) view; int theme1 = toolbar.getPopupTheme(); int theme2 = a.getResourceId(attr,0); return new Integer[]{theme1,theme2}; } } public static class TitleTextColorPaint implements IOwlPaint{ @Override public void draw(@NonNull View view, @NonNull Object value) { Toolbar toolbar = (Toolbar) view; int color = (int) value; toolbar.setTitleTextColor(color); } @Override public Object[] setup(@NonNull View view, @NonNull TypedArray a, int attr) { Toolbar toolbar = (Toolbar) view; int color1 = NightOwlUtil.getFieldIntSafely(Toolbar.class, \"mTitleTextColor\", toolbar); int color2 = a.getColor(attr,color1); return new Integer[]{ color1,color2 }; } } }"},{"file_path":"NightOwl-master/NightOwl-master/nightowllib/src/main/java/com/asha/nightowllib/NightOwlTable.java","file_content":"package com.asha.nightowllib; import com.asha.nightowllib.handler.annotations.OwlAttr; import com.asha.nightowllib.handler.annotations.OwlAttrScope; import com.asha.nightowllib.handler.annotations.OwlStyleable; import com.asha.nightowllib.handler.impls.ButtonHandler; import com.asha.nightowllib.handler.impls.ImageViewHandler; import com.asha.nightowllib.handler.impls.ListViewHandler; import com.asha.nightowllib.handler.impls.TextViewHandler; import com.asha.nightowllib.handler.impls.ViewHandler; import com.asha.nightowllib.paint.imps.AlphaPaint; import com.asha.nightowllib.paint.imps.BackgroundPaint; import com.asha.nightowllib.paint.imps.ImageViewSrcPaint; import com.asha.nightowllib.paint.imps.ListViewDividerPaint; import com.asha.nightowllib.paint.imps.ListViewSelectorPaint; import com.asha.nightowllib.paint.imps.TextColorPaint; import static com.asha.nightowllib.handler.OwlHandlerManager.registerHandler; public class NightOwlTable { protected static void init(){ registerHandler(ListViewHandler.class); registerHandler(ImageViewHandler.class); registerHandler(TextViewHandler.class); registerHandler(ButtonHandler.class); registerHandler(ViewHandler.class); } @OwlAttrScope(2000) public interface OwlView { @OwlStyleable int[] NightOwl_View = R.styleable.NightOwl_View; @OwlAttr(BackgroundPaint.class) int NightOwl_View_night_background = R.styleable.NightOwl_View_night_background; @OwlAttr(AlphaPaint.class) int NightOwl_View_night_alpha = R.styleable.NightOwl_View_night_alpha; } @OwlAttrScope(2100) public interface OwlTextView extends OwlView { @OwlStyleable int[] NightOwl_TextView = R.styleable.NightOwl_TextView; @OwlAttr(TextColorPaint.class) int NightOwl_TextView_night_textColor = R.styleable.NightOwl_TextView_night_textColor; @OwlAttr(TextColorPaint.class) int NightOwl_TextView_night_textColorHint = R.styleable.NightOwl_TextView_night_textColorHint; } @OwlAttrScope(2200) public interface OwlButton extends OwlTextView { } @OwlAttrScope(2300) public interface OwlImageView extends OwlView { @OwlStyleable int[] NightOwl_ImageView = R.styleable.NightOwl_ImageView; @OwlAttr(ImageViewSrcPaint.class) int NightOwl_ImageView_night_src = R.styleable.NightOwl_ImageView_night_src; } @OwlAttrScope(2400) public interface OwlListView extends OwlView { @OwlStyleable int[] NightOwl_ListView = R.styleable.NightOwl_ListView; @OwlAttr(ListViewDividerPaint.class) int NightOwl_ListView_night_divider = R.styleable.NightOwl_ListView_night_divider; @OwlAttr(ListViewSelectorPaint.class) int NightOwl_ListView_night_listSelector = R.styleable.NightOwl_ListView_night_listSelector; } }"}]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/app/src/test/java/com/asha/nightowl/ExampleUnitTest.java","main_file_content":"package com.asha.nightowl; import org.junit.Test; import static org.junit.Assert.*; public class ExampleUnitTest { @Test public void addition_isCorrect() throws Exception { assertEquals(4, 2 + 2); } }","dependencies":[]}}
{"project_id":236,"chunk_id":0,"content":{"main_file_path":"NightOwl-master/NightOwl-master/app/src/androidTest/java/com/asha/nightowl/ApplicationTest.java","main_file_content":"package com.asha.nightowl; import android.app.Application; import android.test.ApplicationTestCase; public class ApplicationTest extends ApplicationTestCase<Application> { public ApplicationTest() { super(Application.class); } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/RandomDemo.java","main_file_content":"import java.util.OptionalInt; import java.util.Random; import java.util.stream.IntStream; public class RandomDemo { public static void main(String[] args) { Random r = new Random(); int sum = IntStream.generate(() -> r.nextInt(10)) .limit(10) .map(n -> { System.out.println(\"n = \" + n); return n; }) .filter(n -> n % 2 == 0) .peek(System.out::println) .map(n -> n * 2) .sum(); System.out.println(sum); System.out.println(\"Filtering integers:\"); OptionalInt first = IntStream.generate(() -> r.nextInt(10)) .peek(System.out::println) .filter(n -> n > 7) .findFirst(); } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/Product.java","main_file_content":"public class Product { private String name; private double price; public Product() {} public Product(String name, double price) { this.name = name; this.price = price; } public String getName() { return name; } public void setName(String name) { this.name = name; } public double getPrice() { return price; } public void setPrice(double price) { this.price = price; } @Override public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof Product)) return false; Product product = (Product) o; if (Double.compare(product.price, price) != 0) return false; return name.equals(product.name); } @Override public int hashCode() { int result; long temp; result = name.hashCode(); temp = Double.doubleToLongBits(price); result = 31 * result + (int) (temp ^ (temp >>> 32)); return result; } @Override public String toString() { return \"Product{\" + \"name='\" + name + '\\'' + \", price=\" + price + '}'; } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/FinderDemo.java","main_file_content":"import java.util.Arrays; import java.util.HashSet; import java.util.List; import java.util.Optional; public class FinderDemo { public static void main(String[] args) { List<String> strings = Arrays.asList(\"this\", \"is\", \"a\", \"list\", \"of\", \"strings\"); HashSet<String> stringSet = new HashSet<>(strings); Optional<String> first = strings.stream() .filter(s -> { System.out.println(Thread.currentThread().getName() + \" with \" + s); return s.length() == 2; }) .findFirst(); System.out.println(first); } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/IterateDemo.java","main_file_content":"import java.time.LocalDate; import java.util.stream.Stream; public class IterateDemo { public static void main(String[] args) { Stream.iterate(100, n -> n + 2) .limit(20) .forEach(System.out::println); Stream.iterate(LocalDate.now(), date -> date.plusMonths(1)) .limit(12) .forEach(System.out::println); } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/UseProducts.java","main_file_content":"import java.util.Arrays; import java.util.List; import java.util.logging.Logger; import java.util.stream.Collectors; public class UseProducts { private static final Logger logger = Logger.getLogger(UseProducts.class.getName()); public static void main(String[] args) { List<Product> products = Arrays.asList(new Product(\"football\", 10), new Product(\"basketball\", 12), new Product(\"baseball\", 5)); List<String> names = products.stream() .map(Product::getName) .collect(Collectors.toList()); logger.info(\"Product not found; available products are: \" + names); logger.info(() -> \"Product not found; available products are: \" + names); } }","dependencies":[{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/Product.java","file_content":"public class Product { private String name; private double price; public Product() {} public Product(String name, double price) { this.name = name; this.price = price; } public String getName() { return name; } public void setName(String name) { this.name = name; } public double getPrice() { return price; } public void setPrice(double price) { this.price = price; } @Override public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof Product)) return false; Product product = (Product) o; if (Double.compare(product.price, price) != 0) return false; return name.equals(product.name); } @Override public int hashCode() { int result; long temp; result = name.hashCode(); temp = Double.doubleToLongBits(price); result = 31 * result + (int) (temp ^ (temp >>> 32)); return result; } @Override public String toString() { return \"Product{\" + \"name='\" + name + '\\'' + \", price=\" + price + '}'; } }"}]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/CollectorsDemo.java","main_file_content":"import java.util.List; import java.util.Map; import java.util.Set; import java.util.concurrent.ConcurrentSkipListSet; import java.util.function.Function; import java.util.stream.Collectors; import java.util.stream.Stream; public class CollectorsDemo { public static void main(String[] args) { List<Integer> nums = Stream.of(\"this\", \"is\", \"a\", \"collection\", \"of\", \"strings\") .parallel() .map(String::length) .peek(n -> { System.out.println(\"On \" + Thread.currentThread().getName() + \", the value of n before the filter is \" + n); }) .filter(n -> n % 2 == 0) .peek(n -> System.out.println(\"On \" + Thread.currentThread().getName() + \", the value of n after the filter is \" + n)) .collect(Collectors.toList()); System.out.println(nums); Set<String> set = Stream.of(\"this is a is a collection of strings\".split(\" \")) .collect(Collectors.toSet()); System.out.println(set); System.out.println(set.getClass().getName()); Set<String> collection = Stream.of(\"this is a is a collection of strings\".split(\" \")) .collect(Collectors.toCollection(ConcurrentSkipListSet::new)); Map<String, Integer> stringMap = Stream.of(\"this is a collection of strings\".split(\" \")) .collect(Collectors.toMap(Function.identity(), String::length)); System.out.println(stringMap); } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/SummarizingDemo.java","main_file_content":"import java.util.DoubleSummaryStatistics; import java.util.stream.DoubleStream; public class SummarizingDemo { public static void main(String[] args) { DoubleSummaryStatistics stats = DoubleStream.generate(Math::random) .limit(1_000_000) .summaryStatistics(); System.out.println(stats); System.out.println(stats.getCount()); System.out.println(stats.getMin()); System.out.println(stats.getAverage()); System.out.println(stats.getMax()); System.out.println(stats.getSum()); } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/OptionalDemo.java","main_file_content":"import java.util.Arrays; import java.util.List; import java.util.Optional; import java.util.stream.Stream; public class OptionalDemo { public static void main(String[] args) { Optional<Integer> first = Stream.of(3, 1, 4, 1, 5, 9) .filter(n -> n > 10) .findFirst(); System.out.println(first); int defaultValue = 0; System.out.println(first.orElse(defaultValue)); System.out.println(first.orElseGet(() -> defaultValue)); first.ifPresent(System.out::println); List<String> strings = Arrays.asList(\"this\", \"is\", \"a\", \"list\", \"of\", \"strings\"); Optional<String> s = strings.stream() .findFirst(); System.out.println(s.orElse(\"No string found; legal values are: \" + strings)); System.out.println(s.orElseGet(() -> \"No string found; legal values are: \" + strings)); System.out.println(s.orElseThrow(IllegalArgumentException::new)); System.out.println(s.orElseThrow(() -> new IllegalArgumentException(\"Not available\"))); s.ifPresent(System.out::println); } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/lambdas/UsePerson.java","main_file_content":"package lambdas; import java.util.ArrayList; import java.util.Arrays; import java.util.LinkedList; import java.util.List; import java.util.stream.Collectors; public class UsePerson { public static void main(String[] args) { List<String> names = Arrays.asList(\"John\", \"Paul\", \"George\", \"Ringo\"); List<Person> beatles = new ArrayList<>(); for (String name : names) { beatles.add(new Person(name)); } System.out.println(beatles); List<Person> people = names.stream() .map(name -> new Person(name)) .collect(Collectors.toList()); System.out.println(people); people = names.stream() .map(Person::new) .collect(Collectors.toList()); System.out.println(people); Person[] peopleArray = names.stream() .map(Person::new) .toArray(Person[]::new); System.out.println(Arrays.toString(peopleArray)); List<String> fullNames = Arrays.asList( \"John Lennon\", \"Paul McCartney\", \"George Harrison\", \"Ringo Starr\"); people = fullNames.stream() .map(name -> name.split(\" \")) .map(Person::new) .collect(Collectors.toList()); System.out.println(people); System.out.println(people.getClass().getName()); LinkedList<Person> linkedPersons = names.stream() .map(Person::new) .collect( () -> new LinkedList<Person>(), (list, person) -> list.add(person), (list1, list2) -> list1.addAll(list2)); System.out.println(linkedPersons); linkedPersons = names.stream() .map(Person::new) .collect( LinkedList::new, LinkedList::add, LinkedList::addAll); System.out.println(linkedPersons); linkedPersons = names.stream() .map(Person::new) .collect(Collectors.toCollection(LinkedList::new)); System.out.println(linkedPersons); } }","dependencies":[{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/lambdas/Person.java","file_content":"package lambdas; import java.util.Objects; public class Person { private String name; public Person() {} public Person(String name) { this.name = name; } public Person(Person other) { this.name = other.name; } public Person(String... names) { this.name = String.join(\" \", names); } public String getName() { return name; } public void setName(String name) { this.name = name; } @Override public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof Person)) return false; Person person = (Person) o; return Objects.equals(name, person.name); } @Override public int hashCode() { return name != null ? name.hashCode() : 0; } @Override public String toString() { return String.format(\"Person(%s)\", name); } }"}]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/lambdas/Runner.java","main_file_content":"package lambdas; import java.util.concurrent.Callable; public class Runner { public void invoke(Runnable r) { r.run(); } public <T> T invoke(Callable<T> c) throws Exception { return c.call(); } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/lambdas/MapDemo.java","main_file_content":"package lambdas; import java.util.Comparator; import java.util.HashMap; import java.util.Map; public class MapDemo { public static void main(String[] args) { Map<String, Integer> map = new HashMap<>(); map.put(\"c\", 2); map.put(\"a\", 1); map.put(\"d\", 3); map.put(\"b\", 2); map.computeIfAbsent(\"e\", String::length); map.computeIfAbsent(\"b\", String::length); map.computeIfPresent(\"b\", (k, v) -> { System.out.printf(\"k = %s,v = %d%n\", k, v); return v * 2; }); map.forEach((k,v) -> System.out.println(k + \" maps to \" + v)); map.entrySet().stream() .sorted(Map.Entry.comparingByKey(Comparator.reverseOrder())) .forEach(System.out::println); map.entrySet().stream() .sorted(Map.Entry.comparingByValue()) .forEach(System.out::println); } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/lambdas/Person.java","main_file_content":"package lambdas; import java.util.Objects; public class Person { private String name; public Person() {} public Person(String name) { this.name = name; } public Person(Person other) { this.name = other.name; } public Person(String... names) { this.name = String.join(\" \", names); } public String getName() { return name; } public void setName(String name) { this.name = name; } @Override public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof Person)) return false; Person person = (Person) o; return Objects.equals(name, person.name); } @Override public int hashCode() { return name != null ? name.hashCode() : 0; } @Override public String toString() { return String.format(\"Person(%s)\", name); } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/lambdas/RunnableDemo.java","main_file_content":"package lambdas; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; public class RunnableDemo { public static void main(String[] args) { ExecutorService executorService = Executors.newFixedThreadPool(4); executorService.submit(new Runnable() { @Override public void run() { System.out.println(\"Inside an anonymous inner class\"); } }); executorService.submit(() -> System.out.println(\"Inside expression lambda\")); executorService.submit(() -> { System.out.println(Thread.currentThread().getName()); System.out.println(\"Inside block lambda\"); }); Runnable runnable = () -> System.out.println(\"Assigned to a variable\"); executorService.submit(runnable); executorService.shutdown(); } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/datetime/AntarcticaTimeZones.java","main_file_content":"package datetime; import java.time.LocalDateTime; import java.time.ZoneId; import java.time.ZonedDateTime; import java.util.List; import java.util.stream.Collectors; import static java.util.Comparator.comparingInt; public class AntarcticaTimeZones { public static void main(String[] args) { LocalDateTime now = LocalDateTime.now(); List<ZonedDateTime> antarcticZones = ZoneId.getAvailableZoneIds().stream() .filter(regionId -> regionId.contains(\"Antarctica\")) .map(ZoneId::of) .map(now::atZone) .sorted(comparingInt( zoneId -> zoneId.getOffset().getTotalSeconds())) .collect(Collectors.toList()); antarcticZones.forEach(zdt -> System.out.printf(\"UTC%6s: %25s %7s%n\", zdt.getOffset(), zdt.getZone(), zdt.getZone().getRules().isDaylightSavings(zdt.toInstant()))); } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/streams/FlatMapDemo.java","main_file_content":"package streams; import java.util.Arrays; import java.util.List; import java.util.stream.Stream; public class FlatMapDemo { public static void main(String[] args) { Customer sheridan = new Customer(\"Sheridan\"); Customer ivanova = new Customer(\"Ivanova\"); Customer garibaldi = new Customer(\"Garibaldi\"); sheridan.addOrder(new Order(1)) .addOrder(new Order(2)) .addOrder(new Order(3)); ivanova.addOrder(new Order(4)) .addOrder(new Order(5)); List<Customer> customers = Arrays.asList(sheridan, ivanova, garibaldi); customers.stream() .map(Customer::getName) .forEach(System.out::println); customers.stream() .map(Customer::getOrders) .forEach(System.out::println); customers.stream() .map(customer -> customer.getOrders().stream()) .forEach(System.out::println); customers.stream() .flatMap(customer -> customer.getOrders().stream()) .forEach(System.out::println); customers.stream() .flatMap(customer -> customer.getOrders().size() == 0 ? Stream.empty() : customer.getOrders().stream()) .forEach(System.out::println); } }","dependencies":[{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/streams/Customer.java","file_content":"package streams; import java.util.ArrayList; import java.util.List; public class Customer { private final String name; private final List<Order> orders = new ArrayList<>(); public Customer(String name) { this.name = name; } public String getName() { return name; } public Customer addOrder(Order order) { orders.add(order); return this; } public List<Order> getOrders() { return orders; } @Override public String toString() { return name; } }"},{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/streams/Order.java","file_content":"package streams; public class Order { private int id; public Order(int id) { this.id = id; } public void setId(int id) { this.id = id; } public int getId() { return id; } @Override public String toString() { return \"Order{\" + \"id=\" + id + '}'; } }"}]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/streams/Order.java","main_file_content":"package streams; public class Order { private int id; public Order(int id) { this.id = id; } public void setId(int id) { this.id = id; } public int getId() { return id; } @Override public String toString() { return \"Order{\" + \"id=\" + id + '}'; } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/streams/Customer.java","main_file_content":"package streams; import java.util.ArrayList; import java.util.List; public class Customer { private final String name; private final List<Order> orders = new ArrayList<>(); public Customer(String name) { this.name = name; } public String getName() { return name; } public Customer addOrder(Order order) { orders.add(order); return this; } public List<Order> getOrders() { return orders; } @Override public String toString() { return name; } }","dependencies":[{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/streams/Order.java","file_content":"package streams; public class Order { private int id; public Order(int id) { this.id = id; } public void setId(int id) { this.id = id; } public int getId() { return id; } @Override public String toString() { return \"Order{\" + \"id=\" + id + '}'; } }"}]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/streams/BoxedStreams.java","main_file_content":"package streams; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.List; import java.util.stream.Collectors; import java.util.stream.IntStream; public class BoxedStreams { public static void main(String[] args) { @SuppressWarnings(\"SimplifyStreamApiCallChains\") List<Integer> list = IntStream.rangeClosed(1, 10) .mapToObj(Integer::valueOf) .collect(Collectors.toList()); System.out.println(list); List<Integer> ints = IntStream.of(3, 1, 4, 1, 5, 9) .collect(ArrayList::new, ArrayList::add, ArrayList::addAll); System.out.println(ints); List<Integer> listOfInt = IntStream.of(3, 1, 4, 1, 5, 9) .boxed() .collect(Collectors.toList()); System.out.println(listOfInt); int[] intArray = IntStream.of(3, 1, 4, 1, 5, 9).toArray(); System.out.println(Arrays.toString(intArray)); } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/streams/SumBigDecimals.java","main_file_content":"package streams; import java.math.BigDecimal; import java.util.stream.Stream; public class SumBigDecimals { public BigDecimal sumFirstN_asDoubles(int n) { double total = Stream.iterate(BigDecimal.ONE, bd -> bd.add(BigDecimal.ONE)) .limit(n) .mapToDouble(BigDecimal::doubleValue) .sum(); return BigDecimal.valueOf(total); } public BigDecimal sumFirstN_usingReduce(int n) { return Stream.iterate(BigDecimal.ONE, bd -> bd.add(BigDecimal.ONE)) .limit(n) .reduce(BigDecimal::add).orElse(BigDecimal.ZERO); } public BigDecimal sumDoubles(int n) { BigDecimal two = BigDecimal.valueOf(2); return Stream.iterate(BigDecimal.ONE, bd -> bd.add(BigDecimal.ONE)) .limit(n) .reduce((total, e) -> { System.out.println(\"total = \" + total + \", e = \" + e); return total.add(e.multiply(two)); }).orElse(BigDecimal.ZERO); } public BigDecimal sumDoublesInitialized(int n) { BigDecimal two = new BigDecimal(\"2\"); return Stream.iterate(BigDecimal.ONE, bd -> bd.add(BigDecimal.ONE)) .limit(n) .reduce(BigDecimal.ZERO, (total, e) -> { System.out.println(\"total = \" + total + \", e = \" + e); return total.add(e.multiply(two)); }); } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/streams/Ordering.java","main_file_content":"package streams; import java.util.ArrayList; import java.util.Arrays; import java.util.List; import java.util.stream.Collectors; public class Ordering { public static void main(String[] args) { List<Integer> ints = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10); List<Integer> doubles = ints.stream() .map(n -> n * 2) .parallel() .collect(Collectors.toList()); System.out.println(doubles); List<Integer> doublesList = new ArrayList<>(); ints.stream() .map(n -> n * 2) .parallel() .forEach(doublesList::add); System.out.println(doublesList); } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/io/ProcessDictionary.java","main_file_content":"package io; import java.io.BufferedReader; import java.io.FileReader; import java.io.IOException; import java.io.UncheckedIOException; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.util.Comparator; import java.util.Map; import java.util.stream.Collectors; import java.util.stream.Stream; import static java.util.stream.Collectors.counting; import static java.util.stream.Collectors.groupingBy; @SuppressWarnings(\"DuplicatedCode\") public class ProcessDictionary { private final Path dictionary = Paths.get(\"/usr/share/dict/words\"); public long getMaxLength() { try (Stream<String> words = Files.lines(dictionary)) { return words.mapToInt(String::length).max().orElse(0); } catch (IOException e) { throw new UncheckedIOException(e); } } public void printTenLongestWords() { System.out.println(\"\\nTen Longest Words:\"); long max = getMaxLength() - 5; try (Stream<String> words = Files.lines(dictionary)) { words.filter(s -> s.length() > max) .sorted(Comparator.comparingInt(String::length).reversed() ) .limit(10) .forEach(w -> System.out.printf(\"%s (%d)%n\", w, w.length())); } catch (IOException e) { throw new UncheckedIOException(e); } } public void printWordsOfEachLength() { System.out.println(\"\\nList of words of each length:\"); try (Stream<String> lines = Files.lines(dictionary)) { lines.filter(s -> s.length() > 20) .collect(Collectors.groupingBy(String::length)) .forEach((len, wordList) -> System.out.println(len + \": \" + wordList)); } catch (IOException e) { throw new UncheckedIOException(e); } } public void printHowManyWordsOfEachLength() { System.out.println(\"\\nNumber of words of each length:\"); try (Stream<String> lines = Files.lines(dictionary)) { lines.filter(s -> s.length() > 20) .collect(Collectors.groupingBy(String::length, Collectors.counting())) .forEach((len, num) -> System.out.printf(\"%d: %d%n\", len, num)); } catch (IOException e) { throw new UncheckedIOException(e); } } public void printSortedMapOfWords() { System.out.println(\"\\nNumber of words of each length (desc order):\"); try (Stream<String> lines = Files.lines(dictionary)) { Map<Integer, Long> map = lines.filter(s -> s.length() > 20) .collect(groupingBy(String::length, counting())); map.entrySet().stream() .sorted(Map.Entry.comparingByKey(Comparator.reverseOrder())) .forEach(e -> System.out.printf(\"Length %d: %d words%n\", e.getKey(), e.getValue())); } catch (IOException e) { throw new UncheckedIOException(e); } } public void printSortedMapOfWordsUsingBufferedReader() { System.out.println(\"\\nNumber of words of each length (desc order):\"); try (Stream<String> lines = new BufferedReader(new FileReader(\"/usr/share/dict/words\")).lines()) { Map<Integer, Long> map = lines.filter(s -> s.length() > 20) .collect(groupingBy(String::length, counting())); map.entrySet().stream() .sorted(Map.Entry.comparingByKey(Comparator.reverseOrder())) .forEach(e -> System.out.printf(\"Length %d: %d words%n\", e.getKey(), e.getValue())); } catch (IOException e) { throw new UncheckedIOException(e); } } public static void main(String[] args) { ProcessDictionary processDictionary = new ProcessDictionary(); processDictionary.printTenLongestWords(); processDictionary.printWordsOfEachLength(); processDictionary.printHowManyWordsOfEachLength(); processDictionary.printSortedMapOfWords(); processDictionary.printSortedMapOfWordsUsingBufferedReader(); } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/dao/Employee.java","main_file_content":"package dao; import java.util.Optional; public class Employee { private int id; private String first; private String middleInitial; private String last; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getFirst() { return first; } public void setFirst(String first) { this.first = first; } public Optional<String> getMiddleInitial() { return Optional.ofNullable(middleInitial); } public void setMiddleInitial(String middleInitial) { this.middleInitial = middleInitial; } public String getLast() { return last; } public void setLast(String last) { this.last = last; } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/got/MemberDAO.java","main_file_content":"package got; import java.util.*; public interface MemberDAO { Optional<Member> findById(Long id); Optional<Member> findByName(String name); List<Member> findAllByHouse(House house); Collection<Member> getAll(); List<Member> startWithSandSortAlphabetically(); List<Member> lannisters_alphabeticallyByName(); List<Member> salaryLessThanAndSortByHouse(double max); List<Member> sortByHouseNameThenSortByNameDesc(); List<Member> houseByDob(House house); List<Member> kingsByNameDesc(); double averageSalary(); List<String> namesSorted(House house); boolean salariesGreaterThan(double max); boolean anyMembers(House house); long howMany(House house); String houseMemberNames(House house); Optional<Member> highestSalary(); Map<Boolean, List<Member>> royaltyPartition(); Map<House, List<Member>> membersByHouse(); Map<House, Long> numberOfMembersByHouse(); Map<House, DoubleSummaryStatistics> houseStats(); }","dependencies":[{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/got/House.java","file_content":"package got; public enum House { ARRYN, BARATHEON, BOLTON, FREY, GREYJOY, LANNISTER, MARTELL, MORMONT, SNOW, TARLY, STARK, TARGARYEN, TULLY, TYRELL }"},{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/got/Member.java","file_content":"package got; import java.time.LocalDate; public record Member( Long id, Title title, String name, LocalDate dob, double salary, House house ) implements Comparable<Member> { @Override public int compareTo(Member member) { return id.compareTo(member.id); } }"}]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/got/Title.java","main_file_content":"package got; public enum Title { SIR, LORD, LADY, KING, QUEEN }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/got/Member.java","main_file_content":"package got; import java.time.LocalDate; public record Member( Long id, Title title, String name, LocalDate dob, double salary, House house ) implements Comparable<Member> { @Override public int compareTo(Member member) { return id.compareTo(member.id); } }","dependencies":[{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/got/House.java","file_content":"package got; public enum House { ARRYN, BARATHEON, BOLTON, FREY, GREYJOY, LANNISTER, MARTELL, MORMONT, SNOW, TARLY, STARK, TARGARYEN, TULLY, TYRELL }"},{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/got/Title.java","file_content":"package got; public enum Title { SIR, LORD, LADY, KING, QUEEN }"}]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/got/House.java","main_file_content":"package got; public enum House { ARRYN, BARATHEON, BOLTON, FREY, GREYJOY, LANNISTER, MARTELL, MORMONT, SNOW, TARLY, STARK, TARGARYEN, TULLY, TYRELL }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/got/InMemoryMemberDAO.java","main_file_content":"package got; import java.util.*; public class InMemoryMemberDAO implements MemberDAO { private final Collection<Member> allMembers = MemberDB.getInstance().getAllMembers(); @Override public Optional<Member> findById(Long id) { return Optional.empty(); } @Override public Optional<Member> findByName(String name) { return Optional.empty(); } @Override public List<Member> findAllByHouse(House house) { return Collections.emptyList(); } @Override public Collection<Member> getAll() { return Collections.emptyList(); } @Override public List<Member> startWithSandSortAlphabetically() { return Collections.emptyList(); } @Override public List<Member> lannisters_alphabeticallyByName() { return Collections.emptyList(); } @Override public List<Member> salaryLessThanAndSortByHouse(double max) { return Collections.emptyList(); } @Override public List<Member> sortByHouseNameThenSortByNameDesc() { return Collections.emptyList(); } @Override public List<Member> houseByDob(House house) { return Collections.emptyList(); } @Override public List<Member> kingsByNameDesc() { return Collections.emptyList(); } @Override public double averageSalary() { return 0.0; } @Override public List<String> namesSorted(House house) { return Collections.emptyList(); } @Override public boolean salariesGreaterThan(double max) { return false; } @Override public boolean anyMembers(House house) { return false; } @Override public long howMany(House house) { return 0; } @Override public String houseMemberNames(House house) { return \"\"; } @Override public Optional<Member> highestSalary() { return Optional.empty(); } @Override public Map<Boolean, List<Member>> royaltyPartition() { return Collections.emptyMap(); } @Override public Map<House, List<Member>> membersByHouse() { return Collections.emptyMap(); } @Override public Map<House, Long> numberOfMembersByHouse() { return Collections.emptyMap(); } @Override public Map<House, DoubleSummaryStatistics> houseStats() { return Collections.emptyMap(); } }","dependencies":[{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/got/House.java","file_content":"package got; public enum House { ARRYN, BARATHEON, BOLTON, FREY, GREYJOY, LANNISTER, MARTELL, MORMONT, SNOW, TARLY, STARK, TARGARYEN, TULLY, TYRELL }"},{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/got/Member.java","file_content":"package got; import java.time.LocalDate; public record Member( Long id, Title title, String name, LocalDate dob, double salary, House house ) implements Comparable<Member> { @Override public int compareTo(Member member) { return id.compareTo(member.id); } }"},{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/got/MemberDAO.java","file_content":"package got; import java.util.*; public interface MemberDAO { Optional<Member> findById(Long id); Optional<Member> findByName(String name); List<Member> findAllByHouse(House house); Collection<Member> getAll(); List<Member> startWithSandSortAlphabetically(); List<Member> lannisters_alphabeticallyByName(); List<Member> salaryLessThanAndSortByHouse(double max); List<Member> sortByHouseNameThenSortByNameDesc(); List<Member> houseByDob(House house); List<Member> kingsByNameDesc(); double averageSalary(); List<String> namesSorted(House house); boolean salariesGreaterThan(double max); boolean anyMembers(House house); long howMany(House house); String houseMemberNames(House house); Optional<Member> highestSalary(); Map<Boolean, List<Member>> royaltyPartition(); Map<House, List<Member>> membersByHouse(); Map<House, Long> numberOfMembersByHouse(); Map<House, DoubleSummaryStatistics> houseStats(); }"},{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/got/MemberDB.java","file_content":"package got; import java.time.LocalDate; import java.time.Month; import java.util.List; public class MemberDB { private static final MemberDB DB = new MemberDB(); private final List<Member> allMembers = List.of( new Member(1L, Title.LORD, \"Eddard\", LocalDate.of(1959, Month.APRIL, 17), 100000.0, House.STARK), new Member(2L, Title.LADY, \"Catelyn\", LocalDate.of(1964, Month.JANUARY, 17), 80000.0, House.STARK), new Member(3L, Title.LADY, \"Arya\", LocalDate.of(1997, Month.APRIL, 15), 50000.0, House.STARK), new Member(4L, Title.LADY, \"Sansa\", LocalDate.of(1996, Month.FEBRUARY, 21), 60000.0, House.STARK), new Member(5L, Title.SIR, \"Bran\", LocalDate.of(1999, Month.APRIL, 9), 10000.0, House.STARK), new Member(6L, Title.KING, \"Robb\", LocalDate.of(1986, Month.JUNE, 18), 100000.0, House.STARK), new Member(7L, Title.KING, \"Jon\", LocalDate.of(1986, Month.DECEMBER, 26), 90000.0, House.SNOW), new Member(8L, Title.SIR, \"Jaime\", LocalDate.of(1970, Month.JULY, 27), 120000.0, House.LANNISTER), new Member(9L, Title.LORD, \"Tyrion\", LocalDate.of(1969, Month.JUNE, 11), 70000.0, House.LANNISTER), new Member(10L, Title.LORD, \"Tywin\", LocalDate.of(1946, Month.OCTOBER, 10), 200000.0, House.LANNISTER), new Member(11L, Title.LADY, \"Cersei\", LocalDate.of(1973, Month.OCTOBER, 3), 120000.0, House.LANNISTER), new Member(12L, Title.QUEEN, \"Daenerys\", LocalDate.of(1987, Month.MAY, 1), 130000.0, House.TARGARYEN), new Member(13L, Title.LORD, \"Viserys\", LocalDate.of(1983, Month.NOVEMBER, 17), 100000.0, House.TARGARYEN), new Member(14L, Title.KING, \"Robert\", LocalDate.of(1964, Month.JANUARY, 14), 180000.0, House.BARATHEON), new Member(15L, Title.KING, \"Joffrey\", LocalDate.of(1992, Month.MAY, 20), 100000.0, House.BARATHEON), new Member(16L, Title.KING, \"Tommen\", LocalDate.of(1997, Month.SEPTEMBER, 7), 60000.0, House.BARATHEON), new Member(17L, Title.KING, \"Stannis\", LocalDate.of(1957, Month.MARCH, 27), 123456.0, House.BARATHEON), new Member(18L, Title.QUEEN, \"Margaery\", LocalDate.of(1982, Month.FEBRUARY, 11), 80000.0, House.TYRELL), new Member(19L, Title.SIR, \"Loras\", LocalDate.of(1988, Month.MARCH, 24), 70000.0, House.TYRELL), new Member(20L, Title.LADY, \"Olenna\", LocalDate.of(1938, Month.JULY, 20), 130000.0, House.TYRELL), new Member(21L, Title.LORD, \"Roose\", LocalDate.of(1963, Month.SEPTEMBER, 12), 100000.0, House.BOLTON), new Member(22L, Title.LORD, \"Ramsay\", LocalDate.of(1985, Month.MAY, 13), 140000.0, House.BOLTON) ); private MemberDB() {} public static MemberDB getInstance() { return DB; } public List<Member> getAllMembers() { return allMembers; } }"}]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/got/MemberDB.java","main_file_content":"package got; import java.time.LocalDate; import java.time.Month; import java.util.List; public class MemberDB { private static final MemberDB DB = new MemberDB(); private final List<Member> allMembers = List.of( new Member(1L, Title.LORD, \"Eddard\", LocalDate.of(1959, Month.APRIL, 17), 100000.0, House.STARK), new Member(2L, Title.LADY, \"Catelyn\", LocalDate.of(1964, Month.JANUARY, 17), 80000.0, House.STARK), new Member(3L, Title.LADY, \"Arya\", LocalDate.of(1997, Month.APRIL, 15), 50000.0, House.STARK), new Member(4L, Title.LADY, \"Sansa\", LocalDate.of(1996, Month.FEBRUARY, 21), 60000.0, House.STARK), new Member(5L, Title.SIR, \"Bran\", LocalDate.of(1999, Month.APRIL, 9), 10000.0, House.STARK), new Member(6L, Title.KING, \"Robb\", LocalDate.of(1986, Month.JUNE, 18), 100000.0, House.STARK), new Member(7L, Title.KING, \"Jon\", LocalDate.of(1986, Month.DECEMBER, 26), 90000.0, House.SNOW), new Member(8L, Title.SIR, \"Jaime\", LocalDate.of(1970, Month.JULY, 27), 120000.0, House.LANNISTER), new Member(9L, Title.LORD, \"Tyrion\", LocalDate.of(1969, Month.JUNE, 11), 70000.0, House.LANNISTER), new Member(10L, Title.LORD, \"Tywin\", LocalDate.of(1946, Month.OCTOBER, 10), 200000.0, House.LANNISTER), new Member(11L, Title.LADY, \"Cersei\", LocalDate.of(1973, Month.OCTOBER, 3), 120000.0, House.LANNISTER), new Member(12L, Title.QUEEN, \"Daenerys\", LocalDate.of(1987, Month.MAY, 1), 130000.0, House.TARGARYEN), new Member(13L, Title.LORD, \"Viserys\", LocalDate.of(1983, Month.NOVEMBER, 17), 100000.0, House.TARGARYEN), new Member(14L, Title.KING, \"Robert\", LocalDate.of(1964, Month.JANUARY, 14), 180000.0, House.BARATHEON), new Member(15L, Title.KING, \"Joffrey\", LocalDate.of(1992, Month.MAY, 20), 100000.0, House.BARATHEON), new Member(16L, Title.KING, \"Tommen\", LocalDate.of(1997, Month.SEPTEMBER, 7), 60000.0, House.BARATHEON), new Member(17L, Title.KING, \"Stannis\", LocalDate.of(1957, Month.MARCH, 27), 123456.0, House.BARATHEON), new Member(18L, Title.QUEEN, \"Margaery\", LocalDate.of(1982, Month.FEBRUARY, 11), 80000.0, House.TYRELL), new Member(19L, Title.SIR, \"Loras\", LocalDate.of(1988, Month.MARCH, 24), 70000.0, House.TYRELL), new Member(20L, Title.LADY, \"Olenna\", LocalDate.of(1938, Month.JULY, 20), 130000.0, House.TYRELL), new Member(21L, Title.LORD, \"Roose\", LocalDate.of(1963, Month.SEPTEMBER, 12), 100000.0, House.BOLTON), new Member(22L, Title.LORD, \"Ramsay\", LocalDate.of(1985, Month.MAY, 13), 140000.0, House.BOLTON) ); private MemberDB() {} public static MemberDB getInstance() { return DB; } public List<Member> getAllMembers() { return allMembers; } }","dependencies":[{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/got/Member.java","file_content":"package got; import java.time.LocalDate; public record Member( Long id, Title title, String name, LocalDate dob, double salary, House house ) implements Comparable<Member> { @Override public int compareTo(Member member) { return id.compareTo(member.id); } }"}]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/optional/Product.java","main_file_content":"package optional; import java.util.Objects; public class Product { private Integer id; private String name; private double price; public Product(Integer id, String name, double price) { System.out.println(\"Inside Product constructor with id=\" + id); this.id = id; this.name = name; this.price = price; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public double getPrice() { return price; } public void setPrice(double price) { this.price = price; } @Override public String toString() { return \"Product{\" + \"id=\" + id + \", name='\" + name + '\\'' + \", price=\" + price + '}'; } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Product product = (Product) o; return Double.compare(product.price, price) == 0 && Objects.equals(id, product.id) && Objects.equals(name, product.name); } @Override public int hashCode() { return Objects.hash(id, name, price); } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/optional/Manager.java","main_file_content":"package optional; public class Manager { private final String name; public Manager(String name) { this.name = name; } public String getName() { return name; } @Override public String toString() { return \"Manager{\" + \"name='\" + name + '\\'' + '}'; } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/optional/Department.java","main_file_content":"package optional; import java.util.Optional; public class Department { private final String name; private Manager manager; public Department(String name) { this.name = name; } public String getName() { return name; } public Manager getManager() { return manager; } public void setManager(Manager manager) { this.manager = manager; } public Optional<Manager> getOptionalManager() { return Optional.ofNullable(manager); } }","dependencies":[{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/optional/Manager.java","file_content":"package optional; public class Manager { private final String name; public Manager(String name) { this.name = name; } public String getName() { return name; } @Override public String toString() { return \"Manager{\" + \"name='\" + name + '\\'' + '}'; } }"}]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/optional/Company.java","main_file_content":"package optional; import java.util.Arrays; import java.util.HashMap; import java.util.Map; import java.util.Optional; public class Company { private final String name; private final Map<String, Department> departmentMap = new HashMap<>(); public Company(String name) { this.name = name; Department it = new Department(\"IT\"); Department sales = new Department(\"Sales\"); Department finance = new Department(\"Finance\"); Department accounting = new Department(\"Accounting\"); Manager mrSlate = new Manager(\"Mr Slate\"); Manager mrBurns = new Manager(\"Mr Burns\"); Manager janeway = new Manager(\"Admiral Janeway\"); sales.setManager(mrBurns); finance.setManager(mrSlate); accounting.setManager(janeway); Arrays.asList(it, sales, finance, accounting).forEach( dept -> departmentMap.put(dept.getName(), dept) ); } public Optional<Department> getDepartment(String name) { return Optional.ofNullable(departmentMap.get(name)); } public String getName() { return name; } }","dependencies":[{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/optional/Department.java","file_content":"package optional; import java.util.Optional; public class Department { private final String name; private Manager manager; public Department(String name) { this.name = name; } public String getName() { return name; } public Manager getManager() { return manager; } public void setManager(Manager manager) { this.manager = manager; } public Optional<Manager> getOptionalManager() { return Optional.ofNullable(manager); } }"},{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/optional/Manager.java","file_content":"package optional; public class Manager { private final String name; public Manager(String name) { this.name = name; } public String getName() { return name; } @Override public String toString() { return \"Manager{\" + \"name='\" + name + '\\'' + '}'; } }"}]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/optional/ProductDAO.java","main_file_content":"package optional; import java.util.HashMap; import java.util.Map; import java.util.Optional; public class ProductDAO { private static final Map<Integer, Product> products = new HashMap<>(); static { products.put(1, new Product(1, \"Football\", 12.99)); products.put(2, new Product(2, \"Basketball\", 15.99)); products.put(3, new Product(3, \"Baseball\", 5.99)); } public Optional<Product> findById(Integer id) { return Optional.ofNullable(products.get(id)); } public Product getProductById(Integer id) { Optional<Product> optional = findById(id); return optional.orElseGet(() -> new Product(999, \"No name\", 0.00)); } }","dependencies":[{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/optional/Product.java","file_content":"package optional; import java.util.Objects; public class Product { private Integer id; private String name; private double price; public Product(Integer id, String name, double price) { System.out.println(\"Inside Product constructor with id=\" + id); this.id = id; this.name = name; this.price = price; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public double getPrice() { return price; } public void setPrice(double price) { this.price = price; } @Override public String toString() { return \"Product{\" + \"id=\" + id + \", name='\" + name + '\\'' + \", price=\" + price + '}'; } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Product product = (Product) o; return Double.compare(product.price, price) == 0 && Objects.equals(id, product.id) && Objects.equals(name, product.name); } @Override public int hashCode() { return Objects.hash(id, name, price); } }"}]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/concurrency/Product.java","main_file_content":"package concurrency; public class Product { private final int id; private final String name; public Product(int id, String name) { this.id = id; this.name = name; } public int getId() { return id; } public String getName() { return name; } @Override public String toString() { return \"Product{\" + \"id=\" + id + \", name='\" + name + '\\'' + '}'; } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/concurrency/CompletableFutureDemos.java","main_file_content":"package concurrency; import java.util.Map; import java.util.concurrent.CompletableFuture; import java.util.concurrent.ConcurrentHashMap; import java.util.logging.Logger; public class CompletableFutureDemos { private final Logger logger = Logger.getLogger(this.getClass().getName()); private final Map<Integer, Product> cache = new ConcurrentHashMap<>(); private Product getLocal(int id) { return cache.get(id); } private Product getRemote(int id) { try { Thread.sleep(100); if (id == 666) { throw new RuntimeException(\"Evil request\"); } } catch (InterruptedException ignored) { } return new Product(id, \"name\"); } public CompletableFuture<Product> getProduct(int id) { try { Product product = getLocal(id); if (product != null) { logger.info(\"getLocal with id=\" + id); return CompletableFuture.completedFuture(product); } else { logger.info(\"getRemote with id=\" + id); CompletableFuture<Product> future = new CompletableFuture<>(); Product p = getRemote(id); cache.put(id, p); future.complete(p); return future; } } catch (Exception e) { logger.info(\"exception thrown\"); CompletableFuture<Product> future = new CompletableFuture<>(); future.completeExceptionally(e); return future; } } public CompletableFuture<Product> getProductAsync(int id) { try { Product product = getLocal(id); if (product != null) { logger.info(\"getLocal with id=\" + id); return CompletableFuture.completedFuture(product); } else { logger.info(\"getRemote with id=\" + id); return CompletableFuture.supplyAsync(() -> { Product p = getRemote(id); cache.put(id, p); return p; }); } } catch (Exception e) { logger.info(\"exception thrown\"); CompletableFuture<Product> future = new CompletableFuture<>(); future.completeExceptionally(e); return future; } } }","dependencies":[{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/concurrency/Product.java","file_content":"package concurrency; public class Product { private final int id; private final String name; public Product(int id, String name) { this.id = id; this.name = name; } public int getId() { return id; } public String getName() { return name; } @Override public String toString() { return \"Product{\" + \"id=\" + id + \", name='\" + name + '\\'' + '}'; } }"}]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/concurrency/AwaitQuiesence.java","main_file_content":"package concurrency; import java.util.concurrent.CompletableFuture; public class AwaitQuiesence { private String sleepThenReturnString() { try { Thread.sleep(100); } catch (InterruptedException ignored) { } return \"42\"; } public CompletableFuture<Void> supplyThenAccept() { return CompletableFuture.supplyAsync(this::sleepThenReturnString) .thenApply(Integer::parseInt) .thenApply(x -> 2 * x) .thenAccept(System.out::println); } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/lazy/LazyStreams.java","main_file_content":"package lazy; import java.util.logging.Logger; import java.util.stream.IntStream; public class LazyStreams { private static final Logger logger = Logger.getLogger(LazyStreams.class.getName()); public static int multByTwo(int n) { System.out.printf(\"Inside multByTwo with arg %d on thread %s%n\", n, Thread.currentThread().getName()); return n * 2; } public static boolean modByThree(int n) { System.out.printf(\"Inside modByThree with arg %d on thread %s%n\", n, Thread.currentThread().getName()); return n % 3 == 0; } public static void main(String[] args) { int firstEvenDoubleDivBy3 = IntStream.rangeClosed(100, 200) .map(n -> n * 2) .filter(n -> n % 3 == 0) .findFirst().orElse(0); System.out.println(firstEvenDoubleDivBy3); firstEvenDoubleDivBy3 = IntStream.rangeClosed(100, 2_000_000) .filter(LazyStreams::modByThree) .map(LazyStreams::multByTwo) .findFirst().orElse(0); System.out.printf(\"First even divisible by 3 is %d%n\", firstEvenDoubleDivBy3); } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/lazy/OptionalExceptionDemo.java","main_file_content":"package lazy; public class OptionalExceptionDemo { public static void main(String[] args) { } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/sorting/SortGolfers.java","main_file_content":"package sorting; import java.util.*; import java.util.stream.Collectors; public class SortGolfers { private final List<Golfer> golfers = Arrays.asList( new Golfer(\"Jack\", \"Nicklaus\", 68), new Golfer(\"Tiger\", \"Woods\", 70), new Golfer(\"Tom\", \"Watson\", 70), new Golfer(\"Ty\", \"Webb\", 68), new Golfer(\"Bubba\", \"Watson\", 70), new Golfer(\"Rose\", \"Zhang\", 71) ); public void oldSchoolSort() { Collections.sort(golfers); golfers.forEach(System.out::println); } public void defaultSort() { golfers.stream() .sorted() .forEach(System.out::println); } public void sortByScoreThenLast() { golfers.stream() .sorted(Comparator.comparingInt(Golfer::getScore) .thenComparing(Golfer::getLast)) .forEach(System.out::println); } public void sortByScoreThenLastThenFirst() { golfers.stream() .sorted(Comparator.comparingInt(Golfer::getScore) .thenComparing(Golfer::getLast) .thenComparing(Golfer::getFirst)) .forEach(System.out::println); } public void partitionByScore() { Map<Boolean, List<Golfer>> map = golfers.stream() .collect(Collectors.partitioningBy( golfer -> golfer.getScore() < 70)); map.forEach((k,v) -> { System.out.println(k); v.forEach(System.out::println); }); } public static void main(String[] args) { SortGolfers sg = new SortGolfers(); System.out.println(\"--- oldSchoolSort ---\"); sg.oldSchoolSort(); System.out.println(\"--- defaultSort ---\"); sg.defaultSort(); System.out.println(\"--- sortByScoreThenLast ---\"); sg.sortByScoreThenLast(); System.out.println(\"--- sortByScoreThenLastThenFirst ---\"); sg.sortByScoreThenLastThenFirst(); System.out.println(\"--- partitionByScore ---\"); sg.partitionByScore(); } }","dependencies":[{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/sorting/Golfer.java","file_content":"package sorting; public class Golfer implements Comparable<Golfer> { private String first; private String last; private int score; public Golfer() {} public Golfer(String first, String last) { this.first = first; this.last = last; } public Golfer(String first, String last, int score) { this.first = first; this.last = last; this.score = score; } @Override public int compareTo(Golfer golfer) { return score - golfer.score; } public String getFirst() { return first; } public void setFirst(String first) { this.first = first; } public String getLast() { return last; } public void setLast(String last) { this.last = last; } public int getScore() { return score; } public void setScore(int score) { this.score = score; } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Golfer golfer = (Golfer) o; if (first != null ? !first.equals(golfer.first) : golfer.first != null) return false; return last != null ? last.equals(golfer.last) : golfer.last == null; } @Override public int hashCode() { int result = first != null ? first.hashCode() : 0; result = 31 * result + (last != null ? last.hashCode() : 0); return result; } @Override public String toString() { return \"Golfer{\" + \"first='\" + first + '\\'' + \", last='\" + last + '\\'' + \", score=\" + score + '}'; } }"}]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/sorting/SortStrings.java","main_file_content":"package sorting; import java.util.Arrays; import java.util.Collections; import java.util.Comparator; import java.util.List; import java.util.stream.Collectors; public class SortStrings { public static void main(String[] args) { List<String> strings = Arrays.asList(\"this\", \"is\", \"a\", \"list\", \"of\", \"strings\"); System.out.println(strings); System.out.println(\"Natural sort:\"); Collections.sort(strings); System.out.println(strings); System.out.println(\"Sort by length using a Comparator impl anon inner class:\"); Collections.sort(strings, new Comparator<String>() { @Override public int compare(String s1, String s2) { return s1.length() - s2.length(); } }); System.out.println(strings); System.out.println(\"Reverse sort by length with a Comparator impl lambda expression:\"); Collections.sort(strings, (s1, s2) -> s2.length() - s1.length()); System.out.println(strings); System.out.println(\"Natural sort using Stream.sorted()\"); List<String> sorted = strings.stream() .sorted() .collect(Collectors.toList()); System.out.println(sorted); System.out.println(\"Reverse length sort using Stream.sorted(Comparator)\"); sorted = strings.stream() .sorted((s1, s2) -> s2.length() - s1.length()) .collect(Collectors.toList()); System.out.println(sorted); System.out.println(\"Sort by length using Comparator.comparingInt()\"); sorted = strings.stream() .sorted(Comparator.comparingInt(String::length)) .collect(Collectors.toList()); System.out.println(sorted); System.out.println(\"Sort by length, then equal lengths reverse alpha\"); sorted = strings.stream() .sorted(Comparator.comparingInt(String::length) .thenComparing(Comparator.reverseOrder())) .collect(Collectors.toList()); System.out.println(sorted); } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/sorting/Golfer.java","main_file_content":"package sorting; public class Golfer implements Comparable<Golfer> { private String first; private String last; private int score; public Golfer() {} public Golfer(String first, String last) { this.first = first; this.last = last; } public Golfer(String first, String last, int score) { this.first = first; this.last = last; this.score = score; } @Override public int compareTo(Golfer golfer) { return score - golfer.score; } public String getFirst() { return first; } public void setFirst(String first) { this.first = first; } public String getLast() { return last; } public void setLast(String last) { this.last = last; } public int getScore() { return score; } public void setScore(int score) { this.score = score; } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Golfer golfer = (Golfer) o; if (first != null ? !first.equals(golfer.first) : golfer.first != null) return false; return last != null ? last.equals(golfer.last) : golfer.last == null; } @Override public int hashCode() { int result = first != null ? first.hashCode() : 0; result = 31 * result + (last != null ? last.hashCode() : 0); return result; } @Override public String toString() { return \"Golfer{\" + \"first='\" + first + '\\'' + \", last='\" + last + '\\'' + \", score=\" + score + '}'; } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/interfaces/Horse.java","main_file_content":"package interfaces; public interface Horse extends Animal { default String speak() { return \"neigh\"; } }","dependencies":[{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/interfaces/Animal.java","file_content":"package interfaces; public interface Animal { String speak(); }"}]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/interfaces/Bird.java","main_file_content":"package interfaces; public interface Bird extends Animal { default String speak() { return \"chirp\"; } }","dependencies":[{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/interfaces/Animal.java","file_content":"package interfaces; public interface Animal { String speak(); }"}]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/interfaces/Pegasus.java","main_file_content":"package interfaces; public class Pegasus implements Horse, Bird { @Override public String speak() { return Horse.super.speak() + \" \" + Bird.super.speak(); } }","dependencies":[{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/interfaces/Bird.java","file_content":"package interfaces; public interface Bird extends Animal { default String speak() { return \"chirp\"; } }"},{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/interfaces/Horse.java","file_content":"package interfaces; public interface Horse extends Animal { default String speak() { return \"neigh\"; } }"}]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/interfaces/Company.java","main_file_content":"package interfaces; public interface Company { default String getName() { return \"Initech\"; } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/interfaces/MyCompany.java","main_file_content":"package interfaces; public class MyCompany implements Company { @Override public String getName() { return \"Yoyodyne Propulsion Systems\"; } public static void main(String[] args) { MyCompany co = new MyCompany(); System.out.println(co.getName()); } }","dependencies":[{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/interfaces/Company.java","file_content":"package interfaces; public interface Company { default String getName() { return \"Initech\"; } }"}]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/interfaces/Animal.java","main_file_content":"package interfaces; public interface Animal { String speak(); }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/interfaces/Employee.java","main_file_content":"package interfaces; public interface Employee { String getFirst(); String getLast(); void doWork(); default String getName() { return String.format(\"%s %s\", getFirst(), getLast()); } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/refactoring/before/LoopsSortsAndIfs.java","main_file_content":"package refactoring.before; import java.util.*; public class LoopsSortsAndIfs { public static void main(String[] args) { String[] strings = \"this is an array of strings\".split(\" \"); List<String> evenLengths = new ArrayList<>(); for (String s : strings) { if (s.length() % 2 == 0) { evenLengths.add(s.toUpperCase()); } } Collections.sort(evenLengths, new Comparator<String>() { @Override public int compare(String s1, String s2) { return s1.length() - s2.length(); } }); for (String s : evenLengths) { System.out.println(s); } } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/refactoring/after/LoopsSortsAndIfs.java","main_file_content":"package refactoring.after; import java.util.ArrayList; import java.util.Collections; import java.util.Comparator; import java.util.List; public class LoopsSortsAndIfs { public static void main(String[] args) { String[] strings = \"this is an array of strings\".split(\" \"); List<String> evenLengths = new ArrayList<>(); for (String s : strings) { if (s.length() % 2 == 0) { evenLengths.add(s.toUpperCase()); } } Collections.sort(evenLengths, new Comparator<String>() { @Override public int compare(String s1, String s2) { return s1.length() - s2.length(); } }); for (String s : evenLengths) { System.out.println(s); } } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/eam/before/Resource.java","main_file_content":"package eam.before; public class Resource { public Resource() { System.out.println(\"Instance created\"); } public void op1() { System.out.println(\"op1 called....\"); } public void op2() { System.out.println(\"op2 called...\"); } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/eam/before/UseResource.java","main_file_content":"package eam.before; public class UseResource { public static void main(String[] args) { Resource resource = new Resource(); resource.op1(); resource.op2(); } }","dependencies":[{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/eam/before/Resource.java","file_content":"package eam.before; public class Resource { public Resource() { System.out.println(\"Instance created\"); } public void op1() { System.out.println(\"op1 called....\"); } public void op2() { System.out.println(\"op2 called...\"); } }"}]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/eam/after/Resource.java","main_file_content":"package eam.after; import java.util.function.Consumer; import java.util.function.Function; public class Resource { private Resource() { System.out.println(\"Instance created\"); } public void op1() { System.out.println(\"op1 called....\"); } public void op2() { System.out.println(\"op2 called...\"); } private void close() { System.out.println(\"do any cleanup here...\"); } public static void use(Consumer<Resource> consume) { Resource resource = new Resource(); try { consume.accept(resource); } finally { resource.close(); } } public static <R> R useWithReturn(Function<Resource, R> function) { R result = null; Resource resource = new Resource(); try { result = function.apply(resource); } finally { resource.close(); } return result; } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/eam/after/UseResource.java","main_file_content":"package eam.after; public class UseResource { public static void main(String[] args) { Resource.use(resource -> { resource.op1(); resource.op2(); }); } }","dependencies":[{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/eam/after/Resource.java","file_content":"package eam.after; import java.util.function.Consumer; import java.util.function.Function; public class Resource { private Resource() { System.out.println(\"Instance created\"); } public void op1() { System.out.println(\"op1 called....\"); } public void op2() { System.out.println(\"op2 called...\"); } private void close() { System.out.println(\"do any cleanup here...\"); } public static void use(Consumer<Resource> consume) { Resource resource = new Resource(); try { consume.accept(resource); } finally { resource.close(); } } public static <R> R useWithReturn(Function<Resource, R> function) { R result = null; Resource resource = new Resource(); try { result = function.apply(resource); } finally { resource.close(); } return result; } }"}]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/primes/before/SumSqrtPrimes.java","main_file_content":"package primes.before; import java.util.ArrayList; import java.util.List; public class SumSqrtPrimes { public static void main(String[] args) { List<Double> sqrtOfFirst100Primes = new ArrayList<>(); int index = 2; while (sqrtOfFirst100Primes.size() < 100) { if (PrimeCalculator.isPrime(index)) { sqrtOfFirst100Primes.add(Math.sqrt(index)); } index++; } System.out.println(sqrtOfFirst100Primes); } }","dependencies":[{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/primes/before/PrimeCalculator.java","file_content":"package primes.before; public class PrimeCalculator { public static boolean isPrime(int number) { int max = (int) (Math.sqrt(number) + 1); boolean prime = true; for (int index = 2; index <= max; index++) { if (number % index == 0) { prime = false; break; } } return prime; } }"}]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/primes/before/PrimeCalculator.java","main_file_content":"package primes.before; public class PrimeCalculator { public static boolean isPrime(int number) { int max = (int) (Math.sqrt(number) + 1); boolean prime = true; for (int index = 2; index <= max; index++) { if (number % index == 0) { prime = false; break; } } return prime; } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/primes/after/SumSqrtPrimes.java","main_file_content":"package primes.after; import java.util.List; import java.util.stream.Collectors; import java.util.stream.Stream; public class SumSqrtPrimes { public static void main(String[] args) { List<Double> sqrtOfFirst100Primes = Stream.iterate(2, e -> e + 1) .filter(PrimeCalculator::isPrime) .limit(100) .map(Math::sqrt) .collect(Collectors.toList()); System.out.println(sqrtOfFirst100Primes); } }","dependencies":[{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/primes/after/PrimeCalculator.java","file_content":"package primes.after; import java.util.stream.IntStream; public class PrimeCalculator { public static boolean isPrime(int number) { int max = (int) (Math.sqrt(number) + 1); return number > 1 && IntStream.range(2, max) .noneMatch(index -> number % index == 0); } }"}]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/main/java/primes/after/PrimeCalculator.java","main_file_content":"package primes.after; import java.util.stream.IntStream; public class PrimeCalculator { public static boolean isPrime(int number) { int max = (int) (Math.sqrt(number) + 1); return number > 1 && IntStream.range(2, max) .noneMatch(index -> number % index == 0); } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/test/java/lambdas/FunctionalInterfacesTest.java","main_file_content":"package lambdas; import org.junit.jupiter.api.Test; import java.util.Arrays; import java.util.List; import java.util.function.Consumer; public class FunctionalInterfacesTest { @SuppressWarnings({\"Convert2Lambda\", \"Anonymous2MethodRef\"}) @Test public void implementConsumerUsingAnonInnerClass() throws Exception { Consumer<String> consumer = new Consumer<String>() { @Override public void accept(String s) { System.out.println(s); } }; consumer.accept(\"Hello, World!\"); } @Test public void implementConsumerUsingLambda() throws Exception { } @Test public void implementConsumerUsingMethodReference() throws Exception { } @Test public void implementSupplierUsingAnonInnerClass() throws Exception { } @Test public void implementSupplierUsingLambda() throws Exception { } @Test public void implementSupplierUsingMethodReference() throws Exception { } @Test public void constructorReference() throws Exception { List<String> stringList = Arrays.asList(\"a\", \"b\", \"b\", \"c\", \"d\", \"d\"); } @Test public void filterWithPredicate() throws Exception { } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/test/java/lambdas/LazyErrorMessageTest.java","main_file_content":"package lambdas; import org.junit.jupiter.api.Test; import static org.junit.jupiter.api.Assertions.assertTrue; public class LazyErrorMessageTest { private String getErrorMessage() { System.out.println(\"Generating error message...\"); return \"x should be true\"; } @Test void assertArgIsTrue() { boolean x = true; assertTrue(x, getErrorMessage()); } @Test void assertArgIsTrue_lazyErrorMessage() { boolean x = true; assertTrue(x, () -> getErrorMessage()); } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/test/java/lambdas/BinaryOperatorTest.java","main_file_content":"package lambdas; import org.junit.jupiter.api.Test; import java.util.Arrays; import java.util.List; import java.util.Optional; import java.util.function.BinaryOperator; public class BinaryOperatorTest { @Test public void concatAsBinaryOperator() { BinaryOperator<String> concat = String::concat; List<String> strings = Arrays.asList(\"this\", \"is\", \"a\", \"list\", \"of\", \"strings\"); Optional<String> str = strings.stream() .reduce(concat); System.out.println(str.orElse(\"\")); } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/test/java/streams/SumBigDecimalsTest.java","main_file_content":"package streams; import org.junit.jupiter.api.Disabled; import org.junit.jupiter.api.Test; import java.math.BigDecimal; import static org.junit.jupiter.api.Assertions.assertEquals; public class SumBigDecimalsTest { private final SumBigDecimals summer = new SumBigDecimals(); @Test public void sumFirstN_usingReduce() { BigDecimal answer = summer.sumFirstN_usingReduce(10); assertEquals(new BigDecimal(\"55\"), answer); } @Test @Disabled(\"disable until demo\") public void sumFirstNDoubledValues() { BigDecimal answer = summer.sumDoubles(10); assertEquals(new BigDecimal(\"110\"), answer); } @Test public void sumFirstNDoubledValuesInitialized() { BigDecimal answer = summer.sumDoublesInitialized(10); assertEquals(new BigDecimal(\"110\"), answer); } }","dependencies":[{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/streams/SumBigDecimals.java","file_content":"package streams; import java.math.BigDecimal; import java.util.stream.Stream; public class SumBigDecimals { public BigDecimal sumFirstN_asDoubles(int n) { double total = Stream.iterate(BigDecimal.ONE, bd -> bd.add(BigDecimal.ONE)) .limit(n) .mapToDouble(BigDecimal::doubleValue) .sum(); return BigDecimal.valueOf(total); } public BigDecimal sumFirstN_usingReduce(int n) { return Stream.iterate(BigDecimal.ONE, bd -> bd.add(BigDecimal.ONE)) .limit(n) .reduce(BigDecimal::add).orElse(BigDecimal.ZERO); } public BigDecimal sumDoubles(int n) { BigDecimal two = BigDecimal.valueOf(2); return Stream.iterate(BigDecimal.ONE, bd -> bd.add(BigDecimal.ONE)) .limit(n) .reduce((total, e) -> { System.out.println(\"total = \" + total + \", e = \" + e); return total.add(e.multiply(two)); }).orElse(BigDecimal.ZERO); } public BigDecimal sumDoublesInitialized(int n) { BigDecimal two = new BigDecimal(\"2\"); return Stream.iterate(BigDecimal.ONE, bd -> bd.add(BigDecimal.ONE)) .limit(n) .reduce(BigDecimal.ZERO, (total, e) -> { System.out.println(\"total = \" + total + \", e = \" + e); return total.add(e.multiply(two)); }); } }"}]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/test/java/streams/SumEvens.java","main_file_content":"package streams; import org.junit.jupiter.api.Test; import java.util.Arrays; import java.util.List; import java.util.function.IntPredicate; import static org.junit.jupiter.api.Assertions.assertEquals; public class SumEvens { private static final IntPredicate EVENS = n -> n % 2 == 0; private static final IntPredicate ODDS = n -> n % 2 != 0; @Test public void addEvenElements() { List<Integer> integers = Arrays.asList(3, 1, 4, 1, 5, 9, 2, 6, 5); int sum = 0; for (int n : integers) { if (n % 2 == 0) { sum += n; } } assertEquals(12, sum); } @Test public void addEvenElementsUsingStreams() { } @Test public void addOddElementsUsingStreams() { } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/test/java/streams/StringExercises.java","main_file_content":"package streams; import org.junit.jupiter.api.Test; import java.util.Arrays; import java.util.Comparator; import java.util.List; import java.util.function.Function; public class StringExercises { private final List<String> strings = Arrays.asList(\"this\", \"is\", \"a\", \"list\", \"of\", \"strings\"); @Test public void stringLengthSort_InnerClass() { strings.sort(new Comparator<String>() { @Override public int compare(String s1, String s2) { return s1.length() - s2.length(); } }); System.out.println(strings); } @Test public void stringLengthSort_lambda() { } private int compareStrings(String s1, String s2) { return s1.length() - s2.length(); } @Test public void stringLengthSort_methodCall() { } @Test public void stringLengthSort_methodRef() { } @Test public void stringLengthSort_comparingInt() { } @Test public void demoCollectors() { } private <A, B, C> Function<A, C> compose(Function<A, B> f, Function<B, C> g) { return x -> g.apply(f.apply(x)); } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/test/java/got/InMemoryMemberDAOTests.java","main_file_content":"package got; import org.junit.jupiter.api.Disabled; import org.junit.jupiter.api.DisplayNameGeneration; import org.junit.jupiter.api.DisplayNameGenerator; import org.junit.jupiter.api.Test; import java.util.*; import static org.assertj.core.api.Assertions.*; import static org.junit.jupiter.api.Assertions.assertAll; @Disabled(\"Remove this line to run tests\") @DisplayNameGeneration(DisplayNameGenerator.ReplaceUnderscores.class) public class InMemoryMemberDAOTests { private final MemberDAO dao = new InMemoryMemberDAO(); @Test void findById() { Optional<Member> member = dao.findById(1L); assertThat(member).isPresent(); assertThat(member.get().name()).isEqualTo(\"Eddard\"); } @Test void findById_notFound() { Optional<Member> member = dao.findById(100L); assertThat(member).isEmpty(); } @Test void findByName() { Optional<Member> member = dao.findByName(\"Eddard\"); assertThat(member).isPresent(); assertThat(member.get().id()).isEqualTo(1L); } @Test void findByName_notFound() { Optional<Member> member = dao.findByName(\"Ned\"); assertThat(member).isEmpty(); } @Test void findAllByHouse() { List<Member> members = dao.findAllByHouse(House.STARK); assertThat(members).hasSize(6) .allMatch(member -> member.house() == House.STARK); } @Test void findAllByHouse_notFound() { List<Member> members = dao.findAllByHouse(House.GREYJOY); assertThat(members).isEmpty(); } @Test void getAll() { Collection<Member> members = dao.getAll(); assertThat(members).hasSize(22); } @Test public void startWithS_sortAlphabetically() { List<Member> members = dao.startWithSandSortAlphabetically(); assertAll( () -> assertThat(members.get(0).name()).isEqualTo(\"Sansa\"), () -> assertThat(members.get(1).name()).isEqualTo(\"Stannis\") ); } @Test public void lannisters_alphabeticallyByName() { List<Member> members = dao.lannisters_alphabeticallyByName(); List<String> names = members.stream() .map(Member::name) .toList(); assertThat(names).containsExactly(\"Cersei\", \"Jaime\", \"Tyrion\", \"Tywin\"); } @Test public void salaryLessThan_sortByHouse() { List<Member> members = dao.salaryLessThanAndSortByHouse(80000.0); assertThat(members).hasSize(6) .allMatch(member -> member.salary() < 80000.0); List<House> houses = members.stream() .map(Member::house) .distinct() .toList(); assertThat(houses).containsExactly( House.BARATHEON, House.LANNISTER, House.STARK, House.TYRELL); } @Test public void sortByHouseName_sortByNameDesc() { List<Member> members = dao.sortByHouseNameThenSortByNameDesc(); assertThat(members).hasSize(22); } @Test public void starksByDob() { List<Member> members = dao.houseByDob(House.STARK); assertThat(members).hasSize(6) .allMatch(member -> member.house() == House.STARK); } @Test public void kingsByNameDesc() { List<Member> members = dao.kingsByNameDesc(); assertThat(members).hasSize(6) .allMatch(member -> member.title() == Title.KING); } @Test public void averageSalary() { double averageSalary = dao.averageSalary(); assertThat(averageSalary).isCloseTo(100611.64, within(0.1)); } @Test public void namesSorted() { List<String> names = dao.namesSorted(House.STARK); assertThat(names).hasSize(6) .containsExactly(\"Arya\", \"Bran\", \"Catelyn\", \"Eddard\", \"Robb\", \"Sansa\"); } @Test public void salariesGT100k() { assertThat(dao.salariesGreaterThan(100000.0)).isTrue(); } @Test public void greyjoys() { assertThat(dao.anyMembers(House.GREYJOY)).isFalse(); } @Test public void howManyLannisters() { long count = dao.howMany(House.LANNISTER); assertThat(count).isEqualTo(4); } @Test public void lannisterNames() { String lannisterNames = dao.houseMemberNames(House.LANNISTER); assertThat(lannisterNames).isEqualTo(\"Jaime, Tyrion, Tywin, Cersei\"); } @Test public void highestSalary() { Optional<Member> member = dao.highestSalary(); assertThat(member).isPresent(); assertThat(member.get().name()).isEqualTo(\"Tywin\"); } @Test public void royalty_or_not() { Map<Boolean, List<Member>> map = dao.royaltyPartition(); assertAll( () -> assertThat(map.get(true)).hasSize(8), () -> assertThat(map.get(false)).hasSize(14) ); } @Test public void membersByHouse() { Map<House, List<Member>> houseListMap = dao.membersByHouse(); assertAll( () -> assertThat(houseListMap.get(House.STARK)).hasSize(6), () -> assertThat(houseListMap.get(House.LANNISTER)).hasSize(4), () -> assertThat(houseListMap.get(House.TARGARYEN)).hasSize(2), () -> assertThat(houseListMap.get(House.BARATHEON)).hasSize(4), () -> assertThat(houseListMap.get(House.TYRELL)).hasSize(3), () -> assertThat(houseListMap.get(House.BOLTON)).hasSize(2), () -> assertThat(houseListMap.get(House.SNOW)).hasSize(1) ); } @Test public void numberOfMembersByHouse() { Map<House, Long> memberCountByHouse = dao.numberOfMembersByHouse(); assertAll( () -> assertThat(memberCountByHouse.get(House.STARK)).isEqualTo(6), () -> assertThat(memberCountByHouse.get(House.LANNISTER)).isEqualTo(4), () -> assertThat(memberCountByHouse.get(House.TARGARYEN)).isEqualTo(2), () -> assertThat(memberCountByHouse.get(House.BARATHEON)).isEqualTo(4), () -> assertThat(memberCountByHouse.get(House.TYRELL)).isEqualTo(3), () -> assertThat(memberCountByHouse.get(House.BOLTON)).isEqualTo(2), () -> assertThat(memberCountByHouse.get(House.SNOW)).isEqualTo(1) ); } @Test public void houseStats() { Map<House, DoubleSummaryStatistics> stats = dao.houseStats(); assertAll( () -> assertThat(stats.get(House.STARK).getMax()).isEqualTo(100000.0), () -> assertThat(stats.get(House.STARK).getMin()).isEqualTo(10000.0), () -> assertThat(stats.get(House.STARK).getAverage()) .isCloseTo(66666.66, withinPercentage(0.01)) ); } }","dependencies":[{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/got/House.java","file_content":"package got; public enum House { ARRYN, BARATHEON, BOLTON, FREY, GREYJOY, LANNISTER, MARTELL, MORMONT, SNOW, TARLY, STARK, TARGARYEN, TULLY, TYRELL }"},{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/got/InMemoryMemberDAO.java","file_content":"package got; import java.util.*; public class InMemoryMemberDAO implements MemberDAO { private final Collection<Member> allMembers = MemberDB.getInstance().getAllMembers(); @Override public Optional<Member> findById(Long id) { return Optional.empty(); } @Override public Optional<Member> findByName(String name) { return Optional.empty(); } @Override public List<Member> findAllByHouse(House house) { return Collections.emptyList(); } @Override public Collection<Member> getAll() { return Collections.emptyList(); } @Override public List<Member> startWithSandSortAlphabetically() { return Collections.emptyList(); } @Override public List<Member> lannisters_alphabeticallyByName() { return Collections.emptyList(); } @Override public List<Member> salaryLessThanAndSortByHouse(double max) { return Collections.emptyList(); } @Override public List<Member> sortByHouseNameThenSortByNameDesc() { return Collections.emptyList(); } @Override public List<Member> houseByDob(House house) { return Collections.emptyList(); } @Override public List<Member> kingsByNameDesc() { return Collections.emptyList(); } @Override public double averageSalary() { return 0.0; } @Override public List<String> namesSorted(House house) { return Collections.emptyList(); } @Override public boolean salariesGreaterThan(double max) { return false; } @Override public boolean anyMembers(House house) { return false; } @Override public long howMany(House house) { return 0; } @Override public String houseMemberNames(House house) { return \"\"; } @Override public Optional<Member> highestSalary() { return Optional.empty(); } @Override public Map<Boolean, List<Member>> royaltyPartition() { return Collections.emptyMap(); } @Override public Map<House, List<Member>> membersByHouse() { return Collections.emptyMap(); } @Override public Map<House, Long> numberOfMembersByHouse() { return Collections.emptyMap(); } @Override public Map<House, DoubleSummaryStatistics> houseStats() { return Collections.emptyMap(); } }"},{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/got/Member.java","file_content":"package got; import java.time.LocalDate; public record Member( Long id, Title title, String name, LocalDate dob, double salary, House house ) implements Comparable<Member> { @Override public int compareTo(Member member) { return id.compareTo(member.id); } }"},{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/got/MemberDAO.java","file_content":"package got; import java.util.*; public interface MemberDAO { Optional<Member> findById(Long id); Optional<Member> findByName(String name); List<Member> findAllByHouse(House house); Collection<Member> getAll(); List<Member> startWithSandSortAlphabetically(); List<Member> lannisters_alphabeticallyByName(); List<Member> salaryLessThanAndSortByHouse(double max); List<Member> sortByHouseNameThenSortByNameDesc(); List<Member> houseByDob(House house); List<Member> kingsByNameDesc(); double averageSalary(); List<String> namesSorted(House house); boolean salariesGreaterThan(double max); boolean anyMembers(House house); long howMany(House house); String houseMemberNames(House house); Optional<Member> highestSalary(); Map<Boolean, List<Member>> royaltyPartition(); Map<House, List<Member>> membersByHouse(); Map<House, Long> numberOfMembersByHouse(); Map<House, DoubleSummaryStatistics> houseStats(); }"}]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/test/java/optional/CompanyTest.java","main_file_content":"package optional; import org.junit.jupiter.api.Test; import java.util.Optional; import static org.junit.jupiter.api.Assertions.*; class CompanyTest { private final Company company = new Company(\"MyCo\"); @Test void getDepartmentWithManager() { Optional<Department> dept = company.getDepartment(\"Accounting\"); assertTrue(dept.isPresent()); Department department = dept.get(); System.out.println(department.getName()); System.out.println(department.getManager()); System.out.println(department.getOptionalManager()); } @Test void getDepartmentWithoutManager() { Optional<Department> dept = company.getDepartment(\"IT\"); assertTrue(dept.isPresent()); Department department = dept.get(); System.out.println(department.getName()); System.out.println(department.getManager()); System.out.println(department.getOptionalManager()); } @Test void getOptionalDepartment() { Optional<Department> optionalDept = company.getDepartment(\"Whatever\"); System.out.println(optionalDept.map(Department::getManager)); System.out.println(optionalDept.map(Department::getOptionalManager)); System.out.println(optionalDept.flatMap(Department::getOptionalManager)); } @Test void getOptionalDepartmentWithManager() { Optional<Department> optionalDept = company.getDepartment(\"Finance\"); System.out.println(optionalDept.map(Department::getManager)); System.out.println(optionalDept.map(Department::getOptionalManager)); System.out.println(optionalDept.flatMap(Department::getOptionalManager)); } }","dependencies":[{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/optional/Company.java","file_content":"package optional; import java.util.Arrays; import java.util.HashMap; import java.util.Map; import java.util.Optional; public class Company { private final String name; private final Map<String, Department> departmentMap = new HashMap<>(); public Company(String name) { this.name = name; Department it = new Department(\"IT\"); Department sales = new Department(\"Sales\"); Department finance = new Department(\"Finance\"); Department accounting = new Department(\"Accounting\"); Manager mrSlate = new Manager(\"Mr Slate\"); Manager mrBurns = new Manager(\"Mr Burns\"); Manager janeway = new Manager(\"Admiral Janeway\"); sales.setManager(mrBurns); finance.setManager(mrSlate); accounting.setManager(janeway); Arrays.asList(it, sales, finance, accounting).forEach( dept -> departmentMap.put(dept.getName(), dept) ); } public Optional<Department> getDepartment(String name) { return Optional.ofNullable(departmentMap.get(name)); } public String getName() { return name; } }"},{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/optional/Department.java","file_content":"package optional; import java.util.Optional; public class Department { private final String name; private Manager manager; public Department(String name) { this.name = name; } public String getName() { return name; } public Manager getManager() { return manager; } public void setManager(Manager manager) { this.manager = manager; } public Optional<Manager> getOptionalManager() { return Optional.ofNullable(manager); } }"}]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/test/java/optional/ProductDAOTest.java","main_file_content":"package optional; import org.junit.jupiter.api.Test; import java.util.Optional; import java.util.stream.IntStream; import static org.junit.jupiter.api.Assertions.*; public class ProductDAOTest { private final ProductDAO dao = new ProductDAO(); @Test public void findById_exists() { IntStream.rangeClosed(1, 3) .forEach(id -> assertTrue(dao.findById(id).isPresent())); } @Test public void findById_doesNotExist() { Optional<Product> optionalProduct = dao.findById(999); assertFalse(optionalProduct.isPresent()); } @Test public void getProductById_exists() { Product product = dao.getProductById(1); assertEquals(1, product.getId().intValue()); } @Test public void getProductById_doesNotExist() { Product product = dao.getProductById(999); assertEquals(999, product.getId().intValue()); } }","dependencies":[{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/optional/Product.java","file_content":"package optional; import java.util.Objects; public class Product { private Integer id; private String name; private double price; public Product(Integer id, String name, double price) { System.out.println(\"Inside Product constructor with id=\" + id); this.id = id; this.name = name; this.price = price; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public double getPrice() { return price; } public void setPrice(double price) { this.price = price; } @Override public String toString() { return \"Product{\" + \"id=\" + id + \", name='\" + name + '\\'' + \", price=\" + price + '}'; } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Product product = (Product) o; return Double.compare(product.price, price) == 0 && Objects.equals(id, product.id) && Objects.equals(name, product.name); } @Override public int hashCode() { return Objects.hash(id, name, price); } }"},{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/optional/ProductDAO.java","file_content":"package optional; import java.util.HashMap; import java.util.Map; import java.util.Optional; public class ProductDAO { private static final Map<Integer, Product> products = new HashMap<>(); static { products.put(1, new Product(1, \"Football\", 12.99)); products.put(2, new Product(2, \"Basketball\", 15.99)); products.put(3, new Product(3, \"Baseball\", 5.99)); } public Optional<Product> findById(Integer id) { return Optional.ofNullable(products.get(id)); } public Product getProductById(Integer id) { Optional<Product> optional = findById(id); return optional.orElseGet(() -> new Product(999, \"No name\", 0.00)); } }"}]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/test/java/concurrency/CompletableFutureDemosTest.java","main_file_content":"package concurrency; import org.junit.jupiter.api.Test; import java.util.concurrent.ExecutionException; import static org.junit.jupiter.api.Assertions.*; public class CompletableFutureDemosTest { private final CompletableFutureDemos demo = new CompletableFutureDemos(); @Test public void testRemote() throws Exception { Product product = demo.getProduct(1).get(); assertEquals(1, product.getId()); } @Test public void testLocal() throws Exception { demo.getProduct(1).get(); Product product = demo.getProduct(1).get(); assertEquals(1, product.getId()); } @Test public void testException() throws Exception { assertThrows(ExecutionException.class, () -> { demo.getProduct(666).get(); }); } @Test public void testExceptionWithCause() throws Exception { try { demo.getProduct(666).get(); fail(\"Houston, we have a problem...\"); } catch (ExecutionException e) { assertEquals(ExecutionException.class, e.getClass()); assertEquals(RuntimeException.class, e.getCause().getClass()); } } @Test public void getProductAsync() throws Exception { Product product = demo.getProductAsync(1).get(); assertEquals(1, product.getId()); } }","dependencies":[{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/concurrency/CompletableFutureDemos.java","file_content":"package concurrency; import java.util.Map; import java.util.concurrent.CompletableFuture; import java.util.concurrent.ConcurrentHashMap; import java.util.logging.Logger; public class CompletableFutureDemos { private final Logger logger = Logger.getLogger(this.getClass().getName()); private final Map<Integer, Product> cache = new ConcurrentHashMap<>(); private Product getLocal(int id) { return cache.get(id); } private Product getRemote(int id) { try { Thread.sleep(100); if (id == 666) { throw new RuntimeException(\"Evil request\"); } } catch (InterruptedException ignored) { } return new Product(id, \"name\"); } public CompletableFuture<Product> getProduct(int id) { try { Product product = getLocal(id); if (product != null) { logger.info(\"getLocal with id=\" + id); return CompletableFuture.completedFuture(product); } else { logger.info(\"getRemote with id=\" + id); CompletableFuture<Product> future = new CompletableFuture<>(); Product p = getRemote(id); cache.put(id, p); future.complete(p); return future; } } catch (Exception e) { logger.info(\"exception thrown\"); CompletableFuture<Product> future = new CompletableFuture<>(); future.completeExceptionally(e); return future; } } public CompletableFuture<Product> getProductAsync(int id) { try { Product product = getLocal(id); if (product != null) { logger.info(\"getLocal with id=\" + id); return CompletableFuture.completedFuture(product); } else { logger.info(\"getRemote with id=\" + id); return CompletableFuture.supplyAsync(() -> { Product p = getRemote(id); cache.put(id, p); return p; }); } } catch (Exception e) { logger.info(\"exception thrown\"); CompletableFuture<Product> future = new CompletableFuture<>(); future.completeExceptionally(e); return future; } } }"},{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/concurrency/Product.java","file_content":"package concurrency; public class Product { private final int id; private final String name; public Product(int id, String name) { this.id = id; this.name = name; } public int getId() { return id; } public String getName() { return name; } @Override public String toString() { return \"Product{\" + \"id=\" + id + \", name='\" + name + '\\'' + '}'; } }"}]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/test/java/concurrency/AwaitQuiesenceTest.java","main_file_content":"package concurrency; import org.junit.jupiter.api.Disabled; import org.junit.jupiter.api.Test; import java.util.concurrent.CompletableFuture; import java.util.concurrent.ExecutionException; import java.util.concurrent.ForkJoinPool; import java.util.concurrent.TimeUnit; import static org.junit.jupiter.api.Assertions.*; public class AwaitQuiesenceTest { private final AwaitQuiesence aq = new AwaitQuiesence(); @Test public void get() { try { CompletableFuture<Void> cf = aq.supplyThenAccept(); cf.get(); assertTrue(cf.isDone()); } catch (InterruptedException | ExecutionException e) { throw new RuntimeException(e); } } @Test public void join() { CompletableFuture<Void> cf = aq.supplyThenAccept(); cf.join(); assertTrue(cf.isDone()); } @Test @Disabled(\"Causing issues with Github Action\") public void awaitQuiesence() { CompletableFuture<Void> cf = aq.supplyThenAccept(); assertFalse(cf.isDone()); boolean result = ForkJoinPool.commonPool() .awaitQuiescence(1, TimeUnit.SECONDS); assertTrue(result); assertTrue(cf.isDone()); } }","dependencies":[{"file_path":"java_upgrade-main/java_upgrade-main/src/main/java/concurrency/AwaitQuiesence.java","file_content":"package concurrency; import java.util.concurrent.CompletableFuture; public class AwaitQuiesence { private String sleepThenReturnString() { try { Thread.sleep(100); } catch (InterruptedException ignored) { } return \"42\"; } public CompletableFuture<Void> supplyThenAccept() { return CompletableFuture.supplyAsync(this::sleepThenReturnString) .thenApply(Integer::parseInt) .thenApply(x -> 2 * x) .thenAccept(System.out::println); } }"}]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/test/java/concurrency/CompletableFutureTests.java","main_file_content":"package concurrency; import org.junit.jupiter.api.Disabled; import org.junit.jupiter.api.Test; import java.io.ByteArrayOutputStream; import java.io.PrintStream; import java.util.concurrent.*; import static org.junit.jupiter.api.Assertions.*; public class CompletableFutureTests { @Test public void joinAfterCancel() { CompletableFuture<String> future = new CompletableFuture<>(); future.cancel(false); System.out.println( assertThrows(CancellationException.class, () -> future.join())); } @Test public void completeWithGet() { CompletableFuture<String> future = new CompletableFuture<>(); boolean finished = future.complete(\"I'm done\"); assertTrue(finished); try { assertEquals(\"I'm done\", future.get()); } catch (InterruptedException | ExecutionException e) { e.printStackTrace(); } } @Test public void completeWithJoin() { CompletableFuture<String> future = new CompletableFuture<>(); boolean finished = future.complete(\"I'm done\"); assertTrue(finished); assertEquals(\"I'm done\", future.join()); } @Test public void completeExceptionally() throws Exception { assertThrows(ExecutionException.class, () -> parseNumber(\"abc\").get()); } @Test public void completeExceptionallyWithCause() { try { parseNumber(\"abc\").get(); fail(\"Should not get here\"); } catch (Exception e) { assertEquals(ExecutionException.class, e.getClass()); assertEquals(NumberFormatException.class, e.getCause() .getClass()); } } @Test public void completeLong() throws Exception { assertEquals(42, (long) parseNumber(\"42\").get()); } private CompletableFuture<Long> parseNumber(String arg) { CompletableFuture<Long> future = new CompletableFuture<>(); try { future.complete(Long.parseLong(arg)); } catch (Exception e) { future.completeExceptionally(e); } return future; } @Test @Disabled(\"problems with CI server\") public void supplyThenAccept() { ByteArrayOutputStream baos = new ByteArrayOutputStream(); System.setOut(new PrintStream(baos)); CompletableFuture.supplyAsync(() -> \"42\") .thenApply(Integer::parseInt) .thenApply(x -> 2 * x) .thenAccept(System.out::println); System.out.println(\"Running...\"); String result = baos.toString(); System.out.println(result); assertTrue(result.contains(\"84\")); assertTrue(result.contains(\"Running...\")); } @Test @Disabled(\"problems with CI server\") public void supplyThenAcceptAsyncWithExecutor() { ByteArrayOutputStream baos = new ByteArrayOutputStream(); System.setOut(new PrintStream(baos)); ExecutorService service = Executors.newFixedThreadPool(4); CompletableFuture.supplyAsync(() -> \"42\", service) .thenApply(Integer::parseInt) .thenApply(x -> 2 * x) .thenAccept(System.out::println); System.out.println(\"Running...\"); String result = baos.toString(); System.out.println(result); assertTrue(result.contains(\"84\")); assertTrue(result.contains(\"Running...\")); } @Test public void compose() throws Exception { int x = 2; int y = 3; CompletableFuture<Integer> completableFuture = CompletableFuture.supplyAsync(() -> x) .thenCompose(n -> CompletableFuture.supplyAsync(() -> n + y)); assertEquals(5, (int) completableFuture.get()); } @Test public void combine() throws Exception { int x = 2; int y = 3; CompletableFuture<Integer> completableFuture = CompletableFuture.supplyAsync(() -> x) .thenCombine(CompletableFuture.supplyAsync(() -> y), (n1, n2) -> n1 + n2); assertEquals(5, (int) completableFuture.get()); } private CompletableFuture<Integer> getIntegerCompletableFuture(String num) { return CompletableFuture.supplyAsync(() -> Integer.parseInt(num)) .handle((val, exc) -> val != null ? val : 0); } @Test public void handleWithException() throws Exception { String num = \"abc\"; CompletableFuture<Integer> value = getIntegerCompletableFuture(num); assertEquals(0, (int) value.get()); } @Test public void handleWithoutException() throws Exception { String num = \"42\"; CompletableFuture<Integer> value = getIntegerCompletableFuture(num); assertEquals(42, (int) value.get()); } }","dependencies":[]}}
{"project_id":239,"chunk_id":0,"content":{"main_file_path":"java_upgrade-main/java_upgrade-main/src/test/java/interfaces/CompanyEmployeeTest.java","main_file_content":"package interfaces; import org.junit.jupiter.api.Test; public class CompanyEmployeeTest { @Test public void getName() { } }","dependencies":[]}}
{"project_id":243,"chunk_id":0,"content":{"main_file_path":"FlexScript-pl/src/ParserTest.java","main_file_content":"import org.junit.Test; import org.junit.jupiter.api.Assertions; import java.util.Arrays; class ParserTest { @Test void error() { } @Test void getNextToken() { } @Test void expr() { } @Test void paren_expr() { } @Test void expect() { } @Test void stmt() { } @Test void parse() { } @Test void printAST() { } @Test void main() { Assertions.assertEquals(\"This test was equal.\", \"This test was equal.\"); Assertions.assertEquals(\"3 tests: equal.\", \"3 tests: equal.\"); Assertions.assertEquals(\"[3 (were ; tests] equal).\", \"[3 (were ; tests] equal).\"); Assertions.assertEquals(\"while test: in loop\", \"while test: in loop\"); Assertions.assertNotEquals(\"This test was equal.\", \"This test was not equal.\"); Assertions.assertNotEquals(\"5 test: equal.\", \"7 test: not equal.\"); Assertions.assertNotEquals(\"8 test success > 9-2 test failure \", \"6 test failure == 5+1 test failure \"); Assertions.assertNotEquals(\"while test: in y\", \"for tests; in x\"); } }","dependencies":[]}}
{"project_id":243,"chunk_id":0,"content":{"main_file_path":"FlexScript-pl/src/flexscript/SyntaxAnalyzer.java","main_file_content":"package flexscript; import org.junit.jupiter.api.Test; import java.io.File; import java.io.FileNotFoundException; import java.lang.reflect.Array; import java.util.*; class Parser { private List<Token> source; private Token token; private int position; static class Node { public NodeType nt; public Node left, right; public String value; Node() { this.nt = null; this.left = null; this.right = null; this.value = null; } Node(NodeType node_type, Node left, Node right, String value) { this.nt = node_type; this.left = left; this.right = right; this.value = value; } public static Node make_node(NodeType nodetype, Node left, Node right) { return new Node(nodetype, left, right, \"\"); } public static Node make_node(NodeType nodetype, Node left) { return new Node(nodetype, left, null, \"\"); } public static Node make_leaf(NodeType nodetype, String value) { return new Node(nodetype, null, null, value); } } static class Token { public TokenType tokentype; public String value; public int line; public int pos; Token(TokenType token, String value, int line, int pos) { this.tokentype = token; this.value = value; this.line = line; this.pos = pos; } @Override public String toString() { return String.format(\"%5d %5d %-15s %s\", this.line, this.pos, this.tokentype, this.value); } } enum TokenType { End_of_input(false, false, false, -1, NodeType.nd_None), Op_multiply(false, true, false, 13, NodeType.nd_Mul), Op_divide(false, true, false, 13, NodeType.nd_Div), Op_mod(false, true, false, 13, NodeType.nd_Mod), Op_add(false, true, false, 12, NodeType.nd_Add), Op_subtract(false, true, false, 12, NodeType.nd_Sub), Op_negate(false, false, true, 14, NodeType.nd_Negate), Op_not(false, false, true, 14, NodeType.nd_Not), Op_less(false, true, false, 10, NodeType.nd_Lss), Op_lessequal(false, true, false, 10, NodeType.nd_Leq), Op_greater(false, true, false, 10, NodeType.nd_Gtr), Op_greaterequal(false, true, false, 10, NodeType.nd_Geq), Op_equal(false, true, true, 9, NodeType.nd_Eql), Op_notequal(false, true, false, 9, NodeType.nd_Neq), Op_assign(false, false, false, -1, NodeType.nd_Assign), Op_and(false, true, false, 5, NodeType.nd_And), Op_or(false, true, false, 4, NodeType.nd_Or), Keyword_for(false, false, false, -1, NodeType.nd_For), Keyword_if(false, false, false, -1, NodeType.nd_If), Keyword_else(false, false, false, -1, NodeType.nd_Else), Keyword_elif(false, false, false, -1, NodeType.nd_ElIf), Keyword_while(false, false, false, -1, NodeType.nd_While), Keyword_print(false, false, false, -1, NodeType.nd_None), Keyword_putc(false, false, false, -1, NodeType.nd_None), LeftParen(false, false, false, -1, NodeType.nd_None), RightParen(false, false, false, -1, NodeType.nd_None), LeftBrace(false, false, false, -1, NodeType.nd_None), RightBrace(false, false, false, -1, NodeType.nd_None), Semicolon(false, false, false, -1, NodeType.nd_None), Comma(false, false, false, -1, NodeType.nd_None), Identifier(false, false, false, -1, NodeType.nd_Ident), Integer(false, false, false, -1, NodeType.nd_Integer), String(false, false, false, -1, NodeType.nd_String); private final int precedence; private final boolean right_assoc; private final boolean is_binary; private final boolean is_unary; private final NodeType node_type; TokenType(boolean right_assoc, boolean is_binary, boolean is_unary, int precedence, NodeType node) { this.right_assoc = right_assoc; this.is_binary = is_binary; this.is_unary = is_unary; this.precedence = precedence; this.node_type = node; } boolean isRightAssoc() { return this.right_assoc; } boolean isBinary() { return this.is_binary; } boolean isUnary() { return this.is_unary; } int getPrecedence() { return this.precedence; } NodeType getNodeType() { return this.node_type; } } static enum NodeType { nd_None(\"\"), nd_Ident(\"Identifier\"), nd_String(\"String\"), nd_Integer(\"Integer\"), nd_Sequence(\"Sequence\"),nd_For(\"For\"), nd_If(\"If\"),nd_Else(\"Else\"),nd_ElIf(\"ElIf\"), nd_Prtc(\"Prtc\"), nd_Prts(\"Prts\"), nd_Prti(\"Prti\"), nd_While(\"While\"), nd_Assign(\"Assign\"), nd_Negate(\"Negate\"), nd_Not(\"Not\"), nd_Mul(\"Multiply\"), nd_Div(\"Divide\"), nd_Mod(\"Mod\"), nd_Add(\"Add\"), nd_Sub(\"Subtract\"), nd_Lss(\"Less\"), nd_Leq(\"LessEqual\"), nd_Gtr(\"Greater\"), nd_Geq(\"GreaterEqual\"), nd_Eql(\"Equal\"), nd_Neq(\"NotEqual\"), nd_And(\"And\"), nd_Or(\"Or\"); private final String name; NodeType(String name) { this.name = name; } @Override public String toString() { return this.name; } } static void error(int line, int pos, String msg) { if (line > 0 && pos > 0) { System.out.printf(\"%s in line %d, pos %d\\n\", msg, line, pos); } else { System.out.println(msg); } System.exit(1); } Parser(List<Token> source) { this.source = source; this.token = null; this.position = 0; } Token getNextToken() { this.token = this.source.get(this.position++); return this.token; } Node expr(int p) { Node result = null, node; TokenType op; int q; if (this.token.tokentype == TokenType.LeftParen) { result = paren_expr(); } else if (this.token.tokentype == TokenType.Op_add || this.token.tokentype == TokenType.Op_subtract) { op = (this.token.tokentype == TokenType.Op_subtract) ? TokenType.Op_negate : TokenType.Op_add; getNextToken(); node = expr(TokenType.Op_negate.getPrecedence()); result = (op == TokenType.Op_negate) ? Node.make_node(NodeType.nd_Negate, node) : node; } else if (this.token.tokentype == TokenType.Op_not) { getNextToken(); result = Node.make_node(NodeType.nd_Not, expr(TokenType.Op_not.getPrecedence())); } else if (this.token.tokentype == TokenType.Identifier) { result = Node.make_leaf(NodeType.nd_Ident, this.token.value); getNextToken(); } else if (this.token.tokentype == TokenType.Integer) { result = Node.make_leaf(NodeType.nd_Integer, this.token.value); getNextToken(); } else { error(this.token.line, this.token.pos, \"Expecting a primary, found: \" + this.token.tokentype); } while (this.token.tokentype.isBinary() && this.token.tokentype.getPrecedence() >= p) { op = this.token.tokentype; getNextToken(); q = op.getPrecedence(); if (!op.isRightAssoc()) { q++; } node = expr(q); result = Node.make_node(op.getNodeType(), result, node); } return result; } Node paren_expr() { expect(\"paren_expr\", TokenType.LeftParen); Node node = expr(0); expect(\"paren_expr\", TokenType.RightParen); return node; } void expect(String msg, TokenType s) { if (this.token.tokentype == s) { getNextToken(); return; } error(this.token.line, this.token.pos, msg + \": Expecting '\" + s + \"', found: '\" + this.token.tokentype + \"'\"); } Node stmt() { Node s, s2, t = null, e, v; if (this.token.tokentype == TokenType.Keyword_if) { getNextToken(); e = paren_expr(); s = stmt(); s2 = null; if (this.token.tokentype == TokenType.Keyword_else) { getNextToken(); s2 = stmt(); } if (this.token.tokentype == TokenType.Keyword_elif) { getNextToken(); s2 = stmt(); } t = Node.make_node(NodeType.nd_If, e, Node.make_node(NodeType.nd_If, s, s2)); } else if (this.token.tokentype == TokenType.Keyword_putc) { getNextToken(); e = paren_expr(); t = Node.make_node(NodeType.nd_Prtc, e); expect(\"Putc\", TokenType.Semicolon); } else if (this.token.tokentype == TokenType.Keyword_print) { getNextToken(); expect(\"Print\", TokenType.LeftParen); while (true) { if (this.token.tokentype == TokenType.String) { e = Node.make_node(NodeType.nd_Prts, Node.make_leaf(NodeType.nd_String, this.token.value)); getNextToken(); } else { e = Node.make_node(NodeType.nd_Prti, expr(0), null); } t = Node.make_node(NodeType.nd_Sequence, t, e); if (this.token.tokentype != TokenType.Comma) { break; } getNextToken(); } expect(\"Print\", TokenType.RightParen); expect(\"Print\", TokenType.Semicolon); } else if (this.token.tokentype == TokenType.Semicolon) { getNextToken(); } else if (this.token.tokentype == TokenType.Identifier) { v = Node.make_leaf(NodeType.nd_Ident, this.token.value); getNextToken(); expect(\"assign\", TokenType.Op_assign); e = expr(0); t = Node.make_node(NodeType.nd_Assign, v, e); expect(\"assign\", TokenType.Semicolon); } else if (this.token.tokentype == TokenType.Keyword_while) { getNextToken(); e = paren_expr(); s = stmt(); t = Node.make_node(NodeType.nd_While, e, s); } else if (this.token.tokentype == TokenType.LeftBrace) { getNextToken(); while (this.token.tokentype != TokenType.RightBrace && this.token.tokentype != TokenType.End_of_input) { t = Node.make_node(NodeType.nd_Sequence, t, stmt()); } expect(\"LBrace\", TokenType.RightBrace); } else if (this.token.tokentype == TokenType.End_of_input) { } else { error(this.token.line, this.token.pos, \"Expecting start of statement, found: \" + this.token.tokentype); } return t; } Node parse() { Node t = null; getNextToken(); while (this.token.tokentype != TokenType.End_of_input) { t = Node.make_node(NodeType.nd_Sequence, t, stmt()); } return t; } void printAST(Node t) { if (t == null) { System.out.println(\";\"); } else { System.out.printf(\"%-14s\", t.nt); if (t.nt == NodeType.nd_Ident || t.nt == NodeType.nd_Integer || t.nt == NodeType.nd_String) { System.out.println(\" \" + t.value); } else { System.out.println(); printAST(t.left); printAST(t.right); } } } }","dependencies":[]}}
{"project_id":243,"chunk_id":0,"content":{"main_file_path":"FlexScript-pl/src/flexscript/BaseLexer.java","main_file_content":"package flexscript; import java.io.File; import java.io.FileNotFoundException; import java.util.HashMap; import java.util.Map; import java.util.Scanner; public class BaseLexer { private int line; private int pos; private int position; private char chr; private String s; Map<String, TokenType> keywords = new HashMap<>(); static class Token { public TokenType tokentype; public String value; public int line; public int pos; Token(TokenType token, String value, int line, int pos) { this.tokentype = token; this.value = value; this.line = line; this.pos = pos; } @Override public String toString() { String result = String.format(\"%5d %5d %-15s\", this.line, this.pos, this.tokentype); switch (this.tokentype) { case Integer: result += String.format(\" %4s\", value); break; case Identifier: result += String.format(\" %s\", value); break; case String: result += String.format(\" \\\"%s\\\"\", value); break; } return result; } } static enum TokenType { End_of_input, Op_multiply, Op_divide, Op_mod, Op_add, Op_subtract, Op_negate, Op_not, Op_less, Op_lessequal, Op_greater, Op_greaterequal, Op_equal, Op_notequal, Op_assign, Op_and, Op_or,Keyword_for, Keyword_if, Keyword_else,Keyword_elif, Keyword_while, Keyword_print, Keyword_putc, LeftParen, RightParen, LeftBrace, RightBrace, Semicolon, Comma, Identifier, Integer, String } static void error(int line, int pos, String msg) { if (line > 0 && pos > 0) { System.out.printf(\"%s in line %d, pos %d\\n\", msg, line, pos); } else { System.out.println(msg); } System.exit(1); } BaseLexer(String source) { this.line = 1; this.pos = 0; this.position = 0; this.s = source; this.chr = this.s.charAt(0); this.keywords.put(\"for\", TokenType.Keyword_for); this.keywords.put(\"if\", TokenType.Keyword_if); this.keywords.put(\"else\", TokenType.Keyword_else); this.keywords.put(\"elif\", TokenType.Keyword_elif); this.keywords.put(\"print\", TokenType.Keyword_print); this.keywords.put(\"putc\", TokenType.Keyword_putc); this.keywords.put(\"while\", TokenType.Keyword_while); } Token follow(char expect, TokenType ifyes, TokenType ifno, int line, int pos) { if (getNextChar() == expect) { getNextChar(); return new Token(ifyes, \"\", line, pos); } if (ifno == TokenType.End_of_input) { error(line, pos, String.format(\"follow: unrecognized character: (%d) '%c'\", (int)this.chr, this.chr)); } return new Token(ifno, \"\", line, pos); } Token char_lit(int line, int pos) { char c = getNextChar(); int n = (int)c; if (c == '\\'') { error(line, pos, \"empty character constant\"); } else if (c == '\\\\') { c = getNextChar(); if (c == 'n') { n = 10; } else if (c == '\\\\') { n = '\\\\'; } else { error(line, pos, String.format(\"unknown escape sequence \\\\%c\", c)); } } if (getNextChar() != '\\'') { error(line, pos, \"multi-character constant\"); } getNextChar(); return new Token(TokenType.Integer, \"\" + n, line, pos); } Token string_lit(char start, int line, int pos) { String result = \"\"; while (getNextChar() != start) { if (this.chr == '\\u0000') { error(line, pos, \"EOF while scanning string literal\"); } if (this.chr == '\\n') { error(line, pos, \"EOL while scanning string literal\"); } result += this.chr; } getNextChar(); return new Token(TokenType.String, result, line, pos); } Token div_or_comment(int line, int pos) { if (getNextChar() != '*') { return new Token(TokenType.Op_divide, \"\", line, pos); } getNextChar(); while (true) { if (this.chr == '\\u0000') { error(line, pos, \"EOF in comment\"); } else if (this.chr == '*') { if (getNextChar() == '/') { getNextChar(); return getToken(); } } else { getNextChar(); } } } Token identifier_or_integer(int line, int pos) { boolean is_number = true; String text = \"\"; while (Character.isAlphabetic(this.chr) || Character.isDigit(this.chr) || this.chr == '_') { text += this.chr; if (!Character.isDigit(this.chr)) { is_number = false; } getNextChar(); } if (text.equals(\"\")) { error(line, pos, String.format(\"identifer_or_integer unrecopgnized character: (%d) %c\", (int)this.chr, this.chr)); } if (Character.isDigit(text.charAt(0))) { if (!is_number) { error(line, pos, String.format(\"invaslid number: %s\", text)); } return new Token(TokenType.Integer, text, line, pos); } if (this.keywords.containsKey(text)) { return new Token(this.keywords.get(text), \"\", line, pos); } return new Token(TokenType.Identifier, text, line, pos); } Token getToken() { int line, pos; while (Character.isWhitespace(this.chr)) { getNextChar(); } line = this.line; pos = this.pos; switch (this.chr) { case '\\u0000': return new Token(TokenType.End_of_input, \"\", this.line, this.pos); case '/': return div_or_comment(line, pos); case '\\'': return char_lit(line, pos); case '<': return follow('=', TokenType.Op_lessequal, TokenType.Op_less, line, pos); case '>': return follow('=', TokenType.Op_greaterequal, TokenType.Op_greater, line, pos); case '=': return follow('=', TokenType.Op_equal, TokenType.Op_assign, line, pos); case '!': return follow('=', TokenType.Op_notequal, TokenType.Op_not, line, pos); case '&': return follow('&', TokenType.Op_and, TokenType.End_of_input, line, pos); case '|': return follow('|', TokenType.Op_or, TokenType.End_of_input, line, pos); case '\"': return string_lit(this.chr, line, pos); case '{': getNextChar(); return new Token(TokenType.LeftBrace, \"\", line, pos); case '}': getNextChar(); return new Token(TokenType.RightBrace, \"\", line, pos); case '(': getNextChar(); return new Token(TokenType.LeftParen, \"\", line, pos); case ')': getNextChar(); return new Token(TokenType.RightParen, \"\", line, pos); case '+': getNextChar(); return new Token(TokenType.Op_add, \"\", line, pos); case '-': getNextChar(); return new Token(TokenType.Op_subtract, \"\", line, pos); case '*': getNextChar(); return new Token(TokenType.Op_multiply, \"\", line, pos); case '%': getNextChar(); return new Token(TokenType.Op_mod, \"\", line, pos); case ';': getNextChar(); return new Token(TokenType.Semicolon, \"\", line, pos); case ',': getNextChar(); return new Token(TokenType.Comma, \"\", line, pos); default: return identifier_or_integer(line, pos); } } char getNextChar() { this.pos++; this.position++; if (this.position >= this.s.length()) { this.chr = '\\u0000'; return this.chr; } this.chr = this.s.charAt(this.position); if (this.chr == '\\n') { this.line++; this.pos = 0; } return this.chr; } void printTokens() { Token t; while ((t = getToken()).tokentype != TokenType.End_of_input) { System.out.println(t); } System.out.println(t); } String to_string_token() { StringBuffer output = new StringBuffer(); Token t; while ((t = getToken()).tokentype != TokenType.End_of_input) { output.append(t + \"\\n\"); } return output.toString(); } public static void main(String[] args) { if (args.length > 0) { try { File f = new File(args[0]); Scanner s = new Scanner(f); String source = \" \"; while (s.hasNext()) { source += s.nextLine() + \"\\n\"; } BaseLexer l = new BaseLexer(source); l.printTokens(); } catch(FileNotFoundException e) { error(-1, -1, \"Exception: \" + e.getMessage()); } } else { error(-1, -1, \"No args\"); } } }","dependencies":[{"file_path":"FlexScript-pl/FlexScript-pl/src/flexscript/BaseLexer.java","file_content":"package flexscript; import java.io.File; import java.io.FileNotFoundException; import java.util.HashMap; import java.util.Map; import java.util.Scanner; public class BaseLexer { private int line; private int pos; private int position; private char chr; private String s; Map<String, TokenType> keywords = new HashMap<>(); static class Token { public TokenType tokentype; public String value; public int line; public int pos; Token(TokenType token, String value, int line, int pos) { this.tokentype = token; this.value = value; this.line = line; this.pos = pos; } @Override public String toString() { String result = String.format(\"%5d %5d %-15s\", this.line, this.pos, this.tokentype); switch (this.tokentype) { case Integer: result += String.format(\" %4s\", value); break; case Identifier: result += String.format(\" %s\", value); break; case String: result += String.format(\" \\\"%s\\\"\", value); break; } return result; } } static enum TokenType { End_of_input, Op_multiply, Op_divide, Op_mod, Op_add, Op_subtract, Op_negate, Op_not, Op_less, Op_lessequal, Op_greater, Op_greaterequal, Op_equal, Op_notequal, Op_assign, Op_and, Op_or,Keyword_for, Keyword_if, Keyword_else,Keyword_elif, Keyword_while, Keyword_print, Keyword_putc, LeftParen, RightParen, LeftBrace, RightBrace, Semicolon, Comma, Identifier, Integer, String } static void error(int line, int pos, String msg) { if (line > 0 && pos > 0) { System.out.printf(\"%s in line %d, pos %d\\n\", msg, line, pos); } else { System.out.println(msg); } System.exit(1); } BaseLexer(String source) { this.line = 1; this.pos = 0; this.position = 0; this.s = source; this.chr = this.s.charAt(0); this.keywords.put(\"for\", TokenType.Keyword_for); this.keywords.put(\"if\", TokenType.Keyword_if); this.keywords.put(\"else\", TokenType.Keyword_else); this.keywords.put(\"elif\", TokenType.Keyword_elif); this.keywords.put(\"print\", TokenType.Keyword_print); this.keywords.put(\"putc\", TokenType.Keyword_putc); this.keywords.put(\"while\", TokenType.Keyword_while); } Token follow(char expect, TokenType ifyes, TokenType ifno, int line, int pos) { if (getNextChar() == expect) { getNextChar(); return new Token(ifyes, \"\", line, pos); } if (ifno == TokenType.End_of_input) { error(line, pos, String.format(\"follow: unrecognized character: (%d) '%c'\", (int)this.chr, this.chr)); } return new Token(ifno, \"\", line, pos); } Token char_lit(int line, int pos) { char c = getNextChar(); int n = (int)c; if (c == '\\'') { error(line, pos, \"empty character constant\"); } else if (c == '\\\\') { c = getNextChar(); if (c == 'n') { n = 10; } else if (c == '\\\\') { n = '\\\\'; } else { error(line, pos, String.format(\"unknown escape sequence \\\\%c\", c)); } } if (getNextChar() != '\\'') { error(line, pos, \"multi-character constant\"); } getNextChar(); return new Token(TokenType.Integer, \"\" + n, line, pos); } Token string_lit(char start, int line, int pos) { String result = \"\"; while (getNextChar() != start) { if (this.chr == '\\u0000') { error(line, pos, \"EOF while scanning string literal\"); } if (this.chr == '\\n') { error(line, pos, \"EOL while scanning string literal\"); } result += this.chr; } getNextChar(); return new Token(TokenType.String, result, line, pos); } Token div_or_comment(int line, int pos) { if (getNextChar() != '*') { return new Token(TokenType.Op_divide, \"\", line, pos); } getNextChar(); while (true) { if (this.chr == '\\u0000') { error(line, pos, \"EOF in comment\"); } else if (this.chr == '*') { if (getNextChar() == '/') { getNextChar(); return getToken(); } } else { getNextChar(); } } } Token identifier_or_integer(int line, int pos) { boolean is_number = true; String text = \"\"; while (Character.isAlphabetic(this.chr) || Character.isDigit(this.chr) || this.chr == '_') { text += this.chr; if (!Character.isDigit(this.chr)) { is_number = false; } getNextChar(); } if (text.equals(\"\")) { error(line, pos, String.format(\"identifer_or_integer unrecopgnized character: (%d) %c\", (int)this.chr, this.chr)); } if (Character.isDigit(text.charAt(0))) { if (!is_number) { error(line, pos, String.format(\"invaslid number: %s\", text)); } return new Token(TokenType.Integer, text, line, pos); } if (this.keywords.containsKey(text)) { return new Token(this.keywords.get(text), \"\", line, pos); } return new Token(TokenType.Identifier, text, line, pos); } Token getToken() { int line, pos; while (Character.isWhitespace(this.chr)) { getNextChar(); } line = this.line; pos = this.pos; switch (this.chr) { case '\\u0000': return new Token(TokenType.End_of_input, \"\", this.line, this.pos); case '/': return div_or_comment(line, pos); case '\\'': return char_lit(line, pos); case '<': return follow('=', TokenType.Op_lessequal, TokenType.Op_less, line, pos); case '>': return follow('=', TokenType.Op_greaterequal, TokenType.Op_greater, line, pos); case '=': return follow('=', TokenType.Op_equal, TokenType.Op_assign, line, pos); case '!': return follow('=', TokenType.Op_notequal, TokenType.Op_not, line, pos); case '&': return follow('&', TokenType.Op_and, TokenType.End_of_input, line, pos); case '|': return follow('|', TokenType.Op_or, TokenType.End_of_input, line, pos); case '\"': return string_lit(this.chr, line, pos); case '{': getNextChar(); return new Token(TokenType.LeftBrace, \"\", line, pos); case '}': getNextChar(); return new Token(TokenType.RightBrace, \"\", line, pos); case '(': getNextChar(); return new Token(TokenType.LeftParen, \"\", line, pos); case ')': getNextChar(); return new Token(TokenType.RightParen, \"\", line, pos); case '+': getNextChar(); return new Token(TokenType.Op_add, \"\", line, pos); case '-': getNextChar(); return new Token(TokenType.Op_subtract, \"\", line, pos); case '*': getNextChar(); return new Token(TokenType.Op_multiply, \"\", line, pos); case '%': getNextChar(); return new Token(TokenType.Op_mod, \"\", line, pos); case ';': getNextChar(); return new Token(TokenType.Semicolon, \"\", line, pos); case ',': getNextChar(); return new Token(TokenType.Comma, \"\", line, pos); default: return identifier_or_integer(line, pos); } } char getNextChar() { this.pos++; this.position++; if (this.position >= this.s.length()) { this.chr = '\\u0000'; return this.chr; } this.chr = this.s.charAt(this.position); if (this.chr == '\\n') { this.line++; this.pos = 0; } return this.chr; } void printTokens() { Token t; while ((t = getToken()).tokentype != TokenType.End_of_input) { System.out.println(t); } System.out.println(t); } String to_string_token() { StringBuffer output = new StringBuffer(); Token t; while ((t = getToken()).tokentype != TokenType.End_of_input) { output.append(t + \"\\n\"); } return output.toString(); } public static void main(String[] args) { if (args.length > 0) { try { File f = new File(args[0]); Scanner s = new Scanner(f); String source = \" \"; while (s.hasNext()) { source += s.nextLine() + \"\\n\"; } BaseLexer l = new BaseLexer(source); l.printTokens(); } catch(FileNotFoundException e) { error(-1, -1, \"Exception: \" + e.getMessage()); } } else { error(-1, -1, \"No args\"); } } }"}]}}
{"project_id":243,"chunk_id":0,"content":{"main_file_path":"FlexScript-pl/src/flexscript/Main.java","main_file_content":"package flexscript; import java.io.File; import java.io.FileNotFoundException; import java.io.IOException; import java.util.*; public class Main { public static void main(String[] args) throws Exception { try { System.out.println(\"Reading file.......\"); final String dir = System.getProperty(\"user.dir\"); System.out.println(dir + \"/input/Code01.script\"); String raw = read(dir + \"/input/Code01.script\"); BaseLexer l = new BaseLexer(raw); String raw_lex = l.to_string_token(); String value, token; int line, pos; boolean found; List<Parser.Token> list = new ArrayList<>(); Map<String, Parser.TokenType> str_to_tokens = new HashMap<>(); str_to_tokens.put(\"End_of_input\", Parser.TokenType.End_of_input); str_to_tokens.put(\"Op_multiply\", Parser.TokenType.Op_multiply); str_to_tokens.put(\"Op_divide\", Parser.TokenType.Op_divide); str_to_tokens.put(\"Op_mod\", Parser.TokenType.Op_mod); str_to_tokens.put(\"Op_add\", Parser.TokenType.Op_add); str_to_tokens.put(\"Op_subtract\", Parser.TokenType.Op_subtract); str_to_tokens.put(\"Op_negate\", Parser.TokenType.Op_negate); str_to_tokens.put(\"Op_not\", Parser.TokenType.Op_not); str_to_tokens.put(\"Op_less\", Parser.TokenType.Op_less); str_to_tokens.put(\"Op_lessequal\", Parser.TokenType.Op_lessequal); str_to_tokens.put(\"Op_greater\", Parser.TokenType.Op_greater); str_to_tokens.put(\"Op_greaterequal\", Parser.TokenType.Op_greaterequal); str_to_tokens.put(\"Op_equal\", Parser.TokenType.Op_equal); str_to_tokens.put(\"Op_notequal\", Parser.TokenType.Op_notequal); str_to_tokens.put(\"Op_assign\", Parser.TokenType.Op_assign); str_to_tokens.put(\"Op_and\", Parser.TokenType.Op_and); str_to_tokens.put(\"Op_or\", Parser.TokenType.Op_or); str_to_tokens.put(\"Keyword_for\", Parser.TokenType.Keyword_for); str_to_tokens.put(\"Keyword_if\", Parser.TokenType.Keyword_if); str_to_tokens.put(\"Keyword_else\", Parser.TokenType.Keyword_else); str_to_tokens.put(\"Keyword_elif\", Parser.TokenType.Keyword_elif); str_to_tokens.put(\"Keyword_while\", Parser.TokenType.Keyword_while); str_to_tokens.put(\"Keyword_print\", Parser.TokenType.Keyword_print); str_to_tokens.put(\"Keyword_putc\", Parser.TokenType.Keyword_putc); str_to_tokens.put(\"LeftParen\", Parser.TokenType.LeftParen); str_to_tokens.put(\"RightParen\", Parser.TokenType.RightParen); str_to_tokens.put(\"LeftBrace\", Parser.TokenType.LeftBrace); str_to_tokens.put(\"RightBrace\", Parser.TokenType.RightBrace); str_to_tokens.put(\"Semicolon\", Parser.TokenType.Semicolon); str_to_tokens.put(\"Comma\", Parser.TokenType.Comma); str_to_tokens.put(\"Identifier\", Parser.TokenType.Identifier); str_to_tokens.put(\"Integer\", Parser.TokenType.Integer); str_to_tokens.put(\"String\", Parser.TokenType.String); Scanner s = new Scanner(raw_lex); while (s.hasNext()) { String str = s.nextLine(); StringTokenizer st = new StringTokenizer(str); line = Integer.parseInt(st.nextToken()); pos = Integer.parseInt(st.nextToken()); token = st.nextToken(); value = \"\"; while (st.hasMoreTokens()) { value += st.nextToken() + \" \"; } found = false; if (str_to_tokens.containsKey(token)) { found = true; list.add(new Parser.Token(str_to_tokens.get(token), value, line, pos)); } if (found == false) { throw new Exception(\"Token not found: '\" + token + \"'\"); } } Parser p = new Parser(list); } catch (Exception e) { Parser.error(-1, -1, \"Exception fuck: \" + e.getMessage()); } } private static String read(String target_file) { StringBuffer output = new StringBuffer(); try { File myObj = new File(target_file); Scanner myReader = new Scanner(myObj); while (myReader.hasNextLine()) { output.append(myReader.nextLine() + \"\\n\"); } myReader.close(); } catch (FileNotFoundException e) { System.out.println(\"An error occurred.\"); e.printStackTrace(); } return output.toString(); } }","dependencies":[{"file_path":"FlexScript-pl/FlexScript-pl/src/flexscript/BaseLexer.java","file_content":"package flexscript; import java.io.File; import java.io.FileNotFoundException; import java.util.HashMap; import java.util.Map; import java.util.Scanner; public class BaseLexer { private int line; private int pos; private int position; private char chr; private String s; Map<String, TokenType> keywords = new HashMap<>(); static class Token { public TokenType tokentype; public String value; public int line; public int pos; Token(TokenType token, String value, int line, int pos) { this.tokentype = token; this.value = value; this.line = line; this.pos = pos; } @Override public String toString() { String result = String.format(\"%5d %5d %-15s\", this.line, this.pos, this.tokentype); switch (this.tokentype) { case Integer: result += String.format(\" %4s\", value); break; case Identifier: result += String.format(\" %s\", value); break; case String: result += String.format(\" \\\"%s\\\"\", value); break; } return result; } } static enum TokenType { End_of_input, Op_multiply, Op_divide, Op_mod, Op_add, Op_subtract, Op_negate, Op_not, Op_less, Op_lessequal, Op_greater, Op_greaterequal, Op_equal, Op_notequal, Op_assign, Op_and, Op_or,Keyword_for, Keyword_if, Keyword_else,Keyword_elif, Keyword_while, Keyword_print, Keyword_putc, LeftParen, RightParen, LeftBrace, RightBrace, Semicolon, Comma, Identifier, Integer, String } static void error(int line, int pos, String msg) { if (line > 0 && pos > 0) { System.out.printf(\"%s in line %d, pos %d\\n\", msg, line, pos); } else { System.out.println(msg); } System.exit(1); } BaseLexer(String source) { this.line = 1; this.pos = 0; this.position = 0; this.s = source; this.chr = this.s.charAt(0); this.keywords.put(\"for\", TokenType.Keyword_for); this.keywords.put(\"if\", TokenType.Keyword_if); this.keywords.put(\"else\", TokenType.Keyword_else); this.keywords.put(\"elif\", TokenType.Keyword_elif); this.keywords.put(\"print\", TokenType.Keyword_print); this.keywords.put(\"putc\", TokenType.Keyword_putc); this.keywords.put(\"while\", TokenType.Keyword_while); } Token follow(char expect, TokenType ifyes, TokenType ifno, int line, int pos) { if (getNextChar() == expect) { getNextChar(); return new Token(ifyes, \"\", line, pos); } if (ifno == TokenType.End_of_input) { error(line, pos, String.format(\"follow: unrecognized character: (%d) '%c'\", (int)this.chr, this.chr)); } return new Token(ifno, \"\", line, pos); } Token char_lit(int line, int pos) { char c = getNextChar(); int n = (int)c; if (c == '\\'') { error(line, pos, \"empty character constant\"); } else if (c == '\\\\') { c = getNextChar(); if (c == 'n') { n = 10; } else if (c == '\\\\') { n = '\\\\'; } else { error(line, pos, String.format(\"unknown escape sequence \\\\%c\", c)); } } if (getNextChar() != '\\'') { error(line, pos, \"multi-character constant\"); } getNextChar(); return new Token(TokenType.Integer, \"\" + n, line, pos); } Token string_lit(char start, int line, int pos) { String result = \"\"; while (getNextChar() != start) { if (this.chr == '\\u0000') { error(line, pos, \"EOF while scanning string literal\"); } if (this.chr == '\\n') { error(line, pos, \"EOL while scanning string literal\"); } result += this.chr; } getNextChar(); return new Token(TokenType.String, result, line, pos); } Token div_or_comment(int line, int pos) { if (getNextChar() != '*') { return new Token(TokenType.Op_divide, \"\", line, pos); } getNextChar(); while (true) { if (this.chr == '\\u0000') { error(line, pos, \"EOF in comment\"); } else if (this.chr == '*') { if (getNextChar() == '/') { getNextChar(); return getToken(); } } else { getNextChar(); } } } Token identifier_or_integer(int line, int pos) { boolean is_number = true; String text = \"\"; while (Character.isAlphabetic(this.chr) || Character.isDigit(this.chr) || this.chr == '_') { text += this.chr; if (!Character.isDigit(this.chr)) { is_number = false; } getNextChar(); } if (text.equals(\"\")) { error(line, pos, String.format(\"identifer_or_integer unrecopgnized character: (%d) %c\", (int)this.chr, this.chr)); } if (Character.isDigit(text.charAt(0))) { if (!is_number) { error(line, pos, String.format(\"invaslid number: %s\", text)); } return new Token(TokenType.Integer, text, line, pos); } if (this.keywords.containsKey(text)) { return new Token(this.keywords.get(text), \"\", line, pos); } return new Token(TokenType.Identifier, text, line, pos); } Token getToken() { int line, pos; while (Character.isWhitespace(this.chr)) { getNextChar(); } line = this.line; pos = this.pos; switch (this.chr) { case '\\u0000': return new Token(TokenType.End_of_input, \"\", this.line, this.pos); case '/': return div_or_comment(line, pos); case '\\'': return char_lit(line, pos); case '<': return follow('=', TokenType.Op_lessequal, TokenType.Op_less, line, pos); case '>': return follow('=', TokenType.Op_greaterequal, TokenType.Op_greater, line, pos); case '=': return follow('=', TokenType.Op_equal, TokenType.Op_assign, line, pos); case '!': return follow('=', TokenType.Op_notequal, TokenType.Op_not, line, pos); case '&': return follow('&', TokenType.Op_and, TokenType.End_of_input, line, pos); case '|': return follow('|', TokenType.Op_or, TokenType.End_of_input, line, pos); case '\"': return string_lit(this.chr, line, pos); case '{': getNextChar(); return new Token(TokenType.LeftBrace, \"\", line, pos); case '}': getNextChar(); return new Token(TokenType.RightBrace, \"\", line, pos); case '(': getNextChar(); return new Token(TokenType.LeftParen, \"\", line, pos); case ')': getNextChar(); return new Token(TokenType.RightParen, \"\", line, pos); case '+': getNextChar(); return new Token(TokenType.Op_add, \"\", line, pos); case '-': getNextChar(); return new Token(TokenType.Op_subtract, \"\", line, pos); case '*': getNextChar(); return new Token(TokenType.Op_multiply, \"\", line, pos); case '%': getNextChar(); return new Token(TokenType.Op_mod, \"\", line, pos); case ';': getNextChar(); return new Token(TokenType.Semicolon, \"\", line, pos); case ',': getNextChar(); return new Token(TokenType.Comma, \"\", line, pos); default: return identifier_or_integer(line, pos); } } char getNextChar() { this.pos++; this.position++; if (this.position >= this.s.length()) { this.chr = '\\u0000'; return this.chr; } this.chr = this.s.charAt(this.position); if (this.chr == '\\n') { this.line++; this.pos = 0; } return this.chr; } void printTokens() { Token t; while ((t = getToken()).tokentype != TokenType.End_of_input) { System.out.println(t); } System.out.println(t); } String to_string_token() { StringBuffer output = new StringBuffer(); Token t; while ((t = getToken()).tokentype != TokenType.End_of_input) { output.append(t + \"\\n\"); } return output.toString(); } public static void main(String[] args) { if (args.length > 0) { try { File f = new File(args[0]); Scanner s = new Scanner(f); String source = \" \"; while (s.hasNext()) { source += s.nextLine() + \"\\n\"; } BaseLexer l = new BaseLexer(source); l.printTokens(); } catch(FileNotFoundException e) { error(-1, -1, \"Exception: \" + e.getMessage()); } } else { error(-1, -1, \"No args\"); } } }"}]}}
{"project_id":243,"chunk_id":1,"content":{"main_file_path":"FlexScript-pl/src/flexscript/Main.java","main_file_content":"package flexscript; import java.io.File; import java.io.FileNotFoundException; import java.io.IOException; import java.util.*; public class Main { public static void main(String[] args) throws Exception { try { System.out.println(\"Reading file.......\"); final String dir = System.getProperty(\"user.dir\"); System.out.println(dir + \"/input/Code01.script\"); String raw = read(dir + \"/input/Code01.script\"); BaseLexer l = new BaseLexer(raw); String raw_lex = l.to_string_token(); String value, token; int line, pos; boolean found; List<Parser.Token> list = new ArrayList<>(); Map<String, Parser.TokenType> str_to_tokens = new HashMap<>(); str_to_tokens.put(\"End_of_input\", Parser.TokenType.End_of_input); str_to_tokens.put(\"Op_multiply\", Parser.TokenType.Op_multiply); str_to_tokens.put(\"Op_divide\", Parser.TokenType.Op_divide); str_to_tokens.put(\"Op_mod\", Parser.TokenType.Op_mod); str_to_tokens.put(\"Op_add\", Parser.TokenType.Op_add); str_to_tokens.put(\"Op_subtract\", Parser.TokenType.Op_subtract); str_to_tokens.put(\"Op_negate\", Parser.TokenType.Op_negate); str_to_tokens.put(\"Op_not\", Parser.TokenType.Op_not); str_to_tokens.put(\"Op_less\", Parser.TokenType.Op_less); str_to_tokens.put(\"Op_lessequal\", Parser.TokenType.Op_lessequal); str_to_tokens.put(\"Op_greater\", Parser.TokenType.Op_greater); str_to_tokens.put(\"Op_greaterequal\", Parser.TokenType.Op_greaterequal); str_to_tokens.put(\"Op_equal\", Parser.TokenType.Op_equal); str_to_tokens.put(\"Op_notequal\", Parser.TokenType.Op_notequal); str_to_tokens.put(\"Op_assign\", Parser.TokenType.Op_assign); str_to_tokens.put(\"Op_and\", Parser.TokenType.Op_and); str_to_tokens.put(\"Op_or\", Parser.TokenType.Op_or); str_to_tokens.put(\"Keyword_for\", Parser.TokenType.Keyword_for); str_to_tokens.put(\"Keyword_if\", Parser.TokenType.Keyword_if); str_to_tokens.put(\"Keyword_else\", Parser.TokenType.Keyword_else); str_to_tokens.put(\"Keyword_elif\", Parser.TokenType.Keyword_elif); str_to_tokens.put(\"Keyword_while\", Parser.TokenType.Keyword_while); str_to_tokens.put(\"Keyword_print\", Parser.TokenType.Keyword_print); str_to_tokens.put(\"Keyword_putc\", Parser.TokenType.Keyword_putc); str_to_tokens.put(\"LeftParen\", Parser.TokenType.LeftParen); str_to_tokens.put(\"RightParen\", Parser.TokenType.RightParen); str_to_tokens.put(\"LeftBrace\", Parser.TokenType.LeftBrace); str_to_tokens.put(\"RightBrace\", Parser.TokenType.RightBrace); str_to_tokens.put(\"Semicolon\", Parser.TokenType.Semicolon); str_to_tokens.put(\"Comma\", Parser.TokenType.Comma); str_to_tokens.put(\"Identifier\", Parser.TokenType.Identifier); str_to_tokens.put(\"Integer\", Parser.TokenType.Integer); str_to_tokens.put(\"String\", Parser.TokenType.String); Scanner s = new Scanner(raw_lex); while (s.hasNext()) { String str = s.nextLine(); StringTokenizer st = new StringTokenizer(str); line = Integer.parseInt(st.nextToken()); pos = Integer.parseInt(st.nextToken()); token = st.nextToken(); value = \"\"; while (st.hasMoreTokens()) { value += st.nextToken() + \" \"; } found = false; if (str_to_tokens.containsKey(token)) { found = true; list.add(new Parser.Token(str_to_tokens.get(token), value, line, pos)); } if (found == false) { throw new Exception(\"Token not found: '\" + token + \"'\"); } } Parser p = new Parser(list); } catch (Exception e) { Parser.error(-1, -1, \"Exception fuck: \" + e.getMessage()); } } private static String read(String target_file) { StringBuffer output = new StringBuffer(); try { File myObj = new File(target_file); Scanner myReader = new Scanner(myObj); while (myReader.hasNextLine()) { output.append(myReader.nextLine() + \"\\n\"); } myReader.close(); } catch (FileNotFoundException e) { System.out.println(\"An error occurred.\"); e.printStackTrace(); } return output.toString(); } }","dependencies":[{"file_path":"FlexScript-pl/FlexScript-pl/src/flexscript/SyntaxAnalyzer.java","file_content":"package flexscript; import org.junit.jupiter.api.Test; import java.io.File; import java.io.FileNotFoundException; import java.lang.reflect.Array; import java.util.*; class Parser { private List<Token> source; private Token token; private int position; static class Node { public NodeType nt; public Node left, right; public String value; Node() { this.nt = null; this.left = null; this.right = null; this.value = null; } Node(NodeType node_type, Node left, Node right, String value) { this.nt = node_type; this.left = left; this.right = right; this.value = value; } public static Node make_node(NodeType nodetype, Node left, Node right) { return new Node(nodetype, left, right, \"\"); } public static Node make_node(NodeType nodetype, Node left) { return new Node(nodetype, left, null, \"\"); } public static Node make_leaf(NodeType nodetype, String value) { return new Node(nodetype, null, null, value); } } static class Token { public TokenType tokentype; public String value; public int line; public int pos; Token(TokenType token, String value, int line, int pos) { this.tokentype = token; this.value = value; this.line = line; this.pos = pos; } @Override public String toString() { return String.format(\"%5d %5d %-15s %s\", this.line, this.pos, this.tokentype, this.value); } } enum TokenType { End_of_input(false, false, false, -1, NodeType.nd_None), Op_multiply(false, true, false, 13, NodeType.nd_Mul), Op_divide(false, true, false, 13, NodeType.nd_Div), Op_mod(false, true, false, 13, NodeType.nd_Mod), Op_add(false, true, false, 12, NodeType.nd_Add), Op_subtract(false, true, false, 12, NodeType.nd_Sub), Op_negate(false, false, true, 14, NodeType.nd_Negate), Op_not(false, false, true, 14, NodeType.nd_Not), Op_less(false, true, false, 10, NodeType.nd_Lss), Op_lessequal(false, true, false, 10, NodeType.nd_Leq), Op_greater(false, true, false, 10, NodeType.nd_Gtr), Op_greaterequal(false, true, false, 10, NodeType.nd_Geq), Op_equal(false, true, true, 9, NodeType.nd_Eql), Op_notequal(false, true, false, 9, NodeType.nd_Neq), Op_assign(false, false, false, -1, NodeType.nd_Assign), Op_and(false, true, false, 5, NodeType.nd_And), Op_or(false, true, false, 4, NodeType.nd_Or), Keyword_for(false, false, false, -1, NodeType.nd_For), Keyword_if(false, false, false, -1, NodeType.nd_If), Keyword_else(false, false, false, -1, NodeType.nd_Else), Keyword_elif(false, false, false, -1, NodeType.nd_ElIf), Keyword_while(false, false, false, -1, NodeType.nd_While), Keyword_print(false, false, false, -1, NodeType.nd_None), Keyword_putc(false, false, false, -1, NodeType.nd_None), LeftParen(false, false, false, -1, NodeType.nd_None), RightParen(false, false, false, -1, NodeType.nd_None), LeftBrace(false, false, false, -1, NodeType.nd_None), RightBrace(false, false, false, -1, NodeType.nd_None), Semicolon(false, false, false, -1, NodeType.nd_None), Comma(false, false, false, -1, NodeType.nd_None), Identifier(false, false, false, -1, NodeType.nd_Ident), Integer(false, false, false, -1, NodeType.nd_Integer), String(false, false, false, -1, NodeType.nd_String); private final int precedence; private final boolean right_assoc; private final boolean is_binary; private final boolean is_unary; private final NodeType node_type; TokenType(boolean right_assoc, boolean is_binary, boolean is_unary, int precedence, NodeType node) { this.right_assoc = right_assoc; this.is_binary = is_binary; this.is_unary = is_unary; this.precedence = precedence; this.node_type = node; } boolean isRightAssoc() { return this.right_assoc; } boolean isBinary() { return this.is_binary; } boolean isUnary() { return this.is_unary; } int getPrecedence() { return this.precedence; } NodeType getNodeType() { return this.node_type; } } static enum NodeType { nd_None(\"\"), nd_Ident(\"Identifier\"), nd_String(\"String\"), nd_Integer(\"Integer\"), nd_Sequence(\"Sequence\"),nd_For(\"For\"), nd_If(\"If\"),nd_Else(\"Else\"),nd_ElIf(\"ElIf\"), nd_Prtc(\"Prtc\"), nd_Prts(\"Prts\"), nd_Prti(\"Prti\"), nd_While(\"While\"), nd_Assign(\"Assign\"), nd_Negate(\"Negate\"), nd_Not(\"Not\"), nd_Mul(\"Multiply\"), nd_Div(\"Divide\"), nd_Mod(\"Mod\"), nd_Add(\"Add\"), nd_Sub(\"Subtract\"), nd_Lss(\"Less\"), nd_Leq(\"LessEqual\"), nd_Gtr(\"Greater\"), nd_Geq(\"GreaterEqual\"), nd_Eql(\"Equal\"), nd_Neq(\"NotEqual\"), nd_And(\"And\"), nd_Or(\"Or\"); private final String name; NodeType(String name) { this.name = name; } @Override public String toString() { return this.name; } } static void error(int line, int pos, String msg) { if (line > 0 && pos > 0) { System.out.printf(\"%s in line %d, pos %d\\n\", msg, line, pos); } else { System.out.println(msg); } System.exit(1); } Parser(List<Token> source) { this.source = source; this.token = null; this.position = 0; } Token getNextToken() { this.token = this.source.get(this.position++); return this.token; } Node expr(int p) { Node result = null, node; TokenType op; int q; if (this.token.tokentype == TokenType.LeftParen) { result = paren_expr(); } else if (this.token.tokentype == TokenType.Op_add || this.token.tokentype == TokenType.Op_subtract) { op = (this.token.tokentype == TokenType.Op_subtract) ? TokenType.Op_negate : TokenType.Op_add; getNextToken(); node = expr(TokenType.Op_negate.getPrecedence()); result = (op == TokenType.Op_negate) ? Node.make_node(NodeType.nd_Negate, node) : node; } else if (this.token.tokentype == TokenType.Op_not) { getNextToken(); result = Node.make_node(NodeType.nd_Not, expr(TokenType.Op_not.getPrecedence())); } else if (this.token.tokentype == TokenType.Identifier) { result = Node.make_leaf(NodeType.nd_Ident, this.token.value); getNextToken(); } else if (this.token.tokentype == TokenType.Integer) { result = Node.make_leaf(NodeType.nd_Integer, this.token.value); getNextToken(); } else { error(this.token.line, this.token.pos, \"Expecting a primary, found: \" + this.token.tokentype); } while (this.token.tokentype.isBinary() && this.token.tokentype.getPrecedence() >= p) { op = this.token.tokentype; getNextToken(); q = op.getPrecedence(); if (!op.isRightAssoc()) { q++; } node = expr(q); result = Node.make_node(op.getNodeType(), result, node); } return result; } Node paren_expr() { expect(\"paren_expr\", TokenType.LeftParen); Node node = expr(0); expect(\"paren_expr\", TokenType.RightParen); return node; } void expect(String msg, TokenType s) { if (this.token.tokentype == s) { getNextToken(); return; } error(this.token.line, this.token.pos, msg + \": Expecting '\" + s + \"', found: '\" + this.token.tokentype + \"'\"); } Node stmt() { Node s, s2, t = null, e, v; if (this.token.tokentype == TokenType.Keyword_if) { getNextToken(); e = paren_expr(); s = stmt(); s2 = null; if (this.token.tokentype == TokenType.Keyword_else) { getNextToken(); s2 = stmt(); } if (this.token.tokentype == TokenType.Keyword_elif) { getNextToken(); s2 = stmt(); } t = Node.make_node(NodeType.nd_If, e, Node.make_node(NodeType.nd_If, s, s2)); } else if (this.token.tokentype == TokenType.Keyword_putc) { getNextToken(); e = paren_expr(); t = Node.make_node(NodeType.nd_Prtc, e); expect(\"Putc\", TokenType.Semicolon); } else if (this.token.tokentype == TokenType.Keyword_print) { getNextToken(); expect(\"Print\", TokenType.LeftParen); while (true) { if (this.token.tokentype == TokenType.String) { e = Node.make_node(NodeType.nd_Prts, Node.make_leaf(NodeType.nd_String, this.token.value)); getNextToken(); } else { e = Node.make_node(NodeType.nd_Prti, expr(0), null); } t = Node.make_node(NodeType.nd_Sequence, t, e); if (this.token.tokentype != TokenType.Comma) { break; } getNextToken(); } expect(\"Print\", TokenType.RightParen); expect(\"Print\", TokenType.Semicolon); } else if (this.token.tokentype == TokenType.Semicolon) { getNextToken(); } else if (this.token.tokentype == TokenType.Identifier) { v = Node.make_leaf(NodeType.nd_Ident, this.token.value); getNextToken(); expect(\"assign\", TokenType.Op_assign); e = expr(0); t = Node.make_node(NodeType.nd_Assign, v, e); expect(\"assign\", TokenType.Semicolon); } else if (this.token.tokentype == TokenType.Keyword_while) { getNextToken(); e = paren_expr(); s = stmt(); t = Node.make_node(NodeType.nd_While, e, s); } else if (this.token.tokentype == TokenType.LeftBrace) { getNextToken(); while (this.token.tokentype != TokenType.RightBrace && this.token.tokentype != TokenType.End_of_input) { t = Node.make_node(NodeType.nd_Sequence, t, stmt()); } expect(\"LBrace\", TokenType.RightBrace); } else if (this.token.tokentype == TokenType.End_of_input) { } else { error(this.token.line, this.token.pos, \"Expecting start of statement, found: \" + this.token.tokentype); } return t; } Node parse() { Node t = null; getNextToken(); while (this.token.tokentype != TokenType.End_of_input) { t = Node.make_node(NodeType.nd_Sequence, t, stmt()); } return t; } void printAST(Node t) { if (t == null) { System.out.println(\";\"); } else { System.out.printf(\"%-14s\", t.nt); if (t.nt == NodeType.nd_Ident || t.nt == NodeType.nd_Integer || t.nt == NodeType.nd_String) { System.out.println(\" \" + t.value); } else { System.out.println(); printAST(t.left); printAST(t.right); } } } }"}]}}
{"project_id":243,"chunk_id":0,"content":{"main_file_path":"FlexScript-pl/FlexScript-pl/src/ParserTest.java","main_file_content":"import org.junit.Test; import org.junit.jupiter.api.Assertions; import java.util.Arrays; class ParserTest { @Test void error() { } @Test void getNextToken() { } @Test void expr() { } @Test void paren_expr() { } @Test void expect() { } @Test void stmt() { } @Test void parse() { } @Test void printAST() { } @Test void main() { Assertions.assertEquals(\"This test was equal.\", \"This test was equal.\"); Assertions.assertEquals(\"3 tests: equal.\", \"3 tests: equal.\"); Assertions.assertEquals(\"[3 (were ; tests] equal).\", \"[3 (were ; tests] equal).\"); Assertions.assertEquals(\"while test: in loop\", \"while test: in loop\"); Assertions.assertNotEquals(\"This test was equal.\", \"This test was not equal.\"); Assertions.assertNotEquals(\"5 test: equal.\", \"7 test: not equal.\"); Assertions.assertNotEquals(\"8 test success > 9-2 test failure \", \"6 test failure == 5+1 test failure \"); Assertions.assertNotEquals(\"while test: in y\", \"for tests; in x\"); } }","dependencies":[]}}
{"project_id":243,"chunk_id":0,"content":{"main_file_path":"FlexScript-pl/FlexScript-pl/src/flexscript/SyntaxAnalyzer.java","main_file_content":"package flexscript; import org.junit.jupiter.api.Test; import java.io.File; import java.io.FileNotFoundException; import java.lang.reflect.Array; import java.util.*; class Parser { private List<Token> source; private Token token; private int position; static class Node { public NodeType nt; public Node left, right; public String value; Node() { this.nt = null; this.left = null; this.right = null; this.value = null; } Node(NodeType node_type, Node left, Node right, String value) { this.nt = node_type; this.left = left; this.right = right; this.value = value; } public static Node make_node(NodeType nodetype, Node left, Node right) { return new Node(nodetype, left, right, \"\"); } public static Node make_node(NodeType nodetype, Node left) { return new Node(nodetype, left, null, \"\"); } public static Node make_leaf(NodeType nodetype, String value) { return new Node(nodetype, null, null, value); } } static class Token { public TokenType tokentype; public String value; public int line; public int pos; Token(TokenType token, String value, int line, int pos) { this.tokentype = token; this.value = value; this.line = line; this.pos = pos; } @Override public String toString() { return String.format(\"%5d %5d %-15s %s\", this.line, this.pos, this.tokentype, this.value); } } enum TokenType { End_of_input(false, false, false, -1, NodeType.nd_None), Op_multiply(false, true, false, 13, NodeType.nd_Mul), Op_divide(false, true, false, 13, NodeType.nd_Div), Op_mod(false, true, false, 13, NodeType.nd_Mod), Op_add(false, true, false, 12, NodeType.nd_Add), Op_subtract(false, true, false, 12, NodeType.nd_Sub), Op_negate(false, false, true, 14, NodeType.nd_Negate), Op_not(false, false, true, 14, NodeType.nd_Not), Op_less(false, true, false, 10, NodeType.nd_Lss), Op_lessequal(false, true, false, 10, NodeType.nd_Leq), Op_greater(false, true, false, 10, NodeType.nd_Gtr), Op_greaterequal(false, true, false, 10, NodeType.nd_Geq), Op_equal(false, true, true, 9, NodeType.nd_Eql), Op_notequal(false, true, false, 9, NodeType.nd_Neq), Op_assign(false, false, false, -1, NodeType.nd_Assign), Op_and(false, true, false, 5, NodeType.nd_And), Op_or(false, true, false, 4, NodeType.nd_Or), Keyword_for(false, false, false, -1, NodeType.nd_For), Keyword_if(false, false, false, -1, NodeType.nd_If), Keyword_else(false, false, false, -1, NodeType.nd_Else), Keyword_elif(false, false, false, -1, NodeType.nd_ElIf), Keyword_while(false, false, false, -1, NodeType.nd_While), Keyword_print(false, false, false, -1, NodeType.nd_None), Keyword_putc(false, false, false, -1, NodeType.nd_None), LeftParen(false, false, false, -1, NodeType.nd_None), RightParen(false, false, false, -1, NodeType.nd_None), LeftBrace(false, false, false, -1, NodeType.nd_None), RightBrace(false, false, false, -1, NodeType.nd_None), Semicolon(false, false, false, -1, NodeType.nd_None), Comma(false, false, false, -1, NodeType.nd_None), Identifier(false, false, false, -1, NodeType.nd_Ident), Integer(false, false, false, -1, NodeType.nd_Integer), String(false, false, false, -1, NodeType.nd_String); private final int precedence; private final boolean right_assoc; private final boolean is_binary; private final boolean is_unary; private final NodeType node_type; TokenType(boolean right_assoc, boolean is_binary, boolean is_unary, int precedence, NodeType node) { this.right_assoc = right_assoc; this.is_binary = is_binary; this.is_unary = is_unary; this.precedence = precedence; this.node_type = node; } boolean isRightAssoc() { return this.right_assoc; } boolean isBinary() { return this.is_binary; } boolean isUnary() { return this.is_unary; } int getPrecedence() { return this.precedence; } NodeType getNodeType() { return this.node_type; } } static enum NodeType { nd_None(\"\"), nd_Ident(\"Identifier\"), nd_String(\"String\"), nd_Integer(\"Integer\"), nd_Sequence(\"Sequence\"),nd_For(\"For\"), nd_If(\"If\"),nd_Else(\"Else\"),nd_ElIf(\"ElIf\"), nd_Prtc(\"Prtc\"), nd_Prts(\"Prts\"), nd_Prti(\"Prti\"), nd_While(\"While\"), nd_Assign(\"Assign\"), nd_Negate(\"Negate\"), nd_Not(\"Not\"), nd_Mul(\"Multiply\"), nd_Div(\"Divide\"), nd_Mod(\"Mod\"), nd_Add(\"Add\"), nd_Sub(\"Subtract\"), nd_Lss(\"Less\"), nd_Leq(\"LessEqual\"), nd_Gtr(\"Greater\"), nd_Geq(\"GreaterEqual\"), nd_Eql(\"Equal\"), nd_Neq(\"NotEqual\"), nd_And(\"And\"), nd_Or(\"Or\"); private final String name; NodeType(String name) { this.name = name; } @Override public String toString() { return this.name; } } static void error(int line, int pos, String msg) { if (line > 0 && pos > 0) { System.out.printf(\"%s in line %d, pos %d\\n\", msg, line, pos); } else { System.out.println(msg); } System.exit(1); } Parser(List<Token> source) { this.source = source; this.token = null; this.position = 0; } Token getNextToken() { this.token = this.source.get(this.position++); return this.token; } Node expr(int p) { Node result = null, node; TokenType op; int q; if (this.token.tokentype == TokenType.LeftParen) { result = paren_expr(); } else if (this.token.tokentype == TokenType.Op_add || this.token.tokentype == TokenType.Op_subtract) { op = (this.token.tokentype == TokenType.Op_subtract) ? TokenType.Op_negate : TokenType.Op_add; getNextToken(); node = expr(TokenType.Op_negate.getPrecedence()); result = (op == TokenType.Op_negate) ? Node.make_node(NodeType.nd_Negate, node) : node; } else if (this.token.tokentype == TokenType.Op_not) { getNextToken(); result = Node.make_node(NodeType.nd_Not, expr(TokenType.Op_not.getPrecedence())); } else if (this.token.tokentype == TokenType.Identifier) { result = Node.make_leaf(NodeType.nd_Ident, this.token.value); getNextToken(); } else if (this.token.tokentype == TokenType.Integer) { result = Node.make_leaf(NodeType.nd_Integer, this.token.value); getNextToken(); } else { error(this.token.line, this.token.pos, \"Expecting a primary, found: \" + this.token.tokentype); } while (this.token.tokentype.isBinary() && this.token.tokentype.getPrecedence() >= p) { op = this.token.tokentype; getNextToken(); q = op.getPrecedence(); if (!op.isRightAssoc()) { q++; } node = expr(q); result = Node.make_node(op.getNodeType(), result, node); } return result; } Node paren_expr() { expect(\"paren_expr\", TokenType.LeftParen); Node node = expr(0); expect(\"paren_expr\", TokenType.RightParen); return node; } void expect(String msg, TokenType s) { if (this.token.tokentype == s) { getNextToken(); return; } error(this.token.line, this.token.pos, msg + \": Expecting '\" + s + \"', found: '\" + this.token.tokentype + \"'\"); } Node stmt() { Node s, s2, t = null, e, v; if (this.token.tokentype == TokenType.Keyword_if) { getNextToken(); e = paren_expr(); s = stmt(); s2 = null; if (this.token.tokentype == TokenType.Keyword_else) { getNextToken(); s2 = stmt(); } if (this.token.tokentype == TokenType.Keyword_elif) { getNextToken(); s2 = stmt(); } t = Node.make_node(NodeType.nd_If, e, Node.make_node(NodeType.nd_If, s, s2)); } else if (this.token.tokentype == TokenType.Keyword_putc) { getNextToken(); e = paren_expr(); t = Node.make_node(NodeType.nd_Prtc, e); expect(\"Putc\", TokenType.Semicolon); } else if (this.token.tokentype == TokenType.Keyword_print) { getNextToken(); expect(\"Print\", TokenType.LeftParen); while (true) { if (this.token.tokentype == TokenType.String) { e = Node.make_node(NodeType.nd_Prts, Node.make_leaf(NodeType.nd_String, this.token.value)); getNextToken(); } else { e = Node.make_node(NodeType.nd_Prti, expr(0), null); } t = Node.make_node(NodeType.nd_Sequence, t, e); if (this.token.tokentype != TokenType.Comma) { break; } getNextToken(); } expect(\"Print\", TokenType.RightParen); expect(\"Print\", TokenType.Semicolon); } else if (this.token.tokentype == TokenType.Semicolon) { getNextToken(); } else if (this.token.tokentype == TokenType.Identifier) { v = Node.make_leaf(NodeType.nd_Ident, this.token.value); getNextToken(); expect(\"assign\", TokenType.Op_assign); e = expr(0); t = Node.make_node(NodeType.nd_Assign, v, e); expect(\"assign\", TokenType.Semicolon); } else if (this.token.tokentype == TokenType.Keyword_while) { getNextToken(); e = paren_expr(); s = stmt(); t = Node.make_node(NodeType.nd_While, e, s); } else if (this.token.tokentype == TokenType.LeftBrace) { getNextToken(); while (this.token.tokentype != TokenType.RightBrace && this.token.tokentype != TokenType.End_of_input) { t = Node.make_node(NodeType.nd_Sequence, t, stmt()); } expect(\"LBrace\", TokenType.RightBrace); } else if (this.token.tokentype == TokenType.End_of_input) { } else { error(this.token.line, this.token.pos, \"Expecting start of statement, found: \" + this.token.tokentype); } return t; } Node parse() { Node t = null; getNextToken(); while (this.token.tokentype != TokenType.End_of_input) { t = Node.make_node(NodeType.nd_Sequence, t, stmt()); } return t; } void printAST(Node t) { if (t == null) { System.out.println(\";\"); } else { System.out.printf(\"%-14s\", t.nt); if (t.nt == NodeType.nd_Ident || t.nt == NodeType.nd_Integer || t.nt == NodeType.nd_String) { System.out.println(\" \" + t.value); } else { System.out.println(); printAST(t.left); printAST(t.right); } } } }","dependencies":[]}}
{"project_id":243,"chunk_id":0,"content":{"main_file_path":"FlexScript-pl/FlexScript-pl/src/flexscript/BaseLexer.java","main_file_content":"package flexscript; import java.io.File; import java.io.FileNotFoundException; import java.util.HashMap; import java.util.Map; import java.util.Scanner; public class BaseLexer { private int line; private int pos; private int position; private char chr; private String s; Map<String, TokenType> keywords = new HashMap<>(); static class Token { public TokenType tokentype; public String value; public int line; public int pos; Token(TokenType token, String value, int line, int pos) { this.tokentype = token; this.value = value; this.line = line; this.pos = pos; } @Override public String toString() { String result = String.format(\"%5d %5d %-15s\", this.line, this.pos, this.tokentype); switch (this.tokentype) { case Integer: result += String.format(\" %4s\", value); break; case Identifier: result += String.format(\" %s\", value); break; case String: result += String.format(\" \\\"%s\\\"\", value); break; } return result; } } static enum TokenType { End_of_input, Op_multiply, Op_divide, Op_mod, Op_add, Op_subtract, Op_negate, Op_not, Op_less, Op_lessequal, Op_greater, Op_greaterequal, Op_equal, Op_notequal, Op_assign, Op_and, Op_or,Keyword_for, Keyword_if, Keyword_else,Keyword_elif, Keyword_while, Keyword_print, Keyword_putc, LeftParen, RightParen, LeftBrace, RightBrace, Semicolon, Comma, Identifier, Integer, String } static void error(int line, int pos, String msg) { if (line > 0 && pos > 0) { System.out.printf(\"%s in line %d, pos %d\\n\", msg, line, pos); } else { System.out.println(msg); } System.exit(1); } BaseLexer(String source) { this.line = 1; this.pos = 0; this.position = 0; this.s = source; this.chr = this.s.charAt(0); this.keywords.put(\"for\", TokenType.Keyword_for); this.keywords.put(\"if\", TokenType.Keyword_if); this.keywords.put(\"else\", TokenType.Keyword_else); this.keywords.put(\"elif\", TokenType.Keyword_elif); this.keywords.put(\"print\", TokenType.Keyword_print); this.keywords.put(\"putc\", TokenType.Keyword_putc); this.keywords.put(\"while\", TokenType.Keyword_while); } Token follow(char expect, TokenType ifyes, TokenType ifno, int line, int pos) { if (getNextChar() == expect) { getNextChar(); return new Token(ifyes, \"\", line, pos); } if (ifno == TokenType.End_of_input) { error(line, pos, String.format(\"follow: unrecognized character: (%d) '%c'\", (int)this.chr, this.chr)); } return new Token(ifno, \"\", line, pos); } Token char_lit(int line, int pos) { char c = getNextChar(); int n = (int)c; if (c == '\\'') { error(line, pos, \"empty character constant\"); } else if (c == '\\\\') { c = getNextChar(); if (c == 'n') { n = 10; } else if (c == '\\\\') { n = '\\\\'; } else { error(line, pos, String.format(\"unknown escape sequence \\\\%c\", c)); } } if (getNextChar() != '\\'') { error(line, pos, \"multi-character constant\"); } getNextChar(); return new Token(TokenType.Integer, \"\" + n, line, pos); } Token string_lit(char start, int line, int pos) { String result = \"\"; while (getNextChar() != start) { if (this.chr == '\\u0000') { error(line, pos, \"EOF while scanning string literal\"); } if (this.chr == '\\n') { error(line, pos, \"EOL while scanning string literal\"); } result += this.chr; } getNextChar(); return new Token(TokenType.String, result, line, pos); } Token div_or_comment(int line, int pos) { if (getNextChar() != '*') { return new Token(TokenType.Op_divide, \"\", line, pos); } getNextChar(); while (true) { if (this.chr == '\\u0000') { error(line, pos, \"EOF in comment\"); } else if (this.chr == '*') { if (getNextChar() == '/') { getNextChar(); return getToken(); } } else { getNextChar(); } } } Token identifier_or_integer(int line, int pos) { boolean is_number = true; String text = \"\"; while (Character.isAlphabetic(this.chr) || Character.isDigit(this.chr) || this.chr == '_') { text += this.chr; if (!Character.isDigit(this.chr)) { is_number = false; } getNextChar(); } if (text.equals(\"\")) { error(line, pos, String.format(\"identifer_or_integer unrecopgnized character: (%d) %c\", (int)this.chr, this.chr)); } if (Character.isDigit(text.charAt(0))) { if (!is_number) { error(line, pos, String.format(\"invaslid number: %s\", text)); } return new Token(TokenType.Integer, text, line, pos); } if (this.keywords.containsKey(text)) { return new Token(this.keywords.get(text), \"\", line, pos); } return new Token(TokenType.Identifier, text, line, pos); } Token getToken() { int line, pos; while (Character.isWhitespace(this.chr)) { getNextChar(); } line = this.line; pos = this.pos; switch (this.chr) { case '\\u0000': return new Token(TokenType.End_of_input, \"\", this.line, this.pos); case '/': return div_or_comment(line, pos); case '\\'': return char_lit(line, pos); case '<': return follow('=', TokenType.Op_lessequal, TokenType.Op_less, line, pos); case '>': return follow('=', TokenType.Op_greaterequal, TokenType.Op_greater, line, pos); case '=': return follow('=', TokenType.Op_equal, TokenType.Op_assign, line, pos); case '!': return follow('=', TokenType.Op_notequal, TokenType.Op_not, line, pos); case '&': return follow('&', TokenType.Op_and, TokenType.End_of_input, line, pos); case '|': return follow('|', TokenType.Op_or, TokenType.End_of_input, line, pos); case '\"': return string_lit(this.chr, line, pos); case '{': getNextChar(); return new Token(TokenType.LeftBrace, \"\", line, pos); case '}': getNextChar(); return new Token(TokenType.RightBrace, \"\", line, pos); case '(': getNextChar(); return new Token(TokenType.LeftParen, \"\", line, pos); case ')': getNextChar(); return new Token(TokenType.RightParen, \"\", line, pos); case '+': getNextChar(); return new Token(TokenType.Op_add, \"\", line, pos); case '-': getNextChar(); return new Token(TokenType.Op_subtract, \"\", line, pos); case '*': getNextChar(); return new Token(TokenType.Op_multiply, \"\", line, pos); case '%': getNextChar(); return new Token(TokenType.Op_mod, \"\", line, pos); case ';': getNextChar(); return new Token(TokenType.Semicolon, \"\", line, pos); case ',': getNextChar(); return new Token(TokenType.Comma, \"\", line, pos); default: return identifier_or_integer(line, pos); } } char getNextChar() { this.pos++; this.position++; if (this.position >= this.s.length()) { this.chr = '\\u0000'; return this.chr; } this.chr = this.s.charAt(this.position); if (this.chr == '\\n') { this.line++; this.pos = 0; } return this.chr; } void printTokens() { Token t; while ((t = getToken()).tokentype != TokenType.End_of_input) { System.out.println(t); } System.out.println(t); } String to_string_token() { StringBuffer output = new StringBuffer(); Token t; while ((t = getToken()).tokentype != TokenType.End_of_input) { output.append(t + \"\\n\"); } return output.toString(); } public static void main(String[] args) { if (args.length > 0) { try { File f = new File(args[0]); Scanner s = new Scanner(f); String source = \" \"; while (s.hasNext()) { source += s.nextLine() + \"\\n\"; } BaseLexer l = new BaseLexer(source); l.printTokens(); } catch(FileNotFoundException e) { error(-1, -1, \"Exception: \" + e.getMessage()); } } else { error(-1, -1, \"No args\"); } } }","dependencies":[]}}
{"project_id":243,"chunk_id":0,"content":{"main_file_path":"FlexScript-pl/FlexScript-pl/src/flexscript/Main.java","main_file_content":"package flexscript; import java.io.File; import java.io.FileNotFoundException; import java.io.IOException; import java.util.*; public class Main { public static void main(String[] args) throws Exception { try { System.out.println(\"Reading file.......\"); final String dir = System.getProperty(\"user.dir\"); System.out.println(dir + \"/input/Code01.script\"); String raw = read(dir + \"/input/Code01.script\"); BaseLexer l = new BaseLexer(raw); String raw_lex = l.to_string_token(); String value, token; int line, pos; boolean found; List<Parser.Token> list = new ArrayList<>(); Map<String, Parser.TokenType> str_to_tokens = new HashMap<>(); str_to_tokens.put(\"End_of_input\", Parser.TokenType.End_of_input); str_to_tokens.put(\"Op_multiply\", Parser.TokenType.Op_multiply); str_to_tokens.put(\"Op_divide\", Parser.TokenType.Op_divide); str_to_tokens.put(\"Op_mod\", Parser.TokenType.Op_mod); str_to_tokens.put(\"Op_add\", Parser.TokenType.Op_add); str_to_tokens.put(\"Op_subtract\", Parser.TokenType.Op_subtract); str_to_tokens.put(\"Op_negate\", Parser.TokenType.Op_negate); str_to_tokens.put(\"Op_not\", Parser.TokenType.Op_not); str_to_tokens.put(\"Op_less\", Parser.TokenType.Op_less); str_to_tokens.put(\"Op_lessequal\", Parser.TokenType.Op_lessequal); str_to_tokens.put(\"Op_greater\", Parser.TokenType.Op_greater); str_to_tokens.put(\"Op_greaterequal\", Parser.TokenType.Op_greaterequal); str_to_tokens.put(\"Op_equal\", Parser.TokenType.Op_equal); str_to_tokens.put(\"Op_notequal\", Parser.TokenType.Op_notequal); str_to_tokens.put(\"Op_assign\", Parser.TokenType.Op_assign); str_to_tokens.put(\"Op_and\", Parser.TokenType.Op_and); str_to_tokens.put(\"Op_or\", Parser.TokenType.Op_or); str_to_tokens.put(\"Keyword_for\", Parser.TokenType.Keyword_for); str_to_tokens.put(\"Keyword_if\", Parser.TokenType.Keyword_if); str_to_tokens.put(\"Keyword_else\", Parser.TokenType.Keyword_else); str_to_tokens.put(\"Keyword_elif\", Parser.TokenType.Keyword_elif); str_to_tokens.put(\"Keyword_while\", Parser.TokenType.Keyword_while); str_to_tokens.put(\"Keyword_print\", Parser.TokenType.Keyword_print); str_to_tokens.put(\"Keyword_putc\", Parser.TokenType.Keyword_putc); str_to_tokens.put(\"LeftParen\", Parser.TokenType.LeftParen); str_to_tokens.put(\"RightParen\", Parser.TokenType.RightParen); str_to_tokens.put(\"LeftBrace\", Parser.TokenType.LeftBrace); str_to_tokens.put(\"RightBrace\", Parser.TokenType.RightBrace); str_to_tokens.put(\"Semicolon\", Parser.TokenType.Semicolon); str_to_tokens.put(\"Comma\", Parser.TokenType.Comma); str_to_tokens.put(\"Identifier\", Parser.TokenType.Identifier); str_to_tokens.put(\"Integer\", Parser.TokenType.Integer); str_to_tokens.put(\"String\", Parser.TokenType.String); Scanner s = new Scanner(raw_lex); while (s.hasNext()) { String str = s.nextLine(); StringTokenizer st = new StringTokenizer(str); line = Integer.parseInt(st.nextToken()); pos = Integer.parseInt(st.nextToken()); token = st.nextToken(); value = \"\"; while (st.hasMoreTokens()) { value += st.nextToken() + \" \"; } found = false; if (str_to_tokens.containsKey(token)) { found = true; list.add(new Parser.Token(str_to_tokens.get(token), value, line, pos)); } if (found == false) { throw new Exception(\"Token not found: '\" + token + \"'\"); } } Parser p = new Parser(list); } catch (Exception e) { Parser.error(-1, -1, \"Exception fuck: \" + e.getMessage()); } } private static String read(String target_file) { StringBuffer output = new StringBuffer(); try { File myObj = new File(target_file); Scanner myReader = new Scanner(myObj); while (myReader.hasNextLine()) { output.append(myReader.nextLine() + \"\\n\"); } myReader.close(); } catch (FileNotFoundException e) { System.out.println(\"An error occurred.\"); e.printStackTrace(); } return output.toString(); } }","dependencies":[{"file_path":"FlexScript-pl/FlexScript-pl/src/flexscript/BaseLexer.java","file_content":"package flexscript; import java.io.File; import java.io.FileNotFoundException; import java.util.HashMap; import java.util.Map; import java.util.Scanner; public class BaseLexer { private int line; private int pos; private int position; private char chr; private String s; Map<String, TokenType> keywords = new HashMap<>(); static class Token { public TokenType tokentype; public String value; public int line; public int pos; Token(TokenType token, String value, int line, int pos) { this.tokentype = token; this.value = value; this.line = line; this.pos = pos; } @Override public String toString() { String result = String.format(\"%5d %5d %-15s\", this.line, this.pos, this.tokentype); switch (this.tokentype) { case Integer: result += String.format(\" %4s\", value); break; case Identifier: result += String.format(\" %s\", value); break; case String: result += String.format(\" \\\"%s\\\"\", value); break; } return result; } } static enum TokenType { End_of_input, Op_multiply, Op_divide, Op_mod, Op_add, Op_subtract, Op_negate, Op_not, Op_less, Op_lessequal, Op_greater, Op_greaterequal, Op_equal, Op_notequal, Op_assign, Op_and, Op_or,Keyword_for, Keyword_if, Keyword_else,Keyword_elif, Keyword_while, Keyword_print, Keyword_putc, LeftParen, RightParen, LeftBrace, RightBrace, Semicolon, Comma, Identifier, Integer, String } static void error(int line, int pos, String msg) { if (line > 0 && pos > 0) { System.out.printf(\"%s in line %d, pos %d\\n\", msg, line, pos); } else { System.out.println(msg); } System.exit(1); } BaseLexer(String source) { this.line = 1; this.pos = 0; this.position = 0; this.s = source; this.chr = this.s.charAt(0); this.keywords.put(\"for\", TokenType.Keyword_for); this.keywords.put(\"if\", TokenType.Keyword_if); this.keywords.put(\"else\", TokenType.Keyword_else); this.keywords.put(\"elif\", TokenType.Keyword_elif); this.keywords.put(\"print\", TokenType.Keyword_print); this.keywords.put(\"putc\", TokenType.Keyword_putc); this.keywords.put(\"while\", TokenType.Keyword_while); } Token follow(char expect, TokenType ifyes, TokenType ifno, int line, int pos) { if (getNextChar() == expect) { getNextChar(); return new Token(ifyes, \"\", line, pos); } if (ifno == TokenType.End_of_input) { error(line, pos, String.format(\"follow: unrecognized character: (%d) '%c'\", (int)this.chr, this.chr)); } return new Token(ifno, \"\", line, pos); } Token char_lit(int line, int pos) { char c = getNextChar(); int n = (int)c; if (c == '\\'') { error(line, pos, \"empty character constant\"); } else if (c == '\\\\') { c = getNextChar(); if (c == 'n') { n = 10; } else if (c == '\\\\') { n = '\\\\'; } else { error(line, pos, String.format(\"unknown escape sequence \\\\%c\", c)); } } if (getNextChar() != '\\'') { error(line, pos, \"multi-character constant\"); } getNextChar(); return new Token(TokenType.Integer, \"\" + n, line, pos); } Token string_lit(char start, int line, int pos) { String result = \"\"; while (getNextChar() != start) { if (this.chr == '\\u0000') { error(line, pos, \"EOF while scanning string literal\"); } if (this.chr == '\\n') { error(line, pos, \"EOL while scanning string literal\"); } result += this.chr; } getNextChar(); return new Token(TokenType.String, result, line, pos); } Token div_or_comment(int line, int pos) { if (getNextChar() != '*') { return new Token(TokenType.Op_divide, \"\", line, pos); } getNextChar(); while (true) { if (this.chr == '\\u0000') { error(line, pos, \"EOF in comment\"); } else if (this.chr == '*') { if (getNextChar() == '/') { getNextChar(); return getToken(); } } else { getNextChar(); } } } Token identifier_or_integer(int line, int pos) { boolean is_number = true; String text = \"\"; while (Character.isAlphabetic(this.chr) || Character.isDigit(this.chr) || this.chr == '_') { text += this.chr; if (!Character.isDigit(this.chr)) { is_number = false; } getNextChar(); } if (text.equals(\"\")) { error(line, pos, String.format(\"identifer_or_integer unrecopgnized character: (%d) %c\", (int)this.chr, this.chr)); } if (Character.isDigit(text.charAt(0))) { if (!is_number) { error(line, pos, String.format(\"invaslid number: %s\", text)); } return new Token(TokenType.Integer, text, line, pos); } if (this.keywords.containsKey(text)) { return new Token(this.keywords.get(text), \"\", line, pos); } return new Token(TokenType.Identifier, text, line, pos); } Token getToken() { int line, pos; while (Character.isWhitespace(this.chr)) { getNextChar(); } line = this.line; pos = this.pos; switch (this.chr) { case '\\u0000': return new Token(TokenType.End_of_input, \"\", this.line, this.pos); case '/': return div_or_comment(line, pos); case '\\'': return char_lit(line, pos); case '<': return follow('=', TokenType.Op_lessequal, TokenType.Op_less, line, pos); case '>': return follow('=', TokenType.Op_greaterequal, TokenType.Op_greater, line, pos); case '=': return follow('=', TokenType.Op_equal, TokenType.Op_assign, line, pos); case '!': return follow('=', TokenType.Op_notequal, TokenType.Op_not, line, pos); case '&': return follow('&', TokenType.Op_and, TokenType.End_of_input, line, pos); case '|': return follow('|', TokenType.Op_or, TokenType.End_of_input, line, pos); case '\"': return string_lit(this.chr, line, pos); case '{': getNextChar(); return new Token(TokenType.LeftBrace, \"\", line, pos); case '}': getNextChar(); return new Token(TokenType.RightBrace, \"\", line, pos); case '(': getNextChar(); return new Token(TokenType.LeftParen, \"\", line, pos); case ')': getNextChar(); return new Token(TokenType.RightParen, \"\", line, pos); case '+': getNextChar(); return new Token(TokenType.Op_add, \"\", line, pos); case '-': getNextChar(); return new Token(TokenType.Op_subtract, \"\", line, pos); case '*': getNextChar(); return new Token(TokenType.Op_multiply, \"\", line, pos); case '%': getNextChar(); return new Token(TokenType.Op_mod, \"\", line, pos); case ';': getNextChar(); return new Token(TokenType.Semicolon, \"\", line, pos); case ',': getNextChar(); return new Token(TokenType.Comma, \"\", line, pos); default: return identifier_or_integer(line, pos); } } char getNextChar() { this.pos++; this.position++; if (this.position >= this.s.length()) { this.chr = '\\u0000'; return this.chr; } this.chr = this.s.charAt(this.position); if (this.chr == '\\n') { this.line++; this.pos = 0; } return this.chr; } void printTokens() { Token t; while ((t = getToken()).tokentype != TokenType.End_of_input) { System.out.println(t); } System.out.println(t); } String to_string_token() { StringBuffer output = new StringBuffer(); Token t; while ((t = getToken()).tokentype != TokenType.End_of_input) { output.append(t + \"\\n\"); } return output.toString(); } public static void main(String[] args) { if (args.length > 0) { try { File f = new File(args[0]); Scanner s = new Scanner(f); String source = \" \"; while (s.hasNext()) { source += s.nextLine() + \"\\n\"; } BaseLexer l = new BaseLexer(source); l.printTokens(); } catch(FileNotFoundException e) { error(-1, -1, \"Exception: \" + e.getMessage()); } } else { error(-1, -1, \"No args\"); } } }"}]}}
{"project_id":243,"chunk_id":1,"content":{"main_file_path":"FlexScript-pl/FlexScript-pl/src/flexscript/Main.java","main_file_content":"package flexscript; import java.io.File; import java.io.FileNotFoundException; import java.io.IOException; import java.util.*; public class Main { public static void main(String[] args) throws Exception { try { System.out.println(\"Reading file.......\"); final String dir = System.getProperty(\"user.dir\"); System.out.println(dir + \"/input/Code01.script\"); String raw = read(dir + \"/input/Code01.script\"); BaseLexer l = new BaseLexer(raw); String raw_lex = l.to_string_token(); String value, token; int line, pos; boolean found; List<Parser.Token> list = new ArrayList<>(); Map<String, Parser.TokenType> str_to_tokens = new HashMap<>(); str_to_tokens.put(\"End_of_input\", Parser.TokenType.End_of_input); str_to_tokens.put(\"Op_multiply\", Parser.TokenType.Op_multiply); str_to_tokens.put(\"Op_divide\", Parser.TokenType.Op_divide); str_to_tokens.put(\"Op_mod\", Parser.TokenType.Op_mod); str_to_tokens.put(\"Op_add\", Parser.TokenType.Op_add); str_to_tokens.put(\"Op_subtract\", Parser.TokenType.Op_subtract); str_to_tokens.put(\"Op_negate\", Parser.TokenType.Op_negate); str_to_tokens.put(\"Op_not\", Parser.TokenType.Op_not); str_to_tokens.put(\"Op_less\", Parser.TokenType.Op_less); str_to_tokens.put(\"Op_lessequal\", Parser.TokenType.Op_lessequal); str_to_tokens.put(\"Op_greater\", Parser.TokenType.Op_greater); str_to_tokens.put(\"Op_greaterequal\", Parser.TokenType.Op_greaterequal); str_to_tokens.put(\"Op_equal\", Parser.TokenType.Op_equal); str_to_tokens.put(\"Op_notequal\", Parser.TokenType.Op_notequal); str_to_tokens.put(\"Op_assign\", Parser.TokenType.Op_assign); str_to_tokens.put(\"Op_and\", Parser.TokenType.Op_and); str_to_tokens.put(\"Op_or\", Parser.TokenType.Op_or); str_to_tokens.put(\"Keyword_for\", Parser.TokenType.Keyword_for); str_to_tokens.put(\"Keyword_if\", Parser.TokenType.Keyword_if); str_to_tokens.put(\"Keyword_else\", Parser.TokenType.Keyword_else); str_to_tokens.put(\"Keyword_elif\", Parser.TokenType.Keyword_elif); str_to_tokens.put(\"Keyword_while\", Parser.TokenType.Keyword_while); str_to_tokens.put(\"Keyword_print\", Parser.TokenType.Keyword_print); str_to_tokens.put(\"Keyword_putc\", Parser.TokenType.Keyword_putc); str_to_tokens.put(\"LeftParen\", Parser.TokenType.LeftParen); str_to_tokens.put(\"RightParen\", Parser.TokenType.RightParen); str_to_tokens.put(\"LeftBrace\", Parser.TokenType.LeftBrace); str_to_tokens.put(\"RightBrace\", Parser.TokenType.RightBrace); str_to_tokens.put(\"Semicolon\", Parser.TokenType.Semicolon); str_to_tokens.put(\"Comma\", Parser.TokenType.Comma); str_to_tokens.put(\"Identifier\", Parser.TokenType.Identifier); str_to_tokens.put(\"Integer\", Parser.TokenType.Integer); str_to_tokens.put(\"String\", Parser.TokenType.String); Scanner s = new Scanner(raw_lex); while (s.hasNext()) { String str = s.nextLine(); StringTokenizer st = new StringTokenizer(str); line = Integer.parseInt(st.nextToken()); pos = Integer.parseInt(st.nextToken()); token = st.nextToken(); value = \"\"; while (st.hasMoreTokens()) { value += st.nextToken() + \" \"; } found = false; if (str_to_tokens.containsKey(token)) { found = true; list.add(new Parser.Token(str_to_tokens.get(token), value, line, pos)); } if (found == false) { throw new Exception(\"Token not found: '\" + token + \"'\"); } } Parser p = new Parser(list); } catch (Exception e) { Parser.error(-1, -1, \"Exception fuck: \" + e.getMessage()); } } private static String read(String target_file) { StringBuffer output = new StringBuffer(); try { File myObj = new File(target_file); Scanner myReader = new Scanner(myObj); while (myReader.hasNextLine()) { output.append(myReader.nextLine() + \"\\n\"); } myReader.close(); } catch (FileNotFoundException e) { System.out.println(\"An error occurred.\"); e.printStackTrace(); } return output.toString(); } }","dependencies":[{"file_path":"FlexScript-pl/FlexScript-pl/src/flexscript/SyntaxAnalyzer.java","file_content":"package flexscript; import org.junit.jupiter.api.Test; import java.io.File; import java.io.FileNotFoundException; import java.lang.reflect.Array; import java.util.*; class Parser { private List<Token> source; private Token token; private int position; static class Node { public NodeType nt; public Node left, right; public String value; Node() { this.nt = null; this.left = null; this.right = null; this.value = null; } Node(NodeType node_type, Node left, Node right, String value) { this.nt = node_type; this.left = left; this.right = right; this.value = value; } public static Node make_node(NodeType nodetype, Node left, Node right) { return new Node(nodetype, left, right, \"\"); } public static Node make_node(NodeType nodetype, Node left) { return new Node(nodetype, left, null, \"\"); } public static Node make_leaf(NodeType nodetype, String value) { return new Node(nodetype, null, null, value); } } static class Token { public TokenType tokentype; public String value; public int line; public int pos; Token(TokenType token, String value, int line, int pos) { this.tokentype = token; this.value = value; this.line = line; this.pos = pos; } @Override public String toString() { return String.format(\"%5d %5d %-15s %s\", this.line, this.pos, this.tokentype, this.value); } } enum TokenType { End_of_input(false, false, false, -1, NodeType.nd_None), Op_multiply(false, true, false, 13, NodeType.nd_Mul), Op_divide(false, true, false, 13, NodeType.nd_Div), Op_mod(false, true, false, 13, NodeType.nd_Mod), Op_add(false, true, false, 12, NodeType.nd_Add), Op_subtract(false, true, false, 12, NodeType.nd_Sub), Op_negate(false, false, true, 14, NodeType.nd_Negate), Op_not(false, false, true, 14, NodeType.nd_Not), Op_less(false, true, false, 10, NodeType.nd_Lss), Op_lessequal(false, true, false, 10, NodeType.nd_Leq), Op_greater(false, true, false, 10, NodeType.nd_Gtr), Op_greaterequal(false, true, false, 10, NodeType.nd_Geq), Op_equal(false, true, true, 9, NodeType.nd_Eql), Op_notequal(false, true, false, 9, NodeType.nd_Neq), Op_assign(false, false, false, -1, NodeType.nd_Assign), Op_and(false, true, false, 5, NodeType.nd_And), Op_or(false, true, false, 4, NodeType.nd_Or), Keyword_for(false, false, false, -1, NodeType.nd_For), Keyword_if(false, false, false, -1, NodeType.nd_If), Keyword_else(false, false, false, -1, NodeType.nd_Else), Keyword_elif(false, false, false, -1, NodeType.nd_ElIf), Keyword_while(false, false, false, -1, NodeType.nd_While), Keyword_print(false, false, false, -1, NodeType.nd_None), Keyword_putc(false, false, false, -1, NodeType.nd_None), LeftParen(false, false, false, -1, NodeType.nd_None), RightParen(false, false, false, -1, NodeType.nd_None), LeftBrace(false, false, false, -1, NodeType.nd_None), RightBrace(false, false, false, -1, NodeType.nd_None), Semicolon(false, false, false, -1, NodeType.nd_None), Comma(false, false, false, -1, NodeType.nd_None), Identifier(false, false, false, -1, NodeType.nd_Ident), Integer(false, false, false, -1, NodeType.nd_Integer), String(false, false, false, -1, NodeType.nd_String); private final int precedence; private final boolean right_assoc; private final boolean is_binary; private final boolean is_unary; private final NodeType node_type; TokenType(boolean right_assoc, boolean is_binary, boolean is_unary, int precedence, NodeType node) { this.right_assoc = right_assoc; this.is_binary = is_binary; this.is_unary = is_unary; this.precedence = precedence; this.node_type = node; } boolean isRightAssoc() { return this.right_assoc; } boolean isBinary() { return this.is_binary; } boolean isUnary() { return this.is_unary; } int getPrecedence() { return this.precedence; } NodeType getNodeType() { return this.node_type; } } static enum NodeType { nd_None(\"\"), nd_Ident(\"Identifier\"), nd_String(\"String\"), nd_Integer(\"Integer\"), nd_Sequence(\"Sequence\"),nd_For(\"For\"), nd_If(\"If\"),nd_Else(\"Else\"),nd_ElIf(\"ElIf\"), nd_Prtc(\"Prtc\"), nd_Prts(\"Prts\"), nd_Prti(\"Prti\"), nd_While(\"While\"), nd_Assign(\"Assign\"), nd_Negate(\"Negate\"), nd_Not(\"Not\"), nd_Mul(\"Multiply\"), nd_Div(\"Divide\"), nd_Mod(\"Mod\"), nd_Add(\"Add\"), nd_Sub(\"Subtract\"), nd_Lss(\"Less\"), nd_Leq(\"LessEqual\"), nd_Gtr(\"Greater\"), nd_Geq(\"GreaterEqual\"), nd_Eql(\"Equal\"), nd_Neq(\"NotEqual\"), nd_And(\"And\"), nd_Or(\"Or\"); private final String name; NodeType(String name) { this.name = name; } @Override public String toString() { return this.name; } } static void error(int line, int pos, String msg) { if (line > 0 && pos > 0) { System.out.printf(\"%s in line %d, pos %d\\n\", msg, line, pos); } else { System.out.println(msg); } System.exit(1); } Parser(List<Token> source) { this.source = source; this.token = null; this.position = 0; } Token getNextToken() { this.token = this.source.get(this.position++); return this.token; } Node expr(int p) { Node result = null, node; TokenType op; int q; if (this.token.tokentype == TokenType.LeftParen) { result = paren_expr(); } else if (this.token.tokentype == TokenType.Op_add || this.token.tokentype == TokenType.Op_subtract) { op = (this.token.tokentype == TokenType.Op_subtract) ? TokenType.Op_negate : TokenType.Op_add; getNextToken(); node = expr(TokenType.Op_negate.getPrecedence()); result = (op == TokenType.Op_negate) ? Node.make_node(NodeType.nd_Negate, node) : node; } else if (this.token.tokentype == TokenType.Op_not) { getNextToken(); result = Node.make_node(NodeType.nd_Not, expr(TokenType.Op_not.getPrecedence())); } else if (this.token.tokentype == TokenType.Identifier) { result = Node.make_leaf(NodeType.nd_Ident, this.token.value); getNextToken(); } else if (this.token.tokentype == TokenType.Integer) { result = Node.make_leaf(NodeType.nd_Integer, this.token.value); getNextToken(); } else { error(this.token.line, this.token.pos, \"Expecting a primary, found: \" + this.token.tokentype); } while (this.token.tokentype.isBinary() && this.token.tokentype.getPrecedence() >= p) { op = this.token.tokentype; getNextToken(); q = op.getPrecedence(); if (!op.isRightAssoc()) { q++; } node = expr(q); result = Node.make_node(op.getNodeType(), result, node); } return result; } Node paren_expr() { expect(\"paren_expr\", TokenType.LeftParen); Node node = expr(0); expect(\"paren_expr\", TokenType.RightParen); return node; } void expect(String msg, TokenType s) { if (this.token.tokentype == s) { getNextToken(); return; } error(this.token.line, this.token.pos, msg + \": Expecting '\" + s + \"', found: '\" + this.token.tokentype + \"'\"); } Node stmt() { Node s, s2, t = null, e, v; if (this.token.tokentype == TokenType.Keyword_if) { getNextToken(); e = paren_expr(); s = stmt(); s2 = null; if (this.token.tokentype == TokenType.Keyword_else) { getNextToken(); s2 = stmt(); } if (this.token.tokentype == TokenType.Keyword_elif) { getNextToken(); s2 = stmt(); } t = Node.make_node(NodeType.nd_If, e, Node.make_node(NodeType.nd_If, s, s2)); } else if (this.token.tokentype == TokenType.Keyword_putc) { getNextToken(); e = paren_expr(); t = Node.make_node(NodeType.nd_Prtc, e); expect(\"Putc\", TokenType.Semicolon); } else if (this.token.tokentype == TokenType.Keyword_print) { getNextToken(); expect(\"Print\", TokenType.LeftParen); while (true) { if (this.token.tokentype == TokenType.String) { e = Node.make_node(NodeType.nd_Prts, Node.make_leaf(NodeType.nd_String, this.token.value)); getNextToken(); } else { e = Node.make_node(NodeType.nd_Prti, expr(0), null); } t = Node.make_node(NodeType.nd_Sequence, t, e); if (this.token.tokentype != TokenType.Comma) { break; } getNextToken(); } expect(\"Print\", TokenType.RightParen); expect(\"Print\", TokenType.Semicolon); } else if (this.token.tokentype == TokenType.Semicolon) { getNextToken(); } else if (this.token.tokentype == TokenType.Identifier) { v = Node.make_leaf(NodeType.nd_Ident, this.token.value); getNextToken(); expect(\"assign\", TokenType.Op_assign); e = expr(0); t = Node.make_node(NodeType.nd_Assign, v, e); expect(\"assign\", TokenType.Semicolon); } else if (this.token.tokentype == TokenType.Keyword_while) { getNextToken(); e = paren_expr(); s = stmt(); t = Node.make_node(NodeType.nd_While, e, s); } else if (this.token.tokentype == TokenType.LeftBrace) { getNextToken(); while (this.token.tokentype != TokenType.RightBrace && this.token.tokentype != TokenType.End_of_input) { t = Node.make_node(NodeType.nd_Sequence, t, stmt()); } expect(\"LBrace\", TokenType.RightBrace); } else if (this.token.tokentype == TokenType.End_of_input) { } else { error(this.token.line, this.token.pos, \"Expecting start of statement, found: \" + this.token.tokentype); } return t; } Node parse() { Node t = null; getNextToken(); while (this.token.tokentype != TokenType.End_of_input) { t = Node.make_node(NodeType.nd_Sequence, t, stmt()); } return t; } void printAST(Node t) { if (t == null) { System.out.println(\";\"); } else { System.out.printf(\"%-14s\", t.nt); if (t.nt == NodeType.nd_Ident || t.nt == NodeType.nd_Integer || t.nt == NodeType.nd_String) { System.out.println(\" \" + t.value); } else { System.out.println(); printAST(t.left); printAST(t.right); } } } }"}]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/Joy-master/app/src/main/java/com/jude/joy/app/APP.java","main_file_content":"package com.jude.joy.app; import android.app.Application; import com.jude.beam.Beam; import com.jude.joy.BuildConfig; import com.jude.utils.JUtils; public class APP extends Application { @Override public void onCreate() { super.onCreate(); JUtils.initialize(this); JUtils.setDebug(BuildConfig.DEBUG, \"JoyLog\"); Beam.init(this); } }","dependencies":[]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/Joy-master/app/src/main/java/com/jude/joy/config/API.java","main_file_content":"package com.jude.joy.config; public class API { public static final class URL{ public static final String JOY_TEXT = \"http: public static final String JOY_IMAGE = \"http: } public static class KEY { public static final String STATUS = \"showapi_res_code\"; public static final String INFO = \"showapi_res_error\"; public static final String DATA = \"showapi_res_body\"; } public static class CODE { public static final int SUCCEED = 0; } }","dependencies":[]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/Joy-master/app/src/main/java/com/jude/joy/utils/TextFilter.java","main_file_content":"package com.jude.joy.utils; import com.jude.utils.JUtils; public class TextFilter { public static String[] FilterStrings = { \"</p>\", \"<p>\", \"&nbsp;\", \"&lt;/pstyle=\\\\\\\"text-indent:2em;text-align:left;\\\\\\\"&gt;\" }; public static String filter(String original){ JUtils.Log(\"index\"+original.indexOf(FilterStrings[1])); for (String filterString : FilterStrings) { original = original.replace(filterString, \"\"); } return original; } }","dependencies":[]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/Joy-master/app/src/main/java/com/jude/joy/utils/RecentDateFormat.java","main_file_content":"package com.jude.joy.utils; import com.jude.utils.JTimeTransform; public class RecentDateFormat implements JTimeTransform.DateFormat{ private String lastFormat; public RecentDateFormat() { this(\"MM-dd\"); } public RecentDateFormat(String lastFormat) { this.lastFormat = lastFormat; } @Override public String format(JTimeTransform date, long delta) { if (delta>0){ if (delta / JTimeTransform.SECOND < 1){ return delta +\"秒前\"; }else if (delta / JTimeTransform.HOUR < 1){ return delta / JTimeTransform.SECOND+\"分钟前\"; }else if (delta / JTimeTransform.DAY < 2 && new JTimeTransform().getDay() == date.getDay()){ return delta / JTimeTransform.HOUR+\"小时前\"; }else if (delta / JTimeTransform.DAY < 3 && new JTimeTransform().getDay() == new JTimeTransform(date.getTimestamp()+JTimeTransform.DAY).getDay()){ return \"昨天\"+date.toString(\"HH:mm\"); }else if (delta / JTimeTransform.DAY < 4 && new JTimeTransform().getDay() == new JTimeTransform(date.getTimestamp()+JTimeTransform.DAY*2).getDay()){ return \"前天\"+date.toString(\"HH:mm\"); }else{ return date.toString(lastFormat); } }else{ delta = -delta; if (delta / JTimeTransform.SECOND < 1){ return delta +\"秒后\"; }else if (delta / JTimeTransform.HOUR < 1){ return delta / JTimeTransform.SECOND+\"分钟后\"; }else if (delta / JTimeTransform.DAY > -2 && new JTimeTransform().getDay() == date.getDay()){ return delta / JTimeTransform.HOUR+\"小时后\"; }else if (delta / JTimeTransform.DAY > -3 && new JTimeTransform().getDay() == new JTimeTransform(date.getTimestamp()-JTimeTransform.DAY).getDay()){ return \"明天\"+date.toString(\"HH:mm\"); }else if (delta / JTimeTransform.DAY > -4 && new JTimeTransform().getDay() == new JTimeTransform(date.getTimestamp()-JTimeTransform.DAY*2).getDay()){ return \"后天\"+date.toString(\"HH:mm\"); }else{ return date.toString(lastFormat); } } } }","dependencies":[]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/Joy-master/app/src/main/java/com/jude/joy/utils/ImageFilter.java","main_file_content":"package com.jude.joy.utils; public class ImageFilter { public static String filter(String original){ return original.split(\"\\\"\")[0]; } }","dependencies":[]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/Joy-master/app/src/main/java/com/jude/joy/model/bean/ImageJoyPage.java","main_file_content":"package com.jude.joy.model.bean; import java.util.List; public class ImageJoyPage { private int allNum; private int allPage; public int getAllNum() { return allNum; } public void setAllNum(int allNum) { this.allNum = allNum; } public int getAllPage() { return allPage; } public void setAllPage(int allPage) { this.allPage = allPage; } public List<ImageJoy> getContentlist() { return contentlist; } public void setContentlist(List<ImageJoy> contentlist) { this.contentlist = contentlist; } private List<ImageJoy> contentlist; }","dependencies":[{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/bean/ImageJoy.java","file_content":"package com.jude.joy.model.bean; public class ImageJoy { private String ct; private String img; private String title; private int type; public void setCt(String ct) { this.ct = ct; } public void setImg(String img) { this.img = img; } public void setTitle(String title) { this.title = title; } public void setType(int type) { this.type = type; } public String getCt() { return ct; } public String getImg() { return img; } public String getTitle() { return title; } public int getType() { return type; } }"}]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/Joy-master/app/src/main/java/com/jude/joy/model/bean/TextJoy.java","main_file_content":"package com.jude.joy.model.bean; public class TextJoy { private String ct; private String text; private String title; private int type; public void setCt(String ct) { this.ct = ct; } public void setText(String text) { this.text = text; } public void setTitle(String title) { this.title = title; } public void setType(int type) { this.type = type; } public String getCt() { return ct; } public String getText() { return text; } public String getTitle() { return title; } public int getType() { return type; } }","dependencies":[]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/Joy-master/app/src/main/java/com/jude/joy/model/bean/TextJoyPage.java","main_file_content":"package com.jude.joy.model.bean; import java.util.List; public class TextJoyPage { private int allNum; private int allPage; private List<TextJoy> contentlist; public int getAllNum() { return allNum; } public void setAllNum(int allNum) { this.allNum = allNum; } public int getAllPage() { return allPage; } public void setAllPage(int allPage) { this.allPage = allPage; } public List<TextJoy> getContentlist() { return contentlist; } public void setContentlist(List<TextJoy> contentlist) { this.contentlist = contentlist; } }","dependencies":[{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/bean/TextJoy.java","file_content":"package com.jude.joy.model.bean; public class TextJoy { private String ct; private String text; private String title; private int type; public void setCt(String ct) { this.ct = ct; } public void setText(String text) { this.text = text; } public void setTitle(String title) { this.title = title; } public void setType(int type) { this.type = type; } public String getCt() { return ct; } public String getText() { return text; } public String getTitle() { return title; } public int getType() { return type; } }"}]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/Joy-master/app/src/main/java/com/jude/joy/model/bean/ImageJoy.java","main_file_content":"package com.jude.joy.model.bean; public class ImageJoy { private String ct; private String img; private String title; private int type; public void setCt(String ct) { this.ct = ct; } public void setImg(String img) { this.img = img; } public void setTitle(String title) { this.title = title; } public void setType(int type) { this.type = type; } public String getCt() { return ct; } public String getImg() { return img; } public String getTitle() { return title; } public int getType() { return type; } }","dependencies":[]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/Joy-master/app/src/main/java/com/jude/joy/model/server/ErrorTransform.java","main_file_content":"package com.jude.joy.model.server; import com.jude.utils.JUtils; import retrofit2.adapter.rxjava.HttpException; import rx.Observable; import rx.functions.Action1; public class ErrorTransform<T> implements Observable.Transformer<T, T> { private Action1<Throwable> handler; public ErrorTransform(Action1<Throwable> handler) { this.handler = handler; } @Override public Observable<T> call(Observable<T> tObservable) { return tObservable.doOnError(handler) .onErrorResumeNext(Observable.empty()); } public static class ServerErrorHandler implements Action1<Throwable> { private static final int W_TOAST = 1; public static final ServerErrorHandler NONE = new ServerErrorHandler(0); public static final ServerErrorHandler TOAST = new ServerErrorHandler(1<< W_TOAST); private int kind; public ServerErrorHandler(int kind) { this.kind = kind; } private boolean has(int index){ return (kind & 1<<index) >0; } @Override public void call(Throwable throwable) { JUtils.Log(\"Error:\"+throwable.getClass().getName()+\":\"+throwable.getMessage()); String errorString; if (throwable instanceof HttpException) { HttpException err = (HttpException) throwable; if (err.code() >= 400 && err.code() < 500){ errorString = \"请求错误:\"+err.message(); }else if (err.code() >= 500){ errorString = \"服务器错误\"; }else { errorString = \"请求错误:\"+err.code(); } }else { errorString = \"网络错误\"; JUtils.Log(throwable.getMessage()); } if (has(W_TOAST)) JUtils.Toast(errorString); } } }","dependencies":[]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/Joy-master/app/src/main/java/com/jude/joy/model/server/ServiceModelComponent.java","main_file_content":"package com.jude.joy.model.server; import com.jude.joy.module.image.ImageJoyPresenter; import com.jude.joy.module.text.TextJoyPresenter; import javax.inject.Singleton; import dagger.Component; @Singleton @Component(modules = {ServiceAPIModule.class}) public interface ServiceModelComponent { void inject(TextJoyPresenter model); void inject(ImageJoyPresenter model); }","dependencies":[{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/server/ServiceAPIModule.java","file_content":"package com.jude.joy.model.server; import com.google.gson.GsonBuilder; import javax.inject.Singleton; import dagger.Module; import dagger.Provides; import okhttp3.OkHttpClient; import okhttp3.logging.HttpLoggingInterceptor; import retrofit2.Retrofit; import retrofit2.adapter.rxjava.RxJavaCallAdapterFactory; import retrofit2.converter.gson.GsonConverterFactory; @Module public class ServiceAPIModule { @Singleton @Provides ServiceAPI provideServiceAPI(OkHttpClient okHttpClient) { Retrofit retrofit = new Retrofit.Builder() .addConverterFactory(GsonConverterFactory.create(new GsonBuilder().setLenient().create())) .baseUrl(ServiceAPI.BASEURL) .addCallAdapterFactory(RxJavaCallAdapterFactory.create()) .client(okHttpClient) .build(); return retrofit.create(ServiceAPI.class); } @Singleton @Provides OkHttpClient provideOkHttpClient() { return new OkHttpClient.Builder() .addInterceptor(new HttpLoggingInterceptor().setLevel(HttpLoggingInterceptor.Level.BODY)) .addNetworkInterceptor(new HeaderInterceptors()) .addNetworkInterceptor(new RestInterceptors()) .build(); } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/module/image/ImageJoyPresenter.java","file_content":"package com.jude.joy.module.image; import android.content.Intent; import android.os.Bundle; import android.support.annotation.NonNull; import com.bumptech.glide.Glide; import com.bumptech.glide.load.engine.DiskCacheStrategy; import com.jude.beam.expansion.list.BeamListFragmentPresenter; import com.jude.easyrecyclerview.adapter.RecyclerArrayAdapter; import com.jude.joy.model.bean.ImageJoy; import com.jude.joy.model.bean.ImageJoyPage; import com.jude.joy.model.server.DaggerServiceModelComponent; import com.jude.joy.model.server.SchedulerTransform; import com.jude.joy.model.server.ServiceAPI; import java.util.ArrayList; import javax.inject.Inject; public class ImageJoyPresenter extends BeamListFragmentPresenter<ImageJoyFragment,ImageJoy> { @Inject ServiceAPI mServer; @Override protected void onCreate(ImageJoyFragment view, Bundle savedState) { super.onCreate(view, savedState); DaggerServiceModelComponent.builder().build().inject(this); onRefresh(); } @Override protected void onCreateView(@NonNull ImageJoyFragment view) { super.onCreateView(view); getAdapter().setOnItemClickListener(new RecyclerArrayAdapter.OnItemClickListener() { @Override public void onItemClick(int position) { ArrayList<String> list = new ArrayList<String>(); for (ImageJoy imageJoy : getAdapter().getAllData()) { list.add(imageJoy.getImg()); } Intent i = new Intent(getView().getContext(),PictureActivity.class); i.putExtra(PictureActivity.KEY_PICTURES,list); i.putExtra(PictureActivity.KEY_INDEX,position); getView().startActivity(i); } }); } @Override public void onRefresh() { mServer.getImageJoyList(1) .compose(new SchedulerTransform<>()) .map(ImageJoyPage::getContentlist) .doAfterTerminate(()-> setCurPage(2)) .doOnNext(list->{ for (ImageJoy imageJoy : list) { String url = imageJoy.getImg(); Glide.with(getView()).load(url) .diskCacheStrategy(DiskCacheStrategy.SOURCE) .preload(); } }) .unsafeSubscribe(getRefreshSubscriber()); } @Override public void onLoadMore() { mServer.getImageJoyList(getCurPage()) .compose(new SchedulerTransform<>()) .map(ImageJoyPage::getContentlist) .doOnNext(list->{ for (ImageJoy imageJoy : list) { String url = imageJoy.getImg(); Glide.with(getView()).load(url) .diskCacheStrategy(DiskCacheStrategy.SOURCE) .preload(); } }) .unsafeSubscribe(getMoreSubscriber()); } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/module/text/TextJoyPresenter.java","file_content":"package com.jude.joy.module.text; import android.os.Bundle; import com.jude.beam.expansion.list.BeamListFragmentPresenter; import com.jude.joy.model.bean.TextJoy; import com.jude.joy.model.bean.TextJoyPage; import com.jude.joy.model.server.DaggerServiceModelComponent; import com.jude.joy.model.server.SchedulerTransform; import com.jude.joy.model.server.ServiceAPI; import javax.inject.Inject; public class TextJoyPresenter extends BeamListFragmentPresenter<TextJoyFragment,TextJoy> { @Inject ServiceAPI mServer; @Override protected void onCreate(TextJoyFragment view, Bundle savedState) { super.onCreate(view, savedState); DaggerServiceModelComponent.builder().build().inject(this); onRefresh(); } @Override public void onRefresh() { mServer.getTextJoyList(1) .compose(new SchedulerTransform<>()) .map(TextJoyPage::getContentlist) .doAfterTerminate(()-> setCurPage(2)) .unsafeSubscribe(getRefreshSubscriber()); } @Override public void onLoadMore() { mServer.getTextJoyList(getCurPage()) .compose(new SchedulerTransform<>()) .map(TextJoyPage::getContentlist) .unsafeSubscribe(getMoreSubscriber()); } }"}]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/Joy-master/app/src/main/java/com/jude/joy/model/server/ServiceAPI.java","main_file_content":"package com.jude.joy.model.server; import com.jude.joy.model.bean.ImageJoyPage; import com.jude.joy.model.bean.TextJoyPage; import retrofit2.http.GET; import retrofit2.http.Query; import rx.Observable; public interface ServiceAPI { String BASEURL = \"http: @GET(\"showapi_joke/joke_text\") Observable<TextJoyPage> getTextJoyList(@Query(\"page\")int page); @GET(\"showapi_joke/joke_pic\") Observable<ImageJoyPage> getImageJoyList(@Query(\"page\")int page); }","dependencies":[{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/bean/ImageJoyPage.java","file_content":"package com.jude.joy.model.bean; import java.util.List; public class ImageJoyPage { private int allNum; private int allPage; public int getAllNum() { return allNum; } public void setAllNum(int allNum) { this.allNum = allNum; } public int getAllPage() { return allPage; } public void setAllPage(int allPage) { this.allPage = allPage; } public List<ImageJoy> getContentlist() { return contentlist; } public void setContentlist(List<ImageJoy> contentlist) { this.contentlist = contentlist; } private List<ImageJoy> contentlist; }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/bean/TextJoyPage.java","file_content":"package com.jude.joy.model.bean; import java.util.List; public class TextJoyPage { private int allNum; private int allPage; private List<TextJoy> contentlist; public int getAllNum() { return allNum; } public void setAllNum(int allNum) { this.allNum = allNum; } public int getAllPage() { return allPage; } public void setAllPage(int allPage) { this.allPage = allPage; } public List<TextJoy> getContentlist() { return contentlist; } public void setContentlist(List<TextJoy> contentlist) { this.contentlist = contentlist; } }"}]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/Joy-master/app/src/main/java/com/jude/joy/model/server/RestInterceptors.java","main_file_content":"package com.jude.joy.model.server; import com.jude.utils.JUtils; import org.json.JSONException; import org.json.JSONObject; import java.io.IOException; import java.util.Iterator; import java.util.ServiceConfigurationError; import okhttp3.Interceptor; import okhttp3.MediaType; import okhttp3.Request; import okhttp3.Response; import okhttp3.ResponseBody; public class RestInterceptors implements Interceptor { private static final String TAG = \"HeaderInterceptors\"; @Override public Response intercept(Chain chain) throws IOException { Request request = chain.request(); Response originalResponse = chain.proceed(request); MediaType contentType = originalResponse.body().contentType(); String originalContent = originalResponse.body().string(); JUtils.Log(\"RestInterceptors\",request.url().toString()+\":\\n\"+originalContent); int code = 400; String errorMessage = \"\"; String body = \"null\"; JSONObject wrapper = null; try { wrapper = new JSONObject(originalContent); Iterator<String> iterator = wrapper.keys(); while (iterator.hasNext()){ String key = iterator.next(); switch (key){ case \"showapi_res_code\": code = wrapper.getInt(key); if (code == 0)code=200; else code=400; break; case \"showapi_res_error\": errorMessage = wrapper.getString(key); break; default: body = wrapper.getString(key); break; } } } catch (JSONException e) { throw new ServiceConfigurationError(\"服务器错误：\"+e.getLocalizedMessage()); } return originalResponse.newBuilder() .code(code) .message(errorMessage) .body(ResponseBody.create(contentType, body)) .build(); } }","dependencies":[]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/Joy-master/app/src/main/java/com/jude/joy/model/server/ServiceAPIModule.java","main_file_content":"package com.jude.joy.model.server; import com.google.gson.GsonBuilder; import javax.inject.Singleton; import dagger.Module; import dagger.Provides; import okhttp3.OkHttpClient; import okhttp3.logging.HttpLoggingInterceptor; import retrofit2.Retrofit; import retrofit2.adapter.rxjava.RxJavaCallAdapterFactory; import retrofit2.converter.gson.GsonConverterFactory; @Module public class ServiceAPIModule { @Singleton @Provides ServiceAPI provideServiceAPI(OkHttpClient okHttpClient) { Retrofit retrofit = new Retrofit.Builder() .addConverterFactory(GsonConverterFactory.create(new GsonBuilder().setLenient().create())) .baseUrl(ServiceAPI.BASEURL) .addCallAdapterFactory(RxJavaCallAdapterFactory.create()) .client(okHttpClient) .build(); return retrofit.create(ServiceAPI.class); } @Singleton @Provides OkHttpClient provideOkHttpClient() { return new OkHttpClient.Builder() .addInterceptor(new HttpLoggingInterceptor().setLevel(HttpLoggingInterceptor.Level.BODY)) .addNetworkInterceptor(new HeaderInterceptors()) .addNetworkInterceptor(new RestInterceptors()) .build(); } }","dependencies":[{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/server/HeaderInterceptors.java","file_content":"package com.jude.joy.model.server; import java.io.IOException; import okhttp3.Interceptor; import okhttp3.Request; import okhttp3.Response; public class HeaderInterceptors implements Interceptor { @Override public Response intercept(Chain chain) throws IOException { Request request = chain.request(); Request.Builder builder = request.newBuilder(); builder.addHeader(\"apikey\", \"c676a989ffe83f89db5265482ef3222d\"); return chain.proceed(builder.build()); } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/server/RestInterceptors.java","file_content":"package com.jude.joy.model.server; import com.jude.utils.JUtils; import org.json.JSONException; import org.json.JSONObject; import java.io.IOException; import java.util.Iterator; import java.util.ServiceConfigurationError; import okhttp3.Interceptor; import okhttp3.MediaType; import okhttp3.Request; import okhttp3.Response; import okhttp3.ResponseBody; public class RestInterceptors implements Interceptor { private static final String TAG = \"HeaderInterceptors\"; @Override public Response intercept(Chain chain) throws IOException { Request request = chain.request(); Response originalResponse = chain.proceed(request); MediaType contentType = originalResponse.body().contentType(); String originalContent = originalResponse.body().string(); JUtils.Log(\"RestInterceptors\",request.url().toString()+\":\\n\"+originalContent); int code = 400; String errorMessage = \"\"; String body = \"null\"; JSONObject wrapper = null; try { wrapper = new JSONObject(originalContent); Iterator<String> iterator = wrapper.keys(); while (iterator.hasNext()){ String key = iterator.next(); switch (key){ case \"showapi_res_code\": code = wrapper.getInt(key); if (code == 0)code=200; else code=400; break; case \"showapi_res_error\": errorMessage = wrapper.getString(key); break; default: body = wrapper.getString(key); break; } } } catch (JSONException e) { throw new ServiceConfigurationError(\"服务器错误：\"+e.getLocalizedMessage()); } return originalResponse.newBuilder() .code(code) .message(errorMessage) .body(ResponseBody.create(contentType, body)) .build(); } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/server/ServiceAPI.java","file_content":"package com.jude.joy.model.server; import com.jude.joy.model.bean.ImageJoyPage; import com.jude.joy.model.bean.TextJoyPage; import retrofit2.http.GET; import retrofit2.http.Query; import rx.Observable; public interface ServiceAPI { String BASEURL = \"http: @GET(\"showapi_joke/joke_text\") Observable<TextJoyPage> getTextJoyList(@Query(\"page\")int page); @GET(\"showapi_joke/joke_pic\") Observable<ImageJoyPage> getImageJoyList(@Query(\"page\")int page); }"}]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/Joy-master/app/src/main/java/com/jude/joy/model/server/SchedulerTransform.java","main_file_content":"package com.jude.joy.model.server; import rx.Observable; import rx.android.schedulers.AndroidSchedulers; import rx.schedulers.Schedulers; public class SchedulerTransform<T> implements Observable.Transformer<T, T> { @Override public Observable<T> call(Observable<T> tObservable) { return tObservable .subscribeOn(Schedulers.io()) .observeOn(AndroidSchedulers.mainThread()) .unsubscribeOn(Schedulers.io()); } }","dependencies":[]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/Joy-master/app/src/main/java/com/jude/joy/model/server/HeaderInterceptors.java","main_file_content":"package com.jude.joy.model.server; import java.io.IOException; import okhttp3.Interceptor; import okhttp3.Request; import okhttp3.Response; public class HeaderInterceptors implements Interceptor { @Override public Response intercept(Chain chain) throws IOException { Request request = chain.request(); Request.Builder builder = request.newBuilder(); builder.addHeader(\"apikey\", \"c676a989ffe83f89db5265482ef3222d\"); return chain.proceed(builder.build()); } }","dependencies":[]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/Joy-master/app/src/main/java/com/jude/joy/module/image/ImageJoyFragment.java","main_file_content":"package com.jude.joy.module.image; import android.view.ViewGroup; import com.jude.beam.bijection.RequiresPresenter; import com.jude.beam.expansion.list.BeamListFragment; import com.jude.beam.expansion.list.ListConfig; import com.jude.easyrecyclerview.adapter.BaseViewHolder; import com.jude.joy.model.bean.ImageJoy; @RequiresPresenter(ImageJoyPresenter.class) public class ImageJoyFragment extends BeamListFragment<ImageJoyPresenter,ImageJoy> { @Override public BaseViewHolder getViewHolder(ViewGroup viewGroup, int i) { return new ImageJoyVH(viewGroup); } @Override public ListConfig getConfig() { return super.getConfig() .setLoadmoreAble(true) .setRefreshAble(true) .setNoMoreAble(true) .setErrorAble(true) .setErrorTouchToResumeAble(true); } }","dependencies":[{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/bean/ImageJoy.java","file_content":"package com.jude.joy.model.bean; public class ImageJoy { private String ct; private String img; private String title; private int type; public void setCt(String ct) { this.ct = ct; } public void setImg(String img) { this.img = img; } public void setTitle(String title) { this.title = title; } public void setType(int type) { this.type = type; } public String getCt() { return ct; } public String getImg() { return img; } public String getTitle() { return title; } public int getType() { return type; } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/module/image/ImageJoyPresenter.java","file_content":"package com.jude.joy.module.image; import android.content.Intent; import android.os.Bundle; import android.support.annotation.NonNull; import com.bumptech.glide.Glide; import com.bumptech.glide.load.engine.DiskCacheStrategy; import com.jude.beam.expansion.list.BeamListFragmentPresenter; import com.jude.easyrecyclerview.adapter.RecyclerArrayAdapter; import com.jude.joy.model.bean.ImageJoy; import com.jude.joy.model.bean.ImageJoyPage; import com.jude.joy.model.server.DaggerServiceModelComponent; import com.jude.joy.model.server.SchedulerTransform; import com.jude.joy.model.server.ServiceAPI; import java.util.ArrayList; import javax.inject.Inject; public class ImageJoyPresenter extends BeamListFragmentPresenter<ImageJoyFragment,ImageJoy> { @Inject ServiceAPI mServer; @Override protected void onCreate(ImageJoyFragment view, Bundle savedState) { super.onCreate(view, savedState); DaggerServiceModelComponent.builder().build().inject(this); onRefresh(); } @Override protected void onCreateView(@NonNull ImageJoyFragment view) { super.onCreateView(view); getAdapter().setOnItemClickListener(new RecyclerArrayAdapter.OnItemClickListener() { @Override public void onItemClick(int position) { ArrayList<String> list = new ArrayList<String>(); for (ImageJoy imageJoy : getAdapter().getAllData()) { list.add(imageJoy.getImg()); } Intent i = new Intent(getView().getContext(),PictureActivity.class); i.putExtra(PictureActivity.KEY_PICTURES,list); i.putExtra(PictureActivity.KEY_INDEX,position); getView().startActivity(i); } }); } @Override public void onRefresh() { mServer.getImageJoyList(1) .compose(new SchedulerTransform<>()) .map(ImageJoyPage::getContentlist) .doAfterTerminate(()-> setCurPage(2)) .doOnNext(list->{ for (ImageJoy imageJoy : list) { String url = imageJoy.getImg(); Glide.with(getView()).load(url) .diskCacheStrategy(DiskCacheStrategy.SOURCE) .preload(); } }) .unsafeSubscribe(getRefreshSubscriber()); } @Override public void onLoadMore() { mServer.getImageJoyList(getCurPage()) .compose(new SchedulerTransform<>()) .map(ImageJoyPage::getContentlist) .doOnNext(list->{ for (ImageJoy imageJoy : list) { String url = imageJoy.getImg(); Glide.with(getView()).load(url) .diskCacheStrategy(DiskCacheStrategy.SOURCE) .preload(); } }) .unsafeSubscribe(getMoreSubscriber()); } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/module/image/ImageJoyVH.java","file_content":"package com.jude.joy.module.image; import android.view.ViewGroup; import android.widget.ImageView; import android.widget.TextView; import com.bumptech.glide.Glide; import com.jude.easyrecyclerview.adapter.BaseViewHolder; import com.jude.joy.R; import com.jude.joy.model.bean.ImageJoy; import com.jude.joy.utils.ImageFilter; import com.jude.joy.utils.RecentDateFormat; import com.jude.utils.JTimeTransform; import butterknife.BindView; import butterknife.ButterKnife; public class ImageJoyVH extends BaseViewHolder<ImageJoy> { @BindView(R.id.title) TextView title; @BindView(R.id.image) ImageView image; @BindView(R.id.time) TextView time; public ImageJoyVH(ViewGroup parent) { super(parent, R.layout.item_joy_image); ButterKnife.bind(this, itemView); } @Override public void setData(ImageJoy data) { title.setText(data.getTitle()); Glide.clear(image); Glide.with(getContext()) .load(ImageFilter.filter(data.getImg())) .into(image); time.setText(new JTimeTransform().parse(\"yyyy-MM-dd hh:mm:ss\",data.getCt()).toString(new RecentDateFormat())); } }"}]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/Joy-master/app/src/main/java/com/jude/joy/module/image/PictureActivity.java","main_file_content":"package com.jude.joy.module.image; import android.os.Bundle; import android.support.v4.app.Fragment; import android.support.v4.app.FragmentManager; import android.support.v4.app.FragmentStatePagerAdapter; import android.support.v4.view.ViewPager; import android.view.MotionEvent; import android.view.ViewGroup; import com.jude.beam.expansion.BeamBaseActivity; import com.jude.joy.R; import java.util.ArrayList; public class PictureActivity extends BeamBaseActivity { public static String KEY_PICTURES = \"pictures\"; public static String KEY_PICTURE = \"picture\"; public static String KEY_INDEX = \"index\"; private ViewPager mViewPager; private PictureFragmentAdapter mAdapter; private ArrayList<String> mPictures; @Override public void onCreate(Bundle savedInstanceState){ super.onCreate(savedInstanceState); mViewPager = new ViewPager(this); mViewPager.setId(R.id.about); mViewPager.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT)); setContentView(mViewPager); mAdapter = new PictureFragmentAdapter(getSupportFragmentManager()); mViewPager.setAdapter(mAdapter); mPictures = getIntent().getStringArrayListExtra(KEY_PICTURES); if (mPictures == null) mPictures = new ArrayList<>(); String picture = getIntent().getStringExtra(KEY_PICTURE); if (picture!=null) mPictures.add(picture); int index = getIntent().getIntExtra(KEY_INDEX,0); mAdapter.setPictures(mPictures); mViewPager.setCurrentItem(index); } @Override public boolean dispatchTouchEvent(MotionEvent ev) { return super.dispatchTouchEvent(ev); } static class PictureFragmentAdapter extends FragmentStatePagerAdapter { ArrayList<String> mPictures; public PictureFragmentAdapter(FragmentManager fm) { super(fm); } public void setPictures(ArrayList<String> pictures){ mPictures = pictures; notifyDataSetChanged(); } @Override public Fragment getItem(int position) { Fragment fragment = new PictureFragment(); Bundle bundle = new Bundle(); bundle.putString(\"picture\",mPictures.get(position)); fragment.setArguments(bundle); return fragment; } @Override public int getCount() { return mPictures==null?0:mPictures.size(); } } }","dependencies":[{"file_path":"Joy-master/app/src/main/java/com/jude/joy/module/image/PictureFragment.java","file_content":"package com.jude.joy.module.image; import android.os.Bundle; import android.support.annotation.Nullable; import android.support.v4.app.Fragment; import android.support.v7.widget.Toolbar; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.FrameLayout; import com.bumptech.glide.Glide; import com.jude.joy.R; import com.jude.joy.utils.ImageFilter; import com.jude.utils.JUtils; import com.pnikosis.materialishprogress.ProgressWheel; import butterknife.BindView; import butterknife.ButterKnife; import uk.co.senab.photoview.PhotoView; public class PictureFragment extends Fragment { String mPicture; @BindView(R.id.wheel) ProgressWheel wheel; @BindView(R.id.photoview) PhotoView photoview; @BindView(R.id.container) FrameLayout container; @BindView(R.id.toolbar) Toolbar toolbar; @Override public void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); mPicture = getArguments().getString(\"picture\"); JUtils.Log(\"PictureFragment onCreate \" + mPicture); } @Nullable @Override public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) { View view = inflater.inflate(R.layout.fragment_picture, container, false); ButterKnife.bind(this, view); return view; } @Override public void onActivityCreated(@Nullable Bundle savedInstanceState) { super.onActivityCreated(savedInstanceState); Glide.with(getContext()) .load(ImageFilter.filter(mPicture)) .into(photoview); } }"}]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/Joy-master/app/src/main/java/com/jude/joy/module/image/PictureFragment.java","main_file_content":"package com.jude.joy.module.image; import android.os.Bundle; import android.support.annotation.Nullable; import android.support.v4.app.Fragment; import android.support.v7.widget.Toolbar; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.FrameLayout; import com.bumptech.glide.Glide; import com.jude.joy.R; import com.jude.joy.utils.ImageFilter; import com.jude.utils.JUtils; import com.pnikosis.materialishprogress.ProgressWheel; import butterknife.BindView; import butterknife.ButterKnife; import uk.co.senab.photoview.PhotoView; public class PictureFragment extends Fragment { String mPicture; @BindView(R.id.wheel) ProgressWheel wheel; @BindView(R.id.photoview) PhotoView photoview; @BindView(R.id.container) FrameLayout container; @BindView(R.id.toolbar) Toolbar toolbar; @Override public void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); mPicture = getArguments().getString(\"picture\"); JUtils.Log(\"PictureFragment onCreate \" + mPicture); } @Nullable @Override public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) { View view = inflater.inflate(R.layout.fragment_picture, container, false); ButterKnife.bind(this, view); return view; } @Override public void onActivityCreated(@Nullable Bundle savedInstanceState) { super.onActivityCreated(savedInstanceState); Glide.with(getContext()) .load(ImageFilter.filter(mPicture)) .into(photoview); } }","dependencies":[{"file_path":"Joy-master/app/src/main/java/com/jude/joy/utils/ImageFilter.java","file_content":"package com.jude.joy.utils; public class ImageFilter { public static String filter(String original){ return original.split(\"\\\"\")[0]; } }"}]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/Joy-master/app/src/main/java/com/jude/joy/module/image/ImageJoyPresenter.java","main_file_content":"package com.jude.joy.module.image; import android.content.Intent; import android.os.Bundle; import android.support.annotation.NonNull; import com.bumptech.glide.Glide; import com.bumptech.glide.load.engine.DiskCacheStrategy; import com.jude.beam.expansion.list.BeamListFragmentPresenter; import com.jude.easyrecyclerview.adapter.RecyclerArrayAdapter; import com.jude.joy.model.bean.ImageJoy; import com.jude.joy.model.bean.ImageJoyPage; import com.jude.joy.model.server.DaggerServiceModelComponent; import com.jude.joy.model.server.SchedulerTransform; import com.jude.joy.model.server.ServiceAPI; import java.util.ArrayList; import javax.inject.Inject; public class ImageJoyPresenter extends BeamListFragmentPresenter<ImageJoyFragment,ImageJoy> { @Inject ServiceAPI mServer; @Override protected void onCreate(ImageJoyFragment view, Bundle savedState) { super.onCreate(view, savedState); DaggerServiceModelComponent.builder().build().inject(this); onRefresh(); } @Override protected void onCreateView(@NonNull ImageJoyFragment view) { super.onCreateView(view); getAdapter().setOnItemClickListener(new RecyclerArrayAdapter.OnItemClickListener() { @Override public void onItemClick(int position) { ArrayList<String> list = new ArrayList<String>(); for (ImageJoy imageJoy : getAdapter().getAllData()) { list.add(imageJoy.getImg()); } Intent i = new Intent(getView().getContext(),PictureActivity.class); i.putExtra(PictureActivity.KEY_PICTURES,list); i.putExtra(PictureActivity.KEY_INDEX,position); getView().startActivity(i); } }); } @Override public void onRefresh() { mServer.getImageJoyList(1) .compose(new SchedulerTransform<>()) .map(ImageJoyPage::getContentlist) .doAfterTerminate(()-> setCurPage(2)) .doOnNext(list->{ for (ImageJoy imageJoy : list) { String url = imageJoy.getImg(); Glide.with(getView()).load(url) .diskCacheStrategy(DiskCacheStrategy.SOURCE) .preload(); } }) .unsafeSubscribe(getRefreshSubscriber()); } @Override public void onLoadMore() { mServer.getImageJoyList(getCurPage()) .compose(new SchedulerTransform<>()) .map(ImageJoyPage::getContentlist) .doOnNext(list->{ for (ImageJoy imageJoy : list) { String url = imageJoy.getImg(); Glide.with(getView()).load(url) .diskCacheStrategy(DiskCacheStrategy.SOURCE) .preload(); } }) .unsafeSubscribe(getMoreSubscriber()); } }","dependencies":[{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/bean/ImageJoy.java","file_content":"package com.jude.joy.model.bean; public class ImageJoy { private String ct; private String img; private String title; private int type; public void setCt(String ct) { this.ct = ct; } public void setImg(String img) { this.img = img; } public void setTitle(String title) { this.title = title; } public void setType(int type) { this.type = type; } public String getCt() { return ct; } public String getImg() { return img; } public String getTitle() { return title; } public int getType() { return type; } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/bean/ImageJoyPage.java","file_content":"package com.jude.joy.model.bean; import java.util.List; public class ImageJoyPage { private int allNum; private int allPage; public int getAllNum() { return allNum; } public void setAllNum(int allNum) { this.allNum = allNum; } public int getAllPage() { return allPage; } public void setAllPage(int allPage) { this.allPage = allPage; } public List<ImageJoy> getContentlist() { return contentlist; } public void setContentlist(List<ImageJoy> contentlist) { this.contentlist = contentlist; } private List<ImageJoy> contentlist; }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/server/SchedulerTransform.java","file_content":"package com.jude.joy.model.server; import rx.Observable; import rx.android.schedulers.AndroidSchedulers; import rx.schedulers.Schedulers; public class SchedulerTransform<T> implements Observable.Transformer<T, T> { @Override public Observable<T> call(Observable<T> tObservable) { return tObservable .subscribeOn(Schedulers.io()) .observeOn(AndroidSchedulers.mainThread()) .unsubscribeOn(Schedulers.io()); } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/server/ServiceAPI.java","file_content":"package com.jude.joy.model.server; import com.jude.joy.model.bean.ImageJoyPage; import com.jude.joy.model.bean.TextJoyPage; import retrofit2.http.GET; import retrofit2.http.Query; import rx.Observable; public interface ServiceAPI { String BASEURL = \"http: @GET(\"showapi_joke/joke_text\") Observable<TextJoyPage> getTextJoyList(@Query(\"page\")int page); @GET(\"showapi_joke/joke_pic\") Observable<ImageJoyPage> getImageJoyList(@Query(\"page\")int page); }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/module/image/ImageJoyFragment.java","file_content":"package com.jude.joy.module.image; import android.view.ViewGroup; import com.jude.beam.bijection.RequiresPresenter; import com.jude.beam.expansion.list.BeamListFragment; import com.jude.beam.expansion.list.ListConfig; import com.jude.easyrecyclerview.adapter.BaseViewHolder; import com.jude.joy.model.bean.ImageJoy; @RequiresPresenter(ImageJoyPresenter.class) public class ImageJoyFragment extends BeamListFragment<ImageJoyPresenter,ImageJoy> { @Override public BaseViewHolder getViewHolder(ViewGroup viewGroup, int i) { return new ImageJoyVH(viewGroup); } @Override public ListConfig getConfig() { return super.getConfig() .setLoadmoreAble(true) .setRefreshAble(true) .setNoMoreAble(true) .setErrorAble(true) .setErrorTouchToResumeAble(true); } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/module/image/PictureActivity.java","file_content":"package com.jude.joy.module.image; import android.os.Bundle; import android.support.v4.app.Fragment; import android.support.v4.app.FragmentManager; import android.support.v4.app.FragmentStatePagerAdapter; import android.support.v4.view.ViewPager; import android.view.MotionEvent; import android.view.ViewGroup; import com.jude.beam.expansion.BeamBaseActivity; import com.jude.joy.R; import java.util.ArrayList; public class PictureActivity extends BeamBaseActivity { public static String KEY_PICTURES = \"pictures\"; public static String KEY_PICTURE = \"picture\"; public static String KEY_INDEX = \"index\"; private ViewPager mViewPager; private PictureFragmentAdapter mAdapter; private ArrayList<String> mPictures; @Override public void onCreate(Bundle savedInstanceState){ super.onCreate(savedInstanceState); mViewPager = new ViewPager(this); mViewPager.setId(R.id.about); mViewPager.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT)); setContentView(mViewPager); mAdapter = new PictureFragmentAdapter(getSupportFragmentManager()); mViewPager.setAdapter(mAdapter); mPictures = getIntent().getStringArrayListExtra(KEY_PICTURES); if (mPictures == null) mPictures = new ArrayList<>(); String picture = getIntent().getStringExtra(KEY_PICTURE); if (picture!=null) mPictures.add(picture); int index = getIntent().getIntExtra(KEY_INDEX,0); mAdapter.setPictures(mPictures); mViewPager.setCurrentItem(index); } @Override public boolean dispatchTouchEvent(MotionEvent ev) { return super.dispatchTouchEvent(ev); } static class PictureFragmentAdapter extends FragmentStatePagerAdapter { ArrayList<String> mPictures; public PictureFragmentAdapter(FragmentManager fm) { super(fm); } public void setPictures(ArrayList<String> pictures){ mPictures = pictures; notifyDataSetChanged(); } @Override public Fragment getItem(int position) { Fragment fragment = new PictureFragment(); Bundle bundle = new Bundle(); bundle.putString(\"picture\",mPictures.get(position)); fragment.setArguments(bundle); return fragment; } @Override public int getCount() { return mPictures==null?0:mPictures.size(); } } }"}]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/Joy-master/app/src/main/java/com/jude/joy/module/image/ImageJoyVH.java","main_file_content":"package com.jude.joy.module.image; import android.view.ViewGroup; import android.widget.ImageView; import android.widget.TextView; import com.bumptech.glide.Glide; import com.jude.easyrecyclerview.adapter.BaseViewHolder; import com.jude.joy.R; import com.jude.joy.model.bean.ImageJoy; import com.jude.joy.utils.ImageFilter; import com.jude.joy.utils.RecentDateFormat; import com.jude.utils.JTimeTransform; import butterknife.BindView; import butterknife.ButterKnife; public class ImageJoyVH extends BaseViewHolder<ImageJoy> { @BindView(R.id.title) TextView title; @BindView(R.id.image) ImageView image; @BindView(R.id.time) TextView time; public ImageJoyVH(ViewGroup parent) { super(parent, R.layout.item_joy_image); ButterKnife.bind(this, itemView); } @Override public void setData(ImageJoy data) { title.setText(data.getTitle()); Glide.clear(image); Glide.with(getContext()) .load(ImageFilter.filter(data.getImg())) .into(image); time.setText(new JTimeTransform().parse(\"yyyy-MM-dd hh:mm:ss\",data.getCt()).toString(new RecentDateFormat())); } }","dependencies":[{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/bean/ImageJoy.java","file_content":"package com.jude.joy.model.bean; public class ImageJoy { private String ct; private String img; private String title; private int type; public void setCt(String ct) { this.ct = ct; } public void setImg(String img) { this.img = img; } public void setTitle(String title) { this.title = title; } public void setType(int type) { this.type = type; } public String getCt() { return ct; } public String getImg() { return img; } public String getTitle() { return title; } public int getType() { return type; } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/utils/ImageFilter.java","file_content":"package com.jude.joy.utils; public class ImageFilter { public static String filter(String original){ return original.split(\"\\\"\")[0]; } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/utils/RecentDateFormat.java","file_content":"package com.jude.joy.utils; import com.jude.utils.JTimeTransform; public class RecentDateFormat implements JTimeTransform.DateFormat{ private String lastFormat; public RecentDateFormat() { this(\"MM-dd\"); } public RecentDateFormat(String lastFormat) { this.lastFormat = lastFormat; } @Override public String format(JTimeTransform date, long delta) { if (delta>0){ if (delta / JTimeTransform.SECOND < 1){ return delta +\"秒前\"; }else if (delta / JTimeTransform.HOUR < 1){ return delta / JTimeTransform.SECOND+\"分钟前\"; }else if (delta / JTimeTransform.DAY < 2 && new JTimeTransform().getDay() == date.getDay()){ return delta / JTimeTransform.HOUR+\"小时前\"; }else if (delta / JTimeTransform.DAY < 3 && new JTimeTransform().getDay() == new JTimeTransform(date.getTimestamp()+JTimeTransform.DAY).getDay()){ return \"昨天\"+date.toString(\"HH:mm\"); }else if (delta / JTimeTransform.DAY < 4 && new JTimeTransform().getDay() == new JTimeTransform(date.getTimestamp()+JTimeTransform.DAY*2).getDay()){ return \"前天\"+date.toString(\"HH:mm\"); }else{ return date.toString(lastFormat); } }else{ delta = -delta; if (delta / JTimeTransform.SECOND < 1){ return delta +\"秒后\"; }else if (delta / JTimeTransform.HOUR < 1){ return delta / JTimeTransform.SECOND+\"分钟后\"; }else if (delta / JTimeTransform.DAY > -2 && new JTimeTransform().getDay() == date.getDay()){ return delta / JTimeTransform.HOUR+\"小时后\"; }else if (delta / JTimeTransform.DAY > -3 && new JTimeTransform().getDay() == new JTimeTransform(date.getTimestamp()-JTimeTransform.DAY).getDay()){ return \"明天\"+date.toString(\"HH:mm\"); }else if (delta / JTimeTransform.DAY > -4 && new JTimeTransform().getDay() == new JTimeTransform(date.getTimestamp()-JTimeTransform.DAY*2).getDay()){ return \"后天\"+date.toString(\"HH:mm\"); }else{ return date.toString(lastFormat); } } } }"}]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/Joy-master/app/src/main/java/com/jude/joy/module/text/TextJoyFragment.java","main_file_content":"package com.jude.joy.module.text; import android.view.ViewGroup; import com.jude.beam.bijection.RequiresPresenter; import com.jude.beam.expansion.list.BeamListFragment; import com.jude.beam.expansion.list.ListConfig; import com.jude.easyrecyclerview.adapter.BaseViewHolder; import com.jude.joy.model.bean.TextJoy; @RequiresPresenter(TextJoyPresenter.class) public class TextJoyFragment extends BeamListFragment<TextJoyPresenter,TextJoy> { @Override public BaseViewHolder getViewHolder(ViewGroup viewGroup, int i) { return new TextJoyVH(viewGroup); } @Override public ListConfig getConfig() { return super.getConfig() .setLoadmoreAble(true) .setRefreshAble(true) .setNoMoreAble(true) .setErrorAble(true) .setErrorTouchToResumeAble(true); } }","dependencies":[{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/bean/TextJoy.java","file_content":"package com.jude.joy.model.bean; public class TextJoy { private String ct; private String text; private String title; private int type; public void setCt(String ct) { this.ct = ct; } public void setText(String text) { this.text = text; } public void setTitle(String title) { this.title = title; } public void setType(int type) { this.type = type; } public String getCt() { return ct; } public String getText() { return text; } public String getTitle() { return title; } public int getType() { return type; } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/module/text/TextJoyPresenter.java","file_content":"package com.jude.joy.module.text; import android.os.Bundle; import com.jude.beam.expansion.list.BeamListFragmentPresenter; import com.jude.joy.model.bean.TextJoy; import com.jude.joy.model.bean.TextJoyPage; import com.jude.joy.model.server.DaggerServiceModelComponent; import com.jude.joy.model.server.SchedulerTransform; import com.jude.joy.model.server.ServiceAPI; import javax.inject.Inject; public class TextJoyPresenter extends BeamListFragmentPresenter<TextJoyFragment,TextJoy> { @Inject ServiceAPI mServer; @Override protected void onCreate(TextJoyFragment view, Bundle savedState) { super.onCreate(view, savedState); DaggerServiceModelComponent.builder().build().inject(this); onRefresh(); } @Override public void onRefresh() { mServer.getTextJoyList(1) .compose(new SchedulerTransform<>()) .map(TextJoyPage::getContentlist) .doAfterTerminate(()-> setCurPage(2)) .unsafeSubscribe(getRefreshSubscriber()); } @Override public void onLoadMore() { mServer.getTextJoyList(getCurPage()) .compose(new SchedulerTransform<>()) .map(TextJoyPage::getContentlist) .unsafeSubscribe(getMoreSubscriber()); } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/module/text/TextJoyVH.java","file_content":"package com.jude.joy.module.text; import android.view.ViewGroup; import android.widget.TextView; import com.jude.easyrecyclerview.adapter.BaseViewHolder; import com.jude.joy.R; import com.jude.joy.model.bean.TextJoy; import com.jude.joy.utils.RecentDateFormat; import com.jude.joy.utils.TextFilter; import com.jude.utils.JTimeTransform; import butterknife.BindView; import butterknife.ButterKnife; public class TextJoyVH extends BaseViewHolder<TextJoy> { @BindView(R.id.content) TextView content; @BindView(R.id.time) TextView time; public TextJoyVH(ViewGroup parent) { super(parent, R.layout.item_joy_text); ButterKnife.bind(this,itemView); } @Override public void setData(TextJoy data) { content.setText(TextFilter.filter(data.getText())); time.setText(new JTimeTransform().parse(\"yyyy-MM-dd hh:mm:ss\",data.getCt()).toString(new RecentDateFormat())); } }"}]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/Joy-master/app/src/main/java/com/jude/joy/module/text/TextJoyVH.java","main_file_content":"package com.jude.joy.module.text; import android.view.ViewGroup; import android.widget.TextView; import com.jude.easyrecyclerview.adapter.BaseViewHolder; import com.jude.joy.R; import com.jude.joy.model.bean.TextJoy; import com.jude.joy.utils.RecentDateFormat; import com.jude.joy.utils.TextFilter; import com.jude.utils.JTimeTransform; import butterknife.BindView; import butterknife.ButterKnife; public class TextJoyVH extends BaseViewHolder<TextJoy> { @BindView(R.id.content) TextView content; @BindView(R.id.time) TextView time; public TextJoyVH(ViewGroup parent) { super(parent, R.layout.item_joy_text); ButterKnife.bind(this,itemView); } @Override public void setData(TextJoy data) { content.setText(TextFilter.filter(data.getText())); time.setText(new JTimeTransform().parse(\"yyyy-MM-dd hh:mm:ss\",data.getCt()).toString(new RecentDateFormat())); } }","dependencies":[{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/bean/TextJoy.java","file_content":"package com.jude.joy.model.bean; public class TextJoy { private String ct; private String text; private String title; private int type; public void setCt(String ct) { this.ct = ct; } public void setText(String text) { this.text = text; } public void setTitle(String title) { this.title = title; } public void setType(int type) { this.type = type; } public String getCt() { return ct; } public String getText() { return text; } public String getTitle() { return title; } public int getType() { return type; } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/utils/RecentDateFormat.java","file_content":"package com.jude.joy.utils; import com.jude.utils.JTimeTransform; public class RecentDateFormat implements JTimeTransform.DateFormat{ private String lastFormat; public RecentDateFormat() { this(\"MM-dd\"); } public RecentDateFormat(String lastFormat) { this.lastFormat = lastFormat; } @Override public String format(JTimeTransform date, long delta) { if (delta>0){ if (delta / JTimeTransform.SECOND < 1){ return delta +\"秒前\"; }else if (delta / JTimeTransform.HOUR < 1){ return delta / JTimeTransform.SECOND+\"分钟前\"; }else if (delta / JTimeTransform.DAY < 2 && new JTimeTransform().getDay() == date.getDay()){ return delta / JTimeTransform.HOUR+\"小时前\"; }else if (delta / JTimeTransform.DAY < 3 && new JTimeTransform().getDay() == new JTimeTransform(date.getTimestamp()+JTimeTransform.DAY).getDay()){ return \"昨天\"+date.toString(\"HH:mm\"); }else if (delta / JTimeTransform.DAY < 4 && new JTimeTransform().getDay() == new JTimeTransform(date.getTimestamp()+JTimeTransform.DAY*2).getDay()){ return \"前天\"+date.toString(\"HH:mm\"); }else{ return date.toString(lastFormat); } }else{ delta = -delta; if (delta / JTimeTransform.SECOND < 1){ return delta +\"秒后\"; }else if (delta / JTimeTransform.HOUR < 1){ return delta / JTimeTransform.SECOND+\"分钟后\"; }else if (delta / JTimeTransform.DAY > -2 && new JTimeTransform().getDay() == date.getDay()){ return delta / JTimeTransform.HOUR+\"小时后\"; }else if (delta / JTimeTransform.DAY > -3 && new JTimeTransform().getDay() == new JTimeTransform(date.getTimestamp()-JTimeTransform.DAY).getDay()){ return \"明天\"+date.toString(\"HH:mm\"); }else if (delta / JTimeTransform.DAY > -4 && new JTimeTransform().getDay() == new JTimeTransform(date.getTimestamp()-JTimeTransform.DAY*2).getDay()){ return \"后天\"+date.toString(\"HH:mm\"); }else{ return date.toString(lastFormat); } } } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/utils/TextFilter.java","file_content":"package com.jude.joy.utils; import com.jude.utils.JUtils; public class TextFilter { public static String[] FilterStrings = { \"</p>\", \"<p>\", \"&nbsp;\", \"&lt;/pstyle=\\\\\\\"text-indent:2em;text-align:left;\\\\\\\"&gt;\" }; public static String filter(String original){ JUtils.Log(\"index\"+original.indexOf(FilterStrings[1])); for (String filterString : FilterStrings) { original = original.replace(filterString, \"\"); } return original; } }"}]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/Joy-master/app/src/main/java/com/jude/joy/module/text/TextJoyPresenter.java","main_file_content":"package com.jude.joy.module.text; import android.os.Bundle; import com.jude.beam.expansion.list.BeamListFragmentPresenter; import com.jude.joy.model.bean.TextJoy; import com.jude.joy.model.bean.TextJoyPage; import com.jude.joy.model.server.DaggerServiceModelComponent; import com.jude.joy.model.server.SchedulerTransform; import com.jude.joy.model.server.ServiceAPI; import javax.inject.Inject; public class TextJoyPresenter extends BeamListFragmentPresenter<TextJoyFragment,TextJoy> { @Inject ServiceAPI mServer; @Override protected void onCreate(TextJoyFragment view, Bundle savedState) { super.onCreate(view, savedState); DaggerServiceModelComponent.builder().build().inject(this); onRefresh(); } @Override public void onRefresh() { mServer.getTextJoyList(1) .compose(new SchedulerTransform<>()) .map(TextJoyPage::getContentlist) .doAfterTerminate(()-> setCurPage(2)) .unsafeSubscribe(getRefreshSubscriber()); } @Override public void onLoadMore() { mServer.getTextJoyList(getCurPage()) .compose(new SchedulerTransform<>()) .map(TextJoyPage::getContentlist) .unsafeSubscribe(getMoreSubscriber()); } }","dependencies":[{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/bean/TextJoy.java","file_content":"package com.jude.joy.model.bean; public class TextJoy { private String ct; private String text; private String title; private int type; public void setCt(String ct) { this.ct = ct; } public void setText(String text) { this.text = text; } public void setTitle(String title) { this.title = title; } public void setType(int type) { this.type = type; } public String getCt() { return ct; } public String getText() { return text; } public String getTitle() { return title; } public int getType() { return type; } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/bean/TextJoyPage.java","file_content":"package com.jude.joy.model.bean; import java.util.List; public class TextJoyPage { private int allNum; private int allPage; private List<TextJoy> contentlist; public int getAllNum() { return allNum; } public void setAllNum(int allNum) { this.allNum = allNum; } public int getAllPage() { return allPage; } public void setAllPage(int allPage) { this.allPage = allPage; } public List<TextJoy> getContentlist() { return contentlist; } public void setContentlist(List<TextJoy> contentlist) { this.contentlist = contentlist; } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/server/SchedulerTransform.java","file_content":"package com.jude.joy.model.server; import rx.Observable; import rx.android.schedulers.AndroidSchedulers; import rx.schedulers.Schedulers; public class SchedulerTransform<T> implements Observable.Transformer<T, T> { @Override public Observable<T> call(Observable<T> tObservable) { return tObservable .subscribeOn(Schedulers.io()) .observeOn(AndroidSchedulers.mainThread()) .unsubscribeOn(Schedulers.io()); } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/server/ServiceAPI.java","file_content":"package com.jude.joy.model.server; import com.jude.joy.model.bean.ImageJoyPage; import com.jude.joy.model.bean.TextJoyPage; import retrofit2.http.GET; import retrofit2.http.Query; import rx.Observable; public interface ServiceAPI { String BASEURL = \"http: @GET(\"showapi_joke/joke_text\") Observable<TextJoyPage> getTextJoyList(@Query(\"page\")int page); @GET(\"showapi_joke/joke_pic\") Observable<ImageJoyPage> getImageJoyList(@Query(\"page\")int page); }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/module/text/TextJoyFragment.java","file_content":"package com.jude.joy.module.text; import android.view.ViewGroup; import com.jude.beam.bijection.RequiresPresenter; import com.jude.beam.expansion.list.BeamListFragment; import com.jude.beam.expansion.list.ListConfig; import com.jude.easyrecyclerview.adapter.BaseViewHolder; import com.jude.joy.model.bean.TextJoy; @RequiresPresenter(TextJoyPresenter.class) public class TextJoyFragment extends BeamListFragment<TextJoyPresenter,TextJoy> { @Override public BaseViewHolder getViewHolder(ViewGroup viewGroup, int i) { return new TextJoyVH(viewGroup); } @Override public ListConfig getConfig() { return super.getConfig() .setLoadmoreAble(true) .setRefreshAble(true) .setNoMoreAble(true) .setErrorAble(true) .setErrorTouchToResumeAble(true); } }"}]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/Joy-master/app/src/main/java/com/jude/joy/module/setting/AboutUsPresenter.java","main_file_content":"package com.jude.joy.module.setting; import com.jude.beam.bijection.Presenter; public class AboutUsPresenter extends Presenter<AboutUsActivity> { }","dependencies":[{"file_path":"Joy-master/app/src/main/java/com/jude/joy/module/setting/AboutUsActivity.java","file_content":"package com.jude.joy.module.setting; import android.os.Bundle; import android.widget.TextView; import com.jude.beam.bijection.RequiresPresenter; import com.jude.beam.expansion.BeamBaseActivity; import com.jude.joy.R; import com.jude.utils.JUtils; import butterknife.BindView; import butterknife.ButterKnife; @RequiresPresenter(AboutUsPresenter.class) public class AboutUsActivity extends BeamBaseActivity<AboutUsPresenter> { @BindView(R.id.version) TextView version; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_about); ButterKnife.bind(this); version.setText(\"v\"+ JUtils.getAppVersionName()); } }"}]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/Joy-master/app/src/main/java/com/jude/joy/module/setting/AboutUsActivity.java","main_file_content":"package com.jude.joy.module.setting; import android.os.Bundle; import android.widget.TextView; import com.jude.beam.bijection.RequiresPresenter; import com.jude.beam.expansion.BeamBaseActivity; import com.jude.joy.R; import com.jude.utils.JUtils; import butterknife.BindView; import butterknife.ButterKnife; @RequiresPresenter(AboutUsPresenter.class) public class AboutUsActivity extends BeamBaseActivity<AboutUsPresenter> { @BindView(R.id.version) TextView version; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_about); ButterKnife.bind(this); version.setText(\"v\"+ JUtils.getAppVersionName()); } }","dependencies":[{"file_path":"Joy-master/app/src/main/java/com/jude/joy/module/setting/AboutUsPresenter.java","file_content":"package com.jude.joy.module.setting; import com.jude.beam.bijection.Presenter; public class AboutUsPresenter extends Presenter<AboutUsActivity> { }"}]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/Joy-master/app/src/main/java/com/jude/joy/module/main/MainActivity.java","main_file_content":"package com.jude.joy.module.main; import android.content.Intent; import android.os.Bundle; import android.support.design.widget.AppBarLayout; import android.support.design.widget.CoordinatorLayout; import android.support.design.widget.TabLayout; import android.support.v4.app.Fragment; import android.support.v4.app.FragmentManager; import android.support.v4.app.FragmentStatePagerAdapter; import android.support.v4.view.ViewPager; import android.view.Menu; import android.view.MenuItem; import com.jude.beam.bijection.RequiresPresenter; import com.jude.beam.expansion.BeamBaseActivity; import com.jude.joy.R; import com.jude.joy.module.image.ImageJoyFragment; import com.jude.joy.module.setting.AboutUsActivity; import com.jude.joy.module.text.TextJoyFragment; import butterknife.BindView; import butterknife.ButterKnife; @RequiresPresenter(MainPresenter.class) public class MainActivity extends BeamBaseActivity<MainPresenter> { @BindView(R.id.viewPager) ViewPager viewpager; @BindView(R.id.app_bar_layout) AppBarLayout appBarLayout; @BindView(R.id.coordinator_layout) CoordinatorLayout coordinatorLayout; @BindView(R.id.tab_layout) TabLayout tabLayout; private MainPagerAdapter mMainPagerAdapter; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); getSupportActionBar().setTitle(\"豆逼 — 给你纯粹的欢乐\"); ButterKnife.bind(this); getSupportActionBar().setDisplayHomeAsUpEnabled(false); getSupportActionBar().setDisplayShowHomeEnabled(true); tabLayout.setTabTextColors(getResources().getColor(R.color.whiteTrans80), getResources().getColor(R.color.white)); viewpager.setAdapter(mMainPagerAdapter = new MainPagerAdapter(getSupportFragmentManager())); tabLayout.setupWithViewPager(viewpager); } public class MainPagerAdapter extends FragmentStatePagerAdapter { public MainPagerAdapter(FragmentManager fm) { super(fm); } @Override public Fragment getItem(int position) { switch (position) { case 0: return new TextJoyFragment(); default: return new ImageJoyFragment(); } } @Override public CharSequence getPageTitle(int position) { switch (position) { case 0: return \"段子\"; default: return \"图片\"; } } @Override public int getCount() { return 2; } } @Override public boolean onCreateOptionsMenu(Menu menu) { getMenuInflater().inflate(R.menu.menu_main, menu); return true; } @Override public boolean onOptionsItemSelected(MenuItem item) { int id = item.getItemId(); if (id == R.id.about) { startActivity(new Intent(this, AboutUsActivity.class)); return true; } return super.onOptionsItemSelected(item); } }","dependencies":[{"file_path":"Joy-master/app/src/main/java/com/jude/joy/module/image/ImageJoyFragment.java","file_content":"package com.jude.joy.module.image; import android.view.ViewGroup; import com.jude.beam.bijection.RequiresPresenter; import com.jude.beam.expansion.list.BeamListFragment; import com.jude.beam.expansion.list.ListConfig; import com.jude.easyrecyclerview.adapter.BaseViewHolder; import com.jude.joy.model.bean.ImageJoy; @RequiresPresenter(ImageJoyPresenter.class) public class ImageJoyFragment extends BeamListFragment<ImageJoyPresenter,ImageJoy> { @Override public BaseViewHolder getViewHolder(ViewGroup viewGroup, int i) { return new ImageJoyVH(viewGroup); } @Override public ListConfig getConfig() { return super.getConfig() .setLoadmoreAble(true) .setRefreshAble(true) .setNoMoreAble(true) .setErrorAble(true) .setErrorTouchToResumeAble(true); } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/module/main/MainPresenter.java","file_content":"package com.jude.joy.module.main; import com.jude.beam.bijection.Presenter; public class MainPresenter extends Presenter<MainActivity> { }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/module/setting/AboutUsActivity.java","file_content":"package com.jude.joy.module.setting; import android.os.Bundle; import android.widget.TextView; import com.jude.beam.bijection.RequiresPresenter; import com.jude.beam.expansion.BeamBaseActivity; import com.jude.joy.R; import com.jude.utils.JUtils; import butterknife.BindView; import butterknife.ButterKnife; @RequiresPresenter(AboutUsPresenter.class) public class AboutUsActivity extends BeamBaseActivity<AboutUsPresenter> { @BindView(R.id.version) TextView version; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_about); ButterKnife.bind(this); version.setText(\"v\"+ JUtils.getAppVersionName()); } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/module/text/TextJoyFragment.java","file_content":"package com.jude.joy.module.text; import android.view.ViewGroup; import com.jude.beam.bijection.RequiresPresenter; import com.jude.beam.expansion.list.BeamListFragment; import com.jude.beam.expansion.list.ListConfig; import com.jude.easyrecyclerview.adapter.BaseViewHolder; import com.jude.joy.model.bean.TextJoy; @RequiresPresenter(TextJoyPresenter.class) public class TextJoyFragment extends BeamListFragment<TextJoyPresenter,TextJoy> { @Override public BaseViewHolder getViewHolder(ViewGroup viewGroup, int i) { return new TextJoyVH(viewGroup); } @Override public ListConfig getConfig() { return super.getConfig() .setLoadmoreAble(true) .setRefreshAble(true) .setNoMoreAble(true) .setErrorAble(true) .setErrorTouchToResumeAble(true); } }"}]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/Joy-master/app/src/main/java/com/jude/joy/module/main/MainPresenter.java","main_file_content":"package com.jude.joy.module.main; import com.jude.beam.bijection.Presenter; public class MainPresenter extends Presenter<MainActivity> { }","dependencies":[{"file_path":"Joy-master/app/src/main/java/com/jude/joy/module/main/MainActivity.java","file_content":"package com.jude.joy.module.main; import android.content.Intent; import android.os.Bundle; import android.support.design.widget.AppBarLayout; import android.support.design.widget.CoordinatorLayout; import android.support.design.widget.TabLayout; import android.support.v4.app.Fragment; import android.support.v4.app.FragmentManager; import android.support.v4.app.FragmentStatePagerAdapter; import android.support.v4.view.ViewPager; import android.view.Menu; import android.view.MenuItem; import com.jude.beam.bijection.RequiresPresenter; import com.jude.beam.expansion.BeamBaseActivity; import com.jude.joy.R; import com.jude.joy.module.image.ImageJoyFragment; import com.jude.joy.module.setting.AboutUsActivity; import com.jude.joy.module.text.TextJoyFragment; import butterknife.BindView; import butterknife.ButterKnife; @RequiresPresenter(MainPresenter.class) public class MainActivity extends BeamBaseActivity<MainPresenter> { @BindView(R.id.viewPager) ViewPager viewpager; @BindView(R.id.app_bar_layout) AppBarLayout appBarLayout; @BindView(R.id.coordinator_layout) CoordinatorLayout coordinatorLayout; @BindView(R.id.tab_layout) TabLayout tabLayout; private MainPagerAdapter mMainPagerAdapter; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); getSupportActionBar().setTitle(\"豆逼 — 给你纯粹的欢乐\"); ButterKnife.bind(this); getSupportActionBar().setDisplayHomeAsUpEnabled(false); getSupportActionBar().setDisplayShowHomeEnabled(true); tabLayout.setTabTextColors(getResources().getColor(R.color.whiteTrans80), getResources().getColor(R.color.white)); viewpager.setAdapter(mMainPagerAdapter = new MainPagerAdapter(getSupportFragmentManager())); tabLayout.setupWithViewPager(viewpager); } public class MainPagerAdapter extends FragmentStatePagerAdapter { public MainPagerAdapter(FragmentManager fm) { super(fm); } @Override public Fragment getItem(int position) { switch (position) { case 0: return new TextJoyFragment(); default: return new ImageJoyFragment(); } } @Override public CharSequence getPageTitle(int position) { switch (position) { case 0: return \"段子\"; default: return \"图片\"; } } @Override public int getCount() { return 2; } } @Override public boolean onCreateOptionsMenu(Menu menu) { getMenuInflater().inflate(R.menu.menu_main, menu); return true; } @Override public boolean onOptionsItemSelected(MenuItem item) { int id = item.getItemId(); if (id == R.id.about) { startActivity(new Intent(this, AboutUsActivity.class)); return true; } return super.onOptionsItemSelected(item); } }"}]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/Joy-master/app/src/test/java/com/jude/joy/ExampleUnitTest.java","main_file_content":"package com.jude.joy; import org.junit.Test; import static org.junit.Assert.*; public class ExampleUnitTest { @Test public void addition_isCorrect() throws Exception { assertEquals(4, 2 + 2); } }","dependencies":[]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/Joy-master/app/src/androidTest/java/com/jude/joy/ApplicationTest.java","main_file_content":"package com.jude.joy; import android.app.Application; import android.test.ApplicationTestCase; public class ApplicationTest extends ApplicationTestCase<Application> { public ApplicationTest() { super(Application.class); } }","dependencies":[]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/app/src/main/java/com/jude/joy/app/APP.java","main_file_content":"package com.jude.joy.app; import android.app.Application; import com.jude.beam.Beam; import com.jude.joy.BuildConfig; import com.jude.utils.JUtils; public class APP extends Application { @Override public void onCreate() { super.onCreate(); JUtils.initialize(this); JUtils.setDebug(BuildConfig.DEBUG, \"JoyLog\"); Beam.init(this); } }","dependencies":[]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/app/src/main/java/com/jude/joy/config/API.java","main_file_content":"package com.jude.joy.config; public class API { public static final class URL{ public static final String JOY_TEXT = \"http: public static final String JOY_IMAGE = \"http: } public static class KEY { public static final String STATUS = \"showapi_res_code\"; public static final String INFO = \"showapi_res_error\"; public static final String DATA = \"showapi_res_body\"; } public static class CODE { public static final int SUCCEED = 0; } }","dependencies":[]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/app/src/main/java/com/jude/joy/utils/TextFilter.java","main_file_content":"package com.jude.joy.utils; import com.jude.utils.JUtils; public class TextFilter { public static String[] FilterStrings = { \"</p>\", \"<p>\", \"&nbsp;\", \"&lt;/pstyle=\\\\\\\"text-indent:2em;text-align:left;\\\\\\\"&gt;\" }; public static String filter(String original){ JUtils.Log(\"index\"+original.indexOf(FilterStrings[1])); for (String filterString : FilterStrings) { original = original.replace(filterString, \"\"); } return original; } }","dependencies":[]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/app/src/main/java/com/jude/joy/utils/RecentDateFormat.java","main_file_content":"package com.jude.joy.utils; import com.jude.utils.JTimeTransform; public class RecentDateFormat implements JTimeTransform.DateFormat{ private String lastFormat; public RecentDateFormat() { this(\"MM-dd\"); } public RecentDateFormat(String lastFormat) { this.lastFormat = lastFormat; } @Override public String format(JTimeTransform date, long delta) { if (delta>0){ if (delta / JTimeTransform.SECOND < 1){ return delta +\"秒前\"; }else if (delta / JTimeTransform.HOUR < 1){ return delta / JTimeTransform.SECOND+\"分钟前\"; }else if (delta / JTimeTransform.DAY < 2 && new JTimeTransform().getDay() == date.getDay()){ return delta / JTimeTransform.HOUR+\"小时前\"; }else if (delta / JTimeTransform.DAY < 3 && new JTimeTransform().getDay() == new JTimeTransform(date.getTimestamp()+JTimeTransform.DAY).getDay()){ return \"昨天\"+date.toString(\"HH:mm\"); }else if (delta / JTimeTransform.DAY < 4 && new JTimeTransform().getDay() == new JTimeTransform(date.getTimestamp()+JTimeTransform.DAY*2).getDay()){ return \"前天\"+date.toString(\"HH:mm\"); }else{ return date.toString(lastFormat); } }else{ delta = -delta; if (delta / JTimeTransform.SECOND < 1){ return delta +\"秒后\"; }else if (delta / JTimeTransform.HOUR < 1){ return delta / JTimeTransform.SECOND+\"分钟后\"; }else if (delta / JTimeTransform.DAY > -2 && new JTimeTransform().getDay() == date.getDay()){ return delta / JTimeTransform.HOUR+\"小时后\"; }else if (delta / JTimeTransform.DAY > -3 && new JTimeTransform().getDay() == new JTimeTransform(date.getTimestamp()-JTimeTransform.DAY).getDay()){ return \"明天\"+date.toString(\"HH:mm\"); }else if (delta / JTimeTransform.DAY > -4 && new JTimeTransform().getDay() == new JTimeTransform(date.getTimestamp()-JTimeTransform.DAY*2).getDay()){ return \"后天\"+date.toString(\"HH:mm\"); }else{ return date.toString(lastFormat); } } } }","dependencies":[]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/app/src/main/java/com/jude/joy/utils/ImageFilter.java","main_file_content":"package com.jude.joy.utils; public class ImageFilter { public static String filter(String original){ return original.split(\"\\\"\")[0]; } }","dependencies":[]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/app/src/main/java/com/jude/joy/model/bean/ImageJoyPage.java","main_file_content":"package com.jude.joy.model.bean; import java.util.List; public class ImageJoyPage { private int allNum; private int allPage; public int getAllNum() { return allNum; } public void setAllNum(int allNum) { this.allNum = allNum; } public int getAllPage() { return allPage; } public void setAllPage(int allPage) { this.allPage = allPage; } public List<ImageJoy> getContentlist() { return contentlist; } public void setContentlist(List<ImageJoy> contentlist) { this.contentlist = contentlist; } private List<ImageJoy> contentlist; }","dependencies":[{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/bean/ImageJoy.java","file_content":"package com.jude.joy.model.bean; public class ImageJoy { private String ct; private String img; private String title; private int type; public void setCt(String ct) { this.ct = ct; } public void setImg(String img) { this.img = img; } public void setTitle(String title) { this.title = title; } public void setType(int type) { this.type = type; } public String getCt() { return ct; } public String getImg() { return img; } public String getTitle() { return title; } public int getType() { return type; } }"}]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/app/src/main/java/com/jude/joy/model/bean/TextJoy.java","main_file_content":"package com.jude.joy.model.bean; public class TextJoy { private String ct; private String text; private String title; private int type; public void setCt(String ct) { this.ct = ct; } public void setText(String text) { this.text = text; } public void setTitle(String title) { this.title = title; } public void setType(int type) { this.type = type; } public String getCt() { return ct; } public String getText() { return text; } public String getTitle() { return title; } public int getType() { return type; } }","dependencies":[]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/app/src/main/java/com/jude/joy/model/bean/TextJoyPage.java","main_file_content":"package com.jude.joy.model.bean; import java.util.List; public class TextJoyPage { private int allNum; private int allPage; private List<TextJoy> contentlist; public int getAllNum() { return allNum; } public void setAllNum(int allNum) { this.allNum = allNum; } public int getAllPage() { return allPage; } public void setAllPage(int allPage) { this.allPage = allPage; } public List<TextJoy> getContentlist() { return contentlist; } public void setContentlist(List<TextJoy> contentlist) { this.contentlist = contentlist; } }","dependencies":[{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/bean/TextJoy.java","file_content":"package com.jude.joy.model.bean; public class TextJoy { private String ct; private String text; private String title; private int type; public void setCt(String ct) { this.ct = ct; } public void setText(String text) { this.text = text; } public void setTitle(String title) { this.title = title; } public void setType(int type) { this.type = type; } public String getCt() { return ct; } public String getText() { return text; } public String getTitle() { return title; } public int getType() { return type; } }"}]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/app/src/main/java/com/jude/joy/model/bean/ImageJoy.java","main_file_content":"package com.jude.joy.model.bean; public class ImageJoy { private String ct; private String img; private String title; private int type; public void setCt(String ct) { this.ct = ct; } public void setImg(String img) { this.img = img; } public void setTitle(String title) { this.title = title; } public void setType(int type) { this.type = type; } public String getCt() { return ct; } public String getImg() { return img; } public String getTitle() { return title; } public int getType() { return type; } }","dependencies":[]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/app/src/main/java/com/jude/joy/model/server/ErrorTransform.java","main_file_content":"package com.jude.joy.model.server; import com.jude.utils.JUtils; import retrofit2.adapter.rxjava.HttpException; import rx.Observable; import rx.functions.Action1; public class ErrorTransform<T> implements Observable.Transformer<T, T> { private Action1<Throwable> handler; public ErrorTransform(Action1<Throwable> handler) { this.handler = handler; } @Override public Observable<T> call(Observable<T> tObservable) { return tObservable.doOnError(handler) .onErrorResumeNext(Observable.empty()); } public static class ServerErrorHandler implements Action1<Throwable> { private static final int W_TOAST = 1; public static final ServerErrorHandler NONE = new ServerErrorHandler(0); public static final ServerErrorHandler TOAST = new ServerErrorHandler(1<< W_TOAST); private int kind; public ServerErrorHandler(int kind) { this.kind = kind; } private boolean has(int index){ return (kind & 1<<index) >0; } @Override public void call(Throwable throwable) { JUtils.Log(\"Error:\"+throwable.getClass().getName()+\":\"+throwable.getMessage()); String errorString; if (throwable instanceof HttpException) { HttpException err = (HttpException) throwable; if (err.code() >= 400 && err.code() < 500){ errorString = \"请求错误:\"+err.message(); }else if (err.code() >= 500){ errorString = \"服务器错误\"; }else { errorString = \"请求错误:\"+err.code(); } }else { errorString = \"网络错误\"; JUtils.Log(throwable.getMessage()); } if (has(W_TOAST)) JUtils.Toast(errorString); } } }","dependencies":[]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/app/src/main/java/com/jude/joy/model/server/ServiceModelComponent.java","main_file_content":"package com.jude.joy.model.server; import com.jude.joy.module.image.ImageJoyPresenter; import com.jude.joy.module.text.TextJoyPresenter; import javax.inject.Singleton; import dagger.Component; @Singleton @Component(modules = {ServiceAPIModule.class}) public interface ServiceModelComponent { void inject(TextJoyPresenter model); void inject(ImageJoyPresenter model); }","dependencies":[{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/server/ServiceAPIModule.java","file_content":"package com.jude.joy.model.server; import com.google.gson.GsonBuilder; import javax.inject.Singleton; import dagger.Module; import dagger.Provides; import okhttp3.OkHttpClient; import okhttp3.logging.HttpLoggingInterceptor; import retrofit2.Retrofit; import retrofit2.adapter.rxjava.RxJavaCallAdapterFactory; import retrofit2.converter.gson.GsonConverterFactory; @Module public class ServiceAPIModule { @Singleton @Provides ServiceAPI provideServiceAPI(OkHttpClient okHttpClient) { Retrofit retrofit = new Retrofit.Builder() .addConverterFactory(GsonConverterFactory.create(new GsonBuilder().setLenient().create())) .baseUrl(ServiceAPI.BASEURL) .addCallAdapterFactory(RxJavaCallAdapterFactory.create()) .client(okHttpClient) .build(); return retrofit.create(ServiceAPI.class); } @Singleton @Provides OkHttpClient provideOkHttpClient() { return new OkHttpClient.Builder() .addInterceptor(new HttpLoggingInterceptor().setLevel(HttpLoggingInterceptor.Level.BODY)) .addNetworkInterceptor(new HeaderInterceptors()) .addNetworkInterceptor(new RestInterceptors()) .build(); } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/module/image/ImageJoyPresenter.java","file_content":"package com.jude.joy.module.image; import android.content.Intent; import android.os.Bundle; import android.support.annotation.NonNull; import com.bumptech.glide.Glide; import com.bumptech.glide.load.engine.DiskCacheStrategy; import com.jude.beam.expansion.list.BeamListFragmentPresenter; import com.jude.easyrecyclerview.adapter.RecyclerArrayAdapter; import com.jude.joy.model.bean.ImageJoy; import com.jude.joy.model.bean.ImageJoyPage; import com.jude.joy.model.server.DaggerServiceModelComponent; import com.jude.joy.model.server.SchedulerTransform; import com.jude.joy.model.server.ServiceAPI; import java.util.ArrayList; import javax.inject.Inject; public class ImageJoyPresenter extends BeamListFragmentPresenter<ImageJoyFragment,ImageJoy> { @Inject ServiceAPI mServer; @Override protected void onCreate(ImageJoyFragment view, Bundle savedState) { super.onCreate(view, savedState); DaggerServiceModelComponent.builder().build().inject(this); onRefresh(); } @Override protected void onCreateView(@NonNull ImageJoyFragment view) { super.onCreateView(view); getAdapter().setOnItemClickListener(new RecyclerArrayAdapter.OnItemClickListener() { @Override public void onItemClick(int position) { ArrayList<String> list = new ArrayList<String>(); for (ImageJoy imageJoy : getAdapter().getAllData()) { list.add(imageJoy.getImg()); } Intent i = new Intent(getView().getContext(),PictureActivity.class); i.putExtra(PictureActivity.KEY_PICTURES,list); i.putExtra(PictureActivity.KEY_INDEX,position); getView().startActivity(i); } }); } @Override public void onRefresh() { mServer.getImageJoyList(1) .compose(new SchedulerTransform<>()) .map(ImageJoyPage::getContentlist) .doAfterTerminate(()-> setCurPage(2)) .doOnNext(list->{ for (ImageJoy imageJoy : list) { String url = imageJoy.getImg(); Glide.with(getView()).load(url) .diskCacheStrategy(DiskCacheStrategy.SOURCE) .preload(); } }) .unsafeSubscribe(getRefreshSubscriber()); } @Override public void onLoadMore() { mServer.getImageJoyList(getCurPage()) .compose(new SchedulerTransform<>()) .map(ImageJoyPage::getContentlist) .doOnNext(list->{ for (ImageJoy imageJoy : list) { String url = imageJoy.getImg(); Glide.with(getView()).load(url) .diskCacheStrategy(DiskCacheStrategy.SOURCE) .preload(); } }) .unsafeSubscribe(getMoreSubscriber()); } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/module/text/TextJoyPresenter.java","file_content":"package com.jude.joy.module.text; import android.os.Bundle; import com.jude.beam.expansion.list.BeamListFragmentPresenter; import com.jude.joy.model.bean.TextJoy; import com.jude.joy.model.bean.TextJoyPage; import com.jude.joy.model.server.DaggerServiceModelComponent; import com.jude.joy.model.server.SchedulerTransform; import com.jude.joy.model.server.ServiceAPI; import javax.inject.Inject; public class TextJoyPresenter extends BeamListFragmentPresenter<TextJoyFragment,TextJoy> { @Inject ServiceAPI mServer; @Override protected void onCreate(TextJoyFragment view, Bundle savedState) { super.onCreate(view, savedState); DaggerServiceModelComponent.builder().build().inject(this); onRefresh(); } @Override public void onRefresh() { mServer.getTextJoyList(1) .compose(new SchedulerTransform<>()) .map(TextJoyPage::getContentlist) .doAfterTerminate(()-> setCurPage(2)) .unsafeSubscribe(getRefreshSubscriber()); } @Override public void onLoadMore() { mServer.getTextJoyList(getCurPage()) .compose(new SchedulerTransform<>()) .map(TextJoyPage::getContentlist) .unsafeSubscribe(getMoreSubscriber()); } }"}]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/app/src/main/java/com/jude/joy/model/server/ServiceAPI.java","main_file_content":"package com.jude.joy.model.server; import com.jude.joy.model.bean.ImageJoyPage; import com.jude.joy.model.bean.TextJoyPage; import retrofit2.http.GET; import retrofit2.http.Query; import rx.Observable; public interface ServiceAPI { String BASEURL = \"http: @GET(\"showapi_joke/joke_text\") Observable<TextJoyPage> getTextJoyList(@Query(\"page\")int page); @GET(\"showapi_joke/joke_pic\") Observable<ImageJoyPage> getImageJoyList(@Query(\"page\")int page); }","dependencies":[{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/bean/ImageJoyPage.java","file_content":"package com.jude.joy.model.bean; import java.util.List; public class ImageJoyPage { private int allNum; private int allPage; public int getAllNum() { return allNum; } public void setAllNum(int allNum) { this.allNum = allNum; } public int getAllPage() { return allPage; } public void setAllPage(int allPage) { this.allPage = allPage; } public List<ImageJoy> getContentlist() { return contentlist; } public void setContentlist(List<ImageJoy> contentlist) { this.contentlist = contentlist; } private List<ImageJoy> contentlist; }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/bean/TextJoyPage.java","file_content":"package com.jude.joy.model.bean; import java.util.List; public class TextJoyPage { private int allNum; private int allPage; private List<TextJoy> contentlist; public int getAllNum() { return allNum; } public void setAllNum(int allNum) { this.allNum = allNum; } public int getAllPage() { return allPage; } public void setAllPage(int allPage) { this.allPage = allPage; } public List<TextJoy> getContentlist() { return contentlist; } public void setContentlist(List<TextJoy> contentlist) { this.contentlist = contentlist; } }"}]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/app/src/main/java/com/jude/joy/model/server/RestInterceptors.java","main_file_content":"package com.jude.joy.model.server; import com.jude.utils.JUtils; import org.json.JSONException; import org.json.JSONObject; import java.io.IOException; import java.util.Iterator; import java.util.ServiceConfigurationError; import okhttp3.Interceptor; import okhttp3.MediaType; import okhttp3.Request; import okhttp3.Response; import okhttp3.ResponseBody; public class RestInterceptors implements Interceptor { private static final String TAG = \"HeaderInterceptors\"; @Override public Response intercept(Chain chain) throws IOException { Request request = chain.request(); Response originalResponse = chain.proceed(request); MediaType contentType = originalResponse.body().contentType(); String originalContent = originalResponse.body().string(); JUtils.Log(\"RestInterceptors\",request.url().toString()+\":\\n\"+originalContent); int code = 400; String errorMessage = \"\"; String body = \"null\"; JSONObject wrapper = null; try { wrapper = new JSONObject(originalContent); Iterator<String> iterator = wrapper.keys(); while (iterator.hasNext()){ String key = iterator.next(); switch (key){ case \"showapi_res_code\": code = wrapper.getInt(key); if (code == 0)code=200; else code=400; break; case \"showapi_res_error\": errorMessage = wrapper.getString(key); break; default: body = wrapper.getString(key); break; } } } catch (JSONException e) { throw new ServiceConfigurationError(\"服务器错误：\"+e.getLocalizedMessage()); } return originalResponse.newBuilder() .code(code) .message(errorMessage) .body(ResponseBody.create(contentType, body)) .build(); } }","dependencies":[]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/app/src/main/java/com/jude/joy/model/server/ServiceAPIModule.java","main_file_content":"package com.jude.joy.model.server; import com.google.gson.GsonBuilder; import javax.inject.Singleton; import dagger.Module; import dagger.Provides; import okhttp3.OkHttpClient; import okhttp3.logging.HttpLoggingInterceptor; import retrofit2.Retrofit; import retrofit2.adapter.rxjava.RxJavaCallAdapterFactory; import retrofit2.converter.gson.GsonConverterFactory; @Module public class ServiceAPIModule { @Singleton @Provides ServiceAPI provideServiceAPI(OkHttpClient okHttpClient) { Retrofit retrofit = new Retrofit.Builder() .addConverterFactory(GsonConverterFactory.create(new GsonBuilder().setLenient().create())) .baseUrl(ServiceAPI.BASEURL) .addCallAdapterFactory(RxJavaCallAdapterFactory.create()) .client(okHttpClient) .build(); return retrofit.create(ServiceAPI.class); } @Singleton @Provides OkHttpClient provideOkHttpClient() { return new OkHttpClient.Builder() .addInterceptor(new HttpLoggingInterceptor().setLevel(HttpLoggingInterceptor.Level.BODY)) .addNetworkInterceptor(new HeaderInterceptors()) .addNetworkInterceptor(new RestInterceptors()) .build(); } }","dependencies":[{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/server/HeaderInterceptors.java","file_content":"package com.jude.joy.model.server; import java.io.IOException; import okhttp3.Interceptor; import okhttp3.Request; import okhttp3.Response; public class HeaderInterceptors implements Interceptor { @Override public Response intercept(Chain chain) throws IOException { Request request = chain.request(); Request.Builder builder = request.newBuilder(); builder.addHeader(\"apikey\", \"c676a989ffe83f89db5265482ef3222d\"); return chain.proceed(builder.build()); } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/server/RestInterceptors.java","file_content":"package com.jude.joy.model.server; import com.jude.utils.JUtils; import org.json.JSONException; import org.json.JSONObject; import java.io.IOException; import java.util.Iterator; import java.util.ServiceConfigurationError; import okhttp3.Interceptor; import okhttp3.MediaType; import okhttp3.Request; import okhttp3.Response; import okhttp3.ResponseBody; public class RestInterceptors implements Interceptor { private static final String TAG = \"HeaderInterceptors\"; @Override public Response intercept(Chain chain) throws IOException { Request request = chain.request(); Response originalResponse = chain.proceed(request); MediaType contentType = originalResponse.body().contentType(); String originalContent = originalResponse.body().string(); JUtils.Log(\"RestInterceptors\",request.url().toString()+\":\\n\"+originalContent); int code = 400; String errorMessage = \"\"; String body = \"null\"; JSONObject wrapper = null; try { wrapper = new JSONObject(originalContent); Iterator<String> iterator = wrapper.keys(); while (iterator.hasNext()){ String key = iterator.next(); switch (key){ case \"showapi_res_code\": code = wrapper.getInt(key); if (code == 0)code=200; else code=400; break; case \"showapi_res_error\": errorMessage = wrapper.getString(key); break; default: body = wrapper.getString(key); break; } } } catch (JSONException e) { throw new ServiceConfigurationError(\"服务器错误：\"+e.getLocalizedMessage()); } return originalResponse.newBuilder() .code(code) .message(errorMessage) .body(ResponseBody.create(contentType, body)) .build(); } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/server/ServiceAPI.java","file_content":"package com.jude.joy.model.server; import com.jude.joy.model.bean.ImageJoyPage; import com.jude.joy.model.bean.TextJoyPage; import retrofit2.http.GET; import retrofit2.http.Query; import rx.Observable; public interface ServiceAPI { String BASEURL = \"http: @GET(\"showapi_joke/joke_text\") Observable<TextJoyPage> getTextJoyList(@Query(\"page\")int page); @GET(\"showapi_joke/joke_pic\") Observable<ImageJoyPage> getImageJoyList(@Query(\"page\")int page); }"}]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/app/src/main/java/com/jude/joy/model/server/SchedulerTransform.java","main_file_content":"package com.jude.joy.model.server; import rx.Observable; import rx.android.schedulers.AndroidSchedulers; import rx.schedulers.Schedulers; public class SchedulerTransform<T> implements Observable.Transformer<T, T> { @Override public Observable<T> call(Observable<T> tObservable) { return tObservable .subscribeOn(Schedulers.io()) .observeOn(AndroidSchedulers.mainThread()) .unsubscribeOn(Schedulers.io()); } }","dependencies":[]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/app/src/main/java/com/jude/joy/model/server/HeaderInterceptors.java","main_file_content":"package com.jude.joy.model.server; import java.io.IOException; import okhttp3.Interceptor; import okhttp3.Request; import okhttp3.Response; public class HeaderInterceptors implements Interceptor { @Override public Response intercept(Chain chain) throws IOException { Request request = chain.request(); Request.Builder builder = request.newBuilder(); builder.addHeader(\"apikey\", \"c676a989ffe83f89db5265482ef3222d\"); return chain.proceed(builder.build()); } }","dependencies":[]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/app/src/main/java/com/jude/joy/module/image/ImageJoyFragment.java","main_file_content":"package com.jude.joy.module.image; import android.view.ViewGroup; import com.jude.beam.bijection.RequiresPresenter; import com.jude.beam.expansion.list.BeamListFragment; import com.jude.beam.expansion.list.ListConfig; import com.jude.easyrecyclerview.adapter.BaseViewHolder; import com.jude.joy.model.bean.ImageJoy; @RequiresPresenter(ImageJoyPresenter.class) public class ImageJoyFragment extends BeamListFragment<ImageJoyPresenter,ImageJoy> { @Override public BaseViewHolder getViewHolder(ViewGroup viewGroup, int i) { return new ImageJoyVH(viewGroup); } @Override public ListConfig getConfig() { return super.getConfig() .setLoadmoreAble(true) .setRefreshAble(true) .setNoMoreAble(true) .setErrorAble(true) .setErrorTouchToResumeAble(true); } }","dependencies":[{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/bean/ImageJoy.java","file_content":"package com.jude.joy.model.bean; public class ImageJoy { private String ct; private String img; private String title; private int type; public void setCt(String ct) { this.ct = ct; } public void setImg(String img) { this.img = img; } public void setTitle(String title) { this.title = title; } public void setType(int type) { this.type = type; } public String getCt() { return ct; } public String getImg() { return img; } public String getTitle() { return title; } public int getType() { return type; } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/module/image/ImageJoyPresenter.java","file_content":"package com.jude.joy.module.image; import android.content.Intent; import android.os.Bundle; import android.support.annotation.NonNull; import com.bumptech.glide.Glide; import com.bumptech.glide.load.engine.DiskCacheStrategy; import com.jude.beam.expansion.list.BeamListFragmentPresenter; import com.jude.easyrecyclerview.adapter.RecyclerArrayAdapter; import com.jude.joy.model.bean.ImageJoy; import com.jude.joy.model.bean.ImageJoyPage; import com.jude.joy.model.server.DaggerServiceModelComponent; import com.jude.joy.model.server.SchedulerTransform; import com.jude.joy.model.server.ServiceAPI; import java.util.ArrayList; import javax.inject.Inject; public class ImageJoyPresenter extends BeamListFragmentPresenter<ImageJoyFragment,ImageJoy> { @Inject ServiceAPI mServer; @Override protected void onCreate(ImageJoyFragment view, Bundle savedState) { super.onCreate(view, savedState); DaggerServiceModelComponent.builder().build().inject(this); onRefresh(); } @Override protected void onCreateView(@NonNull ImageJoyFragment view) { super.onCreateView(view); getAdapter().setOnItemClickListener(new RecyclerArrayAdapter.OnItemClickListener() { @Override public void onItemClick(int position) { ArrayList<String> list = new ArrayList<String>(); for (ImageJoy imageJoy : getAdapter().getAllData()) { list.add(imageJoy.getImg()); } Intent i = new Intent(getView().getContext(),PictureActivity.class); i.putExtra(PictureActivity.KEY_PICTURES,list); i.putExtra(PictureActivity.KEY_INDEX,position); getView().startActivity(i); } }); } @Override public void onRefresh() { mServer.getImageJoyList(1) .compose(new SchedulerTransform<>()) .map(ImageJoyPage::getContentlist) .doAfterTerminate(()-> setCurPage(2)) .doOnNext(list->{ for (ImageJoy imageJoy : list) { String url = imageJoy.getImg(); Glide.with(getView()).load(url) .diskCacheStrategy(DiskCacheStrategy.SOURCE) .preload(); } }) .unsafeSubscribe(getRefreshSubscriber()); } @Override public void onLoadMore() { mServer.getImageJoyList(getCurPage()) .compose(new SchedulerTransform<>()) .map(ImageJoyPage::getContentlist) .doOnNext(list->{ for (ImageJoy imageJoy : list) { String url = imageJoy.getImg(); Glide.with(getView()).load(url) .diskCacheStrategy(DiskCacheStrategy.SOURCE) .preload(); } }) .unsafeSubscribe(getMoreSubscriber()); } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/module/image/ImageJoyVH.java","file_content":"package com.jude.joy.module.image; import android.view.ViewGroup; import android.widget.ImageView; import android.widget.TextView; import com.bumptech.glide.Glide; import com.jude.easyrecyclerview.adapter.BaseViewHolder; import com.jude.joy.R; import com.jude.joy.model.bean.ImageJoy; import com.jude.joy.utils.ImageFilter; import com.jude.joy.utils.RecentDateFormat; import com.jude.utils.JTimeTransform; import butterknife.BindView; import butterknife.ButterKnife; public class ImageJoyVH extends BaseViewHolder<ImageJoy> { @BindView(R.id.title) TextView title; @BindView(R.id.image) ImageView image; @BindView(R.id.time) TextView time; public ImageJoyVH(ViewGroup parent) { super(parent, R.layout.item_joy_image); ButterKnife.bind(this, itemView); } @Override public void setData(ImageJoy data) { title.setText(data.getTitle()); Glide.clear(image); Glide.with(getContext()) .load(ImageFilter.filter(data.getImg())) .into(image); time.setText(new JTimeTransform().parse(\"yyyy-MM-dd hh:mm:ss\",data.getCt()).toString(new RecentDateFormat())); } }"}]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/app/src/main/java/com/jude/joy/module/image/PictureActivity.java","main_file_content":"package com.jude.joy.module.image; import android.os.Bundle; import android.support.v4.app.Fragment; import android.support.v4.app.FragmentManager; import android.support.v4.app.FragmentStatePagerAdapter; import android.support.v4.view.ViewPager; import android.view.MotionEvent; import android.view.ViewGroup; import com.jude.beam.expansion.BeamBaseActivity; import com.jude.joy.R; import java.util.ArrayList; public class PictureActivity extends BeamBaseActivity { public static String KEY_PICTURES = \"pictures\"; public static String KEY_PICTURE = \"picture\"; public static String KEY_INDEX = \"index\"; private ViewPager mViewPager; private PictureFragmentAdapter mAdapter; private ArrayList<String> mPictures; @Override public void onCreate(Bundle savedInstanceState){ super.onCreate(savedInstanceState); mViewPager = new ViewPager(this); mViewPager.setId(R.id.about); mViewPager.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT)); setContentView(mViewPager); mAdapter = new PictureFragmentAdapter(getSupportFragmentManager()); mViewPager.setAdapter(mAdapter); mPictures = getIntent().getStringArrayListExtra(KEY_PICTURES); if (mPictures == null) mPictures = new ArrayList<>(); String picture = getIntent().getStringExtra(KEY_PICTURE); if (picture!=null) mPictures.add(picture); int index = getIntent().getIntExtra(KEY_INDEX,0); mAdapter.setPictures(mPictures); mViewPager.setCurrentItem(index); } @Override public boolean dispatchTouchEvent(MotionEvent ev) { return super.dispatchTouchEvent(ev); } static class PictureFragmentAdapter extends FragmentStatePagerAdapter { ArrayList<String> mPictures; public PictureFragmentAdapter(FragmentManager fm) { super(fm); } public void setPictures(ArrayList<String> pictures){ mPictures = pictures; notifyDataSetChanged(); } @Override public Fragment getItem(int position) { Fragment fragment = new PictureFragment(); Bundle bundle = new Bundle(); bundle.putString(\"picture\",mPictures.get(position)); fragment.setArguments(bundle); return fragment; } @Override public int getCount() { return mPictures==null?0:mPictures.size(); } } }","dependencies":[{"file_path":"Joy-master/app/src/main/java/com/jude/joy/module/image/PictureFragment.java","file_content":"package com.jude.joy.module.image; import android.os.Bundle; import android.support.annotation.Nullable; import android.support.v4.app.Fragment; import android.support.v7.widget.Toolbar; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.FrameLayout; import com.bumptech.glide.Glide; import com.jude.joy.R; import com.jude.joy.utils.ImageFilter; import com.jude.utils.JUtils; import com.pnikosis.materialishprogress.ProgressWheel; import butterknife.BindView; import butterknife.ButterKnife; import uk.co.senab.photoview.PhotoView; public class PictureFragment extends Fragment { String mPicture; @BindView(R.id.wheel) ProgressWheel wheel; @BindView(R.id.photoview) PhotoView photoview; @BindView(R.id.container) FrameLayout container; @BindView(R.id.toolbar) Toolbar toolbar; @Override public void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); mPicture = getArguments().getString(\"picture\"); JUtils.Log(\"PictureFragment onCreate \" + mPicture); } @Nullable @Override public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) { View view = inflater.inflate(R.layout.fragment_picture, container, false); ButterKnife.bind(this, view); return view; } @Override public void onActivityCreated(@Nullable Bundle savedInstanceState) { super.onActivityCreated(savedInstanceState); Glide.with(getContext()) .load(ImageFilter.filter(mPicture)) .into(photoview); } }"}]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/app/src/main/java/com/jude/joy/module/image/PictureFragment.java","main_file_content":"package com.jude.joy.module.image; import android.os.Bundle; import android.support.annotation.Nullable; import android.support.v4.app.Fragment; import android.support.v7.widget.Toolbar; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.FrameLayout; import com.bumptech.glide.Glide; import com.jude.joy.R; import com.jude.joy.utils.ImageFilter; import com.jude.utils.JUtils; import com.pnikosis.materialishprogress.ProgressWheel; import butterknife.BindView; import butterknife.ButterKnife; import uk.co.senab.photoview.PhotoView; public class PictureFragment extends Fragment { String mPicture; @BindView(R.id.wheel) ProgressWheel wheel; @BindView(R.id.photoview) PhotoView photoview; @BindView(R.id.container) FrameLayout container; @BindView(R.id.toolbar) Toolbar toolbar; @Override public void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); mPicture = getArguments().getString(\"picture\"); JUtils.Log(\"PictureFragment onCreate \" + mPicture); } @Nullable @Override public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) { View view = inflater.inflate(R.layout.fragment_picture, container, false); ButterKnife.bind(this, view); return view; } @Override public void onActivityCreated(@Nullable Bundle savedInstanceState) { super.onActivityCreated(savedInstanceState); Glide.with(getContext()) .load(ImageFilter.filter(mPicture)) .into(photoview); } }","dependencies":[{"file_path":"Joy-master/app/src/main/java/com/jude/joy/utils/ImageFilter.java","file_content":"package com.jude.joy.utils; public class ImageFilter { public static String filter(String original){ return original.split(\"\\\"\")[0]; } }"}]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/app/src/main/java/com/jude/joy/module/image/ImageJoyPresenter.java","main_file_content":"package com.jude.joy.module.image; import android.content.Intent; import android.os.Bundle; import android.support.annotation.NonNull; import com.bumptech.glide.Glide; import com.bumptech.glide.load.engine.DiskCacheStrategy; import com.jude.beam.expansion.list.BeamListFragmentPresenter; import com.jude.easyrecyclerview.adapter.RecyclerArrayAdapter; import com.jude.joy.model.bean.ImageJoy; import com.jude.joy.model.bean.ImageJoyPage; import com.jude.joy.model.server.DaggerServiceModelComponent; import com.jude.joy.model.server.SchedulerTransform; import com.jude.joy.model.server.ServiceAPI; import java.util.ArrayList; import javax.inject.Inject; public class ImageJoyPresenter extends BeamListFragmentPresenter<ImageJoyFragment,ImageJoy> { @Inject ServiceAPI mServer; @Override protected void onCreate(ImageJoyFragment view, Bundle savedState) { super.onCreate(view, savedState); DaggerServiceModelComponent.builder().build().inject(this); onRefresh(); } @Override protected void onCreateView(@NonNull ImageJoyFragment view) { super.onCreateView(view); getAdapter().setOnItemClickListener(new RecyclerArrayAdapter.OnItemClickListener() { @Override public void onItemClick(int position) { ArrayList<String> list = new ArrayList<String>(); for (ImageJoy imageJoy : getAdapter().getAllData()) { list.add(imageJoy.getImg()); } Intent i = new Intent(getView().getContext(),PictureActivity.class); i.putExtra(PictureActivity.KEY_PICTURES,list); i.putExtra(PictureActivity.KEY_INDEX,position); getView().startActivity(i); } }); } @Override public void onRefresh() { mServer.getImageJoyList(1) .compose(new SchedulerTransform<>()) .map(ImageJoyPage::getContentlist) .doAfterTerminate(()-> setCurPage(2)) .doOnNext(list->{ for (ImageJoy imageJoy : list) { String url = imageJoy.getImg(); Glide.with(getView()).load(url) .diskCacheStrategy(DiskCacheStrategy.SOURCE) .preload(); } }) .unsafeSubscribe(getRefreshSubscriber()); } @Override public void onLoadMore() { mServer.getImageJoyList(getCurPage()) .compose(new SchedulerTransform<>()) .map(ImageJoyPage::getContentlist) .doOnNext(list->{ for (ImageJoy imageJoy : list) { String url = imageJoy.getImg(); Glide.with(getView()).load(url) .diskCacheStrategy(DiskCacheStrategy.SOURCE) .preload(); } }) .unsafeSubscribe(getMoreSubscriber()); } }","dependencies":[{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/bean/ImageJoy.java","file_content":"package com.jude.joy.model.bean; public class ImageJoy { private String ct; private String img; private String title; private int type; public void setCt(String ct) { this.ct = ct; } public void setImg(String img) { this.img = img; } public void setTitle(String title) { this.title = title; } public void setType(int type) { this.type = type; } public String getCt() { return ct; } public String getImg() { return img; } public String getTitle() { return title; } public int getType() { return type; } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/bean/ImageJoyPage.java","file_content":"package com.jude.joy.model.bean; import java.util.List; public class ImageJoyPage { private int allNum; private int allPage; public int getAllNum() { return allNum; } public void setAllNum(int allNum) { this.allNum = allNum; } public int getAllPage() { return allPage; } public void setAllPage(int allPage) { this.allPage = allPage; } public List<ImageJoy> getContentlist() { return contentlist; } public void setContentlist(List<ImageJoy> contentlist) { this.contentlist = contentlist; } private List<ImageJoy> contentlist; }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/server/SchedulerTransform.java","file_content":"package com.jude.joy.model.server; import rx.Observable; import rx.android.schedulers.AndroidSchedulers; import rx.schedulers.Schedulers; public class SchedulerTransform<T> implements Observable.Transformer<T, T> { @Override public Observable<T> call(Observable<T> tObservable) { return tObservable .subscribeOn(Schedulers.io()) .observeOn(AndroidSchedulers.mainThread()) .unsubscribeOn(Schedulers.io()); } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/server/ServiceAPI.java","file_content":"package com.jude.joy.model.server; import com.jude.joy.model.bean.ImageJoyPage; import com.jude.joy.model.bean.TextJoyPage; import retrofit2.http.GET; import retrofit2.http.Query; import rx.Observable; public interface ServiceAPI { String BASEURL = \"http: @GET(\"showapi_joke/joke_text\") Observable<TextJoyPage> getTextJoyList(@Query(\"page\")int page); @GET(\"showapi_joke/joke_pic\") Observable<ImageJoyPage> getImageJoyList(@Query(\"page\")int page); }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/module/image/ImageJoyFragment.java","file_content":"package com.jude.joy.module.image; import android.view.ViewGroup; import com.jude.beam.bijection.RequiresPresenter; import com.jude.beam.expansion.list.BeamListFragment; import com.jude.beam.expansion.list.ListConfig; import com.jude.easyrecyclerview.adapter.BaseViewHolder; import com.jude.joy.model.bean.ImageJoy; @RequiresPresenter(ImageJoyPresenter.class) public class ImageJoyFragment extends BeamListFragment<ImageJoyPresenter,ImageJoy> { @Override public BaseViewHolder getViewHolder(ViewGroup viewGroup, int i) { return new ImageJoyVH(viewGroup); } @Override public ListConfig getConfig() { return super.getConfig() .setLoadmoreAble(true) .setRefreshAble(true) .setNoMoreAble(true) .setErrorAble(true) .setErrorTouchToResumeAble(true); } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/module/image/PictureActivity.java","file_content":"package com.jude.joy.module.image; import android.os.Bundle; import android.support.v4.app.Fragment; import android.support.v4.app.FragmentManager; import android.support.v4.app.FragmentStatePagerAdapter; import android.support.v4.view.ViewPager; import android.view.MotionEvent; import android.view.ViewGroup; import com.jude.beam.expansion.BeamBaseActivity; import com.jude.joy.R; import java.util.ArrayList; public class PictureActivity extends BeamBaseActivity { public static String KEY_PICTURES = \"pictures\"; public static String KEY_PICTURE = \"picture\"; public static String KEY_INDEX = \"index\"; private ViewPager mViewPager; private PictureFragmentAdapter mAdapter; private ArrayList<String> mPictures; @Override public void onCreate(Bundle savedInstanceState){ super.onCreate(savedInstanceState); mViewPager = new ViewPager(this); mViewPager.setId(R.id.about); mViewPager.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT)); setContentView(mViewPager); mAdapter = new PictureFragmentAdapter(getSupportFragmentManager()); mViewPager.setAdapter(mAdapter); mPictures = getIntent().getStringArrayListExtra(KEY_PICTURES); if (mPictures == null) mPictures = new ArrayList<>(); String picture = getIntent().getStringExtra(KEY_PICTURE); if (picture!=null) mPictures.add(picture); int index = getIntent().getIntExtra(KEY_INDEX,0); mAdapter.setPictures(mPictures); mViewPager.setCurrentItem(index); } @Override public boolean dispatchTouchEvent(MotionEvent ev) { return super.dispatchTouchEvent(ev); } static class PictureFragmentAdapter extends FragmentStatePagerAdapter { ArrayList<String> mPictures; public PictureFragmentAdapter(FragmentManager fm) { super(fm); } public void setPictures(ArrayList<String> pictures){ mPictures = pictures; notifyDataSetChanged(); } @Override public Fragment getItem(int position) { Fragment fragment = new PictureFragment(); Bundle bundle = new Bundle(); bundle.putString(\"picture\",mPictures.get(position)); fragment.setArguments(bundle); return fragment; } @Override public int getCount() { return mPictures==null?0:mPictures.size(); } } }"}]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/app/src/main/java/com/jude/joy/module/image/ImageJoyVH.java","main_file_content":"package com.jude.joy.module.image; import android.view.ViewGroup; import android.widget.ImageView; import android.widget.TextView; import com.bumptech.glide.Glide; import com.jude.easyrecyclerview.adapter.BaseViewHolder; import com.jude.joy.R; import com.jude.joy.model.bean.ImageJoy; import com.jude.joy.utils.ImageFilter; import com.jude.joy.utils.RecentDateFormat; import com.jude.utils.JTimeTransform; import butterknife.BindView; import butterknife.ButterKnife; public class ImageJoyVH extends BaseViewHolder<ImageJoy> { @BindView(R.id.title) TextView title; @BindView(R.id.image) ImageView image; @BindView(R.id.time) TextView time; public ImageJoyVH(ViewGroup parent) { super(parent, R.layout.item_joy_image); ButterKnife.bind(this, itemView); } @Override public void setData(ImageJoy data) { title.setText(data.getTitle()); Glide.clear(image); Glide.with(getContext()) .load(ImageFilter.filter(data.getImg())) .into(image); time.setText(new JTimeTransform().parse(\"yyyy-MM-dd hh:mm:ss\",data.getCt()).toString(new RecentDateFormat())); } }","dependencies":[{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/bean/ImageJoy.java","file_content":"package com.jude.joy.model.bean; public class ImageJoy { private String ct; private String img; private String title; private int type; public void setCt(String ct) { this.ct = ct; } public void setImg(String img) { this.img = img; } public void setTitle(String title) { this.title = title; } public void setType(int type) { this.type = type; } public String getCt() { return ct; } public String getImg() { return img; } public String getTitle() { return title; } public int getType() { return type; } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/utils/ImageFilter.java","file_content":"package com.jude.joy.utils; public class ImageFilter { public static String filter(String original){ return original.split(\"\\\"\")[0]; } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/utils/RecentDateFormat.java","file_content":"package com.jude.joy.utils; import com.jude.utils.JTimeTransform; public class RecentDateFormat implements JTimeTransform.DateFormat{ private String lastFormat; public RecentDateFormat() { this(\"MM-dd\"); } public RecentDateFormat(String lastFormat) { this.lastFormat = lastFormat; } @Override public String format(JTimeTransform date, long delta) { if (delta>0){ if (delta / JTimeTransform.SECOND < 1){ return delta +\"秒前\"; }else if (delta / JTimeTransform.HOUR < 1){ return delta / JTimeTransform.SECOND+\"分钟前\"; }else if (delta / JTimeTransform.DAY < 2 && new JTimeTransform().getDay() == date.getDay()){ return delta / JTimeTransform.HOUR+\"小时前\"; }else if (delta / JTimeTransform.DAY < 3 && new JTimeTransform().getDay() == new JTimeTransform(date.getTimestamp()+JTimeTransform.DAY).getDay()){ return \"昨天\"+date.toString(\"HH:mm\"); }else if (delta / JTimeTransform.DAY < 4 && new JTimeTransform().getDay() == new JTimeTransform(date.getTimestamp()+JTimeTransform.DAY*2).getDay()){ return \"前天\"+date.toString(\"HH:mm\"); }else{ return date.toString(lastFormat); } }else{ delta = -delta; if (delta / JTimeTransform.SECOND < 1){ return delta +\"秒后\"; }else if (delta / JTimeTransform.HOUR < 1){ return delta / JTimeTransform.SECOND+\"分钟后\"; }else if (delta / JTimeTransform.DAY > -2 && new JTimeTransform().getDay() == date.getDay()){ return delta / JTimeTransform.HOUR+\"小时后\"; }else if (delta / JTimeTransform.DAY > -3 && new JTimeTransform().getDay() == new JTimeTransform(date.getTimestamp()-JTimeTransform.DAY).getDay()){ return \"明天\"+date.toString(\"HH:mm\"); }else if (delta / JTimeTransform.DAY > -4 && new JTimeTransform().getDay() == new JTimeTransform(date.getTimestamp()-JTimeTransform.DAY*2).getDay()){ return \"后天\"+date.toString(\"HH:mm\"); }else{ return date.toString(lastFormat); } } } }"}]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/app/src/main/java/com/jude/joy/module/text/TextJoyFragment.java","main_file_content":"package com.jude.joy.module.text; import android.view.ViewGroup; import com.jude.beam.bijection.RequiresPresenter; import com.jude.beam.expansion.list.BeamListFragment; import com.jude.beam.expansion.list.ListConfig; import com.jude.easyrecyclerview.adapter.BaseViewHolder; import com.jude.joy.model.bean.TextJoy; @RequiresPresenter(TextJoyPresenter.class) public class TextJoyFragment extends BeamListFragment<TextJoyPresenter,TextJoy> { @Override public BaseViewHolder getViewHolder(ViewGroup viewGroup, int i) { return new TextJoyVH(viewGroup); } @Override public ListConfig getConfig() { return super.getConfig() .setLoadmoreAble(true) .setRefreshAble(true) .setNoMoreAble(true) .setErrorAble(true) .setErrorTouchToResumeAble(true); } }","dependencies":[{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/bean/TextJoy.java","file_content":"package com.jude.joy.model.bean; public class TextJoy { private String ct; private String text; private String title; private int type; public void setCt(String ct) { this.ct = ct; } public void setText(String text) { this.text = text; } public void setTitle(String title) { this.title = title; } public void setType(int type) { this.type = type; } public String getCt() { return ct; } public String getText() { return text; } public String getTitle() { return title; } public int getType() { return type; } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/module/text/TextJoyPresenter.java","file_content":"package com.jude.joy.module.text; import android.os.Bundle; import com.jude.beam.expansion.list.BeamListFragmentPresenter; import com.jude.joy.model.bean.TextJoy; import com.jude.joy.model.bean.TextJoyPage; import com.jude.joy.model.server.DaggerServiceModelComponent; import com.jude.joy.model.server.SchedulerTransform; import com.jude.joy.model.server.ServiceAPI; import javax.inject.Inject; public class TextJoyPresenter extends BeamListFragmentPresenter<TextJoyFragment,TextJoy> { @Inject ServiceAPI mServer; @Override protected void onCreate(TextJoyFragment view, Bundle savedState) { super.onCreate(view, savedState); DaggerServiceModelComponent.builder().build().inject(this); onRefresh(); } @Override public void onRefresh() { mServer.getTextJoyList(1) .compose(new SchedulerTransform<>()) .map(TextJoyPage::getContentlist) .doAfterTerminate(()-> setCurPage(2)) .unsafeSubscribe(getRefreshSubscriber()); } @Override public void onLoadMore() { mServer.getTextJoyList(getCurPage()) .compose(new SchedulerTransform<>()) .map(TextJoyPage::getContentlist) .unsafeSubscribe(getMoreSubscriber()); } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/module/text/TextJoyVH.java","file_content":"package com.jude.joy.module.text; import android.view.ViewGroup; import android.widget.TextView; import com.jude.easyrecyclerview.adapter.BaseViewHolder; import com.jude.joy.R; import com.jude.joy.model.bean.TextJoy; import com.jude.joy.utils.RecentDateFormat; import com.jude.joy.utils.TextFilter; import com.jude.utils.JTimeTransform; import butterknife.BindView; import butterknife.ButterKnife; public class TextJoyVH extends BaseViewHolder<TextJoy> { @BindView(R.id.content) TextView content; @BindView(R.id.time) TextView time; public TextJoyVH(ViewGroup parent) { super(parent, R.layout.item_joy_text); ButterKnife.bind(this,itemView); } @Override public void setData(TextJoy data) { content.setText(TextFilter.filter(data.getText())); time.setText(new JTimeTransform().parse(\"yyyy-MM-dd hh:mm:ss\",data.getCt()).toString(new RecentDateFormat())); } }"}]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/app/src/main/java/com/jude/joy/module/text/TextJoyVH.java","main_file_content":"package com.jude.joy.module.text; import android.view.ViewGroup; import android.widget.TextView; import com.jude.easyrecyclerview.adapter.BaseViewHolder; import com.jude.joy.R; import com.jude.joy.model.bean.TextJoy; import com.jude.joy.utils.RecentDateFormat; import com.jude.joy.utils.TextFilter; import com.jude.utils.JTimeTransform; import butterknife.BindView; import butterknife.ButterKnife; public class TextJoyVH extends BaseViewHolder<TextJoy> { @BindView(R.id.content) TextView content; @BindView(R.id.time) TextView time; public TextJoyVH(ViewGroup parent) { super(parent, R.layout.item_joy_text); ButterKnife.bind(this,itemView); } @Override public void setData(TextJoy data) { content.setText(TextFilter.filter(data.getText())); time.setText(new JTimeTransform().parse(\"yyyy-MM-dd hh:mm:ss\",data.getCt()).toString(new RecentDateFormat())); } }","dependencies":[{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/bean/TextJoy.java","file_content":"package com.jude.joy.model.bean; public class TextJoy { private String ct; private String text; private String title; private int type; public void setCt(String ct) { this.ct = ct; } public void setText(String text) { this.text = text; } public void setTitle(String title) { this.title = title; } public void setType(int type) { this.type = type; } public String getCt() { return ct; } public String getText() { return text; } public String getTitle() { return title; } public int getType() { return type; } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/utils/RecentDateFormat.java","file_content":"package com.jude.joy.utils; import com.jude.utils.JTimeTransform; public class RecentDateFormat implements JTimeTransform.DateFormat{ private String lastFormat; public RecentDateFormat() { this(\"MM-dd\"); } public RecentDateFormat(String lastFormat) { this.lastFormat = lastFormat; } @Override public String format(JTimeTransform date, long delta) { if (delta>0){ if (delta / JTimeTransform.SECOND < 1){ return delta +\"秒前\"; }else if (delta / JTimeTransform.HOUR < 1){ return delta / JTimeTransform.SECOND+\"分钟前\"; }else if (delta / JTimeTransform.DAY < 2 && new JTimeTransform().getDay() == date.getDay()){ return delta / JTimeTransform.HOUR+\"小时前\"; }else if (delta / JTimeTransform.DAY < 3 && new JTimeTransform().getDay() == new JTimeTransform(date.getTimestamp()+JTimeTransform.DAY).getDay()){ return \"昨天\"+date.toString(\"HH:mm\"); }else if (delta / JTimeTransform.DAY < 4 && new JTimeTransform().getDay() == new JTimeTransform(date.getTimestamp()+JTimeTransform.DAY*2).getDay()){ return \"前天\"+date.toString(\"HH:mm\"); }else{ return date.toString(lastFormat); } }else{ delta = -delta; if (delta / JTimeTransform.SECOND < 1){ return delta +\"秒后\"; }else if (delta / JTimeTransform.HOUR < 1){ return delta / JTimeTransform.SECOND+\"分钟后\"; }else if (delta / JTimeTransform.DAY > -2 && new JTimeTransform().getDay() == date.getDay()){ return delta / JTimeTransform.HOUR+\"小时后\"; }else if (delta / JTimeTransform.DAY > -3 && new JTimeTransform().getDay() == new JTimeTransform(date.getTimestamp()-JTimeTransform.DAY).getDay()){ return \"明天\"+date.toString(\"HH:mm\"); }else if (delta / JTimeTransform.DAY > -4 && new JTimeTransform().getDay() == new JTimeTransform(date.getTimestamp()-JTimeTransform.DAY*2).getDay()){ return \"后天\"+date.toString(\"HH:mm\"); }else{ return date.toString(lastFormat); } } } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/utils/TextFilter.java","file_content":"package com.jude.joy.utils; import com.jude.utils.JUtils; public class TextFilter { public static String[] FilterStrings = { \"</p>\", \"<p>\", \"&nbsp;\", \"&lt;/pstyle=\\\\\\\"text-indent:2em;text-align:left;\\\\\\\"&gt;\" }; public static String filter(String original){ JUtils.Log(\"index\"+original.indexOf(FilterStrings[1])); for (String filterString : FilterStrings) { original = original.replace(filterString, \"\"); } return original; } }"}]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/app/src/main/java/com/jude/joy/module/text/TextJoyPresenter.java","main_file_content":"package com.jude.joy.module.text; import android.os.Bundle; import com.jude.beam.expansion.list.BeamListFragmentPresenter; import com.jude.joy.model.bean.TextJoy; import com.jude.joy.model.bean.TextJoyPage; import com.jude.joy.model.server.DaggerServiceModelComponent; import com.jude.joy.model.server.SchedulerTransform; import com.jude.joy.model.server.ServiceAPI; import javax.inject.Inject; public class TextJoyPresenter extends BeamListFragmentPresenter<TextJoyFragment,TextJoy> { @Inject ServiceAPI mServer; @Override protected void onCreate(TextJoyFragment view, Bundle savedState) { super.onCreate(view, savedState); DaggerServiceModelComponent.builder().build().inject(this); onRefresh(); } @Override public void onRefresh() { mServer.getTextJoyList(1) .compose(new SchedulerTransform<>()) .map(TextJoyPage::getContentlist) .doAfterTerminate(()-> setCurPage(2)) .unsafeSubscribe(getRefreshSubscriber()); } @Override public void onLoadMore() { mServer.getTextJoyList(getCurPage()) .compose(new SchedulerTransform<>()) .map(TextJoyPage::getContentlist) .unsafeSubscribe(getMoreSubscriber()); } }","dependencies":[{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/bean/TextJoy.java","file_content":"package com.jude.joy.model.bean; public class TextJoy { private String ct; private String text; private String title; private int type; public void setCt(String ct) { this.ct = ct; } public void setText(String text) { this.text = text; } public void setTitle(String title) { this.title = title; } public void setType(int type) { this.type = type; } public String getCt() { return ct; } public String getText() { return text; } public String getTitle() { return title; } public int getType() { return type; } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/bean/TextJoyPage.java","file_content":"package com.jude.joy.model.bean; import java.util.List; public class TextJoyPage { private int allNum; private int allPage; private List<TextJoy> contentlist; public int getAllNum() { return allNum; } public void setAllNum(int allNum) { this.allNum = allNum; } public int getAllPage() { return allPage; } public void setAllPage(int allPage) { this.allPage = allPage; } public List<TextJoy> getContentlist() { return contentlist; } public void setContentlist(List<TextJoy> contentlist) { this.contentlist = contentlist; } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/server/SchedulerTransform.java","file_content":"package com.jude.joy.model.server; import rx.Observable; import rx.android.schedulers.AndroidSchedulers; import rx.schedulers.Schedulers; public class SchedulerTransform<T> implements Observable.Transformer<T, T> { @Override public Observable<T> call(Observable<T> tObservable) { return tObservable .subscribeOn(Schedulers.io()) .observeOn(AndroidSchedulers.mainThread()) .unsubscribeOn(Schedulers.io()); } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/model/server/ServiceAPI.java","file_content":"package com.jude.joy.model.server; import com.jude.joy.model.bean.ImageJoyPage; import com.jude.joy.model.bean.TextJoyPage; import retrofit2.http.GET; import retrofit2.http.Query; import rx.Observable; public interface ServiceAPI { String BASEURL = \"http: @GET(\"showapi_joke/joke_text\") Observable<TextJoyPage> getTextJoyList(@Query(\"page\")int page); @GET(\"showapi_joke/joke_pic\") Observable<ImageJoyPage> getImageJoyList(@Query(\"page\")int page); }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/module/text/TextJoyFragment.java","file_content":"package com.jude.joy.module.text; import android.view.ViewGroup; import com.jude.beam.bijection.RequiresPresenter; import com.jude.beam.expansion.list.BeamListFragment; import com.jude.beam.expansion.list.ListConfig; import com.jude.easyrecyclerview.adapter.BaseViewHolder; import com.jude.joy.model.bean.TextJoy; @RequiresPresenter(TextJoyPresenter.class) public class TextJoyFragment extends BeamListFragment<TextJoyPresenter,TextJoy> { @Override public BaseViewHolder getViewHolder(ViewGroup viewGroup, int i) { return new TextJoyVH(viewGroup); } @Override public ListConfig getConfig() { return super.getConfig() .setLoadmoreAble(true) .setRefreshAble(true) .setNoMoreAble(true) .setErrorAble(true) .setErrorTouchToResumeAble(true); } }"}]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/app/src/main/java/com/jude/joy/module/setting/AboutUsPresenter.java","main_file_content":"package com.jude.joy.module.setting; import com.jude.beam.bijection.Presenter; public class AboutUsPresenter extends Presenter<AboutUsActivity> { }","dependencies":[{"file_path":"Joy-master/app/src/main/java/com/jude/joy/module/setting/AboutUsActivity.java","file_content":"package com.jude.joy.module.setting; import android.os.Bundle; import android.widget.TextView; import com.jude.beam.bijection.RequiresPresenter; import com.jude.beam.expansion.BeamBaseActivity; import com.jude.joy.R; import com.jude.utils.JUtils; import butterknife.BindView; import butterknife.ButterKnife; @RequiresPresenter(AboutUsPresenter.class) public class AboutUsActivity extends BeamBaseActivity<AboutUsPresenter> { @BindView(R.id.version) TextView version; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_about); ButterKnife.bind(this); version.setText(\"v\"+ JUtils.getAppVersionName()); } }"}]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/app/src/main/java/com/jude/joy/module/setting/AboutUsActivity.java","main_file_content":"package com.jude.joy.module.setting; import android.os.Bundle; import android.widget.TextView; import com.jude.beam.bijection.RequiresPresenter; import com.jude.beam.expansion.BeamBaseActivity; import com.jude.joy.R; import com.jude.utils.JUtils; import butterknife.BindView; import butterknife.ButterKnife; @RequiresPresenter(AboutUsPresenter.class) public class AboutUsActivity extends BeamBaseActivity<AboutUsPresenter> { @BindView(R.id.version) TextView version; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_about); ButterKnife.bind(this); version.setText(\"v\"+ JUtils.getAppVersionName()); } }","dependencies":[{"file_path":"Joy-master/app/src/main/java/com/jude/joy/module/setting/AboutUsPresenter.java","file_content":"package com.jude.joy.module.setting; import com.jude.beam.bijection.Presenter; public class AboutUsPresenter extends Presenter<AboutUsActivity> { }"}]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/app/src/main/java/com/jude/joy/module/main/MainActivity.java","main_file_content":"package com.jude.joy.module.main; import android.content.Intent; import android.os.Bundle; import android.support.design.widget.AppBarLayout; import android.support.design.widget.CoordinatorLayout; import android.support.design.widget.TabLayout; import android.support.v4.app.Fragment; import android.support.v4.app.FragmentManager; import android.support.v4.app.FragmentStatePagerAdapter; import android.support.v4.view.ViewPager; import android.view.Menu; import android.view.MenuItem; import com.jude.beam.bijection.RequiresPresenter; import com.jude.beam.expansion.BeamBaseActivity; import com.jude.joy.R; import com.jude.joy.module.image.ImageJoyFragment; import com.jude.joy.module.setting.AboutUsActivity; import com.jude.joy.module.text.TextJoyFragment; import butterknife.BindView; import butterknife.ButterKnife; @RequiresPresenter(MainPresenter.class) public class MainActivity extends BeamBaseActivity<MainPresenter> { @BindView(R.id.viewPager) ViewPager viewpager; @BindView(R.id.app_bar_layout) AppBarLayout appBarLayout; @BindView(R.id.coordinator_layout) CoordinatorLayout coordinatorLayout; @BindView(R.id.tab_layout) TabLayout tabLayout; private MainPagerAdapter mMainPagerAdapter; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); getSupportActionBar().setTitle(\"豆逼 — 给你纯粹的欢乐\"); ButterKnife.bind(this); getSupportActionBar().setDisplayHomeAsUpEnabled(false); getSupportActionBar().setDisplayShowHomeEnabled(true); tabLayout.setTabTextColors(getResources().getColor(R.color.whiteTrans80), getResources().getColor(R.color.white)); viewpager.setAdapter(mMainPagerAdapter = new MainPagerAdapter(getSupportFragmentManager())); tabLayout.setupWithViewPager(viewpager); } public class MainPagerAdapter extends FragmentStatePagerAdapter { public MainPagerAdapter(FragmentManager fm) { super(fm); } @Override public Fragment getItem(int position) { switch (position) { case 0: return new TextJoyFragment(); default: return new ImageJoyFragment(); } } @Override public CharSequence getPageTitle(int position) { switch (position) { case 0: return \"段子\"; default: return \"图片\"; } } @Override public int getCount() { return 2; } } @Override public boolean onCreateOptionsMenu(Menu menu) { getMenuInflater().inflate(R.menu.menu_main, menu); return true; } @Override public boolean onOptionsItemSelected(MenuItem item) { int id = item.getItemId(); if (id == R.id.about) { startActivity(new Intent(this, AboutUsActivity.class)); return true; } return super.onOptionsItemSelected(item); } }","dependencies":[{"file_path":"Joy-master/app/src/main/java/com/jude/joy/module/image/ImageJoyFragment.java","file_content":"package com.jude.joy.module.image; import android.view.ViewGroup; import com.jude.beam.bijection.RequiresPresenter; import com.jude.beam.expansion.list.BeamListFragment; import com.jude.beam.expansion.list.ListConfig; import com.jude.easyrecyclerview.adapter.BaseViewHolder; import com.jude.joy.model.bean.ImageJoy; @RequiresPresenter(ImageJoyPresenter.class) public class ImageJoyFragment extends BeamListFragment<ImageJoyPresenter,ImageJoy> { @Override public BaseViewHolder getViewHolder(ViewGroup viewGroup, int i) { return new ImageJoyVH(viewGroup); } @Override public ListConfig getConfig() { return super.getConfig() .setLoadmoreAble(true) .setRefreshAble(true) .setNoMoreAble(true) .setErrorAble(true) .setErrorTouchToResumeAble(true); } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/module/main/MainPresenter.java","file_content":"package com.jude.joy.module.main; import com.jude.beam.bijection.Presenter; public class MainPresenter extends Presenter<MainActivity> { }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/module/setting/AboutUsActivity.java","file_content":"package com.jude.joy.module.setting; import android.os.Bundle; import android.widget.TextView; import com.jude.beam.bijection.RequiresPresenter; import com.jude.beam.expansion.BeamBaseActivity; import com.jude.joy.R; import com.jude.utils.JUtils; import butterknife.BindView; import butterknife.ButterKnife; @RequiresPresenter(AboutUsPresenter.class) public class AboutUsActivity extends BeamBaseActivity<AboutUsPresenter> { @BindView(R.id.version) TextView version; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_about); ButterKnife.bind(this); version.setText(\"v\"+ JUtils.getAppVersionName()); } }"},{"file_path":"Joy-master/app/src/main/java/com/jude/joy/module/text/TextJoyFragment.java","file_content":"package com.jude.joy.module.text; import android.view.ViewGroup; import com.jude.beam.bijection.RequiresPresenter; import com.jude.beam.expansion.list.BeamListFragment; import com.jude.beam.expansion.list.ListConfig; import com.jude.easyrecyclerview.adapter.BaseViewHolder; import com.jude.joy.model.bean.TextJoy; @RequiresPresenter(TextJoyPresenter.class) public class TextJoyFragment extends BeamListFragment<TextJoyPresenter,TextJoy> { @Override public BaseViewHolder getViewHolder(ViewGroup viewGroup, int i) { return new TextJoyVH(viewGroup); } @Override public ListConfig getConfig() { return super.getConfig() .setLoadmoreAble(true) .setRefreshAble(true) .setNoMoreAble(true) .setErrorAble(true) .setErrorTouchToResumeAble(true); } }"}]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/app/src/main/java/com/jude/joy/module/main/MainPresenter.java","main_file_content":"package com.jude.joy.module.main; import com.jude.beam.bijection.Presenter; public class MainPresenter extends Presenter<MainActivity> { }","dependencies":[{"file_path":"Joy-master/app/src/main/java/com/jude/joy/module/main/MainActivity.java","file_content":"package com.jude.joy.module.main; import android.content.Intent; import android.os.Bundle; import android.support.design.widget.AppBarLayout; import android.support.design.widget.CoordinatorLayout; import android.support.design.widget.TabLayout; import android.support.v4.app.Fragment; import android.support.v4.app.FragmentManager; import android.support.v4.app.FragmentStatePagerAdapter; import android.support.v4.view.ViewPager; import android.view.Menu; import android.view.MenuItem; import com.jude.beam.bijection.RequiresPresenter; import com.jude.beam.expansion.BeamBaseActivity; import com.jude.joy.R; import com.jude.joy.module.image.ImageJoyFragment; import com.jude.joy.module.setting.AboutUsActivity; import com.jude.joy.module.text.TextJoyFragment; import butterknife.BindView; import butterknife.ButterKnife; @RequiresPresenter(MainPresenter.class) public class MainActivity extends BeamBaseActivity<MainPresenter> { @BindView(R.id.viewPager) ViewPager viewpager; @BindView(R.id.app_bar_layout) AppBarLayout appBarLayout; @BindView(R.id.coordinator_layout) CoordinatorLayout coordinatorLayout; @BindView(R.id.tab_layout) TabLayout tabLayout; private MainPagerAdapter mMainPagerAdapter; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); getSupportActionBar().setTitle(\"豆逼 — 给你纯粹的欢乐\"); ButterKnife.bind(this); getSupportActionBar().setDisplayHomeAsUpEnabled(false); getSupportActionBar().setDisplayShowHomeEnabled(true); tabLayout.setTabTextColors(getResources().getColor(R.color.whiteTrans80), getResources().getColor(R.color.white)); viewpager.setAdapter(mMainPagerAdapter = new MainPagerAdapter(getSupportFragmentManager())); tabLayout.setupWithViewPager(viewpager); } public class MainPagerAdapter extends FragmentStatePagerAdapter { public MainPagerAdapter(FragmentManager fm) { super(fm); } @Override public Fragment getItem(int position) { switch (position) { case 0: return new TextJoyFragment(); default: return new ImageJoyFragment(); } } @Override public CharSequence getPageTitle(int position) { switch (position) { case 0: return \"段子\"; default: return \"图片\"; } } @Override public int getCount() { return 2; } } @Override public boolean onCreateOptionsMenu(Menu menu) { getMenuInflater().inflate(R.menu.menu_main, menu); return true; } @Override public boolean onOptionsItemSelected(MenuItem item) { int id = item.getItemId(); if (id == R.id.about) { startActivity(new Intent(this, AboutUsActivity.class)); return true; } return super.onOptionsItemSelected(item); } }"}]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/app/src/test/java/com/jude/joy/ExampleUnitTest.java","main_file_content":"package com.jude.joy; import org.junit.Test; import static org.junit.Assert.*; public class ExampleUnitTest { @Test public void addition_isCorrect() throws Exception { assertEquals(4, 2 + 2); } }","dependencies":[]}}
{"project_id":244,"chunk_id":0,"content":{"main_file_path":"Joy-master/app/src/androidTest/java/com/jude/joy/ApplicationTest.java","main_file_content":"package com.jude.joy; import android.app.Application; import android.test.ApplicationTestCase; public class ApplicationTest extends ApplicationTestCase<Application> { public ApplicationTest() { super(Application.class); } }","dependencies":[]}}
{"project_id":246,"chunk_id":0,"content":{"main_file_path":"Fraction_calculator-master/Fraction_calculator-master/FractionCalculator/src/Fraction.java","main_file_content":"public class Fraction { protected int numerator; protected int denominator; private static int count = 0; public int d = 0; public void setNumerator(int n) { this.numerator = n; } public float getValue(){ return (float) (numerator/denominator); } public void setDenominator(int d) throws ZeroDenominatorException{ if (d != 0) denominator = d; else throw new ZeroDenominatorException(\"Denominator Cant be Zero\"); } public int getNumerator() { return numerator; } public int getDenominator() { return denominator; } public Fraction() { this.numerator = 0; this.denominator = 1; incrementCount(); } public Fraction(int n, int d) throws ZeroDenominatorException{ if (d != 0) { this.numerator = n; this.denominator = d; incrementCount(); } else { throw new ZeroDenominatorException(\"Denominator Cant be Zero, initializing denominator to 1\"); } } public Fraction(int n) { this.numerator = n; this.denominator = 1; incrementCount(); } public Fraction (String s) { int slashIndex = s.indexOf('/'); this.numerator = Integer.parseInt(s.substring(0, slashIndex)); this.denominator = Integer.parseInt(s.substring(slashIndex + 1)); incrementCount(); } public static void incrementCount() { count++; } public static void printCount() { System.out.println(\"count = \" + count); } public Fraction inverse() { Fraction f = new Fraction(); try { f = new Fraction(denominator, numerator); } catch (ZeroDenominatorException zde) { zde.getMessage(); } return f; } public Fraction reduce() { int min = (numerator < denominator) ? numerator : denominator; int i = 2; while (i <= min) { if (numerator % i == 0 && denominator % i == 0) { numerator /= i; denominator /= i; } else ++i; } Fraction f = new Fraction(); try { f = new Fraction(numerator , denominator); } catch (ZeroDenominatorException zde) { zde.getMessage(); } return f; } public boolean isProper() { if (this.numerator < this.denominator) return true; else return false; } public void print() { System.out.print(this.numerator + \"/\" + this.denominator); } public Fraction add(Fraction second) { Fraction i = new Fraction(); try { i = new Fraction(this.getNumerator() * second.getDenominator() + second.getNumerator() * this.getDenominator(), this.getDenominator() * second.getDenominator()); } catch (ZeroDenominatorException zde) { zde.getMessage(); } i.reduce(); return i; } public Fraction subtract(Fraction second) { Fraction i = new Fraction(); try { i = new Fraction(this.getNumerator() * second.getDenominator() - second.getNumerator() * this.getDenominator(), this.getDenominator() * second.getDenominator()); } catch (ZeroDenominatorException zde) { zde.getMessage(); } i.reduce(); return i; } public Fraction multiply(Fraction frac) { int n, d; n = this.numerator * frac.getNumerator(); d = this.denominator * frac.getDenominator(); Fraction i = new Fraction(); try { i = new Fraction(n , d); } catch (ZeroDenominatorException zde) { zde.getMessage(); } i.reduce(); return i; } public Fraction divide(Fraction frac) { int n, d; frac = frac.inverse(); n = this.getNumerator() * frac.getNumerator(); d = this.getDenominator() * frac.getDenominator(); Fraction i = new Fraction(); try { i = new Fraction(n , d); } catch (ZeroDenominatorException zde) { zde.getMessage(); } i.reduce(); return i; } }","dependencies":[{"file_path":"Fraction_calculator-master/FractionCalculator/src/Fraction.java","file_content":"public class Fraction { protected int numerator; protected int denominator; private static int count = 0; public int d = 0; public void setNumerator(int n) { this.numerator = n; } public float getValue(){ return (float) (numerator/denominator); } public void setDenominator(int d) throws ZeroDenominatorException{ if (d != 0) denominator = d; else throw new ZeroDenominatorException(\"Denominator Cant be Zero\"); } public int getNumerator() { return numerator; } public int getDenominator() { return denominator; } public Fraction() { this.numerator = 0; this.denominator = 1; incrementCount(); } public Fraction(int n, int d) throws ZeroDenominatorException{ if (d != 0) { this.numerator = n; this.denominator = d; incrementCount(); } else { throw new ZeroDenominatorException(\"Denominator Cant be Zero, initializing denominator to 1\"); } } public Fraction(int n) { this.numerator = n; this.denominator = 1; incrementCount(); } public Fraction (String s) { int slashIndex = s.indexOf('/'); this.numerator = Integer.parseInt(s.substring(0, slashIndex)); this.denominator = Integer.parseInt(s.substring(slashIndex + 1)); incrementCount(); } public static void incrementCount() { count++; } public static void printCount() { System.out.println(\"count = \" + count); } public Fraction inverse() { Fraction f = new Fraction(); try { f = new Fraction(denominator, numerator); } catch (ZeroDenominatorException zde) { zde.getMessage(); } return f; } public Fraction reduce() { int min = (numerator < denominator) ? numerator : denominator; int i = 2; while (i <= min) { if (numerator % i == 0 && denominator % i == 0) { numerator /= i; denominator /= i; } else ++i; } Fraction f = new Fraction(); try { f = new Fraction(numerator , denominator); } catch (ZeroDenominatorException zde) { zde.getMessage(); } return f; } public boolean isProper() { if (this.numerator < this.denominator) return true; else return false; } public void print() { System.out.print(this.numerator + \"/\" + this.denominator); } public Fraction add(Fraction second) { Fraction i = new Fraction(); try { i = new Fraction(this.getNumerator() * second.getDenominator() + second.getNumerator() * this.getDenominator(), this.getDenominator() * second.getDenominator()); } catch (ZeroDenominatorException zde) { zde.getMessage(); } i.reduce(); return i; } public Fraction subtract(Fraction second) { Fraction i = new Fraction(); try { i = new Fraction(this.getNumerator() * second.getDenominator() - second.getNumerator() * this.getDenominator(), this.getDenominator() * second.getDenominator()); } catch (ZeroDenominatorException zde) { zde.getMessage(); } i.reduce(); return i; } public Fraction multiply(Fraction frac) { int n, d; n = this.numerator * frac.getNumerator(); d = this.denominator * frac.getDenominator(); Fraction i = new Fraction(); try { i = new Fraction(n , d); } catch (ZeroDenominatorException zde) { zde.getMessage(); } i.reduce(); return i; } public Fraction divide(Fraction frac) { int n, d; frac = frac.inverse(); n = this.getNumerator() * frac.getNumerator(); d = this.getDenominator() * frac.getDenominator(); Fraction i = new Fraction(); try { i = new Fraction(n , d); } catch (ZeroDenominatorException zde) { zde.getMessage(); } i.reduce(); return i; } }"},{"file_path":"Fraction_calculator-master/FractionCalculator/src/ZeroDenominatorException.java","file_content":"public class ZeroDenominatorException extends Exception { ZeroDenominatorException (String s) { super(s); } }"}]}}
{"project_id":246,"chunk_id":0,"content":{"main_file_path":"Fraction_calculator-master/Fraction_calculator-master/FractionCalculator/src/FractionCalculator.java","main_file_content":"import java.awt.*; import javax.swing.*; import javax.swing.text.JTextComponent; import javax.swing.text.TextAction; import java.awt.event.*; import javax.swing.GroupLayout.Alignment; import javax.swing.LayoutStyle.ComponentPlacement; public class FractionCalculator extends JFrame { JTextField numInput, denInput; int a; Fraction temp, temp1, res; static Fraction m1, m2; int k = 1, x = 0, y = 0, z = 0; char ch; JButton b1, b2, b3, b4, b5, b6, b7, b8, b9, b0, clr, pow2, pow3, plus, min, div, rec, mul, eq, addSub, mr, mc, mp, mm; Container cont; JPanel numPanel, denPanel, buttonPanel; FractionCalculator() { cont = getContentPane(); cont.setLayout(new BorderLayout()); numPanel = new JPanel(); denPanel = new JPanel(); denInput = new JTextField(25); denInput.setHorizontalAlignment(SwingConstants.RIGHT); denInput.addKeyListener(new KeyAdapter() { public void keyTyped(KeyEvent keyevent) { char c = keyevent.getKeyChar(); if (c >= '0' && c <= '9') { } else if (c == '\\n') { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { temp1 = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp1 = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp1 = new Fraction(0); } else { try { temp1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp1 = new Fraction(0); } } numInput.requestFocus(); switch (ch) { case '+': res = temp.add(temp1); break; case '-': res = temp.subtract(temp1); break; case '/': res = temp.divide(temp1); break; case '*': res = temp.multiply(temp1); break; } numInput.setText(Integer.toString(res.getNumerator())); denInput.setText(Integer.toString(res.getDenominator())); z = 1; try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null , zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } temp1 = new Fraction(0); denInput.requestFocus(); } else { keyevent.consume(); } } }); denInput.setUI(new JTextFieldHintUI(\"Denominator\" , Color.GRAY)); TextAction action = new TextAction(\"\") { @Override public void actionPerformed(ActionEvent e) { JTextComponent textField = getFocusedComponent(); String s = e.getActionCommand(); if (s.equals(\"1\")) { if (z == 0) { textField.setText(textField.getText() + \"1\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"1\"); z = 0; } } if (s.equals(\"2\")) { if (z == 0) { textField.setText(textField.getText() + \"2\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"2\"); z = 0; } } if (s.equals(\"3\")) { if (z == 0) { textField.setText(textField.getText() + \"3\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"3\"); z = 0; } } if (s.equals(\"4\")) { if (z == 0) { textField.setText(textField.getText() + \"4\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"4\"); z = 0; } } if (s.equals(\"5\")) { if (z == 0) { textField.setText(textField.getText() + \"5\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"5\"); z = 0; } } if (s.equals(\"6\")) { if (z == 0) { textField.setText(textField.getText() + \"6\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"6\"); z = 0; } } if (s.equals(\"7\")) { if (z == 0) { textField.setText(textField.getText() + \"7\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"7\"); z = 0; } } if (s.equals(\"8\")) { if (z == 0) { textField.setText(textField.getText() + \"8\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"8\"); z = 0; } } if (s.equals(\"9\")) { if (z == 0) { textField.setText(textField.getText() + \"9\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"9\"); z = 0; } } if (s.equals(\"0\")) { if (z == 0) { textField.setText(textField.getText() + \"0\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"0\"); z = 0; } } if (s.equals(\"AC\")) { numInput.setText(\"\"); denInput.setText(\"\"); x = 0; y = 0; z = 0; } if (s.equals(\"log\")) { if (textField.getText().equals(\"\")) { textField.setText(\"\"); } else { a = (int) Math.log(Integer.parseInt(textField.getText())); textField.setText(\"\"); textField.setText(textField.getText() + a); } } if (s.equals(\"1/x\")) { if (numInput.getText().equals(\"\") || Integer.parseInt(numInput.getText()) == 0) { numInput.setText(\"0\"); } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); } else { String s1 = numInput.getText() , s2 = denInput.getText(); numInput.setText(s2); denInput.setText(s1); } } if (s.equals(\"x^2\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); } else { int a = Integer.parseInt(numInput.getText()) , b = Integer.parseInt(denInput.getText()); numInput.setText(Integer.toString(a * a)); denInput.setText(Integer.toString(b * b)); } } if (s.equals(\"x^3\")) { if (textField.getText().equals(\"\")) { textField.setText(\"\"); } else { a = (int) Math.pow(Integer.parseInt(textField.getText()), 3); textField.setText(\"\"); textField.setText(textField.getText() + a); } } if (s.equals(\"+/-\")) { a = Integer.parseInt(textField.getText()); a *= -1; textField.setText(\"\" + a); } if (s.equals(\"+\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); temp = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } numInput.setText(\"0\"); denInput.setText(\"1\"); ch = '+'; y = 0; x = 0; } textField.requestFocus(); } if (s.equals(\"-\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); temp = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null , zde.getMessage()); temp = new Fraction(0); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } numInput.setText(\"0\"); denInput.setText(\"1\"); ch = '-'; y = 0; x = 0; } textField.requestFocus(); } if (s.equals(\"/\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); temp = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } numInput.setText(\"0\"); denInput.setText(\"1\"); ch = '/'; y = 0; x = 0; } textField.requestFocus(); } if (s.equals(\"*\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); temp = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(0); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } numInput.setText(\"0\"); denInput.setText(\"1\"); ch = '*'; y = 0; x = 0; } textField.requestFocus(); } if (s.equals(\"MC\")) { m1 = new Fraction(0); numInput.setText(\"0\"); denInput.setText(\"1\"); } if (s.equals(\"MR\")) { numInput.setText(\"\"); denInput.setText(\"\"); numInput.setText(numInput.getText() + m1.getNumerator()); denInput.setText(denInput.getText() + m1.getDenominator()); } if (s.equals(\"M+\")) { if (k == 1) { try { m1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); m1 = new Fraction(Integer.parseInt(numInput.getText())); } k++; } else { try { m1 = m1.add(new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText()))); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); m1 = m1.add(new Fraction(Integer.parseInt(numInput.getText()))); } numInput.setText(\"\" + m1.getNumerator()); denInput.setText(\"\" + m1.getDenominator()); } } if (s.equals(\"M-\")) { if (k == 1) { try { m1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); m1 = new Fraction(Integer.parseInt(numInput.getText())); } k++; } else { try { m1 = m1.subtract(new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText()))); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); m1 = m1.subtract(new Fraction(Integer.parseInt(numInput.getText()))); } numInput.setText(\"\" + m1.getNumerator()); denInput.setText(\"\" + m1.getDenominator()); } } if (s.equals(\"Sqrt\")) { if (textField.getText().equals(\"\")) { textField.setText(\"\"); } else { a = (int) Math.sqrt(Integer.parseInt(textField.getText())); textField.setText(\"\"); textField.setText(textField.getText() + a); } } if (s.equals(\"=\")) { if (textField.getText().equals(\"\")) { textField.setText(\"\"); } else { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { temp1 = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp1 = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp1 = new Fraction(0); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp1 = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp1 = new Fraction(Integer.parseInt(numInput.getText())); } } textField.requestFocus(); switch (ch) { case '+': res = temp.add(temp1); break; case '-': res = temp.subtract(temp1); break; case '/': res = temp.divide(temp1); break; case '*': res = temp.multiply(temp1); break; } numInput.setText(Integer.toString(res.getNumerator())); denInput.setText(Integer.toString(res.getDenominator())); z = 1; try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } temp1 = new Fraction(0); } } textField.requestFocus(); } }; buttonPanel = new JPanel(); buttonPanel.setLayout(new GridLayout(6, 4, 2, 2)); mr = new JButton(\"MR\"); buttonPanel.add(mr); mr.addActionListener(action); mc = new JButton(\"MC\"); buttonPanel.add(mc); mc.addActionListener(action); mp = new JButton(\"M+\"); buttonPanel.add(mp); mp.addActionListener(action); mm = new JButton(\"M-\"); buttonPanel.add(mm); mm.addActionListener(action); b1 = new JButton(\"1\"); buttonPanel.add(b1); b1.addActionListener(action); b2 = new JButton(\"2\"); buttonPanel.add(b2); b2.addActionListener(action); b3 = new JButton(\"3\"); buttonPanel.add(b3); b3.addActionListener(action); pow2 = new JButton(\"x^2\"); buttonPanel.add(pow2); pow2.addActionListener(action); b4 = new JButton(\"4\"); buttonPanel.add(b4); b4.addActionListener(action); b5 = new JButton(\"5\"); buttonPanel.add(b5); b5.addActionListener(action); b6 = new JButton(\"6\"); buttonPanel.add(b6); b6.addActionListener(action); pow3 = new JButton(\"x^3\"); buttonPanel.add(pow3); pow3.addActionListener(action); b7 = new JButton(\"7\"); buttonPanel.add(b7); b7.addActionListener(action); b8 = new JButton(\"8\"); buttonPanel.add(b8); b8.addActionListener(action); b9 = new JButton(\"9\"); buttonPanel.add(b9); b9.addActionListener(action); rec = new JButton(\"1/x\"); buttonPanel.add(rec); rec.addActionListener(action); addSub = new JButton(\"+/-\"); buttonPanel.add(addSub); addSub.addActionListener(action); b0 = new JButton(\"0\"); buttonPanel.add(b0); b0.addActionListener(action); mr.setBackground(Color.red);mr.setContentAreaFilled(false);mr.setOpaque(true); mc.setBackground(Color.red);mc.setContentAreaFilled(false);mc.setOpaque(true); mp.setBackground(Color.red);mp.setContentAreaFilled(false);mp.setOpaque(true); mm.setBackground(Color.red);mm.setContentAreaFilled(false);mm.setOpaque(true); pow2.setBackground(Color.BLUE);pow2.setContentAreaFilled(false);pow2.setOpaque(true); pow3.setBackground(Color.BLUE);pow3.setContentAreaFilled(false);pow3.setOpaque(true); rec.setBackground(Color.BLUE);rec.setContentAreaFilled(false);rec.setOpaque(true); addSub.setBackground(Color.LIGHT_GRAY);addSub.setContentAreaFilled(false);addSub.setOpaque(true); plus = new JButton(\"+\"); buttonPanel.add(plus); plus.addActionListener(action); min = new JButton(\"-\"); buttonPanel.add(min); min.addActionListener(action); clr = new JButton(\"AC\"); buttonPanel.add(clr); clr.addActionListener(action); eq = new JButton(\"=\"); buttonPanel.add(eq); eq.addActionListener(action); clr.setBackground(Color.CYAN);clr.setContentAreaFilled(false);clr.setOpaque(true); eq.setBackground(Color.CYAN);eq.setContentAreaFilled(false);eq.setOpaque(true); mul = new JButton(\"*\"); buttonPanel.add(mul); mul.addActionListener(action); div = new JButton(\"/\"); div.addActionListener(action); buttonPanel.add(div); plus.setBackground(Color.LIGHT_GRAY);plus.setContentAreaFilled(false);plus.setOpaque(true); min.setBackground(new Color(192, 192, 192));min.setContentAreaFilled(false);min.setOpaque(true); div.setBackground(Color.LIGHT_GRAY);div.setContentAreaFilled(false);div.setOpaque(true); mul.setBackground(Color.LIGHT_GRAY);mul.setContentAreaFilled(false);mul.setOpaque(true); cont.add(\"South\", buttonPanel); cont.add(\"Center\" , denPanel); numInput = new JTextField(25); numInput.setUI(new JTextFieldHintUI(\"Numerator\" , Color.GRAY)); numInput.setHorizontalAlignment(SwingConstants.RIGHT); numInput.addKeyListener(new KeyAdapter() { public void keyTyped(KeyEvent keyevent) { char c = keyevent.getKeyChar(); if (c >= '0' && c <= '9') { } else if (c == '\\n') { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { temp1 = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); temp1 = new Fraction(0); } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp1 = new Fraction(0); } else { try { temp1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null,zde.getMessage()); temp1 = new Fraction(Integer.parseInt(numInput.getText())); } } numInput.requestFocus(); switch (ch) { case '+': res = temp.add(temp1); break; case '-': res = temp.subtract(temp1); break; case '/': res = temp.divide(temp1); break; case '*': res = temp.multiply(temp1); break; } numInput.setText(Integer.toString(res.getNumerator())); denInput.setText(Integer.toString(res.getDenominator())); z = 1; try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null,zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } temp1 = new Fraction(0); numInput.requestFocus(); } else { keyevent.consume(); } } }); GroupLayout gl_denPanel = new GroupLayout(denPanel); gl_denPanel.setHorizontalGroup( gl_denPanel.createParallelGroup(Alignment.LEADING) .addGroup(gl_denPanel.createSequentialGroup() .addGroup(gl_denPanel.createParallelGroup(Alignment.LEADING) .addGroup(gl_denPanel.createSequentialGroup() .addGap(85) .addComponent(numInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)) .addGroup(gl_denPanel.createSequentialGroup() .addGap(83) .addComponent(denInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))) .addContainerGap(86, Short.MAX_VALUE)) ); gl_denPanel.setVerticalGroup( gl_denPanel.createParallelGroup(Alignment.LEADING) .addGroup(gl_denPanel.createSequentialGroup() .addGap(37) .addComponent(numInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE) .addGap(12) .addComponent(denInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE) .addContainerGap(43, Short.MAX_VALUE)) ); denPanel.setLayout(gl_denPanel); cont.add(\"North\", numPanel); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); } public static void main(String [] args) { try { UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\"); } catch (Exception e) {} FractionCalculator f = new FractionCalculator(); f.setResizable(false); f.setTitle(\"FractionCalculator\"); f.pack(); f.setVisible(true); } }","dependencies":[]}}
{"project_id":246,"chunk_id":1,"content":{"main_file_path":"Fraction_calculator-master/Fraction_calculator-master/FractionCalculator/src/FractionCalculator.java","main_file_content":"import java.awt.*; import javax.swing.*; import javax.swing.text.JTextComponent; import javax.swing.text.TextAction; import java.awt.event.*; import javax.swing.GroupLayout.Alignment; import javax.swing.LayoutStyle.ComponentPlacement; public class FractionCalculator extends JFrame { JTextField numInput, denInput; int a; Fraction temp, temp1, res; static Fraction m1, m2; int k = 1, x = 0, y = 0, z = 0; char ch; JButton b1, b2, b3, b4, b5, b6, b7, b8, b9, b0, clr, pow2, pow3, plus, min, div, rec, mul, eq, addSub, mr, mc, mp, mm; Container cont; JPanel numPanel, denPanel, buttonPanel; FractionCalculator() { cont = getContentPane(); cont.setLayout(new BorderLayout()); numPanel = new JPanel(); denPanel = new JPanel(); denInput = new JTextField(25); denInput.setHorizontalAlignment(SwingConstants.RIGHT); denInput.addKeyListener(new KeyAdapter() { public void keyTyped(KeyEvent keyevent) { char c = keyevent.getKeyChar(); if (c >= '0' && c <= '9') { } else if (c == '\\n') { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { temp1 = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp1 = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp1 = new Fraction(0); } else { try { temp1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp1 = new Fraction(0); } } numInput.requestFocus(); switch (ch) { case '+': res = temp.add(temp1); break; case '-': res = temp.subtract(temp1); break; case '/': res = temp.divide(temp1); break; case '*': res = temp.multiply(temp1); break; } numInput.setText(Integer.toString(res.getNumerator())); denInput.setText(Integer.toString(res.getDenominator())); z = 1; try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null , zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } temp1 = new Fraction(0); denInput.requestFocus(); } else { keyevent.consume(); } } }); denInput.setUI(new JTextFieldHintUI(\"Denominator\" , Color.GRAY)); TextAction action = new TextAction(\"\") { @Override public void actionPerformed(ActionEvent e) { JTextComponent textField = getFocusedComponent(); String s = e.getActionCommand(); if (s.equals(\"1\")) { if (z == 0) { textField.setText(textField.getText() + \"1\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"1\"); z = 0; } } if (s.equals(\"2\")) { if (z == 0) { textField.setText(textField.getText() + \"2\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"2\"); z = 0; } } if (s.equals(\"3\")) { if (z == 0) { textField.setText(textField.getText() + \"3\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"3\"); z = 0; } } if (s.equals(\"4\")) { if (z == 0) { textField.setText(textField.getText() + \"4\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"4\"); z = 0; } } if (s.equals(\"5\")) { if (z == 0) { textField.setText(textField.getText() + \"5\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"5\"); z = 0; } } if (s.equals(\"6\")) { if (z == 0) { textField.setText(textField.getText() + \"6\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"6\"); z = 0; } } if (s.equals(\"7\")) { if (z == 0) { textField.setText(textField.getText() + \"7\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"7\"); z = 0; } } if (s.equals(\"8\")) { if (z == 0) { textField.setText(textField.getText() + \"8\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"8\"); z = 0; } } if (s.equals(\"9\")) { if (z == 0) { textField.setText(textField.getText() + \"9\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"9\"); z = 0; } } if (s.equals(\"0\")) { if (z == 0) { textField.setText(textField.getText() + \"0\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"0\"); z = 0; } } if (s.equals(\"AC\")) { numInput.setText(\"\"); denInput.setText(\"\"); x = 0; y = 0; z = 0; } if (s.equals(\"log\")) { if (textField.getText().equals(\"\")) { textField.setText(\"\"); } else { a = (int) Math.log(Integer.parseInt(textField.getText())); textField.setText(\"\"); textField.setText(textField.getText() + a); } } if (s.equals(\"1/x\")) { if (numInput.getText().equals(\"\") || Integer.parseInt(numInput.getText()) == 0) { numInput.setText(\"0\"); } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); } else { String s1 = numInput.getText() , s2 = denInput.getText(); numInput.setText(s2); denInput.setText(s1); } } if (s.equals(\"x^2\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); } else { int a = Integer.parseInt(numInput.getText()) , b = Integer.parseInt(denInput.getText()); numInput.setText(Integer.toString(a * a)); denInput.setText(Integer.toString(b * b)); } } if (s.equals(\"x^3\")) { if (textField.getText().equals(\"\")) { textField.setText(\"\"); } else { a = (int) Math.pow(Integer.parseInt(textField.getText()), 3); textField.setText(\"\"); textField.setText(textField.getText() + a); } } if (s.equals(\"+/-\")) { a = Integer.parseInt(textField.getText()); a *= -1; textField.setText(\"\" + a); } if (s.equals(\"+\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); temp = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } numInput.setText(\"0\"); denInput.setText(\"1\"); ch = '+'; y = 0; x = 0; } textField.requestFocus(); } if (s.equals(\"-\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); temp = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null , zde.getMessage()); temp = new Fraction(0); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } numInput.setText(\"0\"); denInput.setText(\"1\"); ch = '-'; y = 0; x = 0; } textField.requestFocus(); } if (s.equals(\"/\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); temp = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } numInput.setText(\"0\"); denInput.setText(\"1\"); ch = '/'; y = 0; x = 0; } textField.requestFocus(); } if (s.equals(\"*\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); temp = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(0); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } numInput.setText(\"0\"); denInput.setText(\"1\"); ch = '*'; y = 0; x = 0; } textField.requestFocus(); } if (s.equals(\"MC\")) { m1 = new Fraction(0); numInput.setText(\"0\"); denInput.setText(\"1\"); } if (s.equals(\"MR\")) { numInput.setText(\"\"); denInput.setText(\"\"); numInput.setText(numInput.getText() + m1.getNumerator()); denInput.setText(denInput.getText() + m1.getDenominator()); } if (s.equals(\"M+\")) { if (k == 1) { try { m1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); m1 = new Fraction(Integer.parseInt(numInput.getText())); } k++; } else { try { m1 = m1.add(new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText()))); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); m1 = m1.add(new Fraction(Integer.parseInt(numInput.getText()))); } numInput.setText(\"\" + m1.getNumerator()); denInput.setText(\"\" + m1.getDenominator()); } } if (s.equals(\"M-\")) { if (k == 1) { try { m1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); m1 = new Fraction(Integer.parseInt(numInput.getText())); } k++; } else { try { m1 = m1.subtract(new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText()))); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); m1 = m1.subtract(new Fraction(Integer.parseInt(numInput.getText()))); } numInput.setText(\"\" + m1.getNumerator()); denInput.setText(\"\" + m1.getDenominator()); } } if (s.equals(\"Sqrt\")) { if (textField.getText().equals(\"\")) { textField.setText(\"\"); } else { a = (int) Math.sqrt(Integer.parseInt(textField.getText())); textField.setText(\"\"); textField.setText(textField.getText() + a); } } if (s.equals(\"=\")) { if (textField.getText().equals(\"\")) { textField.setText(\"\"); } else { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { temp1 = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp1 = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp1 = new Fraction(0); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp1 = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp1 = new Fraction(Integer.parseInt(numInput.getText())); } } textField.requestFocus(); switch (ch) { case '+': res = temp.add(temp1); break; case '-': res = temp.subtract(temp1); break; case '/': res = temp.divide(temp1); break; case '*': res = temp.multiply(temp1); break; } numInput.setText(Integer.toString(res.getNumerator())); denInput.setText(Integer.toString(res.getDenominator())); z = 1; try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } temp1 = new Fraction(0); } } textField.requestFocus(); } }; buttonPanel = new JPanel(); buttonPanel.setLayout(new GridLayout(6, 4, 2, 2)); mr = new JButton(\"MR\"); buttonPanel.add(mr); mr.addActionListener(action); mc = new JButton(\"MC\"); buttonPanel.add(mc); mc.addActionListener(action); mp = new JButton(\"M+\"); buttonPanel.add(mp); mp.addActionListener(action); mm = new JButton(\"M-\"); buttonPanel.add(mm); mm.addActionListener(action); b1 = new JButton(\"1\"); buttonPanel.add(b1); b1.addActionListener(action); b2 = new JButton(\"2\"); buttonPanel.add(b2); b2.addActionListener(action); b3 = new JButton(\"3\"); buttonPanel.add(b3); b3.addActionListener(action); pow2 = new JButton(\"x^2\"); buttonPanel.add(pow2); pow2.addActionListener(action); b4 = new JButton(\"4\"); buttonPanel.add(b4); b4.addActionListener(action); b5 = new JButton(\"5\"); buttonPanel.add(b5); b5.addActionListener(action); b6 = new JButton(\"6\"); buttonPanel.add(b6); b6.addActionListener(action); pow3 = new JButton(\"x^3\"); buttonPanel.add(pow3); pow3.addActionListener(action); b7 = new JButton(\"7\"); buttonPanel.add(b7); b7.addActionListener(action); b8 = new JButton(\"8\"); buttonPanel.add(b8); b8.addActionListener(action); b9 = new JButton(\"9\"); buttonPanel.add(b9); b9.addActionListener(action); rec = new JButton(\"1/x\"); buttonPanel.add(rec); rec.addActionListener(action); addSub = new JButton(\"+/-\"); buttonPanel.add(addSub); addSub.addActionListener(action); b0 = new JButton(\"0\"); buttonPanel.add(b0); b0.addActionListener(action); mr.setBackground(Color.red);mr.setContentAreaFilled(false);mr.setOpaque(true); mc.setBackground(Color.red);mc.setContentAreaFilled(false);mc.setOpaque(true); mp.setBackground(Color.red);mp.setContentAreaFilled(false);mp.setOpaque(true); mm.setBackground(Color.red);mm.setContentAreaFilled(false);mm.setOpaque(true); pow2.setBackground(Color.BLUE);pow2.setContentAreaFilled(false);pow2.setOpaque(true); pow3.setBackground(Color.BLUE);pow3.setContentAreaFilled(false);pow3.setOpaque(true); rec.setBackground(Color.BLUE);rec.setContentAreaFilled(false);rec.setOpaque(true); addSub.setBackground(Color.LIGHT_GRAY);addSub.setContentAreaFilled(false);addSub.setOpaque(true); plus = new JButton(\"+\"); buttonPanel.add(plus); plus.addActionListener(action); min = new JButton(\"-\"); buttonPanel.add(min); min.addActionListener(action); clr = new JButton(\"AC\"); buttonPanel.add(clr); clr.addActionListener(action); eq = new JButton(\"=\"); buttonPanel.add(eq); eq.addActionListener(action); clr.setBackground(Color.CYAN);clr.setContentAreaFilled(false);clr.setOpaque(true); eq.setBackground(Color.CYAN);eq.setContentAreaFilled(false);eq.setOpaque(true); mul = new JButton(\"*\"); buttonPanel.add(mul); mul.addActionListener(action); div = new JButton(\"/\"); div.addActionListener(action); buttonPanel.add(div); plus.setBackground(Color.LIGHT_GRAY);plus.setContentAreaFilled(false);plus.setOpaque(true); min.setBackground(new Color(192, 192, 192));min.setContentAreaFilled(false);min.setOpaque(true); div.setBackground(Color.LIGHT_GRAY);div.setContentAreaFilled(false);div.setOpaque(true); mul.setBackground(Color.LIGHT_GRAY);mul.setContentAreaFilled(false);mul.setOpaque(true); cont.add(\"South\", buttonPanel); cont.add(\"Center\" , denPanel); numInput = new JTextField(25); numInput.setUI(new JTextFieldHintUI(\"Numerator\" , Color.GRAY)); numInput.setHorizontalAlignment(SwingConstants.RIGHT); numInput.addKeyListener(new KeyAdapter() { public void keyTyped(KeyEvent keyevent) { char c = keyevent.getKeyChar(); if (c >= '0' && c <= '9') { } else if (c == '\\n') { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { temp1 = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); temp1 = new Fraction(0); } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp1 = new Fraction(0); } else { try { temp1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null,zde.getMessage()); temp1 = new Fraction(Integer.parseInt(numInput.getText())); } } numInput.requestFocus(); switch (ch) { case '+': res = temp.add(temp1); break; case '-': res = temp.subtract(temp1); break; case '/': res = temp.divide(temp1); break; case '*': res = temp.multiply(temp1); break; } numInput.setText(Integer.toString(res.getNumerator())); denInput.setText(Integer.toString(res.getDenominator())); z = 1; try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null,zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } temp1 = new Fraction(0); numInput.requestFocus(); } else { keyevent.consume(); } } }); GroupLayout gl_denPanel = new GroupLayout(denPanel); gl_denPanel.setHorizontalGroup( gl_denPanel.createParallelGroup(Alignment.LEADING) .addGroup(gl_denPanel.createSequentialGroup() .addGroup(gl_denPanel.createParallelGroup(Alignment.LEADING) .addGroup(gl_denPanel.createSequentialGroup() .addGap(85) .addComponent(numInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)) .addGroup(gl_denPanel.createSequentialGroup() .addGap(83) .addComponent(denInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))) .addContainerGap(86, Short.MAX_VALUE)) ); gl_denPanel.setVerticalGroup( gl_denPanel.createParallelGroup(Alignment.LEADING) .addGroup(gl_denPanel.createSequentialGroup() .addGap(37) .addComponent(numInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE) .addGap(12) .addComponent(denInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE) .addContainerGap(43, Short.MAX_VALUE)) ); denPanel.setLayout(gl_denPanel); cont.add(\"North\", numPanel); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); } public static void main(String [] args) { try { UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\"); } catch (Exception e) {} FractionCalculator f = new FractionCalculator(); f.setResizable(false); f.setTitle(\"FractionCalculator\"); f.pack(); f.setVisible(true); } }","dependencies":[{"file_path":"Fraction_calculator-master/FractionCalculator/src/Fraction.java","file_content":"public class Fraction { protected int numerator; protected int denominator; private static int count = 0; public int d = 0; public void setNumerator(int n) { this.numerator = n; } public float getValue(){ return (float) (numerator/denominator); } public void setDenominator(int d) throws ZeroDenominatorException{ if (d != 0) denominator = d; else throw new ZeroDenominatorException(\"Denominator Cant be Zero\"); } public int getNumerator() { return numerator; } public int getDenominator() { return denominator; } public Fraction() { this.numerator = 0; this.denominator = 1; incrementCount(); } public Fraction(int n, int d) throws ZeroDenominatorException{ if (d != 0) { this.numerator = n; this.denominator = d; incrementCount(); } else { throw new ZeroDenominatorException(\"Denominator Cant be Zero, initializing denominator to 1\"); } } public Fraction(int n) { this.numerator = n; this.denominator = 1; incrementCount(); } public Fraction (String s) { int slashIndex = s.indexOf('/'); this.numerator = Integer.parseInt(s.substring(0, slashIndex)); this.denominator = Integer.parseInt(s.substring(slashIndex + 1)); incrementCount(); } public static void incrementCount() { count++; } public static void printCount() { System.out.println(\"count = \" + count); } public Fraction inverse() { Fraction f = new Fraction(); try { f = new Fraction(denominator, numerator); } catch (ZeroDenominatorException zde) { zde.getMessage(); } return f; } public Fraction reduce() { int min = (numerator < denominator) ? numerator : denominator; int i = 2; while (i <= min) { if (numerator % i == 0 && denominator % i == 0) { numerator /= i; denominator /= i; } else ++i; } Fraction f = new Fraction(); try { f = new Fraction(numerator , denominator); } catch (ZeroDenominatorException zde) { zde.getMessage(); } return f; } public boolean isProper() { if (this.numerator < this.denominator) return true; else return false; } public void print() { System.out.print(this.numerator + \"/\" + this.denominator); } public Fraction add(Fraction second) { Fraction i = new Fraction(); try { i = new Fraction(this.getNumerator() * second.getDenominator() + second.getNumerator() * this.getDenominator(), this.getDenominator() * second.getDenominator()); } catch (ZeroDenominatorException zde) { zde.getMessage(); } i.reduce(); return i; } public Fraction subtract(Fraction second) { Fraction i = new Fraction(); try { i = new Fraction(this.getNumerator() * second.getDenominator() - second.getNumerator() * this.getDenominator(), this.getDenominator() * second.getDenominator()); } catch (ZeroDenominatorException zde) { zde.getMessage(); } i.reduce(); return i; } public Fraction multiply(Fraction frac) { int n, d; n = this.numerator * frac.getNumerator(); d = this.denominator * frac.getDenominator(); Fraction i = new Fraction(); try { i = new Fraction(n , d); } catch (ZeroDenominatorException zde) { zde.getMessage(); } i.reduce(); return i; } public Fraction divide(Fraction frac) { int n, d; frac = frac.inverse(); n = this.getNumerator() * frac.getNumerator(); d = this.getDenominator() * frac.getDenominator(); Fraction i = new Fraction(); try { i = new Fraction(n , d); } catch (ZeroDenominatorException zde) { zde.getMessage(); } i.reduce(); return i; } }"}]}}
{"project_id":246,"chunk_id":2,"content":{"main_file_path":"Fraction_calculator-master/Fraction_calculator-master/FractionCalculator/src/FractionCalculator.java","main_file_content":"import java.awt.*; import javax.swing.*; import javax.swing.text.JTextComponent; import javax.swing.text.TextAction; import java.awt.event.*; import javax.swing.GroupLayout.Alignment; import javax.swing.LayoutStyle.ComponentPlacement; public class FractionCalculator extends JFrame { JTextField numInput, denInput; int a; Fraction temp, temp1, res; static Fraction m1, m2; int k = 1, x = 0, y = 0, z = 0; char ch; JButton b1, b2, b3, b4, b5, b6, b7, b8, b9, b0, clr, pow2, pow3, plus, min, div, rec, mul, eq, addSub, mr, mc, mp, mm; Container cont; JPanel numPanel, denPanel, buttonPanel; FractionCalculator() { cont = getContentPane(); cont.setLayout(new BorderLayout()); numPanel = new JPanel(); denPanel = new JPanel(); denInput = new JTextField(25); denInput.setHorizontalAlignment(SwingConstants.RIGHT); denInput.addKeyListener(new KeyAdapter() { public void keyTyped(KeyEvent keyevent) { char c = keyevent.getKeyChar(); if (c >= '0' && c <= '9') { } else if (c == '\\n') { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { temp1 = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp1 = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp1 = new Fraction(0); } else { try { temp1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp1 = new Fraction(0); } } numInput.requestFocus(); switch (ch) { case '+': res = temp.add(temp1); break; case '-': res = temp.subtract(temp1); break; case '/': res = temp.divide(temp1); break; case '*': res = temp.multiply(temp1); break; } numInput.setText(Integer.toString(res.getNumerator())); denInput.setText(Integer.toString(res.getDenominator())); z = 1; try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null , zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } temp1 = new Fraction(0); denInput.requestFocus(); } else { keyevent.consume(); } } }); denInput.setUI(new JTextFieldHintUI(\"Denominator\" , Color.GRAY)); TextAction action = new TextAction(\"\") { @Override public void actionPerformed(ActionEvent e) { JTextComponent textField = getFocusedComponent(); String s = e.getActionCommand(); if (s.equals(\"1\")) { if (z == 0) { textField.setText(textField.getText() + \"1\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"1\"); z = 0; } } if (s.equals(\"2\")) { if (z == 0) { textField.setText(textField.getText() + \"2\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"2\"); z = 0; } } if (s.equals(\"3\")) { if (z == 0) { textField.setText(textField.getText() + \"3\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"3\"); z = 0; } } if (s.equals(\"4\")) { if (z == 0) { textField.setText(textField.getText() + \"4\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"4\"); z = 0; } } if (s.equals(\"5\")) { if (z == 0) { textField.setText(textField.getText() + \"5\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"5\"); z = 0; } } if (s.equals(\"6\")) { if (z == 0) { textField.setText(textField.getText() + \"6\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"6\"); z = 0; } } if (s.equals(\"7\")) { if (z == 0) { textField.setText(textField.getText() + \"7\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"7\"); z = 0; } } if (s.equals(\"8\")) { if (z == 0) { textField.setText(textField.getText() + \"8\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"8\"); z = 0; } } if (s.equals(\"9\")) { if (z == 0) { textField.setText(textField.getText() + \"9\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"9\"); z = 0; } } if (s.equals(\"0\")) { if (z == 0) { textField.setText(textField.getText() + \"0\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"0\"); z = 0; } } if (s.equals(\"AC\")) { numInput.setText(\"\"); denInput.setText(\"\"); x = 0; y = 0; z = 0; } if (s.equals(\"log\")) { if (textField.getText().equals(\"\")) { textField.setText(\"\"); } else { a = (int) Math.log(Integer.parseInt(textField.getText())); textField.setText(\"\"); textField.setText(textField.getText() + a); } } if (s.equals(\"1/x\")) { if (numInput.getText().equals(\"\") || Integer.parseInt(numInput.getText()) == 0) { numInput.setText(\"0\"); } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); } else { String s1 = numInput.getText() , s2 = denInput.getText(); numInput.setText(s2); denInput.setText(s1); } } if (s.equals(\"x^2\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); } else { int a = Integer.parseInt(numInput.getText()) , b = Integer.parseInt(denInput.getText()); numInput.setText(Integer.toString(a * a)); denInput.setText(Integer.toString(b * b)); } } if (s.equals(\"x^3\")) { if (textField.getText().equals(\"\")) { textField.setText(\"\"); } else { a = (int) Math.pow(Integer.parseInt(textField.getText()), 3); textField.setText(\"\"); textField.setText(textField.getText() + a); } } if (s.equals(\"+/-\")) { a = Integer.parseInt(textField.getText()); a *= -1; textField.setText(\"\" + a); } if (s.equals(\"+\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); temp = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } numInput.setText(\"0\"); denInput.setText(\"1\"); ch = '+'; y = 0; x = 0; } textField.requestFocus(); } if (s.equals(\"-\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); temp = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null , zde.getMessage()); temp = new Fraction(0); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } numInput.setText(\"0\"); denInput.setText(\"1\"); ch = '-'; y = 0; x = 0; } textField.requestFocus(); } if (s.equals(\"/\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); temp = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } numInput.setText(\"0\"); denInput.setText(\"1\"); ch = '/'; y = 0; x = 0; } textField.requestFocus(); } if (s.equals(\"*\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); temp = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(0); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } numInput.setText(\"0\"); denInput.setText(\"1\"); ch = '*'; y = 0; x = 0; } textField.requestFocus(); } if (s.equals(\"MC\")) { m1 = new Fraction(0); numInput.setText(\"0\"); denInput.setText(\"1\"); } if (s.equals(\"MR\")) { numInput.setText(\"\"); denInput.setText(\"\"); numInput.setText(numInput.getText() + m1.getNumerator()); denInput.setText(denInput.getText() + m1.getDenominator()); } if (s.equals(\"M+\")) { if (k == 1) { try { m1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); m1 = new Fraction(Integer.parseInt(numInput.getText())); } k++; } else { try { m1 = m1.add(new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText()))); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); m1 = m1.add(new Fraction(Integer.parseInt(numInput.getText()))); } numInput.setText(\"\" + m1.getNumerator()); denInput.setText(\"\" + m1.getDenominator()); } } if (s.equals(\"M-\")) { if (k == 1) { try { m1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); m1 = new Fraction(Integer.parseInt(numInput.getText())); } k++; } else { try { m1 = m1.subtract(new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText()))); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); m1 = m1.subtract(new Fraction(Integer.parseInt(numInput.getText()))); } numInput.setText(\"\" + m1.getNumerator()); denInput.setText(\"\" + m1.getDenominator()); } } if (s.equals(\"Sqrt\")) { if (textField.getText().equals(\"\")) { textField.setText(\"\"); } else { a = (int) Math.sqrt(Integer.parseInt(textField.getText())); textField.setText(\"\"); textField.setText(textField.getText() + a); } } if (s.equals(\"=\")) { if (textField.getText().equals(\"\")) { textField.setText(\"\"); } else { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { temp1 = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp1 = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp1 = new Fraction(0); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp1 = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp1 = new Fraction(Integer.parseInt(numInput.getText())); } } textField.requestFocus(); switch (ch) { case '+': res = temp.add(temp1); break; case '-': res = temp.subtract(temp1); break; case '/': res = temp.divide(temp1); break; case '*': res = temp.multiply(temp1); break; } numInput.setText(Integer.toString(res.getNumerator())); denInput.setText(Integer.toString(res.getDenominator())); z = 1; try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } temp1 = new Fraction(0); } } textField.requestFocus(); } }; buttonPanel = new JPanel(); buttonPanel.setLayout(new GridLayout(6, 4, 2, 2)); mr = new JButton(\"MR\"); buttonPanel.add(mr); mr.addActionListener(action); mc = new JButton(\"MC\"); buttonPanel.add(mc); mc.addActionListener(action); mp = new JButton(\"M+\"); buttonPanel.add(mp); mp.addActionListener(action); mm = new JButton(\"M-\"); buttonPanel.add(mm); mm.addActionListener(action); b1 = new JButton(\"1\"); buttonPanel.add(b1); b1.addActionListener(action); b2 = new JButton(\"2\"); buttonPanel.add(b2); b2.addActionListener(action); b3 = new JButton(\"3\"); buttonPanel.add(b3); b3.addActionListener(action); pow2 = new JButton(\"x^2\"); buttonPanel.add(pow2); pow2.addActionListener(action); b4 = new JButton(\"4\"); buttonPanel.add(b4); b4.addActionListener(action); b5 = new JButton(\"5\"); buttonPanel.add(b5); b5.addActionListener(action); b6 = new JButton(\"6\"); buttonPanel.add(b6); b6.addActionListener(action); pow3 = new JButton(\"x^3\"); buttonPanel.add(pow3); pow3.addActionListener(action); b7 = new JButton(\"7\"); buttonPanel.add(b7); b7.addActionListener(action); b8 = new JButton(\"8\"); buttonPanel.add(b8); b8.addActionListener(action); b9 = new JButton(\"9\"); buttonPanel.add(b9); b9.addActionListener(action); rec = new JButton(\"1/x\"); buttonPanel.add(rec); rec.addActionListener(action); addSub = new JButton(\"+/-\"); buttonPanel.add(addSub); addSub.addActionListener(action); b0 = new JButton(\"0\"); buttonPanel.add(b0); b0.addActionListener(action); mr.setBackground(Color.red);mr.setContentAreaFilled(false);mr.setOpaque(true); mc.setBackground(Color.red);mc.setContentAreaFilled(false);mc.setOpaque(true); mp.setBackground(Color.red);mp.setContentAreaFilled(false);mp.setOpaque(true); mm.setBackground(Color.red);mm.setContentAreaFilled(false);mm.setOpaque(true); pow2.setBackground(Color.BLUE);pow2.setContentAreaFilled(false);pow2.setOpaque(true); pow3.setBackground(Color.BLUE);pow3.setContentAreaFilled(false);pow3.setOpaque(true); rec.setBackground(Color.BLUE);rec.setContentAreaFilled(false);rec.setOpaque(true); addSub.setBackground(Color.LIGHT_GRAY);addSub.setContentAreaFilled(false);addSub.setOpaque(true); plus = new JButton(\"+\"); buttonPanel.add(plus); plus.addActionListener(action); min = new JButton(\"-\"); buttonPanel.add(min); min.addActionListener(action); clr = new JButton(\"AC\"); buttonPanel.add(clr); clr.addActionListener(action); eq = new JButton(\"=\"); buttonPanel.add(eq); eq.addActionListener(action); clr.setBackground(Color.CYAN);clr.setContentAreaFilled(false);clr.setOpaque(true); eq.setBackground(Color.CYAN);eq.setContentAreaFilled(false);eq.setOpaque(true); mul = new JButton(\"*\"); buttonPanel.add(mul); mul.addActionListener(action); div = new JButton(\"/\"); div.addActionListener(action); buttonPanel.add(div); plus.setBackground(Color.LIGHT_GRAY);plus.setContentAreaFilled(false);plus.setOpaque(true); min.setBackground(new Color(192, 192, 192));min.setContentAreaFilled(false);min.setOpaque(true); div.setBackground(Color.LIGHT_GRAY);div.setContentAreaFilled(false);div.setOpaque(true); mul.setBackground(Color.LIGHT_GRAY);mul.setContentAreaFilled(false);mul.setOpaque(true); cont.add(\"South\", buttonPanel); cont.add(\"Center\" , denPanel); numInput = new JTextField(25); numInput.setUI(new JTextFieldHintUI(\"Numerator\" , Color.GRAY)); numInput.setHorizontalAlignment(SwingConstants.RIGHT); numInput.addKeyListener(new KeyAdapter() { public void keyTyped(KeyEvent keyevent) { char c = keyevent.getKeyChar(); if (c >= '0' && c <= '9') { } else if (c == '\\n') { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { temp1 = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); temp1 = new Fraction(0); } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp1 = new Fraction(0); } else { try { temp1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null,zde.getMessage()); temp1 = new Fraction(Integer.parseInt(numInput.getText())); } } numInput.requestFocus(); switch (ch) { case '+': res = temp.add(temp1); break; case '-': res = temp.subtract(temp1); break; case '/': res = temp.divide(temp1); break; case '*': res = temp.multiply(temp1); break; } numInput.setText(Integer.toString(res.getNumerator())); denInput.setText(Integer.toString(res.getDenominator())); z = 1; try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null,zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } temp1 = new Fraction(0); numInput.requestFocus(); } else { keyevent.consume(); } } }); GroupLayout gl_denPanel = new GroupLayout(denPanel); gl_denPanel.setHorizontalGroup( gl_denPanel.createParallelGroup(Alignment.LEADING) .addGroup(gl_denPanel.createSequentialGroup() .addGroup(gl_denPanel.createParallelGroup(Alignment.LEADING) .addGroup(gl_denPanel.createSequentialGroup() .addGap(85) .addComponent(numInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)) .addGroup(gl_denPanel.createSequentialGroup() .addGap(83) .addComponent(denInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))) .addContainerGap(86, Short.MAX_VALUE)) ); gl_denPanel.setVerticalGroup( gl_denPanel.createParallelGroup(Alignment.LEADING) .addGroup(gl_denPanel.createSequentialGroup() .addGap(37) .addComponent(numInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE) .addGap(12) .addComponent(denInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE) .addContainerGap(43, Short.MAX_VALUE)) ); denPanel.setLayout(gl_denPanel); cont.add(\"North\", numPanel); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); } public static void main(String [] args) { try { UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\"); } catch (Exception e) {} FractionCalculator f = new FractionCalculator(); f.setResizable(false); f.setTitle(\"FractionCalculator\"); f.pack(); f.setVisible(true); } }","dependencies":[{"file_path":"Fraction_calculator-master/FractionCalculator/src/FractionCalculator.java","file_content":"import java.awt.*; import javax.swing.*; import javax.swing.text.JTextComponent; import javax.swing.text.TextAction; import java.awt.event.*; import javax.swing.GroupLayout.Alignment; import javax.swing.LayoutStyle.ComponentPlacement; public class FractionCalculator extends JFrame { JTextField numInput, denInput; int a; Fraction temp, temp1, res; static Fraction m1, m2; int k = 1, x = 0, y = 0, z = 0; char ch; JButton b1, b2, b3, b4, b5, b6, b7, b8, b9, b0, clr, pow2, pow3, plus, min, div, rec, mul, eq, addSub, mr, mc, mp, mm; Container cont; JPanel numPanel, denPanel, buttonPanel; FractionCalculator() { cont = getContentPane(); cont.setLayout(new BorderLayout()); numPanel = new JPanel(); denPanel = new JPanel(); denInput = new JTextField(25); denInput.setHorizontalAlignment(SwingConstants.RIGHT); denInput.addKeyListener(new KeyAdapter() { public void keyTyped(KeyEvent keyevent) { char c = keyevent.getKeyChar(); if (c >= '0' && c <= '9') { } else if (c == '\\n') { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { temp1 = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp1 = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp1 = new Fraction(0); } else { try { temp1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp1 = new Fraction(0); } } numInput.requestFocus(); switch (ch) { case '+': res = temp.add(temp1); break; case '-': res = temp.subtract(temp1); break; case '/': res = temp.divide(temp1); break; case '*': res = temp.multiply(temp1); break; } numInput.setText(Integer.toString(res.getNumerator())); denInput.setText(Integer.toString(res.getDenominator())); z = 1; try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null , zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } temp1 = new Fraction(0); denInput.requestFocus(); } else { keyevent.consume(); } } }); denInput.setUI(new JTextFieldHintUI(\"Denominator\" , Color.GRAY)); TextAction action = new TextAction(\"\") { @Override public void actionPerformed(ActionEvent e) { JTextComponent textField = getFocusedComponent(); String s = e.getActionCommand(); if (s.equals(\"1\")) { if (z == 0) { textField.setText(textField.getText() + \"1\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"1\"); z = 0; } } if (s.equals(\"2\")) { if (z == 0) { textField.setText(textField.getText() + \"2\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"2\"); z = 0; } } if (s.equals(\"3\")) { if (z == 0) { textField.setText(textField.getText() + \"3\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"3\"); z = 0; } } if (s.equals(\"4\")) { if (z == 0) { textField.setText(textField.getText() + \"4\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"4\"); z = 0; } } if (s.equals(\"5\")) { if (z == 0) { textField.setText(textField.getText() + \"5\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"5\"); z = 0; } } if (s.equals(\"6\")) { if (z == 0) { textField.setText(textField.getText() + \"6\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"6\"); z = 0; } } if (s.equals(\"7\")) { if (z == 0) { textField.setText(textField.getText() + \"7\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"7\"); z = 0; } } if (s.equals(\"8\")) { if (z == 0) { textField.setText(textField.getText() + \"8\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"8\"); z = 0; } } if (s.equals(\"9\")) { if (z == 0) { textField.setText(textField.getText() + \"9\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"9\"); z = 0; } } if (s.equals(\"0\")) { if (z == 0) { textField.setText(textField.getText() + \"0\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"0\"); z = 0; } } if (s.equals(\"AC\")) { numInput.setText(\"\"); denInput.setText(\"\"); x = 0; y = 0; z = 0; } if (s.equals(\"log\")) { if (textField.getText().equals(\"\")) { textField.setText(\"\"); } else { a = (int) Math.log(Integer.parseInt(textField.getText())); textField.setText(\"\"); textField.setText(textField.getText() + a); } } if (s.equals(\"1/x\")) { if (numInput.getText().equals(\"\") || Integer.parseInt(numInput.getText()) == 0) { numInput.setText(\"0\"); } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); } else { String s1 = numInput.getText() , s2 = denInput.getText(); numInput.setText(s2); denInput.setText(s1); } } if (s.equals(\"x^2\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); } else { int a = Integer.parseInt(numInput.getText()) , b = Integer.parseInt(denInput.getText()); numInput.setText(Integer.toString(a * a)); denInput.setText(Integer.toString(b * b)); } } if (s.equals(\"x^3\")) { if (textField.getText().equals(\"\")) { textField.setText(\"\"); } else { a = (int) Math.pow(Integer.parseInt(textField.getText()), 3); textField.setText(\"\"); textField.setText(textField.getText() + a); } } if (s.equals(\"+/-\")) { a = Integer.parseInt(textField.getText()); a *= -1; textField.setText(\"\" + a); } if (s.equals(\"+\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); temp = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } numInput.setText(\"0\"); denInput.setText(\"1\"); ch = '+'; y = 0; x = 0; } textField.requestFocus(); } if (s.equals(\"-\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); temp = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null , zde.getMessage()); temp = new Fraction(0); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } numInput.setText(\"0\"); denInput.setText(\"1\"); ch = '-'; y = 0; x = 0; } textField.requestFocus(); } if (s.equals(\"/\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); temp = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } numInput.setText(\"0\"); denInput.setText(\"1\"); ch = '/'; y = 0; x = 0; } textField.requestFocus(); } if (s.equals(\"*\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); temp = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(0); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } numInput.setText(\"0\"); denInput.setText(\"1\"); ch = '*'; y = 0; x = 0; } textField.requestFocus(); } if (s.equals(\"MC\")) { m1 = new Fraction(0); numInput.setText(\"0\"); denInput.setText(\"1\"); } if (s.equals(\"MR\")) { numInput.setText(\"\"); denInput.setText(\"\"); numInput.setText(numInput.getText() + m1.getNumerator()); denInput.setText(denInput.getText() + m1.getDenominator()); } if (s.equals(\"M+\")) { if (k == 1) { try { m1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); m1 = new Fraction(Integer.parseInt(numInput.getText())); } k++; } else { try { m1 = m1.add(new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText()))); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); m1 = m1.add(new Fraction(Integer.parseInt(numInput.getText()))); } numInput.setText(\"\" + m1.getNumerator()); denInput.setText(\"\" + m1.getDenominator()); } } if (s.equals(\"M-\")) { if (k == 1) { try { m1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); m1 = new Fraction(Integer.parseInt(numInput.getText())); } k++; } else { try { m1 = m1.subtract(new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText()))); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); m1 = m1.subtract(new Fraction(Integer.parseInt(numInput.getText()))); } numInput.setText(\"\" + m1.getNumerator()); denInput.setText(\"\" + m1.getDenominator()); } } if (s.equals(\"Sqrt\")) { if (textField.getText().equals(\"\")) { textField.setText(\"\"); } else { a = (int) Math.sqrt(Integer.parseInt(textField.getText())); textField.setText(\"\"); textField.setText(textField.getText() + a); } } if (s.equals(\"=\")) { if (textField.getText().equals(\"\")) { textField.setText(\"\"); } else { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { temp1 = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp1 = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp1 = new Fraction(0); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp1 = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp1 = new Fraction(Integer.parseInt(numInput.getText())); } } textField.requestFocus(); switch (ch) { case '+': res = temp.add(temp1); break; case '-': res = temp.subtract(temp1); break; case '/': res = temp.divide(temp1); break; case '*': res = temp.multiply(temp1); break; } numInput.setText(Integer.toString(res.getNumerator())); denInput.setText(Integer.toString(res.getDenominator())); z = 1; try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } temp1 = new Fraction(0); } } textField.requestFocus(); } }; buttonPanel = new JPanel(); buttonPanel.setLayout(new GridLayout(6, 4, 2, 2)); mr = new JButton(\"MR\"); buttonPanel.add(mr); mr.addActionListener(action); mc = new JButton(\"MC\"); buttonPanel.add(mc); mc.addActionListener(action); mp = new JButton(\"M+\"); buttonPanel.add(mp); mp.addActionListener(action); mm = new JButton(\"M-\"); buttonPanel.add(mm); mm.addActionListener(action); b1 = new JButton(\"1\"); buttonPanel.add(b1); b1.addActionListener(action); b2 = new JButton(\"2\"); buttonPanel.add(b2); b2.addActionListener(action); b3 = new JButton(\"3\"); buttonPanel.add(b3); b3.addActionListener(action); pow2 = new JButton(\"x^2\"); buttonPanel.add(pow2); pow2.addActionListener(action); b4 = new JButton(\"4\"); buttonPanel.add(b4); b4.addActionListener(action); b5 = new JButton(\"5\"); buttonPanel.add(b5); b5.addActionListener(action); b6 = new JButton(\"6\"); buttonPanel.add(b6); b6.addActionListener(action); pow3 = new JButton(\"x^3\"); buttonPanel.add(pow3); pow3.addActionListener(action); b7 = new JButton(\"7\"); buttonPanel.add(b7); b7.addActionListener(action); b8 = new JButton(\"8\"); buttonPanel.add(b8); b8.addActionListener(action); b9 = new JButton(\"9\"); buttonPanel.add(b9); b9.addActionListener(action); rec = new JButton(\"1/x\"); buttonPanel.add(rec); rec.addActionListener(action); addSub = new JButton(\"+/-\"); buttonPanel.add(addSub); addSub.addActionListener(action); b0 = new JButton(\"0\"); buttonPanel.add(b0); b0.addActionListener(action); mr.setBackground(Color.red);mr.setContentAreaFilled(false);mr.setOpaque(true); mc.setBackground(Color.red);mc.setContentAreaFilled(false);mc.setOpaque(true); mp.setBackground(Color.red);mp.setContentAreaFilled(false);mp.setOpaque(true); mm.setBackground(Color.red);mm.setContentAreaFilled(false);mm.setOpaque(true); pow2.setBackground(Color.BLUE);pow2.setContentAreaFilled(false);pow2.setOpaque(true); pow3.setBackground(Color.BLUE);pow3.setContentAreaFilled(false);pow3.setOpaque(true); rec.setBackground(Color.BLUE);rec.setContentAreaFilled(false);rec.setOpaque(true); addSub.setBackground(Color.LIGHT_GRAY);addSub.setContentAreaFilled(false);addSub.setOpaque(true); plus = new JButton(\"+\"); buttonPanel.add(plus); plus.addActionListener(action); min = new JButton(\"-\"); buttonPanel.add(min); min.addActionListener(action); clr = new JButton(\"AC\"); buttonPanel.add(clr); clr.addActionListener(action); eq = new JButton(\"=\"); buttonPanel.add(eq); eq.addActionListener(action); clr.setBackground(Color.CYAN);clr.setContentAreaFilled(false);clr.setOpaque(true); eq.setBackground(Color.CYAN);eq.setContentAreaFilled(false);eq.setOpaque(true); mul = new JButton(\"*\"); buttonPanel.add(mul); mul.addActionListener(action); div = new JButton(\"/\"); div.addActionListener(action); buttonPanel.add(div); plus.setBackground(Color.LIGHT_GRAY);plus.setContentAreaFilled(false);plus.setOpaque(true); min.setBackground(new Color(192, 192, 192));min.setContentAreaFilled(false);min.setOpaque(true); div.setBackground(Color.LIGHT_GRAY);div.setContentAreaFilled(false);div.setOpaque(true); mul.setBackground(Color.LIGHT_GRAY);mul.setContentAreaFilled(false);mul.setOpaque(true); cont.add(\"South\", buttonPanel); cont.add(\"Center\" , denPanel); numInput = new JTextField(25); numInput.setUI(new JTextFieldHintUI(\"Numerator\" , Color.GRAY)); numInput.setHorizontalAlignment(SwingConstants.RIGHT); numInput.addKeyListener(new KeyAdapter() { public void keyTyped(KeyEvent keyevent) { char c = keyevent.getKeyChar(); if (c >= '0' && c <= '9') { } else if (c == '\\n') { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { temp1 = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); temp1 = new Fraction(0); } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp1 = new Fraction(0); } else { try { temp1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null,zde.getMessage()); temp1 = new Fraction(Integer.parseInt(numInput.getText())); } } numInput.requestFocus(); switch (ch) { case '+': res = temp.add(temp1); break; case '-': res = temp.subtract(temp1); break; case '/': res = temp.divide(temp1); break; case '*': res = temp.multiply(temp1); break; } numInput.setText(Integer.toString(res.getNumerator())); denInput.setText(Integer.toString(res.getDenominator())); z = 1; try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null,zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } temp1 = new Fraction(0); numInput.requestFocus(); } else { keyevent.consume(); } } }); GroupLayout gl_denPanel = new GroupLayout(denPanel); gl_denPanel.setHorizontalGroup( gl_denPanel.createParallelGroup(Alignment.LEADING) .addGroup(gl_denPanel.createSequentialGroup() .addGroup(gl_denPanel.createParallelGroup(Alignment.LEADING) .addGroup(gl_denPanel.createSequentialGroup() .addGap(85) .addComponent(numInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)) .addGroup(gl_denPanel.createSequentialGroup() .addGap(83) .addComponent(denInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))) .addContainerGap(86, Short.MAX_VALUE)) ); gl_denPanel.setVerticalGroup( gl_denPanel.createParallelGroup(Alignment.LEADING) .addGroup(gl_denPanel.createSequentialGroup() .addGap(37) .addComponent(numInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE) .addGap(12) .addComponent(denInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE) .addContainerGap(43, Short.MAX_VALUE)) ); denPanel.setLayout(gl_denPanel); cont.add(\"North\", numPanel); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); } public static void main(String [] args) { try { UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\"); } catch (Exception e) {} FractionCalculator f = new FractionCalculator(); f.setResizable(false); f.setTitle(\"FractionCalculator\"); f.pack(); f.setVisible(true); } }"}]}}
{"project_id":246,"chunk_id":3,"content":{"main_file_path":"Fraction_calculator-master/Fraction_calculator-master/FractionCalculator/src/FractionCalculator.java","main_file_content":"import java.awt.*; import javax.swing.*; import javax.swing.text.JTextComponent; import javax.swing.text.TextAction; import java.awt.event.*; import javax.swing.GroupLayout.Alignment; import javax.swing.LayoutStyle.ComponentPlacement; public class FractionCalculator extends JFrame { JTextField numInput, denInput; int a; Fraction temp, temp1, res; static Fraction m1, m2; int k = 1, x = 0, y = 0, z = 0; char ch; JButton b1, b2, b3, b4, b5, b6, b7, b8, b9, b0, clr, pow2, pow3, plus, min, div, rec, mul, eq, addSub, mr, mc, mp, mm; Container cont; JPanel numPanel, denPanel, buttonPanel; FractionCalculator() { cont = getContentPane(); cont.setLayout(new BorderLayout()); numPanel = new JPanel(); denPanel = new JPanel(); denInput = new JTextField(25); denInput.setHorizontalAlignment(SwingConstants.RIGHT); denInput.addKeyListener(new KeyAdapter() { public void keyTyped(KeyEvent keyevent) { char c = keyevent.getKeyChar(); if (c >= '0' && c <= '9') { } else if (c == '\\n') { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { temp1 = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp1 = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp1 = new Fraction(0); } else { try { temp1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp1 = new Fraction(0); } } numInput.requestFocus(); switch (ch) { case '+': res = temp.add(temp1); break; case '-': res = temp.subtract(temp1); break; case '/': res = temp.divide(temp1); break; case '*': res = temp.multiply(temp1); break; } numInput.setText(Integer.toString(res.getNumerator())); denInput.setText(Integer.toString(res.getDenominator())); z = 1; try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null , zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } temp1 = new Fraction(0); denInput.requestFocus(); } else { keyevent.consume(); } } }); denInput.setUI(new JTextFieldHintUI(\"Denominator\" , Color.GRAY)); TextAction action = new TextAction(\"\") { @Override public void actionPerformed(ActionEvent e) { JTextComponent textField = getFocusedComponent(); String s = e.getActionCommand(); if (s.equals(\"1\")) { if (z == 0) { textField.setText(textField.getText() + \"1\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"1\"); z = 0; } } if (s.equals(\"2\")) { if (z == 0) { textField.setText(textField.getText() + \"2\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"2\"); z = 0; } } if (s.equals(\"3\")) { if (z == 0) { textField.setText(textField.getText() + \"3\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"3\"); z = 0; } } if (s.equals(\"4\")) { if (z == 0) { textField.setText(textField.getText() + \"4\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"4\"); z = 0; } } if (s.equals(\"5\")) { if (z == 0) { textField.setText(textField.getText() + \"5\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"5\"); z = 0; } } if (s.equals(\"6\")) { if (z == 0) { textField.setText(textField.getText() + \"6\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"6\"); z = 0; } } if (s.equals(\"7\")) { if (z == 0) { textField.setText(textField.getText() + \"7\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"7\"); z = 0; } } if (s.equals(\"8\")) { if (z == 0) { textField.setText(textField.getText() + \"8\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"8\"); z = 0; } } if (s.equals(\"9\")) { if (z == 0) { textField.setText(textField.getText() + \"9\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"9\"); z = 0; } } if (s.equals(\"0\")) { if (z == 0) { textField.setText(textField.getText() + \"0\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"0\"); z = 0; } } if (s.equals(\"AC\")) { numInput.setText(\"\"); denInput.setText(\"\"); x = 0; y = 0; z = 0; } if (s.equals(\"log\")) { if (textField.getText().equals(\"\")) { textField.setText(\"\"); } else { a = (int) Math.log(Integer.parseInt(textField.getText())); textField.setText(\"\"); textField.setText(textField.getText() + a); } } if (s.equals(\"1/x\")) { if (numInput.getText().equals(\"\") || Integer.parseInt(numInput.getText()) == 0) { numInput.setText(\"0\"); } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); } else { String s1 = numInput.getText() , s2 = denInput.getText(); numInput.setText(s2); denInput.setText(s1); } } if (s.equals(\"x^2\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); } else { int a = Integer.parseInt(numInput.getText()) , b = Integer.parseInt(denInput.getText()); numInput.setText(Integer.toString(a * a)); denInput.setText(Integer.toString(b * b)); } } if (s.equals(\"x^3\")) { if (textField.getText().equals(\"\")) { textField.setText(\"\"); } else { a = (int) Math.pow(Integer.parseInt(textField.getText()), 3); textField.setText(\"\"); textField.setText(textField.getText() + a); } } if (s.equals(\"+/-\")) { a = Integer.parseInt(textField.getText()); a *= -1; textField.setText(\"\" + a); } if (s.equals(\"+\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); temp = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } numInput.setText(\"0\"); denInput.setText(\"1\"); ch = '+'; y = 0; x = 0; } textField.requestFocus(); } if (s.equals(\"-\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); temp = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null , zde.getMessage()); temp = new Fraction(0); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } numInput.setText(\"0\"); denInput.setText(\"1\"); ch = '-'; y = 0; x = 0; } textField.requestFocus(); } if (s.equals(\"/\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); temp = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } numInput.setText(\"0\"); denInput.setText(\"1\"); ch = '/'; y = 0; x = 0; } textField.requestFocus(); } if (s.equals(\"*\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); temp = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(0); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } numInput.setText(\"0\"); denInput.setText(\"1\"); ch = '*'; y = 0; x = 0; } textField.requestFocus(); } if (s.equals(\"MC\")) { m1 = new Fraction(0); numInput.setText(\"0\"); denInput.setText(\"1\"); } if (s.equals(\"MR\")) { numInput.setText(\"\"); denInput.setText(\"\"); numInput.setText(numInput.getText() + m1.getNumerator()); denInput.setText(denInput.getText() + m1.getDenominator()); } if (s.equals(\"M+\")) { if (k == 1) { try { m1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); m1 = new Fraction(Integer.parseInt(numInput.getText())); } k++; } else { try { m1 = m1.add(new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText()))); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); m1 = m1.add(new Fraction(Integer.parseInt(numInput.getText()))); } numInput.setText(\"\" + m1.getNumerator()); denInput.setText(\"\" + m1.getDenominator()); } } if (s.equals(\"M-\")) { if (k == 1) { try { m1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); m1 = new Fraction(Integer.parseInt(numInput.getText())); } k++; } else { try { m1 = m1.subtract(new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText()))); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); m1 = m1.subtract(new Fraction(Integer.parseInt(numInput.getText()))); } numInput.setText(\"\" + m1.getNumerator()); denInput.setText(\"\" + m1.getDenominator()); } } if (s.equals(\"Sqrt\")) { if (textField.getText().equals(\"\")) { textField.setText(\"\"); } else { a = (int) Math.sqrt(Integer.parseInt(textField.getText())); textField.setText(\"\"); textField.setText(textField.getText() + a); } } if (s.equals(\"=\")) { if (textField.getText().equals(\"\")) { textField.setText(\"\"); } else { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { temp1 = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp1 = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp1 = new Fraction(0); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp1 = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp1 = new Fraction(Integer.parseInt(numInput.getText())); } } textField.requestFocus(); switch (ch) { case '+': res = temp.add(temp1); break; case '-': res = temp.subtract(temp1); break; case '/': res = temp.divide(temp1); break; case '*': res = temp.multiply(temp1); break; } numInput.setText(Integer.toString(res.getNumerator())); denInput.setText(Integer.toString(res.getDenominator())); z = 1; try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } temp1 = new Fraction(0); } } textField.requestFocus(); } }; buttonPanel = new JPanel(); buttonPanel.setLayout(new GridLayout(6, 4, 2, 2)); mr = new JButton(\"MR\"); buttonPanel.add(mr); mr.addActionListener(action); mc = new JButton(\"MC\"); buttonPanel.add(mc); mc.addActionListener(action); mp = new JButton(\"M+\"); buttonPanel.add(mp); mp.addActionListener(action); mm = new JButton(\"M-\"); buttonPanel.add(mm); mm.addActionListener(action); b1 = new JButton(\"1\"); buttonPanel.add(b1); b1.addActionListener(action); b2 = new JButton(\"2\"); buttonPanel.add(b2); b2.addActionListener(action); b3 = new JButton(\"3\"); buttonPanel.add(b3); b3.addActionListener(action); pow2 = new JButton(\"x^2\"); buttonPanel.add(pow2); pow2.addActionListener(action); b4 = new JButton(\"4\"); buttonPanel.add(b4); b4.addActionListener(action); b5 = new JButton(\"5\"); buttonPanel.add(b5); b5.addActionListener(action); b6 = new JButton(\"6\"); buttonPanel.add(b6); b6.addActionListener(action); pow3 = new JButton(\"x^3\"); buttonPanel.add(pow3); pow3.addActionListener(action); b7 = new JButton(\"7\"); buttonPanel.add(b7); b7.addActionListener(action); b8 = new JButton(\"8\"); buttonPanel.add(b8); b8.addActionListener(action); b9 = new JButton(\"9\"); buttonPanel.add(b9); b9.addActionListener(action); rec = new JButton(\"1/x\"); buttonPanel.add(rec); rec.addActionListener(action); addSub = new JButton(\"+/-\"); buttonPanel.add(addSub); addSub.addActionListener(action); b0 = new JButton(\"0\"); buttonPanel.add(b0); b0.addActionListener(action); mr.setBackground(Color.red);mr.setContentAreaFilled(false);mr.setOpaque(true); mc.setBackground(Color.red);mc.setContentAreaFilled(false);mc.setOpaque(true); mp.setBackground(Color.red);mp.setContentAreaFilled(false);mp.setOpaque(true); mm.setBackground(Color.red);mm.setContentAreaFilled(false);mm.setOpaque(true); pow2.setBackground(Color.BLUE);pow2.setContentAreaFilled(false);pow2.setOpaque(true); pow3.setBackground(Color.BLUE);pow3.setContentAreaFilled(false);pow3.setOpaque(true); rec.setBackground(Color.BLUE);rec.setContentAreaFilled(false);rec.setOpaque(true); addSub.setBackground(Color.LIGHT_GRAY);addSub.setContentAreaFilled(false);addSub.setOpaque(true); plus = new JButton(\"+\"); buttonPanel.add(plus); plus.addActionListener(action); min = new JButton(\"-\"); buttonPanel.add(min); min.addActionListener(action); clr = new JButton(\"AC\"); buttonPanel.add(clr); clr.addActionListener(action); eq = new JButton(\"=\"); buttonPanel.add(eq); eq.addActionListener(action); clr.setBackground(Color.CYAN);clr.setContentAreaFilled(false);clr.setOpaque(true); eq.setBackground(Color.CYAN);eq.setContentAreaFilled(false);eq.setOpaque(true); mul = new JButton(\"*\"); buttonPanel.add(mul); mul.addActionListener(action); div = new JButton(\"/\"); div.addActionListener(action); buttonPanel.add(div); plus.setBackground(Color.LIGHT_GRAY);plus.setContentAreaFilled(false);plus.setOpaque(true); min.setBackground(new Color(192, 192, 192));min.setContentAreaFilled(false);min.setOpaque(true); div.setBackground(Color.LIGHT_GRAY);div.setContentAreaFilled(false);div.setOpaque(true); mul.setBackground(Color.LIGHT_GRAY);mul.setContentAreaFilled(false);mul.setOpaque(true); cont.add(\"South\", buttonPanel); cont.add(\"Center\" , denPanel); numInput = new JTextField(25); numInput.setUI(new JTextFieldHintUI(\"Numerator\" , Color.GRAY)); numInput.setHorizontalAlignment(SwingConstants.RIGHT); numInput.addKeyListener(new KeyAdapter() { public void keyTyped(KeyEvent keyevent) { char c = keyevent.getKeyChar(); if (c >= '0' && c <= '9') { } else if (c == '\\n') { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { temp1 = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); temp1 = new Fraction(0); } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp1 = new Fraction(0); } else { try { temp1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null,zde.getMessage()); temp1 = new Fraction(Integer.parseInt(numInput.getText())); } } numInput.requestFocus(); switch (ch) { case '+': res = temp.add(temp1); break; case '-': res = temp.subtract(temp1); break; case '/': res = temp.divide(temp1); break; case '*': res = temp.multiply(temp1); break; } numInput.setText(Integer.toString(res.getNumerator())); denInput.setText(Integer.toString(res.getDenominator())); z = 1; try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null,zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } temp1 = new Fraction(0); numInput.requestFocus(); } else { keyevent.consume(); } } }); GroupLayout gl_denPanel = new GroupLayout(denPanel); gl_denPanel.setHorizontalGroup( gl_denPanel.createParallelGroup(Alignment.LEADING) .addGroup(gl_denPanel.createSequentialGroup() .addGroup(gl_denPanel.createParallelGroup(Alignment.LEADING) .addGroup(gl_denPanel.createSequentialGroup() .addGap(85) .addComponent(numInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)) .addGroup(gl_denPanel.createSequentialGroup() .addGap(83) .addComponent(denInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))) .addContainerGap(86, Short.MAX_VALUE)) ); gl_denPanel.setVerticalGroup( gl_denPanel.createParallelGroup(Alignment.LEADING) .addGroup(gl_denPanel.createSequentialGroup() .addGap(37) .addComponent(numInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE) .addGap(12) .addComponent(denInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE) .addContainerGap(43, Short.MAX_VALUE)) ); denPanel.setLayout(gl_denPanel); cont.add(\"North\", numPanel); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); } public static void main(String [] args) { try { UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\"); } catch (Exception e) {} FractionCalculator f = new FractionCalculator(); f.setResizable(false); f.setTitle(\"FractionCalculator\"); f.pack(); f.setVisible(true); } }","dependencies":[{"file_path":"Fraction_calculator-master/FractionCalculator/src/JTextFieldHintUI.java","file_content":"import java.awt.Color; import java.awt.Graphics; import java.awt.event.FocusEvent; import java.awt.event.FocusListener; import javax.swing.plaf.basic.BasicTextFieldUI; import javax.swing.text.JTextComponent; public class JTextFieldHintUI extends BasicTextFieldUI implements FocusListener { private String hint; private Color hintColor; public JTextFieldHintUI(String hint, Color hintColor) { this.hint = hint; this.hintColor = hintColor; } private void repaint() { if (getComponent() != null) { getComponent().repaint(); } } @Override protected void paintSafely(Graphics g) { super.paintSafely(g); JTextComponent component = getComponent(); if (component.getText().length() == 0 && !component.hasFocus()) { g.setColor(hintColor); int padding = (component.getHeight() - component.getFont().getSize()) / 2; int inset = 3; g.drawString(hint, inset, component.getHeight() - padding - inset); } } @Override public void focusGained(FocusEvent e) { repaint(); } @Override public void focusLost(FocusEvent e) { repaint(); } @Override public void installListeners() { super.installListeners(); getComponent().addFocusListener(this); } @Override public void uninstallListeners() { super.uninstallListeners(); getComponent().removeFocusListener(this); } }"},{"file_path":"Fraction_calculator-master/FractionCalculator/src/ZeroDenominatorException.java","file_content":"public class ZeroDenominatorException extends Exception { ZeroDenominatorException (String s) { super(s); } }"}]}}
{"project_id":246,"chunk_id":0,"content":{"main_file_path":"Fraction_calculator-master/Fraction_calculator-master/FractionCalculator/src/ZeroDenominatorException.java","main_file_content":"public class ZeroDenominatorException extends Exception { ZeroDenominatorException (String s) { super(s); } }","dependencies":[]}}
{"project_id":246,"chunk_id":0,"content":{"main_file_path":"Fraction_calculator-master/Fraction_calculator-master/FractionCalculator/src/JTextFieldHintUI.java","main_file_content":"import java.awt.Color; import java.awt.Graphics; import java.awt.event.FocusEvent; import java.awt.event.FocusListener; import javax.swing.plaf.basic.BasicTextFieldUI; import javax.swing.text.JTextComponent; public class JTextFieldHintUI extends BasicTextFieldUI implements FocusListener { private String hint; private Color hintColor; public JTextFieldHintUI(String hint, Color hintColor) { this.hint = hint; this.hintColor = hintColor; } private void repaint() { if (getComponent() != null) { getComponent().repaint(); } } @Override protected void paintSafely(Graphics g) { super.paintSafely(g); JTextComponent component = getComponent(); if (component.getText().length() == 0 && !component.hasFocus()) { g.setColor(hintColor); int padding = (component.getHeight() - component.getFont().getSize()) / 2; int inset = 3; g.drawString(hint, inset, component.getHeight() - padding - inset); } } @Override public void focusGained(FocusEvent e) { repaint(); } @Override public void focusLost(FocusEvent e) { repaint(); } @Override public void installListeners() { super.installListeners(); getComponent().addFocusListener(this); } @Override public void uninstallListeners() { super.uninstallListeners(); getComponent().removeFocusListener(this); } }","dependencies":[]}}
{"project_id":246,"chunk_id":0,"content":{"main_file_path":"Fraction_calculator-master/FractionCalculator/src/Fraction.java","main_file_content":"public class Fraction { protected int numerator; protected int denominator; private static int count = 0; public int d = 0; public void setNumerator(int n) { this.numerator = n; } public float getValue(){ return (float) (numerator/denominator); } public void setDenominator(int d) throws ZeroDenominatorException{ if (d != 0) denominator = d; else throw new ZeroDenominatorException(\"Denominator Cant be Zero\"); } public int getNumerator() { return numerator; } public int getDenominator() { return denominator; } public Fraction() { this.numerator = 0; this.denominator = 1; incrementCount(); } public Fraction(int n, int d) throws ZeroDenominatorException{ if (d != 0) { this.numerator = n; this.denominator = d; incrementCount(); } else { throw new ZeroDenominatorException(\"Denominator Cant be Zero, initializing denominator to 1\"); } } public Fraction(int n) { this.numerator = n; this.denominator = 1; incrementCount(); } public Fraction (String s) { int slashIndex = s.indexOf('/'); this.numerator = Integer.parseInt(s.substring(0, slashIndex)); this.denominator = Integer.parseInt(s.substring(slashIndex + 1)); incrementCount(); } public static void incrementCount() { count++; } public static void printCount() { System.out.println(\"count = \" + count); } public Fraction inverse() { Fraction f = new Fraction(); try { f = new Fraction(denominator, numerator); } catch (ZeroDenominatorException zde) { zde.getMessage(); } return f; } public Fraction reduce() { int min = (numerator < denominator) ? numerator : denominator; int i = 2; while (i <= min) { if (numerator % i == 0 && denominator % i == 0) { numerator /= i; denominator /= i; } else ++i; } Fraction f = new Fraction(); try { f = new Fraction(numerator , denominator); } catch (ZeroDenominatorException zde) { zde.getMessage(); } return f; } public boolean isProper() { if (this.numerator < this.denominator) return true; else return false; } public void print() { System.out.print(this.numerator + \"/\" + this.denominator); } public Fraction add(Fraction second) { Fraction i = new Fraction(); try { i = new Fraction(this.getNumerator() * second.getDenominator() + second.getNumerator() * this.getDenominator(), this.getDenominator() * second.getDenominator()); } catch (ZeroDenominatorException zde) { zde.getMessage(); } i.reduce(); return i; } public Fraction subtract(Fraction second) { Fraction i = new Fraction(); try { i = new Fraction(this.getNumerator() * second.getDenominator() - second.getNumerator() * this.getDenominator(), this.getDenominator() * second.getDenominator()); } catch (ZeroDenominatorException zde) { zde.getMessage(); } i.reduce(); return i; } public Fraction multiply(Fraction frac) { int n, d; n = this.numerator * frac.getNumerator(); d = this.denominator * frac.getDenominator(); Fraction i = new Fraction(); try { i = new Fraction(n , d); } catch (ZeroDenominatorException zde) { zde.getMessage(); } i.reduce(); return i; } public Fraction divide(Fraction frac) { int n, d; frac = frac.inverse(); n = this.getNumerator() * frac.getNumerator(); d = this.getDenominator() * frac.getDenominator(); Fraction i = new Fraction(); try { i = new Fraction(n , d); } catch (ZeroDenominatorException zde) { zde.getMessage(); } i.reduce(); return i; } }","dependencies":[{"file_path":"Fraction_calculator-master/FractionCalculator/src/ZeroDenominatorException.java","file_content":"public class ZeroDenominatorException extends Exception { ZeroDenominatorException (String s) { super(s); } }"}]}}
{"project_id":246,"chunk_id":0,"content":{"main_file_path":"Fraction_calculator-master/FractionCalculator/src/FractionCalculator.java","main_file_content":"import java.awt.*; import javax.swing.*; import javax.swing.text.JTextComponent; import javax.swing.text.TextAction; import java.awt.event.*; import javax.swing.GroupLayout.Alignment; import javax.swing.LayoutStyle.ComponentPlacement; public class FractionCalculator extends JFrame { JTextField numInput, denInput; int a; Fraction temp, temp1, res; static Fraction m1, m2; int k = 1, x = 0, y = 0, z = 0; char ch; JButton b1, b2, b3, b4, b5, b6, b7, b8, b9, b0, clr, pow2, pow3, plus, min, div, rec, mul, eq, addSub, mr, mc, mp, mm; Container cont; JPanel numPanel, denPanel, buttonPanel; FractionCalculator() { cont = getContentPane(); cont.setLayout(new BorderLayout()); numPanel = new JPanel(); denPanel = new JPanel(); denInput = new JTextField(25); denInput.setHorizontalAlignment(SwingConstants.RIGHT); denInput.addKeyListener(new KeyAdapter() { public void keyTyped(KeyEvent keyevent) { char c = keyevent.getKeyChar(); if (c >= '0' && c <= '9') { } else if (c == '\\n') { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { temp1 = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp1 = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp1 = new Fraction(0); } else { try { temp1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp1 = new Fraction(0); } } numInput.requestFocus(); switch (ch) { case '+': res = temp.add(temp1); break; case '-': res = temp.subtract(temp1); break; case '/': res = temp.divide(temp1); break; case '*': res = temp.multiply(temp1); break; } numInput.setText(Integer.toString(res.getNumerator())); denInput.setText(Integer.toString(res.getDenominator())); z = 1; try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null , zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } temp1 = new Fraction(0); denInput.requestFocus(); } else { keyevent.consume(); } } }); denInput.setUI(new JTextFieldHintUI(\"Denominator\" , Color.GRAY)); TextAction action = new TextAction(\"\") { @Override public void actionPerformed(ActionEvent e) { JTextComponent textField = getFocusedComponent(); String s = e.getActionCommand(); if (s.equals(\"1\")) { if (z == 0) { textField.setText(textField.getText() + \"1\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"1\"); z = 0; } } if (s.equals(\"2\")) { if (z == 0) { textField.setText(textField.getText() + \"2\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"2\"); z = 0; } } if (s.equals(\"3\")) { if (z == 0) { textField.setText(textField.getText() + \"3\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"3\"); z = 0; } } if (s.equals(\"4\")) { if (z == 0) { textField.setText(textField.getText() + \"4\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"4\"); z = 0; } } if (s.equals(\"5\")) { if (z == 0) { textField.setText(textField.getText() + \"5\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"5\"); z = 0; } } if (s.equals(\"6\")) { if (z == 0) { textField.setText(textField.getText() + \"6\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"6\"); z = 0; } } if (s.equals(\"7\")) { if (z == 0) { textField.setText(textField.getText() + \"7\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"7\"); z = 0; } } if (s.equals(\"8\")) { if (z == 0) { textField.setText(textField.getText() + \"8\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"8\"); z = 0; } } if (s.equals(\"9\")) { if (z == 0) { textField.setText(textField.getText() + \"9\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"9\"); z = 0; } } if (s.equals(\"0\")) { if (z == 0) { textField.setText(textField.getText() + \"0\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"0\"); z = 0; } } if (s.equals(\"AC\")) { numInput.setText(\"\"); denInput.setText(\"\"); x = 0; y = 0; z = 0; } if (s.equals(\"log\")) { if (textField.getText().equals(\"\")) { textField.setText(\"\"); } else { a = (int) Math.log(Integer.parseInt(textField.getText())); textField.setText(\"\"); textField.setText(textField.getText() + a); } } if (s.equals(\"1/x\")) { if (numInput.getText().equals(\"\") || Integer.parseInt(numInput.getText()) == 0) { numInput.setText(\"0\"); } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); } else { String s1 = numInput.getText() , s2 = denInput.getText(); numInput.setText(s2); denInput.setText(s1); } } if (s.equals(\"x^2\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); } else { int a = Integer.parseInt(numInput.getText()) , b = Integer.parseInt(denInput.getText()); numInput.setText(Integer.toString(a * a)); denInput.setText(Integer.toString(b * b)); } } if (s.equals(\"x^3\")) { if (textField.getText().equals(\"\")) { textField.setText(\"\"); } else { a = (int) Math.pow(Integer.parseInt(textField.getText()), 3); textField.setText(\"\"); textField.setText(textField.getText() + a); } } if (s.equals(\"+/-\")) { a = Integer.parseInt(textField.getText()); a *= -1; textField.setText(\"\" + a); } if (s.equals(\"+\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); temp = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } numInput.setText(\"0\"); denInput.setText(\"1\"); ch = '+'; y = 0; x = 0; } textField.requestFocus(); } if (s.equals(\"-\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); temp = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null , zde.getMessage()); temp = new Fraction(0); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } numInput.setText(\"0\"); denInput.setText(\"1\"); ch = '-'; y = 0; x = 0; } textField.requestFocus(); } if (s.equals(\"/\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); temp = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } numInput.setText(\"0\"); denInput.setText(\"1\"); ch = '/'; y = 0; x = 0; } textField.requestFocus(); } if (s.equals(\"*\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); temp = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(0); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } numInput.setText(\"0\"); denInput.setText(\"1\"); ch = '*'; y = 0; x = 0; } textField.requestFocus(); } if (s.equals(\"MC\")) { m1 = new Fraction(0); numInput.setText(\"0\"); denInput.setText(\"1\"); } if (s.equals(\"MR\")) { numInput.setText(\"\"); denInput.setText(\"\"); numInput.setText(numInput.getText() + m1.getNumerator()); denInput.setText(denInput.getText() + m1.getDenominator()); } if (s.equals(\"M+\")) { if (k == 1) { try { m1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); m1 = new Fraction(Integer.parseInt(numInput.getText())); } k++; } else { try { m1 = m1.add(new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText()))); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); m1 = m1.add(new Fraction(Integer.parseInt(numInput.getText()))); } numInput.setText(\"\" + m1.getNumerator()); denInput.setText(\"\" + m1.getDenominator()); } } if (s.equals(\"M-\")) { if (k == 1) { try { m1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); m1 = new Fraction(Integer.parseInt(numInput.getText())); } k++; } else { try { m1 = m1.subtract(new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText()))); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); m1 = m1.subtract(new Fraction(Integer.parseInt(numInput.getText()))); } numInput.setText(\"\" + m1.getNumerator()); denInput.setText(\"\" + m1.getDenominator()); } } if (s.equals(\"Sqrt\")) { if (textField.getText().equals(\"\")) { textField.setText(\"\"); } else { a = (int) Math.sqrt(Integer.parseInt(textField.getText())); textField.setText(\"\"); textField.setText(textField.getText() + a); } } if (s.equals(\"=\")) { if (textField.getText().equals(\"\")) { textField.setText(\"\"); } else { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { temp1 = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp1 = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp1 = new Fraction(0); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp1 = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp1 = new Fraction(Integer.parseInt(numInput.getText())); } } textField.requestFocus(); switch (ch) { case '+': res = temp.add(temp1); break; case '-': res = temp.subtract(temp1); break; case '/': res = temp.divide(temp1); break; case '*': res = temp.multiply(temp1); break; } numInput.setText(Integer.toString(res.getNumerator())); denInput.setText(Integer.toString(res.getDenominator())); z = 1; try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } temp1 = new Fraction(0); } } textField.requestFocus(); } }; buttonPanel = new JPanel(); buttonPanel.setLayout(new GridLayout(6, 4, 2, 2)); mr = new JButton(\"MR\"); buttonPanel.add(mr); mr.addActionListener(action); mc = new JButton(\"MC\"); buttonPanel.add(mc); mc.addActionListener(action); mp = new JButton(\"M+\"); buttonPanel.add(mp); mp.addActionListener(action); mm = new JButton(\"M-\"); buttonPanel.add(mm); mm.addActionListener(action); b1 = new JButton(\"1\"); buttonPanel.add(b1); b1.addActionListener(action); b2 = new JButton(\"2\"); buttonPanel.add(b2); b2.addActionListener(action); b3 = new JButton(\"3\"); buttonPanel.add(b3); b3.addActionListener(action); pow2 = new JButton(\"x^2\"); buttonPanel.add(pow2); pow2.addActionListener(action); b4 = new JButton(\"4\"); buttonPanel.add(b4); b4.addActionListener(action); b5 = new JButton(\"5\"); buttonPanel.add(b5); b5.addActionListener(action); b6 = new JButton(\"6\"); buttonPanel.add(b6); b6.addActionListener(action); pow3 = new JButton(\"x^3\"); buttonPanel.add(pow3); pow3.addActionListener(action); b7 = new JButton(\"7\"); buttonPanel.add(b7); b7.addActionListener(action); b8 = new JButton(\"8\"); buttonPanel.add(b8); b8.addActionListener(action); b9 = new JButton(\"9\"); buttonPanel.add(b9); b9.addActionListener(action); rec = new JButton(\"1/x\"); buttonPanel.add(rec); rec.addActionListener(action); addSub = new JButton(\"+/-\"); buttonPanel.add(addSub); addSub.addActionListener(action); b0 = new JButton(\"0\"); buttonPanel.add(b0); b0.addActionListener(action); mr.setBackground(Color.red);mr.setContentAreaFilled(false);mr.setOpaque(true); mc.setBackground(Color.red);mc.setContentAreaFilled(false);mc.setOpaque(true); mp.setBackground(Color.red);mp.setContentAreaFilled(false);mp.setOpaque(true); mm.setBackground(Color.red);mm.setContentAreaFilled(false);mm.setOpaque(true); pow2.setBackground(Color.BLUE);pow2.setContentAreaFilled(false);pow2.setOpaque(true); pow3.setBackground(Color.BLUE);pow3.setContentAreaFilled(false);pow3.setOpaque(true); rec.setBackground(Color.BLUE);rec.setContentAreaFilled(false);rec.setOpaque(true); addSub.setBackground(Color.LIGHT_GRAY);addSub.setContentAreaFilled(false);addSub.setOpaque(true); plus = new JButton(\"+\"); buttonPanel.add(plus); plus.addActionListener(action); min = new JButton(\"-\"); buttonPanel.add(min); min.addActionListener(action); clr = new JButton(\"AC\"); buttonPanel.add(clr); clr.addActionListener(action); eq = new JButton(\"=\"); buttonPanel.add(eq); eq.addActionListener(action); clr.setBackground(Color.CYAN);clr.setContentAreaFilled(false);clr.setOpaque(true); eq.setBackground(Color.CYAN);eq.setContentAreaFilled(false);eq.setOpaque(true); mul = new JButton(\"*\"); buttonPanel.add(mul); mul.addActionListener(action); div = new JButton(\"/\"); div.addActionListener(action); buttonPanel.add(div); plus.setBackground(Color.LIGHT_GRAY);plus.setContentAreaFilled(false);plus.setOpaque(true); min.setBackground(new Color(192, 192, 192));min.setContentAreaFilled(false);min.setOpaque(true); div.setBackground(Color.LIGHT_GRAY);div.setContentAreaFilled(false);div.setOpaque(true); mul.setBackground(Color.LIGHT_GRAY);mul.setContentAreaFilled(false);mul.setOpaque(true); cont.add(\"South\", buttonPanel); cont.add(\"Center\" , denPanel); numInput = new JTextField(25); numInput.setUI(new JTextFieldHintUI(\"Numerator\" , Color.GRAY)); numInput.setHorizontalAlignment(SwingConstants.RIGHT); numInput.addKeyListener(new KeyAdapter() { public void keyTyped(KeyEvent keyevent) { char c = keyevent.getKeyChar(); if (c >= '0' && c <= '9') { } else if (c == '\\n') { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { temp1 = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); temp1 = new Fraction(0); } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp1 = new Fraction(0); } else { try { temp1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null,zde.getMessage()); temp1 = new Fraction(Integer.parseInt(numInput.getText())); } } numInput.requestFocus(); switch (ch) { case '+': res = temp.add(temp1); break; case '-': res = temp.subtract(temp1); break; case '/': res = temp.divide(temp1); break; case '*': res = temp.multiply(temp1); break; } numInput.setText(Integer.toString(res.getNumerator())); denInput.setText(Integer.toString(res.getDenominator())); z = 1; try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null,zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } temp1 = new Fraction(0); numInput.requestFocus(); } else { keyevent.consume(); } } }); GroupLayout gl_denPanel = new GroupLayout(denPanel); gl_denPanel.setHorizontalGroup( gl_denPanel.createParallelGroup(Alignment.LEADING) .addGroup(gl_denPanel.createSequentialGroup() .addGroup(gl_denPanel.createParallelGroup(Alignment.LEADING) .addGroup(gl_denPanel.createSequentialGroup() .addGap(85) .addComponent(numInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)) .addGroup(gl_denPanel.createSequentialGroup() .addGap(83) .addComponent(denInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))) .addContainerGap(86, Short.MAX_VALUE)) ); gl_denPanel.setVerticalGroup( gl_denPanel.createParallelGroup(Alignment.LEADING) .addGroup(gl_denPanel.createSequentialGroup() .addGap(37) .addComponent(numInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE) .addGap(12) .addComponent(denInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE) .addContainerGap(43, Short.MAX_VALUE)) ); denPanel.setLayout(gl_denPanel); cont.add(\"North\", numPanel); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); } public static void main(String [] args) { try { UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\"); } catch (Exception e) {} FractionCalculator f = new FractionCalculator(); f.setResizable(false); f.setTitle(\"FractionCalculator\"); f.pack(); f.setVisible(true); } }","dependencies":[]}}
{"project_id":246,"chunk_id":1,"content":{"main_file_path":"Fraction_calculator-master/FractionCalculator/src/FractionCalculator.java","main_file_content":"import java.awt.*; import javax.swing.*; import javax.swing.text.JTextComponent; import javax.swing.text.TextAction; import java.awt.event.*; import javax.swing.GroupLayout.Alignment; import javax.swing.LayoutStyle.ComponentPlacement; public class FractionCalculator extends JFrame { JTextField numInput, denInput; int a; Fraction temp, temp1, res; static Fraction m1, m2; int k = 1, x = 0, y = 0, z = 0; char ch; JButton b1, b2, b3, b4, b5, b6, b7, b8, b9, b0, clr, pow2, pow3, plus, min, div, rec, mul, eq, addSub, mr, mc, mp, mm; Container cont; JPanel numPanel, denPanel, buttonPanel; FractionCalculator() { cont = getContentPane(); cont.setLayout(new BorderLayout()); numPanel = new JPanel(); denPanel = new JPanel(); denInput = new JTextField(25); denInput.setHorizontalAlignment(SwingConstants.RIGHT); denInput.addKeyListener(new KeyAdapter() { public void keyTyped(KeyEvent keyevent) { char c = keyevent.getKeyChar(); if (c >= '0' && c <= '9') { } else if (c == '\\n') { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { temp1 = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp1 = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp1 = new Fraction(0); } else { try { temp1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp1 = new Fraction(0); } } numInput.requestFocus(); switch (ch) { case '+': res = temp.add(temp1); break; case '-': res = temp.subtract(temp1); break; case '/': res = temp.divide(temp1); break; case '*': res = temp.multiply(temp1); break; } numInput.setText(Integer.toString(res.getNumerator())); denInput.setText(Integer.toString(res.getDenominator())); z = 1; try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null , zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } temp1 = new Fraction(0); denInput.requestFocus(); } else { keyevent.consume(); } } }); denInput.setUI(new JTextFieldHintUI(\"Denominator\" , Color.GRAY)); TextAction action = new TextAction(\"\") { @Override public void actionPerformed(ActionEvent e) { JTextComponent textField = getFocusedComponent(); String s = e.getActionCommand(); if (s.equals(\"1\")) { if (z == 0) { textField.setText(textField.getText() + \"1\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"1\"); z = 0; } } if (s.equals(\"2\")) { if (z == 0) { textField.setText(textField.getText() + \"2\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"2\"); z = 0; } } if (s.equals(\"3\")) { if (z == 0) { textField.setText(textField.getText() + \"3\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"3\"); z = 0; } } if (s.equals(\"4\")) { if (z == 0) { textField.setText(textField.getText() + \"4\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"4\"); z = 0; } } if (s.equals(\"5\")) { if (z == 0) { textField.setText(textField.getText() + \"5\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"5\"); z = 0; } } if (s.equals(\"6\")) { if (z == 0) { textField.setText(textField.getText() + \"6\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"6\"); z = 0; } } if (s.equals(\"7\")) { if (z == 0) { textField.setText(textField.getText() + \"7\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"7\"); z = 0; } } if (s.equals(\"8\")) { if (z == 0) { textField.setText(textField.getText() + \"8\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"8\"); z = 0; } } if (s.equals(\"9\")) { if (z == 0) { textField.setText(textField.getText() + \"9\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"9\"); z = 0; } } if (s.equals(\"0\")) { if (z == 0) { textField.setText(textField.getText() + \"0\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"0\"); z = 0; } } if (s.equals(\"AC\")) { numInput.setText(\"\"); denInput.setText(\"\"); x = 0; y = 0; z = 0; } if (s.equals(\"log\")) { if (textField.getText().equals(\"\")) { textField.setText(\"\"); } else { a = (int) Math.log(Integer.parseInt(textField.getText())); textField.setText(\"\"); textField.setText(textField.getText() + a); } } if (s.equals(\"1/x\")) { if (numInput.getText().equals(\"\") || Integer.parseInt(numInput.getText()) == 0) { numInput.setText(\"0\"); } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); } else { String s1 = numInput.getText() , s2 = denInput.getText(); numInput.setText(s2); denInput.setText(s1); } } if (s.equals(\"x^2\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); } else { int a = Integer.parseInt(numInput.getText()) , b = Integer.parseInt(denInput.getText()); numInput.setText(Integer.toString(a * a)); denInput.setText(Integer.toString(b * b)); } } if (s.equals(\"x^3\")) { if (textField.getText().equals(\"\")) { textField.setText(\"\"); } else { a = (int) Math.pow(Integer.parseInt(textField.getText()), 3); textField.setText(\"\"); textField.setText(textField.getText() + a); } } if (s.equals(\"+/-\")) { a = Integer.parseInt(textField.getText()); a *= -1; textField.setText(\"\" + a); } if (s.equals(\"+\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); temp = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } numInput.setText(\"0\"); denInput.setText(\"1\"); ch = '+'; y = 0; x = 0; } textField.requestFocus(); } if (s.equals(\"-\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); temp = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null , zde.getMessage()); temp = new Fraction(0); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } numInput.setText(\"0\"); denInput.setText(\"1\"); ch = '-'; y = 0; x = 0; } textField.requestFocus(); } if (s.equals(\"/\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); temp = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } numInput.setText(\"0\"); denInput.setText(\"1\"); ch = '/'; y = 0; x = 0; } textField.requestFocus(); } if (s.equals(\"*\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); temp = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(0); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } numInput.setText(\"0\"); denInput.setText(\"1\"); ch = '*'; y = 0; x = 0; } textField.requestFocus(); } if (s.equals(\"MC\")) { m1 = new Fraction(0); numInput.setText(\"0\"); denInput.setText(\"1\"); } if (s.equals(\"MR\")) { numInput.setText(\"\"); denInput.setText(\"\"); numInput.setText(numInput.getText() + m1.getNumerator()); denInput.setText(denInput.getText() + m1.getDenominator()); } if (s.equals(\"M+\")) { if (k == 1) { try { m1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); m1 = new Fraction(Integer.parseInt(numInput.getText())); } k++; } else { try { m1 = m1.add(new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText()))); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); m1 = m1.add(new Fraction(Integer.parseInt(numInput.getText()))); } numInput.setText(\"\" + m1.getNumerator()); denInput.setText(\"\" + m1.getDenominator()); } } if (s.equals(\"M-\")) { if (k == 1) { try { m1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); m1 = new Fraction(Integer.parseInt(numInput.getText())); } k++; } else { try { m1 = m1.subtract(new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText()))); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); m1 = m1.subtract(new Fraction(Integer.parseInt(numInput.getText()))); } numInput.setText(\"\" + m1.getNumerator()); denInput.setText(\"\" + m1.getDenominator()); } } if (s.equals(\"Sqrt\")) { if (textField.getText().equals(\"\")) { textField.setText(\"\"); } else { a = (int) Math.sqrt(Integer.parseInt(textField.getText())); textField.setText(\"\"); textField.setText(textField.getText() + a); } } if (s.equals(\"=\")) { if (textField.getText().equals(\"\")) { textField.setText(\"\"); } else { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { temp1 = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp1 = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp1 = new Fraction(0); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp1 = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp1 = new Fraction(Integer.parseInt(numInput.getText())); } } textField.requestFocus(); switch (ch) { case '+': res = temp.add(temp1); break; case '-': res = temp.subtract(temp1); break; case '/': res = temp.divide(temp1); break; case '*': res = temp.multiply(temp1); break; } numInput.setText(Integer.toString(res.getNumerator())); denInput.setText(Integer.toString(res.getDenominator())); z = 1; try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } temp1 = new Fraction(0); } } textField.requestFocus(); } }; buttonPanel = new JPanel(); buttonPanel.setLayout(new GridLayout(6, 4, 2, 2)); mr = new JButton(\"MR\"); buttonPanel.add(mr); mr.addActionListener(action); mc = new JButton(\"MC\"); buttonPanel.add(mc); mc.addActionListener(action); mp = new JButton(\"M+\"); buttonPanel.add(mp); mp.addActionListener(action); mm = new JButton(\"M-\"); buttonPanel.add(mm); mm.addActionListener(action); b1 = new JButton(\"1\"); buttonPanel.add(b1); b1.addActionListener(action); b2 = new JButton(\"2\"); buttonPanel.add(b2); b2.addActionListener(action); b3 = new JButton(\"3\"); buttonPanel.add(b3); b3.addActionListener(action); pow2 = new JButton(\"x^2\"); buttonPanel.add(pow2); pow2.addActionListener(action); b4 = new JButton(\"4\"); buttonPanel.add(b4); b4.addActionListener(action); b5 = new JButton(\"5\"); buttonPanel.add(b5); b5.addActionListener(action); b6 = new JButton(\"6\"); buttonPanel.add(b6); b6.addActionListener(action); pow3 = new JButton(\"x^3\"); buttonPanel.add(pow3); pow3.addActionListener(action); b7 = new JButton(\"7\"); buttonPanel.add(b7); b7.addActionListener(action); b8 = new JButton(\"8\"); buttonPanel.add(b8); b8.addActionListener(action); b9 = new JButton(\"9\"); buttonPanel.add(b9); b9.addActionListener(action); rec = new JButton(\"1/x\"); buttonPanel.add(rec); rec.addActionListener(action); addSub = new JButton(\"+/-\"); buttonPanel.add(addSub); addSub.addActionListener(action); b0 = new JButton(\"0\"); buttonPanel.add(b0); b0.addActionListener(action); mr.setBackground(Color.red);mr.setContentAreaFilled(false);mr.setOpaque(true); mc.setBackground(Color.red);mc.setContentAreaFilled(false);mc.setOpaque(true); mp.setBackground(Color.red);mp.setContentAreaFilled(false);mp.setOpaque(true); mm.setBackground(Color.red);mm.setContentAreaFilled(false);mm.setOpaque(true); pow2.setBackground(Color.BLUE);pow2.setContentAreaFilled(false);pow2.setOpaque(true); pow3.setBackground(Color.BLUE);pow3.setContentAreaFilled(false);pow3.setOpaque(true); rec.setBackground(Color.BLUE);rec.setContentAreaFilled(false);rec.setOpaque(true); addSub.setBackground(Color.LIGHT_GRAY);addSub.setContentAreaFilled(false);addSub.setOpaque(true); plus = new JButton(\"+\"); buttonPanel.add(plus); plus.addActionListener(action); min = new JButton(\"-\"); buttonPanel.add(min); min.addActionListener(action); clr = new JButton(\"AC\"); buttonPanel.add(clr); clr.addActionListener(action); eq = new JButton(\"=\"); buttonPanel.add(eq); eq.addActionListener(action); clr.setBackground(Color.CYAN);clr.setContentAreaFilled(false);clr.setOpaque(true); eq.setBackground(Color.CYAN);eq.setContentAreaFilled(false);eq.setOpaque(true); mul = new JButton(\"*\"); buttonPanel.add(mul); mul.addActionListener(action); div = new JButton(\"/\"); div.addActionListener(action); buttonPanel.add(div); plus.setBackground(Color.LIGHT_GRAY);plus.setContentAreaFilled(false);plus.setOpaque(true); min.setBackground(new Color(192, 192, 192));min.setContentAreaFilled(false);min.setOpaque(true); div.setBackground(Color.LIGHT_GRAY);div.setContentAreaFilled(false);div.setOpaque(true); mul.setBackground(Color.LIGHT_GRAY);mul.setContentAreaFilled(false);mul.setOpaque(true); cont.add(\"South\", buttonPanel); cont.add(\"Center\" , denPanel); numInput = new JTextField(25); numInput.setUI(new JTextFieldHintUI(\"Numerator\" , Color.GRAY)); numInput.setHorizontalAlignment(SwingConstants.RIGHT); numInput.addKeyListener(new KeyAdapter() { public void keyTyped(KeyEvent keyevent) { char c = keyevent.getKeyChar(); if (c >= '0' && c <= '9') { } else if (c == '\\n') { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { temp1 = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); temp1 = new Fraction(0); } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp1 = new Fraction(0); } else { try { temp1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null,zde.getMessage()); temp1 = new Fraction(Integer.parseInt(numInput.getText())); } } numInput.requestFocus(); switch (ch) { case '+': res = temp.add(temp1); break; case '-': res = temp.subtract(temp1); break; case '/': res = temp.divide(temp1); break; case '*': res = temp.multiply(temp1); break; } numInput.setText(Integer.toString(res.getNumerator())); denInput.setText(Integer.toString(res.getDenominator())); z = 1; try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null,zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } temp1 = new Fraction(0); numInput.requestFocus(); } else { keyevent.consume(); } } }); GroupLayout gl_denPanel = new GroupLayout(denPanel); gl_denPanel.setHorizontalGroup( gl_denPanel.createParallelGroup(Alignment.LEADING) .addGroup(gl_denPanel.createSequentialGroup() .addGroup(gl_denPanel.createParallelGroup(Alignment.LEADING) .addGroup(gl_denPanel.createSequentialGroup() .addGap(85) .addComponent(numInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)) .addGroup(gl_denPanel.createSequentialGroup() .addGap(83) .addComponent(denInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))) .addContainerGap(86, Short.MAX_VALUE)) ); gl_denPanel.setVerticalGroup( gl_denPanel.createParallelGroup(Alignment.LEADING) .addGroup(gl_denPanel.createSequentialGroup() .addGap(37) .addComponent(numInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE) .addGap(12) .addComponent(denInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE) .addContainerGap(43, Short.MAX_VALUE)) ); denPanel.setLayout(gl_denPanel); cont.add(\"North\", numPanel); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); } public static void main(String [] args) { try { UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\"); } catch (Exception e) {} FractionCalculator f = new FractionCalculator(); f.setResizable(false); f.setTitle(\"FractionCalculator\"); f.pack(); f.setVisible(true); } }","dependencies":[{"file_path":"Fraction_calculator-master/FractionCalculator/src/Fraction.java","file_content":"public class Fraction { protected int numerator; protected int denominator; private static int count = 0; public int d = 0; public void setNumerator(int n) { this.numerator = n; } public float getValue(){ return (float) (numerator/denominator); } public void setDenominator(int d) throws ZeroDenominatorException{ if (d != 0) denominator = d; else throw new ZeroDenominatorException(\"Denominator Cant be Zero\"); } public int getNumerator() { return numerator; } public int getDenominator() { return denominator; } public Fraction() { this.numerator = 0; this.denominator = 1; incrementCount(); } public Fraction(int n, int d) throws ZeroDenominatorException{ if (d != 0) { this.numerator = n; this.denominator = d; incrementCount(); } else { throw new ZeroDenominatorException(\"Denominator Cant be Zero, initializing denominator to 1\"); } } public Fraction(int n) { this.numerator = n; this.denominator = 1; incrementCount(); } public Fraction (String s) { int slashIndex = s.indexOf('/'); this.numerator = Integer.parseInt(s.substring(0, slashIndex)); this.denominator = Integer.parseInt(s.substring(slashIndex + 1)); incrementCount(); } public static void incrementCount() { count++; } public static void printCount() { System.out.println(\"count = \" + count); } public Fraction inverse() { Fraction f = new Fraction(); try { f = new Fraction(denominator, numerator); } catch (ZeroDenominatorException zde) { zde.getMessage(); } return f; } public Fraction reduce() { int min = (numerator < denominator) ? numerator : denominator; int i = 2; while (i <= min) { if (numerator % i == 0 && denominator % i == 0) { numerator /= i; denominator /= i; } else ++i; } Fraction f = new Fraction(); try { f = new Fraction(numerator , denominator); } catch (ZeroDenominatorException zde) { zde.getMessage(); } return f; } public boolean isProper() { if (this.numerator < this.denominator) return true; else return false; } public void print() { System.out.print(this.numerator + \"/\" + this.denominator); } public Fraction add(Fraction second) { Fraction i = new Fraction(); try { i = new Fraction(this.getNumerator() * second.getDenominator() + second.getNumerator() * this.getDenominator(), this.getDenominator() * second.getDenominator()); } catch (ZeroDenominatorException zde) { zde.getMessage(); } i.reduce(); return i; } public Fraction subtract(Fraction second) { Fraction i = new Fraction(); try { i = new Fraction(this.getNumerator() * second.getDenominator() - second.getNumerator() * this.getDenominator(), this.getDenominator() * second.getDenominator()); } catch (ZeroDenominatorException zde) { zde.getMessage(); } i.reduce(); return i; } public Fraction multiply(Fraction frac) { int n, d; n = this.numerator * frac.getNumerator(); d = this.denominator * frac.getDenominator(); Fraction i = new Fraction(); try { i = new Fraction(n , d); } catch (ZeroDenominatorException zde) { zde.getMessage(); } i.reduce(); return i; } public Fraction divide(Fraction frac) { int n, d; frac = frac.inverse(); n = this.getNumerator() * frac.getNumerator(); d = this.getDenominator() * frac.getDenominator(); Fraction i = new Fraction(); try { i = new Fraction(n , d); } catch (ZeroDenominatorException zde) { zde.getMessage(); } i.reduce(); return i; } }"}]}}
{"project_id":246,"chunk_id":2,"content":{"main_file_path":"Fraction_calculator-master/FractionCalculator/src/FractionCalculator.java","main_file_content":"import java.awt.*; import javax.swing.*; import javax.swing.text.JTextComponent; import javax.swing.text.TextAction; import java.awt.event.*; import javax.swing.GroupLayout.Alignment; import javax.swing.LayoutStyle.ComponentPlacement; public class FractionCalculator extends JFrame { JTextField numInput, denInput; int a; Fraction temp, temp1, res; static Fraction m1, m2; int k = 1, x = 0, y = 0, z = 0; char ch; JButton b1, b2, b3, b4, b5, b6, b7, b8, b9, b0, clr, pow2, pow3, plus, min, div, rec, mul, eq, addSub, mr, mc, mp, mm; Container cont; JPanel numPanel, denPanel, buttonPanel; FractionCalculator() { cont = getContentPane(); cont.setLayout(new BorderLayout()); numPanel = new JPanel(); denPanel = new JPanel(); denInput = new JTextField(25); denInput.setHorizontalAlignment(SwingConstants.RIGHT); denInput.addKeyListener(new KeyAdapter() { public void keyTyped(KeyEvent keyevent) { char c = keyevent.getKeyChar(); if (c >= '0' && c <= '9') { } else if (c == '\\n') { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { temp1 = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp1 = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp1 = new Fraction(0); } else { try { temp1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp1 = new Fraction(0); } } numInput.requestFocus(); switch (ch) { case '+': res = temp.add(temp1); break; case '-': res = temp.subtract(temp1); break; case '/': res = temp.divide(temp1); break; case '*': res = temp.multiply(temp1); break; } numInput.setText(Integer.toString(res.getNumerator())); denInput.setText(Integer.toString(res.getDenominator())); z = 1; try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null , zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } temp1 = new Fraction(0); denInput.requestFocus(); } else { keyevent.consume(); } } }); denInput.setUI(new JTextFieldHintUI(\"Denominator\" , Color.GRAY)); TextAction action = new TextAction(\"\") { @Override public void actionPerformed(ActionEvent e) { JTextComponent textField = getFocusedComponent(); String s = e.getActionCommand(); if (s.equals(\"1\")) { if (z == 0) { textField.setText(textField.getText() + \"1\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"1\"); z = 0; } } if (s.equals(\"2\")) { if (z == 0) { textField.setText(textField.getText() + \"2\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"2\"); z = 0; } } if (s.equals(\"3\")) { if (z == 0) { textField.setText(textField.getText() + \"3\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"3\"); z = 0; } } if (s.equals(\"4\")) { if (z == 0) { textField.setText(textField.getText() + \"4\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"4\"); z = 0; } } if (s.equals(\"5\")) { if (z == 0) { textField.setText(textField.getText() + \"5\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"5\"); z = 0; } } if (s.equals(\"6\")) { if (z == 0) { textField.setText(textField.getText() + \"6\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"6\"); z = 0; } } if (s.equals(\"7\")) { if (z == 0) { textField.setText(textField.getText() + \"7\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"7\"); z = 0; } } if (s.equals(\"8\")) { if (z == 0) { textField.setText(textField.getText() + \"8\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"8\"); z = 0; } } if (s.equals(\"9\")) { if (z == 0) { textField.setText(textField.getText() + \"9\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"9\"); z = 0; } } if (s.equals(\"0\")) { if (z == 0) { textField.setText(textField.getText() + \"0\"); } else { textField.setText(\"\"); textField.setText(textField.getText() + \"0\"); z = 0; } } if (s.equals(\"AC\")) { numInput.setText(\"\"); denInput.setText(\"\"); x = 0; y = 0; z = 0; } if (s.equals(\"log\")) { if (textField.getText().equals(\"\")) { textField.setText(\"\"); } else { a = (int) Math.log(Integer.parseInt(textField.getText())); textField.setText(\"\"); textField.setText(textField.getText() + a); } } if (s.equals(\"1/x\")) { if (numInput.getText().equals(\"\") || Integer.parseInt(numInput.getText()) == 0) { numInput.setText(\"0\"); } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); } else { String s1 = numInput.getText() , s2 = denInput.getText(); numInput.setText(s2); denInput.setText(s1); } } if (s.equals(\"x^2\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); } else { int a = Integer.parseInt(numInput.getText()) , b = Integer.parseInt(denInput.getText()); numInput.setText(Integer.toString(a * a)); denInput.setText(Integer.toString(b * b)); } } if (s.equals(\"x^3\")) { if (textField.getText().equals(\"\")) { textField.setText(\"\"); } else { a = (int) Math.pow(Integer.parseInt(textField.getText()), 3); textField.setText(\"\"); textField.setText(textField.getText() + a); } } if (s.equals(\"+/-\")) { a = Integer.parseInt(textField.getText()); a *= -1; textField.setText(\"\" + a); } if (s.equals(\"+\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); temp = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } numInput.setText(\"0\"); denInput.setText(\"1\"); ch = '+'; y = 0; x = 0; } textField.requestFocus(); } if (s.equals(\"-\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); temp = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null , zde.getMessage()); temp = new Fraction(0); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } numInput.setText(\"0\"); denInput.setText(\"1\"); ch = '-'; y = 0; x = 0; } textField.requestFocus(); } if (s.equals(\"/\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); temp = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } numInput.setText(\"0\"); denInput.setText(\"1\"); ch = '/'; y = 0; x = 0; } textField.requestFocus(); } if (s.equals(\"*\")) { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { numInput.setText(\"0\"); denInput.setText(\"1\"); temp = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(0); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } numInput.setText(\"0\"); denInput.setText(\"1\"); ch = '*'; y = 0; x = 0; } textField.requestFocus(); } if (s.equals(\"MC\")) { m1 = new Fraction(0); numInput.setText(\"0\"); denInput.setText(\"1\"); } if (s.equals(\"MR\")) { numInput.setText(\"\"); denInput.setText(\"\"); numInput.setText(numInput.getText() + m1.getNumerator()); denInput.setText(denInput.getText() + m1.getDenominator()); } if (s.equals(\"M+\")) { if (k == 1) { try { m1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); m1 = new Fraction(Integer.parseInt(numInput.getText())); } k++; } else { try { m1 = m1.add(new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText()))); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); m1 = m1.add(new Fraction(Integer.parseInt(numInput.getText()))); } numInput.setText(\"\" + m1.getNumerator()); denInput.setText(\"\" + m1.getDenominator()); } } if (s.equals(\"M-\")) { if (k == 1) { try { m1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); m1 = new Fraction(Integer.parseInt(numInput.getText())); } k++; } else { try { m1 = m1.subtract(new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText()))); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); m1 = m1.subtract(new Fraction(Integer.parseInt(numInput.getText()))); } numInput.setText(\"\" + m1.getNumerator()); denInput.setText(\"\" + m1.getDenominator()); } } if (s.equals(\"Sqrt\")) { if (textField.getText().equals(\"\")) { textField.setText(\"\"); } else { a = (int) Math.sqrt(Integer.parseInt(textField.getText())); textField.setText(\"\"); textField.setText(textField.getText() + a); } } if (s.equals(\"=\")) { if (textField.getText().equals(\"\")) { textField.setText(\"\"); } else { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { temp1 = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); try { temp1 = new Fraction(0 , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp1 = new Fraction(0); } } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp1 = new Fraction(Integer.parseInt(numInput.getText())); } else { try { temp1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp1 = new Fraction(Integer.parseInt(numInput.getText())); } } textField.requestFocus(); switch (ch) { case '+': res = temp.add(temp1); break; case '-': res = temp.subtract(temp1); break; case '/': res = temp.divide(temp1); break; case '*': res = temp.multiply(temp1); break; } numInput.setText(Integer.toString(res.getNumerator())); denInput.setText(Integer.toString(res.getDenominator())); z = 1; try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null, zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } temp1 = new Fraction(0); } } textField.requestFocus(); } }; buttonPanel = new JPanel(); buttonPanel.setLayout(new GridLayout(6, 4, 2, 2)); mr = new JButton(\"MR\"); buttonPanel.add(mr); mr.addActionListener(action); mc = new JButton(\"MC\"); buttonPanel.add(mc); mc.addActionListener(action); mp = new JButton(\"M+\"); buttonPanel.add(mp); mp.addActionListener(action); mm = new JButton(\"M-\"); buttonPanel.add(mm); mm.addActionListener(action); b1 = new JButton(\"1\"); buttonPanel.add(b1); b1.addActionListener(action); b2 = new JButton(\"2\"); buttonPanel.add(b2); b2.addActionListener(action); b3 = new JButton(\"3\"); buttonPanel.add(b3); b3.addActionListener(action); pow2 = new JButton(\"x^2\"); buttonPanel.add(pow2); pow2.addActionListener(action); b4 = new JButton(\"4\"); buttonPanel.add(b4); b4.addActionListener(action); b5 = new JButton(\"5\"); buttonPanel.add(b5); b5.addActionListener(action); b6 = new JButton(\"6\"); buttonPanel.add(b6); b6.addActionListener(action); pow3 = new JButton(\"x^3\"); buttonPanel.add(pow3); pow3.addActionListener(action); b7 = new JButton(\"7\"); buttonPanel.add(b7); b7.addActionListener(action); b8 = new JButton(\"8\"); buttonPanel.add(b8); b8.addActionListener(action); b9 = new JButton(\"9\"); buttonPanel.add(b9); b9.addActionListener(action); rec = new JButton(\"1/x\"); buttonPanel.add(rec); rec.addActionListener(action); addSub = new JButton(\"+/-\"); buttonPanel.add(addSub); addSub.addActionListener(action); b0 = new JButton(\"0\"); buttonPanel.add(b0); b0.addActionListener(action); mr.setBackground(Color.red);mr.setContentAreaFilled(false);mr.setOpaque(true); mc.setBackground(Color.red);mc.setContentAreaFilled(false);mc.setOpaque(true); mp.setBackground(Color.red);mp.setContentAreaFilled(false);mp.setOpaque(true); mm.setBackground(Color.red);mm.setContentAreaFilled(false);mm.setOpaque(true); pow2.setBackground(Color.BLUE);pow2.setContentAreaFilled(false);pow2.setOpaque(true); pow3.setBackground(Color.BLUE);pow3.setContentAreaFilled(false);pow3.setOpaque(true); rec.setBackground(Color.BLUE);rec.setContentAreaFilled(false);rec.setOpaque(true); addSub.setBackground(Color.LIGHT_GRAY);addSub.setContentAreaFilled(false);addSub.setOpaque(true); plus = new JButton(\"+\"); buttonPanel.add(plus); plus.addActionListener(action); min = new JButton(\"-\"); buttonPanel.add(min); min.addActionListener(action); clr = new JButton(\"AC\"); buttonPanel.add(clr); clr.addActionListener(action); eq = new JButton(\"=\"); buttonPanel.add(eq); eq.addActionListener(action); clr.setBackground(Color.CYAN);clr.setContentAreaFilled(false);clr.setOpaque(true); eq.setBackground(Color.CYAN);eq.setContentAreaFilled(false);eq.setOpaque(true); mul = new JButton(\"*\"); buttonPanel.add(mul); mul.addActionListener(action); div = new JButton(\"/\"); div.addActionListener(action); buttonPanel.add(div); plus.setBackground(Color.LIGHT_GRAY);plus.setContentAreaFilled(false);plus.setOpaque(true); min.setBackground(new Color(192, 192, 192));min.setContentAreaFilled(false);min.setOpaque(true); div.setBackground(Color.LIGHT_GRAY);div.setContentAreaFilled(false);div.setOpaque(true); mul.setBackground(Color.LIGHT_GRAY);mul.setContentAreaFilled(false);mul.setOpaque(true); cont.add(\"South\", buttonPanel); cont.add(\"Center\" , denPanel); numInput = new JTextField(25); numInput.setUI(new JTextFieldHintUI(\"Numerator\" , Color.GRAY)); numInput.setHorizontalAlignment(SwingConstants.RIGHT); numInput.addKeyListener(new KeyAdapter() { public void keyTyped(KeyEvent keyevent) { char c = keyevent.getKeyChar(); if (c >= '0' && c <= '9') { } else if (c == '\\n') { if (numInput.getText().equals(\"\") && denInput.getText().equals(\"\")) { temp1 = new Fraction(0); } else if (numInput.getText().equals(\"\")) { numInput.setText(\"0\"); temp1 = new Fraction(0); } else if (denInput.getText().equals(\"\")) { denInput.setText(\"1\"); temp1 = new Fraction(0); } else { try { temp1 = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null,zde.getMessage()); temp1 = new Fraction(Integer.parseInt(numInput.getText())); } } numInput.requestFocus(); switch (ch) { case '+': res = temp.add(temp1); break; case '-': res = temp.subtract(temp1); break; case '/': res = temp.divide(temp1); break; case '*': res = temp.multiply(temp1); break; } numInput.setText(Integer.toString(res.getNumerator())); denInput.setText(Integer.toString(res.getDenominator())); z = 1; try { temp = new Fraction(Integer.parseInt(numInput.getText()) , Integer.parseInt(denInput.getText())); } catch (ZeroDenominatorException zde) { JOptionPane.showMessageDialog(null,zde.getMessage()); temp = new Fraction(Integer.parseInt(numInput.getText())); } temp1 = new Fraction(0); numInput.requestFocus(); } else { keyevent.consume(); } } }); GroupLayout gl_denPanel = new GroupLayout(denPanel); gl_denPanel.setHorizontalGroup( gl_denPanel.createParallelGroup(Alignment.LEADING) .addGroup(gl_denPanel.createSequentialGroup() .addGroup(gl_denPanel.createParallelGroup(Alignment.LEADING) .addGroup(gl_denPanel.createSequentialGroup() .addGap(85) .addComponent(numInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)) .addGroup(gl_denPanel.createSequentialGroup() .addGap(83) .addComponent(denInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))) .addContainerGap(86, Short.MAX_VALUE)) ); gl_denPanel.setVerticalGroup( gl_denPanel.createParallelGroup(Alignment.LEADING) .addGroup(gl_denPanel.createSequentialGroup() .addGap(37) .addComponent(numInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE) .addGap(12) .addComponent(denInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE) .addContainerGap(43, Short.MAX_VALUE)) ); denPanel.setLayout(gl_denPanel); cont.add(\"North\", numPanel); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); } public static void main(String [] args) { try { UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\"); } catch (Exception e) {} FractionCalculator f = new FractionCalculator(); f.setResizable(false); f.setTitle(\"FractionCalculator\"); f.pack(); f.setVisible(true); } }","dependencies":[{"file_path":"Fraction_calculator-master/FractionCalculator/src/JTextFieldHintUI.java","file_content":"import java.awt.Color; import java.awt.Graphics; import java.awt.event.FocusEvent; import java.awt.event.FocusListener; import javax.swing.plaf.basic.BasicTextFieldUI; import javax.swing.text.JTextComponent; public class JTextFieldHintUI extends BasicTextFieldUI implements FocusListener { private String hint; private Color hintColor; public JTextFieldHintUI(String hint, Color hintColor) { this.hint = hint; this.hintColor = hintColor; } private void repaint() { if (getComponent() != null) { getComponent().repaint(); } } @Override protected void paintSafely(Graphics g) { super.paintSafely(g); JTextComponent component = getComponent(); if (component.getText().length() == 0 && !component.hasFocus()) { g.setColor(hintColor); int padding = (component.getHeight() - component.getFont().getSize()) / 2; int inset = 3; g.drawString(hint, inset, component.getHeight() - padding - inset); } } @Override public void focusGained(FocusEvent e) { repaint(); } @Override public void focusLost(FocusEvent e) { repaint(); } @Override public void installListeners() { super.installListeners(); getComponent().addFocusListener(this); } @Override public void uninstallListeners() { super.uninstallListeners(); getComponent().removeFocusListener(this); } }"},{"file_path":"Fraction_calculator-master/FractionCalculator/src/ZeroDenominatorException.java","file_content":"public class ZeroDenominatorException extends Exception { ZeroDenominatorException (String s) { super(s); } }"}]}}
{"project_id":246,"chunk_id":0,"content":{"main_file_path":"Fraction_calculator-master/FractionCalculator/src/ZeroDenominatorException.java","main_file_content":"public class ZeroDenominatorException extends Exception { ZeroDenominatorException (String s) { super(s); } }","dependencies":[]}}
{"project_id":246,"chunk_id":0,"content":{"main_file_path":"Fraction_calculator-master/FractionCalculator/src/JTextFieldHintUI.java","main_file_content":"import java.awt.Color; import java.awt.Graphics; import java.awt.event.FocusEvent; import java.awt.event.FocusListener; import javax.swing.plaf.basic.BasicTextFieldUI; import javax.swing.text.JTextComponent; public class JTextFieldHintUI extends BasicTextFieldUI implements FocusListener { private String hint; private Color hintColor; public JTextFieldHintUI(String hint, Color hintColor) { this.hint = hint; this.hintColor = hintColor; } private void repaint() { if (getComponent() != null) { getComponent().repaint(); } } @Override protected void paintSafely(Graphics g) { super.paintSafely(g); JTextComponent component = getComponent(); if (component.getText().length() == 0 && !component.hasFocus()) { g.setColor(hintColor); int padding = (component.getHeight() - component.getFont().getSize()) / 2; int inset = 3; g.drawString(hint, inset, component.getHeight() - padding - inset); } } @Override public void focusGained(FocusEvent e) { repaint(); } @Override public void focusLost(FocusEvent e) { repaint(); } @Override public void installListeners() { super.installListeners(); getComponent().addFocusListener(this); } @Override public void uninstallListeners() { super.uninstallListeners(); getComponent().removeFocusListener(this); } }","dependencies":[]}}
{"project_id":248,"chunk_id":0,"content":{"main_file_path":"CSE-108-javaProject-byNetworking-master/Functions.java","main_file_content":"import java.util.ArrayList; import java.util.List; import java.util.Scanner; public class Functions extends project_main{ public static void search_by_Title(){ System.out.println(\"Please enter the movie title:\"); int temp = 0; Scanner scn3 = new Scanner(System.in); String str= scn3.nextLine(); for (Movie s : movieList) { if (s.getMovie_name().equals(str)) { temp = 1; System.out.println(s.getMovie_name() + \" \" + s.getReleasing_year() + \" \" + s.getGenre1() + \" \" + s.getGenre2() + \" \" + s.getGenre3() + \" \" + s.getRunning_time() + \" \" + s.getCompany() + \" \" + s.getBudget() + \" \" + s.getRevenue()); } } if (temp == 0) { System.out.println(\"No such movie with this name\"); } } public static void search_by_year(){ System.out.println(\"Please enter Releasing year of movie:\"); Scanner scn3 = new Scanner(System.in); int i= scn3.nextInt(); int temp = 0; for (Movie s : movieList) { if (s.getReleasing_year() == i) { temp = 1; System.out.println(s.getMovie_name() + \" \" + s.getReleasing_year() + \" \" + s.getGenre1() + \" \" + s.getGenre2() + \" \" + s.getGenre3() + \" \" + s.getRunning_time() + \" \" + s.getCompany() + \" \" + s.getBudget() + \" \" + s.getRevenue()); } } if (temp == 0) { System.out.println(\"No such movie with this release year\"); } } public static void search_by_genre(){ System.out.println(\"Please enter Genre of the movie:\"); Scanner scn3 = new Scanner(System.in); String str= scn3.nextLine(); int temp = 0; for (Movie s : movieList) { if (s.getGenre1().equals(str) || s.getGenre2().equals(str) || s.getGenre3().equals(str)) { temp = 1; System.out.println(s.getMovie_name() + \" \" + s.getReleasing_year() + \" \" + s.getGenre1() + \" \" + s.getGenre2() + \" \" + s.getGenre3() + \" \" + s.getRunning_time() + \" \" + s.getCompany() + \" \" + s.getBudget() + \" \" + s.getRevenue()); } } if (temp == 0) { System.out.println(\"“No such movie with this genre\"); } } public static void search_by_company() { System.out.println(\"Please enter Production company of movie:\"); Scanner scn3 = new Scanner(System.in); String str = scn3.nextLine(); int temp = 0; for (Movie s : movieList) { if (s.getCompany().equals(str)) { temp = 1; System.out.println(s.getMovie_name() + \" \" + s.getReleasing_year() + \" \" + s.getGenre1() + \" \" + s.getGenre2() + \" \" + s.getGenre3() + \" \" + s.getRunning_time() + \" \" + s.getCompany() + \" \" + s.getBudget() + \" \" + s.getRevenue()); } } if (temp == 0) { System.out.println(\"No such movie with this production company\"); } } public static void search_by_running_time(){ System.out.println(\"Please enter the range of Running Time of movie:\"); Scanner scn3 = new Scanner(System.in); int temp = 0, low = scn3.nextInt(), high = scn3.nextInt(); for (Movie s : movieList) { if (low <= s.getRunning_time() && s.getRunning_time() <= high) { temp = 1; System.out.println(s.getMovie_name() + \" \" + s.getReleasing_year() + \" \" + s.getGenre1() + \" \" + s.getGenre2() + \" \" + s.getGenre3() + \" \" + s.getRunning_time() + \" \" + s.getCompany() + \" \" + s.getBudget() + \" \" + s.getRevenue()); } } if (temp == 0) { System.out.println(\"No such movie with this running time range\"); } } public static void top_10_movies() { List<Movie> movieList2 = new ArrayList<>(movieList); double[] index_array = new double[movieList2.size()]; for (int i = 0; i < movieList2.size(); i++) { index_array[i] = movieList2.get(i).getRevenue() - movieList2.get(i).getBudget(); } for (int i = 0; i < index_array.length - 1; i++) { for (int j = i + 1; j < index_array.length; j++) { if (index_array[i] < index_array[j]) { double t = index_array[i]; index_array[i] = index_array[j]; index_array[j] = t; } } } for (int i = 0; i < 10; i++) { for (int j = 0; j < movieList2.size(); j++) { if (index_array[i] == movieList2.get(j).getRevenue() - movieList2.get(j).getBudget()) { Movie s = movieList2.get(j); System.out.println(s.getMovie_name() + \" \" + s.getReleasing_year() + \" \" + s.getGenre1() + \" \" + s.getGenre2() + \" \" + s.getGenre3() + \" \" + s.getRunning_time() + \" \" + s.getCompany() + \" \" + s.getBudget() + \" \" + s.getRevenue()); movieList2.remove(j); } } } } public static void company_recent_movies(){ System.out.println(\"Please input a production company:\"); Scanner scn3 = new Scanner(System.in); String str= scn3.nextLine(); int temp=0; List<Movie> movieList2 = new ArrayList(); for (Movie s : movieList) { if (s.getCompany().equals(str)) { temp=1; movieList2.add(s); } } if(temp!=0){ int[] index_array = new int[movieList2.size()]; for (int i = 0; i < movieList2.size(); i++) { index_array[i] = movieList2.get(i).getReleasing_year(); } for (int i = 0; i < index_array.length - 1; i++) { for (int j = i + 1; j < index_array.length; j++) { if (index_array[i] < index_array[j]) { int t = index_array[i]; index_array[i] = index_array[j]; index_array[j] = t; } } } for (int i = 0; i <index_array.length; i++) { for (int j = 0; j < movieList2.size(); j++) { if (index_array[i] == movieList2.get(j).getReleasing_year()) { Movie s = movieList2.get(j); System.out.println(s.getMovie_name() + \" \" + s.getReleasing_year() + \" \" + s.getGenre1() + \" \" + s.getGenre2() + \" \" + s.getGenre3() + \" \" + s.getRunning_time() + \" \" + s.getCompany() + \" \" + s.getBudget() + \" \" + s.getRevenue()); movieList2.remove(j); } } }} if(temp==0) System.out.println(\"No such production company with this name\"); } public static void company_maximum_revenue_movies(){ System.out.println(\"Please input a production company:\"); Scanner scn3 = new Scanner(System.in); String str= scn3.nextLine(); List<Movie> movieList2 = new ArrayList(); for (Movie s : movieList) { if (s.getCompany().equals(str)) { movieList2.add(s); } } if(movieList2.size()>0){ long[] index_array = new long[movieList2.size()]; for (int i = 0; i < movieList2.size(); i++) { index_array[i] = movieList2.get(i).getRevenue(); } for (int i = 0; i < index_array.length - 1; i++) { for (int j = i + 1; j < index_array.length; j++) { if (index_array[i] < index_array[j]) { long t = index_array[i]; index_array[i] = index_array[j]; index_array[j] = t; } } } for (int i = 0; i <index_array.length; i++) { for (int j = 0; j < movieList2.size(); j++) { if (index_array[i] == movieList2.get(j).getRevenue()) { Movie s = movieList2.get(j); System.out.println(s.getMovie_name() + \" \" + s.getReleasing_year() + \" \" + s.getGenre1() + \" \" + s.getGenre2() + \" \" + s.getGenre3() + \" \" + s.getRunning_time() + \" \" + s.getCompany() + \" \" + s.getBudget() + \" \" + s.getRevenue()); movieList2.remove(j); } } }} else System.out.println(\"No such production company with this name\"); } public static void company_total_profit(){ System.out.println(\"Please input a production company:\"); Scanner scn3 = new Scanner(System.in); String str= scn3.nextLine(); List<Movie> movieList2 = new ArrayList(); for (Movie s : movieList) { if (s.getCompany().equals(str)) { movieList2.add(s); } } if(movieList2.size()>0){ double total_profit=0; for (Movie s : movieList2) { total_profit+=s.getRevenue()-s.getBudget(); } System.out.println(\"Total Profit:\"+total_profit); } else System.out.println(\"No such production company with this name\"); } public static void all_company_and_movies_count(){ List<String> company_list= new ArrayList(); company_list.add(movieList.get(1).getCompany()); for (int i = 0; i < movieList.size(); i++) { String temp_name= movieList.get(i).getCompany(); for (int j =0 ; j < company_list.size(); j++) { int ch=0; for (String s:company_list) { if(s.equals(temp_name)) ch++; } if(ch==0) { company_list.add(temp_name); } } } for (int i = 0; i <company_list.size(); i++) { String temp_name = company_list.get(i); int count=0; for (int j=0; j<movieList.size(); j++) { if (movieList.get(j).getCompany().equals(temp_name)) { count++; } } System.out.println(temp_name + \", Total Number of Movies:\" + count); } } public static void add_new_movie_in_database(){ Movie temp_movie_for_add =new Movie(); System.out.println(\"Please Enter the Movie Name:\"); Scanner add_scn = new Scanner(System.in); String str= add_scn.nextLine(); temp_movie_for_add.setMovie_name(str); System.out.println(\"Please Enter Releasing year:\"); add_scn= new Scanner(System.in); double temp_var=add_scn.nextInt(); temp_movie_for_add.setReleasing_year((int) temp_var); System.out.println(\"Please Enter Running Time:\"); add_scn= new Scanner(System.in); temp_var=add_scn.nextInt(); temp_movie_for_add.setRunning_time((int) temp_var); System.out.println(\"Please Enter Maximum three genre of the Movie(comma(\\\",\\\") separated):\"); add_scn=new Scanner(System.in); String Genre = add_scn.nextLine(); String[] split_genre=Genre.split(\",\"); temp_movie_for_add.setGenre1(split_genre[0]); temp_movie_for_add.setGenre2(split_genre[1]); temp_movie_for_add.setGenre3(split_genre[2]); System.out.println(\"Please Enter the Company Name:\"); add_scn=new Scanner(System.in); str= add_scn.nextLine(); temp_movie_for_add.setCompany(str); System.out.println(\"Please Enter Budget of the Movie:\"); add_scn= new Scanner(System.in); temp_var=add_scn.nextInt(); temp_movie_for_add.setBudget((int) temp_var); System.out.println(\"Please Enter Revenue of the Movie:\"); add_scn= new Scanner(System.in); temp_var=add_scn.nextInt(); temp_movie_for_add.setRevenue((int) temp_var); movieList.add(temp_movie_for_add); } }","dependencies":[{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/MovieList.java","file_content":"class Movie { private String Movie_name; private int Releasing_year; private String Genre1; private String Genre2; private String Genre3; private int Running_time; private String Company; private long Budget; private long Revenue; public Movie(String name,int year,String g1,String g2,String g3, int time,String company,long budget,long revenue){ Movie_name=name; Releasing_year=year; Genre1=g1; Genre2=g2; Genre3=g3; Running_time=time; Company=company; Budget=budget; Revenue=revenue; } public Movie(){ } public void setMovie_name(String movie_name) { Movie_name = movie_name; } public void setReleasing_year(int releasing_year) { Releasing_year = releasing_year; } public void setGenre1(String genre1) { Genre1 = genre1; } public void setGenre2(String genre2) { Genre2 = genre2; } public void setGenre3(String genre3) { Genre3 = genre3; } public void setRunning_time(int running_time) { Running_time = running_time; } public void setCompany(String company) { Company = company; } public void setBudget(long budget) { Budget = budget; } public void setRevenue(long revenue) { Revenue = revenue; } public int getReleasing_year() { return Releasing_year; } public int getRunning_time() { return Running_time; } public long getBudget() { return Budget; } public long getRevenue() { return Revenue; } public String getCompany() { return Company; } public String getGenre1() { return Genre1; } public String getGenre2() { return Genre2; } public String getMovie_name() { return Movie_name; } public String getGenre3() { return Genre3; } }"},{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/project_main.java","file_content":"import java.io.*; import java.util.ArrayList; import java.util.List; import java.util.Scanner; public class project_main { private static final String INPUT_FILE_NAME = \"movies.txt\"; public static List<Movie> movieList = new ArrayList(); public static void main(String[] args) throws Exception { BufferedReader br = new BufferedReader(new FileReader(INPUT_FILE_NAME)); while (true) { String line = br.readLine(); if (line == null) break; String[] out = line.split(\",\"); Movie temp_movie = new Movie(out[0], Integer.parseInt(out[1]), out[2], out[3], out[4], Integer.parseInt(out[5]), out[6], Integer.parseInt(out[7]), Integer.parseInt(out[8])); movieList.add(temp_movie); } br.close(); while (true) { System.out.println(\"Main Menu:\"); System.out.println(\"1) Search Movies\"); System.out.println(\"2) Search Production Companies\"); System.out.println(\"3) Add Movie\"); System.out.println(\"4) Exit System\"); Scanner scn = new Scanner(System.in); int main_menu_choice= scn.nextInt(); if(main_menu_choice==1) { System.out.println(\"Movie Searching Options:\\n\" + \"1) By Movie Title\\n\" + \"2) By Release Year \\n\" + \"3) By Genre \\n\" + \"4) By Production Company\\n\" + \"5) By Running Time \\n\" + \"6) Top 10 Movies \\n\" + \"7) Back to Main Menu\"); Scanner scn2 = new Scanner(System.in); int x = scn2.nextInt(); switch (x) { case 1: Functions.search_by_Title(); break; case 2: Functions.search_by_year(); break; case 3: Functions.search_by_genre(); break; case 4: Functions.search_by_company(); break; case 5: Functions.search_by_running_time(); break; case 6: Functions.top_10_movies(); break; case 7: break; } } if(main_menu_choice==2) { System.out.println(\"Production Company Searching Options:\\n\" + \"1) Most Recent Movies \\n\" + \"2) Movies with the Maximum Revenue\\n\" + \"3) Total Profit\\n\" + \"4) List of Production Companies and the Count of their Produced Movies \\n\" + \"5) Back to Main Menu\"); Scanner scn3 = new Scanner(System.in); int x1 = scn3.nextInt(); switch (x1) { case 1: Functions.company_recent_movies(); break; case 2: Functions.company_maximum_revenue_movies(); break; case 3: Functions.company_total_profit(); break; case 4: Functions.all_company_and_movies_count(); break; case 5: break; } } if(main_menu_choice==3){ Functions.add_new_movie_in_database(); } if (main_menu_choice==4){ System.out.println(\"System Terminated\"); break; } } } }"}]}}
{"project_id":248,"chunk_id":0,"content":{"main_file_path":"CSE-108-javaProject-byNetworking-master/project_main.java","main_file_content":"import java.io.*; import java.util.ArrayList; import java.util.List; import java.util.Scanner; public class project_main { private static final String INPUT_FILE_NAME = \"movies.txt\"; public static List<Movie> movieList = new ArrayList(); public static void main(String[] args) throws Exception { BufferedReader br = new BufferedReader(new FileReader(INPUT_FILE_NAME)); while (true) { String line = br.readLine(); if (line == null) break; String[] out = line.split(\",\"); Movie temp_movie = new Movie(out[0], Integer.parseInt(out[1]), out[2], out[3], out[4], Integer.parseInt(out[5]), out[6], Integer.parseInt(out[7]), Integer.parseInt(out[8])); movieList.add(temp_movie); } br.close(); while (true) { System.out.println(\"Main Menu:\"); System.out.println(\"1) Search Movies\"); System.out.println(\"2) Search Production Companies\"); System.out.println(\"3) Add Movie\"); System.out.println(\"4) Exit System\"); Scanner scn = new Scanner(System.in); int main_menu_choice= scn.nextInt(); if(main_menu_choice==1) { System.out.println(\"Movie Searching Options:\\n\" + \"1) By Movie Title\\n\" + \"2) By Release Year \\n\" + \"3) By Genre \\n\" + \"4) By Production Company\\n\" + \"5) By Running Time \\n\" + \"6) Top 10 Movies \\n\" + \"7) Back to Main Menu\"); Scanner scn2 = new Scanner(System.in); int x = scn2.nextInt(); switch (x) { case 1: Functions.search_by_Title(); break; case 2: Functions.search_by_year(); break; case 3: Functions.search_by_genre(); break; case 4: Functions.search_by_company(); break; case 5: Functions.search_by_running_time(); break; case 6: Functions.top_10_movies(); break; case 7: break; } } if(main_menu_choice==2) { System.out.println(\"Production Company Searching Options:\\n\" + \"1) Most Recent Movies \\n\" + \"2) Movies with the Maximum Revenue\\n\" + \"3) Total Profit\\n\" + \"4) List of Production Companies and the Count of their Produced Movies \\n\" + \"5) Back to Main Menu\"); Scanner scn3 = new Scanner(System.in); int x1 = scn3.nextInt(); switch (x1) { case 1: Functions.company_recent_movies(); break; case 2: Functions.company_maximum_revenue_movies(); break; case 3: Functions.company_total_profit(); break; case 4: Functions.all_company_and_movies_count(); break; case 5: break; } } if(main_menu_choice==3){ Functions.add_new_movie_in_database(); } if (main_menu_choice==4){ System.out.println(\"System Terminated\"); break; } } } }","dependencies":[{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/Functions.java","file_content":"import java.util.ArrayList; import java.util.List; import java.util.Scanner; public class Functions extends project_main{ public static void search_by_Title(){ System.out.println(\"Please enter the movie title:\"); int temp = 0; Scanner scn3 = new Scanner(System.in); String str= scn3.nextLine(); for (Movie s : movieList) { if (s.getMovie_name().equals(str)) { temp = 1; System.out.println(s.getMovie_name() + \" \" + s.getReleasing_year() + \" \" + s.getGenre1() + \" \" + s.getGenre2() + \" \" + s.getGenre3() + \" \" + s.getRunning_time() + \" \" + s.getCompany() + \" \" + s.getBudget() + \" \" + s.getRevenue()); } } if (temp == 0) { System.out.println(\"No such movie with this name\"); } } public static void search_by_year(){ System.out.println(\"Please enter Releasing year of movie:\"); Scanner scn3 = new Scanner(System.in); int i= scn3.nextInt(); int temp = 0; for (Movie s : movieList) { if (s.getReleasing_year() == i) { temp = 1; System.out.println(s.getMovie_name() + \" \" + s.getReleasing_year() + \" \" + s.getGenre1() + \" \" + s.getGenre2() + \" \" + s.getGenre3() + \" \" + s.getRunning_time() + \" \" + s.getCompany() + \" \" + s.getBudget() + \" \" + s.getRevenue()); } } if (temp == 0) { System.out.println(\"No such movie with this release year\"); } } public static void search_by_genre(){ System.out.println(\"Please enter Genre of the movie:\"); Scanner scn3 = new Scanner(System.in); String str= scn3.nextLine(); int temp = 0; for (Movie s : movieList) { if (s.getGenre1().equals(str) || s.getGenre2().equals(str) || s.getGenre3().equals(str)) { temp = 1; System.out.println(s.getMovie_name() + \" \" + s.getReleasing_year() + \" \" + s.getGenre1() + \" \" + s.getGenre2() + \" \" + s.getGenre3() + \" \" + s.getRunning_time() + \" \" + s.getCompany() + \" \" + s.getBudget() + \" \" + s.getRevenue()); } } if (temp == 0) { System.out.println(\"“No such movie with this genre\"); } } public static void search_by_company() { System.out.println(\"Please enter Production company of movie:\"); Scanner scn3 = new Scanner(System.in); String str = scn3.nextLine(); int temp = 0; for (Movie s : movieList) { if (s.getCompany().equals(str)) { temp = 1; System.out.println(s.getMovie_name() + \" \" + s.getReleasing_year() + \" \" + s.getGenre1() + \" \" + s.getGenre2() + \" \" + s.getGenre3() + \" \" + s.getRunning_time() + \" \" + s.getCompany() + \" \" + s.getBudget() + \" \" + s.getRevenue()); } } if (temp == 0) { System.out.println(\"No such movie with this production company\"); } } public static void search_by_running_time(){ System.out.println(\"Please enter the range of Running Time of movie:\"); Scanner scn3 = new Scanner(System.in); int temp = 0, low = scn3.nextInt(), high = scn3.nextInt(); for (Movie s : movieList) { if (low <= s.getRunning_time() && s.getRunning_time() <= high) { temp = 1; System.out.println(s.getMovie_name() + \" \" + s.getReleasing_year() + \" \" + s.getGenre1() + \" \" + s.getGenre2() + \" \" + s.getGenre3() + \" \" + s.getRunning_time() + \" \" + s.getCompany() + \" \" + s.getBudget() + \" \" + s.getRevenue()); } } if (temp == 0) { System.out.println(\"No such movie with this running time range\"); } } public static void top_10_movies() { List<Movie> movieList2 = new ArrayList<>(movieList); double[] index_array = new double[movieList2.size()]; for (int i = 0; i < movieList2.size(); i++) { index_array[i] = movieList2.get(i).getRevenue() - movieList2.get(i).getBudget(); } for (int i = 0; i < index_array.length - 1; i++) { for (int j = i + 1; j < index_array.length; j++) { if (index_array[i] < index_array[j]) { double t = index_array[i]; index_array[i] = index_array[j]; index_array[j] = t; } } } for (int i = 0; i < 10; i++) { for (int j = 0; j < movieList2.size(); j++) { if (index_array[i] == movieList2.get(j).getRevenue() - movieList2.get(j).getBudget()) { Movie s = movieList2.get(j); System.out.println(s.getMovie_name() + \" \" + s.getReleasing_year() + \" \" + s.getGenre1() + \" \" + s.getGenre2() + \" \" + s.getGenre3() + \" \" + s.getRunning_time() + \" \" + s.getCompany() + \" \" + s.getBudget() + \" \" + s.getRevenue()); movieList2.remove(j); } } } } public static void company_recent_movies(){ System.out.println(\"Please input a production company:\"); Scanner scn3 = new Scanner(System.in); String str= scn3.nextLine(); int temp=0; List<Movie> movieList2 = new ArrayList(); for (Movie s : movieList) { if (s.getCompany().equals(str)) { temp=1; movieList2.add(s); } } if(temp!=0){ int[] index_array = new int[movieList2.size()]; for (int i = 0; i < movieList2.size(); i++) { index_array[i] = movieList2.get(i).getReleasing_year(); } for (int i = 0; i < index_array.length - 1; i++) { for (int j = i + 1; j < index_array.length; j++) { if (index_array[i] < index_array[j]) { int t = index_array[i]; index_array[i] = index_array[j]; index_array[j] = t; } } } for (int i = 0; i <index_array.length; i++) { for (int j = 0; j < movieList2.size(); j++) { if (index_array[i] == movieList2.get(j).getReleasing_year()) { Movie s = movieList2.get(j); System.out.println(s.getMovie_name() + \" \" + s.getReleasing_year() + \" \" + s.getGenre1() + \" \" + s.getGenre2() + \" \" + s.getGenre3() + \" \" + s.getRunning_time() + \" \" + s.getCompany() + \" \" + s.getBudget() + \" \" + s.getRevenue()); movieList2.remove(j); } } }} if(temp==0) System.out.println(\"No such production company with this name\"); } public static void company_maximum_revenue_movies(){ System.out.println(\"Please input a production company:\"); Scanner scn3 = new Scanner(System.in); String str= scn3.nextLine(); List<Movie> movieList2 = new ArrayList(); for (Movie s : movieList) { if (s.getCompany().equals(str)) { movieList2.add(s); } } if(movieList2.size()>0){ long[] index_array = new long[movieList2.size()]; for (int i = 0; i < movieList2.size(); i++) { index_array[i] = movieList2.get(i).getRevenue(); } for (int i = 0; i < index_array.length - 1; i++) { for (int j = i + 1; j < index_array.length; j++) { if (index_array[i] < index_array[j]) { long t = index_array[i]; index_array[i] = index_array[j]; index_array[j] = t; } } } for (int i = 0; i <index_array.length; i++) { for (int j = 0; j < movieList2.size(); j++) { if (index_array[i] == movieList2.get(j).getRevenue()) { Movie s = movieList2.get(j); System.out.println(s.getMovie_name() + \" \" + s.getReleasing_year() + \" \" + s.getGenre1() + \" \" + s.getGenre2() + \" \" + s.getGenre3() + \" \" + s.getRunning_time() + \" \" + s.getCompany() + \" \" + s.getBudget() + \" \" + s.getRevenue()); movieList2.remove(j); } } }} else System.out.println(\"No such production company with this name\"); } public static void company_total_profit(){ System.out.println(\"Please input a production company:\"); Scanner scn3 = new Scanner(System.in); String str= scn3.nextLine(); List<Movie> movieList2 = new ArrayList(); for (Movie s : movieList) { if (s.getCompany().equals(str)) { movieList2.add(s); } } if(movieList2.size()>0){ double total_profit=0; for (Movie s : movieList2) { total_profit+=s.getRevenue()-s.getBudget(); } System.out.println(\"Total Profit:\"+total_profit); } else System.out.println(\"No such production company with this name\"); } public static void all_company_and_movies_count(){ List<String> company_list= new ArrayList(); company_list.add(movieList.get(1).getCompany()); for (int i = 0; i < movieList.size(); i++) { String temp_name= movieList.get(i).getCompany(); for (int j =0 ; j < company_list.size(); j++) { int ch=0; for (String s:company_list) { if(s.equals(temp_name)) ch++; } if(ch==0) { company_list.add(temp_name); } } } for (int i = 0; i <company_list.size(); i++) { String temp_name = company_list.get(i); int count=0; for (int j=0; j<movieList.size(); j++) { if (movieList.get(j).getCompany().equals(temp_name)) { count++; } } System.out.println(temp_name + \", Total Number of Movies:\" + count); } } public static void add_new_movie_in_database(){ Movie temp_movie_for_add =new Movie(); System.out.println(\"Please Enter the Movie Name:\"); Scanner add_scn = new Scanner(System.in); String str= add_scn.nextLine(); temp_movie_for_add.setMovie_name(str); System.out.println(\"Please Enter Releasing year:\"); add_scn= new Scanner(System.in); double temp_var=add_scn.nextInt(); temp_movie_for_add.setReleasing_year((int) temp_var); System.out.println(\"Please Enter Running Time:\"); add_scn= new Scanner(System.in); temp_var=add_scn.nextInt(); temp_movie_for_add.setRunning_time((int) temp_var); System.out.println(\"Please Enter Maximum three genre of the Movie(comma(\\\",\\\") separated):\"); add_scn=new Scanner(System.in); String Genre = add_scn.nextLine(); String[] split_genre=Genre.split(\",\"); temp_movie_for_add.setGenre1(split_genre[0]); temp_movie_for_add.setGenre2(split_genre[1]); temp_movie_for_add.setGenre3(split_genre[2]); System.out.println(\"Please Enter the Company Name:\"); add_scn=new Scanner(System.in); str= add_scn.nextLine(); temp_movie_for_add.setCompany(str); System.out.println(\"Please Enter Budget of the Movie:\"); add_scn= new Scanner(System.in); temp_var=add_scn.nextInt(); temp_movie_for_add.setBudget((int) temp_var); System.out.println(\"Please Enter Revenue of the Movie:\"); add_scn= new Scanner(System.in); temp_var=add_scn.nextInt(); temp_movie_for_add.setRevenue((int) temp_var); movieList.add(temp_movie_for_add); } }"},{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/MovieList.java","file_content":"class Movie { private String Movie_name; private int Releasing_year; private String Genre1; private String Genre2; private String Genre3; private int Running_time; private String Company; private long Budget; private long Revenue; public Movie(String name,int year,String g1,String g2,String g3, int time,String company,long budget,long revenue){ Movie_name=name; Releasing_year=year; Genre1=g1; Genre2=g2; Genre3=g3; Running_time=time; Company=company; Budget=budget; Revenue=revenue; } public Movie(){ } public void setMovie_name(String movie_name) { Movie_name = movie_name; } public void setReleasing_year(int releasing_year) { Releasing_year = releasing_year; } public void setGenre1(String genre1) { Genre1 = genre1; } public void setGenre2(String genre2) { Genre2 = genre2; } public void setGenre3(String genre3) { Genre3 = genre3; } public void setRunning_time(int running_time) { Running_time = running_time; } public void setCompany(String company) { Company = company; } public void setBudget(long budget) { Budget = budget; } public void setRevenue(long revenue) { Revenue = revenue; } public int getReleasing_year() { return Releasing_year; } public int getRunning_time() { return Running_time; } public long getBudget() { return Budget; } public long getRevenue() { return Revenue; } public String getCompany() { return Company; } public String getGenre1() { return Genre1; } public String getGenre2() { return Genre2; } public String getMovie_name() { return Movie_name; } public String getGenre3() { return Genre3; } }"}]}}
{"project_id":248,"chunk_id":0,"content":{"main_file_path":"CSE-108-javaProject-byNetworking-master/MovieList.java","main_file_content":"class Movie { private String Movie_name; private int Releasing_year; private String Genre1; private String Genre2; private String Genre3; private int Running_time; private String Company; private long Budget; private long Revenue; public Movie(String name,int year,String g1,String g2,String g3, int time,String company,long budget,long revenue){ Movie_name=name; Releasing_year=year; Genre1=g1; Genre2=g2; Genre3=g3; Running_time=time; Company=company; Budget=budget; Revenue=revenue; } public Movie(){ } public void setMovie_name(String movie_name) { Movie_name = movie_name; } public void setReleasing_year(int releasing_year) { Releasing_year = releasing_year; } public void setGenre1(String genre1) { Genre1 = genre1; } public void setGenre2(String genre2) { Genre2 = genre2; } public void setGenre3(String genre3) { Genre3 = genre3; } public void setRunning_time(int running_time) { Running_time = running_time; } public void setCompany(String company) { Company = company; } public void setBudget(long budget) { Budget = budget; } public void setRevenue(long revenue) { Revenue = revenue; } public int getReleasing_year() { return Releasing_year; } public int getRunning_time() { return Running_time; } public long getBudget() { return Budget; } public long getRevenue() { return Revenue; } public String getCompany() { return Company; } public String getGenre1() { return Genre1; } public String getGenre2() { return Genre2; } public String getMovie_name() { return Movie_name; } public String getGenre3() { return Genre3; } }","dependencies":[]}}
{"project_id":248,"chunk_id":0,"content":{"main_file_path":"CSE-108-javaProject-byNetworking-master/server/Server.java","main_file_content":"package server; import commonClassPackage.DataWrapper; import commonClassPackage.Movie; import commonClassPackage.SocketWrapper; import java.io.*; import java.net.ServerSocket; import java.net.Socket; import java.util.ArrayList; import java.util.List; import static java.lang.Thread.currentThread; import java.util.*; public class Server { private static Boolean transferStatus=false; private static String transferredCompany; public static HashMap<String,SocketWrapper> clients=new HashMap<>(); public static void main(String[] args) throws IOException, ClassNotFoundException { new Thread(() -> { ServerSocket server= null; try { server = new ServerSocket(3333); } catch (IOException e) { throw new RuntimeException(e); } System.out.println(\"Server started\"); ArrayList<Object> arrayList=new ArrayList<Object>(); while (true) { List<Movie> movieList = new ArrayList<>(); List<Movie> companyMovieList = new ArrayList<>(); Socket clientSocket = null; SocketWrapper client = null; Object finalObjectdata; String stringData; String[] splitClientCommand; try { clientSocket = server.accept(); } catch (IOException e) { throw new RuntimeException(e); } try { client = new SocketWrapper(clientSocket); } catch (IOException e) { throw new RuntimeException(e); } Object objectdata = new Object(); try { objectdata = client.read(); } catch (IOException e) { throw new RuntimeException(e); } catch (ClassNotFoundException e) { throw new RuntimeException(e); } finalObjectdata = objectdata; stringData=(String) objectdata; splitClientCommand = stringData.split(\",\"); clients.put(splitClientCommand[1], client); if (splitClientCommand[0].equalsIgnoreCase(\"confirmFromTransferredCompany\")) { transferStatus=false; } else if (splitClientCommand[0].equals(\"giveMyList\") && splitClientCommand[1] != null) { try { BufferedReader br = new BufferedReader(new FileReader(\"movies.txt\")); while (true) { String line = br.readLine(); if (line == null) break; String[] out = line.split(\",\"); Movie temp_movie = new Movie(out[0], Integer.parseInt(out[1]), out[2], out[3], out[4], Integer.parseInt(out[5]), out[6], Integer.parseInt(out[7]), Integer.parseInt(out[8])); movieList.add(temp_movie); } br.close(); for (Movie s : movieList) { if (splitClientCommand[1].equalsIgnoreCase(s.getCompany())) { companyMovieList.add(s); } } DataWrapper serverToCompany = new DataWrapper(splitClientCommand[1], companyMovieList, transferStatus); clients.get(splitClientCommand[1]).write(serverToCompany); } catch (IOException e) { throw new RuntimeException(e); } } else if (splitClientCommand[0].equals(\"addAndUpdateMyList\")) { try { BufferedWriter output = new BufferedWriter(new FileWriter(\"movies.txt\", true)); String addTemp = splitClientCommand[1] + \",\" + splitClientCommand[2] + \",\" + splitClientCommand[3] + \",\" + splitClientCommand[4] + \",\" + splitClientCommand[5] + \",\" + splitClientCommand[6] + \",\" + splitClientCommand[7] + \",\" + splitClientCommand[8] + \",\" + splitClientCommand[9]; output.write(addTemp + System.lineSeparator()); output.close(); BufferedReader br = new BufferedReader(new FileReader(\"movies.txt\")); while (true) { String line = br.readLine(); if (line == null) break; String[] out = line.split(\",\"); Movie temp_movie = new Movie(out[0], Integer.parseInt(out[1]), out[2], out[3], out[4], Integer.parseInt(out[5]), out[6], Integer.parseInt(out[7]), Integer.parseInt(out[8])); movieList.add(temp_movie); } br.close(); for (Movie s : movieList) { if (splitClientCommand[7].equalsIgnoreCase(s.getCompany())) { companyMovieList.add(s); } } DataWrapper serverToCompany = new DataWrapper(companyMovieList.get(0).getCompany(), companyMovieList, transferStatus); clients.get(splitClientCommand[1]).write(serverToCompany); } catch (IOException e) { throw new RuntimeException(e); } } else if (splitClientCommand[0].equals(\"deleteAndUpdateMyList\")) { try { BufferedReader br = new BufferedReader(new FileReader(\"movies.txt\")); while (true) { String line = br.readLine(); if (line == null) break; String[] out = line.split(\",\"); Movie temp_movie = new Movie(out[0], Integer.parseInt(out[1]), out[2], out[3], out[4], Integer.parseInt(out[5]), out[6], Integer.parseInt(out[7]), Integer.parseInt(out[8])); movieList.add(temp_movie); } br.close(); String name2 = currentThread().getName(); for (Movie s : movieList) { if (s.getMovie_name().equalsIgnoreCase(splitClientCommand[2])) { movieList.remove(s); break; } } Writer writer = new BufferedWriter(new FileWriter(\"movies.txt\")); for (int i = 0; i < movieList.size(); i++) { String addTemp = movieList.get(i).getMovie_name() + \",\" + movieList.get(i).getReleasing_year() + \",\" + movieList.get(i).getGenre1() + \",\" + movieList.get(i).getGenre2() + \",\" + movieList.get(i).getGenre3() + \",\" + movieList.get(i).getRunning_time() + \",\" + movieList.get(i).getCompany() + \",\" + movieList.get(i).getBudget() + \",\" + movieList.get(i).getRevenue(); writer.write(addTemp + System.lineSeparator()); } writer.close(); for (Movie s : movieList) { if (splitClientCommand[1].equalsIgnoreCase(s.getCompany())) { companyMovieList.add(s); } } DataWrapper serverToCompany = new DataWrapper(companyMovieList.get(0).getCompany(), companyMovieList, transferStatus); clients.get(splitClientCommand[1]).write(serverToCompany); } catch (IOException e) { throw new RuntimeException(e); } } else if (splitClientCommand[0].equals(\"transferAndUpdateMyList\")) { try { BufferedReader br = new BufferedReader(new FileReader(\"movies.txt\")); while (true) { String line = br.readLine(); if (line == null) break; String[] out = line.split(\",\"); Movie temp_movie = new Movie(out[0], Integer.parseInt(out[1]), out[2], out[3], out[4], Integer.parseInt(out[5]), out[6], Integer.parseInt(out[7]), Integer.parseInt(out[8])); movieList.add(temp_movie); } br.close(); for (Movie s : movieList) { if (s.getMovie_name().equalsIgnoreCase(splitClientCommand[2])) { s.setCompany(splitClientCommand[3]); break; } } Writer writer = new BufferedWriter(new FileWriter(\"movies.txt\")); for (int i = 0; i < movieList.size(); i++) { String addTemp = movieList.get(i).getMovie_name() + \",\" + movieList.get(i).getReleasing_year() + \",\" + movieList.get(i).getGenre1() + \",\" + movieList.get(i).getGenre2() + \",\" + movieList.get(i).getGenre3() + \",\" + movieList.get(i).getRunning_time() + \",\" + movieList.get(i).getCompany() + \",\" + movieList.get(i).getBudget() + \",\" + movieList.get(i).getRevenue(); writer.write(addTemp + System.lineSeparator()); } writer.close(); transferStatus = true; for (Movie s : movieList) { if (splitClientCommand[1].equalsIgnoreCase(s.getCompany())) { companyMovieList.add(s); } } DataWrapper serverToCompany = new DataWrapper(splitClientCommand[1], companyMovieList, transferStatus); clients.get(splitClientCommand[1]).write(serverToCompany); List<Movie> transferredCompanyMovieList=new ArrayList<>(); for(Movie s:movieList){ if (splitClientCommand[3].equalsIgnoreCase(s.getCompany())){ transferredCompanyMovieList.add(s); } } DataWrapper serverToTransferredCompany = new DataWrapper(splitClientCommand[3], transferredCompanyMovieList, transferStatus); clients.get(splitClientCommand[3]).write(serverToTransferredCompany); } catch (IOException e) { throw new RuntimeException(e); } } } }).start(); } }","dependencies":[{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/commonClassPackage/DataWrapper.java","file_content":"package commonClassPackage; import java.io.Serializable; import java.util.ArrayList; import java.util.List; public class DataWrapper implements Serializable { public String company; public List movieArray; public Boolean Status =false; public DataWrapper(String command, List data,Boolean changeStatus){ this.company=command; this.movieArray=data; this.Status=changeStatus; } }"},{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/commonClassPackage/Movie.java","file_content":"package commonClassPackage; import java.io.Serializable; public class Movie implements Serializable { private String Movie_name; private int Releasing_year; private String Genre1; private String Genre2; private String Genre3; private int Running_time; private String Company; private long Budget; private long Revenue; public Movie(String name, int year, String g1, String g2, String g3, int time, String company, long budget, long revenue){ Movie_name=name; Releasing_year=year; Genre1=g1; Genre2=g2; Genre3=g3; Running_time=time; Company=company; Budget=budget; Revenue=revenue; } public Movie(){ } public void setMovie_name(String movie_name) { Movie_name = movie_name; } public void setReleasing_year(int releasing_year) { Releasing_year = releasing_year; } public void setGenre1(String genre1) { Genre1 = genre1; } public void setGenre2(String genre2) { Genre2 = genre2; } public void setGenre3(String genre3) { Genre3 = genre3; } public void setRunning_time(int running_time) { Running_time = running_time; } public void setCompany(String company) { Company = company; } public void setBudget(long budget) { Budget = budget; } public void setRevenue(long revenue) { Revenue = revenue; } public int getReleasing_year() { return Releasing_year; } public int getRunning_time() { return Running_time; } public long getBudget() { return Budget; } public long getRevenue() { return Revenue; } public String getCompany() { return Company; } public String getGenre1() { return Genre1; } public String getGenre2() { return Genre2; } public String getMovie_name() { return Movie_name; } public String getGenre3() { return Genre3; } }"},{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/commonClassPackage/SocketWrapper.java","file_content":"package commonClassPackage; import java.io.IOException; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.net.Socket; public class SocketWrapper { private Socket socket; private ObjectOutputStream oos; private ObjectInputStream ois; public SocketWrapper(String s, int port) throws IOException { this.socket = new Socket(s, port); oos = new ObjectOutputStream(socket.getOutputStream()); ois = new ObjectInputStream(socket.getInputStream()); } public SocketWrapper(Socket s) throws IOException { this.socket = s; oos = new ObjectOutputStream(socket.getOutputStream()); ois = new ObjectInputStream(socket.getInputStream()); } public Object read() throws IOException, ClassNotFoundException { return ois.readUnshared(); } public void write(Object o) throws IOException { oos.writeUnshared(o); } public void closeConnection() throws IOException { ois.close(); oos.close(); } }"}]}}
{"project_id":248,"chunk_id":0,"content":{"main_file_path":"CSE-108-javaProject-byNetworking-master/commonClassPackage/SocketWrapper.java","main_file_content":"package commonClassPackage; import java.io.IOException; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.net.Socket; public class SocketWrapper { private Socket socket; private ObjectOutputStream oos; private ObjectInputStream ois; public SocketWrapper(String s, int port) throws IOException { this.socket = new Socket(s, port); oos = new ObjectOutputStream(socket.getOutputStream()); ois = new ObjectInputStream(socket.getInputStream()); } public SocketWrapper(Socket s) throws IOException { this.socket = s; oos = new ObjectOutputStream(socket.getOutputStream()); ois = new ObjectInputStream(socket.getInputStream()); } public Object read() throws IOException, ClassNotFoundException { return ois.readUnshared(); } public void write(Object o) throws IOException { oos.writeUnshared(o); } public void closeConnection() throws IOException { ois.close(); oos.close(); } }","dependencies":[]}}
{"project_id":248,"chunk_id":0,"content":{"main_file_path":"CSE-108-javaProject-byNetworking-master/commonClassPackage/ReadThread.java","main_file_content":"package commonClassPackage; import javafx.application.Platform; import sample.Main; import util.LoginDTO; import java.io.IOException; public class ReadThread implements Runnable { private final Thread thr; private final Main main; public ReadThread(Main main) { this.main = main; this.thr = new Thread(this); thr.start(); } public void run() { try { while (true) { Object o = main.getNetworkUtil().read(); if (o != null) { if (o instanceof LoginDTO) { LoginDTO loginDTO = (LoginDTO) o; System.out.println(loginDTO.getUserName()); System.out.println(loginDTO.isStatus()); Platform.runLater(new Runnable() { @Override public void run() { if (loginDTO.isStatus()) { try { main.showHomePage(loginDTO.getUserName()); } catch (Exception e) { e.printStackTrace(); } } else { main.showAlert(); } } }); } } } } catch (Exception e) { System.out.println(e); } finally { try { main.getNetworkUtil().closeConnection(); } catch (IOException e) { e.printStackTrace(); } } } }","dependencies":[]}}
{"project_id":248,"chunk_id":0,"content":{"main_file_path":"CSE-108-javaProject-byNetworking-master/commonClassPackage/DataWrapper.java","main_file_content":"package commonClassPackage; import java.io.Serializable; import java.util.ArrayList; import java.util.List; public class DataWrapper implements Serializable { public String company; public List movieArray; public Boolean Status =false; public DataWrapper(String command, List data,Boolean changeStatus){ this.company=command; this.movieArray=data; this.Status=changeStatus; } }","dependencies":[]}}
{"project_id":248,"chunk_id":0,"content":{"main_file_path":"CSE-108-javaProject-byNetworking-master/commonClassPackage/Movie.java","main_file_content":"package commonClassPackage; import java.io.Serializable; public class Movie implements Serializable { private String Movie_name; private int Releasing_year; private String Genre1; private String Genre2; private String Genre3; private int Running_time; private String Company; private long Budget; private long Revenue; public Movie(String name, int year, String g1, String g2, String g3, int time, String company, long budget, long revenue){ Movie_name=name; Releasing_year=year; Genre1=g1; Genre2=g2; Genre3=g3; Running_time=time; Company=company; Budget=budget; Revenue=revenue; } public Movie(){ } public void setMovie_name(String movie_name) { Movie_name = movie_name; } public void setReleasing_year(int releasing_year) { Releasing_year = releasing_year; } public void setGenre1(String genre1) { Genre1 = genre1; } public void setGenre2(String genre2) { Genre2 = genre2; } public void setGenre3(String genre3) { Genre3 = genre3; } public void setRunning_time(int running_time) { Running_time = running_time; } public void setCompany(String company) { Company = company; } public void setBudget(long budget) { Budget = budget; } public void setRevenue(long revenue) { Revenue = revenue; } public int getReleasing_year() { return Releasing_year; } public int getRunning_time() { return Running_time; } public long getBudget() { return Budget; } public long getRevenue() { return Revenue; } public String getCompany() { return Company; } public String getGenre1() { return Genre1; } public String getGenre2() { return Genre2; } public String getMovie_name() { return Movie_name; } public String getGenre3() { return Genre3; } }","dependencies":[]}}
{"project_id":248,"chunk_id":0,"content":{"main_file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/Functions.java","main_file_content":"import java.util.ArrayList; import java.util.List; import java.util.Scanner; public class Functions extends project_main{ public static void search_by_Title(){ System.out.println(\"Please enter the movie title:\"); int temp = 0; Scanner scn3 = new Scanner(System.in); String str= scn3.nextLine(); for (Movie s : movieList) { if (s.getMovie_name().equals(str)) { temp = 1; System.out.println(s.getMovie_name() + \" \" + s.getReleasing_year() + \" \" + s.getGenre1() + \" \" + s.getGenre2() + \" \" + s.getGenre3() + \" \" + s.getRunning_time() + \" \" + s.getCompany() + \" \" + s.getBudget() + \" \" + s.getRevenue()); } } if (temp == 0) { System.out.println(\"No such movie with this name\"); } } public static void search_by_year(){ System.out.println(\"Please enter Releasing year of movie:\"); Scanner scn3 = new Scanner(System.in); int i= scn3.nextInt(); int temp = 0; for (Movie s : movieList) { if (s.getReleasing_year() == i) { temp = 1; System.out.println(s.getMovie_name() + \" \" + s.getReleasing_year() + \" \" + s.getGenre1() + \" \" + s.getGenre2() + \" \" + s.getGenre3() + \" \" + s.getRunning_time() + \" \" + s.getCompany() + \" \" + s.getBudget() + \" \" + s.getRevenue()); } } if (temp == 0) { System.out.println(\"No such movie with this release year\"); } } public static void search_by_genre(){ System.out.println(\"Please enter Genre of the movie:\"); Scanner scn3 = new Scanner(System.in); String str= scn3.nextLine(); int temp = 0; for (Movie s : movieList) { if (s.getGenre1().equals(str) || s.getGenre2().equals(str) || s.getGenre3().equals(str)) { temp = 1; System.out.println(s.getMovie_name() + \" \" + s.getReleasing_year() + \" \" + s.getGenre1() + \" \" + s.getGenre2() + \" \" + s.getGenre3() + \" \" + s.getRunning_time() + \" \" + s.getCompany() + \" \" + s.getBudget() + \" \" + s.getRevenue()); } } if (temp == 0) { System.out.println(\"“No such movie with this genre\"); } } public static void search_by_company() { System.out.println(\"Please enter Production company of movie:\"); Scanner scn3 = new Scanner(System.in); String str = scn3.nextLine(); int temp = 0; for (Movie s : movieList) { if (s.getCompany().equals(str)) { temp = 1; System.out.println(s.getMovie_name() + \" \" + s.getReleasing_year() + \" \" + s.getGenre1() + \" \" + s.getGenre2() + \" \" + s.getGenre3() + \" \" + s.getRunning_time() + \" \" + s.getCompany() + \" \" + s.getBudget() + \" \" + s.getRevenue()); } } if (temp == 0) { System.out.println(\"No such movie with this production company\"); } } public static void search_by_running_time(){ System.out.println(\"Please enter the range of Running Time of movie:\"); Scanner scn3 = new Scanner(System.in); int temp = 0, low = scn3.nextInt(), high = scn3.nextInt(); for (Movie s : movieList) { if (low <= s.getRunning_time() && s.getRunning_time() <= high) { temp = 1; System.out.println(s.getMovie_name() + \" \" + s.getReleasing_year() + \" \" + s.getGenre1() + \" \" + s.getGenre2() + \" \" + s.getGenre3() + \" \" + s.getRunning_time() + \" \" + s.getCompany() + \" \" + s.getBudget() + \" \" + s.getRevenue()); } } if (temp == 0) { System.out.println(\"No such movie with this running time range\"); } } public static void top_10_movies() { List<Movie> movieList2 = new ArrayList<>(movieList); double[] index_array = new double[movieList2.size()]; for (int i = 0; i < movieList2.size(); i++) { index_array[i] = movieList2.get(i).getRevenue() - movieList2.get(i).getBudget(); } for (int i = 0; i < index_array.length - 1; i++) { for (int j = i + 1; j < index_array.length; j++) { if (index_array[i] < index_array[j]) { double t = index_array[i]; index_array[i] = index_array[j]; index_array[j] = t; } } } for (int i = 0; i < 10; i++) { for (int j = 0; j < movieList2.size(); j++) { if (index_array[i] == movieList2.get(j).getRevenue() - movieList2.get(j).getBudget()) { Movie s = movieList2.get(j); System.out.println(s.getMovie_name() + \" \" + s.getReleasing_year() + \" \" + s.getGenre1() + \" \" + s.getGenre2() + \" \" + s.getGenre3() + \" \" + s.getRunning_time() + \" \" + s.getCompany() + \" \" + s.getBudget() + \" \" + s.getRevenue()); movieList2.remove(j); } } } } public static void company_recent_movies(){ System.out.println(\"Please input a production company:\"); Scanner scn3 = new Scanner(System.in); String str= scn3.nextLine(); int temp=0; List<Movie> movieList2 = new ArrayList(); for (Movie s : movieList) { if (s.getCompany().equals(str)) { temp=1; movieList2.add(s); } } if(temp!=0){ int[] index_array = new int[movieList2.size()]; for (int i = 0; i < movieList2.size(); i++) { index_array[i] = movieList2.get(i).getReleasing_year(); } for (int i = 0; i < index_array.length - 1; i++) { for (int j = i + 1; j < index_array.length; j++) { if (index_array[i] < index_array[j]) { int t = index_array[i]; index_array[i] = index_array[j]; index_array[j] = t; } } } for (int i = 0; i <index_array.length; i++) { for (int j = 0; j < movieList2.size(); j++) { if (index_array[i] == movieList2.get(j).getReleasing_year()) { Movie s = movieList2.get(j); System.out.println(s.getMovie_name() + \" \" + s.getReleasing_year() + \" \" + s.getGenre1() + \" \" + s.getGenre2() + \" \" + s.getGenre3() + \" \" + s.getRunning_time() + \" \" + s.getCompany() + \" \" + s.getBudget() + \" \" + s.getRevenue()); movieList2.remove(j); } } }} if(temp==0) System.out.println(\"No such production company with this name\"); } public static void company_maximum_revenue_movies(){ System.out.println(\"Please input a production company:\"); Scanner scn3 = new Scanner(System.in); String str= scn3.nextLine(); List<Movie> movieList2 = new ArrayList(); for (Movie s : movieList) { if (s.getCompany().equals(str)) { movieList2.add(s); } } if(movieList2.size()>0){ long[] index_array = new long[movieList2.size()]; for (int i = 0; i < movieList2.size(); i++) { index_array[i] = movieList2.get(i).getRevenue(); } for (int i = 0; i < index_array.length - 1; i++) { for (int j = i + 1; j < index_array.length; j++) { if (index_array[i] < index_array[j]) { long t = index_array[i]; index_array[i] = index_array[j]; index_array[j] = t; } } } for (int i = 0; i <index_array.length; i++) { for (int j = 0; j < movieList2.size(); j++) { if (index_array[i] == movieList2.get(j).getRevenue()) { Movie s = movieList2.get(j); System.out.println(s.getMovie_name() + \" \" + s.getReleasing_year() + \" \" + s.getGenre1() + \" \" + s.getGenre2() + \" \" + s.getGenre3() + \" \" + s.getRunning_time() + \" \" + s.getCompany() + \" \" + s.getBudget() + \" \" + s.getRevenue()); movieList2.remove(j); } } }} else System.out.println(\"No such production company with this name\"); } public static void company_total_profit(){ System.out.println(\"Please input a production company:\"); Scanner scn3 = new Scanner(System.in); String str= scn3.nextLine(); List<Movie> movieList2 = new ArrayList(); for (Movie s : movieList) { if (s.getCompany().equals(str)) { movieList2.add(s); } } if(movieList2.size()>0){ double total_profit=0; for (Movie s : movieList2) { total_profit+=s.getRevenue()-s.getBudget(); } System.out.println(\"Total Profit:\"+total_profit); } else System.out.println(\"No such production company with this name\"); } public static void all_company_and_movies_count(){ List<String> company_list= new ArrayList(); company_list.add(movieList.get(1).getCompany()); for (int i = 0; i < movieList.size(); i++) { String temp_name= movieList.get(i).getCompany(); for (int j =0 ; j < company_list.size(); j++) { int ch=0; for (String s:company_list) { if(s.equals(temp_name)) ch++; } if(ch==0) { company_list.add(temp_name); } } } for (int i = 0; i <company_list.size(); i++) { String temp_name = company_list.get(i); int count=0; for (int j=0; j<movieList.size(); j++) { if (movieList.get(j).getCompany().equals(temp_name)) { count++; } } System.out.println(temp_name + \", Total Number of Movies:\" + count); } } public static void add_new_movie_in_database(){ Movie temp_movie_for_add =new Movie(); System.out.println(\"Please Enter the Movie Name:\"); Scanner add_scn = new Scanner(System.in); String str= add_scn.nextLine(); temp_movie_for_add.setMovie_name(str); System.out.println(\"Please Enter Releasing year:\"); add_scn= new Scanner(System.in); double temp_var=add_scn.nextInt(); temp_movie_for_add.setReleasing_year((int) temp_var); System.out.println(\"Please Enter Running Time:\"); add_scn= new Scanner(System.in); temp_var=add_scn.nextInt(); temp_movie_for_add.setRunning_time((int) temp_var); System.out.println(\"Please Enter Maximum three genre of the Movie(comma(\\\",\\\") separated):\"); add_scn=new Scanner(System.in); String Genre = add_scn.nextLine(); String[] split_genre=Genre.split(\",\"); temp_movie_for_add.setGenre1(split_genre[0]); temp_movie_for_add.setGenre2(split_genre[1]); temp_movie_for_add.setGenre3(split_genre[2]); System.out.println(\"Please Enter the Company Name:\"); add_scn=new Scanner(System.in); str= add_scn.nextLine(); temp_movie_for_add.setCompany(str); System.out.println(\"Please Enter Budget of the Movie:\"); add_scn= new Scanner(System.in); temp_var=add_scn.nextInt(); temp_movie_for_add.setBudget((int) temp_var); System.out.println(\"Please Enter Revenue of the Movie:\"); add_scn= new Scanner(System.in); temp_var=add_scn.nextInt(); temp_movie_for_add.setRevenue((int) temp_var); movieList.add(temp_movie_for_add); } }","dependencies":[{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/MovieList.java","file_content":"class Movie { private String Movie_name; private int Releasing_year; private String Genre1; private String Genre2; private String Genre3; private int Running_time; private String Company; private long Budget; private long Revenue; public Movie(String name,int year,String g1,String g2,String g3, int time,String company,long budget,long revenue){ Movie_name=name; Releasing_year=year; Genre1=g1; Genre2=g2; Genre3=g3; Running_time=time; Company=company; Budget=budget; Revenue=revenue; } public Movie(){ } public void setMovie_name(String movie_name) { Movie_name = movie_name; } public void setReleasing_year(int releasing_year) { Releasing_year = releasing_year; } public void setGenre1(String genre1) { Genre1 = genre1; } public void setGenre2(String genre2) { Genre2 = genre2; } public void setGenre3(String genre3) { Genre3 = genre3; } public void setRunning_time(int running_time) { Running_time = running_time; } public void setCompany(String company) { Company = company; } public void setBudget(long budget) { Budget = budget; } public void setRevenue(long revenue) { Revenue = revenue; } public int getReleasing_year() { return Releasing_year; } public int getRunning_time() { return Running_time; } public long getBudget() { return Budget; } public long getRevenue() { return Revenue; } public String getCompany() { return Company; } public String getGenre1() { return Genre1; } public String getGenre2() { return Genre2; } public String getMovie_name() { return Movie_name; } public String getGenre3() { return Genre3; } }"},{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/project_main.java","file_content":"import java.io.*; import java.util.ArrayList; import java.util.List; import java.util.Scanner; public class project_main { private static final String INPUT_FILE_NAME = \"movies.txt\"; public static List<Movie> movieList = new ArrayList(); public static void main(String[] args) throws Exception { BufferedReader br = new BufferedReader(new FileReader(INPUT_FILE_NAME)); while (true) { String line = br.readLine(); if (line == null) break; String[] out = line.split(\",\"); Movie temp_movie = new Movie(out[0], Integer.parseInt(out[1]), out[2], out[3], out[4], Integer.parseInt(out[5]), out[6], Integer.parseInt(out[7]), Integer.parseInt(out[8])); movieList.add(temp_movie); } br.close(); while (true) { System.out.println(\"Main Menu:\"); System.out.println(\"1) Search Movies\"); System.out.println(\"2) Search Production Companies\"); System.out.println(\"3) Add Movie\"); System.out.println(\"4) Exit System\"); Scanner scn = new Scanner(System.in); int main_menu_choice= scn.nextInt(); if(main_menu_choice==1) { System.out.println(\"Movie Searching Options:\\n\" + \"1) By Movie Title\\n\" + \"2) By Release Year \\n\" + \"3) By Genre \\n\" + \"4) By Production Company\\n\" + \"5) By Running Time \\n\" + \"6) Top 10 Movies \\n\" + \"7) Back to Main Menu\"); Scanner scn2 = new Scanner(System.in); int x = scn2.nextInt(); switch (x) { case 1: Functions.search_by_Title(); break; case 2: Functions.search_by_year(); break; case 3: Functions.search_by_genre(); break; case 4: Functions.search_by_company(); break; case 5: Functions.search_by_running_time(); break; case 6: Functions.top_10_movies(); break; case 7: break; } } if(main_menu_choice==2) { System.out.println(\"Production Company Searching Options:\\n\" + \"1) Most Recent Movies \\n\" + \"2) Movies with the Maximum Revenue\\n\" + \"3) Total Profit\\n\" + \"4) List of Production Companies and the Count of their Produced Movies \\n\" + \"5) Back to Main Menu\"); Scanner scn3 = new Scanner(System.in); int x1 = scn3.nextInt(); switch (x1) { case 1: Functions.company_recent_movies(); break; case 2: Functions.company_maximum_revenue_movies(); break; case 3: Functions.company_total_profit(); break; case 4: Functions.all_company_and_movies_count(); break; case 5: break; } } if(main_menu_choice==3){ Functions.add_new_movie_in_database(); } if (main_menu_choice==4){ System.out.println(\"System Terminated\"); break; } } } }"}]}}
{"project_id":248,"chunk_id":0,"content":{"main_file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/project_main.java","main_file_content":"import java.io.*; import java.util.ArrayList; import java.util.List; import java.util.Scanner; public class project_main { private static final String INPUT_FILE_NAME = \"movies.txt\"; public static List<Movie> movieList = new ArrayList(); public static void main(String[] args) throws Exception { BufferedReader br = new BufferedReader(new FileReader(INPUT_FILE_NAME)); while (true) { String line = br.readLine(); if (line == null) break; String[] out = line.split(\",\"); Movie temp_movie = new Movie(out[0], Integer.parseInt(out[1]), out[2], out[3], out[4], Integer.parseInt(out[5]), out[6], Integer.parseInt(out[7]), Integer.parseInt(out[8])); movieList.add(temp_movie); } br.close(); while (true) { System.out.println(\"Main Menu:\"); System.out.println(\"1) Search Movies\"); System.out.println(\"2) Search Production Companies\"); System.out.println(\"3) Add Movie\"); System.out.println(\"4) Exit System\"); Scanner scn = new Scanner(System.in); int main_menu_choice= scn.nextInt(); if(main_menu_choice==1) { System.out.println(\"Movie Searching Options:\\n\" + \"1) By Movie Title\\n\" + \"2) By Release Year \\n\" + \"3) By Genre \\n\" + \"4) By Production Company\\n\" + \"5) By Running Time \\n\" + \"6) Top 10 Movies \\n\" + \"7) Back to Main Menu\"); Scanner scn2 = new Scanner(System.in); int x = scn2.nextInt(); switch (x) { case 1: Functions.search_by_Title(); break; case 2: Functions.search_by_year(); break; case 3: Functions.search_by_genre(); break; case 4: Functions.search_by_company(); break; case 5: Functions.search_by_running_time(); break; case 6: Functions.top_10_movies(); break; case 7: break; } } if(main_menu_choice==2) { System.out.println(\"Production Company Searching Options:\\n\" + \"1) Most Recent Movies \\n\" + \"2) Movies with the Maximum Revenue\\n\" + \"3) Total Profit\\n\" + \"4) List of Production Companies and the Count of their Produced Movies \\n\" + \"5) Back to Main Menu\"); Scanner scn3 = new Scanner(System.in); int x1 = scn3.nextInt(); switch (x1) { case 1: Functions.company_recent_movies(); break; case 2: Functions.company_maximum_revenue_movies(); break; case 3: Functions.company_total_profit(); break; case 4: Functions.all_company_and_movies_count(); break; case 5: break; } } if(main_menu_choice==3){ Functions.add_new_movie_in_database(); } if (main_menu_choice==4){ System.out.println(\"System Terminated\"); break; } } } }","dependencies":[{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/Functions.java","file_content":"import java.util.ArrayList; import java.util.List; import java.util.Scanner; public class Functions extends project_main{ public static void search_by_Title(){ System.out.println(\"Please enter the movie title:\"); int temp = 0; Scanner scn3 = new Scanner(System.in); String str= scn3.nextLine(); for (Movie s : movieList) { if (s.getMovie_name().equals(str)) { temp = 1; System.out.println(s.getMovie_name() + \" \" + s.getReleasing_year() + \" \" + s.getGenre1() + \" \" + s.getGenre2() + \" \" + s.getGenre3() + \" \" + s.getRunning_time() + \" \" + s.getCompany() + \" \" + s.getBudget() + \" \" + s.getRevenue()); } } if (temp == 0) { System.out.println(\"No such movie with this name\"); } } public static void search_by_year(){ System.out.println(\"Please enter Releasing year of movie:\"); Scanner scn3 = new Scanner(System.in); int i= scn3.nextInt(); int temp = 0; for (Movie s : movieList) { if (s.getReleasing_year() == i) { temp = 1; System.out.println(s.getMovie_name() + \" \" + s.getReleasing_year() + \" \" + s.getGenre1() + \" \" + s.getGenre2() + \" \" + s.getGenre3() + \" \" + s.getRunning_time() + \" \" + s.getCompany() + \" \" + s.getBudget() + \" \" + s.getRevenue()); } } if (temp == 0) { System.out.println(\"No such movie with this release year\"); } } public static void search_by_genre(){ System.out.println(\"Please enter Genre of the movie:\"); Scanner scn3 = new Scanner(System.in); String str= scn3.nextLine(); int temp = 0; for (Movie s : movieList) { if (s.getGenre1().equals(str) || s.getGenre2().equals(str) || s.getGenre3().equals(str)) { temp = 1; System.out.println(s.getMovie_name() + \" \" + s.getReleasing_year() + \" \" + s.getGenre1() + \" \" + s.getGenre2() + \" \" + s.getGenre3() + \" \" + s.getRunning_time() + \" \" + s.getCompany() + \" \" + s.getBudget() + \" \" + s.getRevenue()); } } if (temp == 0) { System.out.println(\"“No such movie with this genre\"); } } public static void search_by_company() { System.out.println(\"Please enter Production company of movie:\"); Scanner scn3 = new Scanner(System.in); String str = scn3.nextLine(); int temp = 0; for (Movie s : movieList) { if (s.getCompany().equals(str)) { temp = 1; System.out.println(s.getMovie_name() + \" \" + s.getReleasing_year() + \" \" + s.getGenre1() + \" \" + s.getGenre2() + \" \" + s.getGenre3() + \" \" + s.getRunning_time() + \" \" + s.getCompany() + \" \" + s.getBudget() + \" \" + s.getRevenue()); } } if (temp == 0) { System.out.println(\"No such movie with this production company\"); } } public static void search_by_running_time(){ System.out.println(\"Please enter the range of Running Time of movie:\"); Scanner scn3 = new Scanner(System.in); int temp = 0, low = scn3.nextInt(), high = scn3.nextInt(); for (Movie s : movieList) { if (low <= s.getRunning_time() && s.getRunning_time() <= high) { temp = 1; System.out.println(s.getMovie_name() + \" \" + s.getReleasing_year() + \" \" + s.getGenre1() + \" \" + s.getGenre2() + \" \" + s.getGenre3() + \" \" + s.getRunning_time() + \" \" + s.getCompany() + \" \" + s.getBudget() + \" \" + s.getRevenue()); } } if (temp == 0) { System.out.println(\"No such movie with this running time range\"); } } public static void top_10_movies() { List<Movie> movieList2 = new ArrayList<>(movieList); double[] index_array = new double[movieList2.size()]; for (int i = 0; i < movieList2.size(); i++) { index_array[i] = movieList2.get(i).getRevenue() - movieList2.get(i).getBudget(); } for (int i = 0; i < index_array.length - 1; i++) { for (int j = i + 1; j < index_array.length; j++) { if (index_array[i] < index_array[j]) { double t = index_array[i]; index_array[i] = index_array[j]; index_array[j] = t; } } } for (int i = 0; i < 10; i++) { for (int j = 0; j < movieList2.size(); j++) { if (index_array[i] == movieList2.get(j).getRevenue() - movieList2.get(j).getBudget()) { Movie s = movieList2.get(j); System.out.println(s.getMovie_name() + \" \" + s.getReleasing_year() + \" \" + s.getGenre1() + \" \" + s.getGenre2() + \" \" + s.getGenre3() + \" \" + s.getRunning_time() + \" \" + s.getCompany() + \" \" + s.getBudget() + \" \" + s.getRevenue()); movieList2.remove(j); } } } } public static void company_recent_movies(){ System.out.println(\"Please input a production company:\"); Scanner scn3 = new Scanner(System.in); String str= scn3.nextLine(); int temp=0; List<Movie> movieList2 = new ArrayList(); for (Movie s : movieList) { if (s.getCompany().equals(str)) { temp=1; movieList2.add(s); } } if(temp!=0){ int[] index_array = new int[movieList2.size()]; for (int i = 0; i < movieList2.size(); i++) { index_array[i] = movieList2.get(i).getReleasing_year(); } for (int i = 0; i < index_array.length - 1; i++) { for (int j = i + 1; j < index_array.length; j++) { if (index_array[i] < index_array[j]) { int t = index_array[i]; index_array[i] = index_array[j]; index_array[j] = t; } } } for (int i = 0; i <index_array.length; i++) { for (int j = 0; j < movieList2.size(); j++) { if (index_array[i] == movieList2.get(j).getReleasing_year()) { Movie s = movieList2.get(j); System.out.println(s.getMovie_name() + \" \" + s.getReleasing_year() + \" \" + s.getGenre1() + \" \" + s.getGenre2() + \" \" + s.getGenre3() + \" \" + s.getRunning_time() + \" \" + s.getCompany() + \" \" + s.getBudget() + \" \" + s.getRevenue()); movieList2.remove(j); } } }} if(temp==0) System.out.println(\"No such production company with this name\"); } public static void company_maximum_revenue_movies(){ System.out.println(\"Please input a production company:\"); Scanner scn3 = new Scanner(System.in); String str= scn3.nextLine(); List<Movie> movieList2 = new ArrayList(); for (Movie s : movieList) { if (s.getCompany().equals(str)) { movieList2.add(s); } } if(movieList2.size()>0){ long[] index_array = new long[movieList2.size()]; for (int i = 0; i < movieList2.size(); i++) { index_array[i] = movieList2.get(i).getRevenue(); } for (int i = 0; i < index_array.length - 1; i++) { for (int j = i + 1; j < index_array.length; j++) { if (index_array[i] < index_array[j]) { long t = index_array[i]; index_array[i] = index_array[j]; index_array[j] = t; } } } for (int i = 0; i <index_array.length; i++) { for (int j = 0; j < movieList2.size(); j++) { if (index_array[i] == movieList2.get(j).getRevenue()) { Movie s = movieList2.get(j); System.out.println(s.getMovie_name() + \" \" + s.getReleasing_year() + \" \" + s.getGenre1() + \" \" + s.getGenre2() + \" \" + s.getGenre3() + \" \" + s.getRunning_time() + \" \" + s.getCompany() + \" \" + s.getBudget() + \" \" + s.getRevenue()); movieList2.remove(j); } } }} else System.out.println(\"No such production company with this name\"); } public static void company_total_profit(){ System.out.println(\"Please input a production company:\"); Scanner scn3 = new Scanner(System.in); String str= scn3.nextLine(); List<Movie> movieList2 = new ArrayList(); for (Movie s : movieList) { if (s.getCompany().equals(str)) { movieList2.add(s); } } if(movieList2.size()>0){ double total_profit=0; for (Movie s : movieList2) { total_profit+=s.getRevenue()-s.getBudget(); } System.out.println(\"Total Profit:\"+total_profit); } else System.out.println(\"No such production company with this name\"); } public static void all_company_and_movies_count(){ List<String> company_list= new ArrayList(); company_list.add(movieList.get(1).getCompany()); for (int i = 0; i < movieList.size(); i++) { String temp_name= movieList.get(i).getCompany(); for (int j =0 ; j < company_list.size(); j++) { int ch=0; for (String s:company_list) { if(s.equals(temp_name)) ch++; } if(ch==0) { company_list.add(temp_name); } } } for (int i = 0; i <company_list.size(); i++) { String temp_name = company_list.get(i); int count=0; for (int j=0; j<movieList.size(); j++) { if (movieList.get(j).getCompany().equals(temp_name)) { count++; } } System.out.println(temp_name + \", Total Number of Movies:\" + count); } } public static void add_new_movie_in_database(){ Movie temp_movie_for_add =new Movie(); System.out.println(\"Please Enter the Movie Name:\"); Scanner add_scn = new Scanner(System.in); String str= add_scn.nextLine(); temp_movie_for_add.setMovie_name(str); System.out.println(\"Please Enter Releasing year:\"); add_scn= new Scanner(System.in); double temp_var=add_scn.nextInt(); temp_movie_for_add.setReleasing_year((int) temp_var); System.out.println(\"Please Enter Running Time:\"); add_scn= new Scanner(System.in); temp_var=add_scn.nextInt(); temp_movie_for_add.setRunning_time((int) temp_var); System.out.println(\"Please Enter Maximum three genre of the Movie(comma(\\\",\\\") separated):\"); add_scn=new Scanner(System.in); String Genre = add_scn.nextLine(); String[] split_genre=Genre.split(\",\"); temp_movie_for_add.setGenre1(split_genre[0]); temp_movie_for_add.setGenre2(split_genre[1]); temp_movie_for_add.setGenre3(split_genre[2]); System.out.println(\"Please Enter the Company Name:\"); add_scn=new Scanner(System.in); str= add_scn.nextLine(); temp_movie_for_add.setCompany(str); System.out.println(\"Please Enter Budget of the Movie:\"); add_scn= new Scanner(System.in); temp_var=add_scn.nextInt(); temp_movie_for_add.setBudget((int) temp_var); System.out.println(\"Please Enter Revenue of the Movie:\"); add_scn= new Scanner(System.in); temp_var=add_scn.nextInt(); temp_movie_for_add.setRevenue((int) temp_var); movieList.add(temp_movie_for_add); } }"},{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/MovieList.java","file_content":"class Movie { private String Movie_name; private int Releasing_year; private String Genre1; private String Genre2; private String Genre3; private int Running_time; private String Company; private long Budget; private long Revenue; public Movie(String name,int year,String g1,String g2,String g3, int time,String company,long budget,long revenue){ Movie_name=name; Releasing_year=year; Genre1=g1; Genre2=g2; Genre3=g3; Running_time=time; Company=company; Budget=budget; Revenue=revenue; } public Movie(){ } public void setMovie_name(String movie_name) { Movie_name = movie_name; } public void setReleasing_year(int releasing_year) { Releasing_year = releasing_year; } public void setGenre1(String genre1) { Genre1 = genre1; } public void setGenre2(String genre2) { Genre2 = genre2; } public void setGenre3(String genre3) { Genre3 = genre3; } public void setRunning_time(int running_time) { Running_time = running_time; } public void setCompany(String company) { Company = company; } public void setBudget(long budget) { Budget = budget; } public void setRevenue(long revenue) { Revenue = revenue; } public int getReleasing_year() { return Releasing_year; } public int getRunning_time() { return Running_time; } public long getBudget() { return Budget; } public long getRevenue() { return Revenue; } public String getCompany() { return Company; } public String getGenre1() { return Genre1; } public String getGenre2() { return Genre2; } public String getMovie_name() { return Movie_name; } public String getGenre3() { return Genre3; } }"}]}}
{"project_id":248,"chunk_id":0,"content":{"main_file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/MovieList.java","main_file_content":"class Movie { private String Movie_name; private int Releasing_year; private String Genre1; private String Genre2; private String Genre3; private int Running_time; private String Company; private long Budget; private long Revenue; public Movie(String name,int year,String g1,String g2,String g3, int time,String company,long budget,long revenue){ Movie_name=name; Releasing_year=year; Genre1=g1; Genre2=g2; Genre3=g3; Running_time=time; Company=company; Budget=budget; Revenue=revenue; } public Movie(){ } public void setMovie_name(String movie_name) { Movie_name = movie_name; } public void setReleasing_year(int releasing_year) { Releasing_year = releasing_year; } public void setGenre1(String genre1) { Genre1 = genre1; } public void setGenre2(String genre2) { Genre2 = genre2; } public void setGenre3(String genre3) { Genre3 = genre3; } public void setRunning_time(int running_time) { Running_time = running_time; } public void setCompany(String company) { Company = company; } public void setBudget(long budget) { Budget = budget; } public void setRevenue(long revenue) { Revenue = revenue; } public int getReleasing_year() { return Releasing_year; } public int getRunning_time() { return Running_time; } public long getBudget() { return Budget; } public long getRevenue() { return Revenue; } public String getCompany() { return Company; } public String getGenre1() { return Genre1; } public String getGenre2() { return Genre2; } public String getMovie_name() { return Movie_name; } public String getGenre3() { return Genre3; } }","dependencies":[]}}
{"project_id":248,"chunk_id":0,"content":{"main_file_path":"CSE-108-javaProject-byNetworking-master/myCLient/CompanyHomeController.java","main_file_content":"package myCLient; import commonClassPackage.Movie; import javafx.event.ActionEvent; import javafx.fxml.FXML; import javafx.scene.control.Label; import java.io.IOException; public class CompanyHomeController extends clientMain{ @FXML Label toShowTotalMovie; @FXML Label toShowBestMovie; @FXML Label toShowTotalProfit; @FXML Label companyHomeTotalProfit; @FXML Label companyHomeMovieCount; @FXML Label companyHomeClientName; @FXML Label toShowCompanyName; @FXML Label companyHomeBestMovie; @Override public void onSearchMoviesClick(ActionEvent actionEvent) throws IOException { super.onSearchMoviesClick(actionEvent); } @Override public void onAddMovieClick(ActionEvent actionEvent) throws IOException { super.onAddMovieClick(actionEvent); } @Override public void onCompanyHomeBackClick(ActionEvent actionEvent) throws IOException { super.onCompanyHomeBackClick(actionEvent); } public void onCompanyHomeDetailsClick(ActionEvent actionEvent) { toShowTotalMovie.setText(\"Total Number of Movies :\"); toShowTotalProfit.setText(\"Total Profit :\"); toShowBestMovie.setText(\"Best Movie :\"); toShowCompanyName.setText(COMPANY_NAME); companyHomeMovieCount.setText(String.valueOf(clientMovieArray.size())); long profit=0; for (int i=0;i<clientMovieArray.size();i++){ profit+=clientMovieArray.get(i).getRevenue()-clientMovieArray.get(i).getBudget(); } Movie s=clientMovieArray.get(0); for (int i=1;i<clientMovieArray.size();i++){ if((s.getRevenue()-s.getBudget())<(clientMovieArray.get(i).getRevenue()-clientMovieArray.get(i).getBudget())){ s=clientMovieArray.get(i); } } companyHomeTotalProfit.setText(String.valueOf(profit)+\" $\"); companyHomeBestMovie.setText(s.getMovie_name()); } }","dependencies":[{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/commonClassPackage/Movie.java","file_content":"package commonClassPackage; import java.io.Serializable; public class Movie implements Serializable { private String Movie_name; private int Releasing_year; private String Genre1; private String Genre2; private String Genre3; private int Running_time; private String Company; private long Budget; private long Revenue; public Movie(String name, int year, String g1, String g2, String g3, int time, String company, long budget, long revenue){ Movie_name=name; Releasing_year=year; Genre1=g1; Genre2=g2; Genre3=g3; Running_time=time; Company=company; Budget=budget; Revenue=revenue; } public Movie(){ } public void setMovie_name(String movie_name) { Movie_name = movie_name; } public void setReleasing_year(int releasing_year) { Releasing_year = releasing_year; } public void setGenre1(String genre1) { Genre1 = genre1; } public void setGenre2(String genre2) { Genre2 = genre2; } public void setGenre3(String genre3) { Genre3 = genre3; } public void setRunning_time(int running_time) { Running_time = running_time; } public void setCompany(String company) { Company = company; } public void setBudget(long budget) { Budget = budget; } public void setRevenue(long revenue) { Revenue = revenue; } public int getReleasing_year() { return Releasing_year; } public int getRunning_time() { return Running_time; } public long getBudget() { return Budget; } public long getRevenue() { return Revenue; } public String getCompany() { return Company; } public String getGenre1() { return Genre1; } public String getGenre2() { return Genre2; } public String getMovie_name() { return Movie_name; } public String getGenre3() { return Genre3; } }"},{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/myCLient/clientMain.java","file_content":"package myCLient; import commonClassPackage.DataWrapper; import commonClassPackage.Movie; import commonClassPackage.SocketWrapper; import javafx.application.Application; import javafx.event.ActionEvent; import javafx.fxml.FXML; import javafx.fxml.FXMLLoader; import javafx.scene.Node; import javafx.scene.Scene; import javafx.scene.control.Alert; import javafx.scene.control.Label; import javafx.scene.control.TextField; import javafx.stage.Modality; import javafx.stage.Stage; import java.io.IOException; import java.util.ArrayList; import java.util.List; public class clientMain extends Application{ @FXML TextField userText; @FXML Label warningText; public static List<Movie> clientMovieArray=new ArrayList<>(); public static String COMPANY_NAME; public static final int smallHeight=600; public static final int smallWidth=400; public static final int largeHeight=1015; public static final int largeWidth=650; public void start(Stage stage) throws IOException { FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"clientMain.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Movie Action\"); stage.setScene(scene); stage.show(); } public static void main(String[]args) throws IOException { launch(); } public void loginAction(ActionEvent actionEvent) throws IOException, ClassNotFoundException { COMPANY_NAME = userText.getText(); SocketWrapper server = new SocketWrapper(\"127.0.0.1\", 3333); server.write(\"giveMyList,\" + COMPANY_NAME); Object clientObjectData = server.read(); DataWrapper clientWrapperData = (DataWrapper) clientObjectData; clientMovieArray = (ArrayList) clientWrapperData.movieArray; if (clientMovieArray.size()==0){ Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); Alert.AlertType type= Alert.AlertType.WARNING; Alert alert=new Alert(type,\"\"); alert.initModality(Modality.APPLICATION_MODAL); alert.initModality(stage.getModality()); alert.getDialogPane().setContentText(\"No Company Exists in Database with This Name\"); alert.getDialogPane().setHeaderText(\"WARNING!!!\"); alert.showAndWait(); }else { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option!\"); stage.setScene(scene); stage.show(); } } public void resetAction(ActionEvent actionEvent) { userText.setText(null); warningText.setText(null); } public void onCompanyHomeBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"clientMain.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onSearchMoviesClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"searchOption.fxml\")); Scene scene = new Scene(fxmlLoader.load(), largeHeight, largeWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onAddMovieClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"addMovie.fxml\")); Scene scene = new Scene(fxmlLoader.load(), largeHeight, largeWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onTransferMovieClick(ActionEvent actionEvent) throws IOException, ClassNotFoundException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"transferMovie.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onSearchMoviesBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option!\"); stage.setScene(scene); stage.show(); } public void onTransferMovieBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option\"); stage.setScene(scene); stage.show(); } public void onADDMovieBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option\"); stage.setScene(scene); stage.show(); } public void exitAction(ActionEvent actionEvent) { System.exit(0); } }"}]}}
{"project_id":248,"chunk_id":0,"content":{"main_file_path":"CSE-108-javaProject-byNetworking-master/myCLient/AddMovieController.java","main_file_content":"package myCLient; import commonClassPackage.DataWrapper; import commonClassPackage.Movie; import commonClassPackage.SocketWrapper; import javafx.event.ActionEvent; import javafx.fxml.FXML; import javafx.scene.Node; import javafx.scene.control.Alert; import javafx.scene.control.TextField; import javafx.stage.Modality; import javafx.stage.Stage; import java.io.IOException; import java.util.ArrayList; public class AddMovieController extends clientMain{ @FXML TextField toInputTitle; @FXML TextField toInputYear; @FXML TextField toInputGenre1; @FXML TextField toInputGenre2; @FXML TextField toInputGenre3; @FXML TextField toInputRunTime; @FXML TextField toInputBudget; @FXML TextField toInputRevenue; @Override public void onADDMovieBackClick(ActionEvent actionEvent) throws IOException { super.onADDMovieBackClick(actionEvent); } public void onResetAddInformationClick(ActionEvent actionEvent) { toInputTitle.setText(null); toInputYear.setText(null); toInputGenre1.setText(null); toInputGenre2.setText(null); toInputGenre3.setText(null); toInputRunTime.setText(null); toInputBudget.setText(null); toInputRevenue.setText(null); } public void onADDMovieClick(ActionEvent actionEvent) throws IOException, ClassNotFoundException { SocketWrapper server=new SocketWrapper(\"127.0.0.1\",3333); server.write( \"addAndUpdateMyList,\"+ toInputTitle.getText()+\",\"+ toInputYear.getText()+\",\"+ toInputGenre1.getText()+\",\"+ toInputGenre2.getText()+\",\"+ toInputGenre3.getText()+\",\"+ toInputRunTime.getText()+\",\"+ COMPANY_NAME+\",\"+ toInputBudget.getText()+\",\"+ toInputRevenue.getText()); Object clientObjectData=server.read(); DataWrapper clientWrapperData=(DataWrapper)clientObjectData; clientMovieArray = (ArrayList) clientWrapperData.movieArray; Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); Alert.AlertType type= Alert.AlertType.CONFIRMATION; Alert alert=new Alert(type,\"\"); alert.initModality(Modality.APPLICATION_MODAL); alert.initModality(stage.getModality()); alert.getDialogPane().setContentText(\"Added Successfully in List\"); alert.getDialogPane().setHeaderText(\"DONE!!\"); alert.showAndWait(); toInputTitle.setText(null); toInputYear.setText(null); toInputGenre1.setText(null); toInputGenre2.setText(null); toInputGenre3.setText(null); toInputRunTime.setText(null); toInputBudget.setText(null); toInputRevenue.setText(null); } }","dependencies":[{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/commonClassPackage/DataWrapper.java","file_content":"package commonClassPackage; import java.io.Serializable; import java.util.ArrayList; import java.util.List; public class DataWrapper implements Serializable { public String company; public List movieArray; public Boolean Status =false; public DataWrapper(String command, List data,Boolean changeStatus){ this.company=command; this.movieArray=data; this.Status=changeStatus; } }"},{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/commonClassPackage/SocketWrapper.java","file_content":"package commonClassPackage; import java.io.IOException; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.net.Socket; public class SocketWrapper { private Socket socket; private ObjectOutputStream oos; private ObjectInputStream ois; public SocketWrapper(String s, int port) throws IOException { this.socket = new Socket(s, port); oos = new ObjectOutputStream(socket.getOutputStream()); ois = new ObjectInputStream(socket.getInputStream()); } public SocketWrapper(Socket s) throws IOException { this.socket = s; oos = new ObjectOutputStream(socket.getOutputStream()); ois = new ObjectInputStream(socket.getInputStream()); } public Object read() throws IOException, ClassNotFoundException { return ois.readUnshared(); } public void write(Object o) throws IOException { oos.writeUnshared(o); } public void closeConnection() throws IOException { ois.close(); oos.close(); } }"},{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/myCLient/clientMain.java","file_content":"package myCLient; import commonClassPackage.DataWrapper; import commonClassPackage.Movie; import commonClassPackage.SocketWrapper; import javafx.application.Application; import javafx.event.ActionEvent; import javafx.fxml.FXML; import javafx.fxml.FXMLLoader; import javafx.scene.Node; import javafx.scene.Scene; import javafx.scene.control.Alert; import javafx.scene.control.Label; import javafx.scene.control.TextField; import javafx.stage.Modality; import javafx.stage.Stage; import java.io.IOException; import java.util.ArrayList; import java.util.List; public class clientMain extends Application{ @FXML TextField userText; @FXML Label warningText; public static List<Movie> clientMovieArray=new ArrayList<>(); public static String COMPANY_NAME; public static final int smallHeight=600; public static final int smallWidth=400; public static final int largeHeight=1015; public static final int largeWidth=650; public void start(Stage stage) throws IOException { FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"clientMain.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Movie Action\"); stage.setScene(scene); stage.show(); } public static void main(String[]args) throws IOException { launch(); } public void loginAction(ActionEvent actionEvent) throws IOException, ClassNotFoundException { COMPANY_NAME = userText.getText(); SocketWrapper server = new SocketWrapper(\"127.0.0.1\", 3333); server.write(\"giveMyList,\" + COMPANY_NAME); Object clientObjectData = server.read(); DataWrapper clientWrapperData = (DataWrapper) clientObjectData; clientMovieArray = (ArrayList) clientWrapperData.movieArray; if (clientMovieArray.size()==0){ Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); Alert.AlertType type= Alert.AlertType.WARNING; Alert alert=new Alert(type,\"\"); alert.initModality(Modality.APPLICATION_MODAL); alert.initModality(stage.getModality()); alert.getDialogPane().setContentText(\"No Company Exists in Database with This Name\"); alert.getDialogPane().setHeaderText(\"WARNING!!!\"); alert.showAndWait(); }else { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option!\"); stage.setScene(scene); stage.show(); } } public void resetAction(ActionEvent actionEvent) { userText.setText(null); warningText.setText(null); } public void onCompanyHomeBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"clientMain.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onSearchMoviesClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"searchOption.fxml\")); Scene scene = new Scene(fxmlLoader.load(), largeHeight, largeWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onAddMovieClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"addMovie.fxml\")); Scene scene = new Scene(fxmlLoader.load(), largeHeight, largeWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onTransferMovieClick(ActionEvent actionEvent) throws IOException, ClassNotFoundException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"transferMovie.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onSearchMoviesBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option!\"); stage.setScene(scene); stage.show(); } public void onTransferMovieBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option\"); stage.setScene(scene); stage.show(); } public void onADDMovieBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option\"); stage.setScene(scene); stage.show(); } public void exitAction(ActionEvent actionEvent) { System.exit(0); } }"}]}}
{"project_id":248,"chunk_id":0,"content":{"main_file_path":"CSE-108-javaProject-byNetworking-master/myCLient/TransferMovieController.java","main_file_content":"package myCLient; import commonClassPackage.DataWrapper; import commonClassPackage.Movie; import commonClassPackage.SocketWrapper; import javafx.event.ActionEvent; import javafx.fxml.FXML; import javafx.scene.Node; import javafx.scene.control.Alert; import javafx.scene.control.TableColumn; import javafx.scene.control.TableView; import javafx.scene.control.TextField; import javafx.scene.control.cell.PropertyValueFactory; import javafx.stage.Modality; import javafx.stage.Stage; import java.io.IOException; import java.util.ArrayList; public class TransferMovieController extends clientMain{ @FXML TextField movieTitleToTransfer; @FXML TextField companyNameToTransfer; @FXML TableView<Movie> transferMoviesTable; @FXML TableColumn<Movie, String> transferMoviesTableTitleCol; @FXML void initialize() { transferMoviesTableTitleCol.setCellValueFactory(new PropertyValueFactory<>(\"Movie_name\")); new Thread(()->{ while(true){ int size1=clientMovieArray.size(); SocketWrapper server = null; try { server = new SocketWrapper(\"127.0.0.1\", 3333); } catch (IOException e) { throw new RuntimeException(e); } try { server.write(\"giveMyList,\" + COMPANY_NAME); } catch (IOException e) { throw new RuntimeException(e); } Object clientObjectData = null; try { clientObjectData = server.read(); } catch (IOException e) { throw new RuntimeException(e); } catch (ClassNotFoundException e) { throw new RuntimeException(e); } DataWrapper clientWrapperData = (DataWrapper) clientObjectData; clientMovieArray = (ArrayList) clientWrapperData.movieArray; int size2=clientMovieArray.size(); if(size1!=size2){ onTransferMovieLoadClick(null); } } }).start();; } @Override public void onTransferMovieBackClick(ActionEvent actionEvent) throws IOException { super.onTransferMovieBackClick(actionEvent); } public void onResetAddInformationClick(ActionEvent actionEvent) { movieTitleToTransfer.setText(null); companyNameToTransfer.setText(null); } public void onTransferMovieClick(ActionEvent actionEvent) throws IOException, ClassNotFoundException { int count1=clientMovieArray.size(); SocketWrapper server=new SocketWrapper(\"127.0.0.1\",3333); server.write( \"transferAndUpdateMyList,\"+ COMPANY_NAME+\",\"+ movieTitleToTransfer.getText()+\",\"+ companyNameToTransfer.getText()); Object clientObjectData=server.read(); DataWrapper clientWrapperData=(DataWrapper)clientObjectData; clientMovieArray = (ArrayList) clientWrapperData.movieArray; int count2=clientMovieArray.size(); if (count1==(count2+1)){ onTransferMovieLoadClick(null); Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); Alert.AlertType type= Alert.AlertType.CONFIRMATION; Alert alert=new Alert(type,\"\"); alert.initModality(Modality.APPLICATION_MODAL); alert.initModality(stage.getModality()); alert.getDialogPane().setContentText(\"Transferred Successfully in List\"); alert.getDialogPane().setHeaderText(\"DONE!!\"); alert.showAndWait(); movieTitleToTransfer.setText(null); companyNameToTransfer.setText(null); } } public void onTransferMovieLoadClick(ActionEvent actionEvent) { transferMoviesTable.getItems().clear(); for (Movie s:clientMovieArray){ transferMoviesTable.getItems().add(s); } } }","dependencies":[{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/commonClassPackage/DataWrapper.java","file_content":"package commonClassPackage; import java.io.Serializable; import java.util.ArrayList; import java.util.List; public class DataWrapper implements Serializable { public String company; public List movieArray; public Boolean Status =false; public DataWrapper(String command, List data,Boolean changeStatus){ this.company=command; this.movieArray=data; this.Status=changeStatus; } }"},{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/commonClassPackage/Movie.java","file_content":"package commonClassPackage; import java.io.Serializable; public class Movie implements Serializable { private String Movie_name; private int Releasing_year; private String Genre1; private String Genre2; private String Genre3; private int Running_time; private String Company; private long Budget; private long Revenue; public Movie(String name, int year, String g1, String g2, String g3, int time, String company, long budget, long revenue){ Movie_name=name; Releasing_year=year; Genre1=g1; Genre2=g2; Genre3=g3; Running_time=time; Company=company; Budget=budget; Revenue=revenue; } public Movie(){ } public void setMovie_name(String movie_name) { Movie_name = movie_name; } public void setReleasing_year(int releasing_year) { Releasing_year = releasing_year; } public void setGenre1(String genre1) { Genre1 = genre1; } public void setGenre2(String genre2) { Genre2 = genre2; } public void setGenre3(String genre3) { Genre3 = genre3; } public void setRunning_time(int running_time) { Running_time = running_time; } public void setCompany(String company) { Company = company; } public void setBudget(long budget) { Budget = budget; } public void setRevenue(long revenue) { Revenue = revenue; } public int getReleasing_year() { return Releasing_year; } public int getRunning_time() { return Running_time; } public long getBudget() { return Budget; } public long getRevenue() { return Revenue; } public String getCompany() { return Company; } public String getGenre1() { return Genre1; } public String getGenre2() { return Genre2; } public String getMovie_name() { return Movie_name; } public String getGenre3() { return Genre3; } }"},{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/commonClassPackage/SocketWrapper.java","file_content":"package commonClassPackage; import java.io.IOException; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.net.Socket; public class SocketWrapper { private Socket socket; private ObjectOutputStream oos; private ObjectInputStream ois; public SocketWrapper(String s, int port) throws IOException { this.socket = new Socket(s, port); oos = new ObjectOutputStream(socket.getOutputStream()); ois = new ObjectInputStream(socket.getInputStream()); } public SocketWrapper(Socket s) throws IOException { this.socket = s; oos = new ObjectOutputStream(socket.getOutputStream()); ois = new ObjectInputStream(socket.getInputStream()); } public Object read() throws IOException, ClassNotFoundException { return ois.readUnshared(); } public void write(Object o) throws IOException { oos.writeUnshared(o); } public void closeConnection() throws IOException { ois.close(); oos.close(); } }"},{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/myCLient/clientMain.java","file_content":"package myCLient; import commonClassPackage.DataWrapper; import commonClassPackage.Movie; import commonClassPackage.SocketWrapper; import javafx.application.Application; import javafx.event.ActionEvent; import javafx.fxml.FXML; import javafx.fxml.FXMLLoader; import javafx.scene.Node; import javafx.scene.Scene; import javafx.scene.control.Alert; import javafx.scene.control.Label; import javafx.scene.control.TextField; import javafx.stage.Modality; import javafx.stage.Stage; import java.io.IOException; import java.util.ArrayList; import java.util.List; public class clientMain extends Application{ @FXML TextField userText; @FXML Label warningText; public static List<Movie> clientMovieArray=new ArrayList<>(); public static String COMPANY_NAME; public static final int smallHeight=600; public static final int smallWidth=400; public static final int largeHeight=1015; public static final int largeWidth=650; public void start(Stage stage) throws IOException { FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"clientMain.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Movie Action\"); stage.setScene(scene); stage.show(); } public static void main(String[]args) throws IOException { launch(); } public void loginAction(ActionEvent actionEvent) throws IOException, ClassNotFoundException { COMPANY_NAME = userText.getText(); SocketWrapper server = new SocketWrapper(\"127.0.0.1\", 3333); server.write(\"giveMyList,\" + COMPANY_NAME); Object clientObjectData = server.read(); DataWrapper clientWrapperData = (DataWrapper) clientObjectData; clientMovieArray = (ArrayList) clientWrapperData.movieArray; if (clientMovieArray.size()==0){ Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); Alert.AlertType type= Alert.AlertType.WARNING; Alert alert=new Alert(type,\"\"); alert.initModality(Modality.APPLICATION_MODAL); alert.initModality(stage.getModality()); alert.getDialogPane().setContentText(\"No Company Exists in Database with This Name\"); alert.getDialogPane().setHeaderText(\"WARNING!!!\"); alert.showAndWait(); }else { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option!\"); stage.setScene(scene); stage.show(); } } public void resetAction(ActionEvent actionEvent) { userText.setText(null); warningText.setText(null); } public void onCompanyHomeBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"clientMain.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onSearchMoviesClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"searchOption.fxml\")); Scene scene = new Scene(fxmlLoader.load(), largeHeight, largeWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onAddMovieClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"addMovie.fxml\")); Scene scene = new Scene(fxmlLoader.load(), largeHeight, largeWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onTransferMovieClick(ActionEvent actionEvent) throws IOException, ClassNotFoundException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"transferMovie.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onSearchMoviesBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option!\"); stage.setScene(scene); stage.show(); } public void onTransferMovieBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option\"); stage.setScene(scene); stage.show(); } public void onADDMovieBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option\"); stage.setScene(scene); stage.show(); } public void exitAction(ActionEvent actionEvent) { System.exit(0); } }"}]}}
{"project_id":248,"chunk_id":0,"content":{"main_file_path":"CSE-108-javaProject-byNetworking-master/myCLient/clientMain.java","main_file_content":"package myCLient; import commonClassPackage.DataWrapper; import commonClassPackage.Movie; import commonClassPackage.SocketWrapper; import javafx.application.Application; import javafx.event.ActionEvent; import javafx.fxml.FXML; import javafx.fxml.FXMLLoader; import javafx.scene.Node; import javafx.scene.Scene; import javafx.scene.control.Alert; import javafx.scene.control.Label; import javafx.scene.control.TextField; import javafx.stage.Modality; import javafx.stage.Stage; import java.io.IOException; import java.util.ArrayList; import java.util.List; public class clientMain extends Application{ @FXML TextField userText; @FXML Label warningText; public static List<Movie> clientMovieArray=new ArrayList<>(); public static String COMPANY_NAME; public static final int smallHeight=600; public static final int smallWidth=400; public static final int largeHeight=1015; public static final int largeWidth=650; public void start(Stage stage) throws IOException { FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"clientMain.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Movie Action\"); stage.setScene(scene); stage.show(); } public static void main(String[]args) throws IOException { launch(); } public void loginAction(ActionEvent actionEvent) throws IOException, ClassNotFoundException { COMPANY_NAME = userText.getText(); SocketWrapper server = new SocketWrapper(\"127.0.0.1\", 3333); server.write(\"giveMyList,\" + COMPANY_NAME); Object clientObjectData = server.read(); DataWrapper clientWrapperData = (DataWrapper) clientObjectData; clientMovieArray = (ArrayList) clientWrapperData.movieArray; if (clientMovieArray.size()==0){ Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); Alert.AlertType type= Alert.AlertType.WARNING; Alert alert=new Alert(type,\"\"); alert.initModality(Modality.APPLICATION_MODAL); alert.initModality(stage.getModality()); alert.getDialogPane().setContentText(\"No Company Exists in Database with This Name\"); alert.getDialogPane().setHeaderText(\"WARNING!!!\"); alert.showAndWait(); }else { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option!\"); stage.setScene(scene); stage.show(); } } public void resetAction(ActionEvent actionEvent) { userText.setText(null); warningText.setText(null); } public void onCompanyHomeBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"clientMain.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onSearchMoviesClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"searchOption.fxml\")); Scene scene = new Scene(fxmlLoader.load(), largeHeight, largeWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onAddMovieClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"addMovie.fxml\")); Scene scene = new Scene(fxmlLoader.load(), largeHeight, largeWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onTransferMovieClick(ActionEvent actionEvent) throws IOException, ClassNotFoundException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"transferMovie.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onSearchMoviesBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option!\"); stage.setScene(scene); stage.show(); } public void onTransferMovieBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option\"); stage.setScene(scene); stage.show(); } public void onADDMovieBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option\"); stage.setScene(scene); stage.show(); } public void exitAction(ActionEvent actionEvent) { System.exit(0); } }","dependencies":[{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/commonClassPackage/DataWrapper.java","file_content":"package commonClassPackage; import java.io.Serializable; import java.util.ArrayList; import java.util.List; public class DataWrapper implements Serializable { public String company; public List movieArray; public Boolean Status =false; public DataWrapper(String command, List data,Boolean changeStatus){ this.company=command; this.movieArray=data; this.Status=changeStatus; } }"},{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/commonClassPackage/Movie.java","file_content":"package commonClassPackage; import java.io.Serializable; public class Movie implements Serializable { private String Movie_name; private int Releasing_year; private String Genre1; private String Genre2; private String Genre3; private int Running_time; private String Company; private long Budget; private long Revenue; public Movie(String name, int year, String g1, String g2, String g3, int time, String company, long budget, long revenue){ Movie_name=name; Releasing_year=year; Genre1=g1; Genre2=g2; Genre3=g3; Running_time=time; Company=company; Budget=budget; Revenue=revenue; } public Movie(){ } public void setMovie_name(String movie_name) { Movie_name = movie_name; } public void setReleasing_year(int releasing_year) { Releasing_year = releasing_year; } public void setGenre1(String genre1) { Genre1 = genre1; } public void setGenre2(String genre2) { Genre2 = genre2; } public void setGenre3(String genre3) { Genre3 = genre3; } public void setRunning_time(int running_time) { Running_time = running_time; } public void setCompany(String company) { Company = company; } public void setBudget(long budget) { Budget = budget; } public void setRevenue(long revenue) { Revenue = revenue; } public int getReleasing_year() { return Releasing_year; } public int getRunning_time() { return Running_time; } public long getBudget() { return Budget; } public long getRevenue() { return Revenue; } public String getCompany() { return Company; } public String getGenre1() { return Genre1; } public String getGenre2() { return Genre2; } public String getMovie_name() { return Movie_name; } public String getGenre3() { return Genre3; } }"},{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/commonClassPackage/SocketWrapper.java","file_content":"package commonClassPackage; import java.io.IOException; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.net.Socket; public class SocketWrapper { private Socket socket; private ObjectOutputStream oos; private ObjectInputStream ois; public SocketWrapper(String s, int port) throws IOException { this.socket = new Socket(s, port); oos = new ObjectOutputStream(socket.getOutputStream()); ois = new ObjectInputStream(socket.getInputStream()); } public SocketWrapper(Socket s) throws IOException { this.socket = s; oos = new ObjectOutputStream(socket.getOutputStream()); ois = new ObjectInputStream(socket.getInputStream()); } public Object read() throws IOException, ClassNotFoundException { return ois.readUnshared(); } public void write(Object o) throws IOException { oos.writeUnshared(o); } public void closeConnection() throws IOException { ois.close(); oos.close(); } }"},{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/myCLient/clientMain.java","file_content":"package myCLient; import commonClassPackage.DataWrapper; import commonClassPackage.Movie; import commonClassPackage.SocketWrapper; import javafx.application.Application; import javafx.event.ActionEvent; import javafx.fxml.FXML; import javafx.fxml.FXMLLoader; import javafx.scene.Node; import javafx.scene.Scene; import javafx.scene.control.Alert; import javafx.scene.control.Label; import javafx.scene.control.TextField; import javafx.stage.Modality; import javafx.stage.Stage; import java.io.IOException; import java.util.ArrayList; import java.util.List; public class clientMain extends Application{ @FXML TextField userText; @FXML Label warningText; public static List<Movie> clientMovieArray=new ArrayList<>(); public static String COMPANY_NAME; public static final int smallHeight=600; public static final int smallWidth=400; public static final int largeHeight=1015; public static final int largeWidth=650; public void start(Stage stage) throws IOException { FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"clientMain.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Movie Action\"); stage.setScene(scene); stage.show(); } public static void main(String[]args) throws IOException { launch(); } public void loginAction(ActionEvent actionEvent) throws IOException, ClassNotFoundException { COMPANY_NAME = userText.getText(); SocketWrapper server = new SocketWrapper(\"127.0.0.1\", 3333); server.write(\"giveMyList,\" + COMPANY_NAME); Object clientObjectData = server.read(); DataWrapper clientWrapperData = (DataWrapper) clientObjectData; clientMovieArray = (ArrayList) clientWrapperData.movieArray; if (clientMovieArray.size()==0){ Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); Alert.AlertType type= Alert.AlertType.WARNING; Alert alert=new Alert(type,\"\"); alert.initModality(Modality.APPLICATION_MODAL); alert.initModality(stage.getModality()); alert.getDialogPane().setContentText(\"No Company Exists in Database with This Name\"); alert.getDialogPane().setHeaderText(\"WARNING!!!\"); alert.showAndWait(); }else { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option!\"); stage.setScene(scene); stage.show(); } } public void resetAction(ActionEvent actionEvent) { userText.setText(null); warningText.setText(null); } public void onCompanyHomeBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"clientMain.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onSearchMoviesClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"searchOption.fxml\")); Scene scene = new Scene(fxmlLoader.load(), largeHeight, largeWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onAddMovieClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"addMovie.fxml\")); Scene scene = new Scene(fxmlLoader.load(), largeHeight, largeWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onTransferMovieClick(ActionEvent actionEvent) throws IOException, ClassNotFoundException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"transferMovie.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onSearchMoviesBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option!\"); stage.setScene(scene); stage.show(); } public void onTransferMovieBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option\"); stage.setScene(scene); stage.show(); } public void onADDMovieBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option\"); stage.setScene(scene); stage.show(); } public void exitAction(ActionEvent actionEvent) { System.exit(0); } }"}]}}
{"project_id":248,"chunk_id":0,"content":{"main_file_path":"CSE-108-javaProject-byNetworking-master/myCLient/SearchOptionController.java","main_file_content":"package myCLient; import commonClassPackage.DataWrapper; import commonClassPackage.Movie; import commonClassPackage.SocketWrapper; import javafx.event.ActionEvent; import javafx.fxml.FXML; import javafx.scene.control.TableColumn; import javafx.scene.control.TableView; import javafx.scene.control.TextField; import javafx.scene.control.cell.PropertyValueFactory; import java.io.IOException; import java.util.ArrayList; import java.util.List; public class SearchOptionController extends clientMain { private static String functionStatus=null; @FXML TextField toInputTitle; @FXML TextField toInputForDelete; @FXML TextField toInputYear; @FXML TextField toInputGenre; @FXML TextField toInputTime; @FXML TableView<Movie> searchMoviesTable; @FXML TableColumn<Movie, String> searchMoviesTableTitleCol; @FXML TableColumn<Movie, Integer> searchMoviesTableYearCol; @FXML TableColumn<Movie, String> searchMoviesTableG1Col; @FXML TableColumn<Movie, String> searchMoviesTableG2Col; @FXML TableColumn<Movie, String> searchMoviesTableG3Col; @FXML TableColumn<Movie, Integer> searchMoviesTableTimeCol; @FXML TableColumn<Movie, Integer> searchMoviesTableBudgetCol; @FXML TableColumn<Movie, Integer> searchMoviesTableRevenueCol; @FXML void initialize(){ searchMoviesTableTitleCol.setCellValueFactory(new PropertyValueFactory<>(\"Movie_name\")); searchMoviesTableYearCol.setCellValueFactory(new PropertyValueFactory<>(\"Releasing_year\")); searchMoviesTableG1Col.setCellValueFactory(new PropertyValueFactory<>(\"Genre1\")); searchMoviesTableG2Col.setCellValueFactory(new PropertyValueFactory<>(\"Genre2\")); searchMoviesTableG3Col.setCellValueFactory(new PropertyValueFactory<>(\"Genre3\")); searchMoviesTableTimeCol.setCellValueFactory(new PropertyValueFactory<>(\"Running_time\")); searchMoviesTableBudgetCol.setCellValueFactory(new PropertyValueFactory<>(\"Budget\")); searchMoviesTableRevenueCol.setCellValueFactory(new PropertyValueFactory<>(\"Revenue\")); new Thread(()-> { while (true){ try { SocketWrapper server2= new SocketWrapper(\"127.0.0.1\", 3333); server2.write(\"giveMyList,\" + COMPANY_NAME); Object clientObjectData = server2.read(); DataWrapper clientWrapperData = (DataWrapper) clientObjectData; clientMovieArray = (ArrayList) clientWrapperData.movieArray; if(clientWrapperData.Status){ SocketWrapper server3= new SocketWrapper(\"127.0.0.1\", 3333); server3.write(\"confirmFromTransferredCompany,\"+COMPANY_NAME); if(functionStatus.equalsIgnoreCase(\"onSearchAllMoviesyClick\")){ onSearchAllMoviesyClick(null); } else if (functionStatus.equalsIgnoreCase(\"onSearchByMovieGenreClick\")) { onSearchByMovieGenreClick(null); } else if (functionStatus.equalsIgnoreCase(\"onSearchByMovieTitleClick\")) { onSearchByMovieTitleClick(null); } else if (functionStatus.equalsIgnoreCase(\"onSearchByYearClick\")) { onSearchByYearClick(null); } else if (functionStatus.equalsIgnoreCase(\"onSearchByRunTimeClick\")) { onSearchByRunTimeClick(null); } } } catch (IOException e) { throw new RuntimeException(e); } catch (ClassNotFoundException e) { throw new RuntimeException(e); } } }).start(); } public void onSearchByRunTimeClick(ActionEvent actionEvent) { functionStatus=\"onSearchByRunTimeClick\"; String[] timeString=toInputTime.getText().split(\"-\"); int[] time={Integer.parseInt(timeString[0]),Integer.parseInt(timeString[1])}; List<Movie> modifiedMovieArray=new ArrayList<>(); for (Movie s:clientMovieArray){ if(time[0]<=s.getRunning_time()&&s.getRunning_time()<=time[1]){ modifiedMovieArray.add(s); } } searchMoviesTable.getItems().clear(); for (Movie s:modifiedMovieArray){ searchMoviesTable.getItems().add(s); } } @Override public void onSearchMoviesBackClick(ActionEvent actionEvent) throws IOException { super.onSearchMoviesBackClick(actionEvent); } public void onSearchByYearClick(ActionEvent actionEvent) { functionStatus=\"onSearchByYearClick\"; List<Movie> modifiedMovieArray=new ArrayList<>(); for (Movie s:clientMovieArray){ if(Integer.parseInt(toInputYear.getText())==s.getReleasing_year()){ modifiedMovieArray.add(s); } } searchMoviesTable.getItems().clear(); for (Movie s:modifiedMovieArray){ searchMoviesTable.getItems().add(s); } } public void onSearchByMovieTitleClick(ActionEvent actionEvent) { functionStatus=\"onSearchByMovieTitleClick\"; List<Movie> modifiedMovieArray=new ArrayList<>(); for (Movie s:clientMovieArray){ if((toInputTitle.getText()).equalsIgnoreCase(s.getMovie_name())){ modifiedMovieArray.add(s); } } searchMoviesTable.getItems().clear(); for (Movie s:modifiedMovieArray){ searchMoviesTable.getItems().add(s); } } public void onSearchByMovieGenreClick(ActionEvent actionEvent) { functionStatus=\"onSearchByMovieGenreClick\"; List<Movie> modifiedMovieArray=new ArrayList<>(); for (Movie s:clientMovieArray){ if((toInputGenre.getText()).equalsIgnoreCase(s.getGenre1())||(toInputGenre.getText()).equalsIgnoreCase(s.getGenre2())||(toInputGenre.getText()).equalsIgnoreCase(s.getGenre3())){ modifiedMovieArray.add(s); } } searchMoviesTable.getItems().clear(); for (Movie s:modifiedMovieArray){ searchMoviesTable.getItems().add(s); } } public void onSearchAllMoviesyClick(ActionEvent actionEvent) { functionStatus=\"onSearchAllMoviesyClick\"; searchMoviesTable.getItems().clear(); for (Movie s:clientMovieArray){ searchMoviesTable.getItems().add(s); } } public void onMovieDeleteClick(ActionEvent actionEvent) throws IOException, ClassNotFoundException { SocketWrapper server=new SocketWrapper(\"127.0.0.1\",3333); server.write( \"deleteAndUpdateMyList,\"+clientMovieArray.get(0).getCompany()+\",\"+toInputForDelete.getText()); Object clientObjectData=server.read(); DataWrapper clientWrapperData=(DataWrapper)clientObjectData; clientMovieArray = (ArrayList) clientWrapperData.movieArray; searchMoviesTable.getItems().clear(); for (Movie s:clientMovieArray){ searchMoviesTable.getItems().add(s); } } }","dependencies":[{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/commonClassPackage/DataWrapper.java","file_content":"package commonClassPackage; import java.io.Serializable; import java.util.ArrayList; import java.util.List; public class DataWrapper implements Serializable { public String company; public List movieArray; public Boolean Status =false; public DataWrapper(String command, List data,Boolean changeStatus){ this.company=command; this.movieArray=data; this.Status=changeStatus; } }"},{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/commonClassPackage/Movie.java","file_content":"package commonClassPackage; import java.io.Serializable; public class Movie implements Serializable { private String Movie_name; private int Releasing_year; private String Genre1; private String Genre2; private String Genre3; private int Running_time; private String Company; private long Budget; private long Revenue; public Movie(String name, int year, String g1, String g2, String g3, int time, String company, long budget, long revenue){ Movie_name=name; Releasing_year=year; Genre1=g1; Genre2=g2; Genre3=g3; Running_time=time; Company=company; Budget=budget; Revenue=revenue; } public Movie(){ } public void setMovie_name(String movie_name) { Movie_name = movie_name; } public void setReleasing_year(int releasing_year) { Releasing_year = releasing_year; } public void setGenre1(String genre1) { Genre1 = genre1; } public void setGenre2(String genre2) { Genre2 = genre2; } public void setGenre3(String genre3) { Genre3 = genre3; } public void setRunning_time(int running_time) { Running_time = running_time; } public void setCompany(String company) { Company = company; } public void setBudget(long budget) { Budget = budget; } public void setRevenue(long revenue) { Revenue = revenue; } public int getReleasing_year() { return Releasing_year; } public int getRunning_time() { return Running_time; } public long getBudget() { return Budget; } public long getRevenue() { return Revenue; } public String getCompany() { return Company; } public String getGenre1() { return Genre1; } public String getGenre2() { return Genre2; } public String getMovie_name() { return Movie_name; } public String getGenre3() { return Genre3; } }"},{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/commonClassPackage/SocketWrapper.java","file_content":"package commonClassPackage; import java.io.IOException; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.net.Socket; public class SocketWrapper { private Socket socket; private ObjectOutputStream oos; private ObjectInputStream ois; public SocketWrapper(String s, int port) throws IOException { this.socket = new Socket(s, port); oos = new ObjectOutputStream(socket.getOutputStream()); ois = new ObjectInputStream(socket.getInputStream()); } public SocketWrapper(Socket s) throws IOException { this.socket = s; oos = new ObjectOutputStream(socket.getOutputStream()); ois = new ObjectInputStream(socket.getInputStream()); } public Object read() throws IOException, ClassNotFoundException { return ois.readUnshared(); } public void write(Object o) throws IOException { oos.writeUnshared(o); } public void closeConnection() throws IOException { ois.close(); oos.close(); } }"},{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/myCLient/clientMain.java","file_content":"package myCLient; import commonClassPackage.DataWrapper; import commonClassPackage.Movie; import commonClassPackage.SocketWrapper; import javafx.application.Application; import javafx.event.ActionEvent; import javafx.fxml.FXML; import javafx.fxml.FXMLLoader; import javafx.scene.Node; import javafx.scene.Scene; import javafx.scene.control.Alert; import javafx.scene.control.Label; import javafx.scene.control.TextField; import javafx.stage.Modality; import javafx.stage.Stage; import java.io.IOException; import java.util.ArrayList; import java.util.List; public class clientMain extends Application{ @FXML TextField userText; @FXML Label warningText; public static List<Movie> clientMovieArray=new ArrayList<>(); public static String COMPANY_NAME; public static final int smallHeight=600; public static final int smallWidth=400; public static final int largeHeight=1015; public static final int largeWidth=650; public void start(Stage stage) throws IOException { FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"clientMain.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Movie Action\"); stage.setScene(scene); stage.show(); } public static void main(String[]args) throws IOException { launch(); } public void loginAction(ActionEvent actionEvent) throws IOException, ClassNotFoundException { COMPANY_NAME = userText.getText(); SocketWrapper server = new SocketWrapper(\"127.0.0.1\", 3333); server.write(\"giveMyList,\" + COMPANY_NAME); Object clientObjectData = server.read(); DataWrapper clientWrapperData = (DataWrapper) clientObjectData; clientMovieArray = (ArrayList) clientWrapperData.movieArray; if (clientMovieArray.size()==0){ Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); Alert.AlertType type= Alert.AlertType.WARNING; Alert alert=new Alert(type,\"\"); alert.initModality(Modality.APPLICATION_MODAL); alert.initModality(stage.getModality()); alert.getDialogPane().setContentText(\"No Company Exists in Database with This Name\"); alert.getDialogPane().setHeaderText(\"WARNING!!!\"); alert.showAndWait(); }else { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option!\"); stage.setScene(scene); stage.show(); } } public void resetAction(ActionEvent actionEvent) { userText.setText(null); warningText.setText(null); } public void onCompanyHomeBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"clientMain.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onSearchMoviesClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"searchOption.fxml\")); Scene scene = new Scene(fxmlLoader.load(), largeHeight, largeWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onAddMovieClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"addMovie.fxml\")); Scene scene = new Scene(fxmlLoader.load(), largeHeight, largeWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onTransferMovieClick(ActionEvent actionEvent) throws IOException, ClassNotFoundException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"transferMovie.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onSearchMoviesBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option!\"); stage.setScene(scene); stage.show(); } public void onTransferMovieBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option\"); stage.setScene(scene); stage.show(); } public void onADDMovieBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option\"); stage.setScene(scene); stage.show(); } public void exitAction(ActionEvent actionEvent) { System.exit(0); } }"}]}}
{"project_id":248,"chunk_id":0,"content":{"main_file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/server/Server.java","main_file_content":"package server; import commonClassPackage.DataWrapper; import commonClassPackage.Movie; import commonClassPackage.SocketWrapper; import java.io.*; import java.net.ServerSocket; import java.net.Socket; import java.util.ArrayList; import java.util.List; import static java.lang.Thread.currentThread; import java.util.*; public class Server { private static Boolean transferStatus=false; private static String transferredCompany; public static HashMap<String,SocketWrapper> clients=new HashMap<>(); public static void main(String[] args) throws IOException, ClassNotFoundException { new Thread(() -> { ServerSocket server= null; try { server = new ServerSocket(3333); } catch (IOException e) { throw new RuntimeException(e); } System.out.println(\"Server started\"); ArrayList<Object> arrayList=new ArrayList<Object>(); while (true) { List<Movie> movieList = new ArrayList<>(); List<Movie> companyMovieList = new ArrayList<>(); Socket clientSocket = null; SocketWrapper client = null; Object finalObjectdata; String stringData; String[] splitClientCommand; try { clientSocket = server.accept(); } catch (IOException e) { throw new RuntimeException(e); } try { client = new SocketWrapper(clientSocket); } catch (IOException e) { throw new RuntimeException(e); } Object objectdata = new Object(); try { objectdata = client.read(); } catch (IOException e) { throw new RuntimeException(e); } catch (ClassNotFoundException e) { throw new RuntimeException(e); } finalObjectdata = objectdata; stringData=(String) objectdata; splitClientCommand = stringData.split(\",\"); clients.put(splitClientCommand[1], client); if (splitClientCommand[0].equalsIgnoreCase(\"confirmFromTransferredCompany\")) { transferStatus=false; } else if (splitClientCommand[0].equals(\"giveMyList\") && splitClientCommand[1] != null) { try { BufferedReader br = new BufferedReader(new FileReader(\"movies.txt\")); while (true) { String line = br.readLine(); if (line == null) break; String[] out = line.split(\",\"); Movie temp_movie = new Movie(out[0], Integer.parseInt(out[1]), out[2], out[3], out[4], Integer.parseInt(out[5]), out[6], Integer.parseInt(out[7]), Integer.parseInt(out[8])); movieList.add(temp_movie); } br.close(); for (Movie s : movieList) { if (splitClientCommand[1].equalsIgnoreCase(s.getCompany())) { companyMovieList.add(s); } } DataWrapper serverToCompany = new DataWrapper(splitClientCommand[1], companyMovieList, transferStatus); clients.get(splitClientCommand[1]).write(serverToCompany); } catch (IOException e) { throw new RuntimeException(e); } } else if (splitClientCommand[0].equals(\"addAndUpdateMyList\")) { try { BufferedWriter output = new BufferedWriter(new FileWriter(\"movies.txt\", true)); String addTemp = splitClientCommand[1] + \",\" + splitClientCommand[2] + \",\" + splitClientCommand[3] + \",\" + splitClientCommand[4] + \",\" + splitClientCommand[5] + \",\" + splitClientCommand[6] + \",\" + splitClientCommand[7] + \",\" + splitClientCommand[8] + \",\" + splitClientCommand[9]; output.write(addTemp + System.lineSeparator()); output.close(); BufferedReader br = new BufferedReader(new FileReader(\"movies.txt\")); while (true) { String line = br.readLine(); if (line == null) break; String[] out = line.split(\",\"); Movie temp_movie = new Movie(out[0], Integer.parseInt(out[1]), out[2], out[3], out[4], Integer.parseInt(out[5]), out[6], Integer.parseInt(out[7]), Integer.parseInt(out[8])); movieList.add(temp_movie); } br.close(); for (Movie s : movieList) { if (splitClientCommand[7].equalsIgnoreCase(s.getCompany())) { companyMovieList.add(s); } } DataWrapper serverToCompany = new DataWrapper(companyMovieList.get(0).getCompany(), companyMovieList, transferStatus); clients.get(splitClientCommand[1]).write(serverToCompany); } catch (IOException e) { throw new RuntimeException(e); } } else if (splitClientCommand[0].equals(\"deleteAndUpdateMyList\")) { try { BufferedReader br = new BufferedReader(new FileReader(\"movies.txt\")); while (true) { String line = br.readLine(); if (line == null) break; String[] out = line.split(\",\"); Movie temp_movie = new Movie(out[0], Integer.parseInt(out[1]), out[2], out[3], out[4], Integer.parseInt(out[5]), out[6], Integer.parseInt(out[7]), Integer.parseInt(out[8])); movieList.add(temp_movie); } br.close(); String name2 = currentThread().getName(); for (Movie s : movieList) { if (s.getMovie_name().equalsIgnoreCase(splitClientCommand[2])) { movieList.remove(s); break; } } Writer writer = new BufferedWriter(new FileWriter(\"movies.txt\")); for (int i = 0; i < movieList.size(); i++) { String addTemp = movieList.get(i).getMovie_name() + \",\" + movieList.get(i).getReleasing_year() + \",\" + movieList.get(i).getGenre1() + \",\" + movieList.get(i).getGenre2() + \",\" + movieList.get(i).getGenre3() + \",\" + movieList.get(i).getRunning_time() + \",\" + movieList.get(i).getCompany() + \",\" + movieList.get(i).getBudget() + \",\" + movieList.get(i).getRevenue(); writer.write(addTemp + System.lineSeparator()); } writer.close(); for (Movie s : movieList) { if (splitClientCommand[1].equalsIgnoreCase(s.getCompany())) { companyMovieList.add(s); } } DataWrapper serverToCompany = new DataWrapper(companyMovieList.get(0).getCompany(), companyMovieList, transferStatus); clients.get(splitClientCommand[1]).write(serverToCompany); } catch (IOException e) { throw new RuntimeException(e); } } else if (splitClientCommand[0].equals(\"transferAndUpdateMyList\")) { try { BufferedReader br = new BufferedReader(new FileReader(\"movies.txt\")); while (true) { String line = br.readLine(); if (line == null) break; String[] out = line.split(\",\"); Movie temp_movie = new Movie(out[0], Integer.parseInt(out[1]), out[2], out[3], out[4], Integer.parseInt(out[5]), out[6], Integer.parseInt(out[7]), Integer.parseInt(out[8])); movieList.add(temp_movie); } br.close(); for (Movie s : movieList) { if (s.getMovie_name().equalsIgnoreCase(splitClientCommand[2])) { s.setCompany(splitClientCommand[3]); break; } } Writer writer = new BufferedWriter(new FileWriter(\"movies.txt\")); for (int i = 0; i < movieList.size(); i++) { String addTemp = movieList.get(i).getMovie_name() + \",\" + movieList.get(i).getReleasing_year() + \",\" + movieList.get(i).getGenre1() + \",\" + movieList.get(i).getGenre2() + \",\" + movieList.get(i).getGenre3() + \",\" + movieList.get(i).getRunning_time() + \",\" + movieList.get(i).getCompany() + \",\" + movieList.get(i).getBudget() + \",\" + movieList.get(i).getRevenue(); writer.write(addTemp + System.lineSeparator()); } writer.close(); transferStatus = true; for (Movie s : movieList) { if (splitClientCommand[1].equalsIgnoreCase(s.getCompany())) { companyMovieList.add(s); } } DataWrapper serverToCompany = new DataWrapper(splitClientCommand[1], companyMovieList, transferStatus); clients.get(splitClientCommand[1]).write(serverToCompany); List<Movie> transferredCompanyMovieList=new ArrayList<>(); for(Movie s:movieList){ if (splitClientCommand[3].equalsIgnoreCase(s.getCompany())){ transferredCompanyMovieList.add(s); } } DataWrapper serverToTransferredCompany = new DataWrapper(splitClientCommand[3], transferredCompanyMovieList, transferStatus); clients.get(splitClientCommand[3]).write(serverToTransferredCompany); } catch (IOException e) { throw new RuntimeException(e); } } } }).start(); } }","dependencies":[{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/commonClassPackage/DataWrapper.java","file_content":"package commonClassPackage; import java.io.Serializable; import java.util.ArrayList; import java.util.List; public class DataWrapper implements Serializable { public String company; public List movieArray; public Boolean Status =false; public DataWrapper(String command, List data,Boolean changeStatus){ this.company=command; this.movieArray=data; this.Status=changeStatus; } }"},{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/commonClassPackage/Movie.java","file_content":"package commonClassPackage; import java.io.Serializable; public class Movie implements Serializable { private String Movie_name; private int Releasing_year; private String Genre1; private String Genre2; private String Genre3; private int Running_time; private String Company; private long Budget; private long Revenue; public Movie(String name, int year, String g1, String g2, String g3, int time, String company, long budget, long revenue){ Movie_name=name; Releasing_year=year; Genre1=g1; Genre2=g2; Genre3=g3; Running_time=time; Company=company; Budget=budget; Revenue=revenue; } public Movie(){ } public void setMovie_name(String movie_name) { Movie_name = movie_name; } public void setReleasing_year(int releasing_year) { Releasing_year = releasing_year; } public void setGenre1(String genre1) { Genre1 = genre1; } public void setGenre2(String genre2) { Genre2 = genre2; } public void setGenre3(String genre3) { Genre3 = genre3; } public void setRunning_time(int running_time) { Running_time = running_time; } public void setCompany(String company) { Company = company; } public void setBudget(long budget) { Budget = budget; } public void setRevenue(long revenue) { Revenue = revenue; } public int getReleasing_year() { return Releasing_year; } public int getRunning_time() { return Running_time; } public long getBudget() { return Budget; } public long getRevenue() { return Revenue; } public String getCompany() { return Company; } public String getGenre1() { return Genre1; } public String getGenre2() { return Genre2; } public String getMovie_name() { return Movie_name; } public String getGenre3() { return Genre3; } }"},{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/commonClassPackage/SocketWrapper.java","file_content":"package commonClassPackage; import java.io.IOException; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.net.Socket; public class SocketWrapper { private Socket socket; private ObjectOutputStream oos; private ObjectInputStream ois; public SocketWrapper(String s, int port) throws IOException { this.socket = new Socket(s, port); oos = new ObjectOutputStream(socket.getOutputStream()); ois = new ObjectInputStream(socket.getInputStream()); } public SocketWrapper(Socket s) throws IOException { this.socket = s; oos = new ObjectOutputStream(socket.getOutputStream()); ois = new ObjectInputStream(socket.getInputStream()); } public Object read() throws IOException, ClassNotFoundException { return ois.readUnshared(); } public void write(Object o) throws IOException { oos.writeUnshared(o); } public void closeConnection() throws IOException { ois.close(); oos.close(); } }"}]}}
{"project_id":248,"chunk_id":0,"content":{"main_file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/commonClassPackage/SocketWrapper.java","main_file_content":"package commonClassPackage; import java.io.IOException; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.net.Socket; public class SocketWrapper { private Socket socket; private ObjectOutputStream oos; private ObjectInputStream ois; public SocketWrapper(String s, int port) throws IOException { this.socket = new Socket(s, port); oos = new ObjectOutputStream(socket.getOutputStream()); ois = new ObjectInputStream(socket.getInputStream()); } public SocketWrapper(Socket s) throws IOException { this.socket = s; oos = new ObjectOutputStream(socket.getOutputStream()); ois = new ObjectInputStream(socket.getInputStream()); } public Object read() throws IOException, ClassNotFoundException { return ois.readUnshared(); } public void write(Object o) throws IOException { oos.writeUnshared(o); } public void closeConnection() throws IOException { ois.close(); oos.close(); } }","dependencies":[]}}
{"project_id":248,"chunk_id":0,"content":{"main_file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/commonClassPackage/ReadThread.java","main_file_content":"package commonClassPackage; import javafx.application.Platform; import sample.Main; import util.LoginDTO; import java.io.IOException; public class ReadThread implements Runnable { private final Thread thr; private final Main main; public ReadThread(Main main) { this.main = main; this.thr = new Thread(this); thr.start(); } public void run() { try { while (true) { Object o = main.getNetworkUtil().read(); if (o != null) { if (o instanceof LoginDTO) { LoginDTO loginDTO = (LoginDTO) o; System.out.println(loginDTO.getUserName()); System.out.println(loginDTO.isStatus()); Platform.runLater(new Runnable() { @Override public void run() { if (loginDTO.isStatus()) { try { main.showHomePage(loginDTO.getUserName()); } catch (Exception e) { e.printStackTrace(); } } else { main.showAlert(); } } }); } } } } catch (Exception e) { System.out.println(e); } finally { try { main.getNetworkUtil().closeConnection(); } catch (IOException e) { e.printStackTrace(); } } } }","dependencies":[]}}
{"project_id":248,"chunk_id":0,"content":{"main_file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/commonClassPackage/DataWrapper.java","main_file_content":"package commonClassPackage; import java.io.Serializable; import java.util.ArrayList; import java.util.List; public class DataWrapper implements Serializable { public String company; public List movieArray; public Boolean Status =false; public DataWrapper(String command, List data,Boolean changeStatus){ this.company=command; this.movieArray=data; this.Status=changeStatus; } }","dependencies":[]}}
{"project_id":248,"chunk_id":0,"content":{"main_file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/commonClassPackage/Movie.java","main_file_content":"package commonClassPackage; import java.io.Serializable; public class Movie implements Serializable { private String Movie_name; private int Releasing_year; private String Genre1; private String Genre2; private String Genre3; private int Running_time; private String Company; private long Budget; private long Revenue; public Movie(String name, int year, String g1, String g2, String g3, int time, String company, long budget, long revenue){ Movie_name=name; Releasing_year=year; Genre1=g1; Genre2=g2; Genre3=g3; Running_time=time; Company=company; Budget=budget; Revenue=revenue; } public Movie(){ } public void setMovie_name(String movie_name) { Movie_name = movie_name; } public void setReleasing_year(int releasing_year) { Releasing_year = releasing_year; } public void setGenre1(String genre1) { Genre1 = genre1; } public void setGenre2(String genre2) { Genre2 = genre2; } public void setGenre3(String genre3) { Genre3 = genre3; } public void setRunning_time(int running_time) { Running_time = running_time; } public void setCompany(String company) { Company = company; } public void setBudget(long budget) { Budget = budget; } public void setRevenue(long revenue) { Revenue = revenue; } public int getReleasing_year() { return Releasing_year; } public int getRunning_time() { return Running_time; } public long getBudget() { return Budget; } public long getRevenue() { return Revenue; } public String getCompany() { return Company; } public String getGenre1() { return Genre1; } public String getGenre2() { return Genre2; } public String getMovie_name() { return Movie_name; } public String getGenre3() { return Genre3; } }","dependencies":[]}}
{"project_id":248,"chunk_id":0,"content":{"main_file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/myCLient/CompanyHomeController.java","main_file_content":"package myCLient; import commonClassPackage.Movie; import javafx.event.ActionEvent; import javafx.fxml.FXML; import javafx.scene.control.Label; import java.io.IOException; public class CompanyHomeController extends clientMain{ @FXML Label toShowTotalMovie; @FXML Label toShowBestMovie; @FXML Label toShowTotalProfit; @FXML Label companyHomeTotalProfit; @FXML Label companyHomeMovieCount; @FXML Label companyHomeClientName; @FXML Label toShowCompanyName; @FXML Label companyHomeBestMovie; @Override public void onSearchMoviesClick(ActionEvent actionEvent) throws IOException { super.onSearchMoviesClick(actionEvent); } @Override public void onAddMovieClick(ActionEvent actionEvent) throws IOException { super.onAddMovieClick(actionEvent); } @Override public void onCompanyHomeBackClick(ActionEvent actionEvent) throws IOException { super.onCompanyHomeBackClick(actionEvent); } public void onCompanyHomeDetailsClick(ActionEvent actionEvent) { toShowTotalMovie.setText(\"Total Number of Movies :\"); toShowTotalProfit.setText(\"Total Profit :\"); toShowBestMovie.setText(\"Best Movie :\"); toShowCompanyName.setText(COMPANY_NAME); companyHomeMovieCount.setText(String.valueOf(clientMovieArray.size())); long profit=0; for (int i=0;i<clientMovieArray.size();i++){ profit+=clientMovieArray.get(i).getRevenue()-clientMovieArray.get(i).getBudget(); } Movie s=clientMovieArray.get(0); for (int i=1;i<clientMovieArray.size();i++){ if((s.getRevenue()-s.getBudget())<(clientMovieArray.get(i).getRevenue()-clientMovieArray.get(i).getBudget())){ s=clientMovieArray.get(i); } } companyHomeTotalProfit.setText(String.valueOf(profit)+\" $\"); companyHomeBestMovie.setText(s.getMovie_name()); } }","dependencies":[{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/commonClassPackage/Movie.java","file_content":"package commonClassPackage; import java.io.Serializable; public class Movie implements Serializable { private String Movie_name; private int Releasing_year; private String Genre1; private String Genre2; private String Genre3; private int Running_time; private String Company; private long Budget; private long Revenue; public Movie(String name, int year, String g1, String g2, String g3, int time, String company, long budget, long revenue){ Movie_name=name; Releasing_year=year; Genre1=g1; Genre2=g2; Genre3=g3; Running_time=time; Company=company; Budget=budget; Revenue=revenue; } public Movie(){ } public void setMovie_name(String movie_name) { Movie_name = movie_name; } public void setReleasing_year(int releasing_year) { Releasing_year = releasing_year; } public void setGenre1(String genre1) { Genre1 = genre1; } public void setGenre2(String genre2) { Genre2 = genre2; } public void setGenre3(String genre3) { Genre3 = genre3; } public void setRunning_time(int running_time) { Running_time = running_time; } public void setCompany(String company) { Company = company; } public void setBudget(long budget) { Budget = budget; } public void setRevenue(long revenue) { Revenue = revenue; } public int getReleasing_year() { return Releasing_year; } public int getRunning_time() { return Running_time; } public long getBudget() { return Budget; } public long getRevenue() { return Revenue; } public String getCompany() { return Company; } public String getGenre1() { return Genre1; } public String getGenre2() { return Genre2; } public String getMovie_name() { return Movie_name; } public String getGenre3() { return Genre3; } }"},{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/myCLient/clientMain.java","file_content":"package myCLient; import commonClassPackage.DataWrapper; import commonClassPackage.Movie; import commonClassPackage.SocketWrapper; import javafx.application.Application; import javafx.event.ActionEvent; import javafx.fxml.FXML; import javafx.fxml.FXMLLoader; import javafx.scene.Node; import javafx.scene.Scene; import javafx.scene.control.Alert; import javafx.scene.control.Label; import javafx.scene.control.TextField; import javafx.stage.Modality; import javafx.stage.Stage; import java.io.IOException; import java.util.ArrayList; import java.util.List; public class clientMain extends Application{ @FXML TextField userText; @FXML Label warningText; public static List<Movie> clientMovieArray=new ArrayList<>(); public static String COMPANY_NAME; public static final int smallHeight=600; public static final int smallWidth=400; public static final int largeHeight=1015; public static final int largeWidth=650; public void start(Stage stage) throws IOException { FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"clientMain.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Movie Action\"); stage.setScene(scene); stage.show(); } public static void main(String[]args) throws IOException { launch(); } public void loginAction(ActionEvent actionEvent) throws IOException, ClassNotFoundException { COMPANY_NAME = userText.getText(); SocketWrapper server = new SocketWrapper(\"127.0.0.1\", 3333); server.write(\"giveMyList,\" + COMPANY_NAME); Object clientObjectData = server.read(); DataWrapper clientWrapperData = (DataWrapper) clientObjectData; clientMovieArray = (ArrayList) clientWrapperData.movieArray; if (clientMovieArray.size()==0){ Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); Alert.AlertType type= Alert.AlertType.WARNING; Alert alert=new Alert(type,\"\"); alert.initModality(Modality.APPLICATION_MODAL); alert.initModality(stage.getModality()); alert.getDialogPane().setContentText(\"No Company Exists in Database with This Name\"); alert.getDialogPane().setHeaderText(\"WARNING!!!\"); alert.showAndWait(); }else { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option!\"); stage.setScene(scene); stage.show(); } } public void resetAction(ActionEvent actionEvent) { userText.setText(null); warningText.setText(null); } public void onCompanyHomeBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"clientMain.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onSearchMoviesClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"searchOption.fxml\")); Scene scene = new Scene(fxmlLoader.load(), largeHeight, largeWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onAddMovieClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"addMovie.fxml\")); Scene scene = new Scene(fxmlLoader.load(), largeHeight, largeWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onTransferMovieClick(ActionEvent actionEvent) throws IOException, ClassNotFoundException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"transferMovie.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onSearchMoviesBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option!\"); stage.setScene(scene); stage.show(); } public void onTransferMovieBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option\"); stage.setScene(scene); stage.show(); } public void onADDMovieBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option\"); stage.setScene(scene); stage.show(); } public void exitAction(ActionEvent actionEvent) { System.exit(0); } }"}]}}
{"project_id":248,"chunk_id":0,"content":{"main_file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/myCLient/AddMovieController.java","main_file_content":"package myCLient; import commonClassPackage.DataWrapper; import commonClassPackage.Movie; import commonClassPackage.SocketWrapper; import javafx.event.ActionEvent; import javafx.fxml.FXML; import javafx.scene.Node; import javafx.scene.control.Alert; import javafx.scene.control.TextField; import javafx.stage.Modality; import javafx.stage.Stage; import java.io.IOException; import java.util.ArrayList; public class AddMovieController extends clientMain{ @FXML TextField toInputTitle; @FXML TextField toInputYear; @FXML TextField toInputGenre1; @FXML TextField toInputGenre2; @FXML TextField toInputGenre3; @FXML TextField toInputRunTime; @FXML TextField toInputBudget; @FXML TextField toInputRevenue; @Override public void onADDMovieBackClick(ActionEvent actionEvent) throws IOException { super.onADDMovieBackClick(actionEvent); } public void onResetAddInformationClick(ActionEvent actionEvent) { toInputTitle.setText(null); toInputYear.setText(null); toInputGenre1.setText(null); toInputGenre2.setText(null); toInputGenre3.setText(null); toInputRunTime.setText(null); toInputBudget.setText(null); toInputRevenue.setText(null); } public void onADDMovieClick(ActionEvent actionEvent) throws IOException, ClassNotFoundException { SocketWrapper server=new SocketWrapper(\"127.0.0.1\",3333); server.write( \"addAndUpdateMyList,\"+ toInputTitle.getText()+\",\"+ toInputYear.getText()+\",\"+ toInputGenre1.getText()+\",\"+ toInputGenre2.getText()+\",\"+ toInputGenre3.getText()+\",\"+ toInputRunTime.getText()+\",\"+ COMPANY_NAME+\",\"+ toInputBudget.getText()+\",\"+ toInputRevenue.getText()); Object clientObjectData=server.read(); DataWrapper clientWrapperData=(DataWrapper)clientObjectData; clientMovieArray = (ArrayList) clientWrapperData.movieArray; Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); Alert.AlertType type= Alert.AlertType.CONFIRMATION; Alert alert=new Alert(type,\"\"); alert.initModality(Modality.APPLICATION_MODAL); alert.initModality(stage.getModality()); alert.getDialogPane().setContentText(\"Added Successfully in List\"); alert.getDialogPane().setHeaderText(\"DONE!!\"); alert.showAndWait(); toInputTitle.setText(null); toInputYear.setText(null); toInputGenre1.setText(null); toInputGenre2.setText(null); toInputGenre3.setText(null); toInputRunTime.setText(null); toInputBudget.setText(null); toInputRevenue.setText(null); } }","dependencies":[{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/commonClassPackage/DataWrapper.java","file_content":"package commonClassPackage; import java.io.Serializable; import java.util.ArrayList; import java.util.List; public class DataWrapper implements Serializable { public String company; public List movieArray; public Boolean Status =false; public DataWrapper(String command, List data,Boolean changeStatus){ this.company=command; this.movieArray=data; this.Status=changeStatus; } }"},{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/commonClassPackage/SocketWrapper.java","file_content":"package commonClassPackage; import java.io.IOException; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.net.Socket; public class SocketWrapper { private Socket socket; private ObjectOutputStream oos; private ObjectInputStream ois; public SocketWrapper(String s, int port) throws IOException { this.socket = new Socket(s, port); oos = new ObjectOutputStream(socket.getOutputStream()); ois = new ObjectInputStream(socket.getInputStream()); } public SocketWrapper(Socket s) throws IOException { this.socket = s; oos = new ObjectOutputStream(socket.getOutputStream()); ois = new ObjectInputStream(socket.getInputStream()); } public Object read() throws IOException, ClassNotFoundException { return ois.readUnshared(); } public void write(Object o) throws IOException { oos.writeUnshared(o); } public void closeConnection() throws IOException { ois.close(); oos.close(); } }"},{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/myCLient/clientMain.java","file_content":"package myCLient; import commonClassPackage.DataWrapper; import commonClassPackage.Movie; import commonClassPackage.SocketWrapper; import javafx.application.Application; import javafx.event.ActionEvent; import javafx.fxml.FXML; import javafx.fxml.FXMLLoader; import javafx.scene.Node; import javafx.scene.Scene; import javafx.scene.control.Alert; import javafx.scene.control.Label; import javafx.scene.control.TextField; import javafx.stage.Modality; import javafx.stage.Stage; import java.io.IOException; import java.util.ArrayList; import java.util.List; public class clientMain extends Application{ @FXML TextField userText; @FXML Label warningText; public static List<Movie> clientMovieArray=new ArrayList<>(); public static String COMPANY_NAME; public static final int smallHeight=600; public static final int smallWidth=400; public static final int largeHeight=1015; public static final int largeWidth=650; public void start(Stage stage) throws IOException { FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"clientMain.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Movie Action\"); stage.setScene(scene); stage.show(); } public static void main(String[]args) throws IOException { launch(); } public void loginAction(ActionEvent actionEvent) throws IOException, ClassNotFoundException { COMPANY_NAME = userText.getText(); SocketWrapper server = new SocketWrapper(\"127.0.0.1\", 3333); server.write(\"giveMyList,\" + COMPANY_NAME); Object clientObjectData = server.read(); DataWrapper clientWrapperData = (DataWrapper) clientObjectData; clientMovieArray = (ArrayList) clientWrapperData.movieArray; if (clientMovieArray.size()==0){ Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); Alert.AlertType type= Alert.AlertType.WARNING; Alert alert=new Alert(type,\"\"); alert.initModality(Modality.APPLICATION_MODAL); alert.initModality(stage.getModality()); alert.getDialogPane().setContentText(\"No Company Exists in Database with This Name\"); alert.getDialogPane().setHeaderText(\"WARNING!!!\"); alert.showAndWait(); }else { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option!\"); stage.setScene(scene); stage.show(); } } public void resetAction(ActionEvent actionEvent) { userText.setText(null); warningText.setText(null); } public void onCompanyHomeBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"clientMain.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onSearchMoviesClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"searchOption.fxml\")); Scene scene = new Scene(fxmlLoader.load(), largeHeight, largeWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onAddMovieClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"addMovie.fxml\")); Scene scene = new Scene(fxmlLoader.load(), largeHeight, largeWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onTransferMovieClick(ActionEvent actionEvent) throws IOException, ClassNotFoundException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"transferMovie.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onSearchMoviesBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option!\"); stage.setScene(scene); stage.show(); } public void onTransferMovieBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option\"); stage.setScene(scene); stage.show(); } public void onADDMovieBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option\"); stage.setScene(scene); stage.show(); } public void exitAction(ActionEvent actionEvent) { System.exit(0); } }"}]}}
{"project_id":248,"chunk_id":0,"content":{"main_file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/myCLient/TransferMovieController.java","main_file_content":"package myCLient; import commonClassPackage.DataWrapper; import commonClassPackage.Movie; import commonClassPackage.SocketWrapper; import javafx.event.ActionEvent; import javafx.fxml.FXML; import javafx.scene.Node; import javafx.scene.control.Alert; import javafx.scene.control.TableColumn; import javafx.scene.control.TableView; import javafx.scene.control.TextField; import javafx.scene.control.cell.PropertyValueFactory; import javafx.stage.Modality; import javafx.stage.Stage; import java.io.IOException; import java.util.ArrayList; public class TransferMovieController extends clientMain{ @FXML TextField movieTitleToTransfer; @FXML TextField companyNameToTransfer; @FXML TableView<Movie> transferMoviesTable; @FXML TableColumn<Movie, String> transferMoviesTableTitleCol; @FXML void initialize() { transferMoviesTableTitleCol.setCellValueFactory(new PropertyValueFactory<>(\"Movie_name\")); new Thread(()->{ while(true){ int size1=clientMovieArray.size(); SocketWrapper server = null; try { server = new SocketWrapper(\"127.0.0.1\", 3333); } catch (IOException e) { throw new RuntimeException(e); } try { server.write(\"giveMyList,\" + COMPANY_NAME); } catch (IOException e) { throw new RuntimeException(e); } Object clientObjectData = null; try { clientObjectData = server.read(); } catch (IOException e) { throw new RuntimeException(e); } catch (ClassNotFoundException e) { throw new RuntimeException(e); } DataWrapper clientWrapperData = (DataWrapper) clientObjectData; clientMovieArray = (ArrayList) clientWrapperData.movieArray; int size2=clientMovieArray.size(); if(size1!=size2){ onTransferMovieLoadClick(null); } } }).start();; } @Override public void onTransferMovieBackClick(ActionEvent actionEvent) throws IOException { super.onTransferMovieBackClick(actionEvent); } public void onResetAddInformationClick(ActionEvent actionEvent) { movieTitleToTransfer.setText(null); companyNameToTransfer.setText(null); } public void onTransferMovieClick(ActionEvent actionEvent) throws IOException, ClassNotFoundException { int count1=clientMovieArray.size(); SocketWrapper server=new SocketWrapper(\"127.0.0.1\",3333); server.write( \"transferAndUpdateMyList,\"+ COMPANY_NAME+\",\"+ movieTitleToTransfer.getText()+\",\"+ companyNameToTransfer.getText()); Object clientObjectData=server.read(); DataWrapper clientWrapperData=(DataWrapper)clientObjectData; clientMovieArray = (ArrayList) clientWrapperData.movieArray; int count2=clientMovieArray.size(); if (count1==(count2+1)){ onTransferMovieLoadClick(null); Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); Alert.AlertType type= Alert.AlertType.CONFIRMATION; Alert alert=new Alert(type,\"\"); alert.initModality(Modality.APPLICATION_MODAL); alert.initModality(stage.getModality()); alert.getDialogPane().setContentText(\"Transferred Successfully in List\"); alert.getDialogPane().setHeaderText(\"DONE!!\"); alert.showAndWait(); movieTitleToTransfer.setText(null); companyNameToTransfer.setText(null); } } public void onTransferMovieLoadClick(ActionEvent actionEvent) { transferMoviesTable.getItems().clear(); for (Movie s:clientMovieArray){ transferMoviesTable.getItems().add(s); } } }","dependencies":[{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/commonClassPackage/DataWrapper.java","file_content":"package commonClassPackage; import java.io.Serializable; import java.util.ArrayList; import java.util.List; public class DataWrapper implements Serializable { public String company; public List movieArray; public Boolean Status =false; public DataWrapper(String command, List data,Boolean changeStatus){ this.company=command; this.movieArray=data; this.Status=changeStatus; } }"},{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/commonClassPackage/Movie.java","file_content":"package commonClassPackage; import java.io.Serializable; public class Movie implements Serializable { private String Movie_name; private int Releasing_year; private String Genre1; private String Genre2; private String Genre3; private int Running_time; private String Company; private long Budget; private long Revenue; public Movie(String name, int year, String g1, String g2, String g3, int time, String company, long budget, long revenue){ Movie_name=name; Releasing_year=year; Genre1=g1; Genre2=g2; Genre3=g3; Running_time=time; Company=company; Budget=budget; Revenue=revenue; } public Movie(){ } public void setMovie_name(String movie_name) { Movie_name = movie_name; } public void setReleasing_year(int releasing_year) { Releasing_year = releasing_year; } public void setGenre1(String genre1) { Genre1 = genre1; } public void setGenre2(String genre2) { Genre2 = genre2; } public void setGenre3(String genre3) { Genre3 = genre3; } public void setRunning_time(int running_time) { Running_time = running_time; } public void setCompany(String company) { Company = company; } public void setBudget(long budget) { Budget = budget; } public void setRevenue(long revenue) { Revenue = revenue; } public int getReleasing_year() { return Releasing_year; } public int getRunning_time() { return Running_time; } public long getBudget() { return Budget; } public long getRevenue() { return Revenue; } public String getCompany() { return Company; } public String getGenre1() { return Genre1; } public String getGenre2() { return Genre2; } public String getMovie_name() { return Movie_name; } public String getGenre3() { return Genre3; } }"},{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/commonClassPackage/SocketWrapper.java","file_content":"package commonClassPackage; import java.io.IOException; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.net.Socket; public class SocketWrapper { private Socket socket; private ObjectOutputStream oos; private ObjectInputStream ois; public SocketWrapper(String s, int port) throws IOException { this.socket = new Socket(s, port); oos = new ObjectOutputStream(socket.getOutputStream()); ois = new ObjectInputStream(socket.getInputStream()); } public SocketWrapper(Socket s) throws IOException { this.socket = s; oos = new ObjectOutputStream(socket.getOutputStream()); ois = new ObjectInputStream(socket.getInputStream()); } public Object read() throws IOException, ClassNotFoundException { return ois.readUnshared(); } public void write(Object o) throws IOException { oos.writeUnshared(o); } public void closeConnection() throws IOException { ois.close(); oos.close(); } }"},{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/myCLient/clientMain.java","file_content":"package myCLient; import commonClassPackage.DataWrapper; import commonClassPackage.Movie; import commonClassPackage.SocketWrapper; import javafx.application.Application; import javafx.event.ActionEvent; import javafx.fxml.FXML; import javafx.fxml.FXMLLoader; import javafx.scene.Node; import javafx.scene.Scene; import javafx.scene.control.Alert; import javafx.scene.control.Label; import javafx.scene.control.TextField; import javafx.stage.Modality; import javafx.stage.Stage; import java.io.IOException; import java.util.ArrayList; import java.util.List; public class clientMain extends Application{ @FXML TextField userText; @FXML Label warningText; public static List<Movie> clientMovieArray=new ArrayList<>(); public static String COMPANY_NAME; public static final int smallHeight=600; public static final int smallWidth=400; public static final int largeHeight=1015; public static final int largeWidth=650; public void start(Stage stage) throws IOException { FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"clientMain.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Movie Action\"); stage.setScene(scene); stage.show(); } public static void main(String[]args) throws IOException { launch(); } public void loginAction(ActionEvent actionEvent) throws IOException, ClassNotFoundException { COMPANY_NAME = userText.getText(); SocketWrapper server = new SocketWrapper(\"127.0.0.1\", 3333); server.write(\"giveMyList,\" + COMPANY_NAME); Object clientObjectData = server.read(); DataWrapper clientWrapperData = (DataWrapper) clientObjectData; clientMovieArray = (ArrayList) clientWrapperData.movieArray; if (clientMovieArray.size()==0){ Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); Alert.AlertType type= Alert.AlertType.WARNING; Alert alert=new Alert(type,\"\"); alert.initModality(Modality.APPLICATION_MODAL); alert.initModality(stage.getModality()); alert.getDialogPane().setContentText(\"No Company Exists in Database with This Name\"); alert.getDialogPane().setHeaderText(\"WARNING!!!\"); alert.showAndWait(); }else { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option!\"); stage.setScene(scene); stage.show(); } } public void resetAction(ActionEvent actionEvent) { userText.setText(null); warningText.setText(null); } public void onCompanyHomeBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"clientMain.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onSearchMoviesClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"searchOption.fxml\")); Scene scene = new Scene(fxmlLoader.load(), largeHeight, largeWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onAddMovieClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"addMovie.fxml\")); Scene scene = new Scene(fxmlLoader.load(), largeHeight, largeWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onTransferMovieClick(ActionEvent actionEvent) throws IOException, ClassNotFoundException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"transferMovie.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onSearchMoviesBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option!\"); stage.setScene(scene); stage.show(); } public void onTransferMovieBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option\"); stage.setScene(scene); stage.show(); } public void onADDMovieBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option\"); stage.setScene(scene); stage.show(); } public void exitAction(ActionEvent actionEvent) { System.exit(0); } }"}]}}
{"project_id":248,"chunk_id":0,"content":{"main_file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/myCLient/clientMain.java","main_file_content":"package myCLient; import commonClassPackage.DataWrapper; import commonClassPackage.Movie; import commonClassPackage.SocketWrapper; import javafx.application.Application; import javafx.event.ActionEvent; import javafx.fxml.FXML; import javafx.fxml.FXMLLoader; import javafx.scene.Node; import javafx.scene.Scene; import javafx.scene.control.Alert; import javafx.scene.control.Label; import javafx.scene.control.TextField; import javafx.stage.Modality; import javafx.stage.Stage; import java.io.IOException; import java.util.ArrayList; import java.util.List; public class clientMain extends Application{ @FXML TextField userText; @FXML Label warningText; public static List<Movie> clientMovieArray=new ArrayList<>(); public static String COMPANY_NAME; public static final int smallHeight=600; public static final int smallWidth=400; public static final int largeHeight=1015; public static final int largeWidth=650; public void start(Stage stage) throws IOException { FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"clientMain.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Movie Action\"); stage.setScene(scene); stage.show(); } public static void main(String[]args) throws IOException { launch(); } public void loginAction(ActionEvent actionEvent) throws IOException, ClassNotFoundException { COMPANY_NAME = userText.getText(); SocketWrapper server = new SocketWrapper(\"127.0.0.1\", 3333); server.write(\"giveMyList,\" + COMPANY_NAME); Object clientObjectData = server.read(); DataWrapper clientWrapperData = (DataWrapper) clientObjectData; clientMovieArray = (ArrayList) clientWrapperData.movieArray; if (clientMovieArray.size()==0){ Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); Alert.AlertType type= Alert.AlertType.WARNING; Alert alert=new Alert(type,\"\"); alert.initModality(Modality.APPLICATION_MODAL); alert.initModality(stage.getModality()); alert.getDialogPane().setContentText(\"No Company Exists in Database with This Name\"); alert.getDialogPane().setHeaderText(\"WARNING!!!\"); alert.showAndWait(); }else { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option!\"); stage.setScene(scene); stage.show(); } } public void resetAction(ActionEvent actionEvent) { userText.setText(null); warningText.setText(null); } public void onCompanyHomeBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"clientMain.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onSearchMoviesClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"searchOption.fxml\")); Scene scene = new Scene(fxmlLoader.load(), largeHeight, largeWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onAddMovieClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"addMovie.fxml\")); Scene scene = new Scene(fxmlLoader.load(), largeHeight, largeWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onTransferMovieClick(ActionEvent actionEvent) throws IOException, ClassNotFoundException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"transferMovie.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onSearchMoviesBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option!\"); stage.setScene(scene); stage.show(); } public void onTransferMovieBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option\"); stage.setScene(scene); stage.show(); } public void onADDMovieBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option\"); stage.setScene(scene); stage.show(); } public void exitAction(ActionEvent actionEvent) { System.exit(0); } }","dependencies":[{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/commonClassPackage/DataWrapper.java","file_content":"package commonClassPackage; import java.io.Serializable; import java.util.ArrayList; import java.util.List; public class DataWrapper implements Serializable { public String company; public List movieArray; public Boolean Status =false; public DataWrapper(String command, List data,Boolean changeStatus){ this.company=command; this.movieArray=data; this.Status=changeStatus; } }"},{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/commonClassPackage/Movie.java","file_content":"package commonClassPackage; import java.io.Serializable; public class Movie implements Serializable { private String Movie_name; private int Releasing_year; private String Genre1; private String Genre2; private String Genre3; private int Running_time; private String Company; private long Budget; private long Revenue; public Movie(String name, int year, String g1, String g2, String g3, int time, String company, long budget, long revenue){ Movie_name=name; Releasing_year=year; Genre1=g1; Genre2=g2; Genre3=g3; Running_time=time; Company=company; Budget=budget; Revenue=revenue; } public Movie(){ } public void setMovie_name(String movie_name) { Movie_name = movie_name; } public void setReleasing_year(int releasing_year) { Releasing_year = releasing_year; } public void setGenre1(String genre1) { Genre1 = genre1; } public void setGenre2(String genre2) { Genre2 = genre2; } public void setGenre3(String genre3) { Genre3 = genre3; } public void setRunning_time(int running_time) { Running_time = running_time; } public void setCompany(String company) { Company = company; } public void setBudget(long budget) { Budget = budget; } public void setRevenue(long revenue) { Revenue = revenue; } public int getReleasing_year() { return Releasing_year; } public int getRunning_time() { return Running_time; } public long getBudget() { return Budget; } public long getRevenue() { return Revenue; } public String getCompany() { return Company; } public String getGenre1() { return Genre1; } public String getGenre2() { return Genre2; } public String getMovie_name() { return Movie_name; } public String getGenre3() { return Genre3; } }"},{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/commonClassPackage/SocketWrapper.java","file_content":"package commonClassPackage; import java.io.IOException; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.net.Socket; public class SocketWrapper { private Socket socket; private ObjectOutputStream oos; private ObjectInputStream ois; public SocketWrapper(String s, int port) throws IOException { this.socket = new Socket(s, port); oos = new ObjectOutputStream(socket.getOutputStream()); ois = new ObjectInputStream(socket.getInputStream()); } public SocketWrapper(Socket s) throws IOException { this.socket = s; oos = new ObjectOutputStream(socket.getOutputStream()); ois = new ObjectInputStream(socket.getInputStream()); } public Object read() throws IOException, ClassNotFoundException { return ois.readUnshared(); } public void write(Object o) throws IOException { oos.writeUnshared(o); } public void closeConnection() throws IOException { ois.close(); oos.close(); } }"}]}}
{"project_id":248,"chunk_id":0,"content":{"main_file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/myCLient/SearchOptionController.java","main_file_content":"package myCLient; import commonClassPackage.DataWrapper; import commonClassPackage.Movie; import commonClassPackage.SocketWrapper; import javafx.event.ActionEvent; import javafx.fxml.FXML; import javafx.scene.control.TableColumn; import javafx.scene.control.TableView; import javafx.scene.control.TextField; import javafx.scene.control.cell.PropertyValueFactory; import java.io.IOException; import java.util.ArrayList; import java.util.List; public class SearchOptionController extends clientMain { private static String functionStatus=null; @FXML TextField toInputTitle; @FXML TextField toInputForDelete; @FXML TextField toInputYear; @FXML TextField toInputGenre; @FXML TextField toInputTime; @FXML TableView<Movie> searchMoviesTable; @FXML TableColumn<Movie, String> searchMoviesTableTitleCol; @FXML TableColumn<Movie, Integer> searchMoviesTableYearCol; @FXML TableColumn<Movie, String> searchMoviesTableG1Col; @FXML TableColumn<Movie, String> searchMoviesTableG2Col; @FXML TableColumn<Movie, String> searchMoviesTableG3Col; @FXML TableColumn<Movie, Integer> searchMoviesTableTimeCol; @FXML TableColumn<Movie, Integer> searchMoviesTableBudgetCol; @FXML TableColumn<Movie, Integer> searchMoviesTableRevenueCol; @FXML void initialize(){ searchMoviesTableTitleCol.setCellValueFactory(new PropertyValueFactory<>(\"Movie_name\")); searchMoviesTableYearCol.setCellValueFactory(new PropertyValueFactory<>(\"Releasing_year\")); searchMoviesTableG1Col.setCellValueFactory(new PropertyValueFactory<>(\"Genre1\")); searchMoviesTableG2Col.setCellValueFactory(new PropertyValueFactory<>(\"Genre2\")); searchMoviesTableG3Col.setCellValueFactory(new PropertyValueFactory<>(\"Genre3\")); searchMoviesTableTimeCol.setCellValueFactory(new PropertyValueFactory<>(\"Running_time\")); searchMoviesTableBudgetCol.setCellValueFactory(new PropertyValueFactory<>(\"Budget\")); searchMoviesTableRevenueCol.setCellValueFactory(new PropertyValueFactory<>(\"Revenue\")); new Thread(()-> { while (true){ try { SocketWrapper server2= new SocketWrapper(\"127.0.0.1\", 3333); server2.write(\"giveMyList,\" + COMPANY_NAME); Object clientObjectData = server2.read(); DataWrapper clientWrapperData = (DataWrapper) clientObjectData; clientMovieArray = (ArrayList) clientWrapperData.movieArray; if(clientWrapperData.Status){ SocketWrapper server3= new SocketWrapper(\"127.0.0.1\", 3333); server3.write(\"confirmFromTransferredCompany,\"+COMPANY_NAME); if(functionStatus.equalsIgnoreCase(\"onSearchAllMoviesyClick\")){ onSearchAllMoviesyClick(null); } else if (functionStatus.equalsIgnoreCase(\"onSearchByMovieGenreClick\")) { onSearchByMovieGenreClick(null); } else if (functionStatus.equalsIgnoreCase(\"onSearchByMovieTitleClick\")) { onSearchByMovieTitleClick(null); } else if (functionStatus.equalsIgnoreCase(\"onSearchByYearClick\")) { onSearchByYearClick(null); } else if (functionStatus.equalsIgnoreCase(\"onSearchByRunTimeClick\")) { onSearchByRunTimeClick(null); } } } catch (IOException e) { throw new RuntimeException(e); } catch (ClassNotFoundException e) { throw new RuntimeException(e); } } }).start(); } public void onSearchByRunTimeClick(ActionEvent actionEvent) { functionStatus=\"onSearchByRunTimeClick\"; String[] timeString=toInputTime.getText().split(\"-\"); int[] time={Integer.parseInt(timeString[0]),Integer.parseInt(timeString[1])}; List<Movie> modifiedMovieArray=new ArrayList<>(); for (Movie s:clientMovieArray){ if(time[0]<=s.getRunning_time()&&s.getRunning_time()<=time[1]){ modifiedMovieArray.add(s); } } searchMoviesTable.getItems().clear(); for (Movie s:modifiedMovieArray){ searchMoviesTable.getItems().add(s); } } @Override public void onSearchMoviesBackClick(ActionEvent actionEvent) throws IOException { super.onSearchMoviesBackClick(actionEvent); } public void onSearchByYearClick(ActionEvent actionEvent) { functionStatus=\"onSearchByYearClick\"; List<Movie> modifiedMovieArray=new ArrayList<>(); for (Movie s:clientMovieArray){ if(Integer.parseInt(toInputYear.getText())==s.getReleasing_year()){ modifiedMovieArray.add(s); } } searchMoviesTable.getItems().clear(); for (Movie s:modifiedMovieArray){ searchMoviesTable.getItems().add(s); } } public void onSearchByMovieTitleClick(ActionEvent actionEvent) { functionStatus=\"onSearchByMovieTitleClick\"; List<Movie> modifiedMovieArray=new ArrayList<>(); for (Movie s:clientMovieArray){ if((toInputTitle.getText()).equalsIgnoreCase(s.getMovie_name())){ modifiedMovieArray.add(s); } } searchMoviesTable.getItems().clear(); for (Movie s:modifiedMovieArray){ searchMoviesTable.getItems().add(s); } } public void onSearchByMovieGenreClick(ActionEvent actionEvent) { functionStatus=\"onSearchByMovieGenreClick\"; List<Movie> modifiedMovieArray=new ArrayList<>(); for (Movie s:clientMovieArray){ if((toInputGenre.getText()).equalsIgnoreCase(s.getGenre1())||(toInputGenre.getText()).equalsIgnoreCase(s.getGenre2())||(toInputGenre.getText()).equalsIgnoreCase(s.getGenre3())){ modifiedMovieArray.add(s); } } searchMoviesTable.getItems().clear(); for (Movie s:modifiedMovieArray){ searchMoviesTable.getItems().add(s); } } public void onSearchAllMoviesyClick(ActionEvent actionEvent) { functionStatus=\"onSearchAllMoviesyClick\"; searchMoviesTable.getItems().clear(); for (Movie s:clientMovieArray){ searchMoviesTable.getItems().add(s); } } public void onMovieDeleteClick(ActionEvent actionEvent) throws IOException, ClassNotFoundException { SocketWrapper server=new SocketWrapper(\"127.0.0.1\",3333); server.write( \"deleteAndUpdateMyList,\"+clientMovieArray.get(0).getCompany()+\",\"+toInputForDelete.getText()); Object clientObjectData=server.read(); DataWrapper clientWrapperData=(DataWrapper)clientObjectData; clientMovieArray = (ArrayList) clientWrapperData.movieArray; searchMoviesTable.getItems().clear(); for (Movie s:clientMovieArray){ searchMoviesTable.getItems().add(s); } } }","dependencies":[{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/commonClassPackage/DataWrapper.java","file_content":"package commonClassPackage; import java.io.Serializable; import java.util.ArrayList; import java.util.List; public class DataWrapper implements Serializable { public String company; public List movieArray; public Boolean Status =false; public DataWrapper(String command, List data,Boolean changeStatus){ this.company=command; this.movieArray=data; this.Status=changeStatus; } }"},{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/commonClassPackage/Movie.java","file_content":"package commonClassPackage; import java.io.Serializable; public class Movie implements Serializable { private String Movie_name; private int Releasing_year; private String Genre1; private String Genre2; private String Genre3; private int Running_time; private String Company; private long Budget; private long Revenue; public Movie(String name, int year, String g1, String g2, String g3, int time, String company, long budget, long revenue){ Movie_name=name; Releasing_year=year; Genre1=g1; Genre2=g2; Genre3=g3; Running_time=time; Company=company; Budget=budget; Revenue=revenue; } public Movie(){ } public void setMovie_name(String movie_name) { Movie_name = movie_name; } public void setReleasing_year(int releasing_year) { Releasing_year = releasing_year; } public void setGenre1(String genre1) { Genre1 = genre1; } public void setGenre2(String genre2) { Genre2 = genre2; } public void setGenre3(String genre3) { Genre3 = genre3; } public void setRunning_time(int running_time) { Running_time = running_time; } public void setCompany(String company) { Company = company; } public void setBudget(long budget) { Budget = budget; } public void setRevenue(long revenue) { Revenue = revenue; } public int getReleasing_year() { return Releasing_year; } public int getRunning_time() { return Running_time; } public long getBudget() { return Budget; } public long getRevenue() { return Revenue; } public String getCompany() { return Company; } public String getGenre1() { return Genre1; } public String getGenre2() { return Genre2; } public String getMovie_name() { return Movie_name; } public String getGenre3() { return Genre3; } }"},{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/commonClassPackage/SocketWrapper.java","file_content":"package commonClassPackage; import java.io.IOException; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.net.Socket; public class SocketWrapper { private Socket socket; private ObjectOutputStream oos; private ObjectInputStream ois; public SocketWrapper(String s, int port) throws IOException { this.socket = new Socket(s, port); oos = new ObjectOutputStream(socket.getOutputStream()); ois = new ObjectInputStream(socket.getInputStream()); } public SocketWrapper(Socket s) throws IOException { this.socket = s; oos = new ObjectOutputStream(socket.getOutputStream()); ois = new ObjectInputStream(socket.getInputStream()); } public Object read() throws IOException, ClassNotFoundException { return ois.readUnshared(); } public void write(Object o) throws IOException { oos.writeUnshared(o); } public void closeConnection() throws IOException { ois.close(); oos.close(); } }"},{"file_path":"CSE-108-javaProject-byNetworking-master/CSE-108-javaProject-byNetworking-master/myCLient/clientMain.java","file_content":"package myCLient; import commonClassPackage.DataWrapper; import commonClassPackage.Movie; import commonClassPackage.SocketWrapper; import javafx.application.Application; import javafx.event.ActionEvent; import javafx.fxml.FXML; import javafx.fxml.FXMLLoader; import javafx.scene.Node; import javafx.scene.Scene; import javafx.scene.control.Alert; import javafx.scene.control.Label; import javafx.scene.control.TextField; import javafx.stage.Modality; import javafx.stage.Stage; import java.io.IOException; import java.util.ArrayList; import java.util.List; public class clientMain extends Application{ @FXML TextField userText; @FXML Label warningText; public static List<Movie> clientMovieArray=new ArrayList<>(); public static String COMPANY_NAME; public static final int smallHeight=600; public static final int smallWidth=400; public static final int largeHeight=1015; public static final int largeWidth=650; public void start(Stage stage) throws IOException { FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"clientMain.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Movie Action\"); stage.setScene(scene); stage.show(); } public static void main(String[]args) throws IOException { launch(); } public void loginAction(ActionEvent actionEvent) throws IOException, ClassNotFoundException { COMPANY_NAME = userText.getText(); SocketWrapper server = new SocketWrapper(\"127.0.0.1\", 3333); server.write(\"giveMyList,\" + COMPANY_NAME); Object clientObjectData = server.read(); DataWrapper clientWrapperData = (DataWrapper) clientObjectData; clientMovieArray = (ArrayList) clientWrapperData.movieArray; if (clientMovieArray.size()==0){ Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); Alert.AlertType type= Alert.AlertType.WARNING; Alert alert=new Alert(type,\"\"); alert.initModality(Modality.APPLICATION_MODAL); alert.initModality(stage.getModality()); alert.getDialogPane().setContentText(\"No Company Exists in Database with This Name\"); alert.getDialogPane().setHeaderText(\"WARNING!!!\"); alert.showAndWait(); }else { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option!\"); stage.setScene(scene); stage.show(); } } public void resetAction(ActionEvent actionEvent) { userText.setText(null); warningText.setText(null); } public void onCompanyHomeBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"clientMain.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onSearchMoviesClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"searchOption.fxml\")); Scene scene = new Scene(fxmlLoader.load(), largeHeight, largeWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onAddMovieClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"addMovie.fxml\")); Scene scene = new Scene(fxmlLoader.load(), largeHeight, largeWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onTransferMovieClick(ActionEvent actionEvent) throws IOException, ClassNotFoundException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"transferMovie.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"You are logged in as \"+COMPANY_NAME); stage.setScene(scene); stage.show(); } public void onSearchMoviesBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option!\"); stage.setScene(scene); stage.show(); } public void onTransferMovieBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option\"); stage.setScene(scene); stage.show(); } public void onADDMovieBackClick(ActionEvent actionEvent) throws IOException { Stage stage=(Stage)((Node)actionEvent.getSource()).getScene().getWindow(); FXMLLoader fxmlLoader = new FXMLLoader(clientMain.class.getResource(\"companyHome.fxml\")); Scene scene = new Scene(fxmlLoader.load(), smallHeight, smallWidth); stage.setTitle(\"Production Company Searching Option\"); stage.setScene(scene); stage.show(); } public void exitAction(ActionEvent actionEvent) { System.exit(0); } }"}]}}
{"project_id":275,"chunk_id":0,"content":{"main_file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/transaction/MerkleTree.java","main_file_content":"package one.wangwei.blockchain.transaction; import com.google.common.collect.Lists; import lombok.Data; import one.wangwei.blockchain.util.ByteUtils; import org.apache.commons.codec.digest.DigestUtils; import java.util.List; @Data public class MerkleTree { private Node root; private byte[][] leafHashes; public MerkleTree(byte[][] leafHashes) { constructTree(leafHashes); } private void constructTree(byte[][] leafHashes) { if (leafHashes == null || leafHashes.length < 1) { throw new RuntimeException(\"ERROR:Fail to construct merkle tree ! leafHashes data invalid ! \"); } this.leafHashes = leafHashes; List<Node> parents = bottomLevel(leafHashes); while (parents.size() > 1) { parents = internalLevel(parents); } root = parents.get(0); } private List<Node> internalLevel(List<Node> children) { List<Node> parents = Lists.newArrayListWithCapacity(children.size() / 2); for (int i = 0; i < children.size() - 1; i += 2) { Node child1 = children.get(i); Node child2 = children.get(i + 1); Node parent = constructInternalNode(child1, child2); parents.add(parent); } if (children.size() % 2 != 0) { Node child = children.get(children.size() - 1); Node parent = constructInternalNode(child, null); parents.add(parent); } return parents; } private List<Node> bottomLevel(byte[][] hashes) { List<Node> parents = Lists.newArrayListWithCapacity(hashes.length / 2); for (int i = 0; i < hashes.length - 1; i += 2) { Node leaf1 = constructLeafNode(hashes[i]); Node leaf2 = constructLeafNode(hashes[i + 1]); Node parent = constructInternalNode(leaf1, leaf2); parents.add(parent); } if (hashes.length % 2 != 0) { Node leaf = constructLeafNode(hashes[hashes.length - 1]); Node parent = constructInternalNode(leaf, leaf); parents.add(parent); } return parents; } private static Node constructLeafNode(byte[] hash) { Node leaf = new Node(); leaf.hash = hash; return leaf; } private Node constructInternalNode(Node leftChild, Node rightChild) { Node parent = new Node(); if (rightChild == null) { parent.hash = leftChild.hash; } else { parent.hash = internalHash(leftChild.hash, rightChild.hash); } parent.left = leftChild; parent.right = rightChild; return parent; } private byte[] internalHash(byte[] leftChildHash, byte[] rightChildHash) { byte[] mergedBytes = ByteUtils.merge(leftChildHash, rightChildHash); return DigestUtils.sha256(mergedBytes); } @Data public static class Node { private byte[] hash; private Node left; private Node right; } }","dependencies":[{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/util/ByteUtils.java","file_content":"package one.wangwei.blockchain.util; import org.apache.commons.codec.binary.Hex; import org.apache.commons.lang3.ArrayUtils; import java.nio.ByteBuffer; import java.util.Arrays; import java.util.stream.Stream; public class ByteUtils { public static final byte[] EMPTY_ARRAY = new byte[0]; public static final byte[] EMPTY_BYTES = new byte[32]; public static final String ZERO_HASH = Hex.encodeHexString(EMPTY_BYTES); public static byte[] merge(byte[]... bytes) { Stream<Byte> stream = Stream.of(); for (byte[] b: bytes) { stream = Stream.concat(stream, Arrays.stream(ArrayUtils.toObject(b))); } return ArrayUtils.toPrimitive(stream.toArray(Byte[]::new)); } public static byte[] toBytes(long val) { return ByteBuffer.allocate(Long.BYTES).putLong(val).array(); } }"}]}}
{"project_id":275,"chunk_id":0,"content":{"main_file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/transaction/TXOutput.java","main_file_content":"package one.wangwei.blockchain.transaction; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import one.wangwei.blockchain.util.Base58Check; import java.util.Arrays; @Data @AllArgsConstructor @NoArgsConstructor public class TXOutput { private int value; private byte[] pubKeyHash; public static TXOutput newTXOutput(int value, String address) { byte[] versionedPayload = Base58Check.base58ToBytes(address); byte[] pubKeyHash = Arrays.copyOfRange(versionedPayload, 1, versionedPayload.length); return new TXOutput(value, pubKeyHash); } public boolean isLockedWithKey(byte[] pubKeyHash) { return Arrays.equals(this.getPubKeyHash(), pubKeyHash); } }","dependencies":[{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/util/Base58Check.java","file_content":"package one.wangwei.blockchain.util; import java.io.ByteArrayOutputStream; import java.io.IOException; import java.math.BigInteger; import java.util.Arrays; public final class Base58Check { public static String bytesToBase58(byte[] data) { return rawBytesToBase58(addCheckHash(data)); } public static String rawBytesToBase58(byte[] data) { StringBuilder sb = new StringBuilder(); BigInteger num = new BigInteger(1, data); while (num.signum() != 0) { BigInteger[] quotrem = num.divideAndRemainder(ALPHABET_SIZE); sb.append(ALPHABET.charAt(quotrem[1].intValue())); num = quotrem[0]; } for (int i = 0; i < data.length && data[i] == 0; i++) { sb.append(ALPHABET.charAt(0)); } return sb.reverse().toString(); } static byte[] addCheckHash(byte[] data) { try { byte[] hash = Arrays.copyOf(BtcAddressUtils.doubleHash(data), 4); ByteArrayOutputStream buf = new ByteArrayOutputStream(); buf.write(data); buf.write(hash); return buf.toByteArray(); } catch (IOException e) { throw new AssertionError(e); } } public static byte[] base58ToBytes(String s) { byte[] concat = base58ToRawBytes(s); byte[] data = Arrays.copyOf(concat, concat.length - 4); byte[] hash = Arrays.copyOfRange(concat, concat.length - 4, concat.length); byte[] rehash = Arrays.copyOf(BtcAddressUtils.doubleHash(data), 4); if (!Arrays.equals(rehash, hash)) { throw new IllegalArgumentException(\"Checksum mismatch\"); } return data; } static byte[] base58ToRawBytes(String s) { BigInteger num = BigInteger.ZERO; for (int i = 0; i < s.length(); i++) { num = num.multiply(ALPHABET_SIZE); int digit = ALPHABET.indexOf(s.charAt(i)); if (digit == -1) { throw new IllegalArgumentException(\"Invalid character for Base58Check\"); } num = num.add(BigInteger.valueOf(digit)); } byte[] b = num.toByteArray(); if (b[0] == 0) { b = Arrays.copyOfRange(b, 1, b.length); } try { ByteArrayOutputStream buf = new ByteArrayOutputStream(); for (int i = 0; i < s.length() && s.charAt(i) == ALPHABET.charAt(0); i++) { buf.write(0); } buf.write(b); return buf.toByteArray(); } catch (IOException e) { throw new AssertionError(e); } } private static final String ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"; private static final BigInteger ALPHABET_SIZE = BigInteger.valueOf(ALPHABET.length()); private Base58Check() { } }"}]}}
{"project_id":275,"chunk_id":0,"content":{"main_file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/transaction/UTXOSet.java","main_file_content":"package one.wangwei.blockchain.transaction; import com.google.common.collect.Maps; import lombok.AllArgsConstructor; import lombok.NoArgsConstructor; import lombok.Synchronized; import lombok.extern.slf4j.Slf4j; import one.wangwei.blockchain.block.Block; import one.wangwei.blockchain.block.Blockchain; import one.wangwei.blockchain.store.RocksDBUtils; import one.wangwei.blockchain.util.SerializeUtils; import org.apache.commons.codec.binary.Hex; import org.apache.commons.lang3.ArrayUtils; import java.util.Map; @NoArgsConstructor @AllArgsConstructor @Slf4j public class UTXOSet { private Blockchain blockchain; public SpendableOutputResult findSpendableOutputs(byte[] pubKeyHash, int amount) { Map<String, int[]> unspentOuts = Maps.newHashMap(); int accumulated = 0; Map<String, byte[]> chainstateBucket = RocksDBUtils.getInstance().getChainstateBucket(); for (Map.Entry<String, byte[]> entry : chainstateBucket.entrySet()) { String txId = entry.getKey(); TXOutput[] txOutputs = (TXOutput[]) SerializeUtils.deserialize(entry.getValue()); for (int outId = 0; outId < txOutputs.length; outId++) { TXOutput txOutput = txOutputs[outId]; if (txOutput.isLockedWithKey(pubKeyHash) && accumulated < amount) { accumulated += txOutput.getValue(); int[] outIds = unspentOuts.get(txId); if (outIds == null) { outIds = new int[]{outId}; } else { outIds = ArrayUtils.add(outIds, outId); } unspentOuts.put(txId, outIds); if (accumulated >= amount) { break; } } } } return new SpendableOutputResult(accumulated, unspentOuts); } public TXOutput[] findUTXOs(byte[] pubKeyHash) { TXOutput[] utxos = {}; Map<String, byte[]> chainstateBucket = RocksDBUtils.getInstance().getChainstateBucket(); if (chainstateBucket.isEmpty()) { return utxos; } for (byte[] value : chainstateBucket.values()) { TXOutput[] txOutputs = (TXOutput[]) SerializeUtils.deserialize(value); for (TXOutput txOutput : txOutputs) { if (txOutput.isLockedWithKey(pubKeyHash)) { utxos = ArrayUtils.add(utxos, txOutput); } } } return utxos; } @Synchronized public void reIndex() { log.info(\"Start to reIndex UTXO set !\"); RocksDBUtils.getInstance().cleanChainStateBucket(); Map<String, TXOutput[]> allUTXOs = blockchain.findAllUTXOs(); for (Map.Entry<String, TXOutput[]> entry : allUTXOs.entrySet()) { RocksDBUtils.getInstance().putUTXOs(entry.getKey(), entry.getValue()); } log.info(\"ReIndex UTXO set finished ! \"); } @Synchronized public void update(Block tipBlock) { if (tipBlock == null) { log.error(\"Fail to update UTXO set ! tipBlock is null !\"); throw new RuntimeException(\"Fail to update UTXO set ! \"); } for (Transaction transaction : tipBlock.getTransactions()) { if (!transaction.isCoinbase()) { for (TXInput txInput : transaction.getInputs()) { TXOutput[] remainderUTXOs = {}; String txId = Hex.encodeHexString(txInput.getTxId()); TXOutput[] txOutputs = RocksDBUtils.getInstance().getUTXOs(txId); if (txOutputs == null) { continue; } for (int outIndex = 0; outIndex < txOutputs.length; outIndex++) { if (outIndex != txInput.getTxOutputIndex()) { remainderUTXOs = ArrayUtils.add(remainderUTXOs, txOutputs[outIndex]); } } if (remainderUTXOs.length == 0) { RocksDBUtils.getInstance().deleteUTXOs(txId); } else { RocksDBUtils.getInstance().putUTXOs(txId, remainderUTXOs); } } } TXOutput[] txOutputs = transaction.getOutputs(); String txId = Hex.encodeHexString(transaction.getTxId()); RocksDBUtils.getInstance().putUTXOs(txId, txOutputs); } } }","dependencies":[{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/block/Block.java","file_content":"package one.wangwei.blockchain.block; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import lombok.ToString; import one.wangwei.blockchain.pow.PowResult; import one.wangwei.blockchain.pow.ProofOfWork; import one.wangwei.blockchain.transaction.MerkleTree; import one.wangwei.blockchain.transaction.Transaction; import one.wangwei.blockchain.util.ByteUtils; import java.time.Instant; @Data @AllArgsConstructor @NoArgsConstructor @ToString public class Block { private String hash; private String prevBlockHash; private Transaction[] transactions; private long timeStamp; private long nonce; public static Block newGenesisBlock(Transaction coinbase) { return Block.newBlock(ByteUtils.ZERO_HASH, new Transaction[]{coinbase}); } public static Block newBlock(String previousHash, Transaction[] transactions) { Block block = new Block(\"\", previousHash, transactions, Instant.now().getEpochSecond(), 0); ProofOfWork pow = ProofOfWork.newProofOfWork(block); PowResult powResult = pow.run(); block.setHash(powResult.getHash()); block.setNonce(powResult.getNonce()); return block; } public byte[] hashTransaction() { byte[][] txIdArrays = new byte[this.getTransactions().length][]; for (int i = 0; i < this.getTransactions().length; i++) { txIdArrays[i] = this.getTransactions()[i].hash(); } return new MerkleTree(txIdArrays).getRoot().getHash(); } }"},{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/block/Blockchain.java","file_content":"package one.wangwei.blockchain.block; import com.google.common.collect.Maps; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import lombok.extern.slf4j.Slf4j; import one.wangwei.blockchain.store.RocksDBUtils; import one.wangwei.blockchain.transaction.TXInput; import one.wangwei.blockchain.transaction.TXOutput; import one.wangwei.blockchain.transaction.Transaction; import org.apache.commons.codec.binary.Hex; import org.apache.commons.lang3.ArrayUtils; import org.apache.commons.lang3.StringUtils; import org.bouncycastle.jcajce.provider.asymmetric.ec.BCECPrivateKey; import java.util.Arrays; import java.util.Map; @Data @AllArgsConstructor @NoArgsConstructor @Slf4j public class Blockchain { private String lastBlockHash; public static Blockchain initBlockchainFromDB() { String lastBlockHash = RocksDBUtils.getInstance().getLastBlockHash(); if (lastBlockHash == null) { throw new RuntimeException(\"ERROR: Fail to init blockchain from db. \"); } return new Blockchain(lastBlockHash); } public static Blockchain createBlockchain(String address) { String lastBlockHash = RocksDBUtils.getInstance().getLastBlockHash(); if (StringUtils.isBlank(lastBlockHash)) { String genesisCoinbaseData = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\"; Transaction coinbaseTX = Transaction.newCoinbaseTX(address, genesisCoinbaseData); Block genesisBlock = Block.newGenesisBlock(coinbaseTX); lastBlockHash = genesisBlock.getHash(); RocksDBUtils.getInstance().putBlock(genesisBlock); RocksDBUtils.getInstance().putLastBlockHash(lastBlockHash); } return new Blockchain(lastBlockHash); } public Block mineBlock(Transaction[] transactions) { for (Transaction tx : transactions) { if (!this.verifyTransactions(tx)) { log.error(\"ERROR: Fail to mine block ! Invalid transaction ! tx=\" + tx.toString()); throw new RuntimeException(\"ERROR: Fail to mine block ! Invalid transaction ! \"); } } String lastBlockHash = RocksDBUtils.getInstance().getLastBlockHash(); if (lastBlockHash == null) { throw new RuntimeException(\"ERROR: Fail to get last block hash ! \"); } Block block = Block.newBlock(lastBlockHash, transactions); this.addBlock(block); return block; } private void addBlock(Block block) { RocksDBUtils.getInstance().putLastBlockHash(block.getHash()); RocksDBUtils.getInstance().putBlock(block); this.lastBlockHash = block.getHash(); } public class BlockchainIterator { private String currentBlockHash; private BlockchainIterator(String currentBlockHash) { this.currentBlockHash = currentBlockHash; } public boolean hashNext() { if (StringUtils.isBlank(currentBlockHash)) { return false; } Block lastBlock = RocksDBUtils.getInstance().getBlock(currentBlockHash); if (lastBlock == null) { return false; } if (lastBlock.getPrevBlockHash().length() == 0) { return true; } return RocksDBUtils.getInstance().getBlock(lastBlock.getPrevBlockHash()) != null; } public Block next() { Block currentBlock = RocksDBUtils.getInstance().getBlock(currentBlockHash); if (currentBlock != null) { this.currentBlockHash = currentBlock.getPrevBlockHash(); return currentBlock; } return null; } } public BlockchainIterator getBlockchainIterator() { return new BlockchainIterator(lastBlockHash); } public Map<String, TXOutput[]> findAllUTXOs() { Map<String, int[]> allSpentTXOs = this.getAllSpentTXOs(); Map<String, TXOutput[]> allUTXOs = Maps.newHashMap(); for (BlockchainIterator blockchainIterator = this.getBlockchainIterator(); blockchainIterator.hashNext(); ) { Block block = blockchainIterator.next(); for (Transaction transaction : block.getTransactions()) { String txId = Hex.encodeHexString(transaction.getTxId()); int[] spentOutIndexArray = allSpentTXOs.get(txId); TXOutput[] txOutputs = transaction.getOutputs(); for (int outIndex = 0; outIndex < txOutputs.length; outIndex++) { if (spentOutIndexArray != null && ArrayUtils.contains(spentOutIndexArray, outIndex)) { continue; } TXOutput[] UTXOArray = allUTXOs.get(txId); if (UTXOArray == null) { UTXOArray = new TXOutput[]{txOutputs[outIndex]}; } else { UTXOArray = ArrayUtils.add(UTXOArray, txOutputs[outIndex]); } allUTXOs.put(txId, UTXOArray); } } } return allUTXOs; } private Map<String, int[]> getAllSpentTXOs() { Map<String, int[]> spentTXOs = Maps.newHashMap(); for (BlockchainIterator blockchainIterator = this.getBlockchainIterator(); blockchainIterator.hashNext(); ) { Block block = blockchainIterator.next(); for (Transaction transaction : block.getTransactions()) { if (transaction.isCoinbase()) { continue; } for (TXInput txInput : transaction.getInputs()) { String inTxId = Hex.encodeHexString(txInput.getTxId()); int[] spentOutIndexArray = spentTXOs.get(inTxId); if (spentOutIndexArray == null) { spentOutIndexArray = new int[]{txInput.getTxOutputIndex()}; } else { spentOutIndexArray = ArrayUtils.add(spentOutIndexArray, txInput.getTxOutputIndex()); } spentTXOs.put(inTxId, spentOutIndexArray); } } } return spentTXOs; } private Transaction findTransaction(byte[] txId) { for (BlockchainIterator iterator = this.getBlockchainIterator(); iterator.hashNext(); ) { Block block = iterator.next(); for (Transaction tx : block.getTransactions()) { if (Arrays.equals(tx.getTxId(), txId)) { return tx; } } } throw new RuntimeException(\"ERROR: Can not found tx by txId ! \"); } public void signTransaction(Transaction tx, BCECPrivateKey privateKey) throws Exception { Map<String, Transaction> prevTxMap = Maps.newHashMap(); for (TXInput txInput : tx.getInputs()) { Transaction prevTx = this.findTransaction(txInput.getTxId()); prevTxMap.put(Hex.encodeHexString(txInput.getTxId()), prevTx); } tx.sign(privateKey, prevTxMap); } private boolean verifyTransactions(Transaction tx) { if (tx.isCoinbase()) { return true; } Map<String, Transaction> prevTx = Maps.newHashMap(); for (TXInput txInput : tx.getInputs()) { Transaction transaction = this.findTransaction(txInput.getTxId()); prevTx.put(Hex.encodeHexString(txInput.getTxId()), transaction); } try { return tx.verify(prevTx); } catch (Exception e) { log.error(\"Fail to verify transaction ! transaction invalid ! \", e); throw new RuntimeException(\"Fail to verify transaction ! transaction invalid ! \", e); } } }"},{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/store/RocksDBUtils.java","file_content":"package one.wangwei.blockchain.store; import com.google.common.collect.Maps; import lombok.Getter; import lombok.extern.slf4j.Slf4j; import one.wangwei.blockchain.block.Block; import one.wangwei.blockchain.transaction.TXOutput; import one.wangwei.blockchain.util.SerializeUtils; import org.rocksdb.RocksDB; import org.rocksdb.RocksDBException; import java.util.Map; @Slf4j public class RocksDBUtils { private static final String DB_FILE = \"blockchain.db\"; private static final String BLOCKS_BUCKET_KEY = \"blocks\"; private static final String CHAINSTATE_BUCKET_KEY = \"chainstate\"; private static final String LAST_BLOCK_KEY = \"l\"; private volatile static RocksDBUtils instance; public static RocksDBUtils getInstance() { if (instance == null) { synchronized (RocksDBUtils.class) { if (instance == null) { instance = new RocksDBUtils(); } } } return instance; } private RocksDB db; private Map<String, byte[]> blocksBucket; @Getter private Map<String, byte[]> chainstateBucket; private RocksDBUtils() { openDB(); initBlockBucket(); initChainStateBucket(); } private void openDB() { try { db = RocksDB.open(DB_FILE); } catch (RocksDBException e) { log.error(\"Fail to open db ! \", e); throw new RuntimeException(\"Fail to open db ! \", e); } } private void initBlockBucket() { try { byte[] blockBucketKey = SerializeUtils.serialize(BLOCKS_BUCKET_KEY); byte[] blockBucketBytes = db.get(blockBucketKey); if (blockBucketBytes != null) { blocksBucket = (Map) SerializeUtils.deserialize(blockBucketBytes); } else { blocksBucket = Maps.newHashMap(); db.put(blockBucketKey, SerializeUtils.serialize(blocksBucket)); } } catch (RocksDBException e) { log.error(\"Fail to init block bucket ! \", e); throw new RuntimeException(\"Fail to init block bucket ! \", e); } } private void initChainStateBucket() { try { byte[] chainstateBucketKey = SerializeUtils.serialize(CHAINSTATE_BUCKET_KEY); byte[] chainstateBucketBytes = db.get(chainstateBucketKey); if (chainstateBucketBytes != null) { chainstateBucket = (Map) SerializeUtils.deserialize(chainstateBucketBytes); } else { chainstateBucket = Maps.newHashMap(); db.put(chainstateBucketKey, SerializeUtils.serialize(chainstateBucket)); } } catch (RocksDBException e) { log.error(\"Fail to init chainstate bucket ! \", e); throw new RuntimeException(\"Fail to init chainstate bucket ! \", e); } } public void putLastBlockHash(String tipBlockHash) { try { blocksBucket.put(LAST_BLOCK_KEY, SerializeUtils.serialize(tipBlockHash)); db.put(SerializeUtils.serialize(BLOCKS_BUCKET_KEY), SerializeUtils.serialize(blocksBucket)); } catch (RocksDBException e) { log.error(\"Fail to put last block hash ! tipBlockHash=\" + tipBlockHash, e); throw new RuntimeException(\"Fail to put last block hash ! tipBlockHash=\" + tipBlockHash, e); } } public String getLastBlockHash() { byte[] lastBlockHashBytes = blocksBucket.get(LAST_BLOCK_KEY); if (lastBlockHashBytes != null) { return (String) SerializeUtils.deserialize(lastBlockHashBytes); } return \"\"; } public void putBlock(Block block) { try { blocksBucket.put(block.getHash(), SerializeUtils.serialize(block)); db.put(SerializeUtils.serialize(BLOCKS_BUCKET_KEY), SerializeUtils.serialize(blocksBucket)); } catch (RocksDBException e) { log.error(\"Fail to put block ! block=\" + block.toString(), e); throw new RuntimeException(\"Fail to put block ! block=\" + block.toString(), e); } } public Block getBlock(String blockHash) { byte[] blockBytes = blocksBucket.get(blockHash); if (blockBytes != null) { return (Block) SerializeUtils.deserialize(blockBytes); } throw new RuntimeException(\"Fail to get block ! blockHash=\" + blockHash); } public void cleanChainStateBucket() { try { chainstateBucket.clear(); } catch (Exception e) { log.error(\"Fail to clear chainstate bucket ! \", e); throw new RuntimeException(\"Fail to clear chainstate bucket ! \", e); } } public void putUTXOs(String key, TXOutput[] utxos) { try { chainstateBucket.put(key, SerializeUtils.serialize(utxos)); db.put(SerializeUtils.serialize(CHAINSTATE_BUCKET_KEY), SerializeUtils.serialize(chainstateBucket)); } catch (Exception e) { log.error(\"Fail to put UTXOs into chainstate bucket ! key=\" + key, e); throw new RuntimeException(\"Fail to put UTXOs into chainstate bucket ! key=\" + key, e); } } public TXOutput[] getUTXOs(String key) { byte[] utxosByte = chainstateBucket.get(key); if (utxosByte != null) { return (TXOutput[]) SerializeUtils.deserialize(utxosByte); } return null; } public void deleteUTXOs(String key) { try { chainstateBucket.remove(key); db.put(SerializeUtils.serialize(CHAINSTATE_BUCKET_KEY), SerializeUtils.serialize(chainstateBucket)); } catch (Exception e) { log.error(\"Fail to delete UTXOs by key ! key=\" + key, e); throw new RuntimeException(\"Fail to delete UTXOs by key ! key=\" + key, e); } } public void closeDB() { try { db.close(); } catch (Exception e) { log.error(\"Fail to close db ! \", e); throw new RuntimeException(\"Fail to close db ! \", e); } } }"},{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/transaction/SpendableOutputResult.java","file_content":"package one.wangwei.blockchain.transaction; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import java.util.Map; @Data @AllArgsConstructor @NoArgsConstructor public class SpendableOutputResult { private int accumulated; private Map<String, int[]> unspentOuts; }"},{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/transaction/TXInput.java","file_content":"package one.wangwei.blockchain.transaction; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import one.wangwei.blockchain.util.BtcAddressUtils; import java.util.Arrays; @Data @AllArgsConstructor @NoArgsConstructor public class TXInput { private byte[] txId; private int txOutputIndex; private byte[] signature; private byte[] pubKey; public boolean usesKey(byte[] pubKeyHash) { byte[] lockingHash = BtcAddressUtils.ripeMD160Hash(this.getPubKey()); return Arrays.equals(lockingHash, pubKeyHash); } }"},{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/transaction/TXOutput.java","file_content":"package one.wangwei.blockchain.transaction; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import one.wangwei.blockchain.util.Base58Check; import java.util.Arrays; @Data @AllArgsConstructor @NoArgsConstructor public class TXOutput { private int value; private byte[] pubKeyHash; public static TXOutput newTXOutput(int value, String address) { byte[] versionedPayload = Base58Check.base58ToBytes(address); byte[] pubKeyHash = Arrays.copyOfRange(versionedPayload, 1, versionedPayload.length); return new TXOutput(value, pubKeyHash); } public boolean isLockedWithKey(byte[] pubKeyHash) { return Arrays.equals(this.getPubKeyHash(), pubKeyHash); } }"}]}}
{"project_id":275,"chunk_id":1,"content":{"main_file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/transaction/UTXOSet.java","main_file_content":"package one.wangwei.blockchain.transaction; import com.google.common.collect.Maps; import lombok.AllArgsConstructor; import lombok.NoArgsConstructor; import lombok.Synchronized; import lombok.extern.slf4j.Slf4j; import one.wangwei.blockchain.block.Block; import one.wangwei.blockchain.block.Blockchain; import one.wangwei.blockchain.store.RocksDBUtils; import one.wangwei.blockchain.util.SerializeUtils; import org.apache.commons.codec.binary.Hex; import org.apache.commons.lang3.ArrayUtils; import java.util.Map; @NoArgsConstructor @AllArgsConstructor @Slf4j public class UTXOSet { private Blockchain blockchain; public SpendableOutputResult findSpendableOutputs(byte[] pubKeyHash, int amount) { Map<String, int[]> unspentOuts = Maps.newHashMap(); int accumulated = 0; Map<String, byte[]> chainstateBucket = RocksDBUtils.getInstance().getChainstateBucket(); for (Map.Entry<String, byte[]> entry : chainstateBucket.entrySet()) { String txId = entry.getKey(); TXOutput[] txOutputs = (TXOutput[]) SerializeUtils.deserialize(entry.getValue()); for (int outId = 0; outId < txOutputs.length; outId++) { TXOutput txOutput = txOutputs[outId]; if (txOutput.isLockedWithKey(pubKeyHash) && accumulated < amount) { accumulated += txOutput.getValue(); int[] outIds = unspentOuts.get(txId); if (outIds == null) { outIds = new int[]{outId}; } else { outIds = ArrayUtils.add(outIds, outId); } unspentOuts.put(txId, outIds); if (accumulated >= amount) { break; } } } } return new SpendableOutputResult(accumulated, unspentOuts); } public TXOutput[] findUTXOs(byte[] pubKeyHash) { TXOutput[] utxos = {}; Map<String, byte[]> chainstateBucket = RocksDBUtils.getInstance().getChainstateBucket(); if (chainstateBucket.isEmpty()) { return utxos; } for (byte[] value : chainstateBucket.values()) { TXOutput[] txOutputs = (TXOutput[]) SerializeUtils.deserialize(value); for (TXOutput txOutput : txOutputs) { if (txOutput.isLockedWithKey(pubKeyHash)) { utxos = ArrayUtils.add(utxos, txOutput); } } } return utxos; } @Synchronized public void reIndex() { log.info(\"Start to reIndex UTXO set !\"); RocksDBUtils.getInstance().cleanChainStateBucket(); Map<String, TXOutput[]> allUTXOs = blockchain.findAllUTXOs(); for (Map.Entry<String, TXOutput[]> entry : allUTXOs.entrySet()) { RocksDBUtils.getInstance().putUTXOs(entry.getKey(), entry.getValue()); } log.info(\"ReIndex UTXO set finished ! \"); } @Synchronized public void update(Block tipBlock) { if (tipBlock == null) { log.error(\"Fail to update UTXO set ! tipBlock is null !\"); throw new RuntimeException(\"Fail to update UTXO set ! \"); } for (Transaction transaction : tipBlock.getTransactions()) { if (!transaction.isCoinbase()) { for (TXInput txInput : transaction.getInputs()) { TXOutput[] remainderUTXOs = {}; String txId = Hex.encodeHexString(txInput.getTxId()); TXOutput[] txOutputs = RocksDBUtils.getInstance().getUTXOs(txId); if (txOutputs == null) { continue; } for (int outIndex = 0; outIndex < txOutputs.length; outIndex++) { if (outIndex != txInput.getTxOutputIndex()) { remainderUTXOs = ArrayUtils.add(remainderUTXOs, txOutputs[outIndex]); } } if (remainderUTXOs.length == 0) { RocksDBUtils.getInstance().deleteUTXOs(txId); } else { RocksDBUtils.getInstance().putUTXOs(txId, remainderUTXOs); } } } TXOutput[] txOutputs = transaction.getOutputs(); String txId = Hex.encodeHexString(transaction.getTxId()); RocksDBUtils.getInstance().putUTXOs(txId, txOutputs); } } }","dependencies":[{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/transaction/Transaction.java","file_content":"package one.wangwei.blockchain.transaction; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import lombok.extern.slf4j.Slf4j; import one.wangwei.blockchain.block.Blockchain; import one.wangwei.blockchain.util.BtcAddressUtils; import one.wangwei.blockchain.util.SerializeUtils; import one.wangwei.blockchain.wallet.Wallet; import one.wangwei.blockchain.wallet.WalletUtils; import org.apache.commons.codec.binary.Hex; import org.apache.commons.codec.digest.DigestUtils; import org.apache.commons.lang3.ArrayUtils; import org.apache.commons.lang3.StringUtils; import org.bouncycastle.jcajce.provider.asymmetric.ec.BCECPrivateKey; import org.bouncycastle.jce.ECNamedCurveTable; import org.bouncycastle.jce.provider.BouncyCastleProvider; import org.bouncycastle.jce.spec.ECParameterSpec; import org.bouncycastle.jce.spec.ECPublicKeySpec; import org.bouncycastle.math.ec.ECPoint; import java.math.BigInteger; import java.security.KeyFactory; import java.security.PublicKey; import java.security.Security; import java.security.Signature; import java.util.Arrays; import java.util.Iterator; import java.util.Map; @Data @AllArgsConstructor @NoArgsConstructor @Slf4j public class Transaction { private static final int SUBSIDY = 10; private byte[] txId; private TXInput[] inputs; private TXOutput[] outputs; private long createTime; public byte[] hash() { byte[] serializeBytes = SerializeUtils.serialize(this); Transaction copyTx = (Transaction) SerializeUtils.deserialize(serializeBytes); copyTx.setTxId(new byte[]{}); return DigestUtils.sha256(SerializeUtils.serialize(copyTx)); } public static Transaction newCoinbaseTX(String to, String data) { if (StringUtils.isBlank(data)) { data = String.format(\"Reward to '%s'\", to); } TXInput txInput = new TXInput(new byte[]{}, -1, null, data.getBytes()); TXOutput txOutput = TXOutput.newTXOutput(SUBSIDY, to); Transaction tx = new Transaction(null, new TXInput[]{txInput}, new TXOutput[]{txOutput}, System.currentTimeMillis()); tx.setTxId(tx.hash()); return tx; } public boolean isCoinbase() { return this.getInputs().length == 1 && this.getInputs()[0].getTxId().length == 0 && this.getInputs()[0].getTxOutputIndex() == -1; } public static Transaction newUTXOTransaction(String from, String to, int amount, Blockchain blockchain) throws Exception { Wallet senderWallet = WalletUtils.getInstance().getWallet(from); byte[] pubKey = senderWallet.getPublicKey(); byte[] pubKeyHash = BtcAddressUtils.ripeMD160Hash(pubKey); SpendableOutputResult result = new UTXOSet(blockchain).findSpendableOutputs(pubKeyHash, amount); int accumulated = result.getAccumulated(); Map<String, int[]> unspentOuts = result.getUnspentOuts(); if (accumulated < amount) { log.error(\"ERROR: Not enough funds ! accumulated=\" + accumulated + \", amount=\" + amount); throw new RuntimeException(\"ERROR: Not enough funds ! \"); } Iterator<Map.Entry<String, int[]>> iterator = unspentOuts.entrySet().iterator(); TXInput[] txInputs = {}; while (iterator.hasNext()) { Map.Entry<String, int[]> entry = iterator.next(); String txIdStr = entry.getKey(); int[] outIds = entry.getValue(); byte[] txId = Hex.decodeHex(txIdStr); for (int outIndex : outIds) { txInputs = ArrayUtils.add(txInputs, new TXInput(txId, outIndex, null, pubKey)); } } TXOutput[] txOutput = {}; txOutput = ArrayUtils.add(txOutput, TXOutput.newTXOutput(amount, to)); if (accumulated > amount) { txOutput = ArrayUtils.add(txOutput, TXOutput.newTXOutput((accumulated - amount), from)); } Transaction newTx = new Transaction(null, txInputs, txOutput, System.currentTimeMillis()); newTx.setTxId(newTx.hash()); blockchain.signTransaction(newTx, senderWallet.getPrivateKey()); return newTx; } public Transaction trimmedCopy() { TXInput[] tmpTXInputs = new TXInput[this.getInputs().length]; for (int i = 0; i < this.getInputs().length; i++) { TXInput txInput = this.getInputs()[i]; tmpTXInputs[i] = new TXInput(txInput.getTxId(), txInput.getTxOutputIndex(), null, null); } TXOutput[] tmpTXOutputs = new TXOutput[this.getOutputs().length]; for (int i = 0; i < this.getOutputs().length; i++) { TXOutput txOutput = this.getOutputs()[i]; tmpTXOutputs[i] = new TXOutput(txOutput.getValue(), txOutput.getPubKeyHash()); } return new Transaction(this.getTxId(), tmpTXInputs, tmpTXOutputs, this.getCreateTime()); } public void sign(BCECPrivateKey privateKey, Map<String, Transaction> prevTxMap) throws Exception { if (this.isCoinbase()) { return; } for (TXInput txInput : this.getInputs()) { if (prevTxMap.get(Hex.encodeHexString(txInput.getTxId())) == null) { throw new RuntimeException(\"ERROR: Previous transaction is not correct\"); } } Transaction txCopy = this.trimmedCopy(); Security.addProvider(new BouncyCastleProvider()); Signature ecdsaSign = Signature.getInstance(\"SHA256withECDSA\", BouncyCastleProvider.PROVIDER_NAME); ecdsaSign.initSign(privateKey); for (int i = 0; i < txCopy.getInputs().length; i++) { TXInput txInputCopy = txCopy.getInputs()[i]; Transaction prevTx = prevTxMap.get(Hex.encodeHexString(txInputCopy.getTxId())); TXOutput prevTxOutput = prevTx.getOutputs()[txInputCopy.getTxOutputIndex()]; txInputCopy.setPubKey(prevTxOutput.getPubKeyHash()); txInputCopy.setSignature(null); txCopy.setTxId(txCopy.hash()); txInputCopy.setPubKey(null); ecdsaSign.update(txCopy.getTxId()); byte[] signature = ecdsaSign.sign(); this.getInputs()[i].setSignature(signature); } } public boolean verify(Map<String, Transaction> prevTxMap) throws Exception { if (this.isCoinbase()) { return true; } for (TXInput txInput : this.getInputs()) { if (prevTxMap.get(Hex.encodeHexString(txInput.getTxId())) == null) { throw new RuntimeException(\"ERROR: Previous transaction is not correct\"); } } Transaction txCopy = this.trimmedCopy(); Security.addProvider(new BouncyCastleProvider()); ECParameterSpec ecParameters = ECNamedCurveTable.getParameterSpec(\"secp256k1\"); KeyFactory keyFactory = KeyFactory.getInstance(\"ECDSA\", BouncyCastleProvider.PROVIDER_NAME); Signature ecdsaVerify = Signature.getInstance(\"SHA256withECDSA\", BouncyCastleProvider.PROVIDER_NAME); for (int i = 0; i < this.getInputs().length; i++) { TXInput txInput = this.getInputs()[i]; Transaction prevTx = prevTxMap.get(Hex.encodeHexString(txInput.getTxId())); TXOutput prevTxOutput = prevTx.getOutputs()[txInput.getTxOutputIndex()]; TXInput txInputCopy = txCopy.getInputs()[i]; txInputCopy.setSignature(null); txInputCopy.setPubKey(prevTxOutput.getPubKeyHash()); txCopy.setTxId(txCopy.hash()); txInputCopy.setPubKey(null); BigInteger x = new BigInteger(1, Arrays.copyOfRange(txInput.getPubKey(), 1, 33)); BigInteger y = new BigInteger(1, Arrays.copyOfRange(txInput.getPubKey(), 33, 65)); ECPoint ecPoint = ecParameters.getCurve().createPoint(x, y); ECPublicKeySpec keySpec = new ECPublicKeySpec(ecPoint, ecParameters); PublicKey publicKey = keyFactory.generatePublic(keySpec); ecdsaVerify.initVerify(publicKey); ecdsaVerify.update(txCopy.getTxId()); if (!ecdsaVerify.verify(txInput.getSignature())) { return false; } } return true; } }"},{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/util/SerializeUtils.java","file_content":"package one.wangwei.blockchain.util; import com.esotericsoftware.kryo.Kryo; import com.esotericsoftware.kryo.io.Input; import com.esotericsoftware.kryo.io.Output; public class SerializeUtils { public static Object deserialize(byte[] bytes) { Input input = new Input(bytes); Object obj = new Kryo().readClassAndObject(input); input.close(); return obj; } public static byte[] serialize(Object object) { Output output = new Output(4096, -1); new Kryo().writeClassAndObject(output, object); byte[] bytes = output.toBytes(); output.close(); return bytes; } }"}]}}
{"project_id":275,"chunk_id":0,"content":{"main_file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/transaction/TXInput.java","main_file_content":"package one.wangwei.blockchain.transaction; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import one.wangwei.blockchain.util.BtcAddressUtils; import java.util.Arrays; @Data @AllArgsConstructor @NoArgsConstructor public class TXInput { private byte[] txId; private int txOutputIndex; private byte[] signature; private byte[] pubKey; public boolean usesKey(byte[] pubKeyHash) { byte[] lockingHash = BtcAddressUtils.ripeMD160Hash(this.getPubKey()); return Arrays.equals(lockingHash, pubKeyHash); } }","dependencies":[{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/util/BtcAddressUtils.java","file_content":"package one.wangwei.blockchain.util; import org.apache.commons.codec.digest.DigestUtils; import org.bouncycastle.crypto.digests.RIPEMD160Digest; import org.bouncycastle.util.Arrays; public class BtcAddressUtils { public static byte[] doubleHash(byte[] data) { return DigestUtils.sha256(DigestUtils.sha256(data)); } public static byte[] ripeMD160Hash(byte[] pubKey) { byte[] shaHashedKey = DigestUtils.sha256(pubKey); RIPEMD160Digest ripemd160 = new RIPEMD160Digest(); ripemd160.update(shaHashedKey, 0, shaHashedKey.length); byte[] output = new byte[ripemd160.getDigestSize()]; ripemd160.doFinal(output, 0); return output; } public static byte[] checksum(byte[] payload) { return Arrays.copyOfRange(doubleHash(payload), 0, 4); } }"}]}}
{"project_id":275,"chunk_id":0,"content":{"main_file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/transaction/SpendableOutputResult.java","main_file_content":"package one.wangwei.blockchain.transaction; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import java.util.Map; @Data @AllArgsConstructor @NoArgsConstructor public class SpendableOutputResult { private int accumulated; private Map<String, int[]> unspentOuts; }","dependencies":[]}}
{"project_id":275,"chunk_id":0,"content":{"main_file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/transaction/Transaction.java","main_file_content":"package one.wangwei.blockchain.transaction; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import lombok.extern.slf4j.Slf4j; import one.wangwei.blockchain.block.Blockchain; import one.wangwei.blockchain.util.BtcAddressUtils; import one.wangwei.blockchain.util.SerializeUtils; import one.wangwei.blockchain.wallet.Wallet; import one.wangwei.blockchain.wallet.WalletUtils; import org.apache.commons.codec.binary.Hex; import org.apache.commons.codec.digest.DigestUtils; import org.apache.commons.lang3.ArrayUtils; import org.apache.commons.lang3.StringUtils; import org.bouncycastle.jcajce.provider.asymmetric.ec.BCECPrivateKey; import org.bouncycastle.jce.ECNamedCurveTable; import org.bouncycastle.jce.provider.BouncyCastleProvider; import org.bouncycastle.jce.spec.ECParameterSpec; import org.bouncycastle.jce.spec.ECPublicKeySpec; import org.bouncycastle.math.ec.ECPoint; import java.math.BigInteger; import java.security.KeyFactory; import java.security.PublicKey; import java.security.Security; import java.security.Signature; import java.util.Arrays; import java.util.Iterator; import java.util.Map; @Data @AllArgsConstructor @NoArgsConstructor @Slf4j public class Transaction { private static final int SUBSIDY = 10; private byte[] txId; private TXInput[] inputs; private TXOutput[] outputs; private long createTime; public byte[] hash() { byte[] serializeBytes = SerializeUtils.serialize(this); Transaction copyTx = (Transaction) SerializeUtils.deserialize(serializeBytes); copyTx.setTxId(new byte[]{}); return DigestUtils.sha256(SerializeUtils.serialize(copyTx)); } public static Transaction newCoinbaseTX(String to, String data) { if (StringUtils.isBlank(data)) { data = String.format(\"Reward to '%s'\", to); } TXInput txInput = new TXInput(new byte[]{}, -1, null, data.getBytes()); TXOutput txOutput = TXOutput.newTXOutput(SUBSIDY, to); Transaction tx = new Transaction(null, new TXInput[]{txInput}, new TXOutput[]{txOutput}, System.currentTimeMillis()); tx.setTxId(tx.hash()); return tx; } public boolean isCoinbase() { return this.getInputs().length == 1 && this.getInputs()[0].getTxId().length == 0 && this.getInputs()[0].getTxOutputIndex() == -1; } public static Transaction newUTXOTransaction(String from, String to, int amount, Blockchain blockchain) throws Exception { Wallet senderWallet = WalletUtils.getInstance().getWallet(from); byte[] pubKey = senderWallet.getPublicKey(); byte[] pubKeyHash = BtcAddressUtils.ripeMD160Hash(pubKey); SpendableOutputResult result = new UTXOSet(blockchain).findSpendableOutputs(pubKeyHash, amount); int accumulated = result.getAccumulated(); Map<String, int[]> unspentOuts = result.getUnspentOuts(); if (accumulated < amount) { log.error(\"ERROR: Not enough funds ! accumulated=\" + accumulated + \", amount=\" + amount); throw new RuntimeException(\"ERROR: Not enough funds ! \"); } Iterator<Map.Entry<String, int[]>> iterator = unspentOuts.entrySet().iterator(); TXInput[] txInputs = {}; while (iterator.hasNext()) { Map.Entry<String, int[]> entry = iterator.next(); String txIdStr = entry.getKey(); int[] outIds = entry.getValue(); byte[] txId = Hex.decodeHex(txIdStr); for (int outIndex : outIds) { txInputs = ArrayUtils.add(txInputs, new TXInput(txId, outIndex, null, pubKey)); } } TXOutput[] txOutput = {}; txOutput = ArrayUtils.add(txOutput, TXOutput.newTXOutput(amount, to)); if (accumulated > amount) { txOutput = ArrayUtils.add(txOutput, TXOutput.newTXOutput((accumulated - amount), from)); } Transaction newTx = new Transaction(null, txInputs, txOutput, System.currentTimeMillis()); newTx.setTxId(newTx.hash()); blockchain.signTransaction(newTx, senderWallet.getPrivateKey()); return newTx; } public Transaction trimmedCopy() { TXInput[] tmpTXInputs = new TXInput[this.getInputs().length]; for (int i = 0; i < this.getInputs().length; i++) { TXInput txInput = this.getInputs()[i]; tmpTXInputs[i] = new TXInput(txInput.getTxId(), txInput.getTxOutputIndex(), null, null); } TXOutput[] tmpTXOutputs = new TXOutput[this.getOutputs().length]; for (int i = 0; i < this.getOutputs().length; i++) { TXOutput txOutput = this.getOutputs()[i]; tmpTXOutputs[i] = new TXOutput(txOutput.getValue(), txOutput.getPubKeyHash()); } return new Transaction(this.getTxId(), tmpTXInputs, tmpTXOutputs, this.getCreateTime()); } public void sign(BCECPrivateKey privateKey, Map<String, Transaction> prevTxMap) throws Exception { if (this.isCoinbase()) { return; } for (TXInput txInput : this.getInputs()) { if (prevTxMap.get(Hex.encodeHexString(txInput.getTxId())) == null) { throw new RuntimeException(\"ERROR: Previous transaction is not correct\"); } } Transaction txCopy = this.trimmedCopy(); Security.addProvider(new BouncyCastleProvider()); Signature ecdsaSign = Signature.getInstance(\"SHA256withECDSA\", BouncyCastleProvider.PROVIDER_NAME); ecdsaSign.initSign(privateKey); for (int i = 0; i < txCopy.getInputs().length; i++) { TXInput txInputCopy = txCopy.getInputs()[i]; Transaction prevTx = prevTxMap.get(Hex.encodeHexString(txInputCopy.getTxId())); TXOutput prevTxOutput = prevTx.getOutputs()[txInputCopy.getTxOutputIndex()]; txInputCopy.setPubKey(prevTxOutput.getPubKeyHash()); txInputCopy.setSignature(null); txCopy.setTxId(txCopy.hash()); txInputCopy.setPubKey(null); ecdsaSign.update(txCopy.getTxId()); byte[] signature = ecdsaSign.sign(); this.getInputs()[i].setSignature(signature); } } public boolean verify(Map<String, Transaction> prevTxMap) throws Exception { if (this.isCoinbase()) { return true; } for (TXInput txInput : this.getInputs()) { if (prevTxMap.get(Hex.encodeHexString(txInput.getTxId())) == null) { throw new RuntimeException(\"ERROR: Previous transaction is not correct\"); } } Transaction txCopy = this.trimmedCopy(); Security.addProvider(new BouncyCastleProvider()); ECParameterSpec ecParameters = ECNamedCurveTable.getParameterSpec(\"secp256k1\"); KeyFactory keyFactory = KeyFactory.getInstance(\"ECDSA\", BouncyCastleProvider.PROVIDER_NAME); Signature ecdsaVerify = Signature.getInstance(\"SHA256withECDSA\", BouncyCastleProvider.PROVIDER_NAME); for (int i = 0; i < this.getInputs().length; i++) { TXInput txInput = this.getInputs()[i]; Transaction prevTx = prevTxMap.get(Hex.encodeHexString(txInput.getTxId())); TXOutput prevTxOutput = prevTx.getOutputs()[txInput.getTxOutputIndex()]; TXInput txInputCopy = txCopy.getInputs()[i]; txInputCopy.setSignature(null); txInputCopy.setPubKey(prevTxOutput.getPubKeyHash()); txCopy.setTxId(txCopy.hash()); txInputCopy.setPubKey(null); BigInteger x = new BigInteger(1, Arrays.copyOfRange(txInput.getPubKey(), 1, 33)); BigInteger y = new BigInteger(1, Arrays.copyOfRange(txInput.getPubKey(), 33, 65)); ECPoint ecPoint = ecParameters.getCurve().createPoint(x, y); ECPublicKeySpec keySpec = new ECPublicKeySpec(ecPoint, ecParameters); PublicKey publicKey = keyFactory.generatePublic(keySpec); ecdsaVerify.initVerify(publicKey); ecdsaVerify.update(txCopy.getTxId()); if (!ecdsaVerify.verify(txInput.getSignature())) { return false; } } return true; } }","dependencies":[{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/block/Blockchain.java","file_content":"package one.wangwei.blockchain.block; import com.google.common.collect.Maps; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import lombok.extern.slf4j.Slf4j; import one.wangwei.blockchain.store.RocksDBUtils; import one.wangwei.blockchain.transaction.TXInput; import one.wangwei.blockchain.transaction.TXOutput; import one.wangwei.blockchain.transaction.Transaction; import org.apache.commons.codec.binary.Hex; import org.apache.commons.lang3.ArrayUtils; import org.apache.commons.lang3.StringUtils; import org.bouncycastle.jcajce.provider.asymmetric.ec.BCECPrivateKey; import java.util.Arrays; import java.util.Map; @Data @AllArgsConstructor @NoArgsConstructor @Slf4j public class Blockchain { private String lastBlockHash; public static Blockchain initBlockchainFromDB() { String lastBlockHash = RocksDBUtils.getInstance().getLastBlockHash(); if (lastBlockHash == null) { throw new RuntimeException(\"ERROR: Fail to init blockchain from db. \"); } return new Blockchain(lastBlockHash); } public static Blockchain createBlockchain(String address) { String lastBlockHash = RocksDBUtils.getInstance().getLastBlockHash(); if (StringUtils.isBlank(lastBlockHash)) { String genesisCoinbaseData = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\"; Transaction coinbaseTX = Transaction.newCoinbaseTX(address, genesisCoinbaseData); Block genesisBlock = Block.newGenesisBlock(coinbaseTX); lastBlockHash = genesisBlock.getHash(); RocksDBUtils.getInstance().putBlock(genesisBlock); RocksDBUtils.getInstance().putLastBlockHash(lastBlockHash); } return new Blockchain(lastBlockHash); } public Block mineBlock(Transaction[] transactions) { for (Transaction tx : transactions) { if (!this.verifyTransactions(tx)) { log.error(\"ERROR: Fail to mine block ! Invalid transaction ! tx=\" + tx.toString()); throw new RuntimeException(\"ERROR: Fail to mine block ! Invalid transaction ! \"); } } String lastBlockHash = RocksDBUtils.getInstance().getLastBlockHash(); if (lastBlockHash == null) { throw new RuntimeException(\"ERROR: Fail to get last block hash ! \"); } Block block = Block.newBlock(lastBlockHash, transactions); this.addBlock(block); return block; } private void addBlock(Block block) { RocksDBUtils.getInstance().putLastBlockHash(block.getHash()); RocksDBUtils.getInstance().putBlock(block); this.lastBlockHash = block.getHash(); } public class BlockchainIterator { private String currentBlockHash; private BlockchainIterator(String currentBlockHash) { this.currentBlockHash = currentBlockHash; } public boolean hashNext() { if (StringUtils.isBlank(currentBlockHash)) { return false; } Block lastBlock = RocksDBUtils.getInstance().getBlock(currentBlockHash); if (lastBlock == null) { return false; } if (lastBlock.getPrevBlockHash().length() == 0) { return true; } return RocksDBUtils.getInstance().getBlock(lastBlock.getPrevBlockHash()) != null; } public Block next() { Block currentBlock = RocksDBUtils.getInstance().getBlock(currentBlockHash); if (currentBlock != null) { this.currentBlockHash = currentBlock.getPrevBlockHash(); return currentBlock; } return null; } } public BlockchainIterator getBlockchainIterator() { return new BlockchainIterator(lastBlockHash); } public Map<String, TXOutput[]> findAllUTXOs() { Map<String, int[]> allSpentTXOs = this.getAllSpentTXOs(); Map<String, TXOutput[]> allUTXOs = Maps.newHashMap(); for (BlockchainIterator blockchainIterator = this.getBlockchainIterator(); blockchainIterator.hashNext(); ) { Block block = blockchainIterator.next(); for (Transaction transaction : block.getTransactions()) { String txId = Hex.encodeHexString(transaction.getTxId()); int[] spentOutIndexArray = allSpentTXOs.get(txId); TXOutput[] txOutputs = transaction.getOutputs(); for (int outIndex = 0; outIndex < txOutputs.length; outIndex++) { if (spentOutIndexArray != null && ArrayUtils.contains(spentOutIndexArray, outIndex)) { continue; } TXOutput[] UTXOArray = allUTXOs.get(txId); if (UTXOArray == null) { UTXOArray = new TXOutput[]{txOutputs[outIndex]}; } else { UTXOArray = ArrayUtils.add(UTXOArray, txOutputs[outIndex]); } allUTXOs.put(txId, UTXOArray); } } } return allUTXOs; } private Map<String, int[]> getAllSpentTXOs() { Map<String, int[]> spentTXOs = Maps.newHashMap(); for (BlockchainIterator blockchainIterator = this.getBlockchainIterator(); blockchainIterator.hashNext(); ) { Block block = blockchainIterator.next(); for (Transaction transaction : block.getTransactions()) { if (transaction.isCoinbase()) { continue; } for (TXInput txInput : transaction.getInputs()) { String inTxId = Hex.encodeHexString(txInput.getTxId()); int[] spentOutIndexArray = spentTXOs.get(inTxId); if (spentOutIndexArray == null) { spentOutIndexArray = new int[]{txInput.getTxOutputIndex()}; } else { spentOutIndexArray = ArrayUtils.add(spentOutIndexArray, txInput.getTxOutputIndex()); } spentTXOs.put(inTxId, spentOutIndexArray); } } } return spentTXOs; } private Transaction findTransaction(byte[] txId) { for (BlockchainIterator iterator = this.getBlockchainIterator(); iterator.hashNext(); ) { Block block = iterator.next(); for (Transaction tx : block.getTransactions()) { if (Arrays.equals(tx.getTxId(), txId)) { return tx; } } } throw new RuntimeException(\"ERROR: Can not found tx by txId ! \"); } public void signTransaction(Transaction tx, BCECPrivateKey privateKey) throws Exception { Map<String, Transaction> prevTxMap = Maps.newHashMap(); for (TXInput txInput : tx.getInputs()) { Transaction prevTx = this.findTransaction(txInput.getTxId()); prevTxMap.put(Hex.encodeHexString(txInput.getTxId()), prevTx); } tx.sign(privateKey, prevTxMap); } private boolean verifyTransactions(Transaction tx) { if (tx.isCoinbase()) { return true; } Map<String, Transaction> prevTx = Maps.newHashMap(); for (TXInput txInput : tx.getInputs()) { Transaction transaction = this.findTransaction(txInput.getTxId()); prevTx.put(Hex.encodeHexString(txInput.getTxId()), transaction); } try { return tx.verify(prevTx); } catch (Exception e) { log.error(\"Fail to verify transaction ! transaction invalid ! \", e); throw new RuntimeException(\"Fail to verify transaction ! transaction invalid ! \", e); } } }"},{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/transaction/SpendableOutputResult.java","file_content":"package one.wangwei.blockchain.transaction; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import java.util.Map; @Data @AllArgsConstructor @NoArgsConstructor public class SpendableOutputResult { private int accumulated; private Map<String, int[]> unspentOuts; }"},{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/transaction/TXInput.java","file_content":"package one.wangwei.blockchain.transaction; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import one.wangwei.blockchain.util.BtcAddressUtils; import java.util.Arrays; @Data @AllArgsConstructor @NoArgsConstructor public class TXInput { private byte[] txId; private int txOutputIndex; private byte[] signature; private byte[] pubKey; public boolean usesKey(byte[] pubKeyHash) { byte[] lockingHash = BtcAddressUtils.ripeMD160Hash(this.getPubKey()); return Arrays.equals(lockingHash, pubKeyHash); } }"},{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/transaction/TXOutput.java","file_content":"package one.wangwei.blockchain.transaction; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import one.wangwei.blockchain.util.Base58Check; import java.util.Arrays; @Data @AllArgsConstructor @NoArgsConstructor public class TXOutput { private int value; private byte[] pubKeyHash; public static TXOutput newTXOutput(int value, String address) { byte[] versionedPayload = Base58Check.base58ToBytes(address); byte[] pubKeyHash = Arrays.copyOfRange(versionedPayload, 1, versionedPayload.length); return new TXOutput(value, pubKeyHash); } public boolean isLockedWithKey(byte[] pubKeyHash) { return Arrays.equals(this.getPubKeyHash(), pubKeyHash); } }"},{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/transaction/UTXOSet.java","file_content":"package one.wangwei.blockchain.transaction; import com.google.common.collect.Maps; import lombok.AllArgsConstructor; import lombok.NoArgsConstructor; import lombok.Synchronized; import lombok.extern.slf4j.Slf4j; import one.wangwei.blockchain.block.Block; import one.wangwei.blockchain.block.Blockchain; import one.wangwei.blockchain.store.RocksDBUtils; import one.wangwei.blockchain.util.SerializeUtils; import org.apache.commons.codec.binary.Hex; import org.apache.commons.lang3.ArrayUtils; import java.util.Map; @NoArgsConstructor @AllArgsConstructor @Slf4j public class UTXOSet { private Blockchain blockchain; public SpendableOutputResult findSpendableOutputs(byte[] pubKeyHash, int amount) { Map<String, int[]> unspentOuts = Maps.newHashMap(); int accumulated = 0; Map<String, byte[]> chainstateBucket = RocksDBUtils.getInstance().getChainstateBucket(); for (Map.Entry<String, byte[]> entry : chainstateBucket.entrySet()) { String txId = entry.getKey(); TXOutput[] txOutputs = (TXOutput[]) SerializeUtils.deserialize(entry.getValue()); for (int outId = 0; outId < txOutputs.length; outId++) { TXOutput txOutput = txOutputs[outId]; if (txOutput.isLockedWithKey(pubKeyHash) && accumulated < amount) { accumulated += txOutput.getValue(); int[] outIds = unspentOuts.get(txId); if (outIds == null) { outIds = new int[]{outId}; } else { outIds = ArrayUtils.add(outIds, outId); } unspentOuts.put(txId, outIds); if (accumulated >= amount) { break; } } } } return new SpendableOutputResult(accumulated, unspentOuts); } public TXOutput[] findUTXOs(byte[] pubKeyHash) { TXOutput[] utxos = {}; Map<String, byte[]> chainstateBucket = RocksDBUtils.getInstance().getChainstateBucket(); if (chainstateBucket.isEmpty()) { return utxos; } for (byte[] value : chainstateBucket.values()) { TXOutput[] txOutputs = (TXOutput[]) SerializeUtils.deserialize(value); for (TXOutput txOutput : txOutputs) { if (txOutput.isLockedWithKey(pubKeyHash)) { utxos = ArrayUtils.add(utxos, txOutput); } } } return utxos; } @Synchronized public void reIndex() { log.info(\"Start to reIndex UTXO set !\"); RocksDBUtils.getInstance().cleanChainStateBucket(); Map<String, TXOutput[]> allUTXOs = blockchain.findAllUTXOs(); for (Map.Entry<String, TXOutput[]> entry : allUTXOs.entrySet()) { RocksDBUtils.getInstance().putUTXOs(entry.getKey(), entry.getValue()); } log.info(\"ReIndex UTXO set finished ! \"); } @Synchronized public void update(Block tipBlock) { if (tipBlock == null) { log.error(\"Fail to update UTXO set ! tipBlock is null !\"); throw new RuntimeException(\"Fail to update UTXO set ! \"); } for (Transaction transaction : tipBlock.getTransactions()) { if (!transaction.isCoinbase()) { for (TXInput txInput : transaction.getInputs()) { TXOutput[] remainderUTXOs = {}; String txId = Hex.encodeHexString(txInput.getTxId()); TXOutput[] txOutputs = RocksDBUtils.getInstance().getUTXOs(txId); if (txOutputs == null) { continue; } for (int outIndex = 0; outIndex < txOutputs.length; outIndex++) { if (outIndex != txInput.getTxOutputIndex()) { remainderUTXOs = ArrayUtils.add(remainderUTXOs, txOutputs[outIndex]); } } if (remainderUTXOs.length == 0) { RocksDBUtils.getInstance().deleteUTXOs(txId); } else { RocksDBUtils.getInstance().putUTXOs(txId, remainderUTXOs); } } } TXOutput[] txOutputs = transaction.getOutputs(); String txId = Hex.encodeHexString(transaction.getTxId()); RocksDBUtils.getInstance().putUTXOs(txId, txOutputs); } } }"},{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/util/BtcAddressUtils.java","file_content":"package one.wangwei.blockchain.util; import org.apache.commons.codec.digest.DigestUtils; import org.bouncycastle.crypto.digests.RIPEMD160Digest; import org.bouncycastle.util.Arrays; public class BtcAddressUtils { public static byte[] doubleHash(byte[] data) { return DigestUtils.sha256(DigestUtils.sha256(data)); } public static byte[] ripeMD160Hash(byte[] pubKey) { byte[] shaHashedKey = DigestUtils.sha256(pubKey); RIPEMD160Digest ripemd160 = new RIPEMD160Digest(); ripemd160.update(shaHashedKey, 0, shaHashedKey.length); byte[] output = new byte[ripemd160.getDigestSize()]; ripemd160.doFinal(output, 0); return output; } public static byte[] checksum(byte[] payload) { return Arrays.copyOfRange(doubleHash(payload), 0, 4); } }"},{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/util/SerializeUtils.java","file_content":"package one.wangwei.blockchain.util; import com.esotericsoftware.kryo.Kryo; import com.esotericsoftware.kryo.io.Input; import com.esotericsoftware.kryo.io.Output; public class SerializeUtils { public static Object deserialize(byte[] bytes) { Input input = new Input(bytes); Object obj = new Kryo().readClassAndObject(input); input.close(); return obj; } public static byte[] serialize(Object object) { Output output = new Output(4096, -1); new Kryo().writeClassAndObject(output, object); byte[] bytes = output.toBytes(); output.close(); return bytes; } }"}]}}
{"project_id":275,"chunk_id":1,"content":{"main_file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/transaction/Transaction.java","main_file_content":"package one.wangwei.blockchain.transaction; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import lombok.extern.slf4j.Slf4j; import one.wangwei.blockchain.block.Blockchain; import one.wangwei.blockchain.util.BtcAddressUtils; import one.wangwei.blockchain.util.SerializeUtils; import one.wangwei.blockchain.wallet.Wallet; import one.wangwei.blockchain.wallet.WalletUtils; import org.apache.commons.codec.binary.Hex; import org.apache.commons.codec.digest.DigestUtils; import org.apache.commons.lang3.ArrayUtils; import org.apache.commons.lang3.StringUtils; import org.bouncycastle.jcajce.provider.asymmetric.ec.BCECPrivateKey; import org.bouncycastle.jce.ECNamedCurveTable; import org.bouncycastle.jce.provider.BouncyCastleProvider; import org.bouncycastle.jce.spec.ECParameterSpec; import org.bouncycastle.jce.spec.ECPublicKeySpec; import org.bouncycastle.math.ec.ECPoint; import java.math.BigInteger; import java.security.KeyFactory; import java.security.PublicKey; import java.security.Security; import java.security.Signature; import java.util.Arrays; import java.util.Iterator; import java.util.Map; @Data @AllArgsConstructor @NoArgsConstructor @Slf4j public class Transaction { private static final int SUBSIDY = 10; private byte[] txId; private TXInput[] inputs; private TXOutput[] outputs; private long createTime; public byte[] hash() { byte[] serializeBytes = SerializeUtils.serialize(this); Transaction copyTx = (Transaction) SerializeUtils.deserialize(serializeBytes); copyTx.setTxId(new byte[]{}); return DigestUtils.sha256(SerializeUtils.serialize(copyTx)); } public static Transaction newCoinbaseTX(String to, String data) { if (StringUtils.isBlank(data)) { data = String.format(\"Reward to '%s'\", to); } TXInput txInput = new TXInput(new byte[]{}, -1, null, data.getBytes()); TXOutput txOutput = TXOutput.newTXOutput(SUBSIDY, to); Transaction tx = new Transaction(null, new TXInput[]{txInput}, new TXOutput[]{txOutput}, System.currentTimeMillis()); tx.setTxId(tx.hash()); return tx; } public boolean isCoinbase() { return this.getInputs().length == 1 && this.getInputs()[0].getTxId().length == 0 && this.getInputs()[0].getTxOutputIndex() == -1; } public static Transaction newUTXOTransaction(String from, String to, int amount, Blockchain blockchain) throws Exception { Wallet senderWallet = WalletUtils.getInstance().getWallet(from); byte[] pubKey = senderWallet.getPublicKey(); byte[] pubKeyHash = BtcAddressUtils.ripeMD160Hash(pubKey); SpendableOutputResult result = new UTXOSet(blockchain).findSpendableOutputs(pubKeyHash, amount); int accumulated = result.getAccumulated(); Map<String, int[]> unspentOuts = result.getUnspentOuts(); if (accumulated < amount) { log.error(\"ERROR: Not enough funds ! accumulated=\" + accumulated + \", amount=\" + amount); throw new RuntimeException(\"ERROR: Not enough funds ! \"); } Iterator<Map.Entry<String, int[]>> iterator = unspentOuts.entrySet().iterator(); TXInput[] txInputs = {}; while (iterator.hasNext()) { Map.Entry<String, int[]> entry = iterator.next(); String txIdStr = entry.getKey(); int[] outIds = entry.getValue(); byte[] txId = Hex.decodeHex(txIdStr); for (int outIndex : outIds) { txInputs = ArrayUtils.add(txInputs, new TXInput(txId, outIndex, null, pubKey)); } } TXOutput[] txOutput = {}; txOutput = ArrayUtils.add(txOutput, TXOutput.newTXOutput(amount, to)); if (accumulated > amount) { txOutput = ArrayUtils.add(txOutput, TXOutput.newTXOutput((accumulated - amount), from)); } Transaction newTx = new Transaction(null, txInputs, txOutput, System.currentTimeMillis()); newTx.setTxId(newTx.hash()); blockchain.signTransaction(newTx, senderWallet.getPrivateKey()); return newTx; } public Transaction trimmedCopy() { TXInput[] tmpTXInputs = new TXInput[this.getInputs().length]; for (int i = 0; i < this.getInputs().length; i++) { TXInput txInput = this.getInputs()[i]; tmpTXInputs[i] = new TXInput(txInput.getTxId(), txInput.getTxOutputIndex(), null, null); } TXOutput[] tmpTXOutputs = new TXOutput[this.getOutputs().length]; for (int i = 0; i < this.getOutputs().length; i++) { TXOutput txOutput = this.getOutputs()[i]; tmpTXOutputs[i] = new TXOutput(txOutput.getValue(), txOutput.getPubKeyHash()); } return new Transaction(this.getTxId(), tmpTXInputs, tmpTXOutputs, this.getCreateTime()); } public void sign(BCECPrivateKey privateKey, Map<String, Transaction> prevTxMap) throws Exception { if (this.isCoinbase()) { return; } for (TXInput txInput : this.getInputs()) { if (prevTxMap.get(Hex.encodeHexString(txInput.getTxId())) == null) { throw new RuntimeException(\"ERROR: Previous transaction is not correct\"); } } Transaction txCopy = this.trimmedCopy(); Security.addProvider(new BouncyCastleProvider()); Signature ecdsaSign = Signature.getInstance(\"SHA256withECDSA\", BouncyCastleProvider.PROVIDER_NAME); ecdsaSign.initSign(privateKey); for (int i = 0; i < txCopy.getInputs().length; i++) { TXInput txInputCopy = txCopy.getInputs()[i]; Transaction prevTx = prevTxMap.get(Hex.encodeHexString(txInputCopy.getTxId())); TXOutput prevTxOutput = prevTx.getOutputs()[txInputCopy.getTxOutputIndex()]; txInputCopy.setPubKey(prevTxOutput.getPubKeyHash()); txInputCopy.setSignature(null); txCopy.setTxId(txCopy.hash()); txInputCopy.setPubKey(null); ecdsaSign.update(txCopy.getTxId()); byte[] signature = ecdsaSign.sign(); this.getInputs()[i].setSignature(signature); } } public boolean verify(Map<String, Transaction> prevTxMap) throws Exception { if (this.isCoinbase()) { return true; } for (TXInput txInput : this.getInputs()) { if (prevTxMap.get(Hex.encodeHexString(txInput.getTxId())) == null) { throw new RuntimeException(\"ERROR: Previous transaction is not correct\"); } } Transaction txCopy = this.trimmedCopy(); Security.addProvider(new BouncyCastleProvider()); ECParameterSpec ecParameters = ECNamedCurveTable.getParameterSpec(\"secp256k1\"); KeyFactory keyFactory = KeyFactory.getInstance(\"ECDSA\", BouncyCastleProvider.PROVIDER_NAME); Signature ecdsaVerify = Signature.getInstance(\"SHA256withECDSA\", BouncyCastleProvider.PROVIDER_NAME); for (int i = 0; i < this.getInputs().length; i++) { TXInput txInput = this.getInputs()[i]; Transaction prevTx = prevTxMap.get(Hex.encodeHexString(txInput.getTxId())); TXOutput prevTxOutput = prevTx.getOutputs()[txInput.getTxOutputIndex()]; TXInput txInputCopy = txCopy.getInputs()[i]; txInputCopy.setSignature(null); txInputCopy.setPubKey(prevTxOutput.getPubKeyHash()); txCopy.setTxId(txCopy.hash()); txInputCopy.setPubKey(null); BigInteger x = new BigInteger(1, Arrays.copyOfRange(txInput.getPubKey(), 1, 33)); BigInteger y = new BigInteger(1, Arrays.copyOfRange(txInput.getPubKey(), 33, 65)); ECPoint ecPoint = ecParameters.getCurve().createPoint(x, y); ECPublicKeySpec keySpec = new ECPublicKeySpec(ecPoint, ecParameters); PublicKey publicKey = keyFactory.generatePublic(keySpec); ecdsaVerify.initVerify(publicKey); ecdsaVerify.update(txCopy.getTxId()); if (!ecdsaVerify.verify(txInput.getSignature())) { return false; } } return true; } }","dependencies":[{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/wallet/Wallet.java","file_content":"package one.wangwei.blockchain.wallet; import lombok.AllArgsConstructor; import lombok.Data; import lombok.extern.slf4j.Slf4j; import one.wangwei.blockchain.util.Base58Check; import one.wangwei.blockchain.util.BtcAddressUtils; import org.bouncycastle.jcajce.provider.asymmetric.ec.BCECPrivateKey; import org.bouncycastle.jcajce.provider.asymmetric.ec.BCECPublicKey; import org.bouncycastle.jce.ECNamedCurveTable; import org.bouncycastle.jce.provider.BouncyCastleProvider; import org.bouncycastle.jce.spec.ECParameterSpec; import java.io.ByteArrayOutputStream; import java.io.IOException; import java.io.Serializable; import java.security.KeyPair; import java.security.KeyPairGenerator; import java.security.SecureRandom; import java.security.Security; @Data @AllArgsConstructor @Slf4j public class Wallet implements Serializable { private static final long serialVersionUID = 166249065006236265L; private static final int ADDRESS_CHECKSUM_LEN = 4; private BCECPrivateKey privateKey; private byte[] publicKey; public Wallet() { initWallet(); } private void initWallet() { try { KeyPair keyPair = newECKeyPair(); BCECPrivateKey privateKey = (BCECPrivateKey) keyPair.getPrivate(); BCECPublicKey publicKey = (BCECPublicKey) keyPair.getPublic(); byte[] publicKeyBytes = publicKey.getQ().getEncoded(false); this.setPrivateKey(privateKey); this.setPublicKey(publicKeyBytes); } catch (Exception e) { log.error(\"Fail to init wallet ! \", e); throw new RuntimeException(\"Fail to init wallet ! \", e); } } private KeyPair newECKeyPair() throws Exception { Security.addProvider(new BouncyCastleProvider()); KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"ECDSA\", BouncyCastleProvider.PROVIDER_NAME); ECParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec(\"secp256k1\"); keyPairGenerator.initialize(ecSpec, new SecureRandom()); return keyPairGenerator.generateKeyPair(); } public String getAddress() { try { byte[] ripemdHashedKey = BtcAddressUtils.ripeMD160Hash(this.getPublicKey()); ByteArrayOutputStream addrStream = new ByteArrayOutputStream(); addrStream.write((byte) 0); addrStream.write(ripemdHashedKey); byte[] versionedPayload = addrStream.toByteArray(); byte[] checksum = BtcAddressUtils.checksum(versionedPayload); addrStream.write(checksum); byte[] binaryAddress = addrStream.toByteArray(); return Base58Check.rawBytesToBase58(binaryAddress); } catch (IOException e) { e.printStackTrace(); } throw new RuntimeException(\"Fail to get wallet address ! \"); } }"},{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/wallet/WalletUtils.java","file_content":"package one.wangwei.blockchain.wallet; import com.google.common.collect.Maps; import lombok.AllArgsConstructor; import lombok.Cleanup; import lombok.Data; import lombok.NoArgsConstructor; import lombok.extern.slf4j.Slf4j; import one.wangwei.blockchain.util.Base58Check; import javax.crypto.Cipher; import javax.crypto.CipherInputStream; import javax.crypto.CipherOutputStream; import javax.crypto.SealedObject; import javax.crypto.spec.SecretKeySpec; import java.io.*; import java.util.Map; import java.util.Set; @Slf4j public class WalletUtils { private volatile static WalletUtils instance; public static WalletUtils getInstance() { if (instance == null) { synchronized (WalletUtils.class) { if (instance == null) { instance = new WalletUtils(); } } } return instance; } private WalletUtils() { initWalletFile(); } private final static String WALLET_FILE = \"wallet.dat\"; private static final String ALGORITHM = \"AES\"; private static final byte[] CIPHER_TEXT = \"2oF@5sC%DNf32y!TmiZi!tG9W5rLaniD\".getBytes(); private void initWalletFile() { File file = new File(WALLET_FILE); if (!file.exists()) { this.saveToDisk(new Wallets()); } else { this.loadFromDisk(); } } public Set<String> getAddresses() { Wallets wallets = this.loadFromDisk(); return wallets.getAddresses(); } public Wallet getWallet(String address) { Wallets wallets = this.loadFromDisk(); return wallets.getWallet(address); } public Wallet createWallet() { Wallet wallet = new Wallet(); Wallets wallets = this.loadFromDisk(); wallets.addWallet(wallet); this.saveToDisk(wallets); return wallet; } private void saveToDisk(Wallets wallets) { try { if (wallets == null) { log.error(\"Fail to save wallet to file ! wallets is null \"); throw new Exception(\"ERROR: Fail to save wallet to file !\"); } SecretKeySpec sks = new SecretKeySpec(CIPHER_TEXT, ALGORITHM); Cipher cipher = Cipher.getInstance(ALGORITHM); cipher.init(Cipher.ENCRYPT_MODE, sks); SealedObject sealedObject = new SealedObject(wallets, cipher); @Cleanup CipherOutputStream cos = new CipherOutputStream( new BufferedOutputStream(new FileOutputStream(WALLET_FILE)), cipher); @Cleanup ObjectOutputStream outputStream = new ObjectOutputStream(cos); outputStream.writeObject(sealedObject); } catch (Exception e) { log.error(\"Fail to save wallet to disk !\", e); throw new RuntimeException(\"Fail to save wallet to disk !\"); } } private Wallets loadFromDisk() { try { SecretKeySpec sks = new SecretKeySpec(CIPHER_TEXT, ALGORITHM); Cipher cipher = Cipher.getInstance(ALGORITHM); cipher.init(Cipher.DECRYPT_MODE, sks); @Cleanup CipherInputStream cipherInputStream = new CipherInputStream( new BufferedInputStream(new FileInputStream(WALLET_FILE)), cipher); @Cleanup ObjectInputStream inputStream = new ObjectInputStream(cipherInputStream); SealedObject sealedObject = (SealedObject) inputStream.readObject(); return (Wallets) sealedObject.getObject(cipher); } catch (Exception e) { log.error(\"Fail to load wallet from disk ! \", e); throw new RuntimeException(\"Fail to load wallet from disk ! \"); } } @Data @NoArgsConstructor @AllArgsConstructor public static class Wallets implements Serializable { private static final long serialVersionUID = -2542070981569243131L; private Map<String, Wallet> walletMap = Maps.newHashMap(); private void addWallet(Wallet wallet) { try { this.walletMap.put(wallet.getAddress(), wallet); } catch (Exception e) { log.error(\"Fail to add wallet ! \", e); throw new RuntimeException(\"Fail to add wallet !\"); } } Set<String> getAddresses() { if (walletMap == null) { log.error(\"Fail to get address ! walletMap is null ! \"); throw new RuntimeException(\"Fail to get addresses ! \"); } return walletMap.keySet(); } Wallet getWallet(String address) { try { Base58Check.base58ToBytes(address); } catch (Exception e) { log.error(\"Fail to get wallet ! address invalid ! address=\" + address, e); throw new RuntimeException(\"Fail to get wallet ! \"); } Wallet wallet = walletMap.get(address); if (wallet == null) { log.error(\"Fail to get wallet ! wallet don`t exist ! address=\" + address); throw new RuntimeException(\"Fail to get wallet ! \"); } return wallet; } } }"}]}}
{"project_id":275,"chunk_id":0,"content":{"main_file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/pow/PowResult.java","main_file_content":"package one.wangwei.blockchain.pow; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; @Data @AllArgsConstructor @NoArgsConstructor public class PowResult { private long nonce; private String hash; }","dependencies":[]}}
{"project_id":275,"chunk_id":0,"content":{"main_file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/pow/ProofOfWork.java","main_file_content":"package one.wangwei.blockchain.pow; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import lombok.extern.slf4j.Slf4j; import one.wangwei.blockchain.block.Block; import one.wangwei.blockchain.util.ByteUtils; import org.apache.commons.codec.digest.DigestUtils; import org.apache.commons.lang3.StringUtils; import java.math.BigInteger; @Data @AllArgsConstructor @NoArgsConstructor @Slf4j public class ProofOfWork { public static final int TARGET_BITS = 16; private Block block; private BigInteger target; public static ProofOfWork newProofOfWork(Block block) { BigInteger targetValue = BigInteger.valueOf(1).shiftLeft((256 - TARGET_BITS)); return new ProofOfWork(block, targetValue); } public PowResult run() { long nonce = 0; String shaHex = \"\"; long startTime = System.currentTimeMillis(); while (nonce < Long.MAX_VALUE) { log.info(\"POW running, nonce=\" + nonce); byte[] data = this.prepareData(nonce); shaHex = DigestUtils.sha256Hex(data); if (new BigInteger(shaHex, 16).compareTo(this.target) == -1) { log.info(\"Elapsed Time: {} seconds \\n\", new Object[]{(float) (System.currentTimeMillis() - startTime) / 1000}); log.info(\"correct hash Hex: {} \\n\", new Object[]{shaHex}); break; } else { nonce++; } } return new PowResult(nonce, shaHex); } public boolean validate() { byte[] data = this.prepareData(this.getBlock().getNonce()); return new BigInteger(DigestUtils.sha256Hex(data), 16).compareTo(this.target) == -1; } private byte[] prepareData(long nonce) { byte[] prevBlockHashBytes = {}; if (StringUtils.isNoneBlank(this.getBlock().getPrevBlockHash())) { prevBlockHashBytes = new BigInteger(this.getBlock().getPrevBlockHash(), 16).toByteArray(); } return ByteUtils.merge( prevBlockHashBytes, this.getBlock().hashTransaction(), ByteUtils.toBytes(this.getBlock().getTimeStamp()), ByteUtils.toBytes(TARGET_BITS), ByteUtils.toBytes(nonce) ); } }","dependencies":[{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/block/Block.java","file_content":"package one.wangwei.blockchain.block; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import lombok.ToString; import one.wangwei.blockchain.pow.PowResult; import one.wangwei.blockchain.pow.ProofOfWork; import one.wangwei.blockchain.transaction.MerkleTree; import one.wangwei.blockchain.transaction.Transaction; import one.wangwei.blockchain.util.ByteUtils; import java.time.Instant; @Data @AllArgsConstructor @NoArgsConstructor @ToString public class Block { private String hash; private String prevBlockHash; private Transaction[] transactions; private long timeStamp; private long nonce; public static Block newGenesisBlock(Transaction coinbase) { return Block.newBlock(ByteUtils.ZERO_HASH, new Transaction[]{coinbase}); } public static Block newBlock(String previousHash, Transaction[] transactions) { Block block = new Block(\"\", previousHash, transactions, Instant.now().getEpochSecond(), 0); ProofOfWork pow = ProofOfWork.newProofOfWork(block); PowResult powResult = pow.run(); block.setHash(powResult.getHash()); block.setNonce(powResult.getNonce()); return block; } public byte[] hashTransaction() { byte[][] txIdArrays = new byte[this.getTransactions().length][]; for (int i = 0; i < this.getTransactions().length; i++) { txIdArrays[i] = this.getTransactions()[i].hash(); } return new MerkleTree(txIdArrays).getRoot().getHash(); } }"},{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/pow/PowResult.java","file_content":"package one.wangwei.blockchain.pow; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; @Data @AllArgsConstructor @NoArgsConstructor public class PowResult { private long nonce; private String hash; }"},{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/util/ByteUtils.java","file_content":"package one.wangwei.blockchain.util; import org.apache.commons.codec.binary.Hex; import org.apache.commons.lang3.ArrayUtils; import java.nio.ByteBuffer; import java.util.Arrays; import java.util.stream.Stream; public class ByteUtils { public static final byte[] EMPTY_ARRAY = new byte[0]; public static final byte[] EMPTY_BYTES = new byte[32]; public static final String ZERO_HASH = Hex.encodeHexString(EMPTY_BYTES); public static byte[] merge(byte[]... bytes) { Stream<Byte> stream = Stream.of(); for (byte[] b: bytes) { stream = Stream.concat(stream, Arrays.stream(ArrayUtils.toObject(b))); } return ArrayUtils.toPrimitive(stream.toArray(Byte[]::new)); } public static byte[] toBytes(long val) { return ByteBuffer.allocate(Long.BYTES).putLong(val).array(); } }"}]}}
{"project_id":275,"chunk_id":0,"content":{"main_file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/util/ByteUtils.java","main_file_content":"package one.wangwei.blockchain.util; import org.apache.commons.codec.binary.Hex; import org.apache.commons.lang3.ArrayUtils; import java.nio.ByteBuffer; import java.util.Arrays; import java.util.stream.Stream; public class ByteUtils { public static final byte[] EMPTY_ARRAY = new byte[0]; public static final byte[] EMPTY_BYTES = new byte[32]; public static final String ZERO_HASH = Hex.encodeHexString(EMPTY_BYTES); public static byte[] merge(byte[]... bytes) { Stream<Byte> stream = Stream.of(); for (byte[] b: bytes) { stream = Stream.concat(stream, Arrays.stream(ArrayUtils.toObject(b))); } return ArrayUtils.toPrimitive(stream.toArray(Byte[]::new)); } public static byte[] toBytes(long val) { return ByteBuffer.allocate(Long.BYTES).putLong(val).array(); } }","dependencies":[]}}
{"project_id":275,"chunk_id":0,"content":{"main_file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/util/Base58Check.java","main_file_content":"package one.wangwei.blockchain.util; import java.io.ByteArrayOutputStream; import java.io.IOException; import java.math.BigInteger; import java.util.Arrays; public final class Base58Check { public static String bytesToBase58(byte[] data) { return rawBytesToBase58(addCheckHash(data)); } public static String rawBytesToBase58(byte[] data) { StringBuilder sb = new StringBuilder(); BigInteger num = new BigInteger(1, data); while (num.signum() != 0) { BigInteger[] quotrem = num.divideAndRemainder(ALPHABET_SIZE); sb.append(ALPHABET.charAt(quotrem[1].intValue())); num = quotrem[0]; } for (int i = 0; i < data.length && data[i] == 0; i++) { sb.append(ALPHABET.charAt(0)); } return sb.reverse().toString(); } static byte[] addCheckHash(byte[] data) { try { byte[] hash = Arrays.copyOf(BtcAddressUtils.doubleHash(data), 4); ByteArrayOutputStream buf = new ByteArrayOutputStream(); buf.write(data); buf.write(hash); return buf.toByteArray(); } catch (IOException e) { throw new AssertionError(e); } } public static byte[] base58ToBytes(String s) { byte[] concat = base58ToRawBytes(s); byte[] data = Arrays.copyOf(concat, concat.length - 4); byte[] hash = Arrays.copyOfRange(concat, concat.length - 4, concat.length); byte[] rehash = Arrays.copyOf(BtcAddressUtils.doubleHash(data), 4); if (!Arrays.equals(rehash, hash)) { throw new IllegalArgumentException(\"Checksum mismatch\"); } return data; } static byte[] base58ToRawBytes(String s) { BigInteger num = BigInteger.ZERO; for (int i = 0; i < s.length(); i++) { num = num.multiply(ALPHABET_SIZE); int digit = ALPHABET.indexOf(s.charAt(i)); if (digit == -1) { throw new IllegalArgumentException(\"Invalid character for Base58Check\"); } num = num.add(BigInteger.valueOf(digit)); } byte[] b = num.toByteArray(); if (b[0] == 0) { b = Arrays.copyOfRange(b, 1, b.length); } try { ByteArrayOutputStream buf = new ByteArrayOutputStream(); for (int i = 0; i < s.length() && s.charAt(i) == ALPHABET.charAt(0); i++) { buf.write(0); } buf.write(b); return buf.toByteArray(); } catch (IOException e) { throw new AssertionError(e); } } private static final String ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"; private static final BigInteger ALPHABET_SIZE = BigInteger.valueOf(ALPHABET.length()); private Base58Check() { } }","dependencies":[{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/util/BtcAddressUtils.java","file_content":"package one.wangwei.blockchain.util; import org.apache.commons.codec.digest.DigestUtils; import org.bouncycastle.crypto.digests.RIPEMD160Digest; import org.bouncycastle.util.Arrays; public class BtcAddressUtils { public static byte[] doubleHash(byte[] data) { return DigestUtils.sha256(DigestUtils.sha256(data)); } public static byte[] ripeMD160Hash(byte[] pubKey) { byte[] shaHashedKey = DigestUtils.sha256(pubKey); RIPEMD160Digest ripemd160 = new RIPEMD160Digest(); ripemd160.update(shaHashedKey, 0, shaHashedKey.length); byte[] output = new byte[ripemd160.getDigestSize()]; ripemd160.doFinal(output, 0); return output; } public static byte[] checksum(byte[] payload) { return Arrays.copyOfRange(doubleHash(payload), 0, 4); } }"}]}}
{"project_id":275,"chunk_id":0,"content":{"main_file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/util/SerializeUtils.java","main_file_content":"package one.wangwei.blockchain.util; import com.esotericsoftware.kryo.Kryo; import com.esotericsoftware.kryo.io.Input; import com.esotericsoftware.kryo.io.Output; public class SerializeUtils { public static Object deserialize(byte[] bytes) { Input input = new Input(bytes); Object obj = new Kryo().readClassAndObject(input); input.close(); return obj; } public static byte[] serialize(Object object) { Output output = new Output(4096, -1); new Kryo().writeClassAndObject(output, object); byte[] bytes = output.toBytes(); output.close(); return bytes; } }","dependencies":[]}}
{"project_id":275,"chunk_id":0,"content":{"main_file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/util/BtcAddressUtils.java","main_file_content":"package one.wangwei.blockchain.util; import org.apache.commons.codec.digest.DigestUtils; import org.bouncycastle.crypto.digests.RIPEMD160Digest; import org.bouncycastle.util.Arrays; public class BtcAddressUtils { public static byte[] doubleHash(byte[] data) { return DigestUtils.sha256(DigestUtils.sha256(data)); } public static byte[] ripeMD160Hash(byte[] pubKey) { byte[] shaHashedKey = DigestUtils.sha256(pubKey); RIPEMD160Digest ripemd160 = new RIPEMD160Digest(); ripemd160.update(shaHashedKey, 0, shaHashedKey.length); byte[] output = new byte[ripemd160.getDigestSize()]; ripemd160.doFinal(output, 0); return output; } public static byte[] checksum(byte[] payload) { return Arrays.copyOfRange(doubleHash(payload), 0, 4); } }","dependencies":[]}}
{"project_id":275,"chunk_id":0,"content":{"main_file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/cli/CLI.java","main_file_content":"package one.wangwei.blockchain.cli; import lombok.extern.slf4j.Slf4j; import one.wangwei.blockchain.block.Block; import one.wangwei.blockchain.block.Blockchain; import one.wangwei.blockchain.pow.ProofOfWork; import one.wangwei.blockchain.store.RocksDBUtils; import one.wangwei.blockchain.transaction.TXOutput; import one.wangwei.blockchain.transaction.Transaction; import one.wangwei.blockchain.transaction.UTXOSet; import one.wangwei.blockchain.util.Base58Check; import one.wangwei.blockchain.wallet.Wallet; import one.wangwei.blockchain.wallet.WalletUtils; import org.apache.commons.cli.*; import org.apache.commons.lang3.StringUtils; import org.apache.commons.lang3.math.NumberUtils; import java.util.Arrays; import java.util.Set; @Slf4j public class CLI { private String[] args; private Options options = new Options(); public CLI(String[] args) { this.args = args; Option helpCmd = Option.builder(\"h\").desc(\"show help\").build(); options.addOption(helpCmd); Option address = Option.builder(\"address\").hasArg(true).desc(\"Source wallet address\").build(); Option sendFrom = Option.builder(\"from\").hasArg(true).desc(\"Source wallet address\").build(); Option sendTo = Option.builder(\"to\").hasArg(true).desc(\"Destination wallet address\").build(); Option sendAmount = Option.builder(\"amount\").hasArg(true).desc(\"Amount to send\").build(); options.addOption(address); options.addOption(sendFrom); options.addOption(sendTo); options.addOption(sendAmount); } public void parse() { this.validateArgs(args); try { CommandLineParser parser = new DefaultParser(); CommandLine cmd = parser.parse(options, args); switch (args[0]) { case \"createblockchain\": String createblockchainAddress = cmd.getOptionValue(\"address\"); if (StringUtils.isBlank(createblockchainAddress)) { help(); } this.createBlockchain(createblockchainAddress); break; case \"getbalance\": String getBalanceAddress = cmd.getOptionValue(\"address\"); if (StringUtils.isBlank(getBalanceAddress)) { help(); } this.getBalance(getBalanceAddress); break; case \"send\": String sendFrom = cmd.getOptionValue(\"from\"); String sendTo = cmd.getOptionValue(\"to\"); String sendAmount = cmd.getOptionValue(\"amount\"); if (StringUtils.isBlank(sendFrom) || StringUtils.isBlank(sendTo) || !NumberUtils.isDigits(sendAmount)) { help(); } this.send(sendFrom, sendTo, Integer.valueOf(sendAmount)); break; case \"createwallet\": this.createWallet(); break; case \"printaddresses\": this.printAddresses(); break; case \"printchain\": this.printChain(); break; case \"h\": this.help(); break; default: this.help(); } } catch (Exception e) { log.error(\"Fail to parse cli command ! \", e); } finally { RocksDBUtils.getInstance().closeDB(); } } private void validateArgs(String[] args) { if (args == null || args.length < 1) { help(); } } private void createBlockchain(String address) { Blockchain blockchain = Blockchain.createBlockchain(address); UTXOSet utxoSet = new UTXOSet(blockchain); utxoSet.reIndex(); log.info(\"Done ! \"); } private void createWallet() throws Exception { Wallet wallet = WalletUtils.getInstance().createWallet(); log.info(\"wallet address : \" + wallet.getAddress()); } private void printAddresses() { Set<String> addresses = WalletUtils.getInstance().getAddresses(); if (addresses == null || addresses.isEmpty()) { log.info(\"There isn't address\"); return; } for (String address : addresses) { log.info(\"Wallet address: \" + address); } } private void getBalance(String address) { try { Base58Check.base58ToBytes(address); } catch (Exception e) { log.error(\"ERROR: invalid wallet address\", e); throw new RuntimeException(\"ERROR: invalid wallet address\", e); } byte[] versionedPayload = Base58Check.base58ToBytes(address); byte[] pubKeyHash = Arrays.copyOfRange(versionedPayload, 1, versionedPayload.length); Blockchain blockchain = Blockchain.createBlockchain(address); UTXOSet utxoSet = new UTXOSet(blockchain); TXOutput[] txOutputs = utxoSet.findUTXOs(pubKeyHash); int balance = 0; if (txOutputs != null && txOutputs.length > 0) { for (TXOutput txOutput : txOutputs) { balance += txOutput.getValue(); } } log.info(\"Balance of '{}': {}\\n\", new Object[]{address, balance}); } private void send(String from, String to, int amount) throws Exception { try { Base58Check.base58ToBytes(from); } catch (Exception e) { log.error(\"ERROR: sender address invalid ! address=\" + from, e); throw new RuntimeException(\"ERROR: sender address invalid ! address=\" + from, e); } try { Base58Check.base58ToBytes(to); } catch (Exception e) { log.error(\"ERROR: receiver address invalid ! address=\" + to, e); throw new RuntimeException(\"ERROR: receiver address invalid ! address=\" + to, e); } if (amount < 1) { log.error(\"ERROR: amount invalid ! amount=\" + amount); throw new RuntimeException(\"ERROR: amount invalid ! amount=\" + amount); } Blockchain blockchain = Blockchain.createBlockchain(from); Transaction transaction = Transaction.newUTXOTransaction(from, to, amount, blockchain); Transaction rewardTx = Transaction.newCoinbaseTX(from, \"\"); Block newBlock = blockchain.mineBlock(new Transaction[]{transaction, rewardTx}); new UTXOSet(blockchain).update(newBlock); log.info(\"Success!\"); } private void help() { System.out.println(\"Usage:\"); System.out.println(\" createwallet - Generates a new key-pair and saves it into the wallet file\"); System.out.println(\" printaddresses - print all wallet address\"); System.out.println(\" getbalance -address ADDRESS - Get balance of ADDRESS\"); System.out.println(\" createblockchain -address ADDRESS - Create a blockchain and send genesis block reward to ADDRESS\"); System.out.println(\" printchain - Print all the blocks of the blockchain\"); System.out.println(\" send -from FROM -to TO -amount AMOUNT - Send AMOUNT of coins from FROM address to TO\"); System.exit(0); } private void printChain() { Blockchain blockchain = Blockchain.initBlockchainFromDB(); for (Blockchain.BlockchainIterator iterator = blockchain.getBlockchainIterator(); iterator.hashNext(); ) { Block block = iterator.next(); if (block != null) { boolean validate = ProofOfWork.newProofOfWork(block).validate(); log.info(block.toString() + \", validate = \" + validate); } } } }","dependencies":[{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/block/Block.java","file_content":"package one.wangwei.blockchain.block; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import lombok.ToString; import one.wangwei.blockchain.pow.PowResult; import one.wangwei.blockchain.pow.ProofOfWork; import one.wangwei.blockchain.transaction.MerkleTree; import one.wangwei.blockchain.transaction.Transaction; import one.wangwei.blockchain.util.ByteUtils; import java.time.Instant; @Data @AllArgsConstructor @NoArgsConstructor @ToString public class Block { private String hash; private String prevBlockHash; private Transaction[] transactions; private long timeStamp; private long nonce; public static Block newGenesisBlock(Transaction coinbase) { return Block.newBlock(ByteUtils.ZERO_HASH, new Transaction[]{coinbase}); } public static Block newBlock(String previousHash, Transaction[] transactions) { Block block = new Block(\"\", previousHash, transactions, Instant.now().getEpochSecond(), 0); ProofOfWork pow = ProofOfWork.newProofOfWork(block); PowResult powResult = pow.run(); block.setHash(powResult.getHash()); block.setNonce(powResult.getNonce()); return block; } public byte[] hashTransaction() { byte[][] txIdArrays = new byte[this.getTransactions().length][]; for (int i = 0; i < this.getTransactions().length; i++) { txIdArrays[i] = this.getTransactions()[i].hash(); } return new MerkleTree(txIdArrays).getRoot().getHash(); } }"},{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/block/Blockchain.java","file_content":"package one.wangwei.blockchain.block; import com.google.common.collect.Maps; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import lombok.extern.slf4j.Slf4j; import one.wangwei.blockchain.store.RocksDBUtils; import one.wangwei.blockchain.transaction.TXInput; import one.wangwei.blockchain.transaction.TXOutput; import one.wangwei.blockchain.transaction.Transaction; import org.apache.commons.codec.binary.Hex; import org.apache.commons.lang3.ArrayUtils; import org.apache.commons.lang3.StringUtils; import org.bouncycastle.jcajce.provider.asymmetric.ec.BCECPrivateKey; import java.util.Arrays; import java.util.Map; @Data @AllArgsConstructor @NoArgsConstructor @Slf4j public class Blockchain { private String lastBlockHash; public static Blockchain initBlockchainFromDB() { String lastBlockHash = RocksDBUtils.getInstance().getLastBlockHash(); if (lastBlockHash == null) { throw new RuntimeException(\"ERROR: Fail to init blockchain from db. \"); } return new Blockchain(lastBlockHash); } public static Blockchain createBlockchain(String address) { String lastBlockHash = RocksDBUtils.getInstance().getLastBlockHash(); if (StringUtils.isBlank(lastBlockHash)) { String genesisCoinbaseData = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\"; Transaction coinbaseTX = Transaction.newCoinbaseTX(address, genesisCoinbaseData); Block genesisBlock = Block.newGenesisBlock(coinbaseTX); lastBlockHash = genesisBlock.getHash(); RocksDBUtils.getInstance().putBlock(genesisBlock); RocksDBUtils.getInstance().putLastBlockHash(lastBlockHash); } return new Blockchain(lastBlockHash); } public Block mineBlock(Transaction[] transactions) { for (Transaction tx : transactions) { if (!this.verifyTransactions(tx)) { log.error(\"ERROR: Fail to mine block ! Invalid transaction ! tx=\" + tx.toString()); throw new RuntimeException(\"ERROR: Fail to mine block ! Invalid transaction ! \"); } } String lastBlockHash = RocksDBUtils.getInstance().getLastBlockHash(); if (lastBlockHash == null) { throw new RuntimeException(\"ERROR: Fail to get last block hash ! \"); } Block block = Block.newBlock(lastBlockHash, transactions); this.addBlock(block); return block; } private void addBlock(Block block) { RocksDBUtils.getInstance().putLastBlockHash(block.getHash()); RocksDBUtils.getInstance().putBlock(block); this.lastBlockHash = block.getHash(); } public class BlockchainIterator { private String currentBlockHash; private BlockchainIterator(String currentBlockHash) { this.currentBlockHash = currentBlockHash; } public boolean hashNext() { if (StringUtils.isBlank(currentBlockHash)) { return false; } Block lastBlock = RocksDBUtils.getInstance().getBlock(currentBlockHash); if (lastBlock == null) { return false; } if (lastBlock.getPrevBlockHash().length() == 0) { return true; } return RocksDBUtils.getInstance().getBlock(lastBlock.getPrevBlockHash()) != null; } public Block next() { Block currentBlock = RocksDBUtils.getInstance().getBlock(currentBlockHash); if (currentBlock != null) { this.currentBlockHash = currentBlock.getPrevBlockHash(); return currentBlock; } return null; } } public BlockchainIterator getBlockchainIterator() { return new BlockchainIterator(lastBlockHash); } public Map<String, TXOutput[]> findAllUTXOs() { Map<String, int[]> allSpentTXOs = this.getAllSpentTXOs(); Map<String, TXOutput[]> allUTXOs = Maps.newHashMap(); for (BlockchainIterator blockchainIterator = this.getBlockchainIterator(); blockchainIterator.hashNext(); ) { Block block = blockchainIterator.next(); for (Transaction transaction : block.getTransactions()) { String txId = Hex.encodeHexString(transaction.getTxId()); int[] spentOutIndexArray = allSpentTXOs.get(txId); TXOutput[] txOutputs = transaction.getOutputs(); for (int outIndex = 0; outIndex < txOutputs.length; outIndex++) { if (spentOutIndexArray != null && ArrayUtils.contains(spentOutIndexArray, outIndex)) { continue; } TXOutput[] UTXOArray = allUTXOs.get(txId); if (UTXOArray == null) { UTXOArray = new TXOutput[]{txOutputs[outIndex]}; } else { UTXOArray = ArrayUtils.add(UTXOArray, txOutputs[outIndex]); } allUTXOs.put(txId, UTXOArray); } } } return allUTXOs; } private Map<String, int[]> getAllSpentTXOs() { Map<String, int[]> spentTXOs = Maps.newHashMap(); for (BlockchainIterator blockchainIterator = this.getBlockchainIterator(); blockchainIterator.hashNext(); ) { Block block = blockchainIterator.next(); for (Transaction transaction : block.getTransactions()) { if (transaction.isCoinbase()) { continue; } for (TXInput txInput : transaction.getInputs()) { String inTxId = Hex.encodeHexString(txInput.getTxId()); int[] spentOutIndexArray = spentTXOs.get(inTxId); if (spentOutIndexArray == null) { spentOutIndexArray = new int[]{txInput.getTxOutputIndex()}; } else { spentOutIndexArray = ArrayUtils.add(spentOutIndexArray, txInput.getTxOutputIndex()); } spentTXOs.put(inTxId, spentOutIndexArray); } } } return spentTXOs; } private Transaction findTransaction(byte[] txId) { for (BlockchainIterator iterator = this.getBlockchainIterator(); iterator.hashNext(); ) { Block block = iterator.next(); for (Transaction tx : block.getTransactions()) { if (Arrays.equals(tx.getTxId(), txId)) { return tx; } } } throw new RuntimeException(\"ERROR: Can not found tx by txId ! \"); } public void signTransaction(Transaction tx, BCECPrivateKey privateKey) throws Exception { Map<String, Transaction> prevTxMap = Maps.newHashMap(); for (TXInput txInput : tx.getInputs()) { Transaction prevTx = this.findTransaction(txInput.getTxId()); prevTxMap.put(Hex.encodeHexString(txInput.getTxId()), prevTx); } tx.sign(privateKey, prevTxMap); } private boolean verifyTransactions(Transaction tx) { if (tx.isCoinbase()) { return true; } Map<String, Transaction> prevTx = Maps.newHashMap(); for (TXInput txInput : tx.getInputs()) { Transaction transaction = this.findTransaction(txInput.getTxId()); prevTx.put(Hex.encodeHexString(txInput.getTxId()), transaction); } try { return tx.verify(prevTx); } catch (Exception e) { log.error(\"Fail to verify transaction ! transaction invalid ! \", e); throw new RuntimeException(\"Fail to verify transaction ! transaction invalid ! \", e); } } }"},{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/pow/ProofOfWork.java","file_content":"package one.wangwei.blockchain.pow; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import lombok.extern.slf4j.Slf4j; import one.wangwei.blockchain.block.Block; import one.wangwei.blockchain.util.ByteUtils; import org.apache.commons.codec.digest.DigestUtils; import org.apache.commons.lang3.StringUtils; import java.math.BigInteger; @Data @AllArgsConstructor @NoArgsConstructor @Slf4j public class ProofOfWork { public static final int TARGET_BITS = 16; private Block block; private BigInteger target; public static ProofOfWork newProofOfWork(Block block) { BigInteger targetValue = BigInteger.valueOf(1).shiftLeft((256 - TARGET_BITS)); return new ProofOfWork(block, targetValue); } public PowResult run() { long nonce = 0; String shaHex = \"\"; long startTime = System.currentTimeMillis(); while (nonce < Long.MAX_VALUE) { log.info(\"POW running, nonce=\" + nonce); byte[] data = this.prepareData(nonce); shaHex = DigestUtils.sha256Hex(data); if (new BigInteger(shaHex, 16).compareTo(this.target) == -1) { log.info(\"Elapsed Time: {} seconds \\n\", new Object[]{(float) (System.currentTimeMillis() - startTime) / 1000}); log.info(\"correct hash Hex: {} \\n\", new Object[]{shaHex}); break; } else { nonce++; } } return new PowResult(nonce, shaHex); } public boolean validate() { byte[] data = this.prepareData(this.getBlock().getNonce()); return new BigInteger(DigestUtils.sha256Hex(data), 16).compareTo(this.target) == -1; } private byte[] prepareData(long nonce) { byte[] prevBlockHashBytes = {}; if (StringUtils.isNoneBlank(this.getBlock().getPrevBlockHash())) { prevBlockHashBytes = new BigInteger(this.getBlock().getPrevBlockHash(), 16).toByteArray(); } return ByteUtils.merge( prevBlockHashBytes, this.getBlock().hashTransaction(), ByteUtils.toBytes(this.getBlock().getTimeStamp()), ByteUtils.toBytes(TARGET_BITS), ByteUtils.toBytes(nonce) ); } }"},{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/store/RocksDBUtils.java","file_content":"package one.wangwei.blockchain.store; import com.google.common.collect.Maps; import lombok.Getter; import lombok.extern.slf4j.Slf4j; import one.wangwei.blockchain.block.Block; import one.wangwei.blockchain.transaction.TXOutput; import one.wangwei.blockchain.util.SerializeUtils; import org.rocksdb.RocksDB; import org.rocksdb.RocksDBException; import java.util.Map; @Slf4j public class RocksDBUtils { private static final String DB_FILE = \"blockchain.db\"; private static final String BLOCKS_BUCKET_KEY = \"blocks\"; private static final String CHAINSTATE_BUCKET_KEY = \"chainstate\"; private static final String LAST_BLOCK_KEY = \"l\"; private volatile static RocksDBUtils instance; public static RocksDBUtils getInstance() { if (instance == null) { synchronized (RocksDBUtils.class) { if (instance == null) { instance = new RocksDBUtils(); } } } return instance; } private RocksDB db; private Map<String, byte[]> blocksBucket; @Getter private Map<String, byte[]> chainstateBucket; private RocksDBUtils() { openDB(); initBlockBucket(); initChainStateBucket(); } private void openDB() { try { db = RocksDB.open(DB_FILE); } catch (RocksDBException e) { log.error(\"Fail to open db ! \", e); throw new RuntimeException(\"Fail to open db ! \", e); } } private void initBlockBucket() { try { byte[] blockBucketKey = SerializeUtils.serialize(BLOCKS_BUCKET_KEY); byte[] blockBucketBytes = db.get(blockBucketKey); if (blockBucketBytes != null) { blocksBucket = (Map) SerializeUtils.deserialize(blockBucketBytes); } else { blocksBucket = Maps.newHashMap(); db.put(blockBucketKey, SerializeUtils.serialize(blocksBucket)); } } catch (RocksDBException e) { log.error(\"Fail to init block bucket ! \", e); throw new RuntimeException(\"Fail to init block bucket ! \", e); } } private void initChainStateBucket() { try { byte[] chainstateBucketKey = SerializeUtils.serialize(CHAINSTATE_BUCKET_KEY); byte[] chainstateBucketBytes = db.get(chainstateBucketKey); if (chainstateBucketBytes != null) { chainstateBucket = (Map) SerializeUtils.deserialize(chainstateBucketBytes); } else { chainstateBucket = Maps.newHashMap(); db.put(chainstateBucketKey, SerializeUtils.serialize(chainstateBucket)); } } catch (RocksDBException e) { log.error(\"Fail to init chainstate bucket ! \", e); throw new RuntimeException(\"Fail to init chainstate bucket ! \", e); } } public void putLastBlockHash(String tipBlockHash) { try { blocksBucket.put(LAST_BLOCK_KEY, SerializeUtils.serialize(tipBlockHash)); db.put(SerializeUtils.serialize(BLOCKS_BUCKET_KEY), SerializeUtils.serialize(blocksBucket)); } catch (RocksDBException e) { log.error(\"Fail to put last block hash ! tipBlockHash=\" + tipBlockHash, e); throw new RuntimeException(\"Fail to put last block hash ! tipBlockHash=\" + tipBlockHash, e); } } public String getLastBlockHash() { byte[] lastBlockHashBytes = blocksBucket.get(LAST_BLOCK_KEY); if (lastBlockHashBytes != null) { return (String) SerializeUtils.deserialize(lastBlockHashBytes); } return \"\"; } public void putBlock(Block block) { try { blocksBucket.put(block.getHash(), SerializeUtils.serialize(block)); db.put(SerializeUtils.serialize(BLOCKS_BUCKET_KEY), SerializeUtils.serialize(blocksBucket)); } catch (RocksDBException e) { log.error(\"Fail to put block ! block=\" + block.toString(), e); throw new RuntimeException(\"Fail to put block ! block=\" + block.toString(), e); } } public Block getBlock(String blockHash) { byte[] blockBytes = blocksBucket.get(blockHash); if (blockBytes != null) { return (Block) SerializeUtils.deserialize(blockBytes); } throw new RuntimeException(\"Fail to get block ! blockHash=\" + blockHash); } public void cleanChainStateBucket() { try { chainstateBucket.clear(); } catch (Exception e) { log.error(\"Fail to clear chainstate bucket ! \", e); throw new RuntimeException(\"Fail to clear chainstate bucket ! \", e); } } public void putUTXOs(String key, TXOutput[] utxos) { try { chainstateBucket.put(key, SerializeUtils.serialize(utxos)); db.put(SerializeUtils.serialize(CHAINSTATE_BUCKET_KEY), SerializeUtils.serialize(chainstateBucket)); } catch (Exception e) { log.error(\"Fail to put UTXOs into chainstate bucket ! key=\" + key, e); throw new RuntimeException(\"Fail to put UTXOs into chainstate bucket ! key=\" + key, e); } } public TXOutput[] getUTXOs(String key) { byte[] utxosByte = chainstateBucket.get(key); if (utxosByte != null) { return (TXOutput[]) SerializeUtils.deserialize(utxosByte); } return null; } public void deleteUTXOs(String key) { try { chainstateBucket.remove(key); db.put(SerializeUtils.serialize(CHAINSTATE_BUCKET_KEY), SerializeUtils.serialize(chainstateBucket)); } catch (Exception e) { log.error(\"Fail to delete UTXOs by key ! key=\" + key, e); throw new RuntimeException(\"Fail to delete UTXOs by key ! key=\" + key, e); } } public void closeDB() { try { db.close(); } catch (Exception e) { log.error(\"Fail to close db ! \", e); throw new RuntimeException(\"Fail to close db ! \", e); } } }"},{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/transaction/TXOutput.java","file_content":"package one.wangwei.blockchain.transaction; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import one.wangwei.blockchain.util.Base58Check; import java.util.Arrays; @Data @AllArgsConstructor @NoArgsConstructor public class TXOutput { private int value; private byte[] pubKeyHash; public static TXOutput newTXOutput(int value, String address) { byte[] versionedPayload = Base58Check.base58ToBytes(address); byte[] pubKeyHash = Arrays.copyOfRange(versionedPayload, 1, versionedPayload.length); return new TXOutput(value, pubKeyHash); } public boolean isLockedWithKey(byte[] pubKeyHash) { return Arrays.equals(this.getPubKeyHash(), pubKeyHash); } }"}]}}
{"project_id":275,"chunk_id":1,"content":{"main_file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/cli/CLI.java","main_file_content":"package one.wangwei.blockchain.cli; import lombok.extern.slf4j.Slf4j; import one.wangwei.blockchain.block.Block; import one.wangwei.blockchain.block.Blockchain; import one.wangwei.blockchain.pow.ProofOfWork; import one.wangwei.blockchain.store.RocksDBUtils; import one.wangwei.blockchain.transaction.TXOutput; import one.wangwei.blockchain.transaction.Transaction; import one.wangwei.blockchain.transaction.UTXOSet; import one.wangwei.blockchain.util.Base58Check; import one.wangwei.blockchain.wallet.Wallet; import one.wangwei.blockchain.wallet.WalletUtils; import org.apache.commons.cli.*; import org.apache.commons.lang3.StringUtils; import org.apache.commons.lang3.math.NumberUtils; import java.util.Arrays; import java.util.Set; @Slf4j public class CLI { private String[] args; private Options options = new Options(); public CLI(String[] args) { this.args = args; Option helpCmd = Option.builder(\"h\").desc(\"show help\").build(); options.addOption(helpCmd); Option address = Option.builder(\"address\").hasArg(true).desc(\"Source wallet address\").build(); Option sendFrom = Option.builder(\"from\").hasArg(true).desc(\"Source wallet address\").build(); Option sendTo = Option.builder(\"to\").hasArg(true).desc(\"Destination wallet address\").build(); Option sendAmount = Option.builder(\"amount\").hasArg(true).desc(\"Amount to send\").build(); options.addOption(address); options.addOption(sendFrom); options.addOption(sendTo); options.addOption(sendAmount); } public void parse() { this.validateArgs(args); try { CommandLineParser parser = new DefaultParser(); CommandLine cmd = parser.parse(options, args); switch (args[0]) { case \"createblockchain\": String createblockchainAddress = cmd.getOptionValue(\"address\"); if (StringUtils.isBlank(createblockchainAddress)) { help(); } this.createBlockchain(createblockchainAddress); break; case \"getbalance\": String getBalanceAddress = cmd.getOptionValue(\"address\"); if (StringUtils.isBlank(getBalanceAddress)) { help(); } this.getBalance(getBalanceAddress); break; case \"send\": String sendFrom = cmd.getOptionValue(\"from\"); String sendTo = cmd.getOptionValue(\"to\"); String sendAmount = cmd.getOptionValue(\"amount\"); if (StringUtils.isBlank(sendFrom) || StringUtils.isBlank(sendTo) || !NumberUtils.isDigits(sendAmount)) { help(); } this.send(sendFrom, sendTo, Integer.valueOf(sendAmount)); break; case \"createwallet\": this.createWallet(); break; case \"printaddresses\": this.printAddresses(); break; case \"printchain\": this.printChain(); break; case \"h\": this.help(); break; default: this.help(); } } catch (Exception e) { log.error(\"Fail to parse cli command ! \", e); } finally { RocksDBUtils.getInstance().closeDB(); } } private void validateArgs(String[] args) { if (args == null || args.length < 1) { help(); } } private void createBlockchain(String address) { Blockchain blockchain = Blockchain.createBlockchain(address); UTXOSet utxoSet = new UTXOSet(blockchain); utxoSet.reIndex(); log.info(\"Done ! \"); } private void createWallet() throws Exception { Wallet wallet = WalletUtils.getInstance().createWallet(); log.info(\"wallet address : \" + wallet.getAddress()); } private void printAddresses() { Set<String> addresses = WalletUtils.getInstance().getAddresses(); if (addresses == null || addresses.isEmpty()) { log.info(\"There isn't address\"); return; } for (String address : addresses) { log.info(\"Wallet address: \" + address); } } private void getBalance(String address) { try { Base58Check.base58ToBytes(address); } catch (Exception e) { log.error(\"ERROR: invalid wallet address\", e); throw new RuntimeException(\"ERROR: invalid wallet address\", e); } byte[] versionedPayload = Base58Check.base58ToBytes(address); byte[] pubKeyHash = Arrays.copyOfRange(versionedPayload, 1, versionedPayload.length); Blockchain blockchain = Blockchain.createBlockchain(address); UTXOSet utxoSet = new UTXOSet(blockchain); TXOutput[] txOutputs = utxoSet.findUTXOs(pubKeyHash); int balance = 0; if (txOutputs != null && txOutputs.length > 0) { for (TXOutput txOutput : txOutputs) { balance += txOutput.getValue(); } } log.info(\"Balance of '{}': {}\\n\", new Object[]{address, balance}); } private void send(String from, String to, int amount) throws Exception { try { Base58Check.base58ToBytes(from); } catch (Exception e) { log.error(\"ERROR: sender address invalid ! address=\" + from, e); throw new RuntimeException(\"ERROR: sender address invalid ! address=\" + from, e); } try { Base58Check.base58ToBytes(to); } catch (Exception e) { log.error(\"ERROR: receiver address invalid ! address=\" + to, e); throw new RuntimeException(\"ERROR: receiver address invalid ! address=\" + to, e); } if (amount < 1) { log.error(\"ERROR: amount invalid ! amount=\" + amount); throw new RuntimeException(\"ERROR: amount invalid ! amount=\" + amount); } Blockchain blockchain = Blockchain.createBlockchain(from); Transaction transaction = Transaction.newUTXOTransaction(from, to, amount, blockchain); Transaction rewardTx = Transaction.newCoinbaseTX(from, \"\"); Block newBlock = blockchain.mineBlock(new Transaction[]{transaction, rewardTx}); new UTXOSet(blockchain).update(newBlock); log.info(\"Success!\"); } private void help() { System.out.println(\"Usage:\"); System.out.println(\" createwallet - Generates a new key-pair and saves it into the wallet file\"); System.out.println(\" printaddresses - print all wallet address\"); System.out.println(\" getbalance -address ADDRESS - Get balance of ADDRESS\"); System.out.println(\" createblockchain -address ADDRESS - Create a blockchain and send genesis block reward to ADDRESS\"); System.out.println(\" printchain - Print all the blocks of the blockchain\"); System.out.println(\" send -from FROM -to TO -amount AMOUNT - Send AMOUNT of coins from FROM address to TO\"); System.exit(0); } private void printChain() { Blockchain blockchain = Blockchain.initBlockchainFromDB(); for (Blockchain.BlockchainIterator iterator = blockchain.getBlockchainIterator(); iterator.hashNext(); ) { Block block = iterator.next(); if (block != null) { boolean validate = ProofOfWork.newProofOfWork(block).validate(); log.info(block.toString() + \", validate = \" + validate); } } } }","dependencies":[{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/transaction/Transaction.java","file_content":"package one.wangwei.blockchain.transaction; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import lombok.extern.slf4j.Slf4j; import one.wangwei.blockchain.block.Blockchain; import one.wangwei.blockchain.util.BtcAddressUtils; import one.wangwei.blockchain.util.SerializeUtils; import one.wangwei.blockchain.wallet.Wallet; import one.wangwei.blockchain.wallet.WalletUtils; import org.apache.commons.codec.binary.Hex; import org.apache.commons.codec.digest.DigestUtils; import org.apache.commons.lang3.ArrayUtils; import org.apache.commons.lang3.StringUtils; import org.bouncycastle.jcajce.provider.asymmetric.ec.BCECPrivateKey; import org.bouncycastle.jce.ECNamedCurveTable; import org.bouncycastle.jce.provider.BouncyCastleProvider; import org.bouncycastle.jce.spec.ECParameterSpec; import org.bouncycastle.jce.spec.ECPublicKeySpec; import org.bouncycastle.math.ec.ECPoint; import java.math.BigInteger; import java.security.KeyFactory; import java.security.PublicKey; import java.security.Security; import java.security.Signature; import java.util.Arrays; import java.util.Iterator; import java.util.Map; @Data @AllArgsConstructor @NoArgsConstructor @Slf4j public class Transaction { private static final int SUBSIDY = 10; private byte[] txId; private TXInput[] inputs; private TXOutput[] outputs; private long createTime; public byte[] hash() { byte[] serializeBytes = SerializeUtils.serialize(this); Transaction copyTx = (Transaction) SerializeUtils.deserialize(serializeBytes); copyTx.setTxId(new byte[]{}); return DigestUtils.sha256(SerializeUtils.serialize(copyTx)); } public static Transaction newCoinbaseTX(String to, String data) { if (StringUtils.isBlank(data)) { data = String.format(\"Reward to '%s'\", to); } TXInput txInput = new TXInput(new byte[]{}, -1, null, data.getBytes()); TXOutput txOutput = TXOutput.newTXOutput(SUBSIDY, to); Transaction tx = new Transaction(null, new TXInput[]{txInput}, new TXOutput[]{txOutput}, System.currentTimeMillis()); tx.setTxId(tx.hash()); return tx; } public boolean isCoinbase() { return this.getInputs().length == 1 && this.getInputs()[0].getTxId().length == 0 && this.getInputs()[0].getTxOutputIndex() == -1; } public static Transaction newUTXOTransaction(String from, String to, int amount, Blockchain blockchain) throws Exception { Wallet senderWallet = WalletUtils.getInstance().getWallet(from); byte[] pubKey = senderWallet.getPublicKey(); byte[] pubKeyHash = BtcAddressUtils.ripeMD160Hash(pubKey); SpendableOutputResult result = new UTXOSet(blockchain).findSpendableOutputs(pubKeyHash, amount); int accumulated = result.getAccumulated(); Map<String, int[]> unspentOuts = result.getUnspentOuts(); if (accumulated < amount) { log.error(\"ERROR: Not enough funds ! accumulated=\" + accumulated + \", amount=\" + amount); throw new RuntimeException(\"ERROR: Not enough funds ! \"); } Iterator<Map.Entry<String, int[]>> iterator = unspentOuts.entrySet().iterator(); TXInput[] txInputs = {}; while (iterator.hasNext()) { Map.Entry<String, int[]> entry = iterator.next(); String txIdStr = entry.getKey(); int[] outIds = entry.getValue(); byte[] txId = Hex.decodeHex(txIdStr); for (int outIndex : outIds) { txInputs = ArrayUtils.add(txInputs, new TXInput(txId, outIndex, null, pubKey)); } } TXOutput[] txOutput = {}; txOutput = ArrayUtils.add(txOutput, TXOutput.newTXOutput(amount, to)); if (accumulated > amount) { txOutput = ArrayUtils.add(txOutput, TXOutput.newTXOutput((accumulated - amount), from)); } Transaction newTx = new Transaction(null, txInputs, txOutput, System.currentTimeMillis()); newTx.setTxId(newTx.hash()); blockchain.signTransaction(newTx, senderWallet.getPrivateKey()); return newTx; } public Transaction trimmedCopy() { TXInput[] tmpTXInputs = new TXInput[this.getInputs().length]; for (int i = 0; i < this.getInputs().length; i++) { TXInput txInput = this.getInputs()[i]; tmpTXInputs[i] = new TXInput(txInput.getTxId(), txInput.getTxOutputIndex(), null, null); } TXOutput[] tmpTXOutputs = new TXOutput[this.getOutputs().length]; for (int i = 0; i < this.getOutputs().length; i++) { TXOutput txOutput = this.getOutputs()[i]; tmpTXOutputs[i] = new TXOutput(txOutput.getValue(), txOutput.getPubKeyHash()); } return new Transaction(this.getTxId(), tmpTXInputs, tmpTXOutputs, this.getCreateTime()); } public void sign(BCECPrivateKey privateKey, Map<String, Transaction> prevTxMap) throws Exception { if (this.isCoinbase()) { return; } for (TXInput txInput : this.getInputs()) { if (prevTxMap.get(Hex.encodeHexString(txInput.getTxId())) == null) { throw new RuntimeException(\"ERROR: Previous transaction is not correct\"); } } Transaction txCopy = this.trimmedCopy(); Security.addProvider(new BouncyCastleProvider()); Signature ecdsaSign = Signature.getInstance(\"SHA256withECDSA\", BouncyCastleProvider.PROVIDER_NAME); ecdsaSign.initSign(privateKey); for (int i = 0; i < txCopy.getInputs().length; i++) { TXInput txInputCopy = txCopy.getInputs()[i]; Transaction prevTx = prevTxMap.get(Hex.encodeHexString(txInputCopy.getTxId())); TXOutput prevTxOutput = prevTx.getOutputs()[txInputCopy.getTxOutputIndex()]; txInputCopy.setPubKey(prevTxOutput.getPubKeyHash()); txInputCopy.setSignature(null); txCopy.setTxId(txCopy.hash()); txInputCopy.setPubKey(null); ecdsaSign.update(txCopy.getTxId()); byte[] signature = ecdsaSign.sign(); this.getInputs()[i].setSignature(signature); } } public boolean verify(Map<String, Transaction> prevTxMap) throws Exception { if (this.isCoinbase()) { return true; } for (TXInput txInput : this.getInputs()) { if (prevTxMap.get(Hex.encodeHexString(txInput.getTxId())) == null) { throw new RuntimeException(\"ERROR: Previous transaction is not correct\"); } } Transaction txCopy = this.trimmedCopy(); Security.addProvider(new BouncyCastleProvider()); ECParameterSpec ecParameters = ECNamedCurveTable.getParameterSpec(\"secp256k1\"); KeyFactory keyFactory = KeyFactory.getInstance(\"ECDSA\", BouncyCastleProvider.PROVIDER_NAME); Signature ecdsaVerify = Signature.getInstance(\"SHA256withECDSA\", BouncyCastleProvider.PROVIDER_NAME); for (int i = 0; i < this.getInputs().length; i++) { TXInput txInput = this.getInputs()[i]; Transaction prevTx = prevTxMap.get(Hex.encodeHexString(txInput.getTxId())); TXOutput prevTxOutput = prevTx.getOutputs()[txInput.getTxOutputIndex()]; TXInput txInputCopy = txCopy.getInputs()[i]; txInputCopy.setSignature(null); txInputCopy.setPubKey(prevTxOutput.getPubKeyHash()); txCopy.setTxId(txCopy.hash()); txInputCopy.setPubKey(null); BigInteger x = new BigInteger(1, Arrays.copyOfRange(txInput.getPubKey(), 1, 33)); BigInteger y = new BigInteger(1, Arrays.copyOfRange(txInput.getPubKey(), 33, 65)); ECPoint ecPoint = ecParameters.getCurve().createPoint(x, y); ECPublicKeySpec keySpec = new ECPublicKeySpec(ecPoint, ecParameters); PublicKey publicKey = keyFactory.generatePublic(keySpec); ecdsaVerify.initVerify(publicKey); ecdsaVerify.update(txCopy.getTxId()); if (!ecdsaVerify.verify(txInput.getSignature())) { return false; } } return true; } }"},{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/transaction/UTXOSet.java","file_content":"package one.wangwei.blockchain.transaction; import com.google.common.collect.Maps; import lombok.AllArgsConstructor; import lombok.NoArgsConstructor; import lombok.Synchronized; import lombok.extern.slf4j.Slf4j; import one.wangwei.blockchain.block.Block; import one.wangwei.blockchain.block.Blockchain; import one.wangwei.blockchain.store.RocksDBUtils; import one.wangwei.blockchain.util.SerializeUtils; import org.apache.commons.codec.binary.Hex; import org.apache.commons.lang3.ArrayUtils; import java.util.Map; @NoArgsConstructor @AllArgsConstructor @Slf4j public class UTXOSet { private Blockchain blockchain; public SpendableOutputResult findSpendableOutputs(byte[] pubKeyHash, int amount) { Map<String, int[]> unspentOuts = Maps.newHashMap(); int accumulated = 0; Map<String, byte[]> chainstateBucket = RocksDBUtils.getInstance().getChainstateBucket(); for (Map.Entry<String, byte[]> entry : chainstateBucket.entrySet()) { String txId = entry.getKey(); TXOutput[] txOutputs = (TXOutput[]) SerializeUtils.deserialize(entry.getValue()); for (int outId = 0; outId < txOutputs.length; outId++) { TXOutput txOutput = txOutputs[outId]; if (txOutput.isLockedWithKey(pubKeyHash) && accumulated < amount) { accumulated += txOutput.getValue(); int[] outIds = unspentOuts.get(txId); if (outIds == null) { outIds = new int[]{outId}; } else { outIds = ArrayUtils.add(outIds, outId); } unspentOuts.put(txId, outIds); if (accumulated >= amount) { break; } } } } return new SpendableOutputResult(accumulated, unspentOuts); } public TXOutput[] findUTXOs(byte[] pubKeyHash) { TXOutput[] utxos = {}; Map<String, byte[]> chainstateBucket = RocksDBUtils.getInstance().getChainstateBucket(); if (chainstateBucket.isEmpty()) { return utxos; } for (byte[] value : chainstateBucket.values()) { TXOutput[] txOutputs = (TXOutput[]) SerializeUtils.deserialize(value); for (TXOutput txOutput : txOutputs) { if (txOutput.isLockedWithKey(pubKeyHash)) { utxos = ArrayUtils.add(utxos, txOutput); } } } return utxos; } @Synchronized public void reIndex() { log.info(\"Start to reIndex UTXO set !\"); RocksDBUtils.getInstance().cleanChainStateBucket(); Map<String, TXOutput[]> allUTXOs = blockchain.findAllUTXOs(); for (Map.Entry<String, TXOutput[]> entry : allUTXOs.entrySet()) { RocksDBUtils.getInstance().putUTXOs(entry.getKey(), entry.getValue()); } log.info(\"ReIndex UTXO set finished ! \"); } @Synchronized public void update(Block tipBlock) { if (tipBlock == null) { log.error(\"Fail to update UTXO set ! tipBlock is null !\"); throw new RuntimeException(\"Fail to update UTXO set ! \"); } for (Transaction transaction : tipBlock.getTransactions()) { if (!transaction.isCoinbase()) { for (TXInput txInput : transaction.getInputs()) { TXOutput[] remainderUTXOs = {}; String txId = Hex.encodeHexString(txInput.getTxId()); TXOutput[] txOutputs = RocksDBUtils.getInstance().getUTXOs(txId); if (txOutputs == null) { continue; } for (int outIndex = 0; outIndex < txOutputs.length; outIndex++) { if (outIndex != txInput.getTxOutputIndex()) { remainderUTXOs = ArrayUtils.add(remainderUTXOs, txOutputs[outIndex]); } } if (remainderUTXOs.length == 0) { RocksDBUtils.getInstance().deleteUTXOs(txId); } else { RocksDBUtils.getInstance().putUTXOs(txId, remainderUTXOs); } } } TXOutput[] txOutputs = transaction.getOutputs(); String txId = Hex.encodeHexString(transaction.getTxId()); RocksDBUtils.getInstance().putUTXOs(txId, txOutputs); } } }"},{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/util/Base58Check.java","file_content":"package one.wangwei.blockchain.util; import java.io.ByteArrayOutputStream; import java.io.IOException; import java.math.BigInteger; import java.util.Arrays; public final class Base58Check { public static String bytesToBase58(byte[] data) { return rawBytesToBase58(addCheckHash(data)); } public static String rawBytesToBase58(byte[] data) { StringBuilder sb = new StringBuilder(); BigInteger num = new BigInteger(1, data); while (num.signum() != 0) { BigInteger[] quotrem = num.divideAndRemainder(ALPHABET_SIZE); sb.append(ALPHABET.charAt(quotrem[1].intValue())); num = quotrem[0]; } for (int i = 0; i < data.length && data[i] == 0; i++) { sb.append(ALPHABET.charAt(0)); } return sb.reverse().toString(); } static byte[] addCheckHash(byte[] data) { try { byte[] hash = Arrays.copyOf(BtcAddressUtils.doubleHash(data), 4); ByteArrayOutputStream buf = new ByteArrayOutputStream(); buf.write(data); buf.write(hash); return buf.toByteArray(); } catch (IOException e) { throw new AssertionError(e); } } public static byte[] base58ToBytes(String s) { byte[] concat = base58ToRawBytes(s); byte[] data = Arrays.copyOf(concat, concat.length - 4); byte[] hash = Arrays.copyOfRange(concat, concat.length - 4, concat.length); byte[] rehash = Arrays.copyOf(BtcAddressUtils.doubleHash(data), 4); if (!Arrays.equals(rehash, hash)) { throw new IllegalArgumentException(\"Checksum mismatch\"); } return data; } static byte[] base58ToRawBytes(String s) { BigInteger num = BigInteger.ZERO; for (int i = 0; i < s.length(); i++) { num = num.multiply(ALPHABET_SIZE); int digit = ALPHABET.indexOf(s.charAt(i)); if (digit == -1) { throw new IllegalArgumentException(\"Invalid character for Base58Check\"); } num = num.add(BigInteger.valueOf(digit)); } byte[] b = num.toByteArray(); if (b[0] == 0) { b = Arrays.copyOfRange(b, 1, b.length); } try { ByteArrayOutputStream buf = new ByteArrayOutputStream(); for (int i = 0; i < s.length() && s.charAt(i) == ALPHABET.charAt(0); i++) { buf.write(0); } buf.write(b); return buf.toByteArray(); } catch (IOException e) { throw new AssertionError(e); } } private static final String ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"; private static final BigInteger ALPHABET_SIZE = BigInteger.valueOf(ALPHABET.length()); private Base58Check() { } }"}]}}
{"project_id":275,"chunk_id":2,"content":{"main_file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/cli/CLI.java","main_file_content":"package one.wangwei.blockchain.cli; import lombok.extern.slf4j.Slf4j; import one.wangwei.blockchain.block.Block; import one.wangwei.blockchain.block.Blockchain; import one.wangwei.blockchain.pow.ProofOfWork; import one.wangwei.blockchain.store.RocksDBUtils; import one.wangwei.blockchain.transaction.TXOutput; import one.wangwei.blockchain.transaction.Transaction; import one.wangwei.blockchain.transaction.UTXOSet; import one.wangwei.blockchain.util.Base58Check; import one.wangwei.blockchain.wallet.Wallet; import one.wangwei.blockchain.wallet.WalletUtils; import org.apache.commons.cli.*; import org.apache.commons.lang3.StringUtils; import org.apache.commons.lang3.math.NumberUtils; import java.util.Arrays; import java.util.Set; @Slf4j public class CLI { private String[] args; private Options options = new Options(); public CLI(String[] args) { this.args = args; Option helpCmd = Option.builder(\"h\").desc(\"show help\").build(); options.addOption(helpCmd); Option address = Option.builder(\"address\").hasArg(true).desc(\"Source wallet address\").build(); Option sendFrom = Option.builder(\"from\").hasArg(true).desc(\"Source wallet address\").build(); Option sendTo = Option.builder(\"to\").hasArg(true).desc(\"Destination wallet address\").build(); Option sendAmount = Option.builder(\"amount\").hasArg(true).desc(\"Amount to send\").build(); options.addOption(address); options.addOption(sendFrom); options.addOption(sendTo); options.addOption(sendAmount); } public void parse() { this.validateArgs(args); try { CommandLineParser parser = new DefaultParser(); CommandLine cmd = parser.parse(options, args); switch (args[0]) { case \"createblockchain\": String createblockchainAddress = cmd.getOptionValue(\"address\"); if (StringUtils.isBlank(createblockchainAddress)) { help(); } this.createBlockchain(createblockchainAddress); break; case \"getbalance\": String getBalanceAddress = cmd.getOptionValue(\"address\"); if (StringUtils.isBlank(getBalanceAddress)) { help(); } this.getBalance(getBalanceAddress); break; case \"send\": String sendFrom = cmd.getOptionValue(\"from\"); String sendTo = cmd.getOptionValue(\"to\"); String sendAmount = cmd.getOptionValue(\"amount\"); if (StringUtils.isBlank(sendFrom) || StringUtils.isBlank(sendTo) || !NumberUtils.isDigits(sendAmount)) { help(); } this.send(sendFrom, sendTo, Integer.valueOf(sendAmount)); break; case \"createwallet\": this.createWallet(); break; case \"printaddresses\": this.printAddresses(); break; case \"printchain\": this.printChain(); break; case \"h\": this.help(); break; default: this.help(); } } catch (Exception e) { log.error(\"Fail to parse cli command ! \", e); } finally { RocksDBUtils.getInstance().closeDB(); } } private void validateArgs(String[] args) { if (args == null || args.length < 1) { help(); } } private void createBlockchain(String address) { Blockchain blockchain = Blockchain.createBlockchain(address); UTXOSet utxoSet = new UTXOSet(blockchain); utxoSet.reIndex(); log.info(\"Done ! \"); } private void createWallet() throws Exception { Wallet wallet = WalletUtils.getInstance().createWallet(); log.info(\"wallet address : \" + wallet.getAddress()); } private void printAddresses() { Set<String> addresses = WalletUtils.getInstance().getAddresses(); if (addresses == null || addresses.isEmpty()) { log.info(\"There isn't address\"); return; } for (String address : addresses) { log.info(\"Wallet address: \" + address); } } private void getBalance(String address) { try { Base58Check.base58ToBytes(address); } catch (Exception e) { log.error(\"ERROR: invalid wallet address\", e); throw new RuntimeException(\"ERROR: invalid wallet address\", e); } byte[] versionedPayload = Base58Check.base58ToBytes(address); byte[] pubKeyHash = Arrays.copyOfRange(versionedPayload, 1, versionedPayload.length); Blockchain blockchain = Blockchain.createBlockchain(address); UTXOSet utxoSet = new UTXOSet(blockchain); TXOutput[] txOutputs = utxoSet.findUTXOs(pubKeyHash); int balance = 0; if (txOutputs != null && txOutputs.length > 0) { for (TXOutput txOutput : txOutputs) { balance += txOutput.getValue(); } } log.info(\"Balance of '{}': {}\\n\", new Object[]{address, balance}); } private void send(String from, String to, int amount) throws Exception { try { Base58Check.base58ToBytes(from); } catch (Exception e) { log.error(\"ERROR: sender address invalid ! address=\" + from, e); throw new RuntimeException(\"ERROR: sender address invalid ! address=\" + from, e); } try { Base58Check.base58ToBytes(to); } catch (Exception e) { log.error(\"ERROR: receiver address invalid ! address=\" + to, e); throw new RuntimeException(\"ERROR: receiver address invalid ! address=\" + to, e); } if (amount < 1) { log.error(\"ERROR: amount invalid ! amount=\" + amount); throw new RuntimeException(\"ERROR: amount invalid ! amount=\" + amount); } Blockchain blockchain = Blockchain.createBlockchain(from); Transaction transaction = Transaction.newUTXOTransaction(from, to, amount, blockchain); Transaction rewardTx = Transaction.newCoinbaseTX(from, \"\"); Block newBlock = blockchain.mineBlock(new Transaction[]{transaction, rewardTx}); new UTXOSet(blockchain).update(newBlock); log.info(\"Success!\"); } private void help() { System.out.println(\"Usage:\"); System.out.println(\" createwallet - Generates a new key-pair and saves it into the wallet file\"); System.out.println(\" printaddresses - print all wallet address\"); System.out.println(\" getbalance -address ADDRESS - Get balance of ADDRESS\"); System.out.println(\" createblockchain -address ADDRESS - Create a blockchain and send genesis block reward to ADDRESS\"); System.out.println(\" printchain - Print all the blocks of the blockchain\"); System.out.println(\" send -from FROM -to TO -amount AMOUNT - Send AMOUNT of coins from FROM address to TO\"); System.exit(0); } private void printChain() { Blockchain blockchain = Blockchain.initBlockchainFromDB(); for (Blockchain.BlockchainIterator iterator = blockchain.getBlockchainIterator(); iterator.hashNext(); ) { Block block = iterator.next(); if (block != null) { boolean validate = ProofOfWork.newProofOfWork(block).validate(); log.info(block.toString() + \", validate = \" + validate); } } } }","dependencies":[{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/wallet/Wallet.java","file_content":"package one.wangwei.blockchain.wallet; import lombok.AllArgsConstructor; import lombok.Data; import lombok.extern.slf4j.Slf4j; import one.wangwei.blockchain.util.Base58Check; import one.wangwei.blockchain.util.BtcAddressUtils; import org.bouncycastle.jcajce.provider.asymmetric.ec.BCECPrivateKey; import org.bouncycastle.jcajce.provider.asymmetric.ec.BCECPublicKey; import org.bouncycastle.jce.ECNamedCurveTable; import org.bouncycastle.jce.provider.BouncyCastleProvider; import org.bouncycastle.jce.spec.ECParameterSpec; import java.io.ByteArrayOutputStream; import java.io.IOException; import java.io.Serializable; import java.security.KeyPair; import java.security.KeyPairGenerator; import java.security.SecureRandom; import java.security.Security; @Data @AllArgsConstructor @Slf4j public class Wallet implements Serializable { private static final long serialVersionUID = 166249065006236265L; private static final int ADDRESS_CHECKSUM_LEN = 4; private BCECPrivateKey privateKey; private byte[] publicKey; public Wallet() { initWallet(); } private void initWallet() { try { KeyPair keyPair = newECKeyPair(); BCECPrivateKey privateKey = (BCECPrivateKey) keyPair.getPrivate(); BCECPublicKey publicKey = (BCECPublicKey) keyPair.getPublic(); byte[] publicKeyBytes = publicKey.getQ().getEncoded(false); this.setPrivateKey(privateKey); this.setPublicKey(publicKeyBytes); } catch (Exception e) { log.error(\"Fail to init wallet ! \", e); throw new RuntimeException(\"Fail to init wallet ! \", e); } } private KeyPair newECKeyPair() throws Exception { Security.addProvider(new BouncyCastleProvider()); KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"ECDSA\", BouncyCastleProvider.PROVIDER_NAME); ECParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec(\"secp256k1\"); keyPairGenerator.initialize(ecSpec, new SecureRandom()); return keyPairGenerator.generateKeyPair(); } public String getAddress() { try { byte[] ripemdHashedKey = BtcAddressUtils.ripeMD160Hash(this.getPublicKey()); ByteArrayOutputStream addrStream = new ByteArrayOutputStream(); addrStream.write((byte) 0); addrStream.write(ripemdHashedKey); byte[] versionedPayload = addrStream.toByteArray(); byte[] checksum = BtcAddressUtils.checksum(versionedPayload); addrStream.write(checksum); byte[] binaryAddress = addrStream.toByteArray(); return Base58Check.rawBytesToBase58(binaryAddress); } catch (IOException e) { e.printStackTrace(); } throw new RuntimeException(\"Fail to get wallet address ! \"); } }"},{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/wallet/WalletUtils.java","file_content":"package one.wangwei.blockchain.wallet; import com.google.common.collect.Maps; import lombok.AllArgsConstructor; import lombok.Cleanup; import lombok.Data; import lombok.NoArgsConstructor; import lombok.extern.slf4j.Slf4j; import one.wangwei.blockchain.util.Base58Check; import javax.crypto.Cipher; import javax.crypto.CipherInputStream; import javax.crypto.CipherOutputStream; import javax.crypto.SealedObject; import javax.crypto.spec.SecretKeySpec; import java.io.*; import java.util.Map; import java.util.Set; @Slf4j public class WalletUtils { private volatile static WalletUtils instance; public static WalletUtils getInstance() { if (instance == null) { synchronized (WalletUtils.class) { if (instance == null) { instance = new WalletUtils(); } } } return instance; } private WalletUtils() { initWalletFile(); } private final static String WALLET_FILE = \"wallet.dat\"; private static final String ALGORITHM = \"AES\"; private static final byte[] CIPHER_TEXT = \"2oF@5sC%DNf32y!TmiZi!tG9W5rLaniD\".getBytes(); private void initWalletFile() { File file = new File(WALLET_FILE); if (!file.exists()) { this.saveToDisk(new Wallets()); } else { this.loadFromDisk(); } } public Set<String> getAddresses() { Wallets wallets = this.loadFromDisk(); return wallets.getAddresses(); } public Wallet getWallet(String address) { Wallets wallets = this.loadFromDisk(); return wallets.getWallet(address); } public Wallet createWallet() { Wallet wallet = new Wallet(); Wallets wallets = this.loadFromDisk(); wallets.addWallet(wallet); this.saveToDisk(wallets); return wallet; } private void saveToDisk(Wallets wallets) { try { if (wallets == null) { log.error(\"Fail to save wallet to file ! wallets is null \"); throw new Exception(\"ERROR: Fail to save wallet to file !\"); } SecretKeySpec sks = new SecretKeySpec(CIPHER_TEXT, ALGORITHM); Cipher cipher = Cipher.getInstance(ALGORITHM); cipher.init(Cipher.ENCRYPT_MODE, sks); SealedObject sealedObject = new SealedObject(wallets, cipher); @Cleanup CipherOutputStream cos = new CipherOutputStream( new BufferedOutputStream(new FileOutputStream(WALLET_FILE)), cipher); @Cleanup ObjectOutputStream outputStream = new ObjectOutputStream(cos); outputStream.writeObject(sealedObject); } catch (Exception e) { log.error(\"Fail to save wallet to disk !\", e); throw new RuntimeException(\"Fail to save wallet to disk !\"); } } private Wallets loadFromDisk() { try { SecretKeySpec sks = new SecretKeySpec(CIPHER_TEXT, ALGORITHM); Cipher cipher = Cipher.getInstance(ALGORITHM); cipher.init(Cipher.DECRYPT_MODE, sks); @Cleanup CipherInputStream cipherInputStream = new CipherInputStream( new BufferedInputStream(new FileInputStream(WALLET_FILE)), cipher); @Cleanup ObjectInputStream inputStream = new ObjectInputStream(cipherInputStream); SealedObject sealedObject = (SealedObject) inputStream.readObject(); return (Wallets) sealedObject.getObject(cipher); } catch (Exception e) { log.error(\"Fail to load wallet from disk ! \", e); throw new RuntimeException(\"Fail to load wallet from disk ! \"); } } @Data @NoArgsConstructor @AllArgsConstructor public static class Wallets implements Serializable { private static final long serialVersionUID = -2542070981569243131L; private Map<String, Wallet> walletMap = Maps.newHashMap(); private void addWallet(Wallet wallet) { try { this.walletMap.put(wallet.getAddress(), wallet); } catch (Exception e) { log.error(\"Fail to add wallet ! \", e); throw new RuntimeException(\"Fail to add wallet !\"); } } Set<String> getAddresses() { if (walletMap == null) { log.error(\"Fail to get address ! walletMap is null ! \"); throw new RuntimeException(\"Fail to get addresses ! \"); } return walletMap.keySet(); } Wallet getWallet(String address) { try { Base58Check.base58ToBytes(address); } catch (Exception e) { log.error(\"Fail to get wallet ! address invalid ! address=\" + address, e); throw new RuntimeException(\"Fail to get wallet ! \"); } Wallet wallet = walletMap.get(address); if (wallet == null) { log.error(\"Fail to get wallet ! wallet don`t exist ! address=\" + address); throw new RuntimeException(\"Fail to get wallet ! \"); } return wallet; } } }"}]}}
{"project_id":275,"chunk_id":0,"content":{"main_file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/cli/Main.java","main_file_content":"package one.wangwei.blockchain.cli; public class Main { public static void main(String[] args) { CLI cli = new CLI(args); cli.parse(); } }","dependencies":[{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/cli/CLI.java","file_content":"package one.wangwei.blockchain.cli; import lombok.extern.slf4j.Slf4j; import one.wangwei.blockchain.block.Block; import one.wangwei.blockchain.block.Blockchain; import one.wangwei.blockchain.pow.ProofOfWork; import one.wangwei.blockchain.store.RocksDBUtils; import one.wangwei.blockchain.transaction.TXOutput; import one.wangwei.blockchain.transaction.Transaction; import one.wangwei.blockchain.transaction.UTXOSet; import one.wangwei.blockchain.util.Base58Check; import one.wangwei.blockchain.wallet.Wallet; import one.wangwei.blockchain.wallet.WalletUtils; import org.apache.commons.cli.*; import org.apache.commons.lang3.StringUtils; import org.apache.commons.lang3.math.NumberUtils; import java.util.Arrays; import java.util.Set; @Slf4j public class CLI { private String[] args; private Options options = new Options(); public CLI(String[] args) { this.args = args; Option helpCmd = Option.builder(\"h\").desc(\"show help\").build(); options.addOption(helpCmd); Option address = Option.builder(\"address\").hasArg(true).desc(\"Source wallet address\").build(); Option sendFrom = Option.builder(\"from\").hasArg(true).desc(\"Source wallet address\").build(); Option sendTo = Option.builder(\"to\").hasArg(true).desc(\"Destination wallet address\").build(); Option sendAmount = Option.builder(\"amount\").hasArg(true).desc(\"Amount to send\").build(); options.addOption(address); options.addOption(sendFrom); options.addOption(sendTo); options.addOption(sendAmount); } public void parse() { this.validateArgs(args); try { CommandLineParser parser = new DefaultParser(); CommandLine cmd = parser.parse(options, args); switch (args[0]) { case \"createblockchain\": String createblockchainAddress = cmd.getOptionValue(\"address\"); if (StringUtils.isBlank(createblockchainAddress)) { help(); } this.createBlockchain(createblockchainAddress); break; case \"getbalance\": String getBalanceAddress = cmd.getOptionValue(\"address\"); if (StringUtils.isBlank(getBalanceAddress)) { help(); } this.getBalance(getBalanceAddress); break; case \"send\": String sendFrom = cmd.getOptionValue(\"from\"); String sendTo = cmd.getOptionValue(\"to\"); String sendAmount = cmd.getOptionValue(\"amount\"); if (StringUtils.isBlank(sendFrom) || StringUtils.isBlank(sendTo) || !NumberUtils.isDigits(sendAmount)) { help(); } this.send(sendFrom, sendTo, Integer.valueOf(sendAmount)); break; case \"createwallet\": this.createWallet(); break; case \"printaddresses\": this.printAddresses(); break; case \"printchain\": this.printChain(); break; case \"h\": this.help(); break; default: this.help(); } } catch (Exception e) { log.error(\"Fail to parse cli command ! \", e); } finally { RocksDBUtils.getInstance().closeDB(); } } private void validateArgs(String[] args) { if (args == null || args.length < 1) { help(); } } private void createBlockchain(String address) { Blockchain blockchain = Blockchain.createBlockchain(address); UTXOSet utxoSet = new UTXOSet(blockchain); utxoSet.reIndex(); log.info(\"Done ! \"); } private void createWallet() throws Exception { Wallet wallet = WalletUtils.getInstance().createWallet(); log.info(\"wallet address : \" + wallet.getAddress()); } private void printAddresses() { Set<String> addresses = WalletUtils.getInstance().getAddresses(); if (addresses == null || addresses.isEmpty()) { log.info(\"There isn't address\"); return; } for (String address : addresses) { log.info(\"Wallet address: \" + address); } } private void getBalance(String address) { try { Base58Check.base58ToBytes(address); } catch (Exception e) { log.error(\"ERROR: invalid wallet address\", e); throw new RuntimeException(\"ERROR: invalid wallet address\", e); } byte[] versionedPayload = Base58Check.base58ToBytes(address); byte[] pubKeyHash = Arrays.copyOfRange(versionedPayload, 1, versionedPayload.length); Blockchain blockchain = Blockchain.createBlockchain(address); UTXOSet utxoSet = new UTXOSet(blockchain); TXOutput[] txOutputs = utxoSet.findUTXOs(pubKeyHash); int balance = 0; if (txOutputs != null && txOutputs.length > 0) { for (TXOutput txOutput : txOutputs) { balance += txOutput.getValue(); } } log.info(\"Balance of '{}': {}\\n\", new Object[]{address, balance}); } private void send(String from, String to, int amount) throws Exception { try { Base58Check.base58ToBytes(from); } catch (Exception e) { log.error(\"ERROR: sender address invalid ! address=\" + from, e); throw new RuntimeException(\"ERROR: sender address invalid ! address=\" + from, e); } try { Base58Check.base58ToBytes(to); } catch (Exception e) { log.error(\"ERROR: receiver address invalid ! address=\" + to, e); throw new RuntimeException(\"ERROR: receiver address invalid ! address=\" + to, e); } if (amount < 1) { log.error(\"ERROR: amount invalid ! amount=\" + amount); throw new RuntimeException(\"ERROR: amount invalid ! amount=\" + amount); } Blockchain blockchain = Blockchain.createBlockchain(from); Transaction transaction = Transaction.newUTXOTransaction(from, to, amount, blockchain); Transaction rewardTx = Transaction.newCoinbaseTX(from, \"\"); Block newBlock = blockchain.mineBlock(new Transaction[]{transaction, rewardTx}); new UTXOSet(blockchain).update(newBlock); log.info(\"Success!\"); } private void help() { System.out.println(\"Usage:\"); System.out.println(\" createwallet - Generates a new key-pair and saves it into the wallet file\"); System.out.println(\" printaddresses - print all wallet address\"); System.out.println(\" getbalance -address ADDRESS - Get balance of ADDRESS\"); System.out.println(\" createblockchain -address ADDRESS - Create a blockchain and send genesis block reward to ADDRESS\"); System.out.println(\" printchain - Print all the blocks of the blockchain\"); System.out.println(\" send -from FROM -to TO -amount AMOUNT - Send AMOUNT of coins from FROM address to TO\"); System.exit(0); } private void printChain() { Blockchain blockchain = Blockchain.initBlockchainFromDB(); for (Blockchain.BlockchainIterator iterator = blockchain.getBlockchainIterator(); iterator.hashNext(); ) { Block block = iterator.next(); if (block != null) { boolean validate = ProofOfWork.newProofOfWork(block).validate(); log.info(block.toString() + \", validate = \" + validate); } } } }"}]}}
{"project_id":275,"chunk_id":0,"content":{"main_file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/wallet/Wallet.java","main_file_content":"package one.wangwei.blockchain.wallet; import lombok.AllArgsConstructor; import lombok.Data; import lombok.extern.slf4j.Slf4j; import one.wangwei.blockchain.util.Base58Check; import one.wangwei.blockchain.util.BtcAddressUtils; import org.bouncycastle.jcajce.provider.asymmetric.ec.BCECPrivateKey; import org.bouncycastle.jcajce.provider.asymmetric.ec.BCECPublicKey; import org.bouncycastle.jce.ECNamedCurveTable; import org.bouncycastle.jce.provider.BouncyCastleProvider; import org.bouncycastle.jce.spec.ECParameterSpec; import java.io.ByteArrayOutputStream; import java.io.IOException; import java.io.Serializable; import java.security.KeyPair; import java.security.KeyPairGenerator; import java.security.SecureRandom; import java.security.Security; @Data @AllArgsConstructor @Slf4j public class Wallet implements Serializable { private static final long serialVersionUID = 166249065006236265L; private static final int ADDRESS_CHECKSUM_LEN = 4; private BCECPrivateKey privateKey; private byte[] publicKey; public Wallet() { initWallet(); } private void initWallet() { try { KeyPair keyPair = newECKeyPair(); BCECPrivateKey privateKey = (BCECPrivateKey) keyPair.getPrivate(); BCECPublicKey publicKey = (BCECPublicKey) keyPair.getPublic(); byte[] publicKeyBytes = publicKey.getQ().getEncoded(false); this.setPrivateKey(privateKey); this.setPublicKey(publicKeyBytes); } catch (Exception e) { log.error(\"Fail to init wallet ! \", e); throw new RuntimeException(\"Fail to init wallet ! \", e); } } private KeyPair newECKeyPair() throws Exception { Security.addProvider(new BouncyCastleProvider()); KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"ECDSA\", BouncyCastleProvider.PROVIDER_NAME); ECParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec(\"secp256k1\"); keyPairGenerator.initialize(ecSpec, new SecureRandom()); return keyPairGenerator.generateKeyPair(); } public String getAddress() { try { byte[] ripemdHashedKey = BtcAddressUtils.ripeMD160Hash(this.getPublicKey()); ByteArrayOutputStream addrStream = new ByteArrayOutputStream(); addrStream.write((byte) 0); addrStream.write(ripemdHashedKey); byte[] versionedPayload = addrStream.toByteArray(); byte[] checksum = BtcAddressUtils.checksum(versionedPayload); addrStream.write(checksum); byte[] binaryAddress = addrStream.toByteArray(); return Base58Check.rawBytesToBase58(binaryAddress); } catch (IOException e) { e.printStackTrace(); } throw new RuntimeException(\"Fail to get wallet address ! \"); } }","dependencies":[{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/util/Base58Check.java","file_content":"package one.wangwei.blockchain.util; import java.io.ByteArrayOutputStream; import java.io.IOException; import java.math.BigInteger; import java.util.Arrays; public final class Base58Check { public static String bytesToBase58(byte[] data) { return rawBytesToBase58(addCheckHash(data)); } public static String rawBytesToBase58(byte[] data) { StringBuilder sb = new StringBuilder(); BigInteger num = new BigInteger(1, data); while (num.signum() != 0) { BigInteger[] quotrem = num.divideAndRemainder(ALPHABET_SIZE); sb.append(ALPHABET.charAt(quotrem[1].intValue())); num = quotrem[0]; } for (int i = 0; i < data.length && data[i] == 0; i++) { sb.append(ALPHABET.charAt(0)); } return sb.reverse().toString(); } static byte[] addCheckHash(byte[] data) { try { byte[] hash = Arrays.copyOf(BtcAddressUtils.doubleHash(data), 4); ByteArrayOutputStream buf = new ByteArrayOutputStream(); buf.write(data); buf.write(hash); return buf.toByteArray(); } catch (IOException e) { throw new AssertionError(e); } } public static byte[] base58ToBytes(String s) { byte[] concat = base58ToRawBytes(s); byte[] data = Arrays.copyOf(concat, concat.length - 4); byte[] hash = Arrays.copyOfRange(concat, concat.length - 4, concat.length); byte[] rehash = Arrays.copyOf(BtcAddressUtils.doubleHash(data), 4); if (!Arrays.equals(rehash, hash)) { throw new IllegalArgumentException(\"Checksum mismatch\"); } return data; } static byte[] base58ToRawBytes(String s) { BigInteger num = BigInteger.ZERO; for (int i = 0; i < s.length(); i++) { num = num.multiply(ALPHABET_SIZE); int digit = ALPHABET.indexOf(s.charAt(i)); if (digit == -1) { throw new IllegalArgumentException(\"Invalid character for Base58Check\"); } num = num.add(BigInteger.valueOf(digit)); } byte[] b = num.toByteArray(); if (b[0] == 0) { b = Arrays.copyOfRange(b, 1, b.length); } try { ByteArrayOutputStream buf = new ByteArrayOutputStream(); for (int i = 0; i < s.length() && s.charAt(i) == ALPHABET.charAt(0); i++) { buf.write(0); } buf.write(b); return buf.toByteArray(); } catch (IOException e) { throw new AssertionError(e); } } private static final String ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"; private static final BigInteger ALPHABET_SIZE = BigInteger.valueOf(ALPHABET.length()); private Base58Check() { } }"},{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/util/BtcAddressUtils.java","file_content":"package one.wangwei.blockchain.util; import org.apache.commons.codec.digest.DigestUtils; import org.bouncycastle.crypto.digests.RIPEMD160Digest; import org.bouncycastle.util.Arrays; public class BtcAddressUtils { public static byte[] doubleHash(byte[] data) { return DigestUtils.sha256(DigestUtils.sha256(data)); } public static byte[] ripeMD160Hash(byte[] pubKey) { byte[] shaHashedKey = DigestUtils.sha256(pubKey); RIPEMD160Digest ripemd160 = new RIPEMD160Digest(); ripemd160.update(shaHashedKey, 0, shaHashedKey.length); byte[] output = new byte[ripemd160.getDigestSize()]; ripemd160.doFinal(output, 0); return output; } public static byte[] checksum(byte[] payload) { return Arrays.copyOfRange(doubleHash(payload), 0, 4); } }"}]}}
{"project_id":275,"chunk_id":0,"content":{"main_file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/wallet/WalletUtils.java","main_file_content":"package one.wangwei.blockchain.wallet; import com.google.common.collect.Maps; import lombok.AllArgsConstructor; import lombok.Cleanup; import lombok.Data; import lombok.NoArgsConstructor; import lombok.extern.slf4j.Slf4j; import one.wangwei.blockchain.util.Base58Check; import javax.crypto.Cipher; import javax.crypto.CipherInputStream; import javax.crypto.CipherOutputStream; import javax.crypto.SealedObject; import javax.crypto.spec.SecretKeySpec; import java.io.*; import java.util.Map; import java.util.Set; @Slf4j public class WalletUtils { private volatile static WalletUtils instance; public static WalletUtils getInstance() { if (instance == null) { synchronized (WalletUtils.class) { if (instance == null) { instance = new WalletUtils(); } } } return instance; } private WalletUtils() { initWalletFile(); } private final static String WALLET_FILE = \"wallet.dat\"; private static final String ALGORITHM = \"AES\"; private static final byte[] CIPHER_TEXT = \"2oF@5sC%DNf32y!TmiZi!tG9W5rLaniD\".getBytes(); private void initWalletFile() { File file = new File(WALLET_FILE); if (!file.exists()) { this.saveToDisk(new Wallets()); } else { this.loadFromDisk(); } } public Set<String> getAddresses() { Wallets wallets = this.loadFromDisk(); return wallets.getAddresses(); } public Wallet getWallet(String address) { Wallets wallets = this.loadFromDisk(); return wallets.getWallet(address); } public Wallet createWallet() { Wallet wallet = new Wallet(); Wallets wallets = this.loadFromDisk(); wallets.addWallet(wallet); this.saveToDisk(wallets); return wallet; } private void saveToDisk(Wallets wallets) { try { if (wallets == null) { log.error(\"Fail to save wallet to file ! wallets is null \"); throw new Exception(\"ERROR: Fail to save wallet to file !\"); } SecretKeySpec sks = new SecretKeySpec(CIPHER_TEXT, ALGORITHM); Cipher cipher = Cipher.getInstance(ALGORITHM); cipher.init(Cipher.ENCRYPT_MODE, sks); SealedObject sealedObject = new SealedObject(wallets, cipher); @Cleanup CipherOutputStream cos = new CipherOutputStream( new BufferedOutputStream(new FileOutputStream(WALLET_FILE)), cipher); @Cleanup ObjectOutputStream outputStream = new ObjectOutputStream(cos); outputStream.writeObject(sealedObject); } catch (Exception e) { log.error(\"Fail to save wallet to disk !\", e); throw new RuntimeException(\"Fail to save wallet to disk !\"); } } private Wallets loadFromDisk() { try { SecretKeySpec sks = new SecretKeySpec(CIPHER_TEXT, ALGORITHM); Cipher cipher = Cipher.getInstance(ALGORITHM); cipher.init(Cipher.DECRYPT_MODE, sks); @Cleanup CipherInputStream cipherInputStream = new CipherInputStream( new BufferedInputStream(new FileInputStream(WALLET_FILE)), cipher); @Cleanup ObjectInputStream inputStream = new ObjectInputStream(cipherInputStream); SealedObject sealedObject = (SealedObject) inputStream.readObject(); return (Wallets) sealedObject.getObject(cipher); } catch (Exception e) { log.error(\"Fail to load wallet from disk ! \", e); throw new RuntimeException(\"Fail to load wallet from disk ! \"); } } @Data @NoArgsConstructor @AllArgsConstructor public static class Wallets implements Serializable { private static final long serialVersionUID = -2542070981569243131L; private Map<String, Wallet> walletMap = Maps.newHashMap(); private void addWallet(Wallet wallet) { try { this.walletMap.put(wallet.getAddress(), wallet); } catch (Exception e) { log.error(\"Fail to add wallet ! \", e); throw new RuntimeException(\"Fail to add wallet !\"); } } Set<String> getAddresses() { if (walletMap == null) { log.error(\"Fail to get address ! walletMap is null ! \"); throw new RuntimeException(\"Fail to get addresses ! \"); } return walletMap.keySet(); } Wallet getWallet(String address) { try { Base58Check.base58ToBytes(address); } catch (Exception e) { log.error(\"Fail to get wallet ! address invalid ! address=\" + address, e); throw new RuntimeException(\"Fail to get wallet ! \"); } Wallet wallet = walletMap.get(address); if (wallet == null) { log.error(\"Fail to get wallet ! wallet don`t exist ! address=\" + address); throw new RuntimeException(\"Fail to get wallet ! \"); } return wallet; } } }","dependencies":[{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/util/Base58Check.java","file_content":"package one.wangwei.blockchain.util; import java.io.ByteArrayOutputStream; import java.io.IOException; import java.math.BigInteger; import java.util.Arrays; public final class Base58Check { public static String bytesToBase58(byte[] data) { return rawBytesToBase58(addCheckHash(data)); } public static String rawBytesToBase58(byte[] data) { StringBuilder sb = new StringBuilder(); BigInteger num = new BigInteger(1, data); while (num.signum() != 0) { BigInteger[] quotrem = num.divideAndRemainder(ALPHABET_SIZE); sb.append(ALPHABET.charAt(quotrem[1].intValue())); num = quotrem[0]; } for (int i = 0; i < data.length && data[i] == 0; i++) { sb.append(ALPHABET.charAt(0)); } return sb.reverse().toString(); } static byte[] addCheckHash(byte[] data) { try { byte[] hash = Arrays.copyOf(BtcAddressUtils.doubleHash(data), 4); ByteArrayOutputStream buf = new ByteArrayOutputStream(); buf.write(data); buf.write(hash); return buf.toByteArray(); } catch (IOException e) { throw new AssertionError(e); } } public static byte[] base58ToBytes(String s) { byte[] concat = base58ToRawBytes(s); byte[] data = Arrays.copyOf(concat, concat.length - 4); byte[] hash = Arrays.copyOfRange(concat, concat.length - 4, concat.length); byte[] rehash = Arrays.copyOf(BtcAddressUtils.doubleHash(data), 4); if (!Arrays.equals(rehash, hash)) { throw new IllegalArgumentException(\"Checksum mismatch\"); } return data; } static byte[] base58ToRawBytes(String s) { BigInteger num = BigInteger.ZERO; for (int i = 0; i < s.length(); i++) { num = num.multiply(ALPHABET_SIZE); int digit = ALPHABET.indexOf(s.charAt(i)); if (digit == -1) { throw new IllegalArgumentException(\"Invalid character for Base58Check\"); } num = num.add(BigInteger.valueOf(digit)); } byte[] b = num.toByteArray(); if (b[0] == 0) { b = Arrays.copyOfRange(b, 1, b.length); } try { ByteArrayOutputStream buf = new ByteArrayOutputStream(); for (int i = 0; i < s.length() && s.charAt(i) == ALPHABET.charAt(0); i++) { buf.write(0); } buf.write(b); return buf.toByteArray(); } catch (IOException e) { throw new AssertionError(e); } } private static final String ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"; private static final BigInteger ALPHABET_SIZE = BigInteger.valueOf(ALPHABET.length()); private Base58Check() { } }"},{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/wallet/Wallet.java","file_content":"package one.wangwei.blockchain.wallet; import lombok.AllArgsConstructor; import lombok.Data; import lombok.extern.slf4j.Slf4j; import one.wangwei.blockchain.util.Base58Check; import one.wangwei.blockchain.util.BtcAddressUtils; import org.bouncycastle.jcajce.provider.asymmetric.ec.BCECPrivateKey; import org.bouncycastle.jcajce.provider.asymmetric.ec.BCECPublicKey; import org.bouncycastle.jce.ECNamedCurveTable; import org.bouncycastle.jce.provider.BouncyCastleProvider; import org.bouncycastle.jce.spec.ECParameterSpec; import java.io.ByteArrayOutputStream; import java.io.IOException; import java.io.Serializable; import java.security.KeyPair; import java.security.KeyPairGenerator; import java.security.SecureRandom; import java.security.Security; @Data @AllArgsConstructor @Slf4j public class Wallet implements Serializable { private static final long serialVersionUID = 166249065006236265L; private static final int ADDRESS_CHECKSUM_LEN = 4; private BCECPrivateKey privateKey; private byte[] publicKey; public Wallet() { initWallet(); } private void initWallet() { try { KeyPair keyPair = newECKeyPair(); BCECPrivateKey privateKey = (BCECPrivateKey) keyPair.getPrivate(); BCECPublicKey publicKey = (BCECPublicKey) keyPair.getPublic(); byte[] publicKeyBytes = publicKey.getQ().getEncoded(false); this.setPrivateKey(privateKey); this.setPublicKey(publicKeyBytes); } catch (Exception e) { log.error(\"Fail to init wallet ! \", e); throw new RuntimeException(\"Fail to init wallet ! \", e); } } private KeyPair newECKeyPair() throws Exception { Security.addProvider(new BouncyCastleProvider()); KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"ECDSA\", BouncyCastleProvider.PROVIDER_NAME); ECParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec(\"secp256k1\"); keyPairGenerator.initialize(ecSpec, new SecureRandom()); return keyPairGenerator.generateKeyPair(); } public String getAddress() { try { byte[] ripemdHashedKey = BtcAddressUtils.ripeMD160Hash(this.getPublicKey()); ByteArrayOutputStream addrStream = new ByteArrayOutputStream(); addrStream.write((byte) 0); addrStream.write(ripemdHashedKey); byte[] versionedPayload = addrStream.toByteArray(); byte[] checksum = BtcAddressUtils.checksum(versionedPayload); addrStream.write(checksum); byte[] binaryAddress = addrStream.toByteArray(); return Base58Check.rawBytesToBase58(binaryAddress); } catch (IOException e) { e.printStackTrace(); } throw new RuntimeException(\"Fail to get wallet address ! \"); } }"}]}}
{"project_id":275,"chunk_id":0,"content":{"main_file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/block/Blockchain.java","main_file_content":"package one.wangwei.blockchain.block; import com.google.common.collect.Maps; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import lombok.extern.slf4j.Slf4j; import one.wangwei.blockchain.store.RocksDBUtils; import one.wangwei.blockchain.transaction.TXInput; import one.wangwei.blockchain.transaction.TXOutput; import one.wangwei.blockchain.transaction.Transaction; import org.apache.commons.codec.binary.Hex; import org.apache.commons.lang3.ArrayUtils; import org.apache.commons.lang3.StringUtils; import org.bouncycastle.jcajce.provider.asymmetric.ec.BCECPrivateKey; import java.util.Arrays; import java.util.Map; @Data @AllArgsConstructor @NoArgsConstructor @Slf4j public class Blockchain { private String lastBlockHash; public static Blockchain initBlockchainFromDB() { String lastBlockHash = RocksDBUtils.getInstance().getLastBlockHash(); if (lastBlockHash == null) { throw new RuntimeException(\"ERROR: Fail to init blockchain from db. \"); } return new Blockchain(lastBlockHash); } public static Blockchain createBlockchain(String address) { String lastBlockHash = RocksDBUtils.getInstance().getLastBlockHash(); if (StringUtils.isBlank(lastBlockHash)) { String genesisCoinbaseData = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\"; Transaction coinbaseTX = Transaction.newCoinbaseTX(address, genesisCoinbaseData); Block genesisBlock = Block.newGenesisBlock(coinbaseTX); lastBlockHash = genesisBlock.getHash(); RocksDBUtils.getInstance().putBlock(genesisBlock); RocksDBUtils.getInstance().putLastBlockHash(lastBlockHash); } return new Blockchain(lastBlockHash); } public Block mineBlock(Transaction[] transactions) { for (Transaction tx : transactions) { if (!this.verifyTransactions(tx)) { log.error(\"ERROR: Fail to mine block ! Invalid transaction ! tx=\" + tx.toString()); throw new RuntimeException(\"ERROR: Fail to mine block ! Invalid transaction ! \"); } } String lastBlockHash = RocksDBUtils.getInstance().getLastBlockHash(); if (lastBlockHash == null) { throw new RuntimeException(\"ERROR: Fail to get last block hash ! \"); } Block block = Block.newBlock(lastBlockHash, transactions); this.addBlock(block); return block; } private void addBlock(Block block) { RocksDBUtils.getInstance().putLastBlockHash(block.getHash()); RocksDBUtils.getInstance().putBlock(block); this.lastBlockHash = block.getHash(); } public class BlockchainIterator { private String currentBlockHash; private BlockchainIterator(String currentBlockHash) { this.currentBlockHash = currentBlockHash; } public boolean hashNext() { if (StringUtils.isBlank(currentBlockHash)) { return false; } Block lastBlock = RocksDBUtils.getInstance().getBlock(currentBlockHash); if (lastBlock == null) { return false; } if (lastBlock.getPrevBlockHash().length() == 0) { return true; } return RocksDBUtils.getInstance().getBlock(lastBlock.getPrevBlockHash()) != null; } public Block next() { Block currentBlock = RocksDBUtils.getInstance().getBlock(currentBlockHash); if (currentBlock != null) { this.currentBlockHash = currentBlock.getPrevBlockHash(); return currentBlock; } return null; } } public BlockchainIterator getBlockchainIterator() { return new BlockchainIterator(lastBlockHash); } public Map<String, TXOutput[]> findAllUTXOs() { Map<String, int[]> allSpentTXOs = this.getAllSpentTXOs(); Map<String, TXOutput[]> allUTXOs = Maps.newHashMap(); for (BlockchainIterator blockchainIterator = this.getBlockchainIterator(); blockchainIterator.hashNext(); ) { Block block = blockchainIterator.next(); for (Transaction transaction : block.getTransactions()) { String txId = Hex.encodeHexString(transaction.getTxId()); int[] spentOutIndexArray = allSpentTXOs.get(txId); TXOutput[] txOutputs = transaction.getOutputs(); for (int outIndex = 0; outIndex < txOutputs.length; outIndex++) { if (spentOutIndexArray != null && ArrayUtils.contains(spentOutIndexArray, outIndex)) { continue; } TXOutput[] UTXOArray = allUTXOs.get(txId); if (UTXOArray == null) { UTXOArray = new TXOutput[]{txOutputs[outIndex]}; } else { UTXOArray = ArrayUtils.add(UTXOArray, txOutputs[outIndex]); } allUTXOs.put(txId, UTXOArray); } } } return allUTXOs; } private Map<String, int[]> getAllSpentTXOs() { Map<String, int[]> spentTXOs = Maps.newHashMap(); for (BlockchainIterator blockchainIterator = this.getBlockchainIterator(); blockchainIterator.hashNext(); ) { Block block = blockchainIterator.next(); for (Transaction transaction : block.getTransactions()) { if (transaction.isCoinbase()) { continue; } for (TXInput txInput : transaction.getInputs()) { String inTxId = Hex.encodeHexString(txInput.getTxId()); int[] spentOutIndexArray = spentTXOs.get(inTxId); if (spentOutIndexArray == null) { spentOutIndexArray = new int[]{txInput.getTxOutputIndex()}; } else { spentOutIndexArray = ArrayUtils.add(spentOutIndexArray, txInput.getTxOutputIndex()); } spentTXOs.put(inTxId, spentOutIndexArray); } } } return spentTXOs; } private Transaction findTransaction(byte[] txId) { for (BlockchainIterator iterator = this.getBlockchainIterator(); iterator.hashNext(); ) { Block block = iterator.next(); for (Transaction tx : block.getTransactions()) { if (Arrays.equals(tx.getTxId(), txId)) { return tx; } } } throw new RuntimeException(\"ERROR: Can not found tx by txId ! \"); } public void signTransaction(Transaction tx, BCECPrivateKey privateKey) throws Exception { Map<String, Transaction> prevTxMap = Maps.newHashMap(); for (TXInput txInput : tx.getInputs()) { Transaction prevTx = this.findTransaction(txInput.getTxId()); prevTxMap.put(Hex.encodeHexString(txInput.getTxId()), prevTx); } tx.sign(privateKey, prevTxMap); } private boolean verifyTransactions(Transaction tx) { if (tx.isCoinbase()) { return true; } Map<String, Transaction> prevTx = Maps.newHashMap(); for (TXInput txInput : tx.getInputs()) { Transaction transaction = this.findTransaction(txInput.getTxId()); prevTx.put(Hex.encodeHexString(txInput.getTxId()), transaction); } try { return tx.verify(prevTx); } catch (Exception e) { log.error(\"Fail to verify transaction ! transaction invalid ! \", e); throw new RuntimeException(\"Fail to verify transaction ! transaction invalid ! \", e); } } }","dependencies":[{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/block/Block.java","file_content":"package one.wangwei.blockchain.block; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import lombok.ToString; import one.wangwei.blockchain.pow.PowResult; import one.wangwei.blockchain.pow.ProofOfWork; import one.wangwei.blockchain.transaction.MerkleTree; import one.wangwei.blockchain.transaction.Transaction; import one.wangwei.blockchain.util.ByteUtils; import java.time.Instant; @Data @AllArgsConstructor @NoArgsConstructor @ToString public class Block { private String hash; private String prevBlockHash; private Transaction[] transactions; private long timeStamp; private long nonce; public static Block newGenesisBlock(Transaction coinbase) { return Block.newBlock(ByteUtils.ZERO_HASH, new Transaction[]{coinbase}); } public static Block newBlock(String previousHash, Transaction[] transactions) { Block block = new Block(\"\", previousHash, transactions, Instant.now().getEpochSecond(), 0); ProofOfWork pow = ProofOfWork.newProofOfWork(block); PowResult powResult = pow.run(); block.setHash(powResult.getHash()); block.setNonce(powResult.getNonce()); return block; } public byte[] hashTransaction() { byte[][] txIdArrays = new byte[this.getTransactions().length][]; for (int i = 0; i < this.getTransactions().length; i++) { txIdArrays[i] = this.getTransactions()[i].hash(); } return new MerkleTree(txIdArrays).getRoot().getHash(); } }"},{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/store/RocksDBUtils.java","file_content":"package one.wangwei.blockchain.store; import com.google.common.collect.Maps; import lombok.Getter; import lombok.extern.slf4j.Slf4j; import one.wangwei.blockchain.block.Block; import one.wangwei.blockchain.transaction.TXOutput; import one.wangwei.blockchain.util.SerializeUtils; import org.rocksdb.RocksDB; import org.rocksdb.RocksDBException; import java.util.Map; @Slf4j public class RocksDBUtils { private static final String DB_FILE = \"blockchain.db\"; private static final String BLOCKS_BUCKET_KEY = \"blocks\"; private static final String CHAINSTATE_BUCKET_KEY = \"chainstate\"; private static final String LAST_BLOCK_KEY = \"l\"; private volatile static RocksDBUtils instance; public static RocksDBUtils getInstance() { if (instance == null) { synchronized (RocksDBUtils.class) { if (instance == null) { instance = new RocksDBUtils(); } } } return instance; } private RocksDB db; private Map<String, byte[]> blocksBucket; @Getter private Map<String, byte[]> chainstateBucket; private RocksDBUtils() { openDB(); initBlockBucket(); initChainStateBucket(); } private void openDB() { try { db = RocksDB.open(DB_FILE); } catch (RocksDBException e) { log.error(\"Fail to open db ! \", e); throw new RuntimeException(\"Fail to open db ! \", e); } } private void initBlockBucket() { try { byte[] blockBucketKey = SerializeUtils.serialize(BLOCKS_BUCKET_KEY); byte[] blockBucketBytes = db.get(blockBucketKey); if (blockBucketBytes != null) { blocksBucket = (Map) SerializeUtils.deserialize(blockBucketBytes); } else { blocksBucket = Maps.newHashMap(); db.put(blockBucketKey, SerializeUtils.serialize(blocksBucket)); } } catch (RocksDBException e) { log.error(\"Fail to init block bucket ! \", e); throw new RuntimeException(\"Fail to init block bucket ! \", e); } } private void initChainStateBucket() { try { byte[] chainstateBucketKey = SerializeUtils.serialize(CHAINSTATE_BUCKET_KEY); byte[] chainstateBucketBytes = db.get(chainstateBucketKey); if (chainstateBucketBytes != null) { chainstateBucket = (Map) SerializeUtils.deserialize(chainstateBucketBytes); } else { chainstateBucket = Maps.newHashMap(); db.put(chainstateBucketKey, SerializeUtils.serialize(chainstateBucket)); } } catch (RocksDBException e) { log.error(\"Fail to init chainstate bucket ! \", e); throw new RuntimeException(\"Fail to init chainstate bucket ! \", e); } } public void putLastBlockHash(String tipBlockHash) { try { blocksBucket.put(LAST_BLOCK_KEY, SerializeUtils.serialize(tipBlockHash)); db.put(SerializeUtils.serialize(BLOCKS_BUCKET_KEY), SerializeUtils.serialize(blocksBucket)); } catch (RocksDBException e) { log.error(\"Fail to put last block hash ! tipBlockHash=\" + tipBlockHash, e); throw new RuntimeException(\"Fail to put last block hash ! tipBlockHash=\" + tipBlockHash, e); } } public String getLastBlockHash() { byte[] lastBlockHashBytes = blocksBucket.get(LAST_BLOCK_KEY); if (lastBlockHashBytes != null) { return (String) SerializeUtils.deserialize(lastBlockHashBytes); } return \"\"; } public void putBlock(Block block) { try { blocksBucket.put(block.getHash(), SerializeUtils.serialize(block)); db.put(SerializeUtils.serialize(BLOCKS_BUCKET_KEY), SerializeUtils.serialize(blocksBucket)); } catch (RocksDBException e) { log.error(\"Fail to put block ! block=\" + block.toString(), e); throw new RuntimeException(\"Fail to put block ! block=\" + block.toString(), e); } } public Block getBlock(String blockHash) { byte[] blockBytes = blocksBucket.get(blockHash); if (blockBytes != null) { return (Block) SerializeUtils.deserialize(blockBytes); } throw new RuntimeException(\"Fail to get block ! blockHash=\" + blockHash); } public void cleanChainStateBucket() { try { chainstateBucket.clear(); } catch (Exception e) { log.error(\"Fail to clear chainstate bucket ! \", e); throw new RuntimeException(\"Fail to clear chainstate bucket ! \", e); } } public void putUTXOs(String key, TXOutput[] utxos) { try { chainstateBucket.put(key, SerializeUtils.serialize(utxos)); db.put(SerializeUtils.serialize(CHAINSTATE_BUCKET_KEY), SerializeUtils.serialize(chainstateBucket)); } catch (Exception e) { log.error(\"Fail to put UTXOs into chainstate bucket ! key=\" + key, e); throw new RuntimeException(\"Fail to put UTXOs into chainstate bucket ! key=\" + key, e); } } public TXOutput[] getUTXOs(String key) { byte[] utxosByte = chainstateBucket.get(key); if (utxosByte != null) { return (TXOutput[]) SerializeUtils.deserialize(utxosByte); } return null; } public void deleteUTXOs(String key) { try { chainstateBucket.remove(key); db.put(SerializeUtils.serialize(CHAINSTATE_BUCKET_KEY), SerializeUtils.serialize(chainstateBucket)); } catch (Exception e) { log.error(\"Fail to delete UTXOs by key ! key=\" + key, e); throw new RuntimeException(\"Fail to delete UTXOs by key ! key=\" + key, e); } } public void closeDB() { try { db.close(); } catch (Exception e) { log.error(\"Fail to close db ! \", e); throw new RuntimeException(\"Fail to close db ! \", e); } } }"},{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/transaction/TXInput.java","file_content":"package one.wangwei.blockchain.transaction; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import one.wangwei.blockchain.util.BtcAddressUtils; import java.util.Arrays; @Data @AllArgsConstructor @NoArgsConstructor public class TXInput { private byte[] txId; private int txOutputIndex; private byte[] signature; private byte[] pubKey; public boolean usesKey(byte[] pubKeyHash) { byte[] lockingHash = BtcAddressUtils.ripeMD160Hash(this.getPubKey()); return Arrays.equals(lockingHash, pubKeyHash); } }"},{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/transaction/TXOutput.java","file_content":"package one.wangwei.blockchain.transaction; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import one.wangwei.blockchain.util.Base58Check; import java.util.Arrays; @Data @AllArgsConstructor @NoArgsConstructor public class TXOutput { private int value; private byte[] pubKeyHash; public static TXOutput newTXOutput(int value, String address) { byte[] versionedPayload = Base58Check.base58ToBytes(address); byte[] pubKeyHash = Arrays.copyOfRange(versionedPayload, 1, versionedPayload.length); return new TXOutput(value, pubKeyHash); } public boolean isLockedWithKey(byte[] pubKeyHash) { return Arrays.equals(this.getPubKeyHash(), pubKeyHash); } }"},{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/transaction/Transaction.java","file_content":"package one.wangwei.blockchain.transaction; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import lombok.extern.slf4j.Slf4j; import one.wangwei.blockchain.block.Blockchain; import one.wangwei.blockchain.util.BtcAddressUtils; import one.wangwei.blockchain.util.SerializeUtils; import one.wangwei.blockchain.wallet.Wallet; import one.wangwei.blockchain.wallet.WalletUtils; import org.apache.commons.codec.binary.Hex; import org.apache.commons.codec.digest.DigestUtils; import org.apache.commons.lang3.ArrayUtils; import org.apache.commons.lang3.StringUtils; import org.bouncycastle.jcajce.provider.asymmetric.ec.BCECPrivateKey; import org.bouncycastle.jce.ECNamedCurveTable; import org.bouncycastle.jce.provider.BouncyCastleProvider; import org.bouncycastle.jce.spec.ECParameterSpec; import org.bouncycastle.jce.spec.ECPublicKeySpec; import org.bouncycastle.math.ec.ECPoint; import java.math.BigInteger; import java.security.KeyFactory; import java.security.PublicKey; import java.security.Security; import java.security.Signature; import java.util.Arrays; import java.util.Iterator; import java.util.Map; @Data @AllArgsConstructor @NoArgsConstructor @Slf4j public class Transaction { private static final int SUBSIDY = 10; private byte[] txId; private TXInput[] inputs; private TXOutput[] outputs; private long createTime; public byte[] hash() { byte[] serializeBytes = SerializeUtils.serialize(this); Transaction copyTx = (Transaction) SerializeUtils.deserialize(serializeBytes); copyTx.setTxId(new byte[]{}); return DigestUtils.sha256(SerializeUtils.serialize(copyTx)); } public static Transaction newCoinbaseTX(String to, String data) { if (StringUtils.isBlank(data)) { data = String.format(\"Reward to '%s'\", to); } TXInput txInput = new TXInput(new byte[]{}, -1, null, data.getBytes()); TXOutput txOutput = TXOutput.newTXOutput(SUBSIDY, to); Transaction tx = new Transaction(null, new TXInput[]{txInput}, new TXOutput[]{txOutput}, System.currentTimeMillis()); tx.setTxId(tx.hash()); return tx; } public boolean isCoinbase() { return this.getInputs().length == 1 && this.getInputs()[0].getTxId().length == 0 && this.getInputs()[0].getTxOutputIndex() == -1; } public static Transaction newUTXOTransaction(String from, String to, int amount, Blockchain blockchain) throws Exception { Wallet senderWallet = WalletUtils.getInstance().getWallet(from); byte[] pubKey = senderWallet.getPublicKey(); byte[] pubKeyHash = BtcAddressUtils.ripeMD160Hash(pubKey); SpendableOutputResult result = new UTXOSet(blockchain).findSpendableOutputs(pubKeyHash, amount); int accumulated = result.getAccumulated(); Map<String, int[]> unspentOuts = result.getUnspentOuts(); if (accumulated < amount) { log.error(\"ERROR: Not enough funds ! accumulated=\" + accumulated + \", amount=\" + amount); throw new RuntimeException(\"ERROR: Not enough funds ! \"); } Iterator<Map.Entry<String, int[]>> iterator = unspentOuts.entrySet().iterator(); TXInput[] txInputs = {}; while (iterator.hasNext()) { Map.Entry<String, int[]> entry = iterator.next(); String txIdStr = entry.getKey(); int[] outIds = entry.getValue(); byte[] txId = Hex.decodeHex(txIdStr); for (int outIndex : outIds) { txInputs = ArrayUtils.add(txInputs, new TXInput(txId, outIndex, null, pubKey)); } } TXOutput[] txOutput = {}; txOutput = ArrayUtils.add(txOutput, TXOutput.newTXOutput(amount, to)); if (accumulated > amount) { txOutput = ArrayUtils.add(txOutput, TXOutput.newTXOutput((accumulated - amount), from)); } Transaction newTx = new Transaction(null, txInputs, txOutput, System.currentTimeMillis()); newTx.setTxId(newTx.hash()); blockchain.signTransaction(newTx, senderWallet.getPrivateKey()); return newTx; } public Transaction trimmedCopy() { TXInput[] tmpTXInputs = new TXInput[this.getInputs().length]; for (int i = 0; i < this.getInputs().length; i++) { TXInput txInput = this.getInputs()[i]; tmpTXInputs[i] = new TXInput(txInput.getTxId(), txInput.getTxOutputIndex(), null, null); } TXOutput[] tmpTXOutputs = new TXOutput[this.getOutputs().length]; for (int i = 0; i < this.getOutputs().length; i++) { TXOutput txOutput = this.getOutputs()[i]; tmpTXOutputs[i] = new TXOutput(txOutput.getValue(), txOutput.getPubKeyHash()); } return new Transaction(this.getTxId(), tmpTXInputs, tmpTXOutputs, this.getCreateTime()); } public void sign(BCECPrivateKey privateKey, Map<String, Transaction> prevTxMap) throws Exception { if (this.isCoinbase()) { return; } for (TXInput txInput : this.getInputs()) { if (prevTxMap.get(Hex.encodeHexString(txInput.getTxId())) == null) { throw new RuntimeException(\"ERROR: Previous transaction is not correct\"); } } Transaction txCopy = this.trimmedCopy(); Security.addProvider(new BouncyCastleProvider()); Signature ecdsaSign = Signature.getInstance(\"SHA256withECDSA\", BouncyCastleProvider.PROVIDER_NAME); ecdsaSign.initSign(privateKey); for (int i = 0; i < txCopy.getInputs().length; i++) { TXInput txInputCopy = txCopy.getInputs()[i]; Transaction prevTx = prevTxMap.get(Hex.encodeHexString(txInputCopy.getTxId())); TXOutput prevTxOutput = prevTx.getOutputs()[txInputCopy.getTxOutputIndex()]; txInputCopy.setPubKey(prevTxOutput.getPubKeyHash()); txInputCopy.setSignature(null); txCopy.setTxId(txCopy.hash()); txInputCopy.setPubKey(null); ecdsaSign.update(txCopy.getTxId()); byte[] signature = ecdsaSign.sign(); this.getInputs()[i].setSignature(signature); } } public boolean verify(Map<String, Transaction> prevTxMap) throws Exception { if (this.isCoinbase()) { return true; } for (TXInput txInput : this.getInputs()) { if (prevTxMap.get(Hex.encodeHexString(txInput.getTxId())) == null) { throw new RuntimeException(\"ERROR: Previous transaction is not correct\"); } } Transaction txCopy = this.trimmedCopy(); Security.addProvider(new BouncyCastleProvider()); ECParameterSpec ecParameters = ECNamedCurveTable.getParameterSpec(\"secp256k1\"); KeyFactory keyFactory = KeyFactory.getInstance(\"ECDSA\", BouncyCastleProvider.PROVIDER_NAME); Signature ecdsaVerify = Signature.getInstance(\"SHA256withECDSA\", BouncyCastleProvider.PROVIDER_NAME); for (int i = 0; i < this.getInputs().length; i++) { TXInput txInput = this.getInputs()[i]; Transaction prevTx = prevTxMap.get(Hex.encodeHexString(txInput.getTxId())); TXOutput prevTxOutput = prevTx.getOutputs()[txInput.getTxOutputIndex()]; TXInput txInputCopy = txCopy.getInputs()[i]; txInputCopy.setSignature(null); txInputCopy.setPubKey(prevTxOutput.getPubKeyHash()); txCopy.setTxId(txCopy.hash()); txInputCopy.setPubKey(null); BigInteger x = new BigInteger(1, Arrays.copyOfRange(txInput.getPubKey(), 1, 33)); BigInteger y = new BigInteger(1, Arrays.copyOfRange(txInput.getPubKey(), 33, 65)); ECPoint ecPoint = ecParameters.getCurve().createPoint(x, y); ECPublicKeySpec keySpec = new ECPublicKeySpec(ecPoint, ecParameters); PublicKey publicKey = keyFactory.generatePublic(keySpec); ecdsaVerify.initVerify(publicKey); ecdsaVerify.update(txCopy.getTxId()); if (!ecdsaVerify.verify(txInput.getSignature())) { return false; } } return true; } }"}]}}
{"project_id":275,"chunk_id":0,"content":{"main_file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/block/Block.java","main_file_content":"package one.wangwei.blockchain.block; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import lombok.ToString; import one.wangwei.blockchain.pow.PowResult; import one.wangwei.blockchain.pow.ProofOfWork; import one.wangwei.blockchain.transaction.MerkleTree; import one.wangwei.blockchain.transaction.Transaction; import one.wangwei.blockchain.util.ByteUtils; import java.time.Instant; @Data @AllArgsConstructor @NoArgsConstructor @ToString public class Block { private String hash; private String prevBlockHash; private Transaction[] transactions; private long timeStamp; private long nonce; public static Block newGenesisBlock(Transaction coinbase) { return Block.newBlock(ByteUtils.ZERO_HASH, new Transaction[]{coinbase}); } public static Block newBlock(String previousHash, Transaction[] transactions) { Block block = new Block(\"\", previousHash, transactions, Instant.now().getEpochSecond(), 0); ProofOfWork pow = ProofOfWork.newProofOfWork(block); PowResult powResult = pow.run(); block.setHash(powResult.getHash()); block.setNonce(powResult.getNonce()); return block; } public byte[] hashTransaction() { byte[][] txIdArrays = new byte[this.getTransactions().length][]; for (int i = 0; i < this.getTransactions().length; i++) { txIdArrays[i] = this.getTransactions()[i].hash(); } return new MerkleTree(txIdArrays).getRoot().getHash(); } }","dependencies":[{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/pow/PowResult.java","file_content":"package one.wangwei.blockchain.pow; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; @Data @AllArgsConstructor @NoArgsConstructor public class PowResult { private long nonce; private String hash; }"},{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/pow/ProofOfWork.java","file_content":"package one.wangwei.blockchain.pow; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import lombok.extern.slf4j.Slf4j; import one.wangwei.blockchain.block.Block; import one.wangwei.blockchain.util.ByteUtils; import org.apache.commons.codec.digest.DigestUtils; import org.apache.commons.lang3.StringUtils; import java.math.BigInteger; @Data @AllArgsConstructor @NoArgsConstructor @Slf4j public class ProofOfWork { public static final int TARGET_BITS = 16; private Block block; private BigInteger target; public static ProofOfWork newProofOfWork(Block block) { BigInteger targetValue = BigInteger.valueOf(1).shiftLeft((256 - TARGET_BITS)); return new ProofOfWork(block, targetValue); } public PowResult run() { long nonce = 0; String shaHex = \"\"; long startTime = System.currentTimeMillis(); while (nonce < Long.MAX_VALUE) { log.info(\"POW running, nonce=\" + nonce); byte[] data = this.prepareData(nonce); shaHex = DigestUtils.sha256Hex(data); if (new BigInteger(shaHex, 16).compareTo(this.target) == -1) { log.info(\"Elapsed Time: {} seconds \\n\", new Object[]{(float) (System.currentTimeMillis() - startTime) / 1000}); log.info(\"correct hash Hex: {} \\n\", new Object[]{shaHex}); break; } else { nonce++; } } return new PowResult(nonce, shaHex); } public boolean validate() { byte[] data = this.prepareData(this.getBlock().getNonce()); return new BigInteger(DigestUtils.sha256Hex(data), 16).compareTo(this.target) == -1; } private byte[] prepareData(long nonce) { byte[] prevBlockHashBytes = {}; if (StringUtils.isNoneBlank(this.getBlock().getPrevBlockHash())) { prevBlockHashBytes = new BigInteger(this.getBlock().getPrevBlockHash(), 16).toByteArray(); } return ByteUtils.merge( prevBlockHashBytes, this.getBlock().hashTransaction(), ByteUtils.toBytes(this.getBlock().getTimeStamp()), ByteUtils.toBytes(TARGET_BITS), ByteUtils.toBytes(nonce) ); } }"},{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/transaction/MerkleTree.java","file_content":"package one.wangwei.blockchain.transaction; import com.google.common.collect.Lists; import lombok.Data; import one.wangwei.blockchain.util.ByteUtils; import org.apache.commons.codec.digest.DigestUtils; import java.util.List; @Data public class MerkleTree { private Node root; private byte[][] leafHashes; public MerkleTree(byte[][] leafHashes) { constructTree(leafHashes); } private void constructTree(byte[][] leafHashes) { if (leafHashes == null || leafHashes.length < 1) { throw new RuntimeException(\"ERROR:Fail to construct merkle tree ! leafHashes data invalid ! \"); } this.leafHashes = leafHashes; List<Node> parents = bottomLevel(leafHashes); while (parents.size() > 1) { parents = internalLevel(parents); } root = parents.get(0); } private List<Node> internalLevel(List<Node> children) { List<Node> parents = Lists.newArrayListWithCapacity(children.size() / 2); for (int i = 0; i < children.size() - 1; i += 2) { Node child1 = children.get(i); Node child2 = children.get(i + 1); Node parent = constructInternalNode(child1, child2); parents.add(parent); } if (children.size() % 2 != 0) { Node child = children.get(children.size() - 1); Node parent = constructInternalNode(child, null); parents.add(parent); } return parents; } private List<Node> bottomLevel(byte[][] hashes) { List<Node> parents = Lists.newArrayListWithCapacity(hashes.length / 2); for (int i = 0; i < hashes.length - 1; i += 2) { Node leaf1 = constructLeafNode(hashes[i]); Node leaf2 = constructLeafNode(hashes[i + 1]); Node parent = constructInternalNode(leaf1, leaf2); parents.add(parent); } if (hashes.length % 2 != 0) { Node leaf = constructLeafNode(hashes[hashes.length - 1]); Node parent = constructInternalNode(leaf, leaf); parents.add(parent); } return parents; } private static Node constructLeafNode(byte[] hash) { Node leaf = new Node(); leaf.hash = hash; return leaf; } private Node constructInternalNode(Node leftChild, Node rightChild) { Node parent = new Node(); if (rightChild == null) { parent.hash = leftChild.hash; } else { parent.hash = internalHash(leftChild.hash, rightChild.hash); } parent.left = leftChild; parent.right = rightChild; return parent; } private byte[] internalHash(byte[] leftChildHash, byte[] rightChildHash) { byte[] mergedBytes = ByteUtils.merge(leftChildHash, rightChildHash); return DigestUtils.sha256(mergedBytes); } @Data public static class Node { private byte[] hash; private Node left; private Node right; } }"},{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/transaction/Transaction.java","file_content":"package one.wangwei.blockchain.transaction; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import lombok.extern.slf4j.Slf4j; import one.wangwei.blockchain.block.Blockchain; import one.wangwei.blockchain.util.BtcAddressUtils; import one.wangwei.blockchain.util.SerializeUtils; import one.wangwei.blockchain.wallet.Wallet; import one.wangwei.blockchain.wallet.WalletUtils; import org.apache.commons.codec.binary.Hex; import org.apache.commons.codec.digest.DigestUtils; import org.apache.commons.lang3.ArrayUtils; import org.apache.commons.lang3.StringUtils; import org.bouncycastle.jcajce.provider.asymmetric.ec.BCECPrivateKey; import org.bouncycastle.jce.ECNamedCurveTable; import org.bouncycastle.jce.provider.BouncyCastleProvider; import org.bouncycastle.jce.spec.ECParameterSpec; import org.bouncycastle.jce.spec.ECPublicKeySpec; import org.bouncycastle.math.ec.ECPoint; import java.math.BigInteger; import java.security.KeyFactory; import java.security.PublicKey; import java.security.Security; import java.security.Signature; import java.util.Arrays; import java.util.Iterator; import java.util.Map; @Data @AllArgsConstructor @NoArgsConstructor @Slf4j public class Transaction { private static final int SUBSIDY = 10; private byte[] txId; private TXInput[] inputs; private TXOutput[] outputs; private long createTime; public byte[] hash() { byte[] serializeBytes = SerializeUtils.serialize(this); Transaction copyTx = (Transaction) SerializeUtils.deserialize(serializeBytes); copyTx.setTxId(new byte[]{}); return DigestUtils.sha256(SerializeUtils.serialize(copyTx)); } public static Transaction newCoinbaseTX(String to, String data) { if (StringUtils.isBlank(data)) { data = String.format(\"Reward to '%s'\", to); } TXInput txInput = new TXInput(new byte[]{}, -1, null, data.getBytes()); TXOutput txOutput = TXOutput.newTXOutput(SUBSIDY, to); Transaction tx = new Transaction(null, new TXInput[]{txInput}, new TXOutput[]{txOutput}, System.currentTimeMillis()); tx.setTxId(tx.hash()); return tx; } public boolean isCoinbase() { return this.getInputs().length == 1 && this.getInputs()[0].getTxId().length == 0 && this.getInputs()[0].getTxOutputIndex() == -1; } public static Transaction newUTXOTransaction(String from, String to, int amount, Blockchain blockchain) throws Exception { Wallet senderWallet = WalletUtils.getInstance().getWallet(from); byte[] pubKey = senderWallet.getPublicKey(); byte[] pubKeyHash = BtcAddressUtils.ripeMD160Hash(pubKey); SpendableOutputResult result = new UTXOSet(blockchain).findSpendableOutputs(pubKeyHash, amount); int accumulated = result.getAccumulated(); Map<String, int[]> unspentOuts = result.getUnspentOuts(); if (accumulated < amount) { log.error(\"ERROR: Not enough funds ! accumulated=\" + accumulated + \", amount=\" + amount); throw new RuntimeException(\"ERROR: Not enough funds ! \"); } Iterator<Map.Entry<String, int[]>> iterator = unspentOuts.entrySet().iterator(); TXInput[] txInputs = {}; while (iterator.hasNext()) { Map.Entry<String, int[]> entry = iterator.next(); String txIdStr = entry.getKey(); int[] outIds = entry.getValue(); byte[] txId = Hex.decodeHex(txIdStr); for (int outIndex : outIds) { txInputs = ArrayUtils.add(txInputs, new TXInput(txId, outIndex, null, pubKey)); } } TXOutput[] txOutput = {}; txOutput = ArrayUtils.add(txOutput, TXOutput.newTXOutput(amount, to)); if (accumulated > amount) { txOutput = ArrayUtils.add(txOutput, TXOutput.newTXOutput((accumulated - amount), from)); } Transaction newTx = new Transaction(null, txInputs, txOutput, System.currentTimeMillis()); newTx.setTxId(newTx.hash()); blockchain.signTransaction(newTx, senderWallet.getPrivateKey()); return newTx; } public Transaction trimmedCopy() { TXInput[] tmpTXInputs = new TXInput[this.getInputs().length]; for (int i = 0; i < this.getInputs().length; i++) { TXInput txInput = this.getInputs()[i]; tmpTXInputs[i] = new TXInput(txInput.getTxId(), txInput.getTxOutputIndex(), null, null); } TXOutput[] tmpTXOutputs = new TXOutput[this.getOutputs().length]; for (int i = 0; i < this.getOutputs().length; i++) { TXOutput txOutput = this.getOutputs()[i]; tmpTXOutputs[i] = new TXOutput(txOutput.getValue(), txOutput.getPubKeyHash()); } return new Transaction(this.getTxId(), tmpTXInputs, tmpTXOutputs, this.getCreateTime()); } public void sign(BCECPrivateKey privateKey, Map<String, Transaction> prevTxMap) throws Exception { if (this.isCoinbase()) { return; } for (TXInput txInput : this.getInputs()) { if (prevTxMap.get(Hex.encodeHexString(txInput.getTxId())) == null) { throw new RuntimeException(\"ERROR: Previous transaction is not correct\"); } } Transaction txCopy = this.trimmedCopy(); Security.addProvider(new BouncyCastleProvider()); Signature ecdsaSign = Signature.getInstance(\"SHA256withECDSA\", BouncyCastleProvider.PROVIDER_NAME); ecdsaSign.initSign(privateKey); for (int i = 0; i < txCopy.getInputs().length; i++) { TXInput txInputCopy = txCopy.getInputs()[i]; Transaction prevTx = prevTxMap.get(Hex.encodeHexString(txInputCopy.getTxId())); TXOutput prevTxOutput = prevTx.getOutputs()[txInputCopy.getTxOutputIndex()]; txInputCopy.setPubKey(prevTxOutput.getPubKeyHash()); txInputCopy.setSignature(null); txCopy.setTxId(txCopy.hash()); txInputCopy.setPubKey(null); ecdsaSign.update(txCopy.getTxId()); byte[] signature = ecdsaSign.sign(); this.getInputs()[i].setSignature(signature); } } public boolean verify(Map<String, Transaction> prevTxMap) throws Exception { if (this.isCoinbase()) { return true; } for (TXInput txInput : this.getInputs()) { if (prevTxMap.get(Hex.encodeHexString(txInput.getTxId())) == null) { throw new RuntimeException(\"ERROR: Previous transaction is not correct\"); } } Transaction txCopy = this.trimmedCopy(); Security.addProvider(new BouncyCastleProvider()); ECParameterSpec ecParameters = ECNamedCurveTable.getParameterSpec(\"secp256k1\"); KeyFactory keyFactory = KeyFactory.getInstance(\"ECDSA\", BouncyCastleProvider.PROVIDER_NAME); Signature ecdsaVerify = Signature.getInstance(\"SHA256withECDSA\", BouncyCastleProvider.PROVIDER_NAME); for (int i = 0; i < this.getInputs().length; i++) { TXInput txInput = this.getInputs()[i]; Transaction prevTx = prevTxMap.get(Hex.encodeHexString(txInput.getTxId())); TXOutput prevTxOutput = prevTx.getOutputs()[txInput.getTxOutputIndex()]; TXInput txInputCopy = txCopy.getInputs()[i]; txInputCopy.setSignature(null); txInputCopy.setPubKey(prevTxOutput.getPubKeyHash()); txCopy.setTxId(txCopy.hash()); txInputCopy.setPubKey(null); BigInteger x = new BigInteger(1, Arrays.copyOfRange(txInput.getPubKey(), 1, 33)); BigInteger y = new BigInteger(1, Arrays.copyOfRange(txInput.getPubKey(), 33, 65)); ECPoint ecPoint = ecParameters.getCurve().createPoint(x, y); ECPublicKeySpec keySpec = new ECPublicKeySpec(ecPoint, ecParameters); PublicKey publicKey = keyFactory.generatePublic(keySpec); ecdsaVerify.initVerify(publicKey); ecdsaVerify.update(txCopy.getTxId()); if (!ecdsaVerify.verify(txInput.getSignature())) { return false; } } return true; } }"}]}}
{"project_id":275,"chunk_id":0,"content":{"main_file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/store/RocksDBUtils.java","main_file_content":"package one.wangwei.blockchain.store; import com.google.common.collect.Maps; import lombok.Getter; import lombok.extern.slf4j.Slf4j; import one.wangwei.blockchain.block.Block; import one.wangwei.blockchain.transaction.TXOutput; import one.wangwei.blockchain.util.SerializeUtils; import org.rocksdb.RocksDB; import org.rocksdb.RocksDBException; import java.util.Map; @Slf4j public class RocksDBUtils { private static final String DB_FILE = \"blockchain.db\"; private static final String BLOCKS_BUCKET_KEY = \"blocks\"; private static final String CHAINSTATE_BUCKET_KEY = \"chainstate\"; private static final String LAST_BLOCK_KEY = \"l\"; private volatile static RocksDBUtils instance; public static RocksDBUtils getInstance() { if (instance == null) { synchronized (RocksDBUtils.class) { if (instance == null) { instance = new RocksDBUtils(); } } } return instance; } private RocksDB db; private Map<String, byte[]> blocksBucket; @Getter private Map<String, byte[]> chainstateBucket; private RocksDBUtils() { openDB(); initBlockBucket(); initChainStateBucket(); } private void openDB() { try { db = RocksDB.open(DB_FILE); } catch (RocksDBException e) { log.error(\"Fail to open db ! \", e); throw new RuntimeException(\"Fail to open db ! \", e); } } private void initBlockBucket() { try { byte[] blockBucketKey = SerializeUtils.serialize(BLOCKS_BUCKET_KEY); byte[] blockBucketBytes = db.get(blockBucketKey); if (blockBucketBytes != null) { blocksBucket = (Map) SerializeUtils.deserialize(blockBucketBytes); } else { blocksBucket = Maps.newHashMap(); db.put(blockBucketKey, SerializeUtils.serialize(blocksBucket)); } } catch (RocksDBException e) { log.error(\"Fail to init block bucket ! \", e); throw new RuntimeException(\"Fail to init block bucket ! \", e); } } private void initChainStateBucket() { try { byte[] chainstateBucketKey = SerializeUtils.serialize(CHAINSTATE_BUCKET_KEY); byte[] chainstateBucketBytes = db.get(chainstateBucketKey); if (chainstateBucketBytes != null) { chainstateBucket = (Map) SerializeUtils.deserialize(chainstateBucketBytes); } else { chainstateBucket = Maps.newHashMap(); db.put(chainstateBucketKey, SerializeUtils.serialize(chainstateBucket)); } } catch (RocksDBException e) { log.error(\"Fail to init chainstate bucket ! \", e); throw new RuntimeException(\"Fail to init chainstate bucket ! \", e); } } public void putLastBlockHash(String tipBlockHash) { try { blocksBucket.put(LAST_BLOCK_KEY, SerializeUtils.serialize(tipBlockHash)); db.put(SerializeUtils.serialize(BLOCKS_BUCKET_KEY), SerializeUtils.serialize(blocksBucket)); } catch (RocksDBException e) { log.error(\"Fail to put last block hash ! tipBlockHash=\" + tipBlockHash, e); throw new RuntimeException(\"Fail to put last block hash ! tipBlockHash=\" + tipBlockHash, e); } } public String getLastBlockHash() { byte[] lastBlockHashBytes = blocksBucket.get(LAST_BLOCK_KEY); if (lastBlockHashBytes != null) { return (String) SerializeUtils.deserialize(lastBlockHashBytes); } return \"\"; } public void putBlock(Block block) { try { blocksBucket.put(block.getHash(), SerializeUtils.serialize(block)); db.put(SerializeUtils.serialize(BLOCKS_BUCKET_KEY), SerializeUtils.serialize(blocksBucket)); } catch (RocksDBException e) { log.error(\"Fail to put block ! block=\" + block.toString(), e); throw new RuntimeException(\"Fail to put block ! block=\" + block.toString(), e); } } public Block getBlock(String blockHash) { byte[] blockBytes = blocksBucket.get(blockHash); if (blockBytes != null) { return (Block) SerializeUtils.deserialize(blockBytes); } throw new RuntimeException(\"Fail to get block ! blockHash=\" + blockHash); } public void cleanChainStateBucket() { try { chainstateBucket.clear(); } catch (Exception e) { log.error(\"Fail to clear chainstate bucket ! \", e); throw new RuntimeException(\"Fail to clear chainstate bucket ! \", e); } } public void putUTXOs(String key, TXOutput[] utxos) { try { chainstateBucket.put(key, SerializeUtils.serialize(utxos)); db.put(SerializeUtils.serialize(CHAINSTATE_BUCKET_KEY), SerializeUtils.serialize(chainstateBucket)); } catch (Exception e) { log.error(\"Fail to put UTXOs into chainstate bucket ! key=\" + key, e); throw new RuntimeException(\"Fail to put UTXOs into chainstate bucket ! key=\" + key, e); } } public TXOutput[] getUTXOs(String key) { byte[] utxosByte = chainstateBucket.get(key); if (utxosByte != null) { return (TXOutput[]) SerializeUtils.deserialize(utxosByte); } return null; } public void deleteUTXOs(String key) { try { chainstateBucket.remove(key); db.put(SerializeUtils.serialize(CHAINSTATE_BUCKET_KEY), SerializeUtils.serialize(chainstateBucket)); } catch (Exception e) { log.error(\"Fail to delete UTXOs by key ! key=\" + key, e); throw new RuntimeException(\"Fail to delete UTXOs by key ! key=\" + key, e); } } public void closeDB() { try { db.close(); } catch (Exception e) { log.error(\"Fail to close db ! \", e); throw new RuntimeException(\"Fail to close db ! \", e); } } }","dependencies":[{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/block/Block.java","file_content":"package one.wangwei.blockchain.block; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import lombok.ToString; import one.wangwei.blockchain.pow.PowResult; import one.wangwei.blockchain.pow.ProofOfWork; import one.wangwei.blockchain.transaction.MerkleTree; import one.wangwei.blockchain.transaction.Transaction; import one.wangwei.blockchain.util.ByteUtils; import java.time.Instant; @Data @AllArgsConstructor @NoArgsConstructor @ToString public class Block { private String hash; private String prevBlockHash; private Transaction[] transactions; private long timeStamp; private long nonce; public static Block newGenesisBlock(Transaction coinbase) { return Block.newBlock(ByteUtils.ZERO_HASH, new Transaction[]{coinbase}); } public static Block newBlock(String previousHash, Transaction[] transactions) { Block block = new Block(\"\", previousHash, transactions, Instant.now().getEpochSecond(), 0); ProofOfWork pow = ProofOfWork.newProofOfWork(block); PowResult powResult = pow.run(); block.setHash(powResult.getHash()); block.setNonce(powResult.getNonce()); return block; } public byte[] hashTransaction() { byte[][] txIdArrays = new byte[this.getTransactions().length][]; for (int i = 0; i < this.getTransactions().length; i++) { txIdArrays[i] = this.getTransactions()[i].hash(); } return new MerkleTree(txIdArrays).getRoot().getHash(); } }"},{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/transaction/TXOutput.java","file_content":"package one.wangwei.blockchain.transaction; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import one.wangwei.blockchain.util.Base58Check; import java.util.Arrays; @Data @AllArgsConstructor @NoArgsConstructor public class TXOutput { private int value; private byte[] pubKeyHash; public static TXOutput newTXOutput(int value, String address) { byte[] versionedPayload = Base58Check.base58ToBytes(address); byte[] pubKeyHash = Arrays.copyOfRange(versionedPayload, 1, versionedPayload.length); return new TXOutput(value, pubKeyHash); } public boolean isLockedWithKey(byte[] pubKeyHash) { return Arrays.equals(this.getPubKeyHash(), pubKeyHash); } }"},{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/util/SerializeUtils.java","file_content":"package one.wangwei.blockchain.util; import com.esotericsoftware.kryo.Kryo; import com.esotericsoftware.kryo.io.Input; import com.esotericsoftware.kryo.io.Output; public class SerializeUtils { public static Object deserialize(byte[] bytes) { Input input = new Input(bytes); Object obj = new Kryo().readClassAndObject(input); input.close(); return obj; } public static byte[] serialize(Object object) { Output output = new Output(4096, -1); new Kryo().writeClassAndObject(output, object); byte[] bytes = output.toBytes(); output.close(); return bytes; } }"}]}}
{"project_id":275,"chunk_id":0,"content":{"main_file_path":"blockchain-java-master/blockchain-java-master/src/test/java/one/wangwei/blockchain/BlockchainTest.java","main_file_content":"package one.wangwei.blockchain; import one.wangwei.blockchain.cli.CLI; public class BlockchainTest { public static void main(String[] args) { try { String[] argss = {\"send\", \"-from\", \"1CceyiwYXh6vL6dLPw6WiNc5ihqVxwYHSA\", \"-to\", \"1EKacQPNxTd8N7Y83VK11zoqm7bhUZiDHm\", \"-amount\", \"5\"}; CLI cli = new CLI(argss); cli.parse(); } catch (Exception e) { e.printStackTrace(); } } }","dependencies":[{"file_path":"blockchain-java-master/blockchain-java-master/src/main/java/one/wangwei/blockchain/cli/CLI.java","file_content":"package one.wangwei.blockchain.cli; import lombok.extern.slf4j.Slf4j; import one.wangwei.blockchain.block.Block; import one.wangwei.blockchain.block.Blockchain; import one.wangwei.blockchain.pow.ProofOfWork; import one.wangwei.blockchain.store.RocksDBUtils; import one.wangwei.blockchain.transaction.TXOutput; import one.wangwei.blockchain.transaction.Transaction; import one.wangwei.blockchain.transaction.UTXOSet; import one.wangwei.blockchain.util.Base58Check; import one.wangwei.blockchain.wallet.Wallet; import one.wangwei.blockchain.wallet.WalletUtils; import org.apache.commons.cli.*; import org.apache.commons.lang3.StringUtils; import org.apache.commons.lang3.math.NumberUtils; import java.util.Arrays; import java.util.Set; @Slf4j public class CLI { private String[] args; private Options options = new Options(); public CLI(String[] args) { this.args = args; Option helpCmd = Option.builder(\"h\").desc(\"show help\").build(); options.addOption(helpCmd); Option address = Option.builder(\"address\").hasArg(true).desc(\"Source wallet address\").build(); Option sendFrom = Option.builder(\"from\").hasArg(true).desc(\"Source wallet address\").build(); Option sendTo = Option.builder(\"to\").hasArg(true).desc(\"Destination wallet address\").build(); Option sendAmount = Option.builder(\"amount\").hasArg(true).desc(\"Amount to send\").build(); options.addOption(address); options.addOption(sendFrom); options.addOption(sendTo); options.addOption(sendAmount); } public void parse() { this.validateArgs(args); try { CommandLineParser parser = new DefaultParser(); CommandLine cmd = parser.parse(options, args); switch (args[0]) { case \"createblockchain\": String createblockchainAddress = cmd.getOptionValue(\"address\"); if (StringUtils.isBlank(createblockchainAddress)) { help(); } this.createBlockchain(createblockchainAddress); break; case \"getbalance\": String getBalanceAddress = cmd.getOptionValue(\"address\"); if (StringUtils.isBlank(getBalanceAddress)) { help(); } this.getBalance(getBalanceAddress); break; case \"send\": String sendFrom = cmd.getOptionValue(\"from\"); String sendTo = cmd.getOptionValue(\"to\"); String sendAmount = cmd.getOptionValue(\"amount\"); if (StringUtils.isBlank(sendFrom) || StringUtils.isBlank(sendTo) || !NumberUtils.isDigits(sendAmount)) { help(); } this.send(sendFrom, sendTo, Integer.valueOf(sendAmount)); break; case \"createwallet\": this.createWallet(); break; case \"printaddresses\": this.printAddresses(); break; case \"printchain\": this.printChain(); break; case \"h\": this.help(); break; default: this.help(); } } catch (Exception e) { log.error(\"Fail to parse cli command ! \", e); } finally { RocksDBUtils.getInstance().closeDB(); } } private void validateArgs(String[] args) { if (args == null || args.length < 1) { help(); } } private void createBlockchain(String address) { Blockchain blockchain = Blockchain.createBlockchain(address); UTXOSet utxoSet = new UTXOSet(blockchain); utxoSet.reIndex(); log.info(\"Done ! \"); } private void createWallet() throws Exception { Wallet wallet = WalletUtils.getInstance().createWallet(); log.info(\"wallet address : \" + wallet.getAddress()); } private void printAddresses() { Set<String> addresses = WalletUtils.getInstance().getAddresses(); if (addresses == null || addresses.isEmpty()) { log.info(\"There isn't address\"); return; } for (String address : addresses) { log.info(\"Wallet address: \" + address); } } private void getBalance(String address) { try { Base58Check.base58ToBytes(address); } catch (Exception e) { log.error(\"ERROR: invalid wallet address\", e); throw new RuntimeException(\"ERROR: invalid wallet address\", e); } byte[] versionedPayload = Base58Check.base58ToBytes(address); byte[] pubKeyHash = Arrays.copyOfRange(versionedPayload, 1, versionedPayload.length); Blockchain blockchain = Blockchain.createBlockchain(address); UTXOSet utxoSet = new UTXOSet(blockchain); TXOutput[] txOutputs = utxoSet.findUTXOs(pubKeyHash); int balance = 0; if (txOutputs != null && txOutputs.length > 0) { for (TXOutput txOutput : txOutputs) { balance += txOutput.getValue(); } } log.info(\"Balance of '{}': {}\\n\", new Object[]{address, balance}); } private void send(String from, String to, int amount) throws Exception { try { Base58Check.base58ToBytes(from); } catch (Exception e) { log.error(\"ERROR: sender address invalid ! address=\" + from, e); throw new RuntimeException(\"ERROR: sender address invalid ! address=\" + from, e); } try { Base58Check.base58ToBytes(to); } catch (Exception e) { log.error(\"ERROR: receiver address invalid ! address=\" + to, e); throw new RuntimeException(\"ERROR: receiver address invalid ! address=\" + to, e); } if (amount < 1) { log.error(\"ERROR: amount invalid ! amount=\" + amount); throw new RuntimeException(\"ERROR: amount invalid ! amount=\" + amount); } Blockchain blockchain = Blockchain.createBlockchain(from); Transaction transaction = Transaction.newUTXOTransaction(from, to, amount, blockchain); Transaction rewardTx = Transaction.newCoinbaseTX(from, \"\"); Block newBlock = blockchain.mineBlock(new Transaction[]{transaction, rewardTx}); new UTXOSet(blockchain).update(newBlock); log.info(\"Success!\"); } private void help() { System.out.println(\"Usage:\"); System.out.println(\" createwallet - Generates a new key-pair and saves it into the wallet file\"); System.out.println(\" printaddresses - print all wallet address\"); System.out.println(\" getbalance -address ADDRESS - Get balance of ADDRESS\"); System.out.println(\" createblockchain -address ADDRESS - Create a blockchain and send genesis block reward to ADDRESS\"); System.out.println(\" printchain - Print all the blocks of the blockchain\"); System.out.println(\" send -from FROM -to TO -amount AMOUNT - Send AMOUNT of coins from FROM address to TO\"); System.exit(0); } private void printChain() { Blockchain blockchain = Blockchain.initBlockchainFromDB(); for (Blockchain.BlockchainIterator iterator = blockchain.getBlockchainIterator(); iterator.hashNext(); ) { Block block = iterator.next(); if (block != null) { boolean validate = ProofOfWork.newProofOfWork(block).validate(); log.info(block.toString() + \", validate = \" + validate); } } } }"}]}}
{"project_id":280,"chunk_id":0,"content":{"main_file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/ClickHouseSinkConverter.java","main_file_content":"package ru.ivi.opensource.flinkclickhousesink; import java.io.Serializable; @FunctionalInterface public interface ClickHouseSinkConverter<T> extends Serializable { String convert(T record); }","dependencies":[]}}
{"project_id":280,"chunk_id":0,"content":{"main_file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/ClickHouseSink.java","main_file_content":"package ru.ivi.opensource.flinkclickhousesink; import org.apache.flink.configuration.Configuration; import org.apache.flink.streaming.api.functions.sink.RichSinkFunction; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import ru.ivi.opensource.flinkclickhousesink.applied.ClickHouseSinkManager; import ru.ivi.opensource.flinkclickhousesink.applied.Sink; import java.util.Map; import java.util.Properties; public class ClickHouseSink<T> extends RichSinkFunction<T> { private static final Logger logger = LoggerFactory.getLogger(ClickHouseSink.class); private static final Object DUMMY_LOCK = new Object(); private final Properties localProperties; private final ClickHouseSinkConverter<T> clickHouseSinkConverter; private volatile static transient ClickHouseSinkManager sinkManager; private transient Sink sink; public ClickHouseSink(Properties properties, ClickHouseSinkConverter<T> clickHouseSinkConverter) { this.localProperties = properties; this.clickHouseSinkConverter = clickHouseSinkConverter; } @Override public void open(Configuration config) { if (sinkManager == null) { synchronized (DUMMY_LOCK) { if (sinkManager == null) { Map<String, String> params = getRuntimeContext() .getExecutionConfig() .getGlobalJobParameters() .toMap(); sinkManager = new ClickHouseSinkManager(params); } } } sink = sinkManager.buildSink(localProperties); } @Override public void invoke(T record, Context context) { try { String recordAsCSV = clickHouseSinkConverter.convert(record); sink.put(recordAsCSV); } catch (Exception e) { logger.error(\"Error while sending data to ClickHouse, record = {}\", record, e); throw new RuntimeException(e); } } @Override public void close() throws Exception { if (sink != null) { sink.close(); } if (sinkManager != null && !sinkManager.isClosed()) { synchronized (DUMMY_LOCK) { if (sinkManager != null && !sinkManager.isClosed()) { sinkManager.close(); sinkManager = null; } } } super.close(); } }","dependencies":[{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/applied/ClickHouseSinkManager.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; import com.google.common.base.Preconditions; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkCommonParams; import java.util.*; import java.util.concurrent.CompletableFuture; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.MAX_BUFFER_SIZE; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.TARGET_TABLE_NAME; public class ClickHouseSinkManager implements AutoCloseable { private static final Logger logger = LoggerFactory.getLogger(ClickHouseSinkManager.class); private final ClickHouseWriter clickHouseWriter; private final ClickHouseSinkScheduledCheckerAndCleaner clickHouseSinkScheduledCheckerAndCleaner; private final ClickHouseSinkCommonParams sinkParams; private final List<CompletableFuture<Boolean>> futures = Collections.synchronizedList(new LinkedList<>()); private volatile boolean isClosed = false; public ClickHouseSinkManager(Map<String, String> globalParams) { sinkParams = new ClickHouseSinkCommonParams(globalParams); clickHouseWriter = new ClickHouseWriter(sinkParams, futures); clickHouseSinkScheduledCheckerAndCleaner = new ClickHouseSinkScheduledCheckerAndCleaner(sinkParams, futures); logger.info(\"Build sink writer's manager. params = {}\", sinkParams); } public Sink buildSink(Properties localProperties) { String targetTable = localProperties.getProperty(TARGET_TABLE_NAME); int maxFlushBufferSize = Integer.parseInt(localProperties.getProperty(MAX_BUFFER_SIZE)); return buildSink(targetTable, maxFlushBufferSize); } public Sink buildSink(String targetTable, int maxBufferSize) { Preconditions.checkNotNull(clickHouseSinkScheduledCheckerAndCleaner); Preconditions.checkNotNull(clickHouseWriter); ClickHouseSinkBuffer clickHouseSinkBuffer = ClickHouseSinkBuffer.Builder .aClickHouseSinkBuffer() .withTargetTable(targetTable) .withMaxFlushBufferSize(maxBufferSize) .withTimeoutSec(sinkParams.getTimeout()) .withFutures(futures) .build(clickHouseWriter); clickHouseSinkScheduledCheckerAndCleaner.addSinkBuffer(clickHouseSinkBuffer); if (sinkParams.isIgnoringClickHouseSendingExceptionEnabled()) { return new UnexceptionableSink(clickHouseSinkBuffer); } else { return new ExceptionsThrowableSink(clickHouseSinkBuffer); } } public boolean isClosed() { return isClosed; } @Override public void close() throws Exception { logger.info(\"ClickHouse sink manager is shutting down.\"); clickHouseSinkScheduledCheckerAndCleaner.close(); clickHouseWriter.close(); isClosed = true; logger.info(\"ClickHouse sink manager shutdown complete.\"); } }"},{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/applied/Sink.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; import java.util.concurrent.ExecutionException; public interface Sink extends AutoCloseable { void put(String message) throws ExecutionException, InterruptedException; }"}]}}
{"project_id":280,"chunk_id":0,"content":{"main_file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/applied/UnexceptionableSink.java","main_file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; public class UnexceptionableSink implements Sink { private final ClickHouseSinkBuffer clickHouseSinkBuffer; public UnexceptionableSink(ClickHouseSinkBuffer buffer) { this.clickHouseSinkBuffer = buffer; } @Override public void put(String message) { clickHouseSinkBuffer.put(message); } @Override public void close() { if (clickHouseSinkBuffer != null) { clickHouseSinkBuffer.close(); } } }","dependencies":[{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/applied/ClickHouseSinkBuffer.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; import com.google.common.base.Preconditions; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseRequestBlank; import ru.ivi.opensource.flinkclickhousesink.util.FutureUtil; import java.util.ArrayList; import java.util.Collections; import java.util.List; import java.util.concurrent.CompletableFuture; import java.util.concurrent.ExecutionException; import java.util.concurrent.TimeUnit; public class ClickHouseSinkBuffer implements AutoCloseable { private static final Logger logger = LoggerFactory.getLogger(ClickHouseSinkBuffer.class); private final ClickHouseWriter writer; private final String targetTable; private final int maxFlushBufferSize; private final long timeoutMillis; private final List<String> localValues; private final List<CompletableFuture<Boolean>> futures; private volatile long lastAddTimeMillis = System.currentTimeMillis(); private ClickHouseSinkBuffer( ClickHouseWriter chWriter, long timeout, int maxBuffer, String table, List<CompletableFuture<Boolean>> futures ) { writer = chWriter; localValues = new ArrayList<>(); timeoutMillis = timeout; maxFlushBufferSize = maxBuffer; targetTable = table; this.futures = futures; logger.info(\"Instance ClickHouse Sink, target table = {}, buffer size = {}\", this.targetTable, this.maxFlushBufferSize); } String getTargetTable() { return targetTable; } public void put(String recordAsCSV) { tryAddToQueue(); localValues.add(recordAsCSV); } synchronized void tryAddToQueue() { if (flushCondition()) { addToQueue(); lastAddTimeMillis = System.currentTimeMillis(); } } private void addToQueue() { List<String> deepCopy = buildDeepCopy(localValues); ClickHouseRequestBlank params = ClickHouseRequestBlank.Builder .aBuilder() .withValues(deepCopy) .withTargetTable(targetTable) .build(); logger.debug(\"Build blank with params: buffer size = {}, target table = {}\", params.getValues().size(), params.getTargetTable()); writer.put(params); localValues.clear(); } private boolean flushCondition() { return localValues.size() > 0 && (checkSize() || checkTime()); } private boolean checkSize() { return localValues.size() >= maxFlushBufferSize; } private boolean checkTime() { long current = System.currentTimeMillis(); return current - lastAddTimeMillis > timeoutMillis; } private static List<String> buildDeepCopy(List<String> original) { return Collections.unmodifiableList(new ArrayList<>(original)); } public void assertFuturesNotFailedYet() throws ExecutionException, InterruptedException { CompletableFuture<Void> future = FutureUtil.allOf(futures); if (future.isCompletedExceptionally()) { future.get(); } } @Override public void close() { logger.info(\"ClickHouse sink buffer is shutting down.\"); if (localValues != null && localValues.size() > 0) { addToQueue(); } logger.info(\"ClickHouse sink buffer shutdown complete.\"); } public static final class Builder { private String targetTable; private int maxFlushBufferSize; private int timeoutSec; private List<CompletableFuture<Boolean>> futures; private Builder() { } public static Builder aClickHouseSinkBuffer() { return new Builder(); } public Builder withTargetTable(String targetTable) { this.targetTable = targetTable; return this; } public Builder withMaxFlushBufferSize(int maxFlushBufferSize) { this.maxFlushBufferSize = maxFlushBufferSize; return this; } public Builder withTimeoutSec(int timeoutSec) { this.timeoutSec = timeoutSec; return this; } public Builder withFutures(List<CompletableFuture<Boolean>> futures) { this.futures = futures; return this; } public ClickHouseSinkBuffer build(ClickHouseWriter writer) { Preconditions.checkNotNull(targetTable); Preconditions.checkArgument(maxFlushBufferSize > 0); Preconditions.checkArgument(timeoutSec > 0); return new ClickHouseSinkBuffer( writer, TimeUnit.SECONDS.toMillis(this.timeoutSec), this.maxFlushBufferSize, this.targetTable, this.futures ); } } }"},{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/applied/Sink.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; import java.util.concurrent.ExecutionException; public interface Sink extends AutoCloseable { void put(String message) throws ExecutionException, InterruptedException; }"}]}}
{"project_id":280,"chunk_id":0,"content":{"main_file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/applied/ExceptionsThrowableSink.java","main_file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; import java.util.concurrent.ExecutionException; public class ExceptionsThrowableSink implements Sink { private final ClickHouseSinkBuffer clickHouseSinkBuffer; public ExceptionsThrowableSink(ClickHouseSinkBuffer buffer) { this.clickHouseSinkBuffer = buffer; } @Override public void put(String message) throws ExecutionException, InterruptedException { clickHouseSinkBuffer.put(message); clickHouseSinkBuffer.assertFuturesNotFailedYet(); } @Override public void close() { if (clickHouseSinkBuffer != null) { clickHouseSinkBuffer.close(); } } }","dependencies":[{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/applied/ClickHouseSinkBuffer.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; import com.google.common.base.Preconditions; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseRequestBlank; import ru.ivi.opensource.flinkclickhousesink.util.FutureUtil; import java.util.ArrayList; import java.util.Collections; import java.util.List; import java.util.concurrent.CompletableFuture; import java.util.concurrent.ExecutionException; import java.util.concurrent.TimeUnit; public class ClickHouseSinkBuffer implements AutoCloseable { private static final Logger logger = LoggerFactory.getLogger(ClickHouseSinkBuffer.class); private final ClickHouseWriter writer; private final String targetTable; private final int maxFlushBufferSize; private final long timeoutMillis; private final List<String> localValues; private final List<CompletableFuture<Boolean>> futures; private volatile long lastAddTimeMillis = System.currentTimeMillis(); private ClickHouseSinkBuffer( ClickHouseWriter chWriter, long timeout, int maxBuffer, String table, List<CompletableFuture<Boolean>> futures ) { writer = chWriter; localValues = new ArrayList<>(); timeoutMillis = timeout; maxFlushBufferSize = maxBuffer; targetTable = table; this.futures = futures; logger.info(\"Instance ClickHouse Sink, target table = {}, buffer size = {}\", this.targetTable, this.maxFlushBufferSize); } String getTargetTable() { return targetTable; } public void put(String recordAsCSV) { tryAddToQueue(); localValues.add(recordAsCSV); } synchronized void tryAddToQueue() { if (flushCondition()) { addToQueue(); lastAddTimeMillis = System.currentTimeMillis(); } } private void addToQueue() { List<String> deepCopy = buildDeepCopy(localValues); ClickHouseRequestBlank params = ClickHouseRequestBlank.Builder .aBuilder() .withValues(deepCopy) .withTargetTable(targetTable) .build(); logger.debug(\"Build blank with params: buffer size = {}, target table = {}\", params.getValues().size(), params.getTargetTable()); writer.put(params); localValues.clear(); } private boolean flushCondition() { return localValues.size() > 0 && (checkSize() || checkTime()); } private boolean checkSize() { return localValues.size() >= maxFlushBufferSize; } private boolean checkTime() { long current = System.currentTimeMillis(); return current - lastAddTimeMillis > timeoutMillis; } private static List<String> buildDeepCopy(List<String> original) { return Collections.unmodifiableList(new ArrayList<>(original)); } public void assertFuturesNotFailedYet() throws ExecutionException, InterruptedException { CompletableFuture<Void> future = FutureUtil.allOf(futures); if (future.isCompletedExceptionally()) { future.get(); } } @Override public void close() { logger.info(\"ClickHouse sink buffer is shutting down.\"); if (localValues != null && localValues.size() > 0) { addToQueue(); } logger.info(\"ClickHouse sink buffer shutdown complete.\"); } public static final class Builder { private String targetTable; private int maxFlushBufferSize; private int timeoutSec; private List<CompletableFuture<Boolean>> futures; private Builder() { } public static Builder aClickHouseSinkBuffer() { return new Builder(); } public Builder withTargetTable(String targetTable) { this.targetTable = targetTable; return this; } public Builder withMaxFlushBufferSize(int maxFlushBufferSize) { this.maxFlushBufferSize = maxFlushBufferSize; return this; } public Builder withTimeoutSec(int timeoutSec) { this.timeoutSec = timeoutSec; return this; } public Builder withFutures(List<CompletableFuture<Boolean>> futures) { this.futures = futures; return this; } public ClickHouseSinkBuffer build(ClickHouseWriter writer) { Preconditions.checkNotNull(targetTable); Preconditions.checkArgument(maxFlushBufferSize > 0); Preconditions.checkArgument(timeoutSec > 0); return new ClickHouseSinkBuffer( writer, TimeUnit.SECONDS.toMillis(this.timeoutSec), this.maxFlushBufferSize, this.targetTable, this.futures ); } } }"},{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/applied/Sink.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; import java.util.concurrent.ExecutionException; public interface Sink extends AutoCloseable { void put(String message) throws ExecutionException, InterruptedException; }"}]}}
{"project_id":280,"chunk_id":0,"content":{"main_file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/applied/Sink.java","main_file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; import java.util.concurrent.ExecutionException; public interface Sink extends AutoCloseable { void put(String message) throws ExecutionException, InterruptedException; }","dependencies":[]}}
{"project_id":280,"chunk_id":0,"content":{"main_file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/applied/ClickHouseSinkBuffer.java","main_file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; import com.google.common.base.Preconditions; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseRequestBlank; import ru.ivi.opensource.flinkclickhousesink.util.FutureUtil; import java.util.ArrayList; import java.util.Collections; import java.util.List; import java.util.concurrent.CompletableFuture; import java.util.concurrent.ExecutionException; import java.util.concurrent.TimeUnit; public class ClickHouseSinkBuffer implements AutoCloseable { private static final Logger logger = LoggerFactory.getLogger(ClickHouseSinkBuffer.class); private final ClickHouseWriter writer; private final String targetTable; private final int maxFlushBufferSize; private final long timeoutMillis; private final List<String> localValues; private final List<CompletableFuture<Boolean>> futures; private volatile long lastAddTimeMillis = System.currentTimeMillis(); private ClickHouseSinkBuffer( ClickHouseWriter chWriter, long timeout, int maxBuffer, String table, List<CompletableFuture<Boolean>> futures ) { writer = chWriter; localValues = new ArrayList<>(); timeoutMillis = timeout; maxFlushBufferSize = maxBuffer; targetTable = table; this.futures = futures; logger.info(\"Instance ClickHouse Sink, target table = {}, buffer size = {}\", this.targetTable, this.maxFlushBufferSize); } String getTargetTable() { return targetTable; } public void put(String recordAsCSV) { tryAddToQueue(); localValues.add(recordAsCSV); } synchronized void tryAddToQueue() { if (flushCondition()) { addToQueue(); lastAddTimeMillis = System.currentTimeMillis(); } } private void addToQueue() { List<String> deepCopy = buildDeepCopy(localValues); ClickHouseRequestBlank params = ClickHouseRequestBlank.Builder .aBuilder() .withValues(deepCopy) .withTargetTable(targetTable) .build(); logger.debug(\"Build blank with params: buffer size = {}, target table = {}\", params.getValues().size(), params.getTargetTable()); writer.put(params); localValues.clear(); } private boolean flushCondition() { return localValues.size() > 0 && (checkSize() || checkTime()); } private boolean checkSize() { return localValues.size() >= maxFlushBufferSize; } private boolean checkTime() { long current = System.currentTimeMillis(); return current - lastAddTimeMillis > timeoutMillis; } private static List<String> buildDeepCopy(List<String> original) { return Collections.unmodifiableList(new ArrayList<>(original)); } public void assertFuturesNotFailedYet() throws ExecutionException, InterruptedException { CompletableFuture<Void> future = FutureUtil.allOf(futures); if (future.isCompletedExceptionally()) { future.get(); } } @Override public void close() { logger.info(\"ClickHouse sink buffer is shutting down.\"); if (localValues != null && localValues.size() > 0) { addToQueue(); } logger.info(\"ClickHouse sink buffer shutdown complete.\"); } public static final class Builder { private String targetTable; private int maxFlushBufferSize; private int timeoutSec; private List<CompletableFuture<Boolean>> futures; private Builder() { } public static Builder aClickHouseSinkBuffer() { return new Builder(); } public Builder withTargetTable(String targetTable) { this.targetTable = targetTable; return this; } public Builder withMaxFlushBufferSize(int maxFlushBufferSize) { this.maxFlushBufferSize = maxFlushBufferSize; return this; } public Builder withTimeoutSec(int timeoutSec) { this.timeoutSec = timeoutSec; return this; } public Builder withFutures(List<CompletableFuture<Boolean>> futures) { this.futures = futures; return this; } public ClickHouseSinkBuffer build(ClickHouseWriter writer) { Preconditions.checkNotNull(targetTable); Preconditions.checkArgument(maxFlushBufferSize > 0); Preconditions.checkArgument(timeoutSec > 0); return new ClickHouseSinkBuffer( writer, TimeUnit.SECONDS.toMillis(this.timeoutSec), this.maxFlushBufferSize, this.targetTable, this.futures ); } } }","dependencies":[{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/applied/ClickHouseWriter.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; import com.google.common.collect.Lists; import io.netty.handler.codec.http.HttpHeaderNames; import org.asynchttpclient.AsyncHttpClient; import org.asynchttpclient.BoundRequestBuilder; import org.asynchttpclient.Dsl; import org.asynchttpclient.ListenableFuture; import org.asynchttpclient.Request; import org.asynchttpclient.Response; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseRequestBlank; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkCommonParams; import ru.ivi.opensource.flinkclickhousesink.util.FutureUtil; import ru.ivi.opensource.flinkclickhousesink.util.ThreadUtil; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.util.List; import java.util.concurrent.BlockingQueue; import java.util.concurrent.CompletableFuture; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.LinkedBlockingQueue; import java.util.concurrent.ThreadFactory; import java.util.concurrent.TimeUnit; import java.util.concurrent.atomic.AtomicLong; public class ClickHouseWriter implements AutoCloseable { private static final Logger logger = LoggerFactory.getLogger(ClickHouseWriter.class); private final BlockingQueue<ClickHouseRequestBlank> commonQueue; private final AtomicLong unprocessedRequestsCounter = new AtomicLong(); private final AsyncHttpClient asyncHttpClient; private final List<CompletableFuture<Boolean>> futures; private final ClickHouseSinkCommonParams sinkParams; private ExecutorService service; private ExecutorService callbackService; private List<WriterTask> tasks; public ClickHouseWriter(ClickHouseSinkCommonParams sinkParams, List<CompletableFuture<Boolean>> futures) { this(sinkParams, futures, Dsl.asyncHttpClient()); } public ClickHouseWriter(ClickHouseSinkCommonParams sinkParams, List<CompletableFuture<Boolean>> futures, AsyncHttpClient asyncHttpClient) { this.sinkParams = sinkParams; this.futures = futures; this.commonQueue = new LinkedBlockingQueue<>(sinkParams.getQueueMaxCapacity()); this.asyncHttpClient = asyncHttpClient; initDirAndExecutors(); } private void initDirAndExecutors() { try { initDir(sinkParams.getFailedRecordsPath()); buildComponents(); } catch (Exception e) { logger.error(\"Error while starting CH writer\", e); throw new RuntimeException(e); } } private static void initDir(String pathName) throws IOException { Path path = Paths.get(pathName); Files.createDirectories(path); } private void buildComponents() { logger.info(\"Building components\"); ThreadFactory threadFactory = ThreadUtil.threadFactory(\"clickhouse-writer\"); service = Executors.newFixedThreadPool(sinkParams.getNumWriters(), threadFactory); ThreadFactory callbackServiceFactory = ThreadUtil.threadFactory(\"clickhouse-writer-callback-executor\"); callbackService = Executors.newCachedThreadPool(callbackServiceFactory); int numWriters = sinkParams.getNumWriters(); tasks = Lists.newArrayListWithCapacity(numWriters); for (int i = 0; i < numWriters; i++) { WriterTask task = new WriterTask(i, asyncHttpClient, commonQueue, sinkParams, callbackService, futures, unprocessedRequestsCounter); tasks.add(task); service.submit(task); } } public void put(ClickHouseRequestBlank params) { try { unprocessedRequestsCounter.incrementAndGet(); commonQueue.put(params); } catch (InterruptedException e) { logger.error(\"Interrupted error while putting data to queue\", e); Thread.currentThread().interrupt(); throw new RuntimeException(e); } } private void waitUntilAllFuturesDone() { logger.info(\"Wait until all futures are done or completed exceptionally. Futures size: {}\", futures.size()); try { while (unprocessedRequestsCounter.get() > 0 || !futures.isEmpty()) { if (logger.isDebugEnabled()) { logger.debug(\"Futures size: {}.\", futures.size()); } CompletableFuture<Void> future = FutureUtil.allOf(futures); try { future.get(); futures.removeIf(f -> f.isDone() && !f.isCompletedExceptionally()); if (logger.isDebugEnabled()) { logger.debug(\"Futures size after removing: {}\", futures.size()); } } catch (Exception e) { throw new RuntimeException(e); } } } finally { stopWriters(); futures.clear(); } } private void stopWriters() { logger.info(\"Stopping writers.\"); if (tasks != null && tasks.size() > 0) { tasks.forEach(WriterTask::setStopWorking); } logger.info(\"Writers stopped.\"); } @Override public void close() throws Exception { logger.info(\"ClickHouseWriter is shutting down.\"); try { waitUntilAllFuturesDone(); } finally { ThreadUtil.shutdownExecutorService(service); ThreadUtil.shutdownExecutorService(callbackService); asyncHttpClient.close(); logger.info(\"{} shutdown complete.\", ClickHouseWriter.class.getSimpleName()); } } static class WriterTask implements Runnable { private static final Logger logger = LoggerFactory.getLogger(WriterTask.class); private static final int HTTP_OK = 200; private final BlockingQueue<ClickHouseRequestBlank> queue; private final AtomicLong queueCounter; private final ClickHouseSinkCommonParams sinkSettings; private final AsyncHttpClient asyncHttpClient; private final ExecutorService callbackService; private final List<CompletableFuture<Boolean>> futures; private final int id; private volatile boolean isWorking; WriterTask(int id, AsyncHttpClient asyncHttpClient, BlockingQueue<ClickHouseRequestBlank> queue, ClickHouseSinkCommonParams settings, ExecutorService callbackService, List<CompletableFuture<Boolean>> futures, AtomicLong queueCounter) { this.id = id; this.sinkSettings = settings; this.queue = queue; this.callbackService = callbackService; this.asyncHttpClient = asyncHttpClient; this.futures = futures; this.queueCounter = queueCounter; } @Override public void run() { try { isWorking = true; logger.info(\"Start writer task, id = {}\", id); while (isWorking || queue.size() > 0) { ClickHouseRequestBlank blank = queue.poll(300, TimeUnit.MILLISECONDS); if (blank != null) { CompletableFuture<Boolean> future = new CompletableFuture<>(); futures.add(future); send(blank, future); } } } catch (Exception e) { logger.error(\"Error while inserting data\", e); throw new RuntimeException(e); } finally { logger.info(\"Task id = {} is finished\", id); } } private void send(ClickHouseRequestBlank requestBlank, CompletableFuture<Boolean> future) { Request request = buildRequest(requestBlank); logger.info(\"Ready to load data to {}, size = {}\", requestBlank.getTargetTable(), requestBlank.getValues().size()); ListenableFuture<Response> whenResponse = asyncHttpClient.executeRequest(request); Runnable callback = responseCallback(whenResponse, requestBlank, future); whenResponse.addListener(callback, callbackService); } private Request buildRequest(ClickHouseRequestBlank requestBlank) { String resultCSV = String.join(\" , \", requestBlank.getValues()); String query = String.format(\"INSERT INTO %s VALUES %s\", requestBlank.getTargetTable(), resultCSV); String host = sinkSettings.getClickHouseClusterSettings().getRandomHostUrl(); BoundRequestBuilder builder = asyncHttpClient .preparePost(host) .setHeader(HttpHeaderNames.CONTENT_TYPE, \"text/plain; charset=utf-8\") .setBody(query); if (sinkSettings.getClickHouseClusterSettings().isAuthorizationRequired()) { builder.setHeader(HttpHeaderNames.AUTHORIZATION, \"Basic \" + sinkSettings.getClickHouseClusterSettings().getCredentials()); } return builder.build(); } private Runnable responseCallback(ListenableFuture<Response> whenResponse, ClickHouseRequestBlank requestBlank, CompletableFuture<Boolean> future) { return () -> { Response response = null; try { response = whenResponse.get(); if (response.getStatusCode() != HTTP_OK) { handleUnsuccessfulResponse(response, requestBlank, future); } else { logger.info(\"Successful send data to ClickHouse, batch size = {}, target table = {}, current attempt = {}\", requestBlank.getValues().size(), requestBlank.getTargetTable(), requestBlank.getAttemptCounter()); future.complete(true); } } catch (Exception e) { logger.error(\"Error while executing callback, params = {}\", sinkSettings, e); requestBlank.setException(e); try { handleUnsuccessfulResponse(response, requestBlank, future); } catch (Exception error) { logger.error(\"Error while handle unsuccessful response\", error); future.completeExceptionally(error); } } finally { queueCounter.decrementAndGet(); } }; } private void handleUnsuccessfulResponse(Response response, ClickHouseRequestBlank requestBlank, CompletableFuture<Boolean> future) throws Exception { int currentCounter = requestBlank.getAttemptCounter(); if (currentCounter >= sinkSettings.getMaxRetries()) { logger.warn(\"Failed to send data to ClickHouse, cause: limit of attempts is exceeded.\" + \" ClickHouse response = {}. Ready to flush data on disk.\", response, requestBlank.getException()); logFailedRecords(requestBlank); future.completeExceptionally(new RuntimeException(String.format(\"Failed to send data to ClickHouse, cause: limit of attempts is exceeded.\" + \" ClickHouse response: %s. Cause: %s\", response != null ? response.getResponseBody() : null, requestBlank.getException()))); } else { requestBlank.incrementCounter(); logger.warn(\"Next attempt to send data to ClickHouse, table = {}, buffer size = {}, current attempt num = {}, max attempt num = {}, response = {}\", requestBlank.getTargetTable(), requestBlank.getValues().size(), requestBlank.getAttemptCounter(), sinkSettings.getMaxRetries(), response); queueCounter.incrementAndGet(); queue.put(requestBlank); future.complete(false); } } private void logFailedRecords(ClickHouseRequestBlank requestBlank) throws Exception { String filePath = String.format(\"%s/%s_%s\", sinkSettings.getFailedRecordsPath(), requestBlank.getTargetTable(), System.currentTimeMillis()); try (PrintWriter writer = new PrintWriter(filePath)) { List<String> records = requestBlank.getValues(); records.forEach(writer::println); writer.flush(); } logger.info(\"Successful send data on disk, path = {}, size = {} \", filePath, requestBlank.getValues().size()); } void setStopWorking() { isWorking = false; } } }"},{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/model/ClickHouseRequestBlank.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.model; import java.util.List; public class ClickHouseRequestBlank { private final List<String> values; private final String targetTable; private int attemptCounter; private Exception exception; public ClickHouseRequestBlank(List<String> values, String targetTable, Exception exception) { this.values = values; this.targetTable = targetTable; this.attemptCounter = 0; this.exception = exception; } public List<String> getValues() { return values; } public void incrementCounter() { this.attemptCounter++; } public int getAttemptCounter() { return attemptCounter; } public String getTargetTable() { return targetTable; } public Exception getException() { return exception; } public void setException(Exception exception) { this.exception = exception; } public static final class Builder { private List<String> values; private String targetTable; private Exception exception; private Builder() { } public static Builder aBuilder() { return new Builder(); } public Builder withValues(List<String> values) { this.values = values; return this; } public Builder withTargetTable(String targetTable) { this.targetTable = targetTable; return this; } public Builder withException(Exception exception) { this.exception = exception; return this; } public ClickHouseRequestBlank build() { return new ClickHouseRequestBlank(values, targetTable, exception); } } @Override public String toString() { return \"ClickHouseRequestBlank{\" + \"values=\" + values + \", targetTable='\" + targetTable + '\\'' + \", attemptCounter=\" + attemptCounter + \", exception=\" + exception + '}'; } }"},{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/util/FutureUtil.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.util; import java.util.List; import java.util.concurrent.CompletableFuture; public final class FutureUtil { private FutureUtil() { } public static CompletableFuture<Void> allOf(List<CompletableFuture<Boolean>> futures) { return CompletableFuture.allOf(futures.toArray(new CompletableFuture[0])); } }"}]}}
{"project_id":280,"chunk_id":0,"content":{"main_file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/applied/ClickHouseSinkManager.java","main_file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; import com.google.common.base.Preconditions; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkCommonParams; import java.util.*; import java.util.concurrent.CompletableFuture; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.MAX_BUFFER_SIZE; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.TARGET_TABLE_NAME; public class ClickHouseSinkManager implements AutoCloseable { private static final Logger logger = LoggerFactory.getLogger(ClickHouseSinkManager.class); private final ClickHouseWriter clickHouseWriter; private final ClickHouseSinkScheduledCheckerAndCleaner clickHouseSinkScheduledCheckerAndCleaner; private final ClickHouseSinkCommonParams sinkParams; private final List<CompletableFuture<Boolean>> futures = Collections.synchronizedList(new LinkedList<>()); private volatile boolean isClosed = false; public ClickHouseSinkManager(Map<String, String> globalParams) { sinkParams = new ClickHouseSinkCommonParams(globalParams); clickHouseWriter = new ClickHouseWriter(sinkParams, futures); clickHouseSinkScheduledCheckerAndCleaner = new ClickHouseSinkScheduledCheckerAndCleaner(sinkParams, futures); logger.info(\"Build sink writer's manager. params = {}\", sinkParams); } public Sink buildSink(Properties localProperties) { String targetTable = localProperties.getProperty(TARGET_TABLE_NAME); int maxFlushBufferSize = Integer.parseInt(localProperties.getProperty(MAX_BUFFER_SIZE)); return buildSink(targetTable, maxFlushBufferSize); } public Sink buildSink(String targetTable, int maxBufferSize) { Preconditions.checkNotNull(clickHouseSinkScheduledCheckerAndCleaner); Preconditions.checkNotNull(clickHouseWriter); ClickHouseSinkBuffer clickHouseSinkBuffer = ClickHouseSinkBuffer.Builder .aClickHouseSinkBuffer() .withTargetTable(targetTable) .withMaxFlushBufferSize(maxBufferSize) .withTimeoutSec(sinkParams.getTimeout()) .withFutures(futures) .build(clickHouseWriter); clickHouseSinkScheduledCheckerAndCleaner.addSinkBuffer(clickHouseSinkBuffer); if (sinkParams.isIgnoringClickHouseSendingExceptionEnabled()) { return new UnexceptionableSink(clickHouseSinkBuffer); } else { return new ExceptionsThrowableSink(clickHouseSinkBuffer); } } public boolean isClosed() { return isClosed; } @Override public void close() throws Exception { logger.info(\"ClickHouse sink manager is shutting down.\"); clickHouseSinkScheduledCheckerAndCleaner.close(); clickHouseWriter.close(); isClosed = true; logger.info(\"ClickHouse sink manager shutdown complete.\"); } }","dependencies":[{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/applied/ClickHouseSinkBuffer.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; import com.google.common.base.Preconditions; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseRequestBlank; import ru.ivi.opensource.flinkclickhousesink.util.FutureUtil; import java.util.ArrayList; import java.util.Collections; import java.util.List; import java.util.concurrent.CompletableFuture; import java.util.concurrent.ExecutionException; import java.util.concurrent.TimeUnit; public class ClickHouseSinkBuffer implements AutoCloseable { private static final Logger logger = LoggerFactory.getLogger(ClickHouseSinkBuffer.class); private final ClickHouseWriter writer; private final String targetTable; private final int maxFlushBufferSize; private final long timeoutMillis; private final List<String> localValues; private final List<CompletableFuture<Boolean>> futures; private volatile long lastAddTimeMillis = System.currentTimeMillis(); private ClickHouseSinkBuffer( ClickHouseWriter chWriter, long timeout, int maxBuffer, String table, List<CompletableFuture<Boolean>> futures ) { writer = chWriter; localValues = new ArrayList<>(); timeoutMillis = timeout; maxFlushBufferSize = maxBuffer; targetTable = table; this.futures = futures; logger.info(\"Instance ClickHouse Sink, target table = {}, buffer size = {}\", this.targetTable, this.maxFlushBufferSize); } String getTargetTable() { return targetTable; } public void put(String recordAsCSV) { tryAddToQueue(); localValues.add(recordAsCSV); } synchronized void tryAddToQueue() { if (flushCondition()) { addToQueue(); lastAddTimeMillis = System.currentTimeMillis(); } } private void addToQueue() { List<String> deepCopy = buildDeepCopy(localValues); ClickHouseRequestBlank params = ClickHouseRequestBlank.Builder .aBuilder() .withValues(deepCopy) .withTargetTable(targetTable) .build(); logger.debug(\"Build blank with params: buffer size = {}, target table = {}\", params.getValues().size(), params.getTargetTable()); writer.put(params); localValues.clear(); } private boolean flushCondition() { return localValues.size() > 0 && (checkSize() || checkTime()); } private boolean checkSize() { return localValues.size() >= maxFlushBufferSize; } private boolean checkTime() { long current = System.currentTimeMillis(); return current - lastAddTimeMillis > timeoutMillis; } private static List<String> buildDeepCopy(List<String> original) { return Collections.unmodifiableList(new ArrayList<>(original)); } public void assertFuturesNotFailedYet() throws ExecutionException, InterruptedException { CompletableFuture<Void> future = FutureUtil.allOf(futures); if (future.isCompletedExceptionally()) { future.get(); } } @Override public void close() { logger.info(\"ClickHouse sink buffer is shutting down.\"); if (localValues != null && localValues.size() > 0) { addToQueue(); } logger.info(\"ClickHouse sink buffer shutdown complete.\"); } public static final class Builder { private String targetTable; private int maxFlushBufferSize; private int timeoutSec; private List<CompletableFuture<Boolean>> futures; private Builder() { } public static Builder aClickHouseSinkBuffer() { return new Builder(); } public Builder withTargetTable(String targetTable) { this.targetTable = targetTable; return this; } public Builder withMaxFlushBufferSize(int maxFlushBufferSize) { this.maxFlushBufferSize = maxFlushBufferSize; return this; } public Builder withTimeoutSec(int timeoutSec) { this.timeoutSec = timeoutSec; return this; } public Builder withFutures(List<CompletableFuture<Boolean>> futures) { this.futures = futures; return this; } public ClickHouseSinkBuffer build(ClickHouseWriter writer) { Preconditions.checkNotNull(targetTable); Preconditions.checkArgument(maxFlushBufferSize > 0); Preconditions.checkArgument(timeoutSec > 0); return new ClickHouseSinkBuffer( writer, TimeUnit.SECONDS.toMillis(this.timeoutSec), this.maxFlushBufferSize, this.targetTable, this.futures ); } } }"},{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/applied/ClickHouseSinkScheduledCheckerAndCleaner.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkCommonParams; import ru.ivi.opensource.flinkclickhousesink.util.ThreadUtil; import java.util.ArrayList; import java.util.List; import java.util.concurrent.CompletableFuture; import java.util.concurrent.Executors; import java.util.concurrent.ScheduledExecutorService; import java.util.concurrent.ThreadFactory; import java.util.concurrent.TimeUnit; import java.util.function.Predicate; public class ClickHouseSinkScheduledCheckerAndCleaner implements AutoCloseable { private static final Logger logger = LoggerFactory.getLogger(ClickHouseSinkScheduledCheckerAndCleaner.class); private final ScheduledExecutorService scheduledExecutorService; private final List<ClickHouseSinkBuffer> clickHouseSinkBuffers = new ArrayList<>(); private final List<CompletableFuture<Boolean>> futures; private final Predicate<CompletableFuture<Boolean>> filter; public ClickHouseSinkScheduledCheckerAndCleaner(ClickHouseSinkCommonParams props, List<CompletableFuture<Boolean>> futures) { this.futures = futures; this.filter = getFuturesFilter(props.isIgnoringClickHouseSendingExceptionEnabled()); ThreadFactory factory = ThreadUtil.threadFactory(\"clickhouse-writer-checker-and-cleaner\"); scheduledExecutorService = Executors.newSingleThreadScheduledExecutor(factory); scheduledExecutorService.scheduleWithFixedDelay(getTask(), props.getTimeout(), props.getTimeout(), TimeUnit.SECONDS); logger.info(\"Build Sink scheduled checker, timeout (sec) = {}\", props.getTimeout()); } public void addSinkBuffer(ClickHouseSinkBuffer clickHouseSinkBuffer) { synchronized (this) { clickHouseSinkBuffers.add(clickHouseSinkBuffer); } logger.debug(\"Add sinkBuffer, target table = {}\", clickHouseSinkBuffer.getTargetTable()); } private Runnable getTask() { return () -> { synchronized (this) { logger.debug(\"Start checking buffers and cleanup futures: Before cleanup = {}.\", futures.size()); futures.removeIf(filter); clickHouseSinkBuffers.forEach(ClickHouseSinkBuffer::tryAddToQueue); } }; } private static Predicate<CompletableFuture<Boolean>> getFuturesFilter(boolean ignoringExceptionEnabled) { if (ignoringExceptionEnabled) { return CompletableFuture::isDone; } else { return f -> f.isDone() && !f.isCompletedExceptionally(); } } @Override public void close() throws Exception { logger.info(\"ClickHouseSinkScheduledCheckerAndCleaner is shutting down.\"); ThreadUtil.shutdownExecutorService(scheduledExecutorService); logger.info(\"ClickHouseSinkScheduledCheckerAndCleaner shutdown complete.\"); } }"},{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/applied/ClickHouseWriter.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; import com.google.common.collect.Lists; import io.netty.handler.codec.http.HttpHeaderNames; import org.asynchttpclient.AsyncHttpClient; import org.asynchttpclient.BoundRequestBuilder; import org.asynchttpclient.Dsl; import org.asynchttpclient.ListenableFuture; import org.asynchttpclient.Request; import org.asynchttpclient.Response; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseRequestBlank; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkCommonParams; import ru.ivi.opensource.flinkclickhousesink.util.FutureUtil; import ru.ivi.opensource.flinkclickhousesink.util.ThreadUtil; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.util.List; import java.util.concurrent.BlockingQueue; import java.util.concurrent.CompletableFuture; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.LinkedBlockingQueue; import java.util.concurrent.ThreadFactory; import java.util.concurrent.TimeUnit; import java.util.concurrent.atomic.AtomicLong; public class ClickHouseWriter implements AutoCloseable { private static final Logger logger = LoggerFactory.getLogger(ClickHouseWriter.class); private final BlockingQueue<ClickHouseRequestBlank> commonQueue; private final AtomicLong unprocessedRequestsCounter = new AtomicLong(); private final AsyncHttpClient asyncHttpClient; private final List<CompletableFuture<Boolean>> futures; private final ClickHouseSinkCommonParams sinkParams; private ExecutorService service; private ExecutorService callbackService; private List<WriterTask> tasks; public ClickHouseWriter(ClickHouseSinkCommonParams sinkParams, List<CompletableFuture<Boolean>> futures) { this(sinkParams, futures, Dsl.asyncHttpClient()); } public ClickHouseWriter(ClickHouseSinkCommonParams sinkParams, List<CompletableFuture<Boolean>> futures, AsyncHttpClient asyncHttpClient) { this.sinkParams = sinkParams; this.futures = futures; this.commonQueue = new LinkedBlockingQueue<>(sinkParams.getQueueMaxCapacity()); this.asyncHttpClient = asyncHttpClient; initDirAndExecutors(); } private void initDirAndExecutors() { try { initDir(sinkParams.getFailedRecordsPath()); buildComponents(); } catch (Exception e) { logger.error(\"Error while starting CH writer\", e); throw new RuntimeException(e); } } private static void initDir(String pathName) throws IOException { Path path = Paths.get(pathName); Files.createDirectories(path); } private void buildComponents() { logger.info(\"Building components\"); ThreadFactory threadFactory = ThreadUtil.threadFactory(\"clickhouse-writer\"); service = Executors.newFixedThreadPool(sinkParams.getNumWriters(), threadFactory); ThreadFactory callbackServiceFactory = ThreadUtil.threadFactory(\"clickhouse-writer-callback-executor\"); callbackService = Executors.newCachedThreadPool(callbackServiceFactory); int numWriters = sinkParams.getNumWriters(); tasks = Lists.newArrayListWithCapacity(numWriters); for (int i = 0; i < numWriters; i++) { WriterTask task = new WriterTask(i, asyncHttpClient, commonQueue, sinkParams, callbackService, futures, unprocessedRequestsCounter); tasks.add(task); service.submit(task); } } public void put(ClickHouseRequestBlank params) { try { unprocessedRequestsCounter.incrementAndGet(); commonQueue.put(params); } catch (InterruptedException e) { logger.error(\"Interrupted error while putting data to queue\", e); Thread.currentThread().interrupt(); throw new RuntimeException(e); } } private void waitUntilAllFuturesDone() { logger.info(\"Wait until all futures are done or completed exceptionally. Futures size: {}\", futures.size()); try { while (unprocessedRequestsCounter.get() > 0 || !futures.isEmpty()) { if (logger.isDebugEnabled()) { logger.debug(\"Futures size: {}.\", futures.size()); } CompletableFuture<Void> future = FutureUtil.allOf(futures); try { future.get(); futures.removeIf(f -> f.isDone() && !f.isCompletedExceptionally()); if (logger.isDebugEnabled()) { logger.debug(\"Futures size after removing: {}\", futures.size()); } } catch (Exception e) { throw new RuntimeException(e); } } } finally { stopWriters(); futures.clear(); } } private void stopWriters() { logger.info(\"Stopping writers.\"); if (tasks != null && tasks.size() > 0) { tasks.forEach(WriterTask::setStopWorking); } logger.info(\"Writers stopped.\"); } @Override public void close() throws Exception { logger.info(\"ClickHouseWriter is shutting down.\"); try { waitUntilAllFuturesDone(); } finally { ThreadUtil.shutdownExecutorService(service); ThreadUtil.shutdownExecutorService(callbackService); asyncHttpClient.close(); logger.info(\"{} shutdown complete.\", ClickHouseWriter.class.getSimpleName()); } } static class WriterTask implements Runnable { private static final Logger logger = LoggerFactory.getLogger(WriterTask.class); private static final int HTTP_OK = 200; private final BlockingQueue<ClickHouseRequestBlank> queue; private final AtomicLong queueCounter; private final ClickHouseSinkCommonParams sinkSettings; private final AsyncHttpClient asyncHttpClient; private final ExecutorService callbackService; private final List<CompletableFuture<Boolean>> futures; private final int id; private volatile boolean isWorking; WriterTask(int id, AsyncHttpClient asyncHttpClient, BlockingQueue<ClickHouseRequestBlank> queue, ClickHouseSinkCommonParams settings, ExecutorService callbackService, List<CompletableFuture<Boolean>> futures, AtomicLong queueCounter) { this.id = id; this.sinkSettings = settings; this.queue = queue; this.callbackService = callbackService; this.asyncHttpClient = asyncHttpClient; this.futures = futures; this.queueCounter = queueCounter; } @Override public void run() { try { isWorking = true; logger.info(\"Start writer task, id = {}\", id); while (isWorking || queue.size() > 0) { ClickHouseRequestBlank blank = queue.poll(300, TimeUnit.MILLISECONDS); if (blank != null) { CompletableFuture<Boolean> future = new CompletableFuture<>(); futures.add(future); send(blank, future); } } } catch (Exception e) { logger.error(\"Error while inserting data\", e); throw new RuntimeException(e); } finally { logger.info(\"Task id = {} is finished\", id); } } private void send(ClickHouseRequestBlank requestBlank, CompletableFuture<Boolean> future) { Request request = buildRequest(requestBlank); logger.info(\"Ready to load data to {}, size = {}\", requestBlank.getTargetTable(), requestBlank.getValues().size()); ListenableFuture<Response> whenResponse = asyncHttpClient.executeRequest(request); Runnable callback = responseCallback(whenResponse, requestBlank, future); whenResponse.addListener(callback, callbackService); } private Request buildRequest(ClickHouseRequestBlank requestBlank) { String resultCSV = String.join(\" , \", requestBlank.getValues()); String query = String.format(\"INSERT INTO %s VALUES %s\", requestBlank.getTargetTable(), resultCSV); String host = sinkSettings.getClickHouseClusterSettings().getRandomHostUrl(); BoundRequestBuilder builder = asyncHttpClient .preparePost(host) .setHeader(HttpHeaderNames.CONTENT_TYPE, \"text/plain; charset=utf-8\") .setBody(query); if (sinkSettings.getClickHouseClusterSettings().isAuthorizationRequired()) { builder.setHeader(HttpHeaderNames.AUTHORIZATION, \"Basic \" + sinkSettings.getClickHouseClusterSettings().getCredentials()); } return builder.build(); } private Runnable responseCallback(ListenableFuture<Response> whenResponse, ClickHouseRequestBlank requestBlank, CompletableFuture<Boolean> future) { return () -> { Response response = null; try { response = whenResponse.get(); if (response.getStatusCode() != HTTP_OK) { handleUnsuccessfulResponse(response, requestBlank, future); } else { logger.info(\"Successful send data to ClickHouse, batch size = {}, target table = {}, current attempt = {}\", requestBlank.getValues().size(), requestBlank.getTargetTable(), requestBlank.getAttemptCounter()); future.complete(true); } } catch (Exception e) { logger.error(\"Error while executing callback, params = {}\", sinkSettings, e); requestBlank.setException(e); try { handleUnsuccessfulResponse(response, requestBlank, future); } catch (Exception error) { logger.error(\"Error while handle unsuccessful response\", error); future.completeExceptionally(error); } } finally { queueCounter.decrementAndGet(); } }; } private void handleUnsuccessfulResponse(Response response, ClickHouseRequestBlank requestBlank, CompletableFuture<Boolean> future) throws Exception { int currentCounter = requestBlank.getAttemptCounter(); if (currentCounter >= sinkSettings.getMaxRetries()) { logger.warn(\"Failed to send data to ClickHouse, cause: limit of attempts is exceeded.\" + \" ClickHouse response = {}. Ready to flush data on disk.\", response, requestBlank.getException()); logFailedRecords(requestBlank); future.completeExceptionally(new RuntimeException(String.format(\"Failed to send data to ClickHouse, cause: limit of attempts is exceeded.\" + \" ClickHouse response: %s. Cause: %s\", response != null ? response.getResponseBody() : null, requestBlank.getException()))); } else { requestBlank.incrementCounter(); logger.warn(\"Next attempt to send data to ClickHouse, table = {}, buffer size = {}, current attempt num = {}, max attempt num = {}, response = {}\", requestBlank.getTargetTable(), requestBlank.getValues().size(), requestBlank.getAttemptCounter(), sinkSettings.getMaxRetries(), response); queueCounter.incrementAndGet(); queue.put(requestBlank); future.complete(false); } } private void logFailedRecords(ClickHouseRequestBlank requestBlank) throws Exception { String filePath = String.format(\"%s/%s_%s\", sinkSettings.getFailedRecordsPath(), requestBlank.getTargetTable(), System.currentTimeMillis()); try (PrintWriter writer = new PrintWriter(filePath)) { List<String> records = requestBlank.getValues(); records.forEach(writer::println); writer.flush(); } logger.info(\"Successful send data on disk, path = {}, size = {} \", filePath, requestBlank.getValues().size()); } void setStopWorking() { isWorking = false; } } }"},{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/applied/ExceptionsThrowableSink.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; import java.util.concurrent.ExecutionException; public class ExceptionsThrowableSink implements Sink { private final ClickHouseSinkBuffer clickHouseSinkBuffer; public ExceptionsThrowableSink(ClickHouseSinkBuffer buffer) { this.clickHouseSinkBuffer = buffer; } @Override public void put(String message) throws ExecutionException, InterruptedException { clickHouseSinkBuffer.put(message); clickHouseSinkBuffer.assertFuturesNotFailedYet(); } @Override public void close() { if (clickHouseSinkBuffer != null) { clickHouseSinkBuffer.close(); } } }"},{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/applied/Sink.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; import java.util.concurrent.ExecutionException; public interface Sink extends AutoCloseable { void put(String message) throws ExecutionException, InterruptedException; }"},{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/applied/UnexceptionableSink.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; public class UnexceptionableSink implements Sink { private final ClickHouseSinkBuffer clickHouseSinkBuffer; public UnexceptionableSink(ClickHouseSinkBuffer buffer) { this.clickHouseSinkBuffer = buffer; } @Override public void put(String message) { clickHouseSinkBuffer.put(message); } @Override public void close() { if (clickHouseSinkBuffer != null) { clickHouseSinkBuffer.close(); } } }"},{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/model/ClickHouseSinkCommonParams.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.model; import com.google.common.base.Preconditions; import java.util.Map; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.FAILED_RECORDS_PATH; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.IGNORING_CLICKHOUSE_SENDING_EXCEPTION_ENABLED; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.NUM_RETRIES; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.NUM_WRITERS; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.QUEUE_MAX_CAPACITY; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.TIMEOUT_SEC; public class ClickHouseSinkCommonParams { private final ClickHouseClusterSettings clickHouseClusterSettings; private final String failedRecordsPath; private final int numWriters; private final int queueMaxCapacity; private final boolean ignoringClickHouseSendingExceptionEnabled; private final int timeout; private final int maxRetries; public ClickHouseSinkCommonParams(Map<String, String> params) { Preconditions.checkNotNull(params.get(IGNORING_CLICKHOUSE_SENDING_EXCEPTION_ENABLED), \"Parameter \" + IGNORING_CLICKHOUSE_SENDING_EXCEPTION_ENABLED + \" must be initialized\"); this.clickHouseClusterSettings = new ClickHouseClusterSettings(params); this.numWriters = Integer.parseInt(params.get(NUM_WRITERS)); this.queueMaxCapacity = Integer.parseInt(params.get(QUEUE_MAX_CAPACITY)); this.maxRetries = Integer.parseInt(params.get(NUM_RETRIES)); this.timeout = Integer.parseInt(params.get(TIMEOUT_SEC)); this.failedRecordsPath = params.get(FAILED_RECORDS_PATH); this.ignoringClickHouseSendingExceptionEnabled = Boolean.parseBoolean(params.get(IGNORING_CLICKHOUSE_SENDING_EXCEPTION_ENABLED)); Preconditions.checkNotNull(failedRecordsPath); Preconditions.checkArgument(queueMaxCapacity > 0); Preconditions.checkArgument(numWriters > 0); Preconditions.checkArgument(timeout > 0); Preconditions.checkArgument(maxRetries > 0); } public int getNumWriters() { return numWriters; } public int getQueueMaxCapacity() { return queueMaxCapacity; } public boolean isIgnoringClickHouseSendingExceptionEnabled() { return ignoringClickHouseSendingExceptionEnabled; } public ClickHouseClusterSettings getClickHouseClusterSettings() { return clickHouseClusterSettings; } public int getTimeout() { return timeout; } public int getMaxRetries() { return maxRetries; } public String getFailedRecordsPath() { return failedRecordsPath; } @Override public String toString() { return \"ClickHouseSinkCommonParams{\" + \"clickHouseClusterSettings=\" + clickHouseClusterSettings + \", failedRecordsPath='\" + failedRecordsPath + '\\'' + \", numWriters=\" + numWriters + \", queueMaxCapacity=\" + queueMaxCapacity + \", ignoringClickHouseSendingExceptionEnabled=\" + ignoringClickHouseSendingExceptionEnabled + \", timeout=\" + timeout + \", maxRetries=\" + maxRetries + '}'; } }"}]}}
{"project_id":280,"chunk_id":0,"content":{"main_file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/applied/ClickHouseSinkScheduledCheckerAndCleaner.java","main_file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkCommonParams; import ru.ivi.opensource.flinkclickhousesink.util.ThreadUtil; import java.util.ArrayList; import java.util.List; import java.util.concurrent.CompletableFuture; import java.util.concurrent.Executors; import java.util.concurrent.ScheduledExecutorService; import java.util.concurrent.ThreadFactory; import java.util.concurrent.TimeUnit; import java.util.function.Predicate; public class ClickHouseSinkScheduledCheckerAndCleaner implements AutoCloseable { private static final Logger logger = LoggerFactory.getLogger(ClickHouseSinkScheduledCheckerAndCleaner.class); private final ScheduledExecutorService scheduledExecutorService; private final List<ClickHouseSinkBuffer> clickHouseSinkBuffers = new ArrayList<>(); private final List<CompletableFuture<Boolean>> futures; private final Predicate<CompletableFuture<Boolean>> filter; public ClickHouseSinkScheduledCheckerAndCleaner(ClickHouseSinkCommonParams props, List<CompletableFuture<Boolean>> futures) { this.futures = futures; this.filter = getFuturesFilter(props.isIgnoringClickHouseSendingExceptionEnabled()); ThreadFactory factory = ThreadUtil.threadFactory(\"clickhouse-writer-checker-and-cleaner\"); scheduledExecutorService = Executors.newSingleThreadScheduledExecutor(factory); scheduledExecutorService.scheduleWithFixedDelay(getTask(), props.getTimeout(), props.getTimeout(), TimeUnit.SECONDS); logger.info(\"Build Sink scheduled checker, timeout (sec) = {}\", props.getTimeout()); } public void addSinkBuffer(ClickHouseSinkBuffer clickHouseSinkBuffer) { synchronized (this) { clickHouseSinkBuffers.add(clickHouseSinkBuffer); } logger.debug(\"Add sinkBuffer, target table = {}\", clickHouseSinkBuffer.getTargetTable()); } private Runnable getTask() { return () -> { synchronized (this) { logger.debug(\"Start checking buffers and cleanup futures: Before cleanup = {}.\", futures.size()); futures.removeIf(filter); clickHouseSinkBuffers.forEach(ClickHouseSinkBuffer::tryAddToQueue); } }; } private static Predicate<CompletableFuture<Boolean>> getFuturesFilter(boolean ignoringExceptionEnabled) { if (ignoringExceptionEnabled) { return CompletableFuture::isDone; } else { return f -> f.isDone() && !f.isCompletedExceptionally(); } } @Override public void close() throws Exception { logger.info(\"ClickHouseSinkScheduledCheckerAndCleaner is shutting down.\"); ThreadUtil.shutdownExecutorService(scheduledExecutorService); logger.info(\"ClickHouseSinkScheduledCheckerAndCleaner shutdown complete.\"); } }","dependencies":[{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/applied/ClickHouseSinkBuffer.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; import com.google.common.base.Preconditions; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseRequestBlank; import ru.ivi.opensource.flinkclickhousesink.util.FutureUtil; import java.util.ArrayList; import java.util.Collections; import java.util.List; import java.util.concurrent.CompletableFuture; import java.util.concurrent.ExecutionException; import java.util.concurrent.TimeUnit; public class ClickHouseSinkBuffer implements AutoCloseable { private static final Logger logger = LoggerFactory.getLogger(ClickHouseSinkBuffer.class); private final ClickHouseWriter writer; private final String targetTable; private final int maxFlushBufferSize; private final long timeoutMillis; private final List<String> localValues; private final List<CompletableFuture<Boolean>> futures; private volatile long lastAddTimeMillis = System.currentTimeMillis(); private ClickHouseSinkBuffer( ClickHouseWriter chWriter, long timeout, int maxBuffer, String table, List<CompletableFuture<Boolean>> futures ) { writer = chWriter; localValues = new ArrayList<>(); timeoutMillis = timeout; maxFlushBufferSize = maxBuffer; targetTable = table; this.futures = futures; logger.info(\"Instance ClickHouse Sink, target table = {}, buffer size = {}\", this.targetTable, this.maxFlushBufferSize); } String getTargetTable() { return targetTable; } public void put(String recordAsCSV) { tryAddToQueue(); localValues.add(recordAsCSV); } synchronized void tryAddToQueue() { if (flushCondition()) { addToQueue(); lastAddTimeMillis = System.currentTimeMillis(); } } private void addToQueue() { List<String> deepCopy = buildDeepCopy(localValues); ClickHouseRequestBlank params = ClickHouseRequestBlank.Builder .aBuilder() .withValues(deepCopy) .withTargetTable(targetTable) .build(); logger.debug(\"Build blank with params: buffer size = {}, target table = {}\", params.getValues().size(), params.getTargetTable()); writer.put(params); localValues.clear(); } private boolean flushCondition() { return localValues.size() > 0 && (checkSize() || checkTime()); } private boolean checkSize() { return localValues.size() >= maxFlushBufferSize; } private boolean checkTime() { long current = System.currentTimeMillis(); return current - lastAddTimeMillis > timeoutMillis; } private static List<String> buildDeepCopy(List<String> original) { return Collections.unmodifiableList(new ArrayList<>(original)); } public void assertFuturesNotFailedYet() throws ExecutionException, InterruptedException { CompletableFuture<Void> future = FutureUtil.allOf(futures); if (future.isCompletedExceptionally()) { future.get(); } } @Override public void close() { logger.info(\"ClickHouse sink buffer is shutting down.\"); if (localValues != null && localValues.size() > 0) { addToQueue(); } logger.info(\"ClickHouse sink buffer shutdown complete.\"); } public static final class Builder { private String targetTable; private int maxFlushBufferSize; private int timeoutSec; private List<CompletableFuture<Boolean>> futures; private Builder() { } public static Builder aClickHouseSinkBuffer() { return new Builder(); } public Builder withTargetTable(String targetTable) { this.targetTable = targetTable; return this; } public Builder withMaxFlushBufferSize(int maxFlushBufferSize) { this.maxFlushBufferSize = maxFlushBufferSize; return this; } public Builder withTimeoutSec(int timeoutSec) { this.timeoutSec = timeoutSec; return this; } public Builder withFutures(List<CompletableFuture<Boolean>> futures) { this.futures = futures; return this; } public ClickHouseSinkBuffer build(ClickHouseWriter writer) { Preconditions.checkNotNull(targetTable); Preconditions.checkArgument(maxFlushBufferSize > 0); Preconditions.checkArgument(timeoutSec > 0); return new ClickHouseSinkBuffer( writer, TimeUnit.SECONDS.toMillis(this.timeoutSec), this.maxFlushBufferSize, this.targetTable, this.futures ); } } }"},{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/model/ClickHouseSinkCommonParams.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.model; import com.google.common.base.Preconditions; import java.util.Map; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.FAILED_RECORDS_PATH; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.IGNORING_CLICKHOUSE_SENDING_EXCEPTION_ENABLED; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.NUM_RETRIES; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.NUM_WRITERS; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.QUEUE_MAX_CAPACITY; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.TIMEOUT_SEC; public class ClickHouseSinkCommonParams { private final ClickHouseClusterSettings clickHouseClusterSettings; private final String failedRecordsPath; private final int numWriters; private final int queueMaxCapacity; private final boolean ignoringClickHouseSendingExceptionEnabled; private final int timeout; private final int maxRetries; public ClickHouseSinkCommonParams(Map<String, String> params) { Preconditions.checkNotNull(params.get(IGNORING_CLICKHOUSE_SENDING_EXCEPTION_ENABLED), \"Parameter \" + IGNORING_CLICKHOUSE_SENDING_EXCEPTION_ENABLED + \" must be initialized\"); this.clickHouseClusterSettings = new ClickHouseClusterSettings(params); this.numWriters = Integer.parseInt(params.get(NUM_WRITERS)); this.queueMaxCapacity = Integer.parseInt(params.get(QUEUE_MAX_CAPACITY)); this.maxRetries = Integer.parseInt(params.get(NUM_RETRIES)); this.timeout = Integer.parseInt(params.get(TIMEOUT_SEC)); this.failedRecordsPath = params.get(FAILED_RECORDS_PATH); this.ignoringClickHouseSendingExceptionEnabled = Boolean.parseBoolean(params.get(IGNORING_CLICKHOUSE_SENDING_EXCEPTION_ENABLED)); Preconditions.checkNotNull(failedRecordsPath); Preconditions.checkArgument(queueMaxCapacity > 0); Preconditions.checkArgument(numWriters > 0); Preconditions.checkArgument(timeout > 0); Preconditions.checkArgument(maxRetries > 0); } public int getNumWriters() { return numWriters; } public int getQueueMaxCapacity() { return queueMaxCapacity; } public boolean isIgnoringClickHouseSendingExceptionEnabled() { return ignoringClickHouseSendingExceptionEnabled; } public ClickHouseClusterSettings getClickHouseClusterSettings() { return clickHouseClusterSettings; } public int getTimeout() { return timeout; } public int getMaxRetries() { return maxRetries; } public String getFailedRecordsPath() { return failedRecordsPath; } @Override public String toString() { return \"ClickHouseSinkCommonParams{\" + \"clickHouseClusterSettings=\" + clickHouseClusterSettings + \", failedRecordsPath='\" + failedRecordsPath + '\\'' + \", numWriters=\" + numWriters + \", queueMaxCapacity=\" + queueMaxCapacity + \", ignoringClickHouseSendingExceptionEnabled=\" + ignoringClickHouseSendingExceptionEnabled + \", timeout=\" + timeout + \", maxRetries=\" + maxRetries + '}'; } }"},{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/util/ThreadUtil.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.util; import com.google.common.util.concurrent.ThreadFactoryBuilder; import java.util.concurrent.ExecutorService; import java.util.concurrent.ThreadFactory; import java.util.concurrent.TimeUnit; public final class ThreadUtil { private ThreadUtil() { } public static ThreadFactory threadFactory(String threadName, boolean isDaemon) { return new ThreadFactoryBuilder() .setNameFormat(threadName + \"-%d\") .setDaemon(isDaemon) .build(); } public static ThreadFactory threadFactory(String threadName) { return threadFactory(threadName, true); } public static void shutdownExecutorService(ExecutorService executorService) throws InterruptedException { shutdownExecutorService(executorService, 5); } public static void shutdownExecutorService(ExecutorService executorService, int timeoutS) throws InterruptedException { if (executorService != null && !executorService.isShutdown()) { executorService.shutdown(); if (!executorService.awaitTermination(timeoutS, TimeUnit.SECONDS)) { executorService.shutdownNow(); executorService.awaitTermination(timeoutS, TimeUnit.SECONDS); } } } }"}]}}
{"project_id":280,"chunk_id":0,"content":{"main_file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/applied/ClickHouseWriter.java","main_file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; import com.google.common.collect.Lists; import io.netty.handler.codec.http.HttpHeaderNames; import org.asynchttpclient.AsyncHttpClient; import org.asynchttpclient.BoundRequestBuilder; import org.asynchttpclient.Dsl; import org.asynchttpclient.ListenableFuture; import org.asynchttpclient.Request; import org.asynchttpclient.Response; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseRequestBlank; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkCommonParams; import ru.ivi.opensource.flinkclickhousesink.util.FutureUtil; import ru.ivi.opensource.flinkclickhousesink.util.ThreadUtil; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.util.List; import java.util.concurrent.BlockingQueue; import java.util.concurrent.CompletableFuture; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.LinkedBlockingQueue; import java.util.concurrent.ThreadFactory; import java.util.concurrent.TimeUnit; import java.util.concurrent.atomic.AtomicLong; public class ClickHouseWriter implements AutoCloseable { private static final Logger logger = LoggerFactory.getLogger(ClickHouseWriter.class); private final BlockingQueue<ClickHouseRequestBlank> commonQueue; private final AtomicLong unprocessedRequestsCounter = new AtomicLong(); private final AsyncHttpClient asyncHttpClient; private final List<CompletableFuture<Boolean>> futures; private final ClickHouseSinkCommonParams sinkParams; private ExecutorService service; private ExecutorService callbackService; private List<WriterTask> tasks; public ClickHouseWriter(ClickHouseSinkCommonParams sinkParams, List<CompletableFuture<Boolean>> futures) { this(sinkParams, futures, Dsl.asyncHttpClient()); } public ClickHouseWriter(ClickHouseSinkCommonParams sinkParams, List<CompletableFuture<Boolean>> futures, AsyncHttpClient asyncHttpClient) { this.sinkParams = sinkParams; this.futures = futures; this.commonQueue = new LinkedBlockingQueue<>(sinkParams.getQueueMaxCapacity()); this.asyncHttpClient = asyncHttpClient; initDirAndExecutors(); } private void initDirAndExecutors() { try { initDir(sinkParams.getFailedRecordsPath()); buildComponents(); } catch (Exception e) { logger.error(\"Error while starting CH writer\", e); throw new RuntimeException(e); } } private static void initDir(String pathName) throws IOException { Path path = Paths.get(pathName); Files.createDirectories(path); } private void buildComponents() { logger.info(\"Building components\"); ThreadFactory threadFactory = ThreadUtil.threadFactory(\"clickhouse-writer\"); service = Executors.newFixedThreadPool(sinkParams.getNumWriters(), threadFactory); ThreadFactory callbackServiceFactory = ThreadUtil.threadFactory(\"clickhouse-writer-callback-executor\"); callbackService = Executors.newCachedThreadPool(callbackServiceFactory); int numWriters = sinkParams.getNumWriters(); tasks = Lists.newArrayListWithCapacity(numWriters); for (int i = 0; i < numWriters; i++) { WriterTask task = new WriterTask(i, asyncHttpClient, commonQueue, sinkParams, callbackService, futures, unprocessedRequestsCounter); tasks.add(task); service.submit(task); } } public void put(ClickHouseRequestBlank params) { try { unprocessedRequestsCounter.incrementAndGet(); commonQueue.put(params); } catch (InterruptedException e) { logger.error(\"Interrupted error while putting data to queue\", e); Thread.currentThread().interrupt(); throw new RuntimeException(e); } } private void waitUntilAllFuturesDone() { logger.info(\"Wait until all futures are done or completed exceptionally. Futures size: {}\", futures.size()); try { while (unprocessedRequestsCounter.get() > 0 || !futures.isEmpty()) { if (logger.isDebugEnabled()) { logger.debug(\"Futures size: {}.\", futures.size()); } CompletableFuture<Void> future = FutureUtil.allOf(futures); try { future.get(); futures.removeIf(f -> f.isDone() && !f.isCompletedExceptionally()); if (logger.isDebugEnabled()) { logger.debug(\"Futures size after removing: {}\", futures.size()); } } catch (Exception e) { throw new RuntimeException(e); } } } finally { stopWriters(); futures.clear(); } } private void stopWriters() { logger.info(\"Stopping writers.\"); if (tasks != null && tasks.size() > 0) { tasks.forEach(WriterTask::setStopWorking); } logger.info(\"Writers stopped.\"); } @Override public void close() throws Exception { logger.info(\"ClickHouseWriter is shutting down.\"); try { waitUntilAllFuturesDone(); } finally { ThreadUtil.shutdownExecutorService(service); ThreadUtil.shutdownExecutorService(callbackService); asyncHttpClient.close(); logger.info(\"{} shutdown complete.\", ClickHouseWriter.class.getSimpleName()); } } static class WriterTask implements Runnable { private static final Logger logger = LoggerFactory.getLogger(WriterTask.class); private static final int HTTP_OK = 200; private final BlockingQueue<ClickHouseRequestBlank> queue; private final AtomicLong queueCounter; private final ClickHouseSinkCommonParams sinkSettings; private final AsyncHttpClient asyncHttpClient; private final ExecutorService callbackService; private final List<CompletableFuture<Boolean>> futures; private final int id; private volatile boolean isWorking; WriterTask(int id, AsyncHttpClient asyncHttpClient, BlockingQueue<ClickHouseRequestBlank> queue, ClickHouseSinkCommonParams settings, ExecutorService callbackService, List<CompletableFuture<Boolean>> futures, AtomicLong queueCounter) { this.id = id; this.sinkSettings = settings; this.queue = queue; this.callbackService = callbackService; this.asyncHttpClient = asyncHttpClient; this.futures = futures; this.queueCounter = queueCounter; } @Override public void run() { try { isWorking = true; logger.info(\"Start writer task, id = {}\", id); while (isWorking || queue.size() > 0) { ClickHouseRequestBlank blank = queue.poll(300, TimeUnit.MILLISECONDS); if (blank != null) { CompletableFuture<Boolean> future = new CompletableFuture<>(); futures.add(future); send(blank, future); } } } catch (Exception e) { logger.error(\"Error while inserting data\", e); throw new RuntimeException(e); } finally { logger.info(\"Task id = {} is finished\", id); } } private void send(ClickHouseRequestBlank requestBlank, CompletableFuture<Boolean> future) { Request request = buildRequest(requestBlank); logger.info(\"Ready to load data to {}, size = {}\", requestBlank.getTargetTable(), requestBlank.getValues().size()); ListenableFuture<Response> whenResponse = asyncHttpClient.executeRequest(request); Runnable callback = responseCallback(whenResponse, requestBlank, future); whenResponse.addListener(callback, callbackService); } private Request buildRequest(ClickHouseRequestBlank requestBlank) { String resultCSV = String.join(\" , \", requestBlank.getValues()); String query = String.format(\"INSERT INTO %s VALUES %s\", requestBlank.getTargetTable(), resultCSV); String host = sinkSettings.getClickHouseClusterSettings().getRandomHostUrl(); BoundRequestBuilder builder = asyncHttpClient .preparePost(host) .setHeader(HttpHeaderNames.CONTENT_TYPE, \"text/plain; charset=utf-8\") .setBody(query); if (sinkSettings.getClickHouseClusterSettings().isAuthorizationRequired()) { builder.setHeader(HttpHeaderNames.AUTHORIZATION, \"Basic \" + sinkSettings.getClickHouseClusterSettings().getCredentials()); } return builder.build(); } private Runnable responseCallback(ListenableFuture<Response> whenResponse, ClickHouseRequestBlank requestBlank, CompletableFuture<Boolean> future) { return () -> { Response response = null; try { response = whenResponse.get(); if (response.getStatusCode() != HTTP_OK) { handleUnsuccessfulResponse(response, requestBlank, future); } else { logger.info(\"Successful send data to ClickHouse, batch size = {}, target table = {}, current attempt = {}\", requestBlank.getValues().size(), requestBlank.getTargetTable(), requestBlank.getAttemptCounter()); future.complete(true); } } catch (Exception e) { logger.error(\"Error while executing callback, params = {}\", sinkSettings, e); requestBlank.setException(e); try { handleUnsuccessfulResponse(response, requestBlank, future); } catch (Exception error) { logger.error(\"Error while handle unsuccessful response\", error); future.completeExceptionally(error); } } finally { queueCounter.decrementAndGet(); } }; } private void handleUnsuccessfulResponse(Response response, ClickHouseRequestBlank requestBlank, CompletableFuture<Boolean> future) throws Exception { int currentCounter = requestBlank.getAttemptCounter(); if (currentCounter >= sinkSettings.getMaxRetries()) { logger.warn(\"Failed to send data to ClickHouse, cause: limit of attempts is exceeded.\" + \" ClickHouse response = {}. Ready to flush data on disk.\", response, requestBlank.getException()); logFailedRecords(requestBlank); future.completeExceptionally(new RuntimeException(String.format(\"Failed to send data to ClickHouse, cause: limit of attempts is exceeded.\" + \" ClickHouse response: %s. Cause: %s\", response != null ? response.getResponseBody() : null, requestBlank.getException()))); } else { requestBlank.incrementCounter(); logger.warn(\"Next attempt to send data to ClickHouse, table = {}, buffer size = {}, current attempt num = {}, max attempt num = {}, response = {}\", requestBlank.getTargetTable(), requestBlank.getValues().size(), requestBlank.getAttemptCounter(), sinkSettings.getMaxRetries(), response); queueCounter.incrementAndGet(); queue.put(requestBlank); future.complete(false); } } private void logFailedRecords(ClickHouseRequestBlank requestBlank) throws Exception { String filePath = String.format(\"%s/%s_%s\", sinkSettings.getFailedRecordsPath(), requestBlank.getTargetTable(), System.currentTimeMillis()); try (PrintWriter writer = new PrintWriter(filePath)) { List<String> records = requestBlank.getValues(); records.forEach(writer::println); writer.flush(); } logger.info(\"Successful send data on disk, path = {}, size = {} \", filePath, requestBlank.getValues().size()); } void setStopWorking() { isWorking = false; } } }","dependencies":[{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/model/ClickHouseRequestBlank.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.model; import java.util.List; public class ClickHouseRequestBlank { private final List<String> values; private final String targetTable; private int attemptCounter; private Exception exception; public ClickHouseRequestBlank(List<String> values, String targetTable, Exception exception) { this.values = values; this.targetTable = targetTable; this.attemptCounter = 0; this.exception = exception; } public List<String> getValues() { return values; } public void incrementCounter() { this.attemptCounter++; } public int getAttemptCounter() { return attemptCounter; } public String getTargetTable() { return targetTable; } public Exception getException() { return exception; } public void setException(Exception exception) { this.exception = exception; } public static final class Builder { private List<String> values; private String targetTable; private Exception exception; private Builder() { } public static Builder aBuilder() { return new Builder(); } public Builder withValues(List<String> values) { this.values = values; return this; } public Builder withTargetTable(String targetTable) { this.targetTable = targetTable; return this; } public Builder withException(Exception exception) { this.exception = exception; return this; } public ClickHouseRequestBlank build() { return new ClickHouseRequestBlank(values, targetTable, exception); } } @Override public String toString() { return \"ClickHouseRequestBlank{\" + \"values=\" + values + \", targetTable='\" + targetTable + '\\'' + \", attemptCounter=\" + attemptCounter + \", exception=\" + exception + '}'; } }"},{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/model/ClickHouseSinkCommonParams.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.model; import com.google.common.base.Preconditions; import java.util.Map; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.FAILED_RECORDS_PATH; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.IGNORING_CLICKHOUSE_SENDING_EXCEPTION_ENABLED; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.NUM_RETRIES; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.NUM_WRITERS; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.QUEUE_MAX_CAPACITY; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.TIMEOUT_SEC; public class ClickHouseSinkCommonParams { private final ClickHouseClusterSettings clickHouseClusterSettings; private final String failedRecordsPath; private final int numWriters; private final int queueMaxCapacity; private final boolean ignoringClickHouseSendingExceptionEnabled; private final int timeout; private final int maxRetries; public ClickHouseSinkCommonParams(Map<String, String> params) { Preconditions.checkNotNull(params.get(IGNORING_CLICKHOUSE_SENDING_EXCEPTION_ENABLED), \"Parameter \" + IGNORING_CLICKHOUSE_SENDING_EXCEPTION_ENABLED + \" must be initialized\"); this.clickHouseClusterSettings = new ClickHouseClusterSettings(params); this.numWriters = Integer.parseInt(params.get(NUM_WRITERS)); this.queueMaxCapacity = Integer.parseInt(params.get(QUEUE_MAX_CAPACITY)); this.maxRetries = Integer.parseInt(params.get(NUM_RETRIES)); this.timeout = Integer.parseInt(params.get(TIMEOUT_SEC)); this.failedRecordsPath = params.get(FAILED_RECORDS_PATH); this.ignoringClickHouseSendingExceptionEnabled = Boolean.parseBoolean(params.get(IGNORING_CLICKHOUSE_SENDING_EXCEPTION_ENABLED)); Preconditions.checkNotNull(failedRecordsPath); Preconditions.checkArgument(queueMaxCapacity > 0); Preconditions.checkArgument(numWriters > 0); Preconditions.checkArgument(timeout > 0); Preconditions.checkArgument(maxRetries > 0); } public int getNumWriters() { return numWriters; } public int getQueueMaxCapacity() { return queueMaxCapacity; } public boolean isIgnoringClickHouseSendingExceptionEnabled() { return ignoringClickHouseSendingExceptionEnabled; } public ClickHouseClusterSettings getClickHouseClusterSettings() { return clickHouseClusterSettings; } public int getTimeout() { return timeout; } public int getMaxRetries() { return maxRetries; } public String getFailedRecordsPath() { return failedRecordsPath; } @Override public String toString() { return \"ClickHouseSinkCommonParams{\" + \"clickHouseClusterSettings=\" + clickHouseClusterSettings + \", failedRecordsPath='\" + failedRecordsPath + '\\'' + \", numWriters=\" + numWriters + \", queueMaxCapacity=\" + queueMaxCapacity + \", ignoringClickHouseSendingExceptionEnabled=\" + ignoringClickHouseSendingExceptionEnabled + \", timeout=\" + timeout + \", maxRetries=\" + maxRetries + '}'; } }"},{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/util/FutureUtil.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.util; import java.util.List; import java.util.concurrent.CompletableFuture; public final class FutureUtil { private FutureUtil() { } public static CompletableFuture<Void> allOf(List<CompletableFuture<Boolean>> futures) { return CompletableFuture.allOf(futures.toArray(new CompletableFuture[0])); } }"},{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/util/ThreadUtil.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.util; import com.google.common.util.concurrent.ThreadFactoryBuilder; import java.util.concurrent.ExecutorService; import java.util.concurrent.ThreadFactory; import java.util.concurrent.TimeUnit; public final class ThreadUtil { private ThreadUtil() { } public static ThreadFactory threadFactory(String threadName, boolean isDaemon) { return new ThreadFactoryBuilder() .setNameFormat(threadName + \"-%d\") .setDaemon(isDaemon) .build(); } public static ThreadFactory threadFactory(String threadName) { return threadFactory(threadName, true); } public static void shutdownExecutorService(ExecutorService executorService) throws InterruptedException { shutdownExecutorService(executorService, 5); } public static void shutdownExecutorService(ExecutorService executorService, int timeoutS) throws InterruptedException { if (executorService != null && !executorService.isShutdown()) { executorService.shutdown(); if (!executorService.awaitTermination(timeoutS, TimeUnit.SECONDS)) { executorService.shutdownNow(); executorService.awaitTermination(timeoutS, TimeUnit.SECONDS); } } } }"}]}}
{"project_id":280,"chunk_id":0,"content":{"main_file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/util/ThreadUtil.java","main_file_content":"package ru.ivi.opensource.flinkclickhousesink.util; import com.google.common.util.concurrent.ThreadFactoryBuilder; import java.util.concurrent.ExecutorService; import java.util.concurrent.ThreadFactory; import java.util.concurrent.TimeUnit; public final class ThreadUtil { private ThreadUtil() { } public static ThreadFactory threadFactory(String threadName, boolean isDaemon) { return new ThreadFactoryBuilder() .setNameFormat(threadName + \"-%d\") .setDaemon(isDaemon) .build(); } public static ThreadFactory threadFactory(String threadName) { return threadFactory(threadName, true); } public static void shutdownExecutorService(ExecutorService executorService) throws InterruptedException { shutdownExecutorService(executorService, 5); } public static void shutdownExecutorService(ExecutorService executorService, int timeoutS) throws InterruptedException { if (executorService != null && !executorService.isShutdown()) { executorService.shutdown(); if (!executorService.awaitTermination(timeoutS, TimeUnit.SECONDS)) { executorService.shutdownNow(); executorService.awaitTermination(timeoutS, TimeUnit.SECONDS); } } } }","dependencies":[]}}
{"project_id":280,"chunk_id":0,"content":{"main_file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/util/ConfigUtil.java","main_file_content":"package ru.ivi.opensource.flinkclickhousesink.util; import com.typesafe.config.Config; import com.typesafe.config.ConfigValue; import java.util.Arrays; import java.util.HashMap; import java.util.List; import java.util.Map; import java.util.Properties; public final class ConfigUtil { public static final String HOST_DELIMITER = \",\"; private ConfigUtil() { } public static Properties toProperties(Config config) { Properties properties = new Properties(); config.entrySet().forEach(e -> properties.put(e.getKey(), unwrapped(config.getValue(e.getKey())))); return properties; } public static Map<String, String> toMap(Config config) { Map<String, String> map = new HashMap<>(); config.entrySet().forEach(e -> map.put(e.getKey(), unwrapped(e.getValue()))); return map; } private static String unwrapped(ConfigValue configValue) { Object object = configValue.unwrapped(); return object.toString(); } public static String buildStringFromList(List<String> list) { return String.join(HOST_DELIMITER, list); } public static List<String> buildListFromString(String string) { return Arrays.asList(string.split(\" \")); } }","dependencies":[]}}
{"project_id":280,"chunk_id":0,"content":{"main_file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/util/FutureUtil.java","main_file_content":"package ru.ivi.opensource.flinkclickhousesink.util; import java.util.List; import java.util.concurrent.CompletableFuture; public final class FutureUtil { private FutureUtil() { } public static CompletableFuture<Void> allOf(List<CompletableFuture<Boolean>> futures) { return CompletableFuture.allOf(futures.toArray(new CompletableFuture[0])); } }","dependencies":[]}}
{"project_id":280,"chunk_id":0,"content":{"main_file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/model/ClickHouseSinkCommonParams.java","main_file_content":"package ru.ivi.opensource.flinkclickhousesink.model; import com.google.common.base.Preconditions; import java.util.Map; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.FAILED_RECORDS_PATH; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.IGNORING_CLICKHOUSE_SENDING_EXCEPTION_ENABLED; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.NUM_RETRIES; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.NUM_WRITERS; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.QUEUE_MAX_CAPACITY; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.TIMEOUT_SEC; public class ClickHouseSinkCommonParams { private final ClickHouseClusterSettings clickHouseClusterSettings; private final String failedRecordsPath; private final int numWriters; private final int queueMaxCapacity; private final boolean ignoringClickHouseSendingExceptionEnabled; private final int timeout; private final int maxRetries; public ClickHouseSinkCommonParams(Map<String, String> params) { Preconditions.checkNotNull(params.get(IGNORING_CLICKHOUSE_SENDING_EXCEPTION_ENABLED), \"Parameter \" + IGNORING_CLICKHOUSE_SENDING_EXCEPTION_ENABLED + \" must be initialized\"); this.clickHouseClusterSettings = new ClickHouseClusterSettings(params); this.numWriters = Integer.parseInt(params.get(NUM_WRITERS)); this.queueMaxCapacity = Integer.parseInt(params.get(QUEUE_MAX_CAPACITY)); this.maxRetries = Integer.parseInt(params.get(NUM_RETRIES)); this.timeout = Integer.parseInt(params.get(TIMEOUT_SEC)); this.failedRecordsPath = params.get(FAILED_RECORDS_PATH); this.ignoringClickHouseSendingExceptionEnabled = Boolean.parseBoolean(params.get(IGNORING_CLICKHOUSE_SENDING_EXCEPTION_ENABLED)); Preconditions.checkNotNull(failedRecordsPath); Preconditions.checkArgument(queueMaxCapacity > 0); Preconditions.checkArgument(numWriters > 0); Preconditions.checkArgument(timeout > 0); Preconditions.checkArgument(maxRetries > 0); } public int getNumWriters() { return numWriters; } public int getQueueMaxCapacity() { return queueMaxCapacity; } public boolean isIgnoringClickHouseSendingExceptionEnabled() { return ignoringClickHouseSendingExceptionEnabled; } public ClickHouseClusterSettings getClickHouseClusterSettings() { return clickHouseClusterSettings; } public int getTimeout() { return timeout; } public int getMaxRetries() { return maxRetries; } public String getFailedRecordsPath() { return failedRecordsPath; } @Override public String toString() { return \"ClickHouseSinkCommonParams{\" + \"clickHouseClusterSettings=\" + clickHouseClusterSettings + \", failedRecordsPath='\" + failedRecordsPath + '\\'' + \", numWriters=\" + numWriters + \", queueMaxCapacity=\" + queueMaxCapacity + \", ignoringClickHouseSendingExceptionEnabled=\" + ignoringClickHouseSendingExceptionEnabled + \", timeout=\" + timeout + \", maxRetries=\" + maxRetries + '}'; } }","dependencies":[{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/model/ClickHouseClusterSettings.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.model; import com.google.common.base.Preconditions; import org.apache.commons.lang3.StringUtils; import ru.ivi.opensource.flinkclickhousesink.util.ConfigUtil; import java.util.Arrays; import java.util.Base64; import java.util.List; import java.util.Map; import java.util.concurrent.ThreadLocalRandom; import java.util.stream.Collectors; public class ClickHouseClusterSettings { public static final String CLICKHOUSE_HOSTS = \"clickhouse.access.hosts\"; public static final String CLICKHOUSE_USER = \"clickhouse.access.user\"; public static final String CLICKHOUSE_PASSWORD = \"clickhouse.access.password\"; private final List<String> hostsWithPorts; private final String user; private final String password; private final String credentials; private final boolean authorizationRequired; private int currentHostId = 0; public ClickHouseClusterSettings(Map<String, String> parameters) { Preconditions.checkNotNull(parameters); String hostsString = parameters.get(CLICKHOUSE_HOSTS); Preconditions.checkNotNull(hostsString); hostsWithPorts = buildHostsAndPort(hostsString); Preconditions.checkArgument(hostsWithPorts.size() > 0); String usr = parameters.get(CLICKHOUSE_USER); String pass = parameters.get(CLICKHOUSE_PASSWORD); if (StringUtils.isNotEmpty(usr) && StringUtils.isNotEmpty(pass)) { user = parameters.get(CLICKHOUSE_USER); password = parameters.get(CLICKHOUSE_PASSWORD); credentials = buildCredentials(user, password); authorizationRequired = true; } else { credentials = \"\"; password = \"\"; user = \"\"; authorizationRequired = false; } } private static List<String> buildHostsAndPort(String hostsString) { String hosts = hostsString.replace(\" \", \"\"); return Arrays.stream(hosts .split(ConfigUtil.HOST_DELIMITER)) .map(ClickHouseClusterSettings::checkHttpAndAdd) .collect(Collectors.toList()); } private static String checkHttpAndAdd(String host) { String newHost = host.replace(\" \", \"\"); if (!newHost.contains(\"http\")) { return \"http: } return newHost; } private static String buildCredentials(String user, String password) { Base64.Encoder x = Base64.getEncoder(); String credentials = String.join(\":\", user, password); return new String(x.encode(credentials.getBytes())); } public String getRandomHostUrl() { currentHostId = ThreadLocalRandom.current().nextInt(hostsWithPorts.size()); return hostsWithPorts.get(currentHostId); } public String getNextHost() { if (currentHostId >= hostsWithPorts.size() - 1) { currentHostId = 0; } else { currentHostId += 1; } return hostsWithPorts.get(currentHostId); } public List<String> getHostsWithPorts() { return hostsWithPorts; } public String getUser() { return user; } public String getPassword() { return password; } public String getCredentials() { return credentials; } public boolean isAuthorizationRequired() { return authorizationRequired; } @Override public String toString() { return \"ClickHouseClusterSettings{\" + \"hostsWithPorts=\" + hostsWithPorts + \", credentials='\" + credentials + '\\'' + \", authorizationRequired=\" + authorizationRequired + \", currentHostId=\" + currentHostId + '}'; } }"}]}}
{"project_id":280,"chunk_id":0,"content":{"main_file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/model/ClickHouseSinkConst.java","main_file_content":"package ru.ivi.opensource.flinkclickhousesink.model; public final class ClickHouseSinkConst { private ClickHouseSinkConst() { } public static final String TARGET_TABLE_NAME = \"clickhouse.sink.target-table\"; public static final String MAX_BUFFER_SIZE = \"clickhouse.sink.max-buffer-size\"; public static final String NUM_WRITERS = \"clickhouse.sink.num-writers\"; public static final String QUEUE_MAX_CAPACITY = \"clickhouse.sink.queue-max-capacity\"; public static final String TIMEOUT_SEC = \"clickhouse.sink.timeout-sec\"; public static final String NUM_RETRIES = \"clickhouse.sink.retries\"; public static final String FAILED_RECORDS_PATH = \"clickhouse.sink.failed-records-path\"; public static final String IGNORING_CLICKHOUSE_SENDING_EXCEPTION_ENABLED = \"clickhouse.sink.ignoring-clickhouse-sending-exception-enabled\"; }","dependencies":[]}}
{"project_id":280,"chunk_id":0,"content":{"main_file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/model/ClickHouseClusterSettings.java","main_file_content":"package ru.ivi.opensource.flinkclickhousesink.model; import com.google.common.base.Preconditions; import org.apache.commons.lang3.StringUtils; import ru.ivi.opensource.flinkclickhousesink.util.ConfigUtil; import java.util.Arrays; import java.util.Base64; import java.util.List; import java.util.Map; import java.util.concurrent.ThreadLocalRandom; import java.util.stream.Collectors; public class ClickHouseClusterSettings { public static final String CLICKHOUSE_HOSTS = \"clickhouse.access.hosts\"; public static final String CLICKHOUSE_USER = \"clickhouse.access.user\"; public static final String CLICKHOUSE_PASSWORD = \"clickhouse.access.password\"; private final List<String> hostsWithPorts; private final String user; private final String password; private final String credentials; private final boolean authorizationRequired; private int currentHostId = 0; public ClickHouseClusterSettings(Map<String, String> parameters) { Preconditions.checkNotNull(parameters); String hostsString = parameters.get(CLICKHOUSE_HOSTS); Preconditions.checkNotNull(hostsString); hostsWithPorts = buildHostsAndPort(hostsString); Preconditions.checkArgument(hostsWithPorts.size() > 0); String usr = parameters.get(CLICKHOUSE_USER); String pass = parameters.get(CLICKHOUSE_PASSWORD); if (StringUtils.isNotEmpty(usr) && StringUtils.isNotEmpty(pass)) { user = parameters.get(CLICKHOUSE_USER); password = parameters.get(CLICKHOUSE_PASSWORD); credentials = buildCredentials(user, password); authorizationRequired = true; } else { credentials = \"\"; password = \"\"; user = \"\"; authorizationRequired = false; } } private static List<String> buildHostsAndPort(String hostsString) { String hosts = hostsString.replace(\" \", \"\"); return Arrays.stream(hosts .split(ConfigUtil.HOST_DELIMITER)) .map(ClickHouseClusterSettings::checkHttpAndAdd) .collect(Collectors.toList()); } private static String checkHttpAndAdd(String host) { String newHost = host.replace(\" \", \"\"); if (!newHost.contains(\"http\")) { return \"http: } return newHost; } private static String buildCredentials(String user, String password) { Base64.Encoder x = Base64.getEncoder(); String credentials = String.join(\":\", user, password); return new String(x.encode(credentials.getBytes())); } public String getRandomHostUrl() { currentHostId = ThreadLocalRandom.current().nextInt(hostsWithPorts.size()); return hostsWithPorts.get(currentHostId); } public String getNextHost() { if (currentHostId >= hostsWithPorts.size() - 1) { currentHostId = 0; } else { currentHostId += 1; } return hostsWithPorts.get(currentHostId); } public List<String> getHostsWithPorts() { return hostsWithPorts; } public String getUser() { return user; } public String getPassword() { return password; } public String getCredentials() { return credentials; } public boolean isAuthorizationRequired() { return authorizationRequired; } @Override public String toString() { return \"ClickHouseClusterSettings{\" + \"hostsWithPorts=\" + hostsWithPorts + \", credentials='\" + credentials + '\\'' + \", authorizationRequired=\" + authorizationRequired + \", currentHostId=\" + currentHostId + '}'; } }","dependencies":[]}}
{"project_id":280,"chunk_id":0,"content":{"main_file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/model/ClickHouseRequestBlank.java","main_file_content":"package ru.ivi.opensource.flinkclickhousesink.model; import java.util.List; public class ClickHouseRequestBlank { private final List<String> values; private final String targetTable; private int attemptCounter; private Exception exception; public ClickHouseRequestBlank(List<String> values, String targetTable, Exception exception) { this.values = values; this.targetTable = targetTable; this.attemptCounter = 0; this.exception = exception; } public List<String> getValues() { return values; } public void incrementCounter() { this.attemptCounter++; } public int getAttemptCounter() { return attemptCounter; } public String getTargetTable() { return targetTable; } public Exception getException() { return exception; } public void setException(Exception exception) { this.exception = exception; } public static final class Builder { private List<String> values; private String targetTable; private Exception exception; private Builder() { } public static Builder aBuilder() { return new Builder(); } public Builder withValues(List<String> values) { this.values = values; return this; } public Builder withTargetTable(String targetTable) { this.targetTable = targetTable; return this; } public Builder withException(Exception exception) { this.exception = exception; return this; } public ClickHouseRequestBlank build() { return new ClickHouseRequestBlank(values, targetTable, exception); } } @Override public String toString() { return \"ClickHouseRequestBlank{\" + \"values=\" + values + \", targetTable='\" + targetTable + '\\'' + \", attemptCounter=\" + attemptCounter + \", exception=\" + exception + '}'; } }","dependencies":[]}}
{"project_id":280,"chunk_id":0,"content":{"main_file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/test/java/ru/ivi/opensource/flinkclickhousesink/ClickHouseWriterTest.java","main_file_content":"package ru.ivi.opensource.flinkclickhousesink; import com.google.common.collect.Lists; import com.google.common.util.concurrent.Striped; import com.typesafe.config.Config; import com.typesafe.config.ConfigFactory; import com.zaxxer.hikari.HikariConfig; import com.zaxxer.hikari.HikariDataSource; import org.apache.flink.api.common.restartstrategy.RestartStrategies; import org.apache.flink.api.java.utils.ParameterTool; import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment; import org.asynchttpclient.AsyncHttpClient; import org.asynchttpclient.Dsl; import org.asynchttpclient.ListenableFuture; import org.asynchttpclient.Request; import org.hamcrest.CoreMatchers; import org.jmock.lib.concurrent.Blitzer; import org.junit.After; import org.junit.Before; import org.junit.Rule; import org.junit.Test; import org.mockito.Mockito; import org.testcontainers.containers.ClickHouseContainer; import org.testcontainers.shaded.com.google.common.collect.ImmutableList; import ru.ivi.opensource.flinkclickhousesink.applied.ClickHouseSinkManager; import ru.ivi.opensource.flinkclickhousesink.applied.ClickHouseWriter; import ru.ivi.opensource.flinkclickhousesink.applied.Sink; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseClusterSettings; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseRequestBlank; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkCommonParams; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst; import ru.ivi.opensource.flinkclickhousesink.util.ConfigUtil; import java.sql.Connection; import java.sql.ResultSet; import java.sql.Statement; import java.util.ArrayList; import java.util.Collections; import java.util.LinkedList; import java.util.List; import java.util.Map; import java.util.Properties; import java.util.concurrent.ExecutionException; import java.util.concurrent.ThreadLocalRandom; import java.util.concurrent.locks.Lock; import static java.util.concurrent.TimeUnit.MILLISECONDS; import static org.awaitility.Awaitility.await; import static org.hamcrest.MatcherAssert.assertThat; import static org.junit.Assert.fail; public class ClickHouseWriterTest { private static final int HTTP_CLICKHOUSE_PORT = 8123; private static final String JDBC_DRIVER = \"ru.yandex.clickhouse.ClickHouseDriver\"; private HikariDataSource hikariDataSource; @Rule public ClickHouseContainer clickHouse = new ClickHouseContainer(); private ClickHouseSinkManager sinkManager; private Map<String, String> params; private ClickHouseSinkCommonParams clickHouseSinkCommonParams; @Before public void setUp() throws Exception { Config config = ConfigFactory.load(); params = ConfigUtil.toMap(config); params.put(ClickHouseClusterSettings.CLICKHOUSE_USER, \"\"); params.put(ClickHouseClusterSettings.CLICKHOUSE_PASSWORD, \"\"); int dockerActualPort = clickHouse.getMappedPort(HTTP_CLICKHOUSE_PORT); params.put(ClickHouseClusterSettings.CLICKHOUSE_HOSTS, \"http: params.put(ClickHouseSinkConst.IGNORING_CLICKHOUSE_SENDING_EXCEPTION_ENABLED, \"true\"); clickHouseSinkCommonParams = new ClickHouseSinkCommonParams(params); try { Class.forName(JDBC_DRIVER); } catch (ClassNotFoundException e) { throw new RuntimeException(e); } HikariConfig hikariConfig = new HikariConfig(); hikariConfig.setJdbcUrl(clickHouse.getJdbcUrl()); hikariConfig.setUsername(clickHouse.getUsername()); hikariConfig.setPassword(clickHouse.getPassword()); hikariDataSource = new HikariDataSource(hikariConfig); try (Connection connection = hikariDataSource.getConnection(); Statement statement = connection.createStatement()) { statement.executeQuery(\"CREATE DATABASE IF NOT EXISTS test;\"); statement.executeQuery(\"DROP TABLE IF EXISTS test.test0;\"); statement.executeQuery(\"CREATE TABLE test.test0 (\" + \"id UInt64,\" + \"title String,\" + \"container String,\" + \"drm String,\" + \"quality String)\" + \"ENGINE = Log;\"); statement.executeQuery(\"DROP TABLE IF EXISTS test.test1;\"); statement.executeQuery(\"CREATE TABLE test.test1 (\" + \"id UInt64,\" + \"title String,\" + \"num UInt64)\" + \"ENGINE = Log;\"); } sinkManager = new ClickHouseSinkManager(params); } @After public void down() throws Exception { sinkManager.close(); } private int getCount(String tableName) throws Exception { int res = 0; try (Connection connection = hikariDataSource.getConnection(); Statement statement = connection.createStatement()) { ResultSet resultSet = statement.executeQuery(\"select count (*) as total from \" + tableName); while (resultSet.next()) { int count = resultSet.getInt(\"total\"); System.out.println(\"Count \" + tableName + \" = \" + count); res = count; } } return res; } @Test public void highConcurrentTest() throws Exception { final int numBuffers = 4; Striped<Lock> striped = Striped.lock(numBuffers); List<Sink> buffers = new ArrayList<>(); ThreadLocalRandom random = ThreadLocalRandom.current(); for (int i = 0; i < 4; i++) { String targetTable; if (i % 2 != 0) { targetTable = \"test.test0\"; } else targetTable = \"test.test1\"; int maxBuffer = random.nextInt(1_000, 100_000); Sink sink = sinkManager.buildSink(targetTable, maxBuffer); buffers.add(sink); } final int attempts = 2_000_000; Blitzer blitzer = new Blitzer(attempts, numBuffers); blitzer.blitz(() -> { int id = ThreadLocalRandom.current().nextInt(0, numBuffers); Lock lock = striped.get(id); lock.lock(); try { Sink sink = buffers.get(id); String csv; if (id % 2 != 0) { csv = \"(10, 'title', 'container', 'drm', 'quality')\"; } else { csv = \"(11, 'title', 111)\"; } sink.put(csv); } catch (InterruptedException | ExecutionException e) { e.printStackTrace(); } finally { lock.unlock(); } }); await() .atMost(10000, MILLISECONDS) .with() .pollInterval(500, MILLISECONDS) .until(() -> getCount(\"test.test0\") + getCount(\"test.test1\") == attempts); } @Test public void testInvalidRequestException() throws Exception { ClickHouseWriter clickHouseWriter = new ClickHouseWriter(clickHouseSinkCommonParams, Collections.synchronizedList(new LinkedList<>())); clickHouseWriter.put(ClickHouseRequestBlank.Builder .aBuilder() .withValues(ImmutableList.of(\"('10')\")) .withTargetTable(\"test.test0\") .build()); try { clickHouseWriter.close(); fail(\"Expected RuntimeException.\"); } catch (RuntimeException expected) { } } @Test public void testWaitLastRequestSuccess() throws Exception { AsyncHttpClient asyncHttpClient = Mockito.spy(Dsl.asyncHttpClient()); ClickHouseWriter clickHouseWriter = new ClickHouseWriter(clickHouseSinkCommonParams, Collections.synchronizedList(Lists.newLinkedList()), asyncHttpClient); clickHouseWriter.put(ClickHouseRequestBlank.Builder .aBuilder() .withValues(ImmutableList.of(\"(10, 'title', 'container', 'drm', 'quality')\")) .withTargetTable(\"test.test0\") .build()); clickHouseWriter.close(); await() .atMost(10000, MILLISECONDS) .with() .pollInterval(500, MILLISECONDS) .until(() -> getCount(\"test.test0\") == 1); Mockito.verify(asyncHttpClient, Mockito.times(1)) .executeRequest(Mockito.any(Request.class)); } @Test public void testMaxRetries() throws Exception { int maxRetries = clickHouseSinkCommonParams.getMaxRetries(); AsyncHttpClient asyncHttpClient = Mockito.spy(Dsl.asyncHttpClient()); ClickHouseWriter clickHouseWriter = new ClickHouseWriter(clickHouseSinkCommonParams, Collections.synchronizedList(Lists.newLinkedList()), asyncHttpClient); clickHouseWriter.put(ClickHouseRequestBlank.Builder .aBuilder() .withValues(ImmutableList.of(\"('10')\")) .withTargetTable(\"test.test0\") .build()); try { clickHouseWriter.close(); fail(\"Expected RuntimeException.\"); } catch (RuntimeException expected) { } Mockito.verify(asyncHttpClient, Mockito.times(maxRetries + 1)) .executeRequest(Mockito.any(Request.class)); } @Test public void testExceptionInCallback() throws Exception { int maxRetries = clickHouseSinkCommonParams.getMaxRetries(); AsyncHttpClient asyncHttpClient = Mockito.spy(Dsl.asyncHttpClient()); Mockito.when(asyncHttpClient.executeRequest(Mockito.any(Request.class))) .thenReturn(new ListenableFuture.CompletedFailure<>(new NullPointerException(\"NPE\"))); ClickHouseWriter clickHouseWriter = new ClickHouseWriter(clickHouseSinkCommonParams, Collections.synchronizedList(Lists.newLinkedList()), asyncHttpClient); clickHouseWriter.put(ClickHouseRequestBlank.Builder.aBuilder() .withValues(ImmutableList.of(\"(10, 'title', 'container', 'drm', 'quality')\")) .withTargetTable(\"test.test0\") .build()); try { clickHouseWriter.close(); fail(\"Expected RuntimeException.\"); } catch (RuntimeException expected) { assertThat(expected.getMessage(), CoreMatchers.containsString(\"NPE\")); } Mockito.verify(asyncHttpClient, Mockito.times(maxRetries + 1)).executeRequest(Mockito.any(Request.class)); } @Test public void flinkPipelineTest() throws Exception { StreamExecutionEnvironment env = StreamExecutionEnvironment.createLocalEnvironment(); env.setParallelism(2); ParameterTool parameters = ParameterTool.fromMap(params); env.getConfig().setGlobalJobParameters(parameters); env.getConfig().setRestartStrategy(RestartStrategies.noRestart()); env.getConfig().disableSysoutLogging(); Properties props = new Properties(); props.put(ClickHouseSinkConst.TARGET_TABLE_NAME, \"test.test1\"); props.put(ClickHouseSinkConst.MAX_BUFFER_SIZE, \"100\"); List<Record> l = new ArrayList<>(); l.add(new Record(10, \"super-movie-0\", 100)); l.add(new Record(20, \"super-movie-1\", 200)); l.add(new Record(30, \"super-movie-2\", 300)); int size = l.size(); ClickHouseSinkConverter<Record> clickHouseSinkConverter = record -> \"(\" + record.id + \", \" + \"'\" + record.title + \"', \" + record.num + \")\"; env.fromCollection(l) .addSink(new ClickHouseSink<>(props, clickHouseSinkConverter)); env.execute(\"Flink test\"); await() .atMost(10000, MILLISECONDS) .with() .pollInterval(500, MILLISECONDS) .until(() -> getCount(\"test.test1\") == size); } private static class Record { final long id; final String title; final long num; private Record(long id, String title, long num) { this.id = id; this.title = title; this.num = num; } } }","dependencies":[{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/ClickHouseSink.java","file_content":"package ru.ivi.opensource.flinkclickhousesink; import org.apache.flink.configuration.Configuration; import org.apache.flink.streaming.api.functions.sink.RichSinkFunction; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import ru.ivi.opensource.flinkclickhousesink.applied.ClickHouseSinkManager; import ru.ivi.opensource.flinkclickhousesink.applied.Sink; import java.util.Map; import java.util.Properties; public class ClickHouseSink<T> extends RichSinkFunction<T> { private static final Logger logger = LoggerFactory.getLogger(ClickHouseSink.class); private static final Object DUMMY_LOCK = new Object(); private final Properties localProperties; private final ClickHouseSinkConverter<T> clickHouseSinkConverter; private volatile static transient ClickHouseSinkManager sinkManager; private transient Sink sink; public ClickHouseSink(Properties properties, ClickHouseSinkConverter<T> clickHouseSinkConverter) { this.localProperties = properties; this.clickHouseSinkConverter = clickHouseSinkConverter; } @Override public void open(Configuration config) { if (sinkManager == null) { synchronized (DUMMY_LOCK) { if (sinkManager == null) { Map<String, String> params = getRuntimeContext() .getExecutionConfig() .getGlobalJobParameters() .toMap(); sinkManager = new ClickHouseSinkManager(params); } } } sink = sinkManager.buildSink(localProperties); } @Override public void invoke(T record, Context context) { try { String recordAsCSV = clickHouseSinkConverter.convert(record); sink.put(recordAsCSV); } catch (Exception e) { logger.error(\"Error while sending data to ClickHouse, record = {}\", record, e); throw new RuntimeException(e); } } @Override public void close() throws Exception { if (sink != null) { sink.close(); } if (sinkManager != null && !sinkManager.isClosed()) { synchronized (DUMMY_LOCK) { if (sinkManager != null && !sinkManager.isClosed()) { sinkManager.close(); sinkManager = null; } } } super.close(); } }"},{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/applied/ClickHouseSinkManager.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; import com.google.common.base.Preconditions; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkCommonParams; import java.util.*; import java.util.concurrent.CompletableFuture; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.MAX_BUFFER_SIZE; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.TARGET_TABLE_NAME; public class ClickHouseSinkManager implements AutoCloseable { private static final Logger logger = LoggerFactory.getLogger(ClickHouseSinkManager.class); private final ClickHouseWriter clickHouseWriter; private final ClickHouseSinkScheduledCheckerAndCleaner clickHouseSinkScheduledCheckerAndCleaner; private final ClickHouseSinkCommonParams sinkParams; private final List<CompletableFuture<Boolean>> futures = Collections.synchronizedList(new LinkedList<>()); private volatile boolean isClosed = false; public ClickHouseSinkManager(Map<String, String> globalParams) { sinkParams = new ClickHouseSinkCommonParams(globalParams); clickHouseWriter = new ClickHouseWriter(sinkParams, futures); clickHouseSinkScheduledCheckerAndCleaner = new ClickHouseSinkScheduledCheckerAndCleaner(sinkParams, futures); logger.info(\"Build sink writer's manager. params = {}\", sinkParams); } public Sink buildSink(Properties localProperties) { String targetTable = localProperties.getProperty(TARGET_TABLE_NAME); int maxFlushBufferSize = Integer.parseInt(localProperties.getProperty(MAX_BUFFER_SIZE)); return buildSink(targetTable, maxFlushBufferSize); } public Sink buildSink(String targetTable, int maxBufferSize) { Preconditions.checkNotNull(clickHouseSinkScheduledCheckerAndCleaner); Preconditions.checkNotNull(clickHouseWriter); ClickHouseSinkBuffer clickHouseSinkBuffer = ClickHouseSinkBuffer.Builder .aClickHouseSinkBuffer() .withTargetTable(targetTable) .withMaxFlushBufferSize(maxBufferSize) .withTimeoutSec(sinkParams.getTimeout()) .withFutures(futures) .build(clickHouseWriter); clickHouseSinkScheduledCheckerAndCleaner.addSinkBuffer(clickHouseSinkBuffer); if (sinkParams.isIgnoringClickHouseSendingExceptionEnabled()) { return new UnexceptionableSink(clickHouseSinkBuffer); } else { return new ExceptionsThrowableSink(clickHouseSinkBuffer); } } public boolean isClosed() { return isClosed; } @Override public void close() throws Exception { logger.info(\"ClickHouse sink manager is shutting down.\"); clickHouseSinkScheduledCheckerAndCleaner.close(); clickHouseWriter.close(); isClosed = true; logger.info(\"ClickHouse sink manager shutdown complete.\"); } }"}]}}
{"project_id":280,"chunk_id":1,"content":{"main_file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/test/java/ru/ivi/opensource/flinkclickhousesink/ClickHouseWriterTest.java","main_file_content":"package ru.ivi.opensource.flinkclickhousesink; import com.google.common.collect.Lists; import com.google.common.util.concurrent.Striped; import com.typesafe.config.Config; import com.typesafe.config.ConfigFactory; import com.zaxxer.hikari.HikariConfig; import com.zaxxer.hikari.HikariDataSource; import org.apache.flink.api.common.restartstrategy.RestartStrategies; import org.apache.flink.api.java.utils.ParameterTool; import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment; import org.asynchttpclient.AsyncHttpClient; import org.asynchttpclient.Dsl; import org.asynchttpclient.ListenableFuture; import org.asynchttpclient.Request; import org.hamcrest.CoreMatchers; import org.jmock.lib.concurrent.Blitzer; import org.junit.After; import org.junit.Before; import org.junit.Rule; import org.junit.Test; import org.mockito.Mockito; import org.testcontainers.containers.ClickHouseContainer; import org.testcontainers.shaded.com.google.common.collect.ImmutableList; import ru.ivi.opensource.flinkclickhousesink.applied.ClickHouseSinkManager; import ru.ivi.opensource.flinkclickhousesink.applied.ClickHouseWriter; import ru.ivi.opensource.flinkclickhousesink.applied.Sink; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseClusterSettings; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseRequestBlank; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkCommonParams; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst; import ru.ivi.opensource.flinkclickhousesink.util.ConfigUtil; import java.sql.Connection; import java.sql.ResultSet; import java.sql.Statement; import java.util.ArrayList; import java.util.Collections; import java.util.LinkedList; import java.util.List; import java.util.Map; import java.util.Properties; import java.util.concurrent.ExecutionException; import java.util.concurrent.ThreadLocalRandom; import java.util.concurrent.locks.Lock; import static java.util.concurrent.TimeUnit.MILLISECONDS; import static org.awaitility.Awaitility.await; import static org.hamcrest.MatcherAssert.assertThat; import static org.junit.Assert.fail; public class ClickHouseWriterTest { private static final int HTTP_CLICKHOUSE_PORT = 8123; private static final String JDBC_DRIVER = \"ru.yandex.clickhouse.ClickHouseDriver\"; private HikariDataSource hikariDataSource; @Rule public ClickHouseContainer clickHouse = new ClickHouseContainer(); private ClickHouseSinkManager sinkManager; private Map<String, String> params; private ClickHouseSinkCommonParams clickHouseSinkCommonParams; @Before public void setUp() throws Exception { Config config = ConfigFactory.load(); params = ConfigUtil.toMap(config); params.put(ClickHouseClusterSettings.CLICKHOUSE_USER, \"\"); params.put(ClickHouseClusterSettings.CLICKHOUSE_PASSWORD, \"\"); int dockerActualPort = clickHouse.getMappedPort(HTTP_CLICKHOUSE_PORT); params.put(ClickHouseClusterSettings.CLICKHOUSE_HOSTS, \"http: params.put(ClickHouseSinkConst.IGNORING_CLICKHOUSE_SENDING_EXCEPTION_ENABLED, \"true\"); clickHouseSinkCommonParams = new ClickHouseSinkCommonParams(params); try { Class.forName(JDBC_DRIVER); } catch (ClassNotFoundException e) { throw new RuntimeException(e); } HikariConfig hikariConfig = new HikariConfig(); hikariConfig.setJdbcUrl(clickHouse.getJdbcUrl()); hikariConfig.setUsername(clickHouse.getUsername()); hikariConfig.setPassword(clickHouse.getPassword()); hikariDataSource = new HikariDataSource(hikariConfig); try (Connection connection = hikariDataSource.getConnection(); Statement statement = connection.createStatement()) { statement.executeQuery(\"CREATE DATABASE IF NOT EXISTS test;\"); statement.executeQuery(\"DROP TABLE IF EXISTS test.test0;\"); statement.executeQuery(\"CREATE TABLE test.test0 (\" + \"id UInt64,\" + \"title String,\" + \"container String,\" + \"drm String,\" + \"quality String)\" + \"ENGINE = Log;\"); statement.executeQuery(\"DROP TABLE IF EXISTS test.test1;\"); statement.executeQuery(\"CREATE TABLE test.test1 (\" + \"id UInt64,\" + \"title String,\" + \"num UInt64)\" + \"ENGINE = Log;\"); } sinkManager = new ClickHouseSinkManager(params); } @After public void down() throws Exception { sinkManager.close(); } private int getCount(String tableName) throws Exception { int res = 0; try (Connection connection = hikariDataSource.getConnection(); Statement statement = connection.createStatement()) { ResultSet resultSet = statement.executeQuery(\"select count (*) as total from \" + tableName); while (resultSet.next()) { int count = resultSet.getInt(\"total\"); System.out.println(\"Count \" + tableName + \" = \" + count); res = count; } } return res; } @Test public void highConcurrentTest() throws Exception { final int numBuffers = 4; Striped<Lock> striped = Striped.lock(numBuffers); List<Sink> buffers = new ArrayList<>(); ThreadLocalRandom random = ThreadLocalRandom.current(); for (int i = 0; i < 4; i++) { String targetTable; if (i % 2 != 0) { targetTable = \"test.test0\"; } else targetTable = \"test.test1\"; int maxBuffer = random.nextInt(1_000, 100_000); Sink sink = sinkManager.buildSink(targetTable, maxBuffer); buffers.add(sink); } final int attempts = 2_000_000; Blitzer blitzer = new Blitzer(attempts, numBuffers); blitzer.blitz(() -> { int id = ThreadLocalRandom.current().nextInt(0, numBuffers); Lock lock = striped.get(id); lock.lock(); try { Sink sink = buffers.get(id); String csv; if (id % 2 != 0) { csv = \"(10, 'title', 'container', 'drm', 'quality')\"; } else { csv = \"(11, 'title', 111)\"; } sink.put(csv); } catch (InterruptedException | ExecutionException e) { e.printStackTrace(); } finally { lock.unlock(); } }); await() .atMost(10000, MILLISECONDS) .with() .pollInterval(500, MILLISECONDS) .until(() -> getCount(\"test.test0\") + getCount(\"test.test1\") == attempts); } @Test public void testInvalidRequestException() throws Exception { ClickHouseWriter clickHouseWriter = new ClickHouseWriter(clickHouseSinkCommonParams, Collections.synchronizedList(new LinkedList<>())); clickHouseWriter.put(ClickHouseRequestBlank.Builder .aBuilder() .withValues(ImmutableList.of(\"('10')\")) .withTargetTable(\"test.test0\") .build()); try { clickHouseWriter.close(); fail(\"Expected RuntimeException.\"); } catch (RuntimeException expected) { } } @Test public void testWaitLastRequestSuccess() throws Exception { AsyncHttpClient asyncHttpClient = Mockito.spy(Dsl.asyncHttpClient()); ClickHouseWriter clickHouseWriter = new ClickHouseWriter(clickHouseSinkCommonParams, Collections.synchronizedList(Lists.newLinkedList()), asyncHttpClient); clickHouseWriter.put(ClickHouseRequestBlank.Builder .aBuilder() .withValues(ImmutableList.of(\"(10, 'title', 'container', 'drm', 'quality')\")) .withTargetTable(\"test.test0\") .build()); clickHouseWriter.close(); await() .atMost(10000, MILLISECONDS) .with() .pollInterval(500, MILLISECONDS) .until(() -> getCount(\"test.test0\") == 1); Mockito.verify(asyncHttpClient, Mockito.times(1)) .executeRequest(Mockito.any(Request.class)); } @Test public void testMaxRetries() throws Exception { int maxRetries = clickHouseSinkCommonParams.getMaxRetries(); AsyncHttpClient asyncHttpClient = Mockito.spy(Dsl.asyncHttpClient()); ClickHouseWriter clickHouseWriter = new ClickHouseWriter(clickHouseSinkCommonParams, Collections.synchronizedList(Lists.newLinkedList()), asyncHttpClient); clickHouseWriter.put(ClickHouseRequestBlank.Builder .aBuilder() .withValues(ImmutableList.of(\"('10')\")) .withTargetTable(\"test.test0\") .build()); try { clickHouseWriter.close(); fail(\"Expected RuntimeException.\"); } catch (RuntimeException expected) { } Mockito.verify(asyncHttpClient, Mockito.times(maxRetries + 1)) .executeRequest(Mockito.any(Request.class)); } @Test public void testExceptionInCallback() throws Exception { int maxRetries = clickHouseSinkCommonParams.getMaxRetries(); AsyncHttpClient asyncHttpClient = Mockito.spy(Dsl.asyncHttpClient()); Mockito.when(asyncHttpClient.executeRequest(Mockito.any(Request.class))) .thenReturn(new ListenableFuture.CompletedFailure<>(new NullPointerException(\"NPE\"))); ClickHouseWriter clickHouseWriter = new ClickHouseWriter(clickHouseSinkCommonParams, Collections.synchronizedList(Lists.newLinkedList()), asyncHttpClient); clickHouseWriter.put(ClickHouseRequestBlank.Builder.aBuilder() .withValues(ImmutableList.of(\"(10, 'title', 'container', 'drm', 'quality')\")) .withTargetTable(\"test.test0\") .build()); try { clickHouseWriter.close(); fail(\"Expected RuntimeException.\"); } catch (RuntimeException expected) { assertThat(expected.getMessage(), CoreMatchers.containsString(\"NPE\")); } Mockito.verify(asyncHttpClient, Mockito.times(maxRetries + 1)).executeRequest(Mockito.any(Request.class)); } @Test public void flinkPipelineTest() throws Exception { StreamExecutionEnvironment env = StreamExecutionEnvironment.createLocalEnvironment(); env.setParallelism(2); ParameterTool parameters = ParameterTool.fromMap(params); env.getConfig().setGlobalJobParameters(parameters); env.getConfig().setRestartStrategy(RestartStrategies.noRestart()); env.getConfig().disableSysoutLogging(); Properties props = new Properties(); props.put(ClickHouseSinkConst.TARGET_TABLE_NAME, \"test.test1\"); props.put(ClickHouseSinkConst.MAX_BUFFER_SIZE, \"100\"); List<Record> l = new ArrayList<>(); l.add(new Record(10, \"super-movie-0\", 100)); l.add(new Record(20, \"super-movie-1\", 200)); l.add(new Record(30, \"super-movie-2\", 300)); int size = l.size(); ClickHouseSinkConverter<Record> clickHouseSinkConverter = record -> \"(\" + record.id + \", \" + \"'\" + record.title + \"', \" + record.num + \")\"; env.fromCollection(l) .addSink(new ClickHouseSink<>(props, clickHouseSinkConverter)); env.execute(\"Flink test\"); await() .atMost(10000, MILLISECONDS) .with() .pollInterval(500, MILLISECONDS) .until(() -> getCount(\"test.test1\") == size); } private static class Record { final long id; final String title; final long num; private Record(long id, String title, long num) { this.id = id; this.title = title; this.num = num; } } }","dependencies":[{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/applied/ClickHouseWriter.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; import com.google.common.collect.Lists; import io.netty.handler.codec.http.HttpHeaderNames; import org.asynchttpclient.AsyncHttpClient; import org.asynchttpclient.BoundRequestBuilder; import org.asynchttpclient.Dsl; import org.asynchttpclient.ListenableFuture; import org.asynchttpclient.Request; import org.asynchttpclient.Response; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseRequestBlank; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkCommonParams; import ru.ivi.opensource.flinkclickhousesink.util.FutureUtil; import ru.ivi.opensource.flinkclickhousesink.util.ThreadUtil; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.util.List; import java.util.concurrent.BlockingQueue; import java.util.concurrent.CompletableFuture; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.LinkedBlockingQueue; import java.util.concurrent.ThreadFactory; import java.util.concurrent.TimeUnit; import java.util.concurrent.atomic.AtomicLong; public class ClickHouseWriter implements AutoCloseable { private static final Logger logger = LoggerFactory.getLogger(ClickHouseWriter.class); private final BlockingQueue<ClickHouseRequestBlank> commonQueue; private final AtomicLong unprocessedRequestsCounter = new AtomicLong(); private final AsyncHttpClient asyncHttpClient; private final List<CompletableFuture<Boolean>> futures; private final ClickHouseSinkCommonParams sinkParams; private ExecutorService service; private ExecutorService callbackService; private List<WriterTask> tasks; public ClickHouseWriter(ClickHouseSinkCommonParams sinkParams, List<CompletableFuture<Boolean>> futures) { this(sinkParams, futures, Dsl.asyncHttpClient()); } public ClickHouseWriter(ClickHouseSinkCommonParams sinkParams, List<CompletableFuture<Boolean>> futures, AsyncHttpClient asyncHttpClient) { this.sinkParams = sinkParams; this.futures = futures; this.commonQueue = new LinkedBlockingQueue<>(sinkParams.getQueueMaxCapacity()); this.asyncHttpClient = asyncHttpClient; initDirAndExecutors(); } private void initDirAndExecutors() { try { initDir(sinkParams.getFailedRecordsPath()); buildComponents(); } catch (Exception e) { logger.error(\"Error while starting CH writer\", e); throw new RuntimeException(e); } } private static void initDir(String pathName) throws IOException { Path path = Paths.get(pathName); Files.createDirectories(path); } private void buildComponents() { logger.info(\"Building components\"); ThreadFactory threadFactory = ThreadUtil.threadFactory(\"clickhouse-writer\"); service = Executors.newFixedThreadPool(sinkParams.getNumWriters(), threadFactory); ThreadFactory callbackServiceFactory = ThreadUtil.threadFactory(\"clickhouse-writer-callback-executor\"); callbackService = Executors.newCachedThreadPool(callbackServiceFactory); int numWriters = sinkParams.getNumWriters(); tasks = Lists.newArrayListWithCapacity(numWriters); for (int i = 0; i < numWriters; i++) { WriterTask task = new WriterTask(i, asyncHttpClient, commonQueue, sinkParams, callbackService, futures, unprocessedRequestsCounter); tasks.add(task); service.submit(task); } } public void put(ClickHouseRequestBlank params) { try { unprocessedRequestsCounter.incrementAndGet(); commonQueue.put(params); } catch (InterruptedException e) { logger.error(\"Interrupted error while putting data to queue\", e); Thread.currentThread().interrupt(); throw new RuntimeException(e); } } private void waitUntilAllFuturesDone() { logger.info(\"Wait until all futures are done or completed exceptionally. Futures size: {}\", futures.size()); try { while (unprocessedRequestsCounter.get() > 0 || !futures.isEmpty()) { if (logger.isDebugEnabled()) { logger.debug(\"Futures size: {}.\", futures.size()); } CompletableFuture<Void> future = FutureUtil.allOf(futures); try { future.get(); futures.removeIf(f -> f.isDone() && !f.isCompletedExceptionally()); if (logger.isDebugEnabled()) { logger.debug(\"Futures size after removing: {}\", futures.size()); } } catch (Exception e) { throw new RuntimeException(e); } } } finally { stopWriters(); futures.clear(); } } private void stopWriters() { logger.info(\"Stopping writers.\"); if (tasks != null && tasks.size() > 0) { tasks.forEach(WriterTask::setStopWorking); } logger.info(\"Writers stopped.\"); } @Override public void close() throws Exception { logger.info(\"ClickHouseWriter is shutting down.\"); try { waitUntilAllFuturesDone(); } finally { ThreadUtil.shutdownExecutorService(service); ThreadUtil.shutdownExecutorService(callbackService); asyncHttpClient.close(); logger.info(\"{} shutdown complete.\", ClickHouseWriter.class.getSimpleName()); } } static class WriterTask implements Runnable { private static final Logger logger = LoggerFactory.getLogger(WriterTask.class); private static final int HTTP_OK = 200; private final BlockingQueue<ClickHouseRequestBlank> queue; private final AtomicLong queueCounter; private final ClickHouseSinkCommonParams sinkSettings; private final AsyncHttpClient asyncHttpClient; private final ExecutorService callbackService; private final List<CompletableFuture<Boolean>> futures; private final int id; private volatile boolean isWorking; WriterTask(int id, AsyncHttpClient asyncHttpClient, BlockingQueue<ClickHouseRequestBlank> queue, ClickHouseSinkCommonParams settings, ExecutorService callbackService, List<CompletableFuture<Boolean>> futures, AtomicLong queueCounter) { this.id = id; this.sinkSettings = settings; this.queue = queue; this.callbackService = callbackService; this.asyncHttpClient = asyncHttpClient; this.futures = futures; this.queueCounter = queueCounter; } @Override public void run() { try { isWorking = true; logger.info(\"Start writer task, id = {}\", id); while (isWorking || queue.size() > 0) { ClickHouseRequestBlank blank = queue.poll(300, TimeUnit.MILLISECONDS); if (blank != null) { CompletableFuture<Boolean> future = new CompletableFuture<>(); futures.add(future); send(blank, future); } } } catch (Exception e) { logger.error(\"Error while inserting data\", e); throw new RuntimeException(e); } finally { logger.info(\"Task id = {} is finished\", id); } } private void send(ClickHouseRequestBlank requestBlank, CompletableFuture<Boolean> future) { Request request = buildRequest(requestBlank); logger.info(\"Ready to load data to {}, size = {}\", requestBlank.getTargetTable(), requestBlank.getValues().size()); ListenableFuture<Response> whenResponse = asyncHttpClient.executeRequest(request); Runnable callback = responseCallback(whenResponse, requestBlank, future); whenResponse.addListener(callback, callbackService); } private Request buildRequest(ClickHouseRequestBlank requestBlank) { String resultCSV = String.join(\" , \", requestBlank.getValues()); String query = String.format(\"INSERT INTO %s VALUES %s\", requestBlank.getTargetTable(), resultCSV); String host = sinkSettings.getClickHouseClusterSettings().getRandomHostUrl(); BoundRequestBuilder builder = asyncHttpClient .preparePost(host) .setHeader(HttpHeaderNames.CONTENT_TYPE, \"text/plain; charset=utf-8\") .setBody(query); if (sinkSettings.getClickHouseClusterSettings().isAuthorizationRequired()) { builder.setHeader(HttpHeaderNames.AUTHORIZATION, \"Basic \" + sinkSettings.getClickHouseClusterSettings().getCredentials()); } return builder.build(); } private Runnable responseCallback(ListenableFuture<Response> whenResponse, ClickHouseRequestBlank requestBlank, CompletableFuture<Boolean> future) { return () -> { Response response = null; try { response = whenResponse.get(); if (response.getStatusCode() != HTTP_OK) { handleUnsuccessfulResponse(response, requestBlank, future); } else { logger.info(\"Successful send data to ClickHouse, batch size = {}, target table = {}, current attempt = {}\", requestBlank.getValues().size(), requestBlank.getTargetTable(), requestBlank.getAttemptCounter()); future.complete(true); } } catch (Exception e) { logger.error(\"Error while executing callback, params = {}\", sinkSettings, e); requestBlank.setException(e); try { handleUnsuccessfulResponse(response, requestBlank, future); } catch (Exception error) { logger.error(\"Error while handle unsuccessful response\", error); future.completeExceptionally(error); } } finally { queueCounter.decrementAndGet(); } }; } private void handleUnsuccessfulResponse(Response response, ClickHouseRequestBlank requestBlank, CompletableFuture<Boolean> future) throws Exception { int currentCounter = requestBlank.getAttemptCounter(); if (currentCounter >= sinkSettings.getMaxRetries()) { logger.warn(\"Failed to send data to ClickHouse, cause: limit of attempts is exceeded.\" + \" ClickHouse response = {}. Ready to flush data on disk.\", response, requestBlank.getException()); logFailedRecords(requestBlank); future.completeExceptionally(new RuntimeException(String.format(\"Failed to send data to ClickHouse, cause: limit of attempts is exceeded.\" + \" ClickHouse response: %s. Cause: %s\", response != null ? response.getResponseBody() : null, requestBlank.getException()))); } else { requestBlank.incrementCounter(); logger.warn(\"Next attempt to send data to ClickHouse, table = {}, buffer size = {}, current attempt num = {}, max attempt num = {}, response = {}\", requestBlank.getTargetTable(), requestBlank.getValues().size(), requestBlank.getAttemptCounter(), sinkSettings.getMaxRetries(), response); queueCounter.incrementAndGet(); queue.put(requestBlank); future.complete(false); } } private void logFailedRecords(ClickHouseRequestBlank requestBlank) throws Exception { String filePath = String.format(\"%s/%s_%s\", sinkSettings.getFailedRecordsPath(), requestBlank.getTargetTable(), System.currentTimeMillis()); try (PrintWriter writer = new PrintWriter(filePath)) { List<String> records = requestBlank.getValues(); records.forEach(writer::println); writer.flush(); } logger.info(\"Successful send data on disk, path = {}, size = {} \", filePath, requestBlank.getValues().size()); } void setStopWorking() { isWorking = false; } } }"},{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/applied/Sink.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; import java.util.concurrent.ExecutionException; public interface Sink extends AutoCloseable { void put(String message) throws ExecutionException, InterruptedException; }"},{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/model/ClickHouseSinkCommonParams.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.model; import com.google.common.base.Preconditions; import java.util.Map; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.FAILED_RECORDS_PATH; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.IGNORING_CLICKHOUSE_SENDING_EXCEPTION_ENABLED; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.NUM_RETRIES; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.NUM_WRITERS; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.QUEUE_MAX_CAPACITY; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.TIMEOUT_SEC; public class ClickHouseSinkCommonParams { private final ClickHouseClusterSettings clickHouseClusterSettings; private final String failedRecordsPath; private final int numWriters; private final int queueMaxCapacity; private final boolean ignoringClickHouseSendingExceptionEnabled; private final int timeout; private final int maxRetries; public ClickHouseSinkCommonParams(Map<String, String> params) { Preconditions.checkNotNull(params.get(IGNORING_CLICKHOUSE_SENDING_EXCEPTION_ENABLED), \"Parameter \" + IGNORING_CLICKHOUSE_SENDING_EXCEPTION_ENABLED + \" must be initialized\"); this.clickHouseClusterSettings = new ClickHouseClusterSettings(params); this.numWriters = Integer.parseInt(params.get(NUM_WRITERS)); this.queueMaxCapacity = Integer.parseInt(params.get(QUEUE_MAX_CAPACITY)); this.maxRetries = Integer.parseInt(params.get(NUM_RETRIES)); this.timeout = Integer.parseInt(params.get(TIMEOUT_SEC)); this.failedRecordsPath = params.get(FAILED_RECORDS_PATH); this.ignoringClickHouseSendingExceptionEnabled = Boolean.parseBoolean(params.get(IGNORING_CLICKHOUSE_SENDING_EXCEPTION_ENABLED)); Preconditions.checkNotNull(failedRecordsPath); Preconditions.checkArgument(queueMaxCapacity > 0); Preconditions.checkArgument(numWriters > 0); Preconditions.checkArgument(timeout > 0); Preconditions.checkArgument(maxRetries > 0); } public int getNumWriters() { return numWriters; } public int getQueueMaxCapacity() { return queueMaxCapacity; } public boolean isIgnoringClickHouseSendingExceptionEnabled() { return ignoringClickHouseSendingExceptionEnabled; } public ClickHouseClusterSettings getClickHouseClusterSettings() { return clickHouseClusterSettings; } public int getTimeout() { return timeout; } public int getMaxRetries() { return maxRetries; } public String getFailedRecordsPath() { return failedRecordsPath; } @Override public String toString() { return \"ClickHouseSinkCommonParams{\" + \"clickHouseClusterSettings=\" + clickHouseClusterSettings + \", failedRecordsPath='\" + failedRecordsPath + '\\'' + \", numWriters=\" + numWriters + \", queueMaxCapacity=\" + queueMaxCapacity + \", ignoringClickHouseSendingExceptionEnabled=\" + ignoringClickHouseSendingExceptionEnabled + \", timeout=\" + timeout + \", maxRetries=\" + maxRetries + '}'; } }"}]}}
{"project_id":280,"chunk_id":2,"content":{"main_file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/test/java/ru/ivi/opensource/flinkclickhousesink/ClickHouseWriterTest.java","main_file_content":"package ru.ivi.opensource.flinkclickhousesink; import com.google.common.collect.Lists; import com.google.common.util.concurrent.Striped; import com.typesafe.config.Config; import com.typesafe.config.ConfigFactory; import com.zaxxer.hikari.HikariConfig; import com.zaxxer.hikari.HikariDataSource; import org.apache.flink.api.common.restartstrategy.RestartStrategies; import org.apache.flink.api.java.utils.ParameterTool; import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment; import org.asynchttpclient.AsyncHttpClient; import org.asynchttpclient.Dsl; import org.asynchttpclient.ListenableFuture; import org.asynchttpclient.Request; import org.hamcrest.CoreMatchers; import org.jmock.lib.concurrent.Blitzer; import org.junit.After; import org.junit.Before; import org.junit.Rule; import org.junit.Test; import org.mockito.Mockito; import org.testcontainers.containers.ClickHouseContainer; import org.testcontainers.shaded.com.google.common.collect.ImmutableList; import ru.ivi.opensource.flinkclickhousesink.applied.ClickHouseSinkManager; import ru.ivi.opensource.flinkclickhousesink.applied.ClickHouseWriter; import ru.ivi.opensource.flinkclickhousesink.applied.Sink; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseClusterSettings; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseRequestBlank; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkCommonParams; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst; import ru.ivi.opensource.flinkclickhousesink.util.ConfigUtil; import java.sql.Connection; import java.sql.ResultSet; import java.sql.Statement; import java.util.ArrayList; import java.util.Collections; import java.util.LinkedList; import java.util.List; import java.util.Map; import java.util.Properties; import java.util.concurrent.ExecutionException; import java.util.concurrent.ThreadLocalRandom; import java.util.concurrent.locks.Lock; import static java.util.concurrent.TimeUnit.MILLISECONDS; import static org.awaitility.Awaitility.await; import static org.hamcrest.MatcherAssert.assertThat; import static org.junit.Assert.fail; public class ClickHouseWriterTest { private static final int HTTP_CLICKHOUSE_PORT = 8123; private static final String JDBC_DRIVER = \"ru.yandex.clickhouse.ClickHouseDriver\"; private HikariDataSource hikariDataSource; @Rule public ClickHouseContainer clickHouse = new ClickHouseContainer(); private ClickHouseSinkManager sinkManager; private Map<String, String> params; private ClickHouseSinkCommonParams clickHouseSinkCommonParams; @Before public void setUp() throws Exception { Config config = ConfigFactory.load(); params = ConfigUtil.toMap(config); params.put(ClickHouseClusterSettings.CLICKHOUSE_USER, \"\"); params.put(ClickHouseClusterSettings.CLICKHOUSE_PASSWORD, \"\"); int dockerActualPort = clickHouse.getMappedPort(HTTP_CLICKHOUSE_PORT); params.put(ClickHouseClusterSettings.CLICKHOUSE_HOSTS, \"http: params.put(ClickHouseSinkConst.IGNORING_CLICKHOUSE_SENDING_EXCEPTION_ENABLED, \"true\"); clickHouseSinkCommonParams = new ClickHouseSinkCommonParams(params); try { Class.forName(JDBC_DRIVER); } catch (ClassNotFoundException e) { throw new RuntimeException(e); } HikariConfig hikariConfig = new HikariConfig(); hikariConfig.setJdbcUrl(clickHouse.getJdbcUrl()); hikariConfig.setUsername(clickHouse.getUsername()); hikariConfig.setPassword(clickHouse.getPassword()); hikariDataSource = new HikariDataSource(hikariConfig); try (Connection connection = hikariDataSource.getConnection(); Statement statement = connection.createStatement()) { statement.executeQuery(\"CREATE DATABASE IF NOT EXISTS test;\"); statement.executeQuery(\"DROP TABLE IF EXISTS test.test0;\"); statement.executeQuery(\"CREATE TABLE test.test0 (\" + \"id UInt64,\" + \"title String,\" + \"container String,\" + \"drm String,\" + \"quality String)\" + \"ENGINE = Log;\"); statement.executeQuery(\"DROP TABLE IF EXISTS test.test1;\"); statement.executeQuery(\"CREATE TABLE test.test1 (\" + \"id UInt64,\" + \"title String,\" + \"num UInt64)\" + \"ENGINE = Log;\"); } sinkManager = new ClickHouseSinkManager(params); } @After public void down() throws Exception { sinkManager.close(); } private int getCount(String tableName) throws Exception { int res = 0; try (Connection connection = hikariDataSource.getConnection(); Statement statement = connection.createStatement()) { ResultSet resultSet = statement.executeQuery(\"select count (*) as total from \" + tableName); while (resultSet.next()) { int count = resultSet.getInt(\"total\"); System.out.println(\"Count \" + tableName + \" = \" + count); res = count; } } return res; } @Test public void highConcurrentTest() throws Exception { final int numBuffers = 4; Striped<Lock> striped = Striped.lock(numBuffers); List<Sink> buffers = new ArrayList<>(); ThreadLocalRandom random = ThreadLocalRandom.current(); for (int i = 0; i < 4; i++) { String targetTable; if (i % 2 != 0) { targetTable = \"test.test0\"; } else targetTable = \"test.test1\"; int maxBuffer = random.nextInt(1_000, 100_000); Sink sink = sinkManager.buildSink(targetTable, maxBuffer); buffers.add(sink); } final int attempts = 2_000_000; Blitzer blitzer = new Blitzer(attempts, numBuffers); blitzer.blitz(() -> { int id = ThreadLocalRandom.current().nextInt(0, numBuffers); Lock lock = striped.get(id); lock.lock(); try { Sink sink = buffers.get(id); String csv; if (id % 2 != 0) { csv = \"(10, 'title', 'container', 'drm', 'quality')\"; } else { csv = \"(11, 'title', 111)\"; } sink.put(csv); } catch (InterruptedException | ExecutionException e) { e.printStackTrace(); } finally { lock.unlock(); } }); await() .atMost(10000, MILLISECONDS) .with() .pollInterval(500, MILLISECONDS) .until(() -> getCount(\"test.test0\") + getCount(\"test.test1\") == attempts); } @Test public void testInvalidRequestException() throws Exception { ClickHouseWriter clickHouseWriter = new ClickHouseWriter(clickHouseSinkCommonParams, Collections.synchronizedList(new LinkedList<>())); clickHouseWriter.put(ClickHouseRequestBlank.Builder .aBuilder() .withValues(ImmutableList.of(\"('10')\")) .withTargetTable(\"test.test0\") .build()); try { clickHouseWriter.close(); fail(\"Expected RuntimeException.\"); } catch (RuntimeException expected) { } } @Test public void testWaitLastRequestSuccess() throws Exception { AsyncHttpClient asyncHttpClient = Mockito.spy(Dsl.asyncHttpClient()); ClickHouseWriter clickHouseWriter = new ClickHouseWriter(clickHouseSinkCommonParams, Collections.synchronizedList(Lists.newLinkedList()), asyncHttpClient); clickHouseWriter.put(ClickHouseRequestBlank.Builder .aBuilder() .withValues(ImmutableList.of(\"(10, 'title', 'container', 'drm', 'quality')\")) .withTargetTable(\"test.test0\") .build()); clickHouseWriter.close(); await() .atMost(10000, MILLISECONDS) .with() .pollInterval(500, MILLISECONDS) .until(() -> getCount(\"test.test0\") == 1); Mockito.verify(asyncHttpClient, Mockito.times(1)) .executeRequest(Mockito.any(Request.class)); } @Test public void testMaxRetries() throws Exception { int maxRetries = clickHouseSinkCommonParams.getMaxRetries(); AsyncHttpClient asyncHttpClient = Mockito.spy(Dsl.asyncHttpClient()); ClickHouseWriter clickHouseWriter = new ClickHouseWriter(clickHouseSinkCommonParams, Collections.synchronizedList(Lists.newLinkedList()), asyncHttpClient); clickHouseWriter.put(ClickHouseRequestBlank.Builder .aBuilder() .withValues(ImmutableList.of(\"('10')\")) .withTargetTable(\"test.test0\") .build()); try { clickHouseWriter.close(); fail(\"Expected RuntimeException.\"); } catch (RuntimeException expected) { } Mockito.verify(asyncHttpClient, Mockito.times(maxRetries + 1)) .executeRequest(Mockito.any(Request.class)); } @Test public void testExceptionInCallback() throws Exception { int maxRetries = clickHouseSinkCommonParams.getMaxRetries(); AsyncHttpClient asyncHttpClient = Mockito.spy(Dsl.asyncHttpClient()); Mockito.when(asyncHttpClient.executeRequest(Mockito.any(Request.class))) .thenReturn(new ListenableFuture.CompletedFailure<>(new NullPointerException(\"NPE\"))); ClickHouseWriter clickHouseWriter = new ClickHouseWriter(clickHouseSinkCommonParams, Collections.synchronizedList(Lists.newLinkedList()), asyncHttpClient); clickHouseWriter.put(ClickHouseRequestBlank.Builder.aBuilder() .withValues(ImmutableList.of(\"(10, 'title', 'container', 'drm', 'quality')\")) .withTargetTable(\"test.test0\") .build()); try { clickHouseWriter.close(); fail(\"Expected RuntimeException.\"); } catch (RuntimeException expected) { assertThat(expected.getMessage(), CoreMatchers.containsString(\"NPE\")); } Mockito.verify(asyncHttpClient, Mockito.times(maxRetries + 1)).executeRequest(Mockito.any(Request.class)); } @Test public void flinkPipelineTest() throws Exception { StreamExecutionEnvironment env = StreamExecutionEnvironment.createLocalEnvironment(); env.setParallelism(2); ParameterTool parameters = ParameterTool.fromMap(params); env.getConfig().setGlobalJobParameters(parameters); env.getConfig().setRestartStrategy(RestartStrategies.noRestart()); env.getConfig().disableSysoutLogging(); Properties props = new Properties(); props.put(ClickHouseSinkConst.TARGET_TABLE_NAME, \"test.test1\"); props.put(ClickHouseSinkConst.MAX_BUFFER_SIZE, \"100\"); List<Record> l = new ArrayList<>(); l.add(new Record(10, \"super-movie-0\", 100)); l.add(new Record(20, \"super-movie-1\", 200)); l.add(new Record(30, \"super-movie-2\", 300)); int size = l.size(); ClickHouseSinkConverter<Record> clickHouseSinkConverter = record -> \"(\" + record.id + \", \" + \"'\" + record.title + \"', \" + record.num + \")\"; env.fromCollection(l) .addSink(new ClickHouseSink<>(props, clickHouseSinkConverter)); env.execute(\"Flink test\"); await() .atMost(10000, MILLISECONDS) .with() .pollInterval(500, MILLISECONDS) .until(() -> getCount(\"test.test1\") == size); } private static class Record { final long id; final String title; final long num; private Record(long id, String title, long num) { this.id = id; this.title = title; this.num = num; } } }","dependencies":[{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/util/ConfigUtil.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.util; import com.typesafe.config.Config; import com.typesafe.config.ConfigValue; import java.util.Arrays; import java.util.HashMap; import java.util.List; import java.util.Map; import java.util.Properties; public final class ConfigUtil { public static final String HOST_DELIMITER = \",\"; private ConfigUtil() { } public static Properties toProperties(Config config) { Properties properties = new Properties(); config.entrySet().forEach(e -> properties.put(e.getKey(), unwrapped(config.getValue(e.getKey())))); return properties; } public static Map<String, String> toMap(Config config) { Map<String, String> map = new HashMap<>(); config.entrySet().forEach(e -> map.put(e.getKey(), unwrapped(e.getValue()))); return map; } private static String unwrapped(ConfigValue configValue) { Object object = configValue.unwrapped(); return object.toString(); } public static String buildStringFromList(List<String> list) { return String.join(HOST_DELIMITER, list); } public static List<String> buildListFromString(String string) { return Arrays.asList(string.split(\" \")); } }"}]}}
{"project_id":280,"chunk_id":0,"content":{"main_file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/test/java/ru/ivi/opensource/flinkclickhousesink/applied/ClickHouseSinkBufferTest.java","main_file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; import com.typesafe.config.Config; import com.typesafe.config.ConfigFactory; import org.junit.After; import org.junit.Before; import org.junit.Test; import org.junit.runner.RunWith; import org.mockito.Mockito; import org.mockito.MockitoAnnotations; import org.mockito.junit.MockitoJUnitRunner; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseClusterSettings; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseRequestBlank; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkCommonParams; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst; import ru.ivi.opensource.flinkclickhousesink.util.ConfigUtil; import java.util.Collections; import java.util.LinkedList; import java.util.List; import java.util.Map; import java.util.concurrent.CompletableFuture; import java.util.concurrent.atomic.AtomicBoolean; import static java.util.concurrent.TimeUnit.MILLISECONDS; import static java.util.concurrent.TimeUnit.SECONDS; import static org.awaitility.Awaitility.await; import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertTrue; @RunWith(MockitoJUnitRunner.Silent.class) public class ClickHouseSinkBufferTest { private static final int BUFFER_SIZE_10000 = 10000; private static final int BUFFER_SIZE_10 = 10; private static final int TIMEOUT_SEC = 10; private ClickHouseSinkBuffer bufferTimeTrigger; private ClickHouseSinkBuffer bufferSizeTrigger; private ClickHouseWriter writer; private final List<CompletableFuture<Boolean>> futures = Collections.synchronizedList(new LinkedList<>()); @Before public void setUp() { writer = Mockito.mock(ClickHouseWriter.class); bufferTimeTrigger = ClickHouseSinkBuffer.Builder .aClickHouseSinkBuffer() .withTargetTable(\"table\") .withMaxFlushBufferSize(BUFFER_SIZE_10000) .withTimeoutSec(TIMEOUT_SEC) .withFutures(futures) .build(writer); bufferSizeTrigger = ClickHouseSinkBuffer.Builder .aClickHouseSinkBuffer() .withTargetTable(\"table\") .withMaxFlushBufferSize(BUFFER_SIZE_10) .withTimeoutSec(TIMEOUT_SEC) .withFutures(futures) .build(writer); MockitoAnnotations.initMocks(this); } @After public void tearDown() { } @Test public void simplePut() { Mockito.doAnswer(invocationOnMock -> { ClickHouseRequestBlank blank = invocationOnMock.getArgument(0); System.out.println(blank); assertEquals(BUFFER_SIZE_10000, blank.getValues().size()); assertEquals(\"table\", blank.getTargetTable()); return invocationOnMock; }).when(writer).put(Mockito.any()); for (int i = 0; i < 100; i++) { bufferTimeTrigger.put(\"csv\"); } } private ClickHouseSinkScheduledCheckerAndCleaner initChecker() { Config config = ConfigFactory.load(); Map<String, String> params = ConfigUtil.toMap(config); params.put(ClickHouseClusterSettings.CLICKHOUSE_USER, \"\"); params.put(ClickHouseClusterSettings.CLICKHOUSE_PASSWORD, \"\"); params.put(ClickHouseClusterSettings.CLICKHOUSE_HOSTS, \"http: params.put(ClickHouseSinkConst.TIMEOUT_SEC, String.valueOf(TIMEOUT_SEC)); params.put(ClickHouseSinkConst.IGNORING_CLICKHOUSE_SENDING_EXCEPTION_ENABLED, \"true\"); ClickHouseSinkCommonParams commonParams = new ClickHouseSinkCommonParams(params); return new ClickHouseSinkScheduledCheckerAndCleaner(commonParams, futures); } @Test public void testAddToQueueByTimeTrigger() { ClickHouseSinkScheduledCheckerAndCleaner checker = initChecker(); checker.addSinkBuffer(bufferTimeTrigger); AtomicBoolean flag = new AtomicBoolean(); Mockito.doAnswer(invocationOnMock -> { ClickHouseRequestBlank blank = invocationOnMock.getArgument(0); assertTrue(BUFFER_SIZE_10000 > blank.getValues().size()); assertEquals(\"table\", blank.getTargetTable()); flag.set(true); return invocationOnMock; }).when(writer).put(Mockito.any()); for (int i = 0; i < 800; i++) { bufferTimeTrigger.put(\"csv\"); } await() .atMost(15, SECONDS) .with() .pollInterval(200, MILLISECONDS) .until(flag::get); } @Test public void testAddToQueueBySizeTrigger() { ClickHouseSinkScheduledCheckerAndCleaner checker = initChecker(); checker.addSinkBuffer(bufferSizeTrigger); AtomicBoolean flag = new AtomicBoolean(); Mockito.doAnswer(invocationOnMock -> { ClickHouseRequestBlank blank = invocationOnMock.getArgument(0); assertEquals(BUFFER_SIZE_10, blank.getValues().size()); assertEquals(\"table\", blank.getTargetTable()); flag.set(true); return invocationOnMock; }).when(writer).put(Mockito.any()); for (int i = 0; i < 800; i++) { bufferSizeTrigger.put(\"csv\"); } await() .atMost(TIMEOUT_SEC, SECONDS) .with() .pollInterval(200, MILLISECONDS) .until(flag::get); } }","dependencies":[{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/applied/ClickHouseSinkBuffer.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; import com.google.common.base.Preconditions; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseRequestBlank; import ru.ivi.opensource.flinkclickhousesink.util.FutureUtil; import java.util.ArrayList; import java.util.Collections; import java.util.List; import java.util.concurrent.CompletableFuture; import java.util.concurrent.ExecutionException; import java.util.concurrent.TimeUnit; public class ClickHouseSinkBuffer implements AutoCloseable { private static final Logger logger = LoggerFactory.getLogger(ClickHouseSinkBuffer.class); private final ClickHouseWriter writer; private final String targetTable; private final int maxFlushBufferSize; private final long timeoutMillis; private final List<String> localValues; private final List<CompletableFuture<Boolean>> futures; private volatile long lastAddTimeMillis = System.currentTimeMillis(); private ClickHouseSinkBuffer( ClickHouseWriter chWriter, long timeout, int maxBuffer, String table, List<CompletableFuture<Boolean>> futures ) { writer = chWriter; localValues = new ArrayList<>(); timeoutMillis = timeout; maxFlushBufferSize = maxBuffer; targetTable = table; this.futures = futures; logger.info(\"Instance ClickHouse Sink, target table = {}, buffer size = {}\", this.targetTable, this.maxFlushBufferSize); } String getTargetTable() { return targetTable; } public void put(String recordAsCSV) { tryAddToQueue(); localValues.add(recordAsCSV); } synchronized void tryAddToQueue() { if (flushCondition()) { addToQueue(); lastAddTimeMillis = System.currentTimeMillis(); } } private void addToQueue() { List<String> deepCopy = buildDeepCopy(localValues); ClickHouseRequestBlank params = ClickHouseRequestBlank.Builder .aBuilder() .withValues(deepCopy) .withTargetTable(targetTable) .build(); logger.debug(\"Build blank with params: buffer size = {}, target table = {}\", params.getValues().size(), params.getTargetTable()); writer.put(params); localValues.clear(); } private boolean flushCondition() { return localValues.size() > 0 && (checkSize() || checkTime()); } private boolean checkSize() { return localValues.size() >= maxFlushBufferSize; } private boolean checkTime() { long current = System.currentTimeMillis(); return current - lastAddTimeMillis > timeoutMillis; } private static List<String> buildDeepCopy(List<String> original) { return Collections.unmodifiableList(new ArrayList<>(original)); } public void assertFuturesNotFailedYet() throws ExecutionException, InterruptedException { CompletableFuture<Void> future = FutureUtil.allOf(futures); if (future.isCompletedExceptionally()) { future.get(); } } @Override public void close() { logger.info(\"ClickHouse sink buffer is shutting down.\"); if (localValues != null && localValues.size() > 0) { addToQueue(); } logger.info(\"ClickHouse sink buffer shutdown complete.\"); } public static final class Builder { private String targetTable; private int maxFlushBufferSize; private int timeoutSec; private List<CompletableFuture<Boolean>> futures; private Builder() { } public static Builder aClickHouseSinkBuffer() { return new Builder(); } public Builder withTargetTable(String targetTable) { this.targetTable = targetTable; return this; } public Builder withMaxFlushBufferSize(int maxFlushBufferSize) { this.maxFlushBufferSize = maxFlushBufferSize; return this; } public Builder withTimeoutSec(int timeoutSec) { this.timeoutSec = timeoutSec; return this; } public Builder withFutures(List<CompletableFuture<Boolean>> futures) { this.futures = futures; return this; } public ClickHouseSinkBuffer build(ClickHouseWriter writer) { Preconditions.checkNotNull(targetTable); Preconditions.checkArgument(maxFlushBufferSize > 0); Preconditions.checkArgument(timeoutSec > 0); return new ClickHouseSinkBuffer( writer, TimeUnit.SECONDS.toMillis(this.timeoutSec), this.maxFlushBufferSize, this.targetTable, this.futures ); } } }"},{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/applied/ClickHouseSinkScheduledCheckerAndCleaner.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkCommonParams; import ru.ivi.opensource.flinkclickhousesink.util.ThreadUtil; import java.util.ArrayList; import java.util.List; import java.util.concurrent.CompletableFuture; import java.util.concurrent.Executors; import java.util.concurrent.ScheduledExecutorService; import java.util.concurrent.ThreadFactory; import java.util.concurrent.TimeUnit; import java.util.function.Predicate; public class ClickHouseSinkScheduledCheckerAndCleaner implements AutoCloseable { private static final Logger logger = LoggerFactory.getLogger(ClickHouseSinkScheduledCheckerAndCleaner.class); private final ScheduledExecutorService scheduledExecutorService; private final List<ClickHouseSinkBuffer> clickHouseSinkBuffers = new ArrayList<>(); private final List<CompletableFuture<Boolean>> futures; private final Predicate<CompletableFuture<Boolean>> filter; public ClickHouseSinkScheduledCheckerAndCleaner(ClickHouseSinkCommonParams props, List<CompletableFuture<Boolean>> futures) { this.futures = futures; this.filter = getFuturesFilter(props.isIgnoringClickHouseSendingExceptionEnabled()); ThreadFactory factory = ThreadUtil.threadFactory(\"clickhouse-writer-checker-and-cleaner\"); scheduledExecutorService = Executors.newSingleThreadScheduledExecutor(factory); scheduledExecutorService.scheduleWithFixedDelay(getTask(), props.getTimeout(), props.getTimeout(), TimeUnit.SECONDS); logger.info(\"Build Sink scheduled checker, timeout (sec) = {}\", props.getTimeout()); } public void addSinkBuffer(ClickHouseSinkBuffer clickHouseSinkBuffer) { synchronized (this) { clickHouseSinkBuffers.add(clickHouseSinkBuffer); } logger.debug(\"Add sinkBuffer, target table = {}\", clickHouseSinkBuffer.getTargetTable()); } private Runnable getTask() { return () -> { synchronized (this) { logger.debug(\"Start checking buffers and cleanup futures: Before cleanup = {}.\", futures.size()); futures.removeIf(filter); clickHouseSinkBuffers.forEach(ClickHouseSinkBuffer::tryAddToQueue); } }; } private static Predicate<CompletableFuture<Boolean>> getFuturesFilter(boolean ignoringExceptionEnabled) { if (ignoringExceptionEnabled) { return CompletableFuture::isDone; } else { return f -> f.isDone() && !f.isCompletedExceptionally(); } } @Override public void close() throws Exception { logger.info(\"ClickHouseSinkScheduledCheckerAndCleaner is shutting down.\"); ThreadUtil.shutdownExecutorService(scheduledExecutorService); logger.info(\"ClickHouseSinkScheduledCheckerAndCleaner shutdown complete.\"); } }"},{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/applied/ClickHouseWriter.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; import com.google.common.collect.Lists; import io.netty.handler.codec.http.HttpHeaderNames; import org.asynchttpclient.AsyncHttpClient; import org.asynchttpclient.BoundRequestBuilder; import org.asynchttpclient.Dsl; import org.asynchttpclient.ListenableFuture; import org.asynchttpclient.Request; import org.asynchttpclient.Response; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseRequestBlank; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkCommonParams; import ru.ivi.opensource.flinkclickhousesink.util.FutureUtil; import ru.ivi.opensource.flinkclickhousesink.util.ThreadUtil; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.util.List; import java.util.concurrent.BlockingQueue; import java.util.concurrent.CompletableFuture; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.LinkedBlockingQueue; import java.util.concurrent.ThreadFactory; import java.util.concurrent.TimeUnit; import java.util.concurrent.atomic.AtomicLong; public class ClickHouseWriter implements AutoCloseable { private static final Logger logger = LoggerFactory.getLogger(ClickHouseWriter.class); private final BlockingQueue<ClickHouseRequestBlank> commonQueue; private final AtomicLong unprocessedRequestsCounter = new AtomicLong(); private final AsyncHttpClient asyncHttpClient; private final List<CompletableFuture<Boolean>> futures; private final ClickHouseSinkCommonParams sinkParams; private ExecutorService service; private ExecutorService callbackService; private List<WriterTask> tasks; public ClickHouseWriter(ClickHouseSinkCommonParams sinkParams, List<CompletableFuture<Boolean>> futures) { this(sinkParams, futures, Dsl.asyncHttpClient()); } public ClickHouseWriter(ClickHouseSinkCommonParams sinkParams, List<CompletableFuture<Boolean>> futures, AsyncHttpClient asyncHttpClient) { this.sinkParams = sinkParams; this.futures = futures; this.commonQueue = new LinkedBlockingQueue<>(sinkParams.getQueueMaxCapacity()); this.asyncHttpClient = asyncHttpClient; initDirAndExecutors(); } private void initDirAndExecutors() { try { initDir(sinkParams.getFailedRecordsPath()); buildComponents(); } catch (Exception e) { logger.error(\"Error while starting CH writer\", e); throw new RuntimeException(e); } } private static void initDir(String pathName) throws IOException { Path path = Paths.get(pathName); Files.createDirectories(path); } private void buildComponents() { logger.info(\"Building components\"); ThreadFactory threadFactory = ThreadUtil.threadFactory(\"clickhouse-writer\"); service = Executors.newFixedThreadPool(sinkParams.getNumWriters(), threadFactory); ThreadFactory callbackServiceFactory = ThreadUtil.threadFactory(\"clickhouse-writer-callback-executor\"); callbackService = Executors.newCachedThreadPool(callbackServiceFactory); int numWriters = sinkParams.getNumWriters(); tasks = Lists.newArrayListWithCapacity(numWriters); for (int i = 0; i < numWriters; i++) { WriterTask task = new WriterTask(i, asyncHttpClient, commonQueue, sinkParams, callbackService, futures, unprocessedRequestsCounter); tasks.add(task); service.submit(task); } } public void put(ClickHouseRequestBlank params) { try { unprocessedRequestsCounter.incrementAndGet(); commonQueue.put(params); } catch (InterruptedException e) { logger.error(\"Interrupted error while putting data to queue\", e); Thread.currentThread().interrupt(); throw new RuntimeException(e); } } private void waitUntilAllFuturesDone() { logger.info(\"Wait until all futures are done or completed exceptionally. Futures size: {}\", futures.size()); try { while (unprocessedRequestsCounter.get() > 0 || !futures.isEmpty()) { if (logger.isDebugEnabled()) { logger.debug(\"Futures size: {}.\", futures.size()); } CompletableFuture<Void> future = FutureUtil.allOf(futures); try { future.get(); futures.removeIf(f -> f.isDone() && !f.isCompletedExceptionally()); if (logger.isDebugEnabled()) { logger.debug(\"Futures size after removing: {}\", futures.size()); } } catch (Exception e) { throw new RuntimeException(e); } } } finally { stopWriters(); futures.clear(); } } private void stopWriters() { logger.info(\"Stopping writers.\"); if (tasks != null && tasks.size() > 0) { tasks.forEach(WriterTask::setStopWorking); } logger.info(\"Writers stopped.\"); } @Override public void close() throws Exception { logger.info(\"ClickHouseWriter is shutting down.\"); try { waitUntilAllFuturesDone(); } finally { ThreadUtil.shutdownExecutorService(service); ThreadUtil.shutdownExecutorService(callbackService); asyncHttpClient.close(); logger.info(\"{} shutdown complete.\", ClickHouseWriter.class.getSimpleName()); } } static class WriterTask implements Runnable { private static final Logger logger = LoggerFactory.getLogger(WriterTask.class); private static final int HTTP_OK = 200; private final BlockingQueue<ClickHouseRequestBlank> queue; private final AtomicLong queueCounter; private final ClickHouseSinkCommonParams sinkSettings; private final AsyncHttpClient asyncHttpClient; private final ExecutorService callbackService; private final List<CompletableFuture<Boolean>> futures; private final int id; private volatile boolean isWorking; WriterTask(int id, AsyncHttpClient asyncHttpClient, BlockingQueue<ClickHouseRequestBlank> queue, ClickHouseSinkCommonParams settings, ExecutorService callbackService, List<CompletableFuture<Boolean>> futures, AtomicLong queueCounter) { this.id = id; this.sinkSettings = settings; this.queue = queue; this.callbackService = callbackService; this.asyncHttpClient = asyncHttpClient; this.futures = futures; this.queueCounter = queueCounter; } @Override public void run() { try { isWorking = true; logger.info(\"Start writer task, id = {}\", id); while (isWorking || queue.size() > 0) { ClickHouseRequestBlank blank = queue.poll(300, TimeUnit.MILLISECONDS); if (blank != null) { CompletableFuture<Boolean> future = new CompletableFuture<>(); futures.add(future); send(blank, future); } } } catch (Exception e) { logger.error(\"Error while inserting data\", e); throw new RuntimeException(e); } finally { logger.info(\"Task id = {} is finished\", id); } } private void send(ClickHouseRequestBlank requestBlank, CompletableFuture<Boolean> future) { Request request = buildRequest(requestBlank); logger.info(\"Ready to load data to {}, size = {}\", requestBlank.getTargetTable(), requestBlank.getValues().size()); ListenableFuture<Response> whenResponse = asyncHttpClient.executeRequest(request); Runnable callback = responseCallback(whenResponse, requestBlank, future); whenResponse.addListener(callback, callbackService); } private Request buildRequest(ClickHouseRequestBlank requestBlank) { String resultCSV = String.join(\" , \", requestBlank.getValues()); String query = String.format(\"INSERT INTO %s VALUES %s\", requestBlank.getTargetTable(), resultCSV); String host = sinkSettings.getClickHouseClusterSettings().getRandomHostUrl(); BoundRequestBuilder builder = asyncHttpClient .preparePost(host) .setHeader(HttpHeaderNames.CONTENT_TYPE, \"text/plain; charset=utf-8\") .setBody(query); if (sinkSettings.getClickHouseClusterSettings().isAuthorizationRequired()) { builder.setHeader(HttpHeaderNames.AUTHORIZATION, \"Basic \" + sinkSettings.getClickHouseClusterSettings().getCredentials()); } return builder.build(); } private Runnable responseCallback(ListenableFuture<Response> whenResponse, ClickHouseRequestBlank requestBlank, CompletableFuture<Boolean> future) { return () -> { Response response = null; try { response = whenResponse.get(); if (response.getStatusCode() != HTTP_OK) { handleUnsuccessfulResponse(response, requestBlank, future); } else { logger.info(\"Successful send data to ClickHouse, batch size = {}, target table = {}, current attempt = {}\", requestBlank.getValues().size(), requestBlank.getTargetTable(), requestBlank.getAttemptCounter()); future.complete(true); } } catch (Exception e) { logger.error(\"Error while executing callback, params = {}\", sinkSettings, e); requestBlank.setException(e); try { handleUnsuccessfulResponse(response, requestBlank, future); } catch (Exception error) { logger.error(\"Error while handle unsuccessful response\", error); future.completeExceptionally(error); } } finally { queueCounter.decrementAndGet(); } }; } private void handleUnsuccessfulResponse(Response response, ClickHouseRequestBlank requestBlank, CompletableFuture<Boolean> future) throws Exception { int currentCounter = requestBlank.getAttemptCounter(); if (currentCounter >= sinkSettings.getMaxRetries()) { logger.warn(\"Failed to send data to ClickHouse, cause: limit of attempts is exceeded.\" + \" ClickHouse response = {}. Ready to flush data on disk.\", response, requestBlank.getException()); logFailedRecords(requestBlank); future.completeExceptionally(new RuntimeException(String.format(\"Failed to send data to ClickHouse, cause: limit of attempts is exceeded.\" + \" ClickHouse response: %s. Cause: %s\", response != null ? response.getResponseBody() : null, requestBlank.getException()))); } else { requestBlank.incrementCounter(); logger.warn(\"Next attempt to send data to ClickHouse, table = {}, buffer size = {}, current attempt num = {}, max attempt num = {}, response = {}\", requestBlank.getTargetTable(), requestBlank.getValues().size(), requestBlank.getAttemptCounter(), sinkSettings.getMaxRetries(), response); queueCounter.incrementAndGet(); queue.put(requestBlank); future.complete(false); } } private void logFailedRecords(ClickHouseRequestBlank requestBlank) throws Exception { String filePath = String.format(\"%s/%s_%s\", sinkSettings.getFailedRecordsPath(), requestBlank.getTargetTable(), System.currentTimeMillis()); try (PrintWriter writer = new PrintWriter(filePath)) { List<String> records = requestBlank.getValues(); records.forEach(writer::println); writer.flush(); } logger.info(\"Successful send data on disk, path = {}, size = {} \", filePath, requestBlank.getValues().size()); } void setStopWorking() { isWorking = false; } } }"},{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/model/ClickHouseRequestBlank.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.model; import java.util.List; public class ClickHouseRequestBlank { private final List<String> values; private final String targetTable; private int attemptCounter; private Exception exception; public ClickHouseRequestBlank(List<String> values, String targetTable, Exception exception) { this.values = values; this.targetTable = targetTable; this.attemptCounter = 0; this.exception = exception; } public List<String> getValues() { return values; } public void incrementCounter() { this.attemptCounter++; } public int getAttemptCounter() { return attemptCounter; } public String getTargetTable() { return targetTable; } public Exception getException() { return exception; } public void setException(Exception exception) { this.exception = exception; } public static final class Builder { private List<String> values; private String targetTable; private Exception exception; private Builder() { } public static Builder aBuilder() { return new Builder(); } public Builder withValues(List<String> values) { this.values = values; return this; } public Builder withTargetTable(String targetTable) { this.targetTable = targetTable; return this; } public Builder withException(Exception exception) { this.exception = exception; return this; } public ClickHouseRequestBlank build() { return new ClickHouseRequestBlank(values, targetTable, exception); } } @Override public String toString() { return \"ClickHouseRequestBlank{\" + \"values=\" + values + \", targetTable='\" + targetTable + '\\'' + \", attemptCounter=\" + attemptCounter + \", exception=\" + exception + '}'; } }"}]}}
{"project_id":280,"chunk_id":1,"content":{"main_file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/test/java/ru/ivi/opensource/flinkclickhousesink/applied/ClickHouseSinkBufferTest.java","main_file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; import com.typesafe.config.Config; import com.typesafe.config.ConfigFactory; import org.junit.After; import org.junit.Before; import org.junit.Test; import org.junit.runner.RunWith; import org.mockito.Mockito; import org.mockito.MockitoAnnotations; import org.mockito.junit.MockitoJUnitRunner; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseClusterSettings; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseRequestBlank; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkCommonParams; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst; import ru.ivi.opensource.flinkclickhousesink.util.ConfigUtil; import java.util.Collections; import java.util.LinkedList; import java.util.List; import java.util.Map; import java.util.concurrent.CompletableFuture; import java.util.concurrent.atomic.AtomicBoolean; import static java.util.concurrent.TimeUnit.MILLISECONDS; import static java.util.concurrent.TimeUnit.SECONDS; import static org.awaitility.Awaitility.await; import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertTrue; @RunWith(MockitoJUnitRunner.Silent.class) public class ClickHouseSinkBufferTest { private static final int BUFFER_SIZE_10000 = 10000; private static final int BUFFER_SIZE_10 = 10; private static final int TIMEOUT_SEC = 10; private ClickHouseSinkBuffer bufferTimeTrigger; private ClickHouseSinkBuffer bufferSizeTrigger; private ClickHouseWriter writer; private final List<CompletableFuture<Boolean>> futures = Collections.synchronizedList(new LinkedList<>()); @Before public void setUp() { writer = Mockito.mock(ClickHouseWriter.class); bufferTimeTrigger = ClickHouseSinkBuffer.Builder .aClickHouseSinkBuffer() .withTargetTable(\"table\") .withMaxFlushBufferSize(BUFFER_SIZE_10000) .withTimeoutSec(TIMEOUT_SEC) .withFutures(futures) .build(writer); bufferSizeTrigger = ClickHouseSinkBuffer.Builder .aClickHouseSinkBuffer() .withTargetTable(\"table\") .withMaxFlushBufferSize(BUFFER_SIZE_10) .withTimeoutSec(TIMEOUT_SEC) .withFutures(futures) .build(writer); MockitoAnnotations.initMocks(this); } @After public void tearDown() { } @Test public void simplePut() { Mockito.doAnswer(invocationOnMock -> { ClickHouseRequestBlank blank = invocationOnMock.getArgument(0); System.out.println(blank); assertEquals(BUFFER_SIZE_10000, blank.getValues().size()); assertEquals(\"table\", blank.getTargetTable()); return invocationOnMock; }).when(writer).put(Mockito.any()); for (int i = 0; i < 100; i++) { bufferTimeTrigger.put(\"csv\"); } } private ClickHouseSinkScheduledCheckerAndCleaner initChecker() { Config config = ConfigFactory.load(); Map<String, String> params = ConfigUtil.toMap(config); params.put(ClickHouseClusterSettings.CLICKHOUSE_USER, \"\"); params.put(ClickHouseClusterSettings.CLICKHOUSE_PASSWORD, \"\"); params.put(ClickHouseClusterSettings.CLICKHOUSE_HOSTS, \"http: params.put(ClickHouseSinkConst.TIMEOUT_SEC, String.valueOf(TIMEOUT_SEC)); params.put(ClickHouseSinkConst.IGNORING_CLICKHOUSE_SENDING_EXCEPTION_ENABLED, \"true\"); ClickHouseSinkCommonParams commonParams = new ClickHouseSinkCommonParams(params); return new ClickHouseSinkScheduledCheckerAndCleaner(commonParams, futures); } @Test public void testAddToQueueByTimeTrigger() { ClickHouseSinkScheduledCheckerAndCleaner checker = initChecker(); checker.addSinkBuffer(bufferTimeTrigger); AtomicBoolean flag = new AtomicBoolean(); Mockito.doAnswer(invocationOnMock -> { ClickHouseRequestBlank blank = invocationOnMock.getArgument(0); assertTrue(BUFFER_SIZE_10000 > blank.getValues().size()); assertEquals(\"table\", blank.getTargetTable()); flag.set(true); return invocationOnMock; }).when(writer).put(Mockito.any()); for (int i = 0; i < 800; i++) { bufferTimeTrigger.put(\"csv\"); } await() .atMost(15, SECONDS) .with() .pollInterval(200, MILLISECONDS) .until(flag::get); } @Test public void testAddToQueueBySizeTrigger() { ClickHouseSinkScheduledCheckerAndCleaner checker = initChecker(); checker.addSinkBuffer(bufferSizeTrigger); AtomicBoolean flag = new AtomicBoolean(); Mockito.doAnswer(invocationOnMock -> { ClickHouseRequestBlank blank = invocationOnMock.getArgument(0); assertEquals(BUFFER_SIZE_10, blank.getValues().size()); assertEquals(\"table\", blank.getTargetTable()); flag.set(true); return invocationOnMock; }).when(writer).put(Mockito.any()); for (int i = 0; i < 800; i++) { bufferSizeTrigger.put(\"csv\"); } await() .atMost(TIMEOUT_SEC, SECONDS) .with() .pollInterval(200, MILLISECONDS) .until(flag::get); } }","dependencies":[{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/model/ClickHouseSinkCommonParams.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.model; import com.google.common.base.Preconditions; import java.util.Map; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.FAILED_RECORDS_PATH; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.IGNORING_CLICKHOUSE_SENDING_EXCEPTION_ENABLED; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.NUM_RETRIES; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.NUM_WRITERS; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.QUEUE_MAX_CAPACITY; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.TIMEOUT_SEC; public class ClickHouseSinkCommonParams { private final ClickHouseClusterSettings clickHouseClusterSettings; private final String failedRecordsPath; private final int numWriters; private final int queueMaxCapacity; private final boolean ignoringClickHouseSendingExceptionEnabled; private final int timeout; private final int maxRetries; public ClickHouseSinkCommonParams(Map<String, String> params) { Preconditions.checkNotNull(params.get(IGNORING_CLICKHOUSE_SENDING_EXCEPTION_ENABLED), \"Parameter \" + IGNORING_CLICKHOUSE_SENDING_EXCEPTION_ENABLED + \" must be initialized\"); this.clickHouseClusterSettings = new ClickHouseClusterSettings(params); this.numWriters = Integer.parseInt(params.get(NUM_WRITERS)); this.queueMaxCapacity = Integer.parseInt(params.get(QUEUE_MAX_CAPACITY)); this.maxRetries = Integer.parseInt(params.get(NUM_RETRIES)); this.timeout = Integer.parseInt(params.get(TIMEOUT_SEC)); this.failedRecordsPath = params.get(FAILED_RECORDS_PATH); this.ignoringClickHouseSendingExceptionEnabled = Boolean.parseBoolean(params.get(IGNORING_CLICKHOUSE_SENDING_EXCEPTION_ENABLED)); Preconditions.checkNotNull(failedRecordsPath); Preconditions.checkArgument(queueMaxCapacity > 0); Preconditions.checkArgument(numWriters > 0); Preconditions.checkArgument(timeout > 0); Preconditions.checkArgument(maxRetries > 0); } public int getNumWriters() { return numWriters; } public int getQueueMaxCapacity() { return queueMaxCapacity; } public boolean isIgnoringClickHouseSendingExceptionEnabled() { return ignoringClickHouseSendingExceptionEnabled; } public ClickHouseClusterSettings getClickHouseClusterSettings() { return clickHouseClusterSettings; } public int getTimeout() { return timeout; } public int getMaxRetries() { return maxRetries; } public String getFailedRecordsPath() { return failedRecordsPath; } @Override public String toString() { return \"ClickHouseSinkCommonParams{\" + \"clickHouseClusterSettings=\" + clickHouseClusterSettings + \", failedRecordsPath='\" + failedRecordsPath + '\\'' + \", numWriters=\" + numWriters + \", queueMaxCapacity=\" + queueMaxCapacity + \", ignoringClickHouseSendingExceptionEnabled=\" + ignoringClickHouseSendingExceptionEnabled + \", timeout=\" + timeout + \", maxRetries=\" + maxRetries + '}'; } }"},{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/util/ConfigUtil.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.util; import com.typesafe.config.Config; import com.typesafe.config.ConfigValue; import java.util.Arrays; import java.util.HashMap; import java.util.List; import java.util.Map; import java.util.Properties; public final class ConfigUtil { public static final String HOST_DELIMITER = \",\"; private ConfigUtil() { } public static Properties toProperties(Config config) { Properties properties = new Properties(); config.entrySet().forEach(e -> properties.put(e.getKey(), unwrapped(config.getValue(e.getKey())))); return properties; } public static Map<String, String> toMap(Config config) { Map<String, String> map = new HashMap<>(); config.entrySet().forEach(e -> map.put(e.getKey(), unwrapped(e.getValue()))); return map; } private static String unwrapped(ConfigValue configValue) { Object object = configValue.unwrapped(); return object.toString(); } public static String buildStringFromList(List<String> list) { return String.join(HOST_DELIMITER, list); } public static List<String> buildListFromString(String string) { return Arrays.asList(string.split(\" \")); } }"}]}}
{"project_id":280,"chunk_id":0,"content":{"main_file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/test/java/ru/ivi/opensource/flinkclickhousesink/applied/UnexceptionableSinkTest.java","main_file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; import org.junit.Before; import org.junit.Test; import org.mockito.Mockito; import org.mockito.MockitoAnnotations; import java.util.concurrent.ExecutionException; import static org.junit.Assert.assertEquals; import static org.mockito.Mockito.doAnswer; import static org.mockito.Mockito.times; import static org.mockito.Mockito.verify; public class UnexceptionableSinkTest { private Sink unexceptionableSink; private ClickHouseSinkBuffer buffer; @Before public void setUp() { buffer = Mockito.mock(ClickHouseSinkBuffer.class); unexceptionableSink = new UnexceptionableSink(buffer); MockitoAnnotations.initMocks(this); } @Test public void put() throws ExecutionException, InterruptedException { String actual = \"csv\"; doAnswer(invocation -> { String expected = (String) invocation.getArguments()[0]; assertEquals(expected, actual); return invocation; }).when(buffer).put(Mockito.anyString()); unexceptionableSink.put(actual); verify(buffer, times(0)).assertFuturesNotFailedYet(); } }","dependencies":[{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/applied/ClickHouseSinkBuffer.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; import com.google.common.base.Preconditions; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseRequestBlank; import ru.ivi.opensource.flinkclickhousesink.util.FutureUtil; import java.util.ArrayList; import java.util.Collections; import java.util.List; import java.util.concurrent.CompletableFuture; import java.util.concurrent.ExecutionException; import java.util.concurrent.TimeUnit; public class ClickHouseSinkBuffer implements AutoCloseable { private static final Logger logger = LoggerFactory.getLogger(ClickHouseSinkBuffer.class); private final ClickHouseWriter writer; private final String targetTable; private final int maxFlushBufferSize; private final long timeoutMillis; private final List<String> localValues; private final List<CompletableFuture<Boolean>> futures; private volatile long lastAddTimeMillis = System.currentTimeMillis(); private ClickHouseSinkBuffer( ClickHouseWriter chWriter, long timeout, int maxBuffer, String table, List<CompletableFuture<Boolean>> futures ) { writer = chWriter; localValues = new ArrayList<>(); timeoutMillis = timeout; maxFlushBufferSize = maxBuffer; targetTable = table; this.futures = futures; logger.info(\"Instance ClickHouse Sink, target table = {}, buffer size = {}\", this.targetTable, this.maxFlushBufferSize); } String getTargetTable() { return targetTable; } public void put(String recordAsCSV) { tryAddToQueue(); localValues.add(recordAsCSV); } synchronized void tryAddToQueue() { if (flushCondition()) { addToQueue(); lastAddTimeMillis = System.currentTimeMillis(); } } private void addToQueue() { List<String> deepCopy = buildDeepCopy(localValues); ClickHouseRequestBlank params = ClickHouseRequestBlank.Builder .aBuilder() .withValues(deepCopy) .withTargetTable(targetTable) .build(); logger.debug(\"Build blank with params: buffer size = {}, target table = {}\", params.getValues().size(), params.getTargetTable()); writer.put(params); localValues.clear(); } private boolean flushCondition() { return localValues.size() > 0 && (checkSize() || checkTime()); } private boolean checkSize() { return localValues.size() >= maxFlushBufferSize; } private boolean checkTime() { long current = System.currentTimeMillis(); return current - lastAddTimeMillis > timeoutMillis; } private static List<String> buildDeepCopy(List<String> original) { return Collections.unmodifiableList(new ArrayList<>(original)); } public void assertFuturesNotFailedYet() throws ExecutionException, InterruptedException { CompletableFuture<Void> future = FutureUtil.allOf(futures); if (future.isCompletedExceptionally()) { future.get(); } } @Override public void close() { logger.info(\"ClickHouse sink buffer is shutting down.\"); if (localValues != null && localValues.size() > 0) { addToQueue(); } logger.info(\"ClickHouse sink buffer shutdown complete.\"); } public static final class Builder { private String targetTable; private int maxFlushBufferSize; private int timeoutSec; private List<CompletableFuture<Boolean>> futures; private Builder() { } public static Builder aClickHouseSinkBuffer() { return new Builder(); } public Builder withTargetTable(String targetTable) { this.targetTable = targetTable; return this; } public Builder withMaxFlushBufferSize(int maxFlushBufferSize) { this.maxFlushBufferSize = maxFlushBufferSize; return this; } public Builder withTimeoutSec(int timeoutSec) { this.timeoutSec = timeoutSec; return this; } public Builder withFutures(List<CompletableFuture<Boolean>> futures) { this.futures = futures; return this; } public ClickHouseSinkBuffer build(ClickHouseWriter writer) { Preconditions.checkNotNull(targetTable); Preconditions.checkArgument(maxFlushBufferSize > 0); Preconditions.checkArgument(timeoutSec > 0); return new ClickHouseSinkBuffer( writer, TimeUnit.SECONDS.toMillis(this.timeoutSec), this.maxFlushBufferSize, this.targetTable, this.futures ); } } }"},{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/applied/Sink.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; import java.util.concurrent.ExecutionException; public interface Sink extends AutoCloseable { void put(String message) throws ExecutionException, InterruptedException; }"},{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/applied/UnexceptionableSink.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; public class UnexceptionableSink implements Sink { private final ClickHouseSinkBuffer clickHouseSinkBuffer; public UnexceptionableSink(ClickHouseSinkBuffer buffer) { this.clickHouseSinkBuffer = buffer; } @Override public void put(String message) { clickHouseSinkBuffer.put(message); } @Override public void close() { if (clickHouseSinkBuffer != null) { clickHouseSinkBuffer.close(); } } }"}]}}
{"project_id":280,"chunk_id":0,"content":{"main_file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/test/java/ru/ivi/opensource/flinkclickhousesink/applied/ExceptionsThrowableSinkTest.java","main_file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; import org.hamcrest.CoreMatchers; import org.junit.Before; import org.junit.Test; import org.mockito.Mockito; import org.mockito.MockitoAnnotations; import java.util.concurrent.ExecutionException; import static org.hamcrest.MatcherAssert.assertThat; import static org.junit.Assert.assertEquals; import static org.mockito.Mockito.doAnswer; import static org.mockito.Mockito.doThrow; import static org.mockito.Mockito.times; import static org.mockito.Mockito.verify; public class ExceptionsThrowableSinkTest { private Sink exceptionsThrowableSink; private ClickHouseSinkBuffer buffer; @Before public void setUp() { buffer = Mockito.mock(ClickHouseSinkBuffer.class); exceptionsThrowableSink = new ExceptionsThrowableSink(buffer); MockitoAnnotations.initMocks(this); } @Test public void putWithException() throws ExecutionException, InterruptedException { String actual = \"csv\"; doThrow(new InterruptedException(\"test Exception message\")) .when(buffer) .assertFuturesNotFailedYet(); doAnswer(invocation -> { String expected = (String) invocation.getArguments()[0]; assertEquals(expected, actual); return invocation; }).when(buffer).put(Mockito.anyString()); try { exceptionsThrowableSink.put(actual); } catch (InterruptedException expectedException) { assertThat(expectedException.getMessage(), CoreMatchers.containsString(\"test Exception message\")); } verify(buffer, times(1)).assertFuturesNotFailedYet(); } }","dependencies":[{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/applied/ClickHouseSinkBuffer.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; import com.google.common.base.Preconditions; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseRequestBlank; import ru.ivi.opensource.flinkclickhousesink.util.FutureUtil; import java.util.ArrayList; import java.util.Collections; import java.util.List; import java.util.concurrent.CompletableFuture; import java.util.concurrent.ExecutionException; import java.util.concurrent.TimeUnit; public class ClickHouseSinkBuffer implements AutoCloseable { private static final Logger logger = LoggerFactory.getLogger(ClickHouseSinkBuffer.class); private final ClickHouseWriter writer; private final String targetTable; private final int maxFlushBufferSize; private final long timeoutMillis; private final List<String> localValues; private final List<CompletableFuture<Boolean>> futures; private volatile long lastAddTimeMillis = System.currentTimeMillis(); private ClickHouseSinkBuffer( ClickHouseWriter chWriter, long timeout, int maxBuffer, String table, List<CompletableFuture<Boolean>> futures ) { writer = chWriter; localValues = new ArrayList<>(); timeoutMillis = timeout; maxFlushBufferSize = maxBuffer; targetTable = table; this.futures = futures; logger.info(\"Instance ClickHouse Sink, target table = {}, buffer size = {}\", this.targetTable, this.maxFlushBufferSize); } String getTargetTable() { return targetTable; } public void put(String recordAsCSV) { tryAddToQueue(); localValues.add(recordAsCSV); } synchronized void tryAddToQueue() { if (flushCondition()) { addToQueue(); lastAddTimeMillis = System.currentTimeMillis(); } } private void addToQueue() { List<String> deepCopy = buildDeepCopy(localValues); ClickHouseRequestBlank params = ClickHouseRequestBlank.Builder .aBuilder() .withValues(deepCopy) .withTargetTable(targetTable) .build(); logger.debug(\"Build blank with params: buffer size = {}, target table = {}\", params.getValues().size(), params.getTargetTable()); writer.put(params); localValues.clear(); } private boolean flushCondition() { return localValues.size() > 0 && (checkSize() || checkTime()); } private boolean checkSize() { return localValues.size() >= maxFlushBufferSize; } private boolean checkTime() { long current = System.currentTimeMillis(); return current - lastAddTimeMillis > timeoutMillis; } private static List<String> buildDeepCopy(List<String> original) { return Collections.unmodifiableList(new ArrayList<>(original)); } public void assertFuturesNotFailedYet() throws ExecutionException, InterruptedException { CompletableFuture<Void> future = FutureUtil.allOf(futures); if (future.isCompletedExceptionally()) { future.get(); } } @Override public void close() { logger.info(\"ClickHouse sink buffer is shutting down.\"); if (localValues != null && localValues.size() > 0) { addToQueue(); } logger.info(\"ClickHouse sink buffer shutdown complete.\"); } public static final class Builder { private String targetTable; private int maxFlushBufferSize; private int timeoutSec; private List<CompletableFuture<Boolean>> futures; private Builder() { } public static Builder aClickHouseSinkBuffer() { return new Builder(); } public Builder withTargetTable(String targetTable) { this.targetTable = targetTable; return this; } public Builder withMaxFlushBufferSize(int maxFlushBufferSize) { this.maxFlushBufferSize = maxFlushBufferSize; return this; } public Builder withTimeoutSec(int timeoutSec) { this.timeoutSec = timeoutSec; return this; } public Builder withFutures(List<CompletableFuture<Boolean>> futures) { this.futures = futures; return this; } public ClickHouseSinkBuffer build(ClickHouseWriter writer) { Preconditions.checkNotNull(targetTable); Preconditions.checkArgument(maxFlushBufferSize > 0); Preconditions.checkArgument(timeoutSec > 0); return new ClickHouseSinkBuffer( writer, TimeUnit.SECONDS.toMillis(this.timeoutSec), this.maxFlushBufferSize, this.targetTable, this.futures ); } } }"},{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/applied/ExceptionsThrowableSink.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; import java.util.concurrent.ExecutionException; public class ExceptionsThrowableSink implements Sink { private final ClickHouseSinkBuffer clickHouseSinkBuffer; public ExceptionsThrowableSink(ClickHouseSinkBuffer buffer) { this.clickHouseSinkBuffer = buffer; } @Override public void put(String message) throws ExecutionException, InterruptedException { clickHouseSinkBuffer.put(message); clickHouseSinkBuffer.assertFuturesNotFailedYet(); } @Override public void close() { if (clickHouseSinkBuffer != null) { clickHouseSinkBuffer.close(); } } }"},{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/applied/Sink.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; import java.util.concurrent.ExecutionException; public interface Sink extends AutoCloseable { void put(String message) throws ExecutionException, InterruptedException; }"}]}}
{"project_id":280,"chunk_id":0,"content":{"main_file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/test/java/ru/ivi/opensource/flinkclickhousesink/applied/ClickHouseSinkScheduledCheckerAndCleanerTest.java","main_file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; import com.typesafe.config.Config; import com.typesafe.config.ConfigFactory; import org.junit.After; import org.junit.Before; import org.junit.Test; import org.junit.runner.RunWith; import org.mockito.Mockito; import org.mockito.MockitoAnnotations; import org.mockito.junit.MockitoJUnitRunner; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseClusterSettings; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkCommonParams; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst; import ru.ivi.opensource.flinkclickhousesink.util.ConfigUtil; import java.util.Collections; import java.util.LinkedList; import java.util.List; import java.util.Map; import java.util.concurrent.CompletableFuture; import java.util.concurrent.atomic.AtomicInteger; import static java.util.concurrent.TimeUnit.MILLISECONDS; import static org.awaitility.Awaitility.await; @RunWith(MockitoJUnitRunner.Silent.class) public class ClickHouseSinkScheduledCheckerAndCleanerTest { private ClickHouseSinkScheduledCheckerAndCleaner checker; private final AtomicInteger counter = new AtomicInteger(0); private final List<CompletableFuture<Boolean>> futures = Collections.synchronizedList(new LinkedList<>()); @Before public void setUp() { Config config = ConfigFactory.load(); Map<String, String> params = ConfigUtil.toMap(config); params.put(ClickHouseClusterSettings.CLICKHOUSE_USER, \"\"); params.put(ClickHouseClusterSettings.CLICKHOUSE_PASSWORD, \"\"); params.put(ClickHouseClusterSettings.CLICKHOUSE_HOSTS, \"http: params.put(ClickHouseSinkConst.IGNORING_CLICKHOUSE_SENDING_EXCEPTION_ENABLED, \"true\"); ClickHouseSinkCommonParams commonParams = new ClickHouseSinkCommonParams(params); checker = new ClickHouseSinkScheduledCheckerAndCleaner(commonParams, futures); MockitoAnnotations.initMocks(this); } @After public void tearDown() throws Exception { checker.close(); } @Test public void addSinkBuffer() { test(3, 3); } private void test(int numBuffers, int target) { for (int i = 0; i < numBuffers; i++) { ClickHouseSinkBuffer buffer = buildMockBuffer(); checker.addSinkBuffer(buffer); } await() .atMost(2000, MILLISECONDS) .with() .pollInterval(200, MILLISECONDS) .until(() -> { System.out.println(counter.get()); return counter.get() == target; }); } private ClickHouseSinkBuffer buildMockBuffer() { ClickHouseSinkBuffer buffer = Mockito.mock(ClickHouseSinkBuffer.class); Mockito.doAnswer(invocationOnMock -> { counter.incrementAndGet(); return invocationOnMock; }).when(buffer).tryAddToQueue(); return buffer; } @Test public void checkBuffersAfterAttempt() { int first = 4; int second = 1; test(first, first); test(second, first * 2 + second); } }","dependencies":[{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/applied/ClickHouseSinkBuffer.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; import com.google.common.base.Preconditions; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseRequestBlank; import ru.ivi.opensource.flinkclickhousesink.util.FutureUtil; import java.util.ArrayList; import java.util.Collections; import java.util.List; import java.util.concurrent.CompletableFuture; import java.util.concurrent.ExecutionException; import java.util.concurrent.TimeUnit; public class ClickHouseSinkBuffer implements AutoCloseable { private static final Logger logger = LoggerFactory.getLogger(ClickHouseSinkBuffer.class); private final ClickHouseWriter writer; private final String targetTable; private final int maxFlushBufferSize; private final long timeoutMillis; private final List<String> localValues; private final List<CompletableFuture<Boolean>> futures; private volatile long lastAddTimeMillis = System.currentTimeMillis(); private ClickHouseSinkBuffer( ClickHouseWriter chWriter, long timeout, int maxBuffer, String table, List<CompletableFuture<Boolean>> futures ) { writer = chWriter; localValues = new ArrayList<>(); timeoutMillis = timeout; maxFlushBufferSize = maxBuffer; targetTable = table; this.futures = futures; logger.info(\"Instance ClickHouse Sink, target table = {}, buffer size = {}\", this.targetTable, this.maxFlushBufferSize); } String getTargetTable() { return targetTable; } public void put(String recordAsCSV) { tryAddToQueue(); localValues.add(recordAsCSV); } synchronized void tryAddToQueue() { if (flushCondition()) { addToQueue(); lastAddTimeMillis = System.currentTimeMillis(); } } private void addToQueue() { List<String> deepCopy = buildDeepCopy(localValues); ClickHouseRequestBlank params = ClickHouseRequestBlank.Builder .aBuilder() .withValues(deepCopy) .withTargetTable(targetTable) .build(); logger.debug(\"Build blank with params: buffer size = {}, target table = {}\", params.getValues().size(), params.getTargetTable()); writer.put(params); localValues.clear(); } private boolean flushCondition() { return localValues.size() > 0 && (checkSize() || checkTime()); } private boolean checkSize() { return localValues.size() >= maxFlushBufferSize; } private boolean checkTime() { long current = System.currentTimeMillis(); return current - lastAddTimeMillis > timeoutMillis; } private static List<String> buildDeepCopy(List<String> original) { return Collections.unmodifiableList(new ArrayList<>(original)); } public void assertFuturesNotFailedYet() throws ExecutionException, InterruptedException { CompletableFuture<Void> future = FutureUtil.allOf(futures); if (future.isCompletedExceptionally()) { future.get(); } } @Override public void close() { logger.info(\"ClickHouse sink buffer is shutting down.\"); if (localValues != null && localValues.size() > 0) { addToQueue(); } logger.info(\"ClickHouse sink buffer shutdown complete.\"); } public static final class Builder { private String targetTable; private int maxFlushBufferSize; private int timeoutSec; private List<CompletableFuture<Boolean>> futures; private Builder() { } public static Builder aClickHouseSinkBuffer() { return new Builder(); } public Builder withTargetTable(String targetTable) { this.targetTable = targetTable; return this; } public Builder withMaxFlushBufferSize(int maxFlushBufferSize) { this.maxFlushBufferSize = maxFlushBufferSize; return this; } public Builder withTimeoutSec(int timeoutSec) { this.timeoutSec = timeoutSec; return this; } public Builder withFutures(List<CompletableFuture<Boolean>> futures) { this.futures = futures; return this; } public ClickHouseSinkBuffer build(ClickHouseWriter writer) { Preconditions.checkNotNull(targetTable); Preconditions.checkArgument(maxFlushBufferSize > 0); Preconditions.checkArgument(timeoutSec > 0); return new ClickHouseSinkBuffer( writer, TimeUnit.SECONDS.toMillis(this.timeoutSec), this.maxFlushBufferSize, this.targetTable, this.futures ); } } }"},{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/applied/ClickHouseSinkScheduledCheckerAndCleaner.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.applied; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkCommonParams; import ru.ivi.opensource.flinkclickhousesink.util.ThreadUtil; import java.util.ArrayList; import java.util.List; import java.util.concurrent.CompletableFuture; import java.util.concurrent.Executors; import java.util.concurrent.ScheduledExecutorService; import java.util.concurrent.ThreadFactory; import java.util.concurrent.TimeUnit; import java.util.function.Predicate; public class ClickHouseSinkScheduledCheckerAndCleaner implements AutoCloseable { private static final Logger logger = LoggerFactory.getLogger(ClickHouseSinkScheduledCheckerAndCleaner.class); private final ScheduledExecutorService scheduledExecutorService; private final List<ClickHouseSinkBuffer> clickHouseSinkBuffers = new ArrayList<>(); private final List<CompletableFuture<Boolean>> futures; private final Predicate<CompletableFuture<Boolean>> filter; public ClickHouseSinkScheduledCheckerAndCleaner(ClickHouseSinkCommonParams props, List<CompletableFuture<Boolean>> futures) { this.futures = futures; this.filter = getFuturesFilter(props.isIgnoringClickHouseSendingExceptionEnabled()); ThreadFactory factory = ThreadUtil.threadFactory(\"clickhouse-writer-checker-and-cleaner\"); scheduledExecutorService = Executors.newSingleThreadScheduledExecutor(factory); scheduledExecutorService.scheduleWithFixedDelay(getTask(), props.getTimeout(), props.getTimeout(), TimeUnit.SECONDS); logger.info(\"Build Sink scheduled checker, timeout (sec) = {}\", props.getTimeout()); } public void addSinkBuffer(ClickHouseSinkBuffer clickHouseSinkBuffer) { synchronized (this) { clickHouseSinkBuffers.add(clickHouseSinkBuffer); } logger.debug(\"Add sinkBuffer, target table = {}\", clickHouseSinkBuffer.getTargetTable()); } private Runnable getTask() { return () -> { synchronized (this) { logger.debug(\"Start checking buffers and cleanup futures: Before cleanup = {}.\", futures.size()); futures.removeIf(filter); clickHouseSinkBuffers.forEach(ClickHouseSinkBuffer::tryAddToQueue); } }; } private static Predicate<CompletableFuture<Boolean>> getFuturesFilter(boolean ignoringExceptionEnabled) { if (ignoringExceptionEnabled) { return CompletableFuture::isDone; } else { return f -> f.isDone() && !f.isCompletedExceptionally(); } } @Override public void close() throws Exception { logger.info(\"ClickHouseSinkScheduledCheckerAndCleaner is shutting down.\"); ThreadUtil.shutdownExecutorService(scheduledExecutorService); logger.info(\"ClickHouseSinkScheduledCheckerAndCleaner shutdown complete.\"); } }"},{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/model/ClickHouseSinkCommonParams.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.model; import com.google.common.base.Preconditions; import java.util.Map; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.FAILED_RECORDS_PATH; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.IGNORING_CLICKHOUSE_SENDING_EXCEPTION_ENABLED; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.NUM_RETRIES; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.NUM_WRITERS; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.QUEUE_MAX_CAPACITY; import static ru.ivi.opensource.flinkclickhousesink.model.ClickHouseSinkConst.TIMEOUT_SEC; public class ClickHouseSinkCommonParams { private final ClickHouseClusterSettings clickHouseClusterSettings; private final String failedRecordsPath; private final int numWriters; private final int queueMaxCapacity; private final boolean ignoringClickHouseSendingExceptionEnabled; private final int timeout; private final int maxRetries; public ClickHouseSinkCommonParams(Map<String, String> params) { Preconditions.checkNotNull(params.get(IGNORING_CLICKHOUSE_SENDING_EXCEPTION_ENABLED), \"Parameter \" + IGNORING_CLICKHOUSE_SENDING_EXCEPTION_ENABLED + \" must be initialized\"); this.clickHouseClusterSettings = new ClickHouseClusterSettings(params); this.numWriters = Integer.parseInt(params.get(NUM_WRITERS)); this.queueMaxCapacity = Integer.parseInt(params.get(QUEUE_MAX_CAPACITY)); this.maxRetries = Integer.parseInt(params.get(NUM_RETRIES)); this.timeout = Integer.parseInt(params.get(TIMEOUT_SEC)); this.failedRecordsPath = params.get(FAILED_RECORDS_PATH); this.ignoringClickHouseSendingExceptionEnabled = Boolean.parseBoolean(params.get(IGNORING_CLICKHOUSE_SENDING_EXCEPTION_ENABLED)); Preconditions.checkNotNull(failedRecordsPath); Preconditions.checkArgument(queueMaxCapacity > 0); Preconditions.checkArgument(numWriters > 0); Preconditions.checkArgument(timeout > 0); Preconditions.checkArgument(maxRetries > 0); } public int getNumWriters() { return numWriters; } public int getQueueMaxCapacity() { return queueMaxCapacity; } public boolean isIgnoringClickHouseSendingExceptionEnabled() { return ignoringClickHouseSendingExceptionEnabled; } public ClickHouseClusterSettings getClickHouseClusterSettings() { return clickHouseClusterSettings; } public int getTimeout() { return timeout; } public int getMaxRetries() { return maxRetries; } public String getFailedRecordsPath() { return failedRecordsPath; } @Override public String toString() { return \"ClickHouseSinkCommonParams{\" + \"clickHouseClusterSettings=\" + clickHouseClusterSettings + \", failedRecordsPath='\" + failedRecordsPath + '\\'' + \", numWriters=\" + numWriters + \", queueMaxCapacity=\" + queueMaxCapacity + \", ignoringClickHouseSendingExceptionEnabled=\" + ignoringClickHouseSendingExceptionEnabled + \", timeout=\" + timeout + \", maxRetries=\" + maxRetries + '}'; } }"},{"file_path":"flink-clickhouse-sink-master/flink-clickhouse-sink-master/src/main/java/ru/ivi/opensource/flinkclickhousesink/util/ConfigUtil.java","file_content":"package ru.ivi.opensource.flinkclickhousesink.util; import com.typesafe.config.Config; import com.typesafe.config.ConfigValue; import java.util.Arrays; import java.util.HashMap; import java.util.List; import java.util.Map; import java.util.Properties; public final class ConfigUtil { public static final String HOST_DELIMITER = \",\"; private ConfigUtil() { } public static Properties toProperties(Config config) { Properties properties = new Properties(); config.entrySet().forEach(e -> properties.put(e.getKey(), unwrapped(config.getValue(e.getKey())))); return properties; } public static Map<String, String> toMap(Config config) { Map<String, String> map = new HashMap<>(); config.entrySet().forEach(e -> map.put(e.getKey(), unwrapped(e.getValue()))); return map; } private static String unwrapped(ConfigValue configValue) { Object object = configValue.unwrapped(); return object.toString(); } public static String buildStringFromList(List<String> list) { return String.join(HOST_DELIMITER, list); } public static List<String> buildListFromString(String string) { return Arrays.asList(string.split(\" \")); } }"}]}}
{"project_id":282,"chunk_id":0,"content":{"main_file_path":"Battleship-Game-Engine-main/Main.java","main_file_content":"import Players.*; import Players.Engines.*; import Services.Ship; import java.util.Scanner; import static java.util.stream.IntStream.range; public class Main { public static void main(String[] args) { Scanner txt = new Scanner(System.in), setup = new Scanner(System.in); Human player1; BattleshipEngine player2 = null; System.out.println(\"\\nWhat would you like to do?\\n\\t[s]tart\\n\\te[x]it\"); char action = txt.next().toLowerCase().charAt(0); switch (action) { case 'x' : System.exit(0); break; case 's': break; default: main(new String[]{}); } System.out.print(\"\\nEnter your name : \"); String humanName = setup.nextLine(); player1 = new Human(humanName); char engine; do { System.out.println(\"\\nWhat engine would you like to play against?\"); System.out.println(\"\\t[N]aive-Solver (Easy)\\n\\t[I]ntermediate-Solver (Medium) \\n\\t[B]oogeyman (Crazy)\"); engine = txt.next().toUpperCase().trim().charAt(0); switch (engine) { case 'N' : player2 = new NaiveSolver(); break; case 'I': player2 = new IntermediateAdversary(); break; case 'B' : player2 = new Boogeyman(); break; default: System.out.println(\"Type in one of the letters : N,I or B\"); continue; } break; } while (engine != 'N' || engine != 'I' || engine != 'B'); System.out.println(\"\\nPlayer 1, place your ships on the game field\\n\"); player1.arena.printBattlefield(false); for (int i = 0; i < Ship.NO_OF_SHIPS; i++) { player1.placeShip(i); player1.arena.printBattlefield(false); } promptEnterKey(); System.out.println(\"\\nKindly wait while the machine places its ships\"); for (int i = 0; i < Ship.NO_OF_SHIPS; i++) { assert player2 != null; player2.placeShip(i); } System.out.println(\"\\nThe machine has completed placing its ships!\\n\"); player2.arena.printBattlefield(false); promptEnterKey(); System.out.println(\"The game starts!\"); boolean didP1Win = false; String shot; char shotRow; int shotCol; while (true) { player2.arena.printBattlefield(true); printDivider(); player1.arena.printBattlefield(false); shot = player1.fireASalvo(); shotRow = shot.charAt(0); shotCol = Integer.parseInt(shot.substring(1)); if (player2.arena.isHit(shotRow, shotCol)) { player2.manageShipHit(shotRow, shotCol); } else if (player2.arena.isMiss(shotRow, shotCol)) { player2.arena.placePiece(shotRow, shotCol, player2.arena.MISS); System.out.println(\"You missed! Try again next turn\"); } if (player2.isNavySunken()) { didP1Win = true; break; } System.out.println(\"\\nPlease wait while the engine makes its move\"); shot = player2.fireASalvo(); shotRow = shot.charAt(0); shotCol = Integer.parseInt(shot.substring(1)); if (player1.arena.isHit(shotRow, shotCol) ) { player1.manageShipHit(shotRow, shotCol); } else if (player1.arena.isMiss(shotRow, shotCol)) { player1.arena.placePiece(shotRow, shotCol, player2.arena.MISS); System.out.println(\"The engine fired at \" + shot + \" and missed.\"); } if (player1.isNavySunken()) { break; } } System.out.println(\"You sank the last ship. You won. Congratulations!\"); if (didP1Win) System.out.printf(\"Congrats %s, you have won this game of Battleship!\", humanName); else System.out.printf(\"The %s Engine won this game of Battleship!\", player2.getName()); } private static void promptEnterKey() { System.out.println(\"Press Enter for the next step\"); new Scanner(System.in).nextLine(); clearScreen(); } private static void clearScreen() { range(0, 25).forEach(i -> System.out.println()); } protected static void printDivider() { for (int i = 1; i <= 20; i++) { System.out.print(\"-\"); } } }","dependencies":[{"file_path":"Battleship-Game-Engine-main/Battleship-Game-Engine-main/Players/Human.java","file_content":"package Players; import Services.Battlefield; import java.util.Scanner; public class Human extends Player { public Human() { super(); } public Human(String name) { super(name); } @Override public void placeShip(int shipIndex) throws NumberFormatException { Scanner sc; System.out.println(\"\\nEnter the coordinates for \" + ships.get(shipIndex).getShipName() + \" (\" + ships.get(shipIndex).getShipLength() + \" cells): \"); while (true) { sc = new Scanner(System.in); String firstCoordinate = trapdoorFilter(sc.next().toUpperCase()); String secondCoordinate = trapdoorFilter(sc.next().toUpperCase()); char rowOfFirst = firstCoordinate.charAt(0); char rowOfSecond = secondCoordinate.charAt(0); int columnOfFirst = Integer.parseInt(firstCoordinate.substring(1)); int columnOfSecond = Integer.parseInt(secondCoordinate.substring(1)); int temp = Math.max(columnOfFirst, columnOfSecond); columnOfFirst = Math.min(columnOfFirst, columnOfSecond); columnOfSecond = temp; temp = Math.max(rowOfFirst, rowOfSecond); rowOfFirst = (char) Math.min(rowOfFirst, rowOfSecond); rowOfSecond = (char) temp; int placementRes = arena.isCorrectCoordinates(rowOfFirst, rowOfSecond, columnOfFirst, columnOfSecond, ships.get(shipIndex)); if (placementRes != Battlefield.VALID_COORD) { System.out.print(\"\\nError! \"); Battlefield.analyzeErrorInPlacement(placementRes); continue; } for (char i = rowOfFirst; i <= rowOfSecond; i++) { for (int j = columnOfFirst; j <= columnOfSecond; j++) { arena.placePiece(i, j, arena.SHIP); } } ships.get(shipIndex).storeShipPlacement(rowOfFirst, rowOfSecond, columnOfFirst, columnOfSecond); break; } } @Override public String fireASalvo() { Scanner num = new Scanner(System.in); String firingPos; while (true) { System.out.print(\"\\n\" + name + \", enter the firing position : \"); firingPos = trapdoorFilter(num.next().toUpperCase().trim()); char rowCoord = firingPos.charAt(0); int columnCoord = Integer.parseInt(firingPos.substring(1)); int placementRes = arena.isCorrectCoordinates(rowCoord, 'A', columnCoord, 9, null); if (placementRes != Battlefield.VALID_COORD) { System.out.println(\"Error! \"); Battlefield.analyzeErrorInPlacement(placementRes); continue; } break; } return firingPos; } @Override public void manageShipHit(char row, int col) { arena.placePiece(row, col, arena.HIT); int length = ships.size(); for (int i = 0; i < length; i++) { if (!ships.get(i).isPartOfShip(row, col)) continue; ships.get(i).removeShipPartAndReport(row, col); if (ships.get(i).isShipSunken()) { System.out.println(\"The engine has sunken your \" + ships.get(i).getShipName() +\" at \" + row + \"\" + col +\". Make them pay!\"); ships.remove(i); } else { System.out.println(\"The engine has hit your \" + ships.get(i).getShipName() +\" at \" + row + \"\" + col + \". Fire back!\"); } break; } } }"},{"file_path":"Battleship-Game-Engine-main/Players/Engines/BattleshipEngine.java","file_content":"package Players.Engines; import Players.Player; import java.util.Random; public abstract class BattleshipEngine extends Player { Random rng; protected String generateRandomMapCoordinates() { rng = new Random((int)(1 * 10000 * Math.random())); char row = (char) (rng.nextInt(10) + 'A'); int col = 1 + rng.nextInt(10); return row + \"\" + col; } @Override public void manageShipHit(char row, int col) { arena.placePiece(row, col, arena.HIT); int length = ships.size(); for (int i = 0; i < length; i++) { if (!ships.get(i).isPartOfShip(row, col)) continue; ships.get(i).removeShipPartAndReport(row, col); if (ships.get(i).isShipSunken()) { System.out.println(\"You sank a ship!\"); ships.remove(i); } else { System.out.println(\"You hit a ship!\"); } break; } } }"},{"file_path":"Battleship-Game-Engine-main/Players/Engines/Boogeyman.java","file_content":"package Players.Engines; public class Boogeyman extends BattleshipEngine { @Override public void placeShip(int shipIndex) { } @Override public String fireASalvo() { return null; } }"},{"file_path":"Battleship-Game-Engine-main/Players/Engines/IntermediateAdversary.java","file_content":"package Players.Engines; import java.util.ArrayList; import java.util.Random; import java.util.Stack; public class IntermediateAdversary extends NaiveSolver { private boolean IS_TARGETING; private ArrayList<Integer> targets; private ArrayList<Integer> hunts; private Stack<Integer> targetsFired; private String previousShot; public IntermediateAdversary() { this.name = \"In\"; IS_TARGETING = false; rng = new Random(); targets = new ArrayList<>(); hunts = new ArrayList<>(); targetsFired = new Stack<>(); } private int encode(String coordinates) { char row = coordinates.charAt(0); int column = Integer.parseInt(coordinates.substring(1)); return (row - 'A') * 10 + column - 1; } private String decode(int encodedCoord) { char row = (char) (encodedCoord / 10 + 'A'); int column = encodedCoord % 10 + 1; return row + \"\" + column; } @Override public String fireASalvo() { String target; if (IS_TARGETING) { target = null; } else { target = huntSquares(); } return null; } @Override public void manageShipHit(char row, int col) { arena.placePiece(row, col, arena.HIT); int length = ships.size(); for (int i = 0; i < length; i++) { if (!ships.get(i).isPartOfShip(row, col)) continue; ships.get(i).removeShipPartAndReport(row, col); if (ships.get(i).isShipSunken()) { System.out.println(\"You sank a ship!\"); ships.remove(i); IS_TARGETING = false; } else { System.out.println(\"You hit a ship!\"); IS_TARGETING = true; } break; } } private void createTargets(ArrayList<Integer> targets, ArrayList<Integer> hunts) { for (int i = 0; i < 100; i++) { targets.add(i); } for (int i = 1; i < 100; i+=2) { if (Math.floor((float) i / 10) % 2 == 0) { hunts.add(i); } else if (Math.floor((float) i / 10) % 2 == 1) { hunts.add(i - 1); } } } private String huntSquares() { String target; targetsFired.empty(); int randIndex, randHuntSqaure; if (!hunts.isEmpty()) { randIndex = rng.nextInt(hunts.size()); } else { randIndex = rng.nextInt(targets.size()); } randHuntSqaure = hunts.get(randIndex); target = decode(randHuntSqaure); hunts.remove(randHuntSqaure); targets.remove(randHuntSqaure); return target; } private String targetShip(String previousShot, boolean isHit) { String target; int startingTarget = encode(previousShot); int north = startingTarget - 10; int south = startingTarget + 10; int east = startingTarget + 1; int west = startingTarget - 1; if (targets.contains(north) && targetsFired.contains(north)) { targetsFired.push(north); } else if (targets.contains(south) && targetsFired.contains(south)) { targetsFired.push(south); } else if (targets.contains(east) && targetsFired.contains(east)) { targetsFired.push(east); } else if (targets.contains(west) && targetsFired.contains(west)) { targetsFired.push(west); } if (targetsFired.isEmpty()) { return huntSquares(); } int coordinateToFireAt = targetsFired.pop(); if (hunts.contains(coordinateToFireAt)) { hunts.remove(hunts.get(coordinateToFireAt)); } target = decode(coordinateToFireAt); return target; } }"},{"file_path":"Battleship-Game-Engine-main/Players/Engines/NaiveSolver.java","file_content":"package Players.Engines; import Services.Battlefield; public class NaiveSolver extends BattleshipEngine { @Override public void placeShip(int shipIndex) { String startingPosition = generateRandomMapCoordinates(); char rowStart = startingPosition.charAt(0); int colStart = Integer.parseInt(startingPosition.substring(1)); int horizontalOrVertical = (int) Math.round(Math.random()); int NEorSW = (int) Math.round(Math.random()); int placementRes; if (horizontalOrVertical == 0) { if (NEorSW == 0 && colStart - ships.get(shipIndex).getShipLength() + 1 >= 1) { placementRes = arena.isCorrectCoordinates(rowStart, rowStart, colStart - ships.get(shipIndex).getShipLength() + 1, colStart, ships.get(shipIndex)); if (placementRes == Battlefield.VALID_COORD) { for (int i = colStart - ships.get(shipIndex).getShipLength() + 1; i <= colStart; i++) { arena.placePiece(rowStart, i, arena.SHIP); } ships.get(shipIndex).storeShipPlacement(rowStart, rowStart, colStart - ships.get(shipIndex).getShipLength() + 1, colStart); return; } } else if (NEorSW == 1 && colStart + ships.get(shipIndex).getShipLength() - 1 <= 10) { placementRes = arena.isCorrectCoordinates(rowStart, rowStart, colStart, colStart + ships.get(shipIndex).getShipLength() - 1, ships.get(shipIndex)); if (placementRes == Battlefield.VALID_COORD) { for (int i = colStart; i <= colStart + ships.get(shipIndex).getShipLength() - 1; i++) { arena.placePiece(rowStart, i, arena.SHIP); } ships.get(shipIndex).storeShipPlacement(rowStart, rowStart, colStart, colStart + ships.get(shipIndex).getShipLength() - 1); return; } } placeShip(shipIndex); } else { if (NEorSW == 0 && rowStart - ships.get(shipIndex).getShipLength() + 1 >= 'A') { placementRes = arena.isCorrectCoordinates((char) (rowStart - ships.get(shipIndex).getShipLength() + 1), rowStart, colStart, colStart, ships.get(shipIndex)); if (placementRes == Battlefield.VALID_COORD) { for (char i = (char) (rowStart - ships.get(shipIndex).getShipLength() + 1); i <= rowStart; i++) { arena.placePiece(i, colStart, arena.SHIP); } ships.get(shipIndex).storeShipPlacement((char) (rowStart - ships.get(shipIndex).getShipLength() + 1), rowStart, colStart, colStart); return; } } else if (NEorSW == 1 && rowStart + ships.get(shipIndex).getShipLength() - 1 <= 'J') { placementRes = arena.isCorrectCoordinates(rowStart, (char) (rowStart + ships.get(shipIndex).getShipLength() - 1), colStart, colStart, ships.get(shipIndex)); if (placementRes == Battlefield.VALID_COORD) { for (char i = rowStart; i <= rowStart + ships.get(shipIndex).getShipLength() - 1; i++) { arena.placePiece(i, colStart, arena.SHIP); } ships.get(shipIndex).storeShipPlacement(rowStart, (char) (rowStart + ships.get(shipIndex).getShipLength() - 1) , colStart, colStart); return; } } placeShip(shipIndex); } } @Override public String fireASalvo() { return generateRandomMapCoordinates(); } }"}]}}
{"project_id":282,"chunk_id":0,"content":{"main_file_path":"Battleship-Game-Engine-main/Players/Human.java","main_file_content":"package Players; import Services.Battlefield; import java.util.Scanner; public class Human extends Player { public Human() { super(); } public Human(String name) { super(name); } @Override public void placeShip(int shipIndex) throws NumberFormatException { Scanner sc; System.out.println(\"\\nEnter the coordinates for \" + ships.get(shipIndex).getShipName() + \" (\" + ships.get(shipIndex).getShipLength() + \" cells): \"); while (true) { sc = new Scanner(System.in); String firstCoordinate = trapdoorFilter(sc.next().toUpperCase()); String secondCoordinate = trapdoorFilter(sc.next().toUpperCase()); char rowOfFirst = firstCoordinate.charAt(0); char rowOfSecond = secondCoordinate.charAt(0); int columnOfFirst = Integer.parseInt(firstCoordinate.substring(1)); int columnOfSecond = Integer.parseInt(secondCoordinate.substring(1)); int temp = Math.max(columnOfFirst, columnOfSecond); columnOfFirst = Math.min(columnOfFirst, columnOfSecond); columnOfSecond = temp; temp = Math.max(rowOfFirst, rowOfSecond); rowOfFirst = (char) Math.min(rowOfFirst, rowOfSecond); rowOfSecond = (char) temp; int placementRes = arena.isCorrectCoordinates(rowOfFirst, rowOfSecond, columnOfFirst, columnOfSecond, ships.get(shipIndex)); if (placementRes != Battlefield.VALID_COORD) { System.out.print(\"\\nError! \"); Battlefield.analyzeErrorInPlacement(placementRes); continue; } for (char i = rowOfFirst; i <= rowOfSecond; i++) { for (int j = columnOfFirst; j <= columnOfSecond; j++) { arena.placePiece(i, j, arena.SHIP); } } ships.get(shipIndex).storeShipPlacement(rowOfFirst, rowOfSecond, columnOfFirst, columnOfSecond); break; } } @Override public String fireASalvo() { Scanner num = new Scanner(System.in); String firingPos; while (true) { System.out.print(\"\\n\" + name + \", enter the firing position : \"); firingPos = trapdoorFilter(num.next().toUpperCase().trim()); char rowCoord = firingPos.charAt(0); int columnCoord = Integer.parseInt(firingPos.substring(1)); int placementRes = arena.isCorrectCoordinates(rowCoord, 'A', columnCoord, 9, null); if (placementRes != Battlefield.VALID_COORD) { System.out.println(\"Error! \"); Battlefield.analyzeErrorInPlacement(placementRes); continue; } break; } return firingPos; } @Override public void manageShipHit(char row, int col) { arena.placePiece(row, col, arena.HIT); int length = ships.size(); for (int i = 0; i < length; i++) { if (!ships.get(i).isPartOfShip(row, col)) continue; ships.get(i).removeShipPartAndReport(row, col); if (ships.get(i).isShipSunken()) { System.out.println(\"The engine has sunken your \" + ships.get(i).getShipName() +\" at \" + row + \"\" + col +\". Make them pay!\"); ships.remove(i); } else { System.out.println(\"The engine has hit your \" + ships.get(i).getShipName() +\" at \" + row + \"\" + col + \". Fire back!\"); } break; } } }","dependencies":[{"file_path":"Battleship-Game-Engine-main/Battleship-Game-Engine-main/Players/Player.java","file_content":"package Players; import Services.Battlefield; import Services.Ship; import java.util.ArrayList; public abstract class Player { protected String name; public Battlefield arena; protected ArrayList<Ship> ships; private static final String TRAPDOOR = \"2187AA23\"; public Player() { this(\"Luke Skywalker\"); } public Player(String name) { this.name = name; arena = new Battlefield(); ships = new ArrayList<>(); ships.add(new Ship(\"Aircraft Carrier\", 5)); ships.add(new Ship(\"Battleship\", 4)); ships.add(new Ship(\"Cruiser\", 3)); ships.add(new Ship(\"Submarine\", 3)); ships.add(new Ship(\"Destroyer\", 2)); } public String getName() { return name; } public static String trapdoorFilter(String input) { if (input.equals(TRAPDOOR)) { System.exit(0); } return input; } public abstract void placeShip(int shipIndex); public abstract String fireASalvo(); public boolean isNavySunken() { return ships.isEmpty(); } public abstract void manageShipHit(char row, int col); }"},{"file_path":"Battleship-Game-Engine-main/Battleship-Game-Engine-main/Services/Battlefield.java","file_content":"package Services; import java.util.Arrays; public class Battlefield { private final char[][] battlefield; public final char WATER; public final char HIT; public final char MISS; public final char SHIP; public static final int VALID_COORD = 0x0F; private static final int TOUCHING = 0x1C; private static final int CROSSING = 0xAF; private static final int OUT_OF_BOARD = 0xBD; private static final int WRONG_LENGTH = 0xFF; private static final int MISALIGN = 0x4E; public Battlefield() { this('X', 'M', '~', '0'); } public Battlefield(char HIT, char MISS, char WATER, char SHIP) { battlefield = new char[10][10]; this.HIT = HIT; this.MISS = MISS; this.WATER = WATER; this.SHIP = SHIP; for (char[] row : battlefield) { Arrays.fill(row, WATER); } } public boolean isHit(char row, int col) { return salvoStatus(row, col) == SHIP; } public boolean isMiss(char row, int col) { return salvoStatus(row, col) == WATER; } public void placePiece(char row, int col, char result) { battlefield[row - 65][col - 1] = result; } private char salvoStatus(char row, int col) { return battlefield[row - 65][col - 1]; } public void printBattlefield(boolean isWartime) { System.out.print(\"\\n \"); for (int i = 1; i <= 10; i++){ System.out.print(i + \" \"); } int row = 0; for (char ch = 'A'; ch <= 'J'; ch++){ System.out.print(\"\\n\" + ch + \" \"); for (char position : battlefield[row]) { if (isWartime && position == SHIP) System.out.print(WATER + \" \"); else System.out.print(position + \" \"); } row++; } System.out.println(\"\\n\"); } public int isCorrectCoordinates(char roF, char roS, int coF, int coS, Ship s) { if (roF > 'J' || roF < 'A' || roS > 'J' || roS < 'A') { return OUT_OF_BOARD; } else if (coF > 10 || coF < 1 || coS > 10 || coS < 1) { return OUT_OF_BOARD; } if (s != null) { if (roF != roS && coF != coS) { return MISALIGN; } else if (roF == roS) { if (Math.abs(coF - coS) + 1 != s.getShipLength()) { return WRONG_LENGTH; } } else { if (Math.abs(roF - roS) + 1 != s.getShipLength()) { return WRONG_LENGTH; } } if (isCrossing(roF, roS, coF, coS)) { return CROSSING; } else if (isTouching(roF, roS, coF, coS)) { return TOUCHING; } } return VALID_COORD; } public boolean isCrossing(char roF, char roS, int coF, int coS) { for (int i = roF - 65; i <= roS - 65; i++) { for (int j = coF - 1; j <= coS - 1; j++) { if (battlefield[i][j] == SHIP) { return true; } } } return false; } public boolean isTouching(char roF, char roS, int coF, int coS) { boolean touch = false; for (int i = roF - 65; i <= roS - 65; i++) { for (int j = coF - 1; j <= coS - 1; j++) { if (roF == roS) { if (coF - 2 >= 0) touch = battlefield[roF - 65][coF - 2] == SHIP; if (coS <= 9) touch = battlefield[roF - 65][coS] == SHIP || touch; if (roF - 66 >= 0) touch = battlefield[roF - 66][j] == SHIP || touch; if (roS - 64 <= 9) touch = battlefield[roS - 64][j] == SHIP || touch; } else { if (roF - 66 >= 0) touch = battlefield[roF - 66][coF - 1] == SHIP; if (roS - 64 <= 9) touch = battlefield[roS - 64][coF - 1] == SHIP || touch; if (coF - 2 >= 0) touch = battlefield[i][coF - 2] == SHIP || touch; if (coS <= 9) touch = battlefield[i][coS] == SHIP || touch; } if (touch) { return true; } } } return false; } public static void analyzeErrorInPlacement(int errorOut) { switch (errorOut) { case TOUCHING -> System.out.print(\"You placed the ships too close to each other\"); case CROSSING -> System.out.print(\"Your ship cannot cross another ship\"); case OUT_OF_BOARD -> System.out.print(\"The row coordinates must be between A and J and \" + \"the column coordinates must be between 1 and 10\"); case MISALIGN -> System.out.print(\"The placement is not aligned horizontally or vertically\"); case WRONG_LENGTH -> System.out.print(\"Your placement has wrong length\"); } System.out.println(\". Try again!\"); } }"}]}}
{"project_id":282,"chunk_id":0,"content":{"main_file_path":"Battleship-Game-Engine-main/Players/Player.java","main_file_content":"package Players; import Services.Battlefield; import Services.Ship; import java.util.ArrayList; public abstract class Player { protected String name; public Battlefield arena; protected ArrayList<Ship> ships; private static final String TRAPDOOR = \"2187AA23\"; public Player() { this(\"Luke Skywalker\"); } public Player(String name) { this.name = name; arena = new Battlefield(); ships = new ArrayList<>(); ships.add(new Ship(\"Aircraft Carrier\", 5)); ships.add(new Ship(\"Battleship\", 4)); ships.add(new Ship(\"Cruiser\", 3)); ships.add(new Ship(\"Submarine\", 3)); ships.add(new Ship(\"Destroyer\", 2)); } public String getName() { return name; } public static String trapdoorFilter(String input) { if (input.equals(TRAPDOOR)) { System.exit(0); } return input; } public abstract void placeShip(int shipIndex); public abstract String fireASalvo(); public boolean isNavySunken() { return ships.isEmpty(); } public abstract void manageShipHit(char row, int col); }","dependencies":[{"file_path":"Battleship-Game-Engine-main/Battleship-Game-Engine-main/Services/Battlefield.java","file_content":"package Services; import java.util.Arrays; public class Battlefield { private final char[][] battlefield; public final char WATER; public final char HIT; public final char MISS; public final char SHIP; public static final int VALID_COORD = 0x0F; private static final int TOUCHING = 0x1C; private static final int CROSSING = 0xAF; private static final int OUT_OF_BOARD = 0xBD; private static final int WRONG_LENGTH = 0xFF; private static final int MISALIGN = 0x4E; public Battlefield() { this('X', 'M', '~', '0'); } public Battlefield(char HIT, char MISS, char WATER, char SHIP) { battlefield = new char[10][10]; this.HIT = HIT; this.MISS = MISS; this.WATER = WATER; this.SHIP = SHIP; for (char[] row : battlefield) { Arrays.fill(row, WATER); } } public boolean isHit(char row, int col) { return salvoStatus(row, col) == SHIP; } public boolean isMiss(char row, int col) { return salvoStatus(row, col) == WATER; } public void placePiece(char row, int col, char result) { battlefield[row - 65][col - 1] = result; } private char salvoStatus(char row, int col) { return battlefield[row - 65][col - 1]; } public void printBattlefield(boolean isWartime) { System.out.print(\"\\n \"); for (int i = 1; i <= 10; i++){ System.out.print(i + \" \"); } int row = 0; for (char ch = 'A'; ch <= 'J'; ch++){ System.out.print(\"\\n\" + ch + \" \"); for (char position : battlefield[row]) { if (isWartime && position == SHIP) System.out.print(WATER + \" \"); else System.out.print(position + \" \"); } row++; } System.out.println(\"\\n\"); } public int isCorrectCoordinates(char roF, char roS, int coF, int coS, Ship s) { if (roF > 'J' || roF < 'A' || roS > 'J' || roS < 'A') { return OUT_OF_BOARD; } else if (coF > 10 || coF < 1 || coS > 10 || coS < 1) { return OUT_OF_BOARD; } if (s != null) { if (roF != roS && coF != coS) { return MISALIGN; } else if (roF == roS) { if (Math.abs(coF - coS) + 1 != s.getShipLength()) { return WRONG_LENGTH; } } else { if (Math.abs(roF - roS) + 1 != s.getShipLength()) { return WRONG_LENGTH; } } if (isCrossing(roF, roS, coF, coS)) { return CROSSING; } else if (isTouching(roF, roS, coF, coS)) { return TOUCHING; } } return VALID_COORD; } public boolean isCrossing(char roF, char roS, int coF, int coS) { for (int i = roF - 65; i <= roS - 65; i++) { for (int j = coF - 1; j <= coS - 1; j++) { if (battlefield[i][j] == SHIP) { return true; } } } return false; } public boolean isTouching(char roF, char roS, int coF, int coS) { boolean touch = false; for (int i = roF - 65; i <= roS - 65; i++) { for (int j = coF - 1; j <= coS - 1; j++) { if (roF == roS) { if (coF - 2 >= 0) touch = battlefield[roF - 65][coF - 2] == SHIP; if (coS <= 9) touch = battlefield[roF - 65][coS] == SHIP || touch; if (roF - 66 >= 0) touch = battlefield[roF - 66][j] == SHIP || touch; if (roS - 64 <= 9) touch = battlefield[roS - 64][j] == SHIP || touch; } else { if (roF - 66 >= 0) touch = battlefield[roF - 66][coF - 1] == SHIP; if (roS - 64 <= 9) touch = battlefield[roS - 64][coF - 1] == SHIP || touch; if (coF - 2 >= 0) touch = battlefield[i][coF - 2] == SHIP || touch; if (coS <= 9) touch = battlefield[i][coS] == SHIP || touch; } if (touch) { return true; } } } return false; } public static void analyzeErrorInPlacement(int errorOut) { switch (errorOut) { case TOUCHING -> System.out.print(\"You placed the ships too close to each other\"); case CROSSING -> System.out.print(\"Your ship cannot cross another ship\"); case OUT_OF_BOARD -> System.out.print(\"The row coordinates must be between A and J and \" + \"the column coordinates must be between 1 and 10\"); case MISALIGN -> System.out.print(\"The placement is not aligned horizontally or vertically\"); case WRONG_LENGTH -> System.out.print(\"Your placement has wrong length\"); } System.out.println(\". Try again!\"); } }"},{"file_path":"Battleship-Game-Engine-main/Battleship-Game-Engine-main/Services/Ship.java","file_content":"package Services; import java.util.ArrayList; public class Ship { public static final int NO_OF_SHIPS = 5; public String shipName; public int shipLength; private final ArrayList<String> position; public Ship(String name, int length) { this.shipName = name; this.shipLength = length; position = new ArrayList<>(); } public String getShipName() { return shipName; } public int getShipLength() { return shipLength; } public void storeShipPlacement(char roF, char roS, int coF, int coS) { if (roF == roS) { for (;coF <= coS; coF++) { position.add(roF + \"\" + coF); } } else { for (; roF <= roS; roF++) { position.add(roF + \"\" + coF); } } } public boolean isPartOfShip(char row, int col) { return position.contains(row + \"\" + col); } public void removeShipPartAndReport(char row, int col) { position.remove(row + \"\" + col); } public boolean isShipSunken() { return position.isEmpty(); } }"}]}}
{"project_id":282,"chunk_id":0,"content":{"main_file_path":"Battleship-Game-Engine-main/Services/Battlefield.java","main_file_content":"package Services; import java.util.Arrays; public class Battlefield { private final char[][] battlefield; public final char WATER; public final char HIT; public final char MISS; public final char SHIP; public static final int VALID_COORD = 0x0F; private static final int TOUCHING = 0x1C; private static final int CROSSING = 0xAF; private static final int OUT_OF_BOARD = 0xBD; private static final int WRONG_LENGTH = 0xFF; private static final int MISALIGN = 0x4E; public Battlefield() { this('X', 'M', '~', '0'); } public Battlefield(char HIT, char MISS, char WATER, char SHIP) { battlefield = new char[10][10]; this.HIT = HIT; this.MISS = MISS; this.WATER = WATER; this.SHIP = SHIP; for (char[] row : battlefield) { Arrays.fill(row, WATER); } } public boolean isHit(char row, int col) { return salvoStatus(row, col) == SHIP; } public boolean isMiss(char row, int col) { return salvoStatus(row, col) == WATER; } public void placePiece(char row, int col, char result) { battlefield[row - 65][col - 1] = result; } private char salvoStatus(char row, int col) { return battlefield[row - 65][col - 1]; } public void printBattlefield(boolean isWartime) { System.out.print(\"\\n \"); for (int i = 1; i <= 10; i++){ System.out.print(i + \" \"); } int row = 0; for (char ch = 'A'; ch <= 'J'; ch++){ System.out.print(\"\\n\" + ch + \" \"); for (char position : battlefield[row]) { if (isWartime && position == SHIP) System.out.print(WATER + \" \"); else System.out.print(position + \" \"); } row++; } System.out.println(\"\\n\"); } public int isCorrectCoordinates(char roF, char roS, int coF, int coS, Ship s) { if (roF > 'J' || roF < 'A' || roS > 'J' || roS < 'A') { return OUT_OF_BOARD; } else if (coF > 10 || coF < 1 || coS > 10 || coS < 1) { return OUT_OF_BOARD; } if (s != null) { if (roF != roS && coF != coS) { return MISALIGN; } else if (roF == roS) { if (Math.abs(coF - coS) + 1 != s.getShipLength()) { return WRONG_LENGTH; } } else { if (Math.abs(roF - roS) + 1 != s.getShipLength()) { return WRONG_LENGTH; } } if (isCrossing(roF, roS, coF, coS)) { return CROSSING; } else if (isTouching(roF, roS, coF, coS)) { return TOUCHING; } } return VALID_COORD; } public boolean isCrossing(char roF, char roS, int coF, int coS) { for (int i = roF - 65; i <= roS - 65; i++) { for (int j = coF - 1; j <= coS - 1; j++) { if (battlefield[i][j] == SHIP) { return true; } } } return false; } public boolean isTouching(char roF, char roS, int coF, int coS) { boolean touch = false; for (int i = roF - 65; i <= roS - 65; i++) { for (int j = coF - 1; j <= coS - 1; j++) { if (roF == roS) { if (coF - 2 >= 0) touch = battlefield[roF - 65][coF - 2] == SHIP; if (coS <= 9) touch = battlefield[roF - 65][coS] == SHIP || touch; if (roF - 66 >= 0) touch = battlefield[roF - 66][j] == SHIP || touch; if (roS - 64 <= 9) touch = battlefield[roS - 64][j] == SHIP || touch; } else { if (roF - 66 >= 0) touch = battlefield[roF - 66][coF - 1] == SHIP; if (roS - 64 <= 9) touch = battlefield[roS - 64][coF - 1] == SHIP || touch; if (coF - 2 >= 0) touch = battlefield[i][coF - 2] == SHIP || touch; if (coS <= 9) touch = battlefield[i][coS] == SHIP || touch; } if (touch) { return true; } } } return false; } public static void analyzeErrorInPlacement(int errorOut) { switch (errorOut) { case TOUCHING -> System.out.print(\"You placed the ships too close to each other\"); case CROSSING -> System.out.print(\"Your ship cannot cross another ship\"); case OUT_OF_BOARD -> System.out.print(\"The row coordinates must be between A and J and \" + \"the column coordinates must be between 1 and 10\"); case MISALIGN -> System.out.print(\"The placement is not aligned horizontally or vertically\"); case WRONG_LENGTH -> System.out.print(\"Your placement has wrong length\"); } System.out.println(\". Try again!\"); } }","dependencies":[{"file_path":"Battleship-Game-Engine-main/Battleship-Game-Engine-main/Services/Ship.java","file_content":"package Services; import java.util.ArrayList; public class Ship { public static final int NO_OF_SHIPS = 5; public String shipName; public int shipLength; private final ArrayList<String> position; public Ship(String name, int length) { this.shipName = name; this.shipLength = length; position = new ArrayList<>(); } public String getShipName() { return shipName; } public int getShipLength() { return shipLength; } public void storeShipPlacement(char roF, char roS, int coF, int coS) { if (roF == roS) { for (;coF <= coS; coF++) { position.add(roF + \"\" + coF); } } else { for (; roF <= roS; roF++) { position.add(roF + \"\" + coF); } } } public boolean isPartOfShip(char row, int col) { return position.contains(row + \"\" + col); } public void removeShipPartAndReport(char row, int col) { position.remove(row + \"\" + col); } public boolean isShipSunken() { return position.isEmpty(); } }"}]}}
{"project_id":282,"chunk_id":0,"content":{"main_file_path":"Battleship-Game-Engine-main/Services/Ship.java","main_file_content":"package Services; import java.util.ArrayList; public class Ship { public static final int NO_OF_SHIPS = 5; public String shipName; public int shipLength; private final ArrayList<String> position; public Ship(String name, int length) { this.shipName = name; this.shipLength = length; position = new ArrayList<>(); } public String getShipName() { return shipName; } public int getShipLength() { return shipLength; } public void storeShipPlacement(char roF, char roS, int coF, int coS) { if (roF == roS) { for (;coF <= coS; coF++) { position.add(roF + \"\" + coF); } } else { for (; roF <= roS; roF++) { position.add(roF + \"\" + coF); } } } public boolean isPartOfShip(char row, int col) { return position.contains(row + \"\" + col); } public void removeShipPartAndReport(char row, int col) { position.remove(row + \"\" + col); } public boolean isShipSunken() { return position.isEmpty(); } }","dependencies":[]}}
{"project_id":282,"chunk_id":0,"content":{"main_file_path":"Battleship-Game-Engine-main/Battleship-Game-Engine-main/Main.java","main_file_content":"import Players.*; import Players.Engines.*; import Services.Ship; import java.util.Scanner; import static java.util.stream.IntStream.range; public class Main { public static void main(String[] args) { Scanner txt = new Scanner(System.in), setup = new Scanner(System.in); Human player1; BattleshipEngine player2 = null; System.out.println(\"\\nWhat would you like to do?\\n\\t[s]tart\\n\\te[x]it\"); char action = txt.next().toLowerCase().charAt(0); switch (action) { case 'x' : System.exit(0); break; case 's': break; default: main(new String[]{}); } System.out.print(\"\\nEnter your name : \"); String humanName = setup.nextLine(); player1 = new Human(humanName); char engine; do { System.out.println(\"\\nWhat engine would you like to play against?\"); System.out.println(\"\\t[N]aive-Solver (Easy)\\n\\t[I]ntermediate-Solver (Medium) \\n\\t[B]oogeyman (Crazy)\"); engine = txt.next().toUpperCase().trim().charAt(0); switch (engine) { case 'N' : player2 = new NaiveSolver(); break; case 'I': player2 = new IntermediateAdversary(); break; case 'B' : player2 = new Boogeyman(); break; default: System.out.println(\"Type in one of the letters : N,I or B\"); continue; } break; } while (engine != 'N' || engine != 'I' || engine != 'B'); System.out.println(\"\\nPlayer 1, place your ships on the game field\\n\"); player1.arena.printBattlefield(false); for (int i = 0; i < Ship.NO_OF_SHIPS; i++) { player1.placeShip(i); player1.arena.printBattlefield(false); } promptEnterKey(); System.out.println(\"\\nKindly wait while the machine places its ships\"); for (int i = 0; i < Ship.NO_OF_SHIPS; i++) { assert player2 != null; player2.placeShip(i); } System.out.println(\"\\nThe machine has completed placing its ships!\\n\"); player2.arena.printBattlefield(false); promptEnterKey(); System.out.println(\"The game starts!\"); boolean didP1Win = false; String shot; char shotRow; int shotCol; while (true) { player2.arena.printBattlefield(true); printDivider(); player1.arena.printBattlefield(false); shot = player1.fireASalvo(); shotRow = shot.charAt(0); shotCol = Integer.parseInt(shot.substring(1)); if (player2.arena.isHit(shotRow, shotCol)) { player2.manageShipHit(shotRow, shotCol); } else if (player2.arena.isMiss(shotRow, shotCol)) { player2.arena.placePiece(shotRow, shotCol, player2.arena.MISS); System.out.println(\"You missed! Try again next turn\"); } if (player2.isNavySunken()) { didP1Win = true; break; } System.out.println(\"\\nPlease wait while the engine makes its move\"); shot = player2.fireASalvo(); shotRow = shot.charAt(0); shotCol = Integer.parseInt(shot.substring(1)); if (player1.arena.isHit(shotRow, shotCol) ) { player1.manageShipHit(shotRow, shotCol); } else if (player1.arena.isMiss(shotRow, shotCol)) { player1.arena.placePiece(shotRow, shotCol, player2.arena.MISS); System.out.println(\"The engine fired at \" + shot + \" and missed.\"); } if (player1.isNavySunken()) { break; } } System.out.println(\"You sank the last ship. You won. Congratulations!\"); if (didP1Win) System.out.printf(\"Congrats %s, you have won this game of Battleship!\", humanName); else System.out.printf(\"The %s Engine won this game of Battleship!\", player2.getName()); } private static void promptEnterKey() { System.out.println(\"Press Enter for the next step\"); new Scanner(System.in).nextLine(); clearScreen(); } private static void clearScreen() { range(0, 25).forEach(i -> System.out.println()); } protected static void printDivider() { for (int i = 1; i <= 20; i++) { System.out.print(\"-\"); } } }","dependencies":[{"file_path":"Battleship-Game-Engine-main/Battleship-Game-Engine-main/Players/Human.java","file_content":"package Players; import Services.Battlefield; import java.util.Scanner; public class Human extends Player { public Human() { super(); } public Human(String name) { super(name); } @Override public void placeShip(int shipIndex) throws NumberFormatException { Scanner sc; System.out.println(\"\\nEnter the coordinates for \" + ships.get(shipIndex).getShipName() + \" (\" + ships.get(shipIndex).getShipLength() + \" cells): \"); while (true) { sc = new Scanner(System.in); String firstCoordinate = trapdoorFilter(sc.next().toUpperCase()); String secondCoordinate = trapdoorFilter(sc.next().toUpperCase()); char rowOfFirst = firstCoordinate.charAt(0); char rowOfSecond = secondCoordinate.charAt(0); int columnOfFirst = Integer.parseInt(firstCoordinate.substring(1)); int columnOfSecond = Integer.parseInt(secondCoordinate.substring(1)); int temp = Math.max(columnOfFirst, columnOfSecond); columnOfFirst = Math.min(columnOfFirst, columnOfSecond); columnOfSecond = temp; temp = Math.max(rowOfFirst, rowOfSecond); rowOfFirst = (char) Math.min(rowOfFirst, rowOfSecond); rowOfSecond = (char) temp; int placementRes = arena.isCorrectCoordinates(rowOfFirst, rowOfSecond, columnOfFirst, columnOfSecond, ships.get(shipIndex)); if (placementRes != Battlefield.VALID_COORD) { System.out.print(\"\\nError! \"); Battlefield.analyzeErrorInPlacement(placementRes); continue; } for (char i = rowOfFirst; i <= rowOfSecond; i++) { for (int j = columnOfFirst; j <= columnOfSecond; j++) { arena.placePiece(i, j, arena.SHIP); } } ships.get(shipIndex).storeShipPlacement(rowOfFirst, rowOfSecond, columnOfFirst, columnOfSecond); break; } } @Override public String fireASalvo() { Scanner num = new Scanner(System.in); String firingPos; while (true) { System.out.print(\"\\n\" + name + \", enter the firing position : \"); firingPos = trapdoorFilter(num.next().toUpperCase().trim()); char rowCoord = firingPos.charAt(0); int columnCoord = Integer.parseInt(firingPos.substring(1)); int placementRes = arena.isCorrectCoordinates(rowCoord, 'A', columnCoord, 9, null); if (placementRes != Battlefield.VALID_COORD) { System.out.println(\"Error! \"); Battlefield.analyzeErrorInPlacement(placementRes); continue; } break; } return firingPos; } @Override public void manageShipHit(char row, int col) { arena.placePiece(row, col, arena.HIT); int length = ships.size(); for (int i = 0; i < length; i++) { if (!ships.get(i).isPartOfShip(row, col)) continue; ships.get(i).removeShipPartAndReport(row, col); if (ships.get(i).isShipSunken()) { System.out.println(\"The engine has sunken your \" + ships.get(i).getShipName() +\" at \" + row + \"\" + col +\". Make them pay!\"); ships.remove(i); } else { System.out.println(\"The engine has hit your \" + ships.get(i).getShipName() +\" at \" + row + \"\" + col + \". Fire back!\"); } break; } } }"},{"file_path":"Battleship-Game-Engine-main/Players/Engines/BattleshipEngine.java","file_content":"package Players.Engines; import Players.Player; import java.util.Random; public abstract class BattleshipEngine extends Player { Random rng; protected String generateRandomMapCoordinates() { rng = new Random((int)(1 * 10000 * Math.random())); char row = (char) (rng.nextInt(10) + 'A'); int col = 1 + rng.nextInt(10); return row + \"\" + col; } @Override public void manageShipHit(char row, int col) { arena.placePiece(row, col, arena.HIT); int length = ships.size(); for (int i = 0; i < length; i++) { if (!ships.get(i).isPartOfShip(row, col)) continue; ships.get(i).removeShipPartAndReport(row, col); if (ships.get(i).isShipSunken()) { System.out.println(\"You sank a ship!\"); ships.remove(i); } else { System.out.println(\"You hit a ship!\"); } break; } } }"},{"file_path":"Battleship-Game-Engine-main/Players/Engines/Boogeyman.java","file_content":"package Players.Engines; public class Boogeyman extends BattleshipEngine { @Override public void placeShip(int shipIndex) { } @Override public String fireASalvo() { return null; } }"},{"file_path":"Battleship-Game-Engine-main/Players/Engines/IntermediateAdversary.java","file_content":"package Players.Engines; import java.util.ArrayList; import java.util.Random; import java.util.Stack; public class IntermediateAdversary extends NaiveSolver { private boolean IS_TARGETING; private ArrayList<Integer> targets; private ArrayList<Integer> hunts; private Stack<Integer> targetsFired; private String previousShot; public IntermediateAdversary() { this.name = \"In\"; IS_TARGETING = false; rng = new Random(); targets = new ArrayList<>(); hunts = new ArrayList<>(); targetsFired = new Stack<>(); } private int encode(String coordinates) { char row = coordinates.charAt(0); int column = Integer.parseInt(coordinates.substring(1)); return (row - 'A') * 10 + column - 1; } private String decode(int encodedCoord) { char row = (char) (encodedCoord / 10 + 'A'); int column = encodedCoord % 10 + 1; return row + \"\" + column; } @Override public String fireASalvo() { String target; if (IS_TARGETING) { target = null; } else { target = huntSquares(); } return null; } @Override public void manageShipHit(char row, int col) { arena.placePiece(row, col, arena.HIT); int length = ships.size(); for (int i = 0; i < length; i++) { if (!ships.get(i).isPartOfShip(row, col)) continue; ships.get(i).removeShipPartAndReport(row, col); if (ships.get(i).isShipSunken()) { System.out.println(\"You sank a ship!\"); ships.remove(i); IS_TARGETING = false; } else { System.out.println(\"You hit a ship!\"); IS_TARGETING = true; } break; } } private void createTargets(ArrayList<Integer> targets, ArrayList<Integer> hunts) { for (int i = 0; i < 100; i++) { targets.add(i); } for (int i = 1; i < 100; i+=2) { if (Math.floor((float) i / 10) % 2 == 0) { hunts.add(i); } else if (Math.floor((float) i / 10) % 2 == 1) { hunts.add(i - 1); } } } private String huntSquares() { String target; targetsFired.empty(); int randIndex, randHuntSqaure; if (!hunts.isEmpty()) { randIndex = rng.nextInt(hunts.size()); } else { randIndex = rng.nextInt(targets.size()); } randHuntSqaure = hunts.get(randIndex); target = decode(randHuntSqaure); hunts.remove(randHuntSqaure); targets.remove(randHuntSqaure); return target; } private String targetShip(String previousShot, boolean isHit) { String target; int startingTarget = encode(previousShot); int north = startingTarget - 10; int south = startingTarget + 10; int east = startingTarget + 1; int west = startingTarget - 1; if (targets.contains(north) && targetsFired.contains(north)) { targetsFired.push(north); } else if (targets.contains(south) && targetsFired.contains(south)) { targetsFired.push(south); } else if (targets.contains(east) && targetsFired.contains(east)) { targetsFired.push(east); } else if (targets.contains(west) && targetsFired.contains(west)) { targetsFired.push(west); } if (targetsFired.isEmpty()) { return huntSquares(); } int coordinateToFireAt = targetsFired.pop(); if (hunts.contains(coordinateToFireAt)) { hunts.remove(hunts.get(coordinateToFireAt)); } target = decode(coordinateToFireAt); return target; } }"},{"file_path":"Battleship-Game-Engine-main/Players/Engines/NaiveSolver.java","file_content":"package Players.Engines; import Services.Battlefield; public class NaiveSolver extends BattleshipEngine { @Override public void placeShip(int shipIndex) { String startingPosition = generateRandomMapCoordinates(); char rowStart = startingPosition.charAt(0); int colStart = Integer.parseInt(startingPosition.substring(1)); int horizontalOrVertical = (int) Math.round(Math.random()); int NEorSW = (int) Math.round(Math.random()); int placementRes; if (horizontalOrVertical == 0) { if (NEorSW == 0 && colStart - ships.get(shipIndex).getShipLength() + 1 >= 1) { placementRes = arena.isCorrectCoordinates(rowStart, rowStart, colStart - ships.get(shipIndex).getShipLength() + 1, colStart, ships.get(shipIndex)); if (placementRes == Battlefield.VALID_COORD) { for (int i = colStart - ships.get(shipIndex).getShipLength() + 1; i <= colStart; i++) { arena.placePiece(rowStart, i, arena.SHIP); } ships.get(shipIndex).storeShipPlacement(rowStart, rowStart, colStart - ships.get(shipIndex).getShipLength() + 1, colStart); return; } } else if (NEorSW == 1 && colStart + ships.get(shipIndex).getShipLength() - 1 <= 10) { placementRes = arena.isCorrectCoordinates(rowStart, rowStart, colStart, colStart + ships.get(shipIndex).getShipLength() - 1, ships.get(shipIndex)); if (placementRes == Battlefield.VALID_COORD) { for (int i = colStart; i <= colStart + ships.get(shipIndex).getShipLength() - 1; i++) { arena.placePiece(rowStart, i, arena.SHIP); } ships.get(shipIndex).storeShipPlacement(rowStart, rowStart, colStart, colStart + ships.get(shipIndex).getShipLength() - 1); return; } } placeShip(shipIndex); } else { if (NEorSW == 0 && rowStart - ships.get(shipIndex).getShipLength() + 1 >= 'A') { placementRes = arena.isCorrectCoordinates((char) (rowStart - ships.get(shipIndex).getShipLength() + 1), rowStart, colStart, colStart, ships.get(shipIndex)); if (placementRes == Battlefield.VALID_COORD) { for (char i = (char) (rowStart - ships.get(shipIndex).getShipLength() + 1); i <= rowStart; i++) { arena.placePiece(i, colStart, arena.SHIP); } ships.get(shipIndex).storeShipPlacement((char) (rowStart - ships.get(shipIndex).getShipLength() + 1), rowStart, colStart, colStart); return; } } else if (NEorSW == 1 && rowStart + ships.get(shipIndex).getShipLength() - 1 <= 'J') { placementRes = arena.isCorrectCoordinates(rowStart, (char) (rowStart + ships.get(shipIndex).getShipLength() - 1), colStart, colStart, ships.get(shipIndex)); if (placementRes == Battlefield.VALID_COORD) { for (char i = rowStart; i <= rowStart + ships.get(shipIndex).getShipLength() - 1; i++) { arena.placePiece(i, colStart, arena.SHIP); } ships.get(shipIndex).storeShipPlacement(rowStart, (char) (rowStart + ships.get(shipIndex).getShipLength() - 1) , colStart, colStart); return; } } placeShip(shipIndex); } } @Override public String fireASalvo() { return generateRandomMapCoordinates(); } }"}]}}
{"project_id":282,"chunk_id":0,"content":{"main_file_path":"Battleship-Game-Engine-main/Battleship-Game-Engine-main/Players/Human.java","main_file_content":"package Players; import Services.Battlefield; import java.util.Scanner; public class Human extends Player { public Human() { super(); } public Human(String name) { super(name); } @Override public void placeShip(int shipIndex) throws NumberFormatException { Scanner sc; System.out.println(\"\\nEnter the coordinates for \" + ships.get(shipIndex).getShipName() + \" (\" + ships.get(shipIndex).getShipLength() + \" cells): \"); while (true) { sc = new Scanner(System.in); String firstCoordinate = trapdoorFilter(sc.next().toUpperCase()); String secondCoordinate = trapdoorFilter(sc.next().toUpperCase()); char rowOfFirst = firstCoordinate.charAt(0); char rowOfSecond = secondCoordinate.charAt(0); int columnOfFirst = Integer.parseInt(firstCoordinate.substring(1)); int columnOfSecond = Integer.parseInt(secondCoordinate.substring(1)); int temp = Math.max(columnOfFirst, columnOfSecond); columnOfFirst = Math.min(columnOfFirst, columnOfSecond); columnOfSecond = temp; temp = Math.max(rowOfFirst, rowOfSecond); rowOfFirst = (char) Math.min(rowOfFirst, rowOfSecond); rowOfSecond = (char) temp; int placementRes = arena.isCorrectCoordinates(rowOfFirst, rowOfSecond, columnOfFirst, columnOfSecond, ships.get(shipIndex)); if (placementRes != Battlefield.VALID_COORD) { System.out.print(\"\\nError! \"); Battlefield.analyzeErrorInPlacement(placementRes); continue; } for (char i = rowOfFirst; i <= rowOfSecond; i++) { for (int j = columnOfFirst; j <= columnOfSecond; j++) { arena.placePiece(i, j, arena.SHIP); } } ships.get(shipIndex).storeShipPlacement(rowOfFirst, rowOfSecond, columnOfFirst, columnOfSecond); break; } } @Override public String fireASalvo() { Scanner num = new Scanner(System.in); String firingPos; while (true) { System.out.print(\"\\n\" + name + \", enter the firing position : \"); firingPos = trapdoorFilter(num.next().toUpperCase().trim()); char rowCoord = firingPos.charAt(0); int columnCoord = Integer.parseInt(firingPos.substring(1)); int placementRes = arena.isCorrectCoordinates(rowCoord, 'A', columnCoord, 9, null); if (placementRes != Battlefield.VALID_COORD) { System.out.println(\"Error! \"); Battlefield.analyzeErrorInPlacement(placementRes); continue; } break; } return firingPos; } @Override public void manageShipHit(char row, int col) { arena.placePiece(row, col, arena.HIT); int length = ships.size(); for (int i = 0; i < length; i++) { if (!ships.get(i).isPartOfShip(row, col)) continue; ships.get(i).removeShipPartAndReport(row, col); if (ships.get(i).isShipSunken()) { System.out.println(\"The engine has sunken your \" + ships.get(i).getShipName() +\" at \" + row + \"\" + col +\". Make them pay!\"); ships.remove(i); } else { System.out.println(\"The engine has hit your \" + ships.get(i).getShipName() +\" at \" + row + \"\" + col + \". Fire back!\"); } break; } } }","dependencies":[{"file_path":"Battleship-Game-Engine-main/Battleship-Game-Engine-main/Players/Player.java","file_content":"package Players; import Services.Battlefield; import Services.Ship; import java.util.ArrayList; public abstract class Player { protected String name; public Battlefield arena; protected ArrayList<Ship> ships; private static final String TRAPDOOR = \"2187AA23\"; public Player() { this(\"Luke Skywalker\"); } public Player(String name) { this.name = name; arena = new Battlefield(); ships = new ArrayList<>(); ships.add(new Ship(\"Aircraft Carrier\", 5)); ships.add(new Ship(\"Battleship\", 4)); ships.add(new Ship(\"Cruiser\", 3)); ships.add(new Ship(\"Submarine\", 3)); ships.add(new Ship(\"Destroyer\", 2)); } public String getName() { return name; } public static String trapdoorFilter(String input) { if (input.equals(TRAPDOOR)) { System.exit(0); } return input; } public abstract void placeShip(int shipIndex); public abstract String fireASalvo(); public boolean isNavySunken() { return ships.isEmpty(); } public abstract void manageShipHit(char row, int col); }"},{"file_path":"Battleship-Game-Engine-main/Battleship-Game-Engine-main/Services/Battlefield.java","file_content":"package Services; import java.util.Arrays; public class Battlefield { private final char[][] battlefield; public final char WATER; public final char HIT; public final char MISS; public final char SHIP; public static final int VALID_COORD = 0x0F; private static final int TOUCHING = 0x1C; private static final int CROSSING = 0xAF; private static final int OUT_OF_BOARD = 0xBD; private static final int WRONG_LENGTH = 0xFF; private static final int MISALIGN = 0x4E; public Battlefield() { this('X', 'M', '~', '0'); } public Battlefield(char HIT, char MISS, char WATER, char SHIP) { battlefield = new char[10][10]; this.HIT = HIT; this.MISS = MISS; this.WATER = WATER; this.SHIP = SHIP; for (char[] row : battlefield) { Arrays.fill(row, WATER); } } public boolean isHit(char row, int col) { return salvoStatus(row, col) == SHIP; } public boolean isMiss(char row, int col) { return salvoStatus(row, col) == WATER; } public void placePiece(char row, int col, char result) { battlefield[row - 65][col - 1] = result; } private char salvoStatus(char row, int col) { return battlefield[row - 65][col - 1]; } public void printBattlefield(boolean isWartime) { System.out.print(\"\\n \"); for (int i = 1; i <= 10; i++){ System.out.print(i + \" \"); } int row = 0; for (char ch = 'A'; ch <= 'J'; ch++){ System.out.print(\"\\n\" + ch + \" \"); for (char position : battlefield[row]) { if (isWartime && position == SHIP) System.out.print(WATER + \" \"); else System.out.print(position + \" \"); } row++; } System.out.println(\"\\n\"); } public int isCorrectCoordinates(char roF, char roS, int coF, int coS, Ship s) { if (roF > 'J' || roF < 'A' || roS > 'J' || roS < 'A') { return OUT_OF_BOARD; } else if (coF > 10 || coF < 1 || coS > 10 || coS < 1) { return OUT_OF_BOARD; } if (s != null) { if (roF != roS && coF != coS) { return MISALIGN; } else if (roF == roS) { if (Math.abs(coF - coS) + 1 != s.getShipLength()) { return WRONG_LENGTH; } } else { if (Math.abs(roF - roS) + 1 != s.getShipLength()) { return WRONG_LENGTH; } } if (isCrossing(roF, roS, coF, coS)) { return CROSSING; } else if (isTouching(roF, roS, coF, coS)) { return TOUCHING; } } return VALID_COORD; } public boolean isCrossing(char roF, char roS, int coF, int coS) { for (int i = roF - 65; i <= roS - 65; i++) { for (int j = coF - 1; j <= coS - 1; j++) { if (battlefield[i][j] == SHIP) { return true; } } } return false; } public boolean isTouching(char roF, char roS, int coF, int coS) { boolean touch = false; for (int i = roF - 65; i <= roS - 65; i++) { for (int j = coF - 1; j <= coS - 1; j++) { if (roF == roS) { if (coF - 2 >= 0) touch = battlefield[roF - 65][coF - 2] == SHIP; if (coS <= 9) touch = battlefield[roF - 65][coS] == SHIP || touch; if (roF - 66 >= 0) touch = battlefield[roF - 66][j] == SHIP || touch; if (roS - 64 <= 9) touch = battlefield[roS - 64][j] == SHIP || touch; } else { if (roF - 66 >= 0) touch = battlefield[roF - 66][coF - 1] == SHIP; if (roS - 64 <= 9) touch = battlefield[roS - 64][coF - 1] == SHIP || touch; if (coF - 2 >= 0) touch = battlefield[i][coF - 2] == SHIP || touch; if (coS <= 9) touch = battlefield[i][coS] == SHIP || touch; } if (touch) { return true; } } } return false; } public static void analyzeErrorInPlacement(int errorOut) { switch (errorOut) { case TOUCHING -> System.out.print(\"You placed the ships too close to each other\"); case CROSSING -> System.out.print(\"Your ship cannot cross another ship\"); case OUT_OF_BOARD -> System.out.print(\"The row coordinates must be between A and J and \" + \"the column coordinates must be between 1 and 10\"); case MISALIGN -> System.out.print(\"The placement is not aligned horizontally or vertically\"); case WRONG_LENGTH -> System.out.print(\"Your placement has wrong length\"); } System.out.println(\". Try again!\"); } }"}]}}
{"project_id":282,"chunk_id":0,"content":{"main_file_path":"Battleship-Game-Engine-main/Battleship-Game-Engine-main/Players/Player.java","main_file_content":"package Players; import Services.Battlefield; import Services.Ship; import java.util.ArrayList; public abstract class Player { protected String name; public Battlefield arena; protected ArrayList<Ship> ships; private static final String TRAPDOOR = \"2187AA23\"; public Player() { this(\"Luke Skywalker\"); } public Player(String name) { this.name = name; arena = new Battlefield(); ships = new ArrayList<>(); ships.add(new Ship(\"Aircraft Carrier\", 5)); ships.add(new Ship(\"Battleship\", 4)); ships.add(new Ship(\"Cruiser\", 3)); ships.add(new Ship(\"Submarine\", 3)); ships.add(new Ship(\"Destroyer\", 2)); } public String getName() { return name; } public static String trapdoorFilter(String input) { if (input.equals(TRAPDOOR)) { System.exit(0); } return input; } public abstract void placeShip(int shipIndex); public abstract String fireASalvo(); public boolean isNavySunken() { return ships.isEmpty(); } public abstract void manageShipHit(char row, int col); }","dependencies":[{"file_path":"Battleship-Game-Engine-main/Battleship-Game-Engine-main/Services/Battlefield.java","file_content":"package Services; import java.util.Arrays; public class Battlefield { private final char[][] battlefield; public final char WATER; public final char HIT; public final char MISS; public final char SHIP; public static final int VALID_COORD = 0x0F; private static final int TOUCHING = 0x1C; private static final int CROSSING = 0xAF; private static final int OUT_OF_BOARD = 0xBD; private static final int WRONG_LENGTH = 0xFF; private static final int MISALIGN = 0x4E; public Battlefield() { this('X', 'M', '~', '0'); } public Battlefield(char HIT, char MISS, char WATER, char SHIP) { battlefield = new char[10][10]; this.HIT = HIT; this.MISS = MISS; this.WATER = WATER; this.SHIP = SHIP; for (char[] row : battlefield) { Arrays.fill(row, WATER); } } public boolean isHit(char row, int col) { return salvoStatus(row, col) == SHIP; } public boolean isMiss(char row, int col) { return salvoStatus(row, col) == WATER; } public void placePiece(char row, int col, char result) { battlefield[row - 65][col - 1] = result; } private char salvoStatus(char row, int col) { return battlefield[row - 65][col - 1]; } public void printBattlefield(boolean isWartime) { System.out.print(\"\\n \"); for (int i = 1; i <= 10; i++){ System.out.print(i + \" \"); } int row = 0; for (char ch = 'A'; ch <= 'J'; ch++){ System.out.print(\"\\n\" + ch + \" \"); for (char position : battlefield[row]) { if (isWartime && position == SHIP) System.out.print(WATER + \" \"); else System.out.print(position + \" \"); } row++; } System.out.println(\"\\n\"); } public int isCorrectCoordinates(char roF, char roS, int coF, int coS, Ship s) { if (roF > 'J' || roF < 'A' || roS > 'J' || roS < 'A') { return OUT_OF_BOARD; } else if (coF > 10 || coF < 1 || coS > 10 || coS < 1) { return OUT_OF_BOARD; } if (s != null) { if (roF != roS && coF != coS) { return MISALIGN; } else if (roF == roS) { if (Math.abs(coF - coS) + 1 != s.getShipLength()) { return WRONG_LENGTH; } } else { if (Math.abs(roF - roS) + 1 != s.getShipLength()) { return WRONG_LENGTH; } } if (isCrossing(roF, roS, coF, coS)) { return CROSSING; } else if (isTouching(roF, roS, coF, coS)) { return TOUCHING; } } return VALID_COORD; } public boolean isCrossing(char roF, char roS, int coF, int coS) { for (int i = roF - 65; i <= roS - 65; i++) { for (int j = coF - 1; j <= coS - 1; j++) { if (battlefield[i][j] == SHIP) { return true; } } } return false; } public boolean isTouching(char roF, char roS, int coF, int coS) { boolean touch = false; for (int i = roF - 65; i <= roS - 65; i++) { for (int j = coF - 1; j <= coS - 1; j++) { if (roF == roS) { if (coF - 2 >= 0) touch = battlefield[roF - 65][coF - 2] == SHIP; if (coS <= 9) touch = battlefield[roF - 65][coS] == SHIP || touch; if (roF - 66 >= 0) touch = battlefield[roF - 66][j] == SHIP || touch; if (roS - 64 <= 9) touch = battlefield[roS - 64][j] == SHIP || touch; } else { if (roF - 66 >= 0) touch = battlefield[roF - 66][coF - 1] == SHIP; if (roS - 64 <= 9) touch = battlefield[roS - 64][coF - 1] == SHIP || touch; if (coF - 2 >= 0) touch = battlefield[i][coF - 2] == SHIP || touch; if (coS <= 9) touch = battlefield[i][coS] == SHIP || touch; } if (touch) { return true; } } } return false; } public static void analyzeErrorInPlacement(int errorOut) { switch (errorOut) { case TOUCHING -> System.out.print(\"You placed the ships too close to each other\"); case CROSSING -> System.out.print(\"Your ship cannot cross another ship\"); case OUT_OF_BOARD -> System.out.print(\"The row coordinates must be between A and J and \" + \"the column coordinates must be between 1 and 10\"); case MISALIGN -> System.out.print(\"The placement is not aligned horizontally or vertically\"); case WRONG_LENGTH -> System.out.print(\"Your placement has wrong length\"); } System.out.println(\". Try again!\"); } }"},{"file_path":"Battleship-Game-Engine-main/Battleship-Game-Engine-main/Services/Ship.java","file_content":"package Services; import java.util.ArrayList; public class Ship { public static final int NO_OF_SHIPS = 5; public String shipName; public int shipLength; private final ArrayList<String> position; public Ship(String name, int length) { this.shipName = name; this.shipLength = length; position = new ArrayList<>(); } public String getShipName() { return shipName; } public int getShipLength() { return shipLength; } public void storeShipPlacement(char roF, char roS, int coF, int coS) { if (roF == roS) { for (;coF <= coS; coF++) { position.add(roF + \"\" + coF); } } else { for (; roF <= roS; roF++) { position.add(roF + \"\" + coF); } } } public boolean isPartOfShip(char row, int col) { return position.contains(row + \"\" + col); } public void removeShipPartAndReport(char row, int col) { position.remove(row + \"\" + col); } public boolean isShipSunken() { return position.isEmpty(); } }"}]}}
{"project_id":282,"chunk_id":0,"content":{"main_file_path":"Battleship-Game-Engine-main/Battleship-Game-Engine-main/Services/Battlefield.java","main_file_content":"package Services; import java.util.Arrays; public class Battlefield { private final char[][] battlefield; public final char WATER; public final char HIT; public final char MISS; public final char SHIP; public static final int VALID_COORD = 0x0F; private static final int TOUCHING = 0x1C; private static final int CROSSING = 0xAF; private static final int OUT_OF_BOARD = 0xBD; private static final int WRONG_LENGTH = 0xFF; private static final int MISALIGN = 0x4E; public Battlefield() { this('X', 'M', '~', '0'); } public Battlefield(char HIT, char MISS, char WATER, char SHIP) { battlefield = new char[10][10]; this.HIT = HIT; this.MISS = MISS; this.WATER = WATER; this.SHIP = SHIP; for (char[] row : battlefield) { Arrays.fill(row, WATER); } } public boolean isHit(char row, int col) { return salvoStatus(row, col) == SHIP; } public boolean isMiss(char row, int col) { return salvoStatus(row, col) == WATER; } public void placePiece(char row, int col, char result) { battlefield[row - 65][col - 1] = result; } private char salvoStatus(char row, int col) { return battlefield[row - 65][col - 1]; } public void printBattlefield(boolean isWartime) { System.out.print(\"\\n \"); for (int i = 1; i <= 10; i++){ System.out.print(i + \" \"); } int row = 0; for (char ch = 'A'; ch <= 'J'; ch++){ System.out.print(\"\\n\" + ch + \" \"); for (char position : battlefield[row]) { if (isWartime && position == SHIP) System.out.print(WATER + \" \"); else System.out.print(position + \" \"); } row++; } System.out.println(\"\\n\"); } public int isCorrectCoordinates(char roF, char roS, int coF, int coS, Ship s) { if (roF > 'J' || roF < 'A' || roS > 'J' || roS < 'A') { return OUT_OF_BOARD; } else if (coF > 10 || coF < 1 || coS > 10 || coS < 1) { return OUT_OF_BOARD; } if (s != null) { if (roF != roS && coF != coS) { return MISALIGN; } else if (roF == roS) { if (Math.abs(coF - coS) + 1 != s.getShipLength()) { return WRONG_LENGTH; } } else { if (Math.abs(roF - roS) + 1 != s.getShipLength()) { return WRONG_LENGTH; } } if (isCrossing(roF, roS, coF, coS)) { return CROSSING; } else if (isTouching(roF, roS, coF, coS)) { return TOUCHING; } } return VALID_COORD; } public boolean isCrossing(char roF, char roS, int coF, int coS) { for (int i = roF - 65; i <= roS - 65; i++) { for (int j = coF - 1; j <= coS - 1; j++) { if (battlefield[i][j] == SHIP) { return true; } } } return false; } public boolean isTouching(char roF, char roS, int coF, int coS) { boolean touch = false; for (int i = roF - 65; i <= roS - 65; i++) { for (int j = coF - 1; j <= coS - 1; j++) { if (roF == roS) { if (coF - 2 >= 0) touch = battlefield[roF - 65][coF - 2] == SHIP; if (coS <= 9) touch = battlefield[roF - 65][coS] == SHIP || touch; if (roF - 66 >= 0) touch = battlefield[roF - 66][j] == SHIP || touch; if (roS - 64 <= 9) touch = battlefield[roS - 64][j] == SHIP || touch; } else { if (roF - 66 >= 0) touch = battlefield[roF - 66][coF - 1] == SHIP; if (roS - 64 <= 9) touch = battlefield[roS - 64][coF - 1] == SHIP || touch; if (coF - 2 >= 0) touch = battlefield[i][coF - 2] == SHIP || touch; if (coS <= 9) touch = battlefield[i][coS] == SHIP || touch; } if (touch) { return true; } } } return false; } public static void analyzeErrorInPlacement(int errorOut) { switch (errorOut) { case TOUCHING -> System.out.print(\"You placed the ships too close to each other\"); case CROSSING -> System.out.print(\"Your ship cannot cross another ship\"); case OUT_OF_BOARD -> System.out.print(\"The row coordinates must be between A and J and \" + \"the column coordinates must be between 1 and 10\"); case MISALIGN -> System.out.print(\"The placement is not aligned horizontally or vertically\"); case WRONG_LENGTH -> System.out.print(\"Your placement has wrong length\"); } System.out.println(\". Try again!\"); } }","dependencies":[{"file_path":"Battleship-Game-Engine-main/Battleship-Game-Engine-main/Services/Ship.java","file_content":"package Services; import java.util.ArrayList; public class Ship { public static final int NO_OF_SHIPS = 5; public String shipName; public int shipLength; private final ArrayList<String> position; public Ship(String name, int length) { this.shipName = name; this.shipLength = length; position = new ArrayList<>(); } public String getShipName() { return shipName; } public int getShipLength() { return shipLength; } public void storeShipPlacement(char roF, char roS, int coF, int coS) { if (roF == roS) { for (;coF <= coS; coF++) { position.add(roF + \"\" + coF); } } else { for (; roF <= roS; roF++) { position.add(roF + \"\" + coF); } } } public boolean isPartOfShip(char row, int col) { return position.contains(row + \"\" + col); } public void removeShipPartAndReport(char row, int col) { position.remove(row + \"\" + col); } public boolean isShipSunken() { return position.isEmpty(); } }"}]}}
{"project_id":282,"chunk_id":0,"content":{"main_file_path":"Battleship-Game-Engine-main/Battleship-Game-Engine-main/Services/Ship.java","main_file_content":"package Services; import java.util.ArrayList; public class Ship { public static final int NO_OF_SHIPS = 5; public String shipName; public int shipLength; private final ArrayList<String> position; public Ship(String name, int length) { this.shipName = name; this.shipLength = length; position = new ArrayList<>(); } public String getShipName() { return shipName; } public int getShipLength() { return shipLength; } public void storeShipPlacement(char roF, char roS, int coF, int coS) { if (roF == roS) { for (;coF <= coS; coF++) { position.add(roF + \"\" + coF); } } else { for (; roF <= roS; roF++) { position.add(roF + \"\" + coF); } } } public boolean isPartOfShip(char row, int col) { return position.contains(row + \"\" + col); } public void removeShipPartAndReport(char row, int col) { position.remove(row + \"\" + col); } public boolean isShipSunken() { return position.isEmpty(); } }","dependencies":[]}}
{"project_id":282,"chunk_id":0,"content":{"main_file_path":"Battleship-Game-Engine-main/Battleship-Game-Engine-main/Players/Engines/IntermediateAdversary.java","main_file_content":"package Players.Engines; import java.util.ArrayList; import java.util.Random; import java.util.Stack; public class IntermediateAdversary extends NaiveSolver { private boolean IS_TARGETING; private ArrayList<Integer> targets; private ArrayList<Integer> hunts; private Stack<Integer> targetsFired; private String previousShot; public IntermediateAdversary() { this.name = \"In\"; IS_TARGETING = false; rng = new Random(); targets = new ArrayList<>(); hunts = new ArrayList<>(); targetsFired = new Stack<>(); } private int encode(String coordinates) { char row = coordinates.charAt(0); int column = Integer.parseInt(coordinates.substring(1)); return (row - 'A') * 10 + column - 1; } private String decode(int encodedCoord) { char row = (char) (encodedCoord / 10 + 'A'); int column = encodedCoord % 10 + 1; return row + \"\" + column; } @Override public String fireASalvo() { String target; if (IS_TARGETING) { target = null; } else { target = huntSquares(); } return null; } @Override public void manageShipHit(char row, int col) { arena.placePiece(row, col, arena.HIT); int length = ships.size(); for (int i = 0; i < length; i++) { if (!ships.get(i).isPartOfShip(row, col)) continue; ships.get(i).removeShipPartAndReport(row, col); if (ships.get(i).isShipSunken()) { System.out.println(\"You sank a ship!\"); ships.remove(i); IS_TARGETING = false; } else { System.out.println(\"You hit a ship!\"); IS_TARGETING = true; } break; } } private void createTargets(ArrayList<Integer> targets, ArrayList<Integer> hunts) { for (int i = 0; i < 100; i++) { targets.add(i); } for (int i = 1; i < 100; i+=2) { if (Math.floor((float) i / 10) % 2 == 0) { hunts.add(i); } else if (Math.floor((float) i / 10) % 2 == 1) { hunts.add(i - 1); } } } private String huntSquares() { String target; targetsFired.empty(); int randIndex, randHuntSqaure; if (!hunts.isEmpty()) { randIndex = rng.nextInt(hunts.size()); } else { randIndex = rng.nextInt(targets.size()); } randHuntSqaure = hunts.get(randIndex); target = decode(randHuntSqaure); hunts.remove(randHuntSqaure); targets.remove(randHuntSqaure); return target; } private String targetShip(String previousShot, boolean isHit) { String target; int startingTarget = encode(previousShot); int north = startingTarget - 10; int south = startingTarget + 10; int east = startingTarget + 1; int west = startingTarget - 1; if (targets.contains(north) && targetsFired.contains(north)) { targetsFired.push(north); } else if (targets.contains(south) && targetsFired.contains(south)) { targetsFired.push(south); } else if (targets.contains(east) && targetsFired.contains(east)) { targetsFired.push(east); } else if (targets.contains(west) && targetsFired.contains(west)) { targetsFired.push(west); } if (targetsFired.isEmpty()) { return huntSquares(); } int coordinateToFireAt = targetsFired.pop(); if (hunts.contains(coordinateToFireAt)) { hunts.remove(hunts.get(coordinateToFireAt)); } target = decode(coordinateToFireAt); return target; } }","dependencies":[{"file_path":"Battleship-Game-Engine-main/Players/Engines/NaiveSolver.java","file_content":"package Players.Engines; import Services.Battlefield; public class NaiveSolver extends BattleshipEngine { @Override public void placeShip(int shipIndex) { String startingPosition = generateRandomMapCoordinates(); char rowStart = startingPosition.charAt(0); int colStart = Integer.parseInt(startingPosition.substring(1)); int horizontalOrVertical = (int) Math.round(Math.random()); int NEorSW = (int) Math.round(Math.random()); int placementRes; if (horizontalOrVertical == 0) { if (NEorSW == 0 && colStart - ships.get(shipIndex).getShipLength() + 1 >= 1) { placementRes = arena.isCorrectCoordinates(rowStart, rowStart, colStart - ships.get(shipIndex).getShipLength() + 1, colStart, ships.get(shipIndex)); if (placementRes == Battlefield.VALID_COORD) { for (int i = colStart - ships.get(shipIndex).getShipLength() + 1; i <= colStart; i++) { arena.placePiece(rowStart, i, arena.SHIP); } ships.get(shipIndex).storeShipPlacement(rowStart, rowStart, colStart - ships.get(shipIndex).getShipLength() + 1, colStart); return; } } else if (NEorSW == 1 && colStart + ships.get(shipIndex).getShipLength() - 1 <= 10) { placementRes = arena.isCorrectCoordinates(rowStart, rowStart, colStart, colStart + ships.get(shipIndex).getShipLength() - 1, ships.get(shipIndex)); if (placementRes == Battlefield.VALID_COORD) { for (int i = colStart; i <= colStart + ships.get(shipIndex).getShipLength() - 1; i++) { arena.placePiece(rowStart, i, arena.SHIP); } ships.get(shipIndex).storeShipPlacement(rowStart, rowStart, colStart, colStart + ships.get(shipIndex).getShipLength() - 1); return; } } placeShip(shipIndex); } else { if (NEorSW == 0 && rowStart - ships.get(shipIndex).getShipLength() + 1 >= 'A') { placementRes = arena.isCorrectCoordinates((char) (rowStart - ships.get(shipIndex).getShipLength() + 1), rowStart, colStart, colStart, ships.get(shipIndex)); if (placementRes == Battlefield.VALID_COORD) { for (char i = (char) (rowStart - ships.get(shipIndex).getShipLength() + 1); i <= rowStart; i++) { arena.placePiece(i, colStart, arena.SHIP); } ships.get(shipIndex).storeShipPlacement((char) (rowStart - ships.get(shipIndex).getShipLength() + 1), rowStart, colStart, colStart); return; } } else if (NEorSW == 1 && rowStart + ships.get(shipIndex).getShipLength() - 1 <= 'J') { placementRes = arena.isCorrectCoordinates(rowStart, (char) (rowStart + ships.get(shipIndex).getShipLength() - 1), colStart, colStart, ships.get(shipIndex)); if (placementRes == Battlefield.VALID_COORD) { for (char i = rowStart; i <= rowStart + ships.get(shipIndex).getShipLength() - 1; i++) { arena.placePiece(i, colStart, arena.SHIP); } ships.get(shipIndex).storeShipPlacement(rowStart, (char) (rowStart + ships.get(shipIndex).getShipLength() - 1) , colStart, colStart); return; } } placeShip(shipIndex); } } @Override public String fireASalvo() { return generateRandomMapCoordinates(); } }"}]}}
{"project_id":282,"chunk_id":0,"content":{"main_file_path":"Battleship-Game-Engine-main/Battleship-Game-Engine-main/Players/Engines/BattleshipEngine.java","main_file_content":"package Players.Engines; import Players.Player; import java.util.Random; public abstract class BattleshipEngine extends Player { Random rng; protected String generateRandomMapCoordinates() { rng = new Random((int)(1 * 10000 * Math.random())); char row = (char) (rng.nextInt(10) + 'A'); int col = 1 + rng.nextInt(10); return row + \"\" + col; } @Override public void manageShipHit(char row, int col) { arena.placePiece(row, col, arena.HIT); int length = ships.size(); for (int i = 0; i < length; i++) { if (!ships.get(i).isPartOfShip(row, col)) continue; ships.get(i).removeShipPartAndReport(row, col); if (ships.get(i).isShipSunken()) { System.out.println(\"You sank a ship!\"); ships.remove(i); } else { System.out.println(\"You hit a ship!\"); } break; } } }","dependencies":[{"file_path":"Battleship-Game-Engine-main/Battleship-Game-Engine-main/Players/Player.java","file_content":"package Players; import Services.Battlefield; import Services.Ship; import java.util.ArrayList; public abstract class Player { protected String name; public Battlefield arena; protected ArrayList<Ship> ships; private static final String TRAPDOOR = \"2187AA23\"; public Player() { this(\"Luke Skywalker\"); } public Player(String name) { this.name = name; arena = new Battlefield(); ships = new ArrayList<>(); ships.add(new Ship(\"Aircraft Carrier\", 5)); ships.add(new Ship(\"Battleship\", 4)); ships.add(new Ship(\"Cruiser\", 3)); ships.add(new Ship(\"Submarine\", 3)); ships.add(new Ship(\"Destroyer\", 2)); } public String getName() { return name; } public static String trapdoorFilter(String input) { if (input.equals(TRAPDOOR)) { System.exit(0); } return input; } public abstract void placeShip(int shipIndex); public abstract String fireASalvo(); public boolean isNavySunken() { return ships.isEmpty(); } public abstract void manageShipHit(char row, int col); }"}]}}
{"project_id":282,"chunk_id":0,"content":{"main_file_path":"Battleship-Game-Engine-main/Battleship-Game-Engine-main/Players/Engines/NaiveSolver.java","main_file_content":"package Players.Engines; import Services.Battlefield; public class NaiveSolver extends BattleshipEngine { @Override public void placeShip(int shipIndex) { String startingPosition = generateRandomMapCoordinates(); char rowStart = startingPosition.charAt(0); int colStart = Integer.parseInt(startingPosition.substring(1)); int horizontalOrVertical = (int) Math.round(Math.random()); int NEorSW = (int) Math.round(Math.random()); int placementRes; if (horizontalOrVertical == 0) { if (NEorSW == 0 && colStart - ships.get(shipIndex).getShipLength() + 1 >= 1) { placementRes = arena.isCorrectCoordinates(rowStart, rowStart, colStart - ships.get(shipIndex).getShipLength() + 1, colStart, ships.get(shipIndex)); if (placementRes == Battlefield.VALID_COORD) { for (int i = colStart - ships.get(shipIndex).getShipLength() + 1; i <= colStart; i++) { arena.placePiece(rowStart, i, arena.SHIP); } ships.get(shipIndex).storeShipPlacement(rowStart, rowStart, colStart - ships.get(shipIndex).getShipLength() + 1, colStart); return; } } else if (NEorSW == 1 && colStart + ships.get(shipIndex).getShipLength() - 1 <= 10) { placementRes = arena.isCorrectCoordinates(rowStart, rowStart, colStart, colStart + ships.get(shipIndex).getShipLength() - 1, ships.get(shipIndex)); if (placementRes == Battlefield.VALID_COORD) { for (int i = colStart; i <= colStart + ships.get(shipIndex).getShipLength() - 1; i++) { arena.placePiece(rowStart, i, arena.SHIP); } ships.get(shipIndex).storeShipPlacement(rowStart, rowStart, colStart, colStart + ships.get(shipIndex).getShipLength() - 1); return; } } placeShip(shipIndex); } else { if (NEorSW == 0 && rowStart - ships.get(shipIndex).getShipLength() + 1 >= 'A') { placementRes = arena.isCorrectCoordinates((char) (rowStart - ships.get(shipIndex).getShipLength() + 1), rowStart, colStart, colStart, ships.get(shipIndex)); if (placementRes == Battlefield.VALID_COORD) { for (char i = (char) (rowStart - ships.get(shipIndex).getShipLength() + 1); i <= rowStart; i++) { arena.placePiece(i, colStart, arena.SHIP); } ships.get(shipIndex).storeShipPlacement((char) (rowStart - ships.get(shipIndex).getShipLength() + 1), rowStart, colStart, colStart); return; } } else if (NEorSW == 1 && rowStart + ships.get(shipIndex).getShipLength() - 1 <= 'J') { placementRes = arena.isCorrectCoordinates(rowStart, (char) (rowStart + ships.get(shipIndex).getShipLength() - 1), colStart, colStart, ships.get(shipIndex)); if (placementRes == Battlefield.VALID_COORD) { for (char i = rowStart; i <= rowStart + ships.get(shipIndex).getShipLength() - 1; i++) { arena.placePiece(i, colStart, arena.SHIP); } ships.get(shipIndex).storeShipPlacement(rowStart, (char) (rowStart + ships.get(shipIndex).getShipLength() - 1) , colStart, colStart); return; } } placeShip(shipIndex); } } @Override public String fireASalvo() { return generateRandomMapCoordinates(); } }","dependencies":[{"file_path":"Battleship-Game-Engine-main/Players/Engines/BattleshipEngine.java","file_content":"package Players.Engines; import Players.Player; import java.util.Random; public abstract class BattleshipEngine extends Player { Random rng; protected String generateRandomMapCoordinates() { rng = new Random((int)(1 * 10000 * Math.random())); char row = (char) (rng.nextInt(10) + 'A'); int col = 1 + rng.nextInt(10); return row + \"\" + col; } @Override public void manageShipHit(char row, int col) { arena.placePiece(row, col, arena.HIT); int length = ships.size(); for (int i = 0; i < length; i++) { if (!ships.get(i).isPartOfShip(row, col)) continue; ships.get(i).removeShipPartAndReport(row, col); if (ships.get(i).isShipSunken()) { System.out.println(\"You sank a ship!\"); ships.remove(i); } else { System.out.println(\"You hit a ship!\"); } break; } } }"}]}}
{"project_id":282,"chunk_id":0,"content":{"main_file_path":"Battleship-Game-Engine-main/Battleship-Game-Engine-main/Players/Engines/Boogeyman.java","main_file_content":"package Players.Engines; public class Boogeyman extends BattleshipEngine { @Override public void placeShip(int shipIndex) { } @Override public String fireASalvo() { return null; } }","dependencies":[{"file_path":"Battleship-Game-Engine-main/Players/Engines/BattleshipEngine.java","file_content":"package Players.Engines; import Players.Player; import java.util.Random; public abstract class BattleshipEngine extends Player { Random rng; protected String generateRandomMapCoordinates() { rng = new Random((int)(1 * 10000 * Math.random())); char row = (char) (rng.nextInt(10) + 'A'); int col = 1 + rng.nextInt(10); return row + \"\" + col; } @Override public void manageShipHit(char row, int col) { arena.placePiece(row, col, arena.HIT); int length = ships.size(); for (int i = 0; i < length; i++) { if (!ships.get(i).isPartOfShip(row, col)) continue; ships.get(i).removeShipPartAndReport(row, col); if (ships.get(i).isShipSunken()) { System.out.println(\"You sank a ship!\"); ships.remove(i); } else { System.out.println(\"You hit a ship!\"); } break; } } }"}]}}
{"project_id":282,"chunk_id":0,"content":{"main_file_path":"Battleship-Game-Engine-main/Players/Engines/IntermediateAdversary.java","main_file_content":"package Players.Engines; import java.util.ArrayList; import java.util.Random; import java.util.Stack; public class IntermediateAdversary extends NaiveSolver { private boolean IS_TARGETING; private ArrayList<Integer> targets; private ArrayList<Integer> hunts; private Stack<Integer> targetsFired; private String previousShot; public IntermediateAdversary() { this.name = \"In\"; IS_TARGETING = false; rng = new Random(); targets = new ArrayList<>(); hunts = new ArrayList<>(); targetsFired = new Stack<>(); } private int encode(String coordinates) { char row = coordinates.charAt(0); int column = Integer.parseInt(coordinates.substring(1)); return (row - 'A') * 10 + column - 1; } private String decode(int encodedCoord) { char row = (char) (encodedCoord / 10 + 'A'); int column = encodedCoord % 10 + 1; return row + \"\" + column; } @Override public String fireASalvo() { String target; if (IS_TARGETING) { target = null; } else { target = huntSquares(); } return null; } @Override public void manageShipHit(char row, int col) { arena.placePiece(row, col, arena.HIT); int length = ships.size(); for (int i = 0; i < length; i++) { if (!ships.get(i).isPartOfShip(row, col)) continue; ships.get(i).removeShipPartAndReport(row, col); if (ships.get(i).isShipSunken()) { System.out.println(\"You sank a ship!\"); ships.remove(i); IS_TARGETING = false; } else { System.out.println(\"You hit a ship!\"); IS_TARGETING = true; } break; } } private void createTargets(ArrayList<Integer> targets, ArrayList<Integer> hunts) { for (int i = 0; i < 100; i++) { targets.add(i); } for (int i = 1; i < 100; i+=2) { if (Math.floor((float) i / 10) % 2 == 0) { hunts.add(i); } else if (Math.floor((float) i / 10) % 2 == 1) { hunts.add(i - 1); } } } private String huntSquares() { String target; targetsFired.empty(); int randIndex, randHuntSqaure; if (!hunts.isEmpty()) { randIndex = rng.nextInt(hunts.size()); } else { randIndex = rng.nextInt(targets.size()); } randHuntSqaure = hunts.get(randIndex); target = decode(randHuntSqaure); hunts.remove(randHuntSqaure); targets.remove(randHuntSqaure); return target; } private String targetShip(String previousShot, boolean isHit) { String target; int startingTarget = encode(previousShot); int north = startingTarget - 10; int south = startingTarget + 10; int east = startingTarget + 1; int west = startingTarget - 1; if (targets.contains(north) && targetsFired.contains(north)) { targetsFired.push(north); } else if (targets.contains(south) && targetsFired.contains(south)) { targetsFired.push(south); } else if (targets.contains(east) && targetsFired.contains(east)) { targetsFired.push(east); } else if (targets.contains(west) && targetsFired.contains(west)) { targetsFired.push(west); } if (targetsFired.isEmpty()) { return huntSquares(); } int coordinateToFireAt = targetsFired.pop(); if (hunts.contains(coordinateToFireAt)) { hunts.remove(hunts.get(coordinateToFireAt)); } target = decode(coordinateToFireAt); return target; } }","dependencies":[{"file_path":"Battleship-Game-Engine-main/Players/Engines/NaiveSolver.java","file_content":"package Players.Engines; import Services.Battlefield; public class NaiveSolver extends BattleshipEngine { @Override public void placeShip(int shipIndex) { String startingPosition = generateRandomMapCoordinates(); char rowStart = startingPosition.charAt(0); int colStart = Integer.parseInt(startingPosition.substring(1)); int horizontalOrVertical = (int) Math.round(Math.random()); int NEorSW = (int) Math.round(Math.random()); int placementRes; if (horizontalOrVertical == 0) { if (NEorSW == 0 && colStart - ships.get(shipIndex).getShipLength() + 1 >= 1) { placementRes = arena.isCorrectCoordinates(rowStart, rowStart, colStart - ships.get(shipIndex).getShipLength() + 1, colStart, ships.get(shipIndex)); if (placementRes == Battlefield.VALID_COORD) { for (int i = colStart - ships.get(shipIndex).getShipLength() + 1; i <= colStart; i++) { arena.placePiece(rowStart, i, arena.SHIP); } ships.get(shipIndex).storeShipPlacement(rowStart, rowStart, colStart - ships.get(shipIndex).getShipLength() + 1, colStart); return; } } else if (NEorSW == 1 && colStart + ships.get(shipIndex).getShipLength() - 1 <= 10) { placementRes = arena.isCorrectCoordinates(rowStart, rowStart, colStart, colStart + ships.get(shipIndex).getShipLength() - 1, ships.get(shipIndex)); if (placementRes == Battlefield.VALID_COORD) { for (int i = colStart; i <= colStart + ships.get(shipIndex).getShipLength() - 1; i++) { arena.placePiece(rowStart, i, arena.SHIP); } ships.get(shipIndex).storeShipPlacement(rowStart, rowStart, colStart, colStart + ships.get(shipIndex).getShipLength() - 1); return; } } placeShip(shipIndex); } else { if (NEorSW == 0 && rowStart - ships.get(shipIndex).getShipLength() + 1 >= 'A') { placementRes = arena.isCorrectCoordinates((char) (rowStart - ships.get(shipIndex).getShipLength() + 1), rowStart, colStart, colStart, ships.get(shipIndex)); if (placementRes == Battlefield.VALID_COORD) { for (char i = (char) (rowStart - ships.get(shipIndex).getShipLength() + 1); i <= rowStart; i++) { arena.placePiece(i, colStart, arena.SHIP); } ships.get(shipIndex).storeShipPlacement((char) (rowStart - ships.get(shipIndex).getShipLength() + 1), rowStart, colStart, colStart); return; } } else if (NEorSW == 1 && rowStart + ships.get(shipIndex).getShipLength() - 1 <= 'J') { placementRes = arena.isCorrectCoordinates(rowStart, (char) (rowStart + ships.get(shipIndex).getShipLength() - 1), colStart, colStart, ships.get(shipIndex)); if (placementRes == Battlefield.VALID_COORD) { for (char i = rowStart; i <= rowStart + ships.get(shipIndex).getShipLength() - 1; i++) { arena.placePiece(i, colStart, arena.SHIP); } ships.get(shipIndex).storeShipPlacement(rowStart, (char) (rowStart + ships.get(shipIndex).getShipLength() - 1) , colStart, colStart); return; } } placeShip(shipIndex); } } @Override public String fireASalvo() { return generateRandomMapCoordinates(); } }"}]}}
{"project_id":282,"chunk_id":0,"content":{"main_file_path":"Battleship-Game-Engine-main/Players/Engines/BattleshipEngine.java","main_file_content":"package Players.Engines; import Players.Player; import java.util.Random; public abstract class BattleshipEngine extends Player { Random rng; protected String generateRandomMapCoordinates() { rng = new Random((int)(1 * 10000 * Math.random())); char row = (char) (rng.nextInt(10) + 'A'); int col = 1 + rng.nextInt(10); return row + \"\" + col; } @Override public void manageShipHit(char row, int col) { arena.placePiece(row, col, arena.HIT); int length = ships.size(); for (int i = 0; i < length; i++) { if (!ships.get(i).isPartOfShip(row, col)) continue; ships.get(i).removeShipPartAndReport(row, col); if (ships.get(i).isShipSunken()) { System.out.println(\"You sank a ship!\"); ships.remove(i); } else { System.out.println(\"You hit a ship!\"); } break; } } }","dependencies":[{"file_path":"Battleship-Game-Engine-main/Battleship-Game-Engine-main/Players/Player.java","file_content":"package Players; import Services.Battlefield; import Services.Ship; import java.util.ArrayList; public abstract class Player { protected String name; public Battlefield arena; protected ArrayList<Ship> ships; private static final String TRAPDOOR = \"2187AA23\"; public Player() { this(\"Luke Skywalker\"); } public Player(String name) { this.name = name; arena = new Battlefield(); ships = new ArrayList<>(); ships.add(new Ship(\"Aircraft Carrier\", 5)); ships.add(new Ship(\"Battleship\", 4)); ships.add(new Ship(\"Cruiser\", 3)); ships.add(new Ship(\"Submarine\", 3)); ships.add(new Ship(\"Destroyer\", 2)); } public String getName() { return name; } public static String trapdoorFilter(String input) { if (input.equals(TRAPDOOR)) { System.exit(0); } return input; } public abstract void placeShip(int shipIndex); public abstract String fireASalvo(); public boolean isNavySunken() { return ships.isEmpty(); } public abstract void manageShipHit(char row, int col); }"}]}}
{"project_id":282,"chunk_id":0,"content":{"main_file_path":"Battleship-Game-Engine-main/Players/Engines/NaiveSolver.java","main_file_content":"package Players.Engines; import Services.Battlefield; public class NaiveSolver extends BattleshipEngine { @Override public void placeShip(int shipIndex) { String startingPosition = generateRandomMapCoordinates(); char rowStart = startingPosition.charAt(0); int colStart = Integer.parseInt(startingPosition.substring(1)); int horizontalOrVertical = (int) Math.round(Math.random()); int NEorSW = (int) Math.round(Math.random()); int placementRes; if (horizontalOrVertical == 0) { if (NEorSW == 0 && colStart - ships.get(shipIndex).getShipLength() + 1 >= 1) { placementRes = arena.isCorrectCoordinates(rowStart, rowStart, colStart - ships.get(shipIndex).getShipLength() + 1, colStart, ships.get(shipIndex)); if (placementRes == Battlefield.VALID_COORD) { for (int i = colStart - ships.get(shipIndex).getShipLength() + 1; i <= colStart; i++) { arena.placePiece(rowStart, i, arena.SHIP); } ships.get(shipIndex).storeShipPlacement(rowStart, rowStart, colStart - ships.get(shipIndex).getShipLength() + 1, colStart); return; } } else if (NEorSW == 1 && colStart + ships.get(shipIndex).getShipLength() - 1 <= 10) { placementRes = arena.isCorrectCoordinates(rowStart, rowStart, colStart, colStart + ships.get(shipIndex).getShipLength() - 1, ships.get(shipIndex)); if (placementRes == Battlefield.VALID_COORD) { for (int i = colStart; i <= colStart + ships.get(shipIndex).getShipLength() - 1; i++) { arena.placePiece(rowStart, i, arena.SHIP); } ships.get(shipIndex).storeShipPlacement(rowStart, rowStart, colStart, colStart + ships.get(shipIndex).getShipLength() - 1); return; } } placeShip(shipIndex); } else { if (NEorSW == 0 && rowStart - ships.get(shipIndex).getShipLength() + 1 >= 'A') { placementRes = arena.isCorrectCoordinates((char) (rowStart - ships.get(shipIndex).getShipLength() + 1), rowStart, colStart, colStart, ships.get(shipIndex)); if (placementRes == Battlefield.VALID_COORD) { for (char i = (char) (rowStart - ships.get(shipIndex).getShipLength() + 1); i <= rowStart; i++) { arena.placePiece(i, colStart, arena.SHIP); } ships.get(shipIndex).storeShipPlacement((char) (rowStart - ships.get(shipIndex).getShipLength() + 1), rowStart, colStart, colStart); return; } } else if (NEorSW == 1 && rowStart + ships.get(shipIndex).getShipLength() - 1 <= 'J') { placementRes = arena.isCorrectCoordinates(rowStart, (char) (rowStart + ships.get(shipIndex).getShipLength() - 1), colStart, colStart, ships.get(shipIndex)); if (placementRes == Battlefield.VALID_COORD) { for (char i = rowStart; i <= rowStart + ships.get(shipIndex).getShipLength() - 1; i++) { arena.placePiece(i, colStart, arena.SHIP); } ships.get(shipIndex).storeShipPlacement(rowStart, (char) (rowStart + ships.get(shipIndex).getShipLength() - 1) , colStart, colStart); return; } } placeShip(shipIndex); } } @Override public String fireASalvo() { return generateRandomMapCoordinates(); } }","dependencies":[{"file_path":"Battleship-Game-Engine-main/Players/Engines/BattleshipEngine.java","file_content":"package Players.Engines; import Players.Player; import java.util.Random; public abstract class BattleshipEngine extends Player { Random rng; protected String generateRandomMapCoordinates() { rng = new Random((int)(1 * 10000 * Math.random())); char row = (char) (rng.nextInt(10) + 'A'); int col = 1 + rng.nextInt(10); return row + \"\" + col; } @Override public void manageShipHit(char row, int col) { arena.placePiece(row, col, arena.HIT); int length = ships.size(); for (int i = 0; i < length; i++) { if (!ships.get(i).isPartOfShip(row, col)) continue; ships.get(i).removeShipPartAndReport(row, col); if (ships.get(i).isShipSunken()) { System.out.println(\"You sank a ship!\"); ships.remove(i); } else { System.out.println(\"You hit a ship!\"); } break; } } }"}]}}
{"project_id":282,"chunk_id":0,"content":{"main_file_path":"Battleship-Game-Engine-main/Players/Engines/Boogeyman.java","main_file_content":"package Players.Engines; public class Boogeyman extends BattleshipEngine { @Override public void placeShip(int shipIndex) { } @Override public String fireASalvo() { return null; } }","dependencies":[{"file_path":"Battleship-Game-Engine-main/Players/Engines/BattleshipEngine.java","file_content":"package Players.Engines; import Players.Player; import java.util.Random; public abstract class BattleshipEngine extends Player { Random rng; protected String generateRandomMapCoordinates() { rng = new Random((int)(1 * 10000 * Math.random())); char row = (char) (rng.nextInt(10) + 'A'); int col = 1 + rng.nextInt(10); return row + \"\" + col; } @Override public void manageShipHit(char row, int col) { arena.placePiece(row, col, arena.HIT); int length = ships.size(); for (int i = 0; i < length; i++) { if (!ships.get(i).isPartOfShip(row, col)) continue; ships.get(i).removeShipPartAndReport(row, col); if (ships.get(i).isShipSunken()) { System.out.println(\"You sank a ship!\"); ships.remove(i); } else { System.out.println(\"You hit a ship!\"); } break; } } }"}]}}
{"project_id":283,"chunk_id":0,"content":{"main_file_path":"OOAD-Sample-Project-master/exam_registration/Admin.java","main_file_content":"package exam_registration; import java.awt.Container; import java.awt.GridLayout; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.sql.Connection; import java.sql.ResultSet; import java.sql.Statement; import javax.swing.BoxLayout; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JPanel; public class Admin implements ActionListener { JLabel lblFName,lblLName,lblAddress,lblRoll,lblCollege,lblQualification,lblDob,lblEmail,lblPhone,lblmarks; JLabel lblFNameval,lblLNameval,lblAddressval,lblRollval,lblCollegeval,lblQualificationval,lblDobval,lblEmailval,lblPhoneval,lblmarksval; JFrame frame=new JFrame(\"ADMIN\"); ResultSet rs; JButton btnPrev,btnNext; public static void main(String[] args) { Admin obj = new Admin(); obj.createUI(); } private void createUI() { JPanel pnlNavigate = new JPanel(new GridLayout(1,2)); btnPrev = new JButton(\" << \"); btnPrev.setActionCommand(\"Prev\"); btnPrev.addActionListener(this); btnNext = new JButton(\" >> \"); btnNext.setActionCommand(\"Next\"); btnNext.addActionListener(this); pnlNavigate.add(btnPrev); pnlNavigate.add(btnNext); JPanel pnlNavAns = new JPanel(new GridLayout(10,2)); lblFName = new JLabel(\"First Nmae : \"); lblFNameval = new JLabel(\"val\"); lblLName = new JLabel(\" Last Name : \"); lblLNameval = new JLabel(\"val\"); lblAddress = new JLabel(\" Address : \"); lblAddressval = new JLabel(\"val\"); lblRoll = new JLabel(\" Roll No : \"); lblRollval = new JLabel(\"val\"); lblCollege = new JLabel(\" College Name : \"); lblCollegeval = new JLabel(\"val\"); lblQualification = new JLabel(\" Qualification : \"); lblQualificationval = new JLabel(\"val\"); lblDob = new JLabel(\" Date Of Birth : \"); lblDobval = new JLabel(\"val\"); lblEmail = new JLabel(\" e-mail Id : \"); lblEmailval = new JLabel(\"val\"); lblPhone = new JLabel(\" Phone No : \"); lblPhoneval = new JLabel(\"val\"); lblmarks = new JLabel(\"Total marks : \"); lblmarksval = new JLabel(\"val\"); pnlNavAns.add(lblFName); pnlNavAns.add(lblFNameval); pnlNavAns.add(lblLName); pnlNavAns.add(lblLNameval); pnlNavAns.add(lblRoll); pnlNavAns.add(lblRollval); pnlNavAns.add(lblAddress); pnlNavAns.add(lblAddressval); pnlNavAns.add(lblCollege); pnlNavAns.add(lblCollegeval); pnlNavAns.add(lblQualification); pnlNavAns.add(lblQualificationval); pnlNavAns.add(lblDob); pnlNavAns.add(lblDobval); pnlNavAns.add(lblEmail); pnlNavAns.add(lblEmailval); pnlNavAns.add(lblPhone); pnlNavAns.add(lblPhoneval); pnlNavAns.add(lblmarks); pnlNavAns.add(lblmarksval); Container cn = frame.getContentPane(); cn.setLayout(new BoxLayout(cn,BoxLayout.Y_AXIS)); frame.add(pnlNavigate); frame.add(pnlNavAns); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.pack(); frame.setVisible(true); } @Override public void actionPerformed(ActionEvent evt) { String action = evt.getActionCommand(); if(action.equals(\"Prev\")) { preNavigation(); } else if(action.equals(\"Next\")) { nextNavigation(); } } private void preNavigation() { try{ if(rs == null) { Connection con = DbConnection.getConnection(); String sql = \"SELECT * FROM registration\"; Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE); rs = st.executeQuery(sql); } if(rs.previous()) { populateValue(); } } catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\", JOptionPane.ERROR_MESSAGE); } } private void nextNavigation() { try{ if(rs == null) { Connection con = DbConnection.getConnection(); String sql = \"SELECT * FROM registration\"; Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE); rs = st.executeQuery(sql); } if(rs.next()) { populateValue(); } }catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\", JOptionPane.ERROR_MESSAGE); } } private void populateValue() throws Exception { String FNmae = rs.getString(\"FName\"); String LName = rs.getString(\"LName\"); String Address = rs.getString(\"Address\"); String Roll = rs.getString(\"Roll\"); String College = rs.getString(\"College\"); String Qualification = rs.getString(\"Qualification\"); String Dob = rs.getString(\"Dob\"); String Email = rs.getString(\"Email\"); String Phone = rs.getString(\"Phone\"); int marks = rs.getInt(\"marks\"); lblFNameval.setText(FNmae); lblLNameval.setText(LName); lblAddressval.setText(Address); lblRollval.setText(Roll); lblCollegeval.setText(College); lblQualificationval.setText(Qualification); lblDobval.setText(Dob); lblEmailval.setText(Email); lblPhoneval.setText(Phone); lblmarksval.setDisplayedMnemonic(marks); } }","dependencies":[{"file_path":"OOAD-Sample-Project-master/OOAD-Sample-Project-master/exam_registration/Admin.java","file_content":"package exam_registration; import java.awt.Container; import java.awt.GridLayout; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.sql.Connection; import java.sql.ResultSet; import java.sql.Statement; import javax.swing.BoxLayout; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JPanel; public class Admin implements ActionListener { JLabel lblFName,lblLName,lblAddress,lblRoll,lblCollege,lblQualification,lblDob,lblEmail,lblPhone,lblmarks; JLabel lblFNameval,lblLNameval,lblAddressval,lblRollval,lblCollegeval,lblQualificationval,lblDobval,lblEmailval,lblPhoneval,lblmarksval; JFrame frame=new JFrame(\"ADMIN\"); ResultSet rs; JButton btnPrev,btnNext; public static void main(String[] args) { Admin obj = new Admin(); obj.createUI(); } private void createUI() { JPanel pnlNavigate = new JPanel(new GridLayout(1,2)); btnPrev = new JButton(\" << \"); btnPrev.setActionCommand(\"Prev\"); btnPrev.addActionListener(this); btnNext = new JButton(\" >> \"); btnNext.setActionCommand(\"Next\"); btnNext.addActionListener(this); pnlNavigate.add(btnPrev); pnlNavigate.add(btnNext); JPanel pnlNavAns = new JPanel(new GridLayout(10,2)); lblFName = new JLabel(\"First Nmae : \"); lblFNameval = new JLabel(\"val\"); lblLName = new JLabel(\" Last Name : \"); lblLNameval = new JLabel(\"val\"); lblAddress = new JLabel(\" Address : \"); lblAddressval = new JLabel(\"val\"); lblRoll = new JLabel(\" Roll No : \"); lblRollval = new JLabel(\"val\"); lblCollege = new JLabel(\" College Name : \"); lblCollegeval = new JLabel(\"val\"); lblQualification = new JLabel(\" Qualification : \"); lblQualificationval = new JLabel(\"val\"); lblDob = new JLabel(\" Date Of Birth : \"); lblDobval = new JLabel(\"val\"); lblEmail = new JLabel(\" e-mail Id : \"); lblEmailval = new JLabel(\"val\"); lblPhone = new JLabel(\" Phone No : \"); lblPhoneval = new JLabel(\"val\"); lblmarks = new JLabel(\"Total marks : \"); lblmarksval = new JLabel(\"val\"); pnlNavAns.add(lblFName); pnlNavAns.add(lblFNameval); pnlNavAns.add(lblLName); pnlNavAns.add(lblLNameval); pnlNavAns.add(lblRoll); pnlNavAns.add(lblRollval); pnlNavAns.add(lblAddress); pnlNavAns.add(lblAddressval); pnlNavAns.add(lblCollege); pnlNavAns.add(lblCollegeval); pnlNavAns.add(lblQualification); pnlNavAns.add(lblQualificationval); pnlNavAns.add(lblDob); pnlNavAns.add(lblDobval); pnlNavAns.add(lblEmail); pnlNavAns.add(lblEmailval); pnlNavAns.add(lblPhone); pnlNavAns.add(lblPhoneval); pnlNavAns.add(lblmarks); pnlNavAns.add(lblmarksval); Container cn = frame.getContentPane(); cn.setLayout(new BoxLayout(cn,BoxLayout.Y_AXIS)); frame.add(pnlNavigate); frame.add(pnlNavAns); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.pack(); frame.setVisible(true); } @Override public void actionPerformed(ActionEvent evt) { String action = evt.getActionCommand(); if(action.equals(\"Prev\")) { preNavigation(); } else if(action.equals(\"Next\")) { nextNavigation(); } } private void preNavigation() { try{ if(rs == null) { Connection con = DbConnection.getConnection(); String sql = \"SELECT * FROM registration\"; Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE); rs = st.executeQuery(sql); } if(rs.previous()) { populateValue(); } } catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\", JOptionPane.ERROR_MESSAGE); } } private void nextNavigation() { try{ if(rs == null) { Connection con = DbConnection.getConnection(); String sql = \"SELECT * FROM registration\"; Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE); rs = st.executeQuery(sql); } if(rs.next()) { populateValue(); } }catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\", JOptionPane.ERROR_MESSAGE); } } private void populateValue() throws Exception { String FNmae = rs.getString(\"FName\"); String LName = rs.getString(\"LName\"); String Address = rs.getString(\"Address\"); String Roll = rs.getString(\"Roll\"); String College = rs.getString(\"College\"); String Qualification = rs.getString(\"Qualification\"); String Dob = rs.getString(\"Dob\"); String Email = rs.getString(\"Email\"); String Phone = rs.getString(\"Phone\"); int marks = rs.getInt(\"marks\"); lblFNameval.setText(FNmae); lblLNameval.setText(LName); lblAddressval.setText(Address); lblRollval.setText(Roll); lblCollegeval.setText(College); lblQualificationval.setText(Qualification); lblDobval.setText(Dob); lblEmailval.setText(Email); lblPhoneval.setText(Phone); lblmarksval.setDisplayedMnemonic(marks); } }"},{"file_path":"OOAD-Sample-Project-master/OOAD-Sample-Project-master/exam_registration/DbConnection.java","file_content":"package exam_registration; import java.sql.Connection; import java.sql.DriverManager; public class DbConnection { private static String url=\"jdbc:oracle:thin:@localhost:1522/orcl\"; public static Connection getConnection() throws Exception { Class.forName (\"oracle.jdbc.OracleDriver\"); Connection con=DriverManager.getConnection(url,\"system\",\"murali\"); return con; } }"}]}}
{"project_id":283,"chunk_id":0,"content":{"main_file_path":"OOAD-Sample-Project-master/exam_registration/Register.java","main_file_content":"package exam_registration; import javax.swing.*; import java.awt.*; import java.awt.event.*; import java.sql.*; public class Register implements ActionListener { JLabel lblFName,lblLname,lblAddress,lblRoll,lblCollege,lblQualification,lblDob,lblEmail,lblPhone,lblPassword; JTextField txtFName,txtLName,txtAddress,txtRoll,txtCollege,txtQualification,txtDob,txtEmail,txtPhone,txtPassword; JButton btnAdd,btnUpdate; ResultSet rs; JFrame frame; public static void main(String[] args) { Register obj = new Register(); obj.createUI(); } private void createUI() { frame = new JFrame(\"Regitration Form\"); JPanel pnlInput = new JPanel(new GridLayout(11,2)); lblFName = new JLabel(\" First Name : \"); txtFName = new JTextField(15); lblLname = new JLabel(\" Last Name : \"); txtLName = new JTextField(); lblAddress = new JLabel(\" Address : \"); txtAddress = new JTextField(); lblRoll = new JLabel(\" Roll No : \"); txtRoll = new JTextField(); lblCollege = new JLabel(\" College Name : \"); txtCollege = new JTextField(); lblQualification = new JLabel(\" Qualification : \"); txtQualification = new JTextField(); lblDob = new JLabel(\" Date Of Birth : \"); txtDob = new JTextField(); lblEmail = new JLabel(\" e-mail Id : \"); txtEmail = new JTextField(); lblPhone = new JLabel(\" Phone No : \"); txtPhone = new JTextField(); lblPassword = new JLabel(\" Enter new Password : \"); txtPassword = new JTextField(); pnlInput.add(lblFName); pnlInput.add(txtFName); pnlInput.add(lblLname); pnlInput.add(txtLName); pnlInput.add(lblPassword); pnlInput.add(txtPassword); pnlInput.add(lblAddress); pnlInput.add(txtAddress); pnlInput.add(lblRoll); pnlInput.add(txtRoll); pnlInput.add(lblCollege); pnlInput.add(txtCollege); pnlInput.add(lblQualification); pnlInput.add(txtQualification); pnlInput.add(lblDob); pnlInput.add(txtDob); pnlInput.add(lblEmail); pnlInput.add(txtEmail); pnlInput.add(lblPhone); pnlInput.add(txtPhone); JPanel pnlButton = new JPanel(new GridLayout(1,2)); btnAdd = new JButton(\"Add\"); btnAdd.addActionListener(this); btnUpdate = new JButton(\"Update\"); btnUpdate.addActionListener(this); pnlButton.add(btnAdd); pnlButton.add(btnUpdate); frame.getContentPane().setBackground(Color.CYAN); Container cn = frame.getContentPane(); cn.setLayout(new BoxLayout(cn,BoxLayout.Y_AXIS)); frame.add(pnlInput); frame.add(pnlButton); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.pack(); frame.setVisible(true); JOptionPane.showMessageDialog(null, \"First Name entered will be used as Username\",null, JOptionPane.INFORMATION_MESSAGE); } @Override public void actionPerformed(ActionEvent evt) { String action = evt.getActionCommand(); if(action.equals(\"Add\")) { addOperation(); } else if(action.equals(\"Update\")) { updateOperation(); } } private void addOperation() { try { Class.forName (\"oracle.jdbc.OracleDriver\"); Connection con = DriverManager.getConnection(\"jdbc:oracle:thin:@localhost:1522/orcl\",\"system\",\"murali\"); String sql = \"INSERT INTO Registration (FName,LName,Address,Roll,College,Qualification,Dob,Email,Phone,Password) \" + \"Values ('\"+txtFName.getText()+\"',\" + \"'\"+txtLName.getText()+\"',\"+\"'\"+txtAddress.getText()+\"',\"+\"'\"+txtRoll.getText()+\"',\"+\"'\"+txtCollege.getText()+\"',\"+\"'\"+txtQualification.getText()+\"',\"+\"'\"+txtDob.getText()+\"',\"+\"'\"+txtEmail.getText()+\"',\"+\"'\"+txtPhone.getText()+\"','\"+txtPassword.getText()+\"')\"; Statement st = con.createStatement(); st.execute(sql); JOptionPane.showMessageDialog(null, \"Record Added Succesfully.\",\"Record Added\", JOptionPane.INFORMATION_MESSAGE); String sql1 = \"insert into Login(username,password)\"+\"values('\"+txtFName.getText()+\"','\"+txtPassword.getText()+\"')\"; st.execute(sql1); JOptionPane.showMessageDialog(null, \"Login Created Succesfully.\",\"Login Created\", JOptionPane.INFORMATION_MESSAGE); frame.dispose(); LoginForm l=new LoginForm(); l.main(null); } catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\",JOptionPane.ERROR_MESSAGE); } } private void updateOperation() { try { Class.forName (\"oracle.jdbc.OracleDriver\"); Connection con = DriverManager.getConnection(\"jdbc:oracle:thin:@localhost:1522/orcl\",\"system\",\"murali\"); String sql = \"Update Registration \" + \"SET FName = '\"+txtFName.getText()+\"',LName = '\"+txtLName.getText()+\"',\" + \"Address = '\"+txtAddress.getText()+\"',\" + \"Roll = '\"+txtRoll.getText()+\"',\" + \"College = '\"+txtCollege.getText()+\"',\" + \"Qualification = '\"+txtQualification.getText()+\"',\" + \"Dob = '\"+txtDob.getText()+\"',\" + \"Email = '\"+txtEmail.getText()+\"',\" + \"Phone = '\"+txtPhone.getText()+\"',\" + \"Password = '\"+txtPassword.getText()+\"'\"+ \"Where FName = '\"+txtFName.getText()+\"'\"; JOptionPane.showMessageDialog(null, sql,\"Record Updated\", JOptionPane.INFORMATION_MESSAGE); Statement st = con.createStatement(); st.execute(sql); JOptionPane.showMessageDialog(null, \"Record Update Succesfully.\", \"Record Updated\",JOptionPane.INFORMATION_MESSAGE); String sql2 = \"update login \" + \"set username = '\"+txtFName.getText()+\"',\" + \"Password = '\"+txtPassword.getText()+\"' \"+ \"Where username = '\"+txtFName.getText()+\"'\"; st.execute(sql2); frame.dispose(); LoginForm l=new LoginForm(); l.main(null); } catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\", JOptionPane.ERROR_MESSAGE); } } }","dependencies":[{"file_path":"OOAD-Sample-Project-master/OOAD-Sample-Project-master/exam_registration/LoginForm.java","file_content":"package exam_registration; import java.awt.Dimension; import java.awt.Toolkit; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.sql.Connection; import java.sql.ResultSet; import java.sql.Statement; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JPasswordField; import javax.swing.JTextField; public class LoginForm { JButton SUBMIT,REGISTER,EXIT; JFrame f; JLabel label1,label2; JTextField text1; JTextField text2;public String value1; LoginForm() { f=new JFrame(); f.getContentPane().setLayout(null); label1 = new JLabel(); label1.setText(\"UserName:\"); label1.setBounds(400,150,100,20); text1 = new JTextField(25); text1.setBounds(500,150,100,20); label2 = new JLabel(); label2.setText(\"Password:\"); label2.setBounds(400,180,100,20); text2 = new JPasswordField(25); text2.setBounds(500,180,100,20); SUBMIT=new JButton(\"Login\"); SUBMIT.setBounds(450,210,100,20); REGISTER = new JButton(\"Register\"); REGISTER.setBounds(450,80,100,20); EXIT= new JButton(\"EXIT\"); EXIT.setBounds(450,250,100,20); f.add(label1); f.add(text1); f.add(label2); f.add(text2); f.add(SUBMIT); f.add(REGISTER); f.add(EXIT); Dimension screensize=Toolkit.getDefaultToolkit().getScreenSize(); double width=screensize.getWidth(); double height=screensize.getHeight(); int w=(int)width; int h=(int)height; f.setSize(w,h); f.setTitle(\"Exam Registration System\"); f.setVisible(true); REGISTER.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { System.out.println(\"check\"); f.dispose(); Register.main(null); } }); EXIT.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { int ans = JOptionPane.showConfirmDialog(null,\"Do U want to EXIT\",\"confirmation\",JOptionPane.YES_NO_OPTION); if(ans==0) { f.setVisible(false); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f.pack(); } } }); SUBMIT.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { value1=text1.getText();System.out.println(\"Value 1\"+ value1); String value2=text2.getText(); String user1=\"\"; String pass1=\"\"; String user2=\"\"; String pass2=\"\"; String user3=\"admin\"; String pass3=\"admin\"; try { Connection con=DbConnection.getConnection(); Statement st = con.createStatement(); ResultSet res = st.executeQuery(\"SELECT * FROM login where USERNAME='\"+value1+\"' and PASSWORD='\"+value2+\"'\"); while (res.next()) { user1 = res.getString(\"USERNAME\"); pass1 = res.getString(\"PASSWORD\"); } if(value1.equals(\"admin\") && value1.equals(\"admin\")) { System.out.println(\"check\"); f.dispose(); Admin a=new Admin(); Admin.main(null); } else if(value1.equals(user2) && value2.equals(pass2)) { JOptionPane.showMessageDialog(null,\"Incorrect login or password\",\"Error\",JOptionPane.ERROR_MESSAGE); } else if(value1.equals(user1) && value2.equals(pass1)) { System.out.println(\"check\"); f.dispose(); Student s=new Student(value1); s.main(null); } else { JOptionPane.showMessageDialog(null,\"Incorrect login or password\",\"Error\",JOptionPane.ERROR_MESSAGE); } } catch(Exception e) { System.out.println(e.getMessage()); } } }); } public static void main(String[] args) { new LoginForm(); } }"},{"file_path":"OOAD-Sample-Project-master/OOAD-Sample-Project-master/exam_registration/Register.java","file_content":"package exam_registration; import javax.swing.*; import java.awt.*; import java.awt.event.*; import java.sql.*; public class Register implements ActionListener { JLabel lblFName,lblLname,lblAddress,lblRoll,lblCollege,lblQualification,lblDob,lblEmail,lblPhone,lblPassword; JTextField txtFName,txtLName,txtAddress,txtRoll,txtCollege,txtQualification,txtDob,txtEmail,txtPhone,txtPassword; JButton btnAdd,btnUpdate; ResultSet rs; JFrame frame; public static void main(String[] args) { Register obj = new Register(); obj.createUI(); } private void createUI() { frame = new JFrame(\"Regitration Form\"); JPanel pnlInput = new JPanel(new GridLayout(11,2)); lblFName = new JLabel(\" First Name : \"); txtFName = new JTextField(15); lblLname = new JLabel(\" Last Name : \"); txtLName = new JTextField(); lblAddress = new JLabel(\" Address : \"); txtAddress = new JTextField(); lblRoll = new JLabel(\" Roll No : \"); txtRoll = new JTextField(); lblCollege = new JLabel(\" College Name : \"); txtCollege = new JTextField(); lblQualification = new JLabel(\" Qualification : \"); txtQualification = new JTextField(); lblDob = new JLabel(\" Date Of Birth : \"); txtDob = new JTextField(); lblEmail = new JLabel(\" e-mail Id : \"); txtEmail = new JTextField(); lblPhone = new JLabel(\" Phone No : \"); txtPhone = new JTextField(); lblPassword = new JLabel(\" Enter new Password : \"); txtPassword = new JTextField(); pnlInput.add(lblFName); pnlInput.add(txtFName); pnlInput.add(lblLname); pnlInput.add(txtLName); pnlInput.add(lblPassword); pnlInput.add(txtPassword); pnlInput.add(lblAddress); pnlInput.add(txtAddress); pnlInput.add(lblRoll); pnlInput.add(txtRoll); pnlInput.add(lblCollege); pnlInput.add(txtCollege); pnlInput.add(lblQualification); pnlInput.add(txtQualification); pnlInput.add(lblDob); pnlInput.add(txtDob); pnlInput.add(lblEmail); pnlInput.add(txtEmail); pnlInput.add(lblPhone); pnlInput.add(txtPhone); JPanel pnlButton = new JPanel(new GridLayout(1,2)); btnAdd = new JButton(\"Add\"); btnAdd.addActionListener(this); btnUpdate = new JButton(\"Update\"); btnUpdate.addActionListener(this); pnlButton.add(btnAdd); pnlButton.add(btnUpdate); frame.getContentPane().setBackground(Color.CYAN); Container cn = frame.getContentPane(); cn.setLayout(new BoxLayout(cn,BoxLayout.Y_AXIS)); frame.add(pnlInput); frame.add(pnlButton); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.pack(); frame.setVisible(true); JOptionPane.showMessageDialog(null, \"First Name entered will be used as Username\",null, JOptionPane.INFORMATION_MESSAGE); } @Override public void actionPerformed(ActionEvent evt) { String action = evt.getActionCommand(); if(action.equals(\"Add\")) { addOperation(); } else if(action.equals(\"Update\")) { updateOperation(); } } private void addOperation() { try { Class.forName (\"oracle.jdbc.OracleDriver\"); Connection con = DriverManager.getConnection(\"jdbc:oracle:thin:@localhost:1522/orcl\",\"system\",\"murali\"); String sql = \"INSERT INTO Registration (FName,LName,Address,Roll,College,Qualification,Dob,Email,Phone,Password) \" + \"Values ('\"+txtFName.getText()+\"',\" + \"'\"+txtLName.getText()+\"',\"+\"'\"+txtAddress.getText()+\"',\"+\"'\"+txtRoll.getText()+\"',\"+\"'\"+txtCollege.getText()+\"',\"+\"'\"+txtQualification.getText()+\"',\"+\"'\"+txtDob.getText()+\"',\"+\"'\"+txtEmail.getText()+\"',\"+\"'\"+txtPhone.getText()+\"','\"+txtPassword.getText()+\"')\"; Statement st = con.createStatement(); st.execute(sql); JOptionPane.showMessageDialog(null, \"Record Added Succesfully.\",\"Record Added\", JOptionPane.INFORMATION_MESSAGE); String sql1 = \"insert into Login(username,password)\"+\"values('\"+txtFName.getText()+\"','\"+txtPassword.getText()+\"')\"; st.execute(sql1); JOptionPane.showMessageDialog(null, \"Login Created Succesfully.\",\"Login Created\", JOptionPane.INFORMATION_MESSAGE); frame.dispose(); LoginForm l=new LoginForm(); l.main(null); } catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\",JOptionPane.ERROR_MESSAGE); } } private void updateOperation() { try { Class.forName (\"oracle.jdbc.OracleDriver\"); Connection con = DriverManager.getConnection(\"jdbc:oracle:thin:@localhost:1522/orcl\",\"system\",\"murali\"); String sql = \"Update Registration \" + \"SET FName = '\"+txtFName.getText()+\"',LName = '\"+txtLName.getText()+\"',\" + \"Address = '\"+txtAddress.getText()+\"',\" + \"Roll = '\"+txtRoll.getText()+\"',\" + \"College = '\"+txtCollege.getText()+\"',\" + \"Qualification = '\"+txtQualification.getText()+\"',\" + \"Dob = '\"+txtDob.getText()+\"',\" + \"Email = '\"+txtEmail.getText()+\"',\" + \"Phone = '\"+txtPhone.getText()+\"',\" + \"Password = '\"+txtPassword.getText()+\"'\"+ \"Where FName = '\"+txtFName.getText()+\"'\"; JOptionPane.showMessageDialog(null, sql,\"Record Updated\", JOptionPane.INFORMATION_MESSAGE); Statement st = con.createStatement(); st.execute(sql); JOptionPane.showMessageDialog(null, \"Record Update Succesfully.\", \"Record Updated\",JOptionPane.INFORMATION_MESSAGE); String sql2 = \"update login \" + \"set username = '\"+txtFName.getText()+\"',\" + \"Password = '\"+txtPassword.getText()+\"' \"+ \"Where username = '\"+txtFName.getText()+\"'\"; st.execute(sql2); frame.dispose(); LoginForm l=new LoginForm(); l.main(null); } catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\", JOptionPane.ERROR_MESSAGE); } } }"}]}}
{"project_id":283,"chunk_id":0,"content":{"main_file_path":"OOAD-Sample-Project-master/exam_registration/DbConnection.java","main_file_content":"package exam_registration; import java.sql.Connection; import java.sql.DriverManager; public class DbConnection { private static String url=\"jdbc:oracle:thin:@localhost:1522/orcl\"; public static Connection getConnection() throws Exception { Class.forName (\"oracle.jdbc.OracleDriver\"); Connection con=DriverManager.getConnection(url,\"system\",\"murali\"); return con; } }","dependencies":[]}}
{"project_id":283,"chunk_id":0,"content":{"main_file_path":"OOAD-Sample-Project-master/exam_registration/Test.java","main_file_content":"package exam_registration; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.sql.Connection; import java.sql.ResultSet; import java.sql.Statement; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JTextField; public class Test { JLabel q1,q2,note; JTextField a1,a2; JFrame f; JButton Submit; ResultSet rs,rs1; String qu1,qu2,ans1,ans2; String evala1,evala2; int intmarks=0; String name; Test(String value1) { name = value1; f=new JFrame(); f.getContentPane().setLayout(null); q1 = new JLabel(); q2 = new JLabel(); note = new JLabel(); a1 = new JTextField(); a2 = new JTextField(); Submit = new JButton(\"Submit\"); note.setBounds(20, 50, 100, 20); q1.setBounds(20, 100, 500, 20); q2.setBounds(20, 150, 500, 20); a1.setBounds(800, 100, 100, 20); a2.setBounds(800, 150, 100, 20); Submit.setBounds(1000,500 ,100 ,20 ); f.add(note); f.add(q1); f.add(a1); f.add(q2); f.add(a2); f.add(Submit); f.setTitle(\"Exam\"); f.setVisible(true); f.setSize(2000, 2000); display(); } private void display() { try { Connection con = DbConnection.getConnection(); Statement st = con.createStatement(); String sql = \"SELECT * FROM QB \"; rs = st.executeQuery(sql); if(rs.next()) { qu1 = rs.getString(\"QUESTION\"); q1.setText(qu1); } if(rs.next()) { qu2 = rs.getString(\"QUESTION\"); q2.setText(qu2); } } catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\", JOptionPane.ERROR_MESSAGE); } Submit.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { try { Connection con = DbConnection.getConnection(); Statement st = con.createStatement(); String sql = \"SELECT * FROM QB \"; rs = st.executeQuery(sql); if(rs.next()) { ans1=a1.getText(); evala1=rs.getString(\"answer\"); if(ans1.equalsIgnoreCase(evala1)) { intmarks = intmarks+5; } } if (rs.next()) { ans2=a2.getText(); evala2=rs.getString(\"answer\"); if(ans2.equalsIgnoreCase(evala2)) { intmarks = intmarks+5; } } System.out.println(intmarks); } catch(Exception e) { } try { Connection con = DbConnection.getConnection(); Statement st = con.createStatement(); String sql1 = \"Select * from Registration where Fname ='\" +name+\"'\"; rs1 = st.executeQuery(sql1); if(rs1.next()) { String tFNmae = rs1.getString(\"FName\"); String tLName = rs1.getString(\"LName\"); String tAddress = rs1.getString(\"Address\"); String tRoll = rs1.getString(\"Roll\"); String tCollege = rs1.getString(\"College\"); String tQualification = rs1.getString(\"Qualification\"); String tDob = rs1.getString(\"Dob\"); String tEmail = rs1.getString(\"Email\"); String tPhone = rs1.getString(\"Phone\"); int tmarks=intmarks; String sql2 = \"Update Registration \" + \"SET LName = '\"+tLName+\"',\" + \"Address = '\"+tAddress+\"',\" + \"Roll = '\"+tRoll+\"',\" + \"College = '\"+tCollege+\"',\" + \"Qualification = '\"+tQualification+\"',\" + \"Dob = '\"+tDob+\"',\" + \"Email = '\"+tEmail+\"',\" + \"Phone = '\"+tPhone+\"',\"+\"marks= '\"+tmarks+\"'\"+ \"Where FName = '\"+name+\"'\"; st.execute(sql2); JOptionPane.showMessageDialog(null,\"Record Updated Successfully\",null, JOptionPane.INFORMATION_MESSAGE); } } catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\", JOptionPane.ERROR_MESSAGE); } f.dispose(); Student s=new Student(name); s.main(null); } }); } public static void main(String args[]) { } }","dependencies":[{"file_path":"OOAD-Sample-Project-master/OOAD-Sample-Project-master/exam_registration/DbConnection.java","file_content":"package exam_registration; import java.sql.Connection; import java.sql.DriverManager; public class DbConnection { private static String url=\"jdbc:oracle:thin:@localhost:1522/orcl\"; public static Connection getConnection() throws Exception { Class.forName (\"oracle.jdbc.OracleDriver\"); Connection con=DriverManager.getConnection(url,\"system\",\"murali\"); return con; } }"},{"file_path":"OOAD-Sample-Project-master/OOAD-Sample-Project-master/exam_registration/Student.java","file_content":"package exam_registration; import java.awt.Container; import java.awt.GridLayout; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.sql.Connection; import java.sql.ResultSet; import java.sql.Statement; import javax.swing.BoxLayout; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JPanel; public class Student implements ActionListener { JLabel lblFName,lblLName,lblAddress,lblRoll,lblCollege,lblQualification,lblDob,lblEmail,lblPhone,lblmarks,lblFName1,lblLName1,lblRoll1; JLabel lblFNameval,lblLNameval,lblAddressval,lblRollval,lblCollegeval,lblQualificationval,lblDobval,lblEmailval,lblPhoneval,lblmarksval,lblFNameval1,lblLNameval1,lblRollval1; JButton btndetail,btntest,btnresult,btnback,btnlogout; String name,mark; JFrame frame = new JFrame(\"STUDENT DETAIL\"); JFrame f=new JFrame(\"EXAM RESULTS\"); ResultSet rs; Student(String value1) { name = value1; createUI(); } public static void main(String args[]) { } private void createUI() { JPanel pnlButton = new JPanel(new GridLayout(1,3)); JPanel detail = new JPanel(new GridLayout(9,2)); btndetail =new JButton(\"My Details\"); btndetail.addActionListener(this); btndetail.setBounds(100,150,100,20); btntest = new JButton (\"Write Test\"); btntest.addActionListener(this); btntest.setBounds(300,150,100,20); btnresult = new JButton(\"My Result\"); btnresult.addActionListener(this); btnresult.setBounds(500,150,100,20); btnback =new JButton(\"Back\"); btnback.addActionListener(this); btnback.setBounds(300,2000,100,20); btnlogout =new JButton(\"LOGOUT\"); btnlogout.addActionListener(this); btnlogout.setBounds(300,2000,100,20); pnlButton.add(btndetail); pnlButton.add(btntest); pnlButton.add(btnresult); pnlButton.add(btnresult); pnlButton.add(btnlogout); lblFName = new JLabel(\"First Nmae : \"); lblFNameval = new JLabel(\"val\"); lblLName = new JLabel(\" Last Name : \"); lblLNameval = new JLabel(\"val\"); lblAddress = new JLabel(\" Address : \"); lblAddressval = new JLabel(\"val\"); lblRoll = new JLabel(\" Roll No : \"); lblRollval = new JLabel(\"val\"); lblCollege = new JLabel(\" College Name : \"); lblCollegeval = new JLabel(\"val\"); lblQualification = new JLabel(\" Qualification : \"); lblQualificationval = new JLabel(\"val\"); lblDob = new JLabel(\" Date Of Birth : \"); lblDobval = new JLabel(\"val\"); lblEmail = new JLabel(\" e-mail Id : \"); lblEmailval = new JLabel(\"val\"); lblPhone = new JLabel(\" Phone No : \"); lblPhoneval = new JLabel(\"val\"); detail.add(lblFName); detail.add(lblFNameval); detail.add(lblLName); detail.add(lblLNameval); detail.add(lblAddress); detail.add(lblAddressval); detail.add(lblRoll); detail.add(lblRollval); detail.add(lblCollege); detail.add(lblCollegeval); detail.add(lblQualification); detail.add(lblQualificationval); detail.add(lblDob); detail.add(lblDobval); detail.add(lblEmail); detail.add(lblEmailval); detail.add(lblPhone); detail.add(lblPhoneval); JPanel results = new JPanel(new GridLayout(5,2)); lblFName1 = new JLabel(\"First Nmae : \"); lblFNameval1 = new JLabel(\"val\"); lblLName1 = new JLabel(\" Last Name : \"); lblLNameval1 = new JLabel(\"val\"); lblRoll1 = new JLabel(\" Roll No : \"); lblRollval1 = new JLabel(\"val\"); lblmarks = new JLabel(\"Total marks : \"); lblmarksval = new JLabel(\"val\"); results.add(lblFName1); results.add(lblFNameval1); results.add(lblLName1); results.add(lblLNameval1); results.add(lblRoll1); results.add(lblRollval1); results.add(lblmarks); results.add(lblmarksval); results.add(btnback); Container cn =frame.getContentPane(); cn.setLayout(new BoxLayout(cn,BoxLayout.Y_AXIS)); frame.add(pnlButton); frame.add(detail); f.add(results); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.pack(); frame.setVisible(true); frame.setSize(1024,768); } @Override public void actionPerformed(ActionEvent evt) { String action = evt.getActionCommand(); if(action.equals(\"My Details\")) { viewOperation(); } if(action.equals(\"Write Test\")) { writeOperation(); } if(action.equals(\"My Result\")) { resultOperation(); } if(action.equals(\"Back\")) { backpage(); } if(action.equals(\"LOGOUT\")) { frame.dispose(); LoginForm l=new LoginForm(); l.main(null); } } private void viewOperation() { try { Connection con = DbConnection.getConnection(); Statement st = con.createStatement(); String sql = \"Select * from Registration where Fname ='\" +name+\"'\"; rs = st.executeQuery(sql); if(rs.next()) { String FNmae = rs.getString(\"FName\"); String LName = rs.getString(\"LName\"); String Address = rs.getString(\"Address\"); String Roll = rs.getString(\"Roll\"); String College = rs.getString(\"College\"); String Qualification = rs.getString(\"Qualification\"); String Dob = rs.getString(\"Dob\"); String Email = rs.getString(\"Email\"); String Phone = rs.getString(\"Phone\"); lblFNameval.setText(FNmae); lblLNameval.setText(LName); lblAddressval.setText(Address); lblRollval.setText(Roll); lblCollegeval.setText(College); lblQualificationval.setText(Qualification); lblDobval.setText(Dob); lblEmailval.setText(Email); lblPhoneval.setText(Phone); } } catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\", JOptionPane.ERROR_MESSAGE); } } private void writeOperation() { frame.dispose(); Test t=new Test(name); t.main(null); } private void resultOperation() { try { Connection con = DbConnection.getConnection(); Statement st = con.createStatement(); String sql = \"Select * from Registration where Fname ='\" +name+\"'\"; rs = st.executeQuery(sql); if(rs.next()) { String FNmae = rs.getString(\"FName\"); String LName = rs.getString(\"LName\"); String Roll = rs.getString(\"Roll\"); mark = rs.getString(\"marks\"); lblFNameval1.setText(FNmae); lblLNameval1.setText(LName); lblRollval1.setText(Roll); lblmarksval.setText(mark); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f.pack(); frame.setVisible(false); f.setVisible(true); f.setSize(500,500); } } catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\", JOptionPane.ERROR_MESSAGE); } } private void backpage() { f.dispose(); frame.setVisible(true); } }"}]}}
{"project_id":283,"chunk_id":0,"content":{"main_file_path":"OOAD-Sample-Project-master/exam_registration/LoginForm.java","main_file_content":"package exam_registration; import java.awt.Dimension; import java.awt.Toolkit; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.sql.Connection; import java.sql.ResultSet; import java.sql.Statement; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JPasswordField; import javax.swing.JTextField; public class LoginForm { JButton SUBMIT,REGISTER,EXIT; JFrame f; JLabel label1,label2; JTextField text1; JTextField text2;public String value1; LoginForm() { f=new JFrame(); f.getContentPane().setLayout(null); label1 = new JLabel(); label1.setText(\"UserName:\"); label1.setBounds(400,150,100,20); text1 = new JTextField(25); text1.setBounds(500,150,100,20); label2 = new JLabel(); label2.setText(\"Password:\"); label2.setBounds(400,180,100,20); text2 = new JPasswordField(25); text2.setBounds(500,180,100,20); SUBMIT=new JButton(\"Login\"); SUBMIT.setBounds(450,210,100,20); REGISTER = new JButton(\"Register\"); REGISTER.setBounds(450,80,100,20); EXIT= new JButton(\"EXIT\"); EXIT.setBounds(450,250,100,20); f.add(label1); f.add(text1); f.add(label2); f.add(text2); f.add(SUBMIT); f.add(REGISTER); f.add(EXIT); Dimension screensize=Toolkit.getDefaultToolkit().getScreenSize(); double width=screensize.getWidth(); double height=screensize.getHeight(); int w=(int)width; int h=(int)height; f.setSize(w,h); f.setTitle(\"Exam Registration System\"); f.setVisible(true); REGISTER.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { System.out.println(\"check\"); f.dispose(); Register.main(null); } }); EXIT.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { int ans = JOptionPane.showConfirmDialog(null,\"Do U want to EXIT\",\"confirmation\",JOptionPane.YES_NO_OPTION); if(ans==0) { f.setVisible(false); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f.pack(); } } }); SUBMIT.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { value1=text1.getText();System.out.println(\"Value 1\"+ value1); String value2=text2.getText(); String user1=\"\"; String pass1=\"\"; String user2=\"\"; String pass2=\"\"; String user3=\"admin\"; String pass3=\"admin\"; try { Connection con=DbConnection.getConnection(); Statement st = con.createStatement(); ResultSet res = st.executeQuery(\"SELECT * FROM login where USERNAME='\"+value1+\"' and PASSWORD='\"+value2+\"'\"); while (res.next()) { user1 = res.getString(\"USERNAME\"); pass1 = res.getString(\"PASSWORD\"); } if(value1.equals(\"admin\") && value1.equals(\"admin\")) { System.out.println(\"check\"); f.dispose(); Admin a=new Admin(); Admin.main(null); } else if(value1.equals(user2) && value2.equals(pass2)) { JOptionPane.showMessageDialog(null,\"Incorrect login or password\",\"Error\",JOptionPane.ERROR_MESSAGE); } else if(value1.equals(user1) && value2.equals(pass1)) { System.out.println(\"check\"); f.dispose(); Student s=new Student(value1); s.main(null); } else { JOptionPane.showMessageDialog(null,\"Incorrect login or password\",\"Error\",JOptionPane.ERROR_MESSAGE); } } catch(Exception e) { System.out.println(e.getMessage()); } } }); } public static void main(String[] args) { new LoginForm(); } }","dependencies":[{"file_path":"OOAD-Sample-Project-master/OOAD-Sample-Project-master/exam_registration/Admin.java","file_content":"package exam_registration; import java.awt.Container; import java.awt.GridLayout; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.sql.Connection; import java.sql.ResultSet; import java.sql.Statement; import javax.swing.BoxLayout; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JPanel; public class Admin implements ActionListener { JLabel lblFName,lblLName,lblAddress,lblRoll,lblCollege,lblQualification,lblDob,lblEmail,lblPhone,lblmarks; JLabel lblFNameval,lblLNameval,lblAddressval,lblRollval,lblCollegeval,lblQualificationval,lblDobval,lblEmailval,lblPhoneval,lblmarksval; JFrame frame=new JFrame(\"ADMIN\"); ResultSet rs; JButton btnPrev,btnNext; public static void main(String[] args) { Admin obj = new Admin(); obj.createUI(); } private void createUI() { JPanel pnlNavigate = new JPanel(new GridLayout(1,2)); btnPrev = new JButton(\" << \"); btnPrev.setActionCommand(\"Prev\"); btnPrev.addActionListener(this); btnNext = new JButton(\" >> \"); btnNext.setActionCommand(\"Next\"); btnNext.addActionListener(this); pnlNavigate.add(btnPrev); pnlNavigate.add(btnNext); JPanel pnlNavAns = new JPanel(new GridLayout(10,2)); lblFName = new JLabel(\"First Nmae : \"); lblFNameval = new JLabel(\"val\"); lblLName = new JLabel(\" Last Name : \"); lblLNameval = new JLabel(\"val\"); lblAddress = new JLabel(\" Address : \"); lblAddressval = new JLabel(\"val\"); lblRoll = new JLabel(\" Roll No : \"); lblRollval = new JLabel(\"val\"); lblCollege = new JLabel(\" College Name : \"); lblCollegeval = new JLabel(\"val\"); lblQualification = new JLabel(\" Qualification : \"); lblQualificationval = new JLabel(\"val\"); lblDob = new JLabel(\" Date Of Birth : \"); lblDobval = new JLabel(\"val\"); lblEmail = new JLabel(\" e-mail Id : \"); lblEmailval = new JLabel(\"val\"); lblPhone = new JLabel(\" Phone No : \"); lblPhoneval = new JLabel(\"val\"); lblmarks = new JLabel(\"Total marks : \"); lblmarksval = new JLabel(\"val\"); pnlNavAns.add(lblFName); pnlNavAns.add(lblFNameval); pnlNavAns.add(lblLName); pnlNavAns.add(lblLNameval); pnlNavAns.add(lblRoll); pnlNavAns.add(lblRollval); pnlNavAns.add(lblAddress); pnlNavAns.add(lblAddressval); pnlNavAns.add(lblCollege); pnlNavAns.add(lblCollegeval); pnlNavAns.add(lblQualification); pnlNavAns.add(lblQualificationval); pnlNavAns.add(lblDob); pnlNavAns.add(lblDobval); pnlNavAns.add(lblEmail); pnlNavAns.add(lblEmailval); pnlNavAns.add(lblPhone); pnlNavAns.add(lblPhoneval); pnlNavAns.add(lblmarks); pnlNavAns.add(lblmarksval); Container cn = frame.getContentPane(); cn.setLayout(new BoxLayout(cn,BoxLayout.Y_AXIS)); frame.add(pnlNavigate); frame.add(pnlNavAns); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.pack(); frame.setVisible(true); } @Override public void actionPerformed(ActionEvent evt) { String action = evt.getActionCommand(); if(action.equals(\"Prev\")) { preNavigation(); } else if(action.equals(\"Next\")) { nextNavigation(); } } private void preNavigation() { try{ if(rs == null) { Connection con = DbConnection.getConnection(); String sql = \"SELECT * FROM registration\"; Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE); rs = st.executeQuery(sql); } if(rs.previous()) { populateValue(); } } catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\", JOptionPane.ERROR_MESSAGE); } } private void nextNavigation() { try{ if(rs == null) { Connection con = DbConnection.getConnection(); String sql = \"SELECT * FROM registration\"; Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE); rs = st.executeQuery(sql); } if(rs.next()) { populateValue(); } }catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\", JOptionPane.ERROR_MESSAGE); } } private void populateValue() throws Exception { String FNmae = rs.getString(\"FName\"); String LName = rs.getString(\"LName\"); String Address = rs.getString(\"Address\"); String Roll = rs.getString(\"Roll\"); String College = rs.getString(\"College\"); String Qualification = rs.getString(\"Qualification\"); String Dob = rs.getString(\"Dob\"); String Email = rs.getString(\"Email\"); String Phone = rs.getString(\"Phone\"); int marks = rs.getInt(\"marks\"); lblFNameval.setText(FNmae); lblLNameval.setText(LName); lblAddressval.setText(Address); lblRollval.setText(Roll); lblCollegeval.setText(College); lblQualificationval.setText(Qualification); lblDobval.setText(Dob); lblEmailval.setText(Email); lblPhoneval.setText(Phone); lblmarksval.setDisplayedMnemonic(marks); } }"},{"file_path":"OOAD-Sample-Project-master/OOAD-Sample-Project-master/exam_registration/DbConnection.java","file_content":"package exam_registration; import java.sql.Connection; import java.sql.DriverManager; public class DbConnection { private static String url=\"jdbc:oracle:thin:@localhost:1522/orcl\"; public static Connection getConnection() throws Exception { Class.forName (\"oracle.jdbc.OracleDriver\"); Connection con=DriverManager.getConnection(url,\"system\",\"murali\"); return con; } }"},{"file_path":"OOAD-Sample-Project-master/OOAD-Sample-Project-master/exam_registration/LoginForm.java","file_content":"package exam_registration; import java.awt.Dimension; import java.awt.Toolkit; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.sql.Connection; import java.sql.ResultSet; import java.sql.Statement; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JPasswordField; import javax.swing.JTextField; public class LoginForm { JButton SUBMIT,REGISTER,EXIT; JFrame f; JLabel label1,label2; JTextField text1; JTextField text2;public String value1; LoginForm() { f=new JFrame(); f.getContentPane().setLayout(null); label1 = new JLabel(); label1.setText(\"UserName:\"); label1.setBounds(400,150,100,20); text1 = new JTextField(25); text1.setBounds(500,150,100,20); label2 = new JLabel(); label2.setText(\"Password:\"); label2.setBounds(400,180,100,20); text2 = new JPasswordField(25); text2.setBounds(500,180,100,20); SUBMIT=new JButton(\"Login\"); SUBMIT.setBounds(450,210,100,20); REGISTER = new JButton(\"Register\"); REGISTER.setBounds(450,80,100,20); EXIT= new JButton(\"EXIT\"); EXIT.setBounds(450,250,100,20); f.add(label1); f.add(text1); f.add(label2); f.add(text2); f.add(SUBMIT); f.add(REGISTER); f.add(EXIT); Dimension screensize=Toolkit.getDefaultToolkit().getScreenSize(); double width=screensize.getWidth(); double height=screensize.getHeight(); int w=(int)width; int h=(int)height; f.setSize(w,h); f.setTitle(\"Exam Registration System\"); f.setVisible(true); REGISTER.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { System.out.println(\"check\"); f.dispose(); Register.main(null); } }); EXIT.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { int ans = JOptionPane.showConfirmDialog(null,\"Do U want to EXIT\",\"confirmation\",JOptionPane.YES_NO_OPTION); if(ans==0) { f.setVisible(false); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f.pack(); } } }); SUBMIT.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { value1=text1.getText();System.out.println(\"Value 1\"+ value1); String value2=text2.getText(); String user1=\"\"; String pass1=\"\"; String user2=\"\"; String pass2=\"\"; String user3=\"admin\"; String pass3=\"admin\"; try { Connection con=DbConnection.getConnection(); Statement st = con.createStatement(); ResultSet res = st.executeQuery(\"SELECT * FROM login where USERNAME='\"+value1+\"' and PASSWORD='\"+value2+\"'\"); while (res.next()) { user1 = res.getString(\"USERNAME\"); pass1 = res.getString(\"PASSWORD\"); } if(value1.equals(\"admin\") && value1.equals(\"admin\")) { System.out.println(\"check\"); f.dispose(); Admin a=new Admin(); Admin.main(null); } else if(value1.equals(user2) && value2.equals(pass2)) { JOptionPane.showMessageDialog(null,\"Incorrect login or password\",\"Error\",JOptionPane.ERROR_MESSAGE); } else if(value1.equals(user1) && value2.equals(pass1)) { System.out.println(\"check\"); f.dispose(); Student s=new Student(value1); s.main(null); } else { JOptionPane.showMessageDialog(null,\"Incorrect login or password\",\"Error\",JOptionPane.ERROR_MESSAGE); } } catch(Exception e) { System.out.println(e.getMessage()); } } }); } public static void main(String[] args) { new LoginForm(); } }"},{"file_path":"OOAD-Sample-Project-master/OOAD-Sample-Project-master/exam_registration/Register.java","file_content":"package exam_registration; import javax.swing.*; import java.awt.*; import java.awt.event.*; import java.sql.*; public class Register implements ActionListener { JLabel lblFName,lblLname,lblAddress,lblRoll,lblCollege,lblQualification,lblDob,lblEmail,lblPhone,lblPassword; JTextField txtFName,txtLName,txtAddress,txtRoll,txtCollege,txtQualification,txtDob,txtEmail,txtPhone,txtPassword; JButton btnAdd,btnUpdate; ResultSet rs; JFrame frame; public static void main(String[] args) { Register obj = new Register(); obj.createUI(); } private void createUI() { frame = new JFrame(\"Regitration Form\"); JPanel pnlInput = new JPanel(new GridLayout(11,2)); lblFName = new JLabel(\" First Name : \"); txtFName = new JTextField(15); lblLname = new JLabel(\" Last Name : \"); txtLName = new JTextField(); lblAddress = new JLabel(\" Address : \"); txtAddress = new JTextField(); lblRoll = new JLabel(\" Roll No : \"); txtRoll = new JTextField(); lblCollege = new JLabel(\" College Name : \"); txtCollege = new JTextField(); lblQualification = new JLabel(\" Qualification : \"); txtQualification = new JTextField(); lblDob = new JLabel(\" Date Of Birth : \"); txtDob = new JTextField(); lblEmail = new JLabel(\" e-mail Id : \"); txtEmail = new JTextField(); lblPhone = new JLabel(\" Phone No : \"); txtPhone = new JTextField(); lblPassword = new JLabel(\" Enter new Password : \"); txtPassword = new JTextField(); pnlInput.add(lblFName); pnlInput.add(txtFName); pnlInput.add(lblLname); pnlInput.add(txtLName); pnlInput.add(lblPassword); pnlInput.add(txtPassword); pnlInput.add(lblAddress); pnlInput.add(txtAddress); pnlInput.add(lblRoll); pnlInput.add(txtRoll); pnlInput.add(lblCollege); pnlInput.add(txtCollege); pnlInput.add(lblQualification); pnlInput.add(txtQualification); pnlInput.add(lblDob); pnlInput.add(txtDob); pnlInput.add(lblEmail); pnlInput.add(txtEmail); pnlInput.add(lblPhone); pnlInput.add(txtPhone); JPanel pnlButton = new JPanel(new GridLayout(1,2)); btnAdd = new JButton(\"Add\"); btnAdd.addActionListener(this); btnUpdate = new JButton(\"Update\"); btnUpdate.addActionListener(this); pnlButton.add(btnAdd); pnlButton.add(btnUpdate); frame.getContentPane().setBackground(Color.CYAN); Container cn = frame.getContentPane(); cn.setLayout(new BoxLayout(cn,BoxLayout.Y_AXIS)); frame.add(pnlInput); frame.add(pnlButton); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.pack(); frame.setVisible(true); JOptionPane.showMessageDialog(null, \"First Name entered will be used as Username\",null, JOptionPane.INFORMATION_MESSAGE); } @Override public void actionPerformed(ActionEvent evt) { String action = evt.getActionCommand(); if(action.equals(\"Add\")) { addOperation(); } else if(action.equals(\"Update\")) { updateOperation(); } } private void addOperation() { try { Class.forName (\"oracle.jdbc.OracleDriver\"); Connection con = DriverManager.getConnection(\"jdbc:oracle:thin:@localhost:1522/orcl\",\"system\",\"murali\"); String sql = \"INSERT INTO Registration (FName,LName,Address,Roll,College,Qualification,Dob,Email,Phone,Password) \" + \"Values ('\"+txtFName.getText()+\"',\" + \"'\"+txtLName.getText()+\"',\"+\"'\"+txtAddress.getText()+\"',\"+\"'\"+txtRoll.getText()+\"',\"+\"'\"+txtCollege.getText()+\"',\"+\"'\"+txtQualification.getText()+\"',\"+\"'\"+txtDob.getText()+\"',\"+\"'\"+txtEmail.getText()+\"',\"+\"'\"+txtPhone.getText()+\"','\"+txtPassword.getText()+\"')\"; Statement st = con.createStatement(); st.execute(sql); JOptionPane.showMessageDialog(null, \"Record Added Succesfully.\",\"Record Added\", JOptionPane.INFORMATION_MESSAGE); String sql1 = \"insert into Login(username,password)\"+\"values('\"+txtFName.getText()+\"','\"+txtPassword.getText()+\"')\"; st.execute(sql1); JOptionPane.showMessageDialog(null, \"Login Created Succesfully.\",\"Login Created\", JOptionPane.INFORMATION_MESSAGE); frame.dispose(); LoginForm l=new LoginForm(); l.main(null); } catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\",JOptionPane.ERROR_MESSAGE); } } private void updateOperation() { try { Class.forName (\"oracle.jdbc.OracleDriver\"); Connection con = DriverManager.getConnection(\"jdbc:oracle:thin:@localhost:1522/orcl\",\"system\",\"murali\"); String sql = \"Update Registration \" + \"SET FName = '\"+txtFName.getText()+\"',LName = '\"+txtLName.getText()+\"',\" + \"Address = '\"+txtAddress.getText()+\"',\" + \"Roll = '\"+txtRoll.getText()+\"',\" + \"College = '\"+txtCollege.getText()+\"',\" + \"Qualification = '\"+txtQualification.getText()+\"',\" + \"Dob = '\"+txtDob.getText()+\"',\" + \"Email = '\"+txtEmail.getText()+\"',\" + \"Phone = '\"+txtPhone.getText()+\"',\" + \"Password = '\"+txtPassword.getText()+\"'\"+ \"Where FName = '\"+txtFName.getText()+\"'\"; JOptionPane.showMessageDialog(null, sql,\"Record Updated\", JOptionPane.INFORMATION_MESSAGE); Statement st = con.createStatement(); st.execute(sql); JOptionPane.showMessageDialog(null, \"Record Update Succesfully.\", \"Record Updated\",JOptionPane.INFORMATION_MESSAGE); String sql2 = \"update login \" + \"set username = '\"+txtFName.getText()+\"',\" + \"Password = '\"+txtPassword.getText()+\"' \"+ \"Where username = '\"+txtFName.getText()+\"'\"; st.execute(sql2); frame.dispose(); LoginForm l=new LoginForm(); l.main(null); } catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\", JOptionPane.ERROR_MESSAGE); } } }"}]}}
{"project_id":283,"chunk_id":1,"content":{"main_file_path":"OOAD-Sample-Project-master/exam_registration/LoginForm.java","main_file_content":"package exam_registration; import java.awt.Dimension; import java.awt.Toolkit; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.sql.Connection; import java.sql.ResultSet; import java.sql.Statement; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JPasswordField; import javax.swing.JTextField; public class LoginForm { JButton SUBMIT,REGISTER,EXIT; JFrame f; JLabel label1,label2; JTextField text1; JTextField text2;public String value1; LoginForm() { f=new JFrame(); f.getContentPane().setLayout(null); label1 = new JLabel(); label1.setText(\"UserName:\"); label1.setBounds(400,150,100,20); text1 = new JTextField(25); text1.setBounds(500,150,100,20); label2 = new JLabel(); label2.setText(\"Password:\"); label2.setBounds(400,180,100,20); text2 = new JPasswordField(25); text2.setBounds(500,180,100,20); SUBMIT=new JButton(\"Login\"); SUBMIT.setBounds(450,210,100,20); REGISTER = new JButton(\"Register\"); REGISTER.setBounds(450,80,100,20); EXIT= new JButton(\"EXIT\"); EXIT.setBounds(450,250,100,20); f.add(label1); f.add(text1); f.add(label2); f.add(text2); f.add(SUBMIT); f.add(REGISTER); f.add(EXIT); Dimension screensize=Toolkit.getDefaultToolkit().getScreenSize(); double width=screensize.getWidth(); double height=screensize.getHeight(); int w=(int)width; int h=(int)height; f.setSize(w,h); f.setTitle(\"Exam Registration System\"); f.setVisible(true); REGISTER.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { System.out.println(\"check\"); f.dispose(); Register.main(null); } }); EXIT.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { int ans = JOptionPane.showConfirmDialog(null,\"Do U want to EXIT\",\"confirmation\",JOptionPane.YES_NO_OPTION); if(ans==0) { f.setVisible(false); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f.pack(); } } }); SUBMIT.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { value1=text1.getText();System.out.println(\"Value 1\"+ value1); String value2=text2.getText(); String user1=\"\"; String pass1=\"\"; String user2=\"\"; String pass2=\"\"; String user3=\"admin\"; String pass3=\"admin\"; try { Connection con=DbConnection.getConnection(); Statement st = con.createStatement(); ResultSet res = st.executeQuery(\"SELECT * FROM login where USERNAME='\"+value1+\"' and PASSWORD='\"+value2+\"'\"); while (res.next()) { user1 = res.getString(\"USERNAME\"); pass1 = res.getString(\"PASSWORD\"); } if(value1.equals(\"admin\") && value1.equals(\"admin\")) { System.out.println(\"check\"); f.dispose(); Admin a=new Admin(); Admin.main(null); } else if(value1.equals(user2) && value2.equals(pass2)) { JOptionPane.showMessageDialog(null,\"Incorrect login or password\",\"Error\",JOptionPane.ERROR_MESSAGE); } else if(value1.equals(user1) && value2.equals(pass1)) { System.out.println(\"check\"); f.dispose(); Student s=new Student(value1); s.main(null); } else { JOptionPane.showMessageDialog(null,\"Incorrect login or password\",\"Error\",JOptionPane.ERROR_MESSAGE); } } catch(Exception e) { System.out.println(e.getMessage()); } } }); } public static void main(String[] args) { new LoginForm(); } }","dependencies":[{"file_path":"OOAD-Sample-Project-master/OOAD-Sample-Project-master/exam_registration/Student.java","file_content":"package exam_registration; import java.awt.Container; import java.awt.GridLayout; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.sql.Connection; import java.sql.ResultSet; import java.sql.Statement; import javax.swing.BoxLayout; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JPanel; public class Student implements ActionListener { JLabel lblFName,lblLName,lblAddress,lblRoll,lblCollege,lblQualification,lblDob,lblEmail,lblPhone,lblmarks,lblFName1,lblLName1,lblRoll1; JLabel lblFNameval,lblLNameval,lblAddressval,lblRollval,lblCollegeval,lblQualificationval,lblDobval,lblEmailval,lblPhoneval,lblmarksval,lblFNameval1,lblLNameval1,lblRollval1; JButton btndetail,btntest,btnresult,btnback,btnlogout; String name,mark; JFrame frame = new JFrame(\"STUDENT DETAIL\"); JFrame f=new JFrame(\"EXAM RESULTS\"); ResultSet rs; Student(String value1) { name = value1; createUI(); } public static void main(String args[]) { } private void createUI() { JPanel pnlButton = new JPanel(new GridLayout(1,3)); JPanel detail = new JPanel(new GridLayout(9,2)); btndetail =new JButton(\"My Details\"); btndetail.addActionListener(this); btndetail.setBounds(100,150,100,20); btntest = new JButton (\"Write Test\"); btntest.addActionListener(this); btntest.setBounds(300,150,100,20); btnresult = new JButton(\"My Result\"); btnresult.addActionListener(this); btnresult.setBounds(500,150,100,20); btnback =new JButton(\"Back\"); btnback.addActionListener(this); btnback.setBounds(300,2000,100,20); btnlogout =new JButton(\"LOGOUT\"); btnlogout.addActionListener(this); btnlogout.setBounds(300,2000,100,20); pnlButton.add(btndetail); pnlButton.add(btntest); pnlButton.add(btnresult); pnlButton.add(btnresult); pnlButton.add(btnlogout); lblFName = new JLabel(\"First Nmae : \"); lblFNameval = new JLabel(\"val\"); lblLName = new JLabel(\" Last Name : \"); lblLNameval = new JLabel(\"val\"); lblAddress = new JLabel(\" Address : \"); lblAddressval = new JLabel(\"val\"); lblRoll = new JLabel(\" Roll No : \"); lblRollval = new JLabel(\"val\"); lblCollege = new JLabel(\" College Name : \"); lblCollegeval = new JLabel(\"val\"); lblQualification = new JLabel(\" Qualification : \"); lblQualificationval = new JLabel(\"val\"); lblDob = new JLabel(\" Date Of Birth : \"); lblDobval = new JLabel(\"val\"); lblEmail = new JLabel(\" e-mail Id : \"); lblEmailval = new JLabel(\"val\"); lblPhone = new JLabel(\" Phone No : \"); lblPhoneval = new JLabel(\"val\"); detail.add(lblFName); detail.add(lblFNameval); detail.add(lblLName); detail.add(lblLNameval); detail.add(lblAddress); detail.add(lblAddressval); detail.add(lblRoll); detail.add(lblRollval); detail.add(lblCollege); detail.add(lblCollegeval); detail.add(lblQualification); detail.add(lblQualificationval); detail.add(lblDob); detail.add(lblDobval); detail.add(lblEmail); detail.add(lblEmailval); detail.add(lblPhone); detail.add(lblPhoneval); JPanel results = new JPanel(new GridLayout(5,2)); lblFName1 = new JLabel(\"First Nmae : \"); lblFNameval1 = new JLabel(\"val\"); lblLName1 = new JLabel(\" Last Name : \"); lblLNameval1 = new JLabel(\"val\"); lblRoll1 = new JLabel(\" Roll No : \"); lblRollval1 = new JLabel(\"val\"); lblmarks = new JLabel(\"Total marks : \"); lblmarksval = new JLabel(\"val\"); results.add(lblFName1); results.add(lblFNameval1); results.add(lblLName1); results.add(lblLNameval1); results.add(lblRoll1); results.add(lblRollval1); results.add(lblmarks); results.add(lblmarksval); results.add(btnback); Container cn =frame.getContentPane(); cn.setLayout(new BoxLayout(cn,BoxLayout.Y_AXIS)); frame.add(pnlButton); frame.add(detail); f.add(results); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.pack(); frame.setVisible(true); frame.setSize(1024,768); } @Override public void actionPerformed(ActionEvent evt) { String action = evt.getActionCommand(); if(action.equals(\"My Details\")) { viewOperation(); } if(action.equals(\"Write Test\")) { writeOperation(); } if(action.equals(\"My Result\")) { resultOperation(); } if(action.equals(\"Back\")) { backpage(); } if(action.equals(\"LOGOUT\")) { frame.dispose(); LoginForm l=new LoginForm(); l.main(null); } } private void viewOperation() { try { Connection con = DbConnection.getConnection(); Statement st = con.createStatement(); String sql = \"Select * from Registration where Fname ='\" +name+\"'\"; rs = st.executeQuery(sql); if(rs.next()) { String FNmae = rs.getString(\"FName\"); String LName = rs.getString(\"LName\"); String Address = rs.getString(\"Address\"); String Roll = rs.getString(\"Roll\"); String College = rs.getString(\"College\"); String Qualification = rs.getString(\"Qualification\"); String Dob = rs.getString(\"Dob\"); String Email = rs.getString(\"Email\"); String Phone = rs.getString(\"Phone\"); lblFNameval.setText(FNmae); lblLNameval.setText(LName); lblAddressval.setText(Address); lblRollval.setText(Roll); lblCollegeval.setText(College); lblQualificationval.setText(Qualification); lblDobval.setText(Dob); lblEmailval.setText(Email); lblPhoneval.setText(Phone); } } catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\", JOptionPane.ERROR_MESSAGE); } } private void writeOperation() { frame.dispose(); Test t=new Test(name); t.main(null); } private void resultOperation() { try { Connection con = DbConnection.getConnection(); Statement st = con.createStatement(); String sql = \"Select * from Registration where Fname ='\" +name+\"'\"; rs = st.executeQuery(sql); if(rs.next()) { String FNmae = rs.getString(\"FName\"); String LName = rs.getString(\"LName\"); String Roll = rs.getString(\"Roll\"); mark = rs.getString(\"marks\"); lblFNameval1.setText(FNmae); lblLNameval1.setText(LName); lblRollval1.setText(Roll); lblmarksval.setText(mark); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f.pack(); frame.setVisible(false); f.setVisible(true); f.setSize(500,500); } } catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\", JOptionPane.ERROR_MESSAGE); } } private void backpage() { f.dispose(); frame.setVisible(true); } }"}]}}
{"project_id":283,"chunk_id":0,"content":{"main_file_path":"OOAD-Sample-Project-master/exam_registration/Student.java","main_file_content":"package exam_registration; import java.awt.Container; import java.awt.GridLayout; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.sql.Connection; import java.sql.ResultSet; import java.sql.Statement; import javax.swing.BoxLayout; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JPanel; public class Student implements ActionListener { JLabel lblFName,lblLName,lblAddress,lblRoll,lblCollege,lblQualification,lblDob,lblEmail,lblPhone,lblmarks,lblFName1,lblLName1,lblRoll1; JLabel lblFNameval,lblLNameval,lblAddressval,lblRollval,lblCollegeval,lblQualificationval,lblDobval,lblEmailval,lblPhoneval,lblmarksval,lblFNameval1,lblLNameval1,lblRollval1; JButton btndetail,btntest,btnresult,btnback,btnlogout; String name,mark; JFrame frame = new JFrame(\"STUDENT DETAIL\"); JFrame f=new JFrame(\"EXAM RESULTS\"); ResultSet rs; Student(String value1) { name = value1; createUI(); } public static void main(String args[]) { } private void createUI() { JPanel pnlButton = new JPanel(new GridLayout(1,3)); JPanel detail = new JPanel(new GridLayout(9,2)); btndetail =new JButton(\"My Details\"); btndetail.addActionListener(this); btndetail.setBounds(100,150,100,20); btntest = new JButton (\"Write Test\"); btntest.addActionListener(this); btntest.setBounds(300,150,100,20); btnresult = new JButton(\"My Result\"); btnresult.addActionListener(this); btnresult.setBounds(500,150,100,20); btnback =new JButton(\"Back\"); btnback.addActionListener(this); btnback.setBounds(300,2000,100,20); btnlogout =new JButton(\"LOGOUT\"); btnlogout.addActionListener(this); btnlogout.setBounds(300,2000,100,20); pnlButton.add(btndetail); pnlButton.add(btntest); pnlButton.add(btnresult); pnlButton.add(btnresult); pnlButton.add(btnlogout); lblFName = new JLabel(\"First Nmae : \"); lblFNameval = new JLabel(\"val\"); lblLName = new JLabel(\" Last Name : \"); lblLNameval = new JLabel(\"val\"); lblAddress = new JLabel(\" Address : \"); lblAddressval = new JLabel(\"val\"); lblRoll = new JLabel(\" Roll No : \"); lblRollval = new JLabel(\"val\"); lblCollege = new JLabel(\" College Name : \"); lblCollegeval = new JLabel(\"val\"); lblQualification = new JLabel(\" Qualification : \"); lblQualificationval = new JLabel(\"val\"); lblDob = new JLabel(\" Date Of Birth : \"); lblDobval = new JLabel(\"val\"); lblEmail = new JLabel(\" e-mail Id : \"); lblEmailval = new JLabel(\"val\"); lblPhone = new JLabel(\" Phone No : \"); lblPhoneval = new JLabel(\"val\"); detail.add(lblFName); detail.add(lblFNameval); detail.add(lblLName); detail.add(lblLNameval); detail.add(lblAddress); detail.add(lblAddressval); detail.add(lblRoll); detail.add(lblRollval); detail.add(lblCollege); detail.add(lblCollegeval); detail.add(lblQualification); detail.add(lblQualificationval); detail.add(lblDob); detail.add(lblDobval); detail.add(lblEmail); detail.add(lblEmailval); detail.add(lblPhone); detail.add(lblPhoneval); JPanel results = new JPanel(new GridLayout(5,2)); lblFName1 = new JLabel(\"First Nmae : \"); lblFNameval1 = new JLabel(\"val\"); lblLName1 = new JLabel(\" Last Name : \"); lblLNameval1 = new JLabel(\"val\"); lblRoll1 = new JLabel(\" Roll No : \"); lblRollval1 = new JLabel(\"val\"); lblmarks = new JLabel(\"Total marks : \"); lblmarksval = new JLabel(\"val\"); results.add(lblFName1); results.add(lblFNameval1); results.add(lblLName1); results.add(lblLNameval1); results.add(lblRoll1); results.add(lblRollval1); results.add(lblmarks); results.add(lblmarksval); results.add(btnback); Container cn =frame.getContentPane(); cn.setLayout(new BoxLayout(cn,BoxLayout.Y_AXIS)); frame.add(pnlButton); frame.add(detail); f.add(results); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.pack(); frame.setVisible(true); frame.setSize(1024,768); } @Override public void actionPerformed(ActionEvent evt) { String action = evt.getActionCommand(); if(action.equals(\"My Details\")) { viewOperation(); } if(action.equals(\"Write Test\")) { writeOperation(); } if(action.equals(\"My Result\")) { resultOperation(); } if(action.equals(\"Back\")) { backpage(); } if(action.equals(\"LOGOUT\")) { frame.dispose(); LoginForm l=new LoginForm(); l.main(null); } } private void viewOperation() { try { Connection con = DbConnection.getConnection(); Statement st = con.createStatement(); String sql = \"Select * from Registration where Fname ='\" +name+\"'\"; rs = st.executeQuery(sql); if(rs.next()) { String FNmae = rs.getString(\"FName\"); String LName = rs.getString(\"LName\"); String Address = rs.getString(\"Address\"); String Roll = rs.getString(\"Roll\"); String College = rs.getString(\"College\"); String Qualification = rs.getString(\"Qualification\"); String Dob = rs.getString(\"Dob\"); String Email = rs.getString(\"Email\"); String Phone = rs.getString(\"Phone\"); lblFNameval.setText(FNmae); lblLNameval.setText(LName); lblAddressval.setText(Address); lblRollval.setText(Roll); lblCollegeval.setText(College); lblQualificationval.setText(Qualification); lblDobval.setText(Dob); lblEmailval.setText(Email); lblPhoneval.setText(Phone); } } catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\", JOptionPane.ERROR_MESSAGE); } } private void writeOperation() { frame.dispose(); Test t=new Test(name); t.main(null); } private void resultOperation() { try { Connection con = DbConnection.getConnection(); Statement st = con.createStatement(); String sql = \"Select * from Registration where Fname ='\" +name+\"'\"; rs = st.executeQuery(sql); if(rs.next()) { String FNmae = rs.getString(\"FName\"); String LName = rs.getString(\"LName\"); String Roll = rs.getString(\"Roll\"); mark = rs.getString(\"marks\"); lblFNameval1.setText(FNmae); lblLNameval1.setText(LName); lblRollval1.setText(Roll); lblmarksval.setText(mark); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f.pack(); frame.setVisible(false); f.setVisible(true); f.setSize(500,500); } } catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\", JOptionPane.ERROR_MESSAGE); } } private void backpage() { f.dispose(); frame.setVisible(true); } }","dependencies":[{"file_path":"OOAD-Sample-Project-master/OOAD-Sample-Project-master/exam_registration/DbConnection.java","file_content":"package exam_registration; import java.sql.Connection; import java.sql.DriverManager; public class DbConnection { private static String url=\"jdbc:oracle:thin:@localhost:1522/orcl\"; public static Connection getConnection() throws Exception { Class.forName (\"oracle.jdbc.OracleDriver\"); Connection con=DriverManager.getConnection(url,\"system\",\"murali\"); return con; } }"},{"file_path":"OOAD-Sample-Project-master/OOAD-Sample-Project-master/exam_registration/LoginForm.java","file_content":"package exam_registration; import java.awt.Dimension; import java.awt.Toolkit; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.sql.Connection; import java.sql.ResultSet; import java.sql.Statement; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JPasswordField; import javax.swing.JTextField; public class LoginForm { JButton SUBMIT,REGISTER,EXIT; JFrame f; JLabel label1,label2; JTextField text1; JTextField text2;public String value1; LoginForm() { f=new JFrame(); f.getContentPane().setLayout(null); label1 = new JLabel(); label1.setText(\"UserName:\"); label1.setBounds(400,150,100,20); text1 = new JTextField(25); text1.setBounds(500,150,100,20); label2 = new JLabel(); label2.setText(\"Password:\"); label2.setBounds(400,180,100,20); text2 = new JPasswordField(25); text2.setBounds(500,180,100,20); SUBMIT=new JButton(\"Login\"); SUBMIT.setBounds(450,210,100,20); REGISTER = new JButton(\"Register\"); REGISTER.setBounds(450,80,100,20); EXIT= new JButton(\"EXIT\"); EXIT.setBounds(450,250,100,20); f.add(label1); f.add(text1); f.add(label2); f.add(text2); f.add(SUBMIT); f.add(REGISTER); f.add(EXIT); Dimension screensize=Toolkit.getDefaultToolkit().getScreenSize(); double width=screensize.getWidth(); double height=screensize.getHeight(); int w=(int)width; int h=(int)height; f.setSize(w,h); f.setTitle(\"Exam Registration System\"); f.setVisible(true); REGISTER.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { System.out.println(\"check\"); f.dispose(); Register.main(null); } }); EXIT.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { int ans = JOptionPane.showConfirmDialog(null,\"Do U want to EXIT\",\"confirmation\",JOptionPane.YES_NO_OPTION); if(ans==0) { f.setVisible(false); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f.pack(); } } }); SUBMIT.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { value1=text1.getText();System.out.println(\"Value 1\"+ value1); String value2=text2.getText(); String user1=\"\"; String pass1=\"\"; String user2=\"\"; String pass2=\"\"; String user3=\"admin\"; String pass3=\"admin\"; try { Connection con=DbConnection.getConnection(); Statement st = con.createStatement(); ResultSet res = st.executeQuery(\"SELECT * FROM login where USERNAME='\"+value1+\"' and PASSWORD='\"+value2+\"'\"); while (res.next()) { user1 = res.getString(\"USERNAME\"); pass1 = res.getString(\"PASSWORD\"); } if(value1.equals(\"admin\") && value1.equals(\"admin\")) { System.out.println(\"check\"); f.dispose(); Admin a=new Admin(); Admin.main(null); } else if(value1.equals(user2) && value2.equals(pass2)) { JOptionPane.showMessageDialog(null,\"Incorrect login or password\",\"Error\",JOptionPane.ERROR_MESSAGE); } else if(value1.equals(user1) && value2.equals(pass1)) { System.out.println(\"check\"); f.dispose(); Student s=new Student(value1); s.main(null); } else { JOptionPane.showMessageDialog(null,\"Incorrect login or password\",\"Error\",JOptionPane.ERROR_MESSAGE); } } catch(Exception e) { System.out.println(e.getMessage()); } } }); } public static void main(String[] args) { new LoginForm(); } }"},{"file_path":"OOAD-Sample-Project-master/OOAD-Sample-Project-master/exam_registration/Test.java","file_content":"package exam_registration; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.sql.Connection; import java.sql.ResultSet; import java.sql.Statement; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JTextField; public class Test { JLabel q1,q2,note; JTextField a1,a2; JFrame f; JButton Submit; ResultSet rs,rs1; String qu1,qu2,ans1,ans2; String evala1,evala2; int intmarks=0; String name; Test(String value1) { name = value1; f=new JFrame(); f.getContentPane().setLayout(null); q1 = new JLabel(); q2 = new JLabel(); note = new JLabel(); a1 = new JTextField(); a2 = new JTextField(); Submit = new JButton(\"Submit\"); note.setBounds(20, 50, 100, 20); q1.setBounds(20, 100, 500, 20); q2.setBounds(20, 150, 500, 20); a1.setBounds(800, 100, 100, 20); a2.setBounds(800, 150, 100, 20); Submit.setBounds(1000,500 ,100 ,20 ); f.add(note); f.add(q1); f.add(a1); f.add(q2); f.add(a2); f.add(Submit); f.setTitle(\"Exam\"); f.setVisible(true); f.setSize(2000, 2000); display(); } private void display() { try { Connection con = DbConnection.getConnection(); Statement st = con.createStatement(); String sql = \"SELECT * FROM QB \"; rs = st.executeQuery(sql); if(rs.next()) { qu1 = rs.getString(\"QUESTION\"); q1.setText(qu1); } if(rs.next()) { qu2 = rs.getString(\"QUESTION\"); q2.setText(qu2); } } catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\", JOptionPane.ERROR_MESSAGE); } Submit.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { try { Connection con = DbConnection.getConnection(); Statement st = con.createStatement(); String sql = \"SELECT * FROM QB \"; rs = st.executeQuery(sql); if(rs.next()) { ans1=a1.getText(); evala1=rs.getString(\"answer\"); if(ans1.equalsIgnoreCase(evala1)) { intmarks = intmarks+5; } } if (rs.next()) { ans2=a2.getText(); evala2=rs.getString(\"answer\"); if(ans2.equalsIgnoreCase(evala2)) { intmarks = intmarks+5; } } System.out.println(intmarks); } catch(Exception e) { } try { Connection con = DbConnection.getConnection(); Statement st = con.createStatement(); String sql1 = \"Select * from Registration where Fname ='\" +name+\"'\"; rs1 = st.executeQuery(sql1); if(rs1.next()) { String tFNmae = rs1.getString(\"FName\"); String tLName = rs1.getString(\"LName\"); String tAddress = rs1.getString(\"Address\"); String tRoll = rs1.getString(\"Roll\"); String tCollege = rs1.getString(\"College\"); String tQualification = rs1.getString(\"Qualification\"); String tDob = rs1.getString(\"Dob\"); String tEmail = rs1.getString(\"Email\"); String tPhone = rs1.getString(\"Phone\"); int tmarks=intmarks; String sql2 = \"Update Registration \" + \"SET LName = '\"+tLName+\"',\" + \"Address = '\"+tAddress+\"',\" + \"Roll = '\"+tRoll+\"',\" + \"College = '\"+tCollege+\"',\" + \"Qualification = '\"+tQualification+\"',\" + \"Dob = '\"+tDob+\"',\" + \"Email = '\"+tEmail+\"',\" + \"Phone = '\"+tPhone+\"',\"+\"marks= '\"+tmarks+\"'\"+ \"Where FName = '\"+name+\"'\"; st.execute(sql2); JOptionPane.showMessageDialog(null,\"Record Updated Successfully\",null, JOptionPane.INFORMATION_MESSAGE); } } catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\", JOptionPane.ERROR_MESSAGE); } f.dispose(); Student s=new Student(name); s.main(null); } }); } public static void main(String args[]) { } }"}]}}
{"project_id":283,"chunk_id":0,"content":{"main_file_path":"OOAD-Sample-Project-master/OOAD-Sample-Project-master/exam_registration/Admin.java","main_file_content":"package exam_registration; import java.awt.Container; import java.awt.GridLayout; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.sql.Connection; import java.sql.ResultSet; import java.sql.Statement; import javax.swing.BoxLayout; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JPanel; public class Admin implements ActionListener { JLabel lblFName,lblLName,lblAddress,lblRoll,lblCollege,lblQualification,lblDob,lblEmail,lblPhone,lblmarks; JLabel lblFNameval,lblLNameval,lblAddressval,lblRollval,lblCollegeval,lblQualificationval,lblDobval,lblEmailval,lblPhoneval,lblmarksval; JFrame frame=new JFrame(\"ADMIN\"); ResultSet rs; JButton btnPrev,btnNext; public static void main(String[] args) { Admin obj = new Admin(); obj.createUI(); } private void createUI() { JPanel pnlNavigate = new JPanel(new GridLayout(1,2)); btnPrev = new JButton(\" << \"); btnPrev.setActionCommand(\"Prev\"); btnPrev.addActionListener(this); btnNext = new JButton(\" >> \"); btnNext.setActionCommand(\"Next\"); btnNext.addActionListener(this); pnlNavigate.add(btnPrev); pnlNavigate.add(btnNext); JPanel pnlNavAns = new JPanel(new GridLayout(10,2)); lblFName = new JLabel(\"First Nmae : \"); lblFNameval = new JLabel(\"val\"); lblLName = new JLabel(\" Last Name : \"); lblLNameval = new JLabel(\"val\"); lblAddress = new JLabel(\" Address : \"); lblAddressval = new JLabel(\"val\"); lblRoll = new JLabel(\" Roll No : \"); lblRollval = new JLabel(\"val\"); lblCollege = new JLabel(\" College Name : \"); lblCollegeval = new JLabel(\"val\"); lblQualification = new JLabel(\" Qualification : \"); lblQualificationval = new JLabel(\"val\"); lblDob = new JLabel(\" Date Of Birth : \"); lblDobval = new JLabel(\"val\"); lblEmail = new JLabel(\" e-mail Id : \"); lblEmailval = new JLabel(\"val\"); lblPhone = new JLabel(\" Phone No : \"); lblPhoneval = new JLabel(\"val\"); lblmarks = new JLabel(\"Total marks : \"); lblmarksval = new JLabel(\"val\"); pnlNavAns.add(lblFName); pnlNavAns.add(lblFNameval); pnlNavAns.add(lblLName); pnlNavAns.add(lblLNameval); pnlNavAns.add(lblRoll); pnlNavAns.add(lblRollval); pnlNavAns.add(lblAddress); pnlNavAns.add(lblAddressval); pnlNavAns.add(lblCollege); pnlNavAns.add(lblCollegeval); pnlNavAns.add(lblQualification); pnlNavAns.add(lblQualificationval); pnlNavAns.add(lblDob); pnlNavAns.add(lblDobval); pnlNavAns.add(lblEmail); pnlNavAns.add(lblEmailval); pnlNavAns.add(lblPhone); pnlNavAns.add(lblPhoneval); pnlNavAns.add(lblmarks); pnlNavAns.add(lblmarksval); Container cn = frame.getContentPane(); cn.setLayout(new BoxLayout(cn,BoxLayout.Y_AXIS)); frame.add(pnlNavigate); frame.add(pnlNavAns); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.pack(); frame.setVisible(true); } @Override public void actionPerformed(ActionEvent evt) { String action = evt.getActionCommand(); if(action.equals(\"Prev\")) { preNavigation(); } else if(action.equals(\"Next\")) { nextNavigation(); } } private void preNavigation() { try{ if(rs == null) { Connection con = DbConnection.getConnection(); String sql = \"SELECT * FROM registration\"; Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE); rs = st.executeQuery(sql); } if(rs.previous()) { populateValue(); } } catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\", JOptionPane.ERROR_MESSAGE); } } private void nextNavigation() { try{ if(rs == null) { Connection con = DbConnection.getConnection(); String sql = \"SELECT * FROM registration\"; Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE); rs = st.executeQuery(sql); } if(rs.next()) { populateValue(); } }catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\", JOptionPane.ERROR_MESSAGE); } } private void populateValue() throws Exception { String FNmae = rs.getString(\"FName\"); String LName = rs.getString(\"LName\"); String Address = rs.getString(\"Address\"); String Roll = rs.getString(\"Roll\"); String College = rs.getString(\"College\"); String Qualification = rs.getString(\"Qualification\"); String Dob = rs.getString(\"Dob\"); String Email = rs.getString(\"Email\"); String Phone = rs.getString(\"Phone\"); int marks = rs.getInt(\"marks\"); lblFNameval.setText(FNmae); lblLNameval.setText(LName); lblAddressval.setText(Address); lblRollval.setText(Roll); lblCollegeval.setText(College); lblQualificationval.setText(Qualification); lblDobval.setText(Dob); lblEmailval.setText(Email); lblPhoneval.setText(Phone); lblmarksval.setDisplayedMnemonic(marks); } }","dependencies":[{"file_path":"OOAD-Sample-Project-master/OOAD-Sample-Project-master/exam_registration/DbConnection.java","file_content":"package exam_registration; import java.sql.Connection; import java.sql.DriverManager; public class DbConnection { private static String url=\"jdbc:oracle:thin:@localhost:1522/orcl\"; public static Connection getConnection() throws Exception { Class.forName (\"oracle.jdbc.OracleDriver\"); Connection con=DriverManager.getConnection(url,\"system\",\"murali\"); return con; } }"}]}}
{"project_id":283,"chunk_id":0,"content":{"main_file_path":"OOAD-Sample-Project-master/OOAD-Sample-Project-master/exam_registration/Register.java","main_file_content":"package exam_registration; import javax.swing.*; import java.awt.*; import java.awt.event.*; import java.sql.*; public class Register implements ActionListener { JLabel lblFName,lblLname,lblAddress,lblRoll,lblCollege,lblQualification,lblDob,lblEmail,lblPhone,lblPassword; JTextField txtFName,txtLName,txtAddress,txtRoll,txtCollege,txtQualification,txtDob,txtEmail,txtPhone,txtPassword; JButton btnAdd,btnUpdate; ResultSet rs; JFrame frame; public static void main(String[] args) { Register obj = new Register(); obj.createUI(); } private void createUI() { frame = new JFrame(\"Regitration Form\"); JPanel pnlInput = new JPanel(new GridLayout(11,2)); lblFName = new JLabel(\" First Name : \"); txtFName = new JTextField(15); lblLname = new JLabel(\" Last Name : \"); txtLName = new JTextField(); lblAddress = new JLabel(\" Address : \"); txtAddress = new JTextField(); lblRoll = new JLabel(\" Roll No : \"); txtRoll = new JTextField(); lblCollege = new JLabel(\" College Name : \"); txtCollege = new JTextField(); lblQualification = new JLabel(\" Qualification : \"); txtQualification = new JTextField(); lblDob = new JLabel(\" Date Of Birth : \"); txtDob = new JTextField(); lblEmail = new JLabel(\" e-mail Id : \"); txtEmail = new JTextField(); lblPhone = new JLabel(\" Phone No : \"); txtPhone = new JTextField(); lblPassword = new JLabel(\" Enter new Password : \"); txtPassword = new JTextField(); pnlInput.add(lblFName); pnlInput.add(txtFName); pnlInput.add(lblLname); pnlInput.add(txtLName); pnlInput.add(lblPassword); pnlInput.add(txtPassword); pnlInput.add(lblAddress); pnlInput.add(txtAddress); pnlInput.add(lblRoll); pnlInput.add(txtRoll); pnlInput.add(lblCollege); pnlInput.add(txtCollege); pnlInput.add(lblQualification); pnlInput.add(txtQualification); pnlInput.add(lblDob); pnlInput.add(txtDob); pnlInput.add(lblEmail); pnlInput.add(txtEmail); pnlInput.add(lblPhone); pnlInput.add(txtPhone); JPanel pnlButton = new JPanel(new GridLayout(1,2)); btnAdd = new JButton(\"Add\"); btnAdd.addActionListener(this); btnUpdate = new JButton(\"Update\"); btnUpdate.addActionListener(this); pnlButton.add(btnAdd); pnlButton.add(btnUpdate); frame.getContentPane().setBackground(Color.CYAN); Container cn = frame.getContentPane(); cn.setLayout(new BoxLayout(cn,BoxLayout.Y_AXIS)); frame.add(pnlInput); frame.add(pnlButton); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.pack(); frame.setVisible(true); JOptionPane.showMessageDialog(null, \"First Name entered will be used as Username\",null, JOptionPane.INFORMATION_MESSAGE); } @Override public void actionPerformed(ActionEvent evt) { String action = evt.getActionCommand(); if(action.equals(\"Add\")) { addOperation(); } else if(action.equals(\"Update\")) { updateOperation(); } } private void addOperation() { try { Class.forName (\"oracle.jdbc.OracleDriver\"); Connection con = DriverManager.getConnection(\"jdbc:oracle:thin:@localhost:1522/orcl\",\"system\",\"murali\"); String sql = \"INSERT INTO Registration (FName,LName,Address,Roll,College,Qualification,Dob,Email,Phone,Password) \" + \"Values ('\"+txtFName.getText()+\"',\" + \"'\"+txtLName.getText()+\"',\"+\"'\"+txtAddress.getText()+\"',\"+\"'\"+txtRoll.getText()+\"',\"+\"'\"+txtCollege.getText()+\"',\"+\"'\"+txtQualification.getText()+\"',\"+\"'\"+txtDob.getText()+\"',\"+\"'\"+txtEmail.getText()+\"',\"+\"'\"+txtPhone.getText()+\"','\"+txtPassword.getText()+\"')\"; Statement st = con.createStatement(); st.execute(sql); JOptionPane.showMessageDialog(null, \"Record Added Succesfully.\",\"Record Added\", JOptionPane.INFORMATION_MESSAGE); String sql1 = \"insert into Login(username,password)\"+\"values('\"+txtFName.getText()+\"','\"+txtPassword.getText()+\"')\"; st.execute(sql1); JOptionPane.showMessageDialog(null, \"Login Created Succesfully.\",\"Login Created\", JOptionPane.INFORMATION_MESSAGE); frame.dispose(); LoginForm l=new LoginForm(); l.main(null); } catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\",JOptionPane.ERROR_MESSAGE); } } private void updateOperation() { try { Class.forName (\"oracle.jdbc.OracleDriver\"); Connection con = DriverManager.getConnection(\"jdbc:oracle:thin:@localhost:1522/orcl\",\"system\",\"murali\"); String sql = \"Update Registration \" + \"SET FName = '\"+txtFName.getText()+\"',LName = '\"+txtLName.getText()+\"',\" + \"Address = '\"+txtAddress.getText()+\"',\" + \"Roll = '\"+txtRoll.getText()+\"',\" + \"College = '\"+txtCollege.getText()+\"',\" + \"Qualification = '\"+txtQualification.getText()+\"',\" + \"Dob = '\"+txtDob.getText()+\"',\" + \"Email = '\"+txtEmail.getText()+\"',\" + \"Phone = '\"+txtPhone.getText()+\"',\" + \"Password = '\"+txtPassword.getText()+\"'\"+ \"Where FName = '\"+txtFName.getText()+\"'\"; JOptionPane.showMessageDialog(null, sql,\"Record Updated\", JOptionPane.INFORMATION_MESSAGE); Statement st = con.createStatement(); st.execute(sql); JOptionPane.showMessageDialog(null, \"Record Update Succesfully.\", \"Record Updated\",JOptionPane.INFORMATION_MESSAGE); String sql2 = \"update login \" + \"set username = '\"+txtFName.getText()+\"',\" + \"Password = '\"+txtPassword.getText()+\"' \"+ \"Where username = '\"+txtFName.getText()+\"'\"; st.execute(sql2); frame.dispose(); LoginForm l=new LoginForm(); l.main(null); } catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\", JOptionPane.ERROR_MESSAGE); } } }","dependencies":[{"file_path":"OOAD-Sample-Project-master/OOAD-Sample-Project-master/exam_registration/LoginForm.java","file_content":"package exam_registration; import java.awt.Dimension; import java.awt.Toolkit; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.sql.Connection; import java.sql.ResultSet; import java.sql.Statement; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JPasswordField; import javax.swing.JTextField; public class LoginForm { JButton SUBMIT,REGISTER,EXIT; JFrame f; JLabel label1,label2; JTextField text1; JTextField text2;public String value1; LoginForm() { f=new JFrame(); f.getContentPane().setLayout(null); label1 = new JLabel(); label1.setText(\"UserName:\"); label1.setBounds(400,150,100,20); text1 = new JTextField(25); text1.setBounds(500,150,100,20); label2 = new JLabel(); label2.setText(\"Password:\"); label2.setBounds(400,180,100,20); text2 = new JPasswordField(25); text2.setBounds(500,180,100,20); SUBMIT=new JButton(\"Login\"); SUBMIT.setBounds(450,210,100,20); REGISTER = new JButton(\"Register\"); REGISTER.setBounds(450,80,100,20); EXIT= new JButton(\"EXIT\"); EXIT.setBounds(450,250,100,20); f.add(label1); f.add(text1); f.add(label2); f.add(text2); f.add(SUBMIT); f.add(REGISTER); f.add(EXIT); Dimension screensize=Toolkit.getDefaultToolkit().getScreenSize(); double width=screensize.getWidth(); double height=screensize.getHeight(); int w=(int)width; int h=(int)height; f.setSize(w,h); f.setTitle(\"Exam Registration System\"); f.setVisible(true); REGISTER.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { System.out.println(\"check\"); f.dispose(); Register.main(null); } }); EXIT.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { int ans = JOptionPane.showConfirmDialog(null,\"Do U want to EXIT\",\"confirmation\",JOptionPane.YES_NO_OPTION); if(ans==0) { f.setVisible(false); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f.pack(); } } }); SUBMIT.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { value1=text1.getText();System.out.println(\"Value 1\"+ value1); String value2=text2.getText(); String user1=\"\"; String pass1=\"\"; String user2=\"\"; String pass2=\"\"; String user3=\"admin\"; String pass3=\"admin\"; try { Connection con=DbConnection.getConnection(); Statement st = con.createStatement(); ResultSet res = st.executeQuery(\"SELECT * FROM login where USERNAME='\"+value1+\"' and PASSWORD='\"+value2+\"'\"); while (res.next()) { user1 = res.getString(\"USERNAME\"); pass1 = res.getString(\"PASSWORD\"); } if(value1.equals(\"admin\") && value1.equals(\"admin\")) { System.out.println(\"check\"); f.dispose(); Admin a=new Admin(); Admin.main(null); } else if(value1.equals(user2) && value2.equals(pass2)) { JOptionPane.showMessageDialog(null,\"Incorrect login or password\",\"Error\",JOptionPane.ERROR_MESSAGE); } else if(value1.equals(user1) && value2.equals(pass1)) { System.out.println(\"check\"); f.dispose(); Student s=new Student(value1); s.main(null); } else { JOptionPane.showMessageDialog(null,\"Incorrect login or password\",\"Error\",JOptionPane.ERROR_MESSAGE); } } catch(Exception e) { System.out.println(e.getMessage()); } } }); } public static void main(String[] args) { new LoginForm(); } }"}]}}
{"project_id":283,"chunk_id":0,"content":{"main_file_path":"OOAD-Sample-Project-master/OOAD-Sample-Project-master/exam_registration/DbConnection.java","main_file_content":"package exam_registration; import java.sql.Connection; import java.sql.DriverManager; public class DbConnection { private static String url=\"jdbc:oracle:thin:@localhost:1522/orcl\"; public static Connection getConnection() throws Exception { Class.forName (\"oracle.jdbc.OracleDriver\"); Connection con=DriverManager.getConnection(url,\"system\",\"murali\"); return con; } }","dependencies":[]}}
{"project_id":283,"chunk_id":0,"content":{"main_file_path":"OOAD-Sample-Project-master/OOAD-Sample-Project-master/exam_registration/Test.java","main_file_content":"package exam_registration; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.sql.Connection; import java.sql.ResultSet; import java.sql.Statement; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JTextField; public class Test { JLabel q1,q2,note; JTextField a1,a2; JFrame f; JButton Submit; ResultSet rs,rs1; String qu1,qu2,ans1,ans2; String evala1,evala2; int intmarks=0; String name; Test(String value1) { name = value1; f=new JFrame(); f.getContentPane().setLayout(null); q1 = new JLabel(); q2 = new JLabel(); note = new JLabel(); a1 = new JTextField(); a2 = new JTextField(); Submit = new JButton(\"Submit\"); note.setBounds(20, 50, 100, 20); q1.setBounds(20, 100, 500, 20); q2.setBounds(20, 150, 500, 20); a1.setBounds(800, 100, 100, 20); a2.setBounds(800, 150, 100, 20); Submit.setBounds(1000,500 ,100 ,20 ); f.add(note); f.add(q1); f.add(a1); f.add(q2); f.add(a2); f.add(Submit); f.setTitle(\"Exam\"); f.setVisible(true); f.setSize(2000, 2000); display(); } private void display() { try { Connection con = DbConnection.getConnection(); Statement st = con.createStatement(); String sql = \"SELECT * FROM QB \"; rs = st.executeQuery(sql); if(rs.next()) { qu1 = rs.getString(\"QUESTION\"); q1.setText(qu1); } if(rs.next()) { qu2 = rs.getString(\"QUESTION\"); q2.setText(qu2); } } catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\", JOptionPane.ERROR_MESSAGE); } Submit.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { try { Connection con = DbConnection.getConnection(); Statement st = con.createStatement(); String sql = \"SELECT * FROM QB \"; rs = st.executeQuery(sql); if(rs.next()) { ans1=a1.getText(); evala1=rs.getString(\"answer\"); if(ans1.equalsIgnoreCase(evala1)) { intmarks = intmarks+5; } } if (rs.next()) { ans2=a2.getText(); evala2=rs.getString(\"answer\"); if(ans2.equalsIgnoreCase(evala2)) { intmarks = intmarks+5; } } System.out.println(intmarks); } catch(Exception e) { } try { Connection con = DbConnection.getConnection(); Statement st = con.createStatement(); String sql1 = \"Select * from Registration where Fname ='\" +name+\"'\"; rs1 = st.executeQuery(sql1); if(rs1.next()) { String tFNmae = rs1.getString(\"FName\"); String tLName = rs1.getString(\"LName\"); String tAddress = rs1.getString(\"Address\"); String tRoll = rs1.getString(\"Roll\"); String tCollege = rs1.getString(\"College\"); String tQualification = rs1.getString(\"Qualification\"); String tDob = rs1.getString(\"Dob\"); String tEmail = rs1.getString(\"Email\"); String tPhone = rs1.getString(\"Phone\"); int tmarks=intmarks; String sql2 = \"Update Registration \" + \"SET LName = '\"+tLName+\"',\" + \"Address = '\"+tAddress+\"',\" + \"Roll = '\"+tRoll+\"',\" + \"College = '\"+tCollege+\"',\" + \"Qualification = '\"+tQualification+\"',\" + \"Dob = '\"+tDob+\"',\" + \"Email = '\"+tEmail+\"',\" + \"Phone = '\"+tPhone+\"',\"+\"marks= '\"+tmarks+\"'\"+ \"Where FName = '\"+name+\"'\"; st.execute(sql2); JOptionPane.showMessageDialog(null,\"Record Updated Successfully\",null, JOptionPane.INFORMATION_MESSAGE); } } catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\", JOptionPane.ERROR_MESSAGE); } f.dispose(); Student s=new Student(name); s.main(null); } }); } public static void main(String args[]) { } }","dependencies":[{"file_path":"OOAD-Sample-Project-master/OOAD-Sample-Project-master/exam_registration/DbConnection.java","file_content":"package exam_registration; import java.sql.Connection; import java.sql.DriverManager; public class DbConnection { private static String url=\"jdbc:oracle:thin:@localhost:1522/orcl\"; public static Connection getConnection() throws Exception { Class.forName (\"oracle.jdbc.OracleDriver\"); Connection con=DriverManager.getConnection(url,\"system\",\"murali\"); return con; } }"},{"file_path":"OOAD-Sample-Project-master/OOAD-Sample-Project-master/exam_registration/Student.java","file_content":"package exam_registration; import java.awt.Container; import java.awt.GridLayout; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.sql.Connection; import java.sql.ResultSet; import java.sql.Statement; import javax.swing.BoxLayout; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JPanel; public class Student implements ActionListener { JLabel lblFName,lblLName,lblAddress,lblRoll,lblCollege,lblQualification,lblDob,lblEmail,lblPhone,lblmarks,lblFName1,lblLName1,lblRoll1; JLabel lblFNameval,lblLNameval,lblAddressval,lblRollval,lblCollegeval,lblQualificationval,lblDobval,lblEmailval,lblPhoneval,lblmarksval,lblFNameval1,lblLNameval1,lblRollval1; JButton btndetail,btntest,btnresult,btnback,btnlogout; String name,mark; JFrame frame = new JFrame(\"STUDENT DETAIL\"); JFrame f=new JFrame(\"EXAM RESULTS\"); ResultSet rs; Student(String value1) { name = value1; createUI(); } public static void main(String args[]) { } private void createUI() { JPanel pnlButton = new JPanel(new GridLayout(1,3)); JPanel detail = new JPanel(new GridLayout(9,2)); btndetail =new JButton(\"My Details\"); btndetail.addActionListener(this); btndetail.setBounds(100,150,100,20); btntest = new JButton (\"Write Test\"); btntest.addActionListener(this); btntest.setBounds(300,150,100,20); btnresult = new JButton(\"My Result\"); btnresult.addActionListener(this); btnresult.setBounds(500,150,100,20); btnback =new JButton(\"Back\"); btnback.addActionListener(this); btnback.setBounds(300,2000,100,20); btnlogout =new JButton(\"LOGOUT\"); btnlogout.addActionListener(this); btnlogout.setBounds(300,2000,100,20); pnlButton.add(btndetail); pnlButton.add(btntest); pnlButton.add(btnresult); pnlButton.add(btnresult); pnlButton.add(btnlogout); lblFName = new JLabel(\"First Nmae : \"); lblFNameval = new JLabel(\"val\"); lblLName = new JLabel(\" Last Name : \"); lblLNameval = new JLabel(\"val\"); lblAddress = new JLabel(\" Address : \"); lblAddressval = new JLabel(\"val\"); lblRoll = new JLabel(\" Roll No : \"); lblRollval = new JLabel(\"val\"); lblCollege = new JLabel(\" College Name : \"); lblCollegeval = new JLabel(\"val\"); lblQualification = new JLabel(\" Qualification : \"); lblQualificationval = new JLabel(\"val\"); lblDob = new JLabel(\" Date Of Birth : \"); lblDobval = new JLabel(\"val\"); lblEmail = new JLabel(\" e-mail Id : \"); lblEmailval = new JLabel(\"val\"); lblPhone = new JLabel(\" Phone No : \"); lblPhoneval = new JLabel(\"val\"); detail.add(lblFName); detail.add(lblFNameval); detail.add(lblLName); detail.add(lblLNameval); detail.add(lblAddress); detail.add(lblAddressval); detail.add(lblRoll); detail.add(lblRollval); detail.add(lblCollege); detail.add(lblCollegeval); detail.add(lblQualification); detail.add(lblQualificationval); detail.add(lblDob); detail.add(lblDobval); detail.add(lblEmail); detail.add(lblEmailval); detail.add(lblPhone); detail.add(lblPhoneval); JPanel results = new JPanel(new GridLayout(5,2)); lblFName1 = new JLabel(\"First Nmae : \"); lblFNameval1 = new JLabel(\"val\"); lblLName1 = new JLabel(\" Last Name : \"); lblLNameval1 = new JLabel(\"val\"); lblRoll1 = new JLabel(\" Roll No : \"); lblRollval1 = new JLabel(\"val\"); lblmarks = new JLabel(\"Total marks : \"); lblmarksval = new JLabel(\"val\"); results.add(lblFName1); results.add(lblFNameval1); results.add(lblLName1); results.add(lblLNameval1); results.add(lblRoll1); results.add(lblRollval1); results.add(lblmarks); results.add(lblmarksval); results.add(btnback); Container cn =frame.getContentPane(); cn.setLayout(new BoxLayout(cn,BoxLayout.Y_AXIS)); frame.add(pnlButton); frame.add(detail); f.add(results); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.pack(); frame.setVisible(true); frame.setSize(1024,768); } @Override public void actionPerformed(ActionEvent evt) { String action = evt.getActionCommand(); if(action.equals(\"My Details\")) { viewOperation(); } if(action.equals(\"Write Test\")) { writeOperation(); } if(action.equals(\"My Result\")) { resultOperation(); } if(action.equals(\"Back\")) { backpage(); } if(action.equals(\"LOGOUT\")) { frame.dispose(); LoginForm l=new LoginForm(); l.main(null); } } private void viewOperation() { try { Connection con = DbConnection.getConnection(); Statement st = con.createStatement(); String sql = \"Select * from Registration where Fname ='\" +name+\"'\"; rs = st.executeQuery(sql); if(rs.next()) { String FNmae = rs.getString(\"FName\"); String LName = rs.getString(\"LName\"); String Address = rs.getString(\"Address\"); String Roll = rs.getString(\"Roll\"); String College = rs.getString(\"College\"); String Qualification = rs.getString(\"Qualification\"); String Dob = rs.getString(\"Dob\"); String Email = rs.getString(\"Email\"); String Phone = rs.getString(\"Phone\"); lblFNameval.setText(FNmae); lblLNameval.setText(LName); lblAddressval.setText(Address); lblRollval.setText(Roll); lblCollegeval.setText(College); lblQualificationval.setText(Qualification); lblDobval.setText(Dob); lblEmailval.setText(Email); lblPhoneval.setText(Phone); } } catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\", JOptionPane.ERROR_MESSAGE); } } private void writeOperation() { frame.dispose(); Test t=new Test(name); t.main(null); } private void resultOperation() { try { Connection con = DbConnection.getConnection(); Statement st = con.createStatement(); String sql = \"Select * from Registration where Fname ='\" +name+\"'\"; rs = st.executeQuery(sql); if(rs.next()) { String FNmae = rs.getString(\"FName\"); String LName = rs.getString(\"LName\"); String Roll = rs.getString(\"Roll\"); mark = rs.getString(\"marks\"); lblFNameval1.setText(FNmae); lblLNameval1.setText(LName); lblRollval1.setText(Roll); lblmarksval.setText(mark); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f.pack(); frame.setVisible(false); f.setVisible(true); f.setSize(500,500); } } catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\", JOptionPane.ERROR_MESSAGE); } } private void backpage() { f.dispose(); frame.setVisible(true); } }"}]}}
{"project_id":283,"chunk_id":0,"content":{"main_file_path":"OOAD-Sample-Project-master/OOAD-Sample-Project-master/exam_registration/LoginForm.java","main_file_content":"package exam_registration; import java.awt.Dimension; import java.awt.Toolkit; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.sql.Connection; import java.sql.ResultSet; import java.sql.Statement; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JPasswordField; import javax.swing.JTextField; public class LoginForm { JButton SUBMIT,REGISTER,EXIT; JFrame f; JLabel label1,label2; JTextField text1; JTextField text2;public String value1; LoginForm() { f=new JFrame(); f.getContentPane().setLayout(null); label1 = new JLabel(); label1.setText(\"UserName:\"); label1.setBounds(400,150,100,20); text1 = new JTextField(25); text1.setBounds(500,150,100,20); label2 = new JLabel(); label2.setText(\"Password:\"); label2.setBounds(400,180,100,20); text2 = new JPasswordField(25); text2.setBounds(500,180,100,20); SUBMIT=new JButton(\"Login\"); SUBMIT.setBounds(450,210,100,20); REGISTER = new JButton(\"Register\"); REGISTER.setBounds(450,80,100,20); EXIT= new JButton(\"EXIT\"); EXIT.setBounds(450,250,100,20); f.add(label1); f.add(text1); f.add(label2); f.add(text2); f.add(SUBMIT); f.add(REGISTER); f.add(EXIT); Dimension screensize=Toolkit.getDefaultToolkit().getScreenSize(); double width=screensize.getWidth(); double height=screensize.getHeight(); int w=(int)width; int h=(int)height; f.setSize(w,h); f.setTitle(\"Exam Registration System\"); f.setVisible(true); REGISTER.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { System.out.println(\"check\"); f.dispose(); Register.main(null); } }); EXIT.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { int ans = JOptionPane.showConfirmDialog(null,\"Do U want to EXIT\",\"confirmation\",JOptionPane.YES_NO_OPTION); if(ans==0) { f.setVisible(false); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f.pack(); } } }); SUBMIT.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { value1=text1.getText();System.out.println(\"Value 1\"+ value1); String value2=text2.getText(); String user1=\"\"; String pass1=\"\"; String user2=\"\"; String pass2=\"\"; String user3=\"admin\"; String pass3=\"admin\"; try { Connection con=DbConnection.getConnection(); Statement st = con.createStatement(); ResultSet res = st.executeQuery(\"SELECT * FROM login where USERNAME='\"+value1+\"' and PASSWORD='\"+value2+\"'\"); while (res.next()) { user1 = res.getString(\"USERNAME\"); pass1 = res.getString(\"PASSWORD\"); } if(value1.equals(\"admin\") && value1.equals(\"admin\")) { System.out.println(\"check\"); f.dispose(); Admin a=new Admin(); Admin.main(null); } else if(value1.equals(user2) && value2.equals(pass2)) { JOptionPane.showMessageDialog(null,\"Incorrect login or password\",\"Error\",JOptionPane.ERROR_MESSAGE); } else if(value1.equals(user1) && value2.equals(pass1)) { System.out.println(\"check\"); f.dispose(); Student s=new Student(value1); s.main(null); } else { JOptionPane.showMessageDialog(null,\"Incorrect login or password\",\"Error\",JOptionPane.ERROR_MESSAGE); } } catch(Exception e) { System.out.println(e.getMessage()); } } }); } public static void main(String[] args) { new LoginForm(); } }","dependencies":[{"file_path":"OOAD-Sample-Project-master/OOAD-Sample-Project-master/exam_registration/Admin.java","file_content":"package exam_registration; import java.awt.Container; import java.awt.GridLayout; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.sql.Connection; import java.sql.ResultSet; import java.sql.Statement; import javax.swing.BoxLayout; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JPanel; public class Admin implements ActionListener { JLabel lblFName,lblLName,lblAddress,lblRoll,lblCollege,lblQualification,lblDob,lblEmail,lblPhone,lblmarks; JLabel lblFNameval,lblLNameval,lblAddressval,lblRollval,lblCollegeval,lblQualificationval,lblDobval,lblEmailval,lblPhoneval,lblmarksval; JFrame frame=new JFrame(\"ADMIN\"); ResultSet rs; JButton btnPrev,btnNext; public static void main(String[] args) { Admin obj = new Admin(); obj.createUI(); } private void createUI() { JPanel pnlNavigate = new JPanel(new GridLayout(1,2)); btnPrev = new JButton(\" << \"); btnPrev.setActionCommand(\"Prev\"); btnPrev.addActionListener(this); btnNext = new JButton(\" >> \"); btnNext.setActionCommand(\"Next\"); btnNext.addActionListener(this); pnlNavigate.add(btnPrev); pnlNavigate.add(btnNext); JPanel pnlNavAns = new JPanel(new GridLayout(10,2)); lblFName = new JLabel(\"First Nmae : \"); lblFNameval = new JLabel(\"val\"); lblLName = new JLabel(\" Last Name : \"); lblLNameval = new JLabel(\"val\"); lblAddress = new JLabel(\" Address : \"); lblAddressval = new JLabel(\"val\"); lblRoll = new JLabel(\" Roll No : \"); lblRollval = new JLabel(\"val\"); lblCollege = new JLabel(\" College Name : \"); lblCollegeval = new JLabel(\"val\"); lblQualification = new JLabel(\" Qualification : \"); lblQualificationval = new JLabel(\"val\"); lblDob = new JLabel(\" Date Of Birth : \"); lblDobval = new JLabel(\"val\"); lblEmail = new JLabel(\" e-mail Id : \"); lblEmailval = new JLabel(\"val\"); lblPhone = new JLabel(\" Phone No : \"); lblPhoneval = new JLabel(\"val\"); lblmarks = new JLabel(\"Total marks : \"); lblmarksval = new JLabel(\"val\"); pnlNavAns.add(lblFName); pnlNavAns.add(lblFNameval); pnlNavAns.add(lblLName); pnlNavAns.add(lblLNameval); pnlNavAns.add(lblRoll); pnlNavAns.add(lblRollval); pnlNavAns.add(lblAddress); pnlNavAns.add(lblAddressval); pnlNavAns.add(lblCollege); pnlNavAns.add(lblCollegeval); pnlNavAns.add(lblQualification); pnlNavAns.add(lblQualificationval); pnlNavAns.add(lblDob); pnlNavAns.add(lblDobval); pnlNavAns.add(lblEmail); pnlNavAns.add(lblEmailval); pnlNavAns.add(lblPhone); pnlNavAns.add(lblPhoneval); pnlNavAns.add(lblmarks); pnlNavAns.add(lblmarksval); Container cn = frame.getContentPane(); cn.setLayout(new BoxLayout(cn,BoxLayout.Y_AXIS)); frame.add(pnlNavigate); frame.add(pnlNavAns); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.pack(); frame.setVisible(true); } @Override public void actionPerformed(ActionEvent evt) { String action = evt.getActionCommand(); if(action.equals(\"Prev\")) { preNavigation(); } else if(action.equals(\"Next\")) { nextNavigation(); } } private void preNavigation() { try{ if(rs == null) { Connection con = DbConnection.getConnection(); String sql = \"SELECT * FROM registration\"; Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE); rs = st.executeQuery(sql); } if(rs.previous()) { populateValue(); } } catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\", JOptionPane.ERROR_MESSAGE); } } private void nextNavigation() { try{ if(rs == null) { Connection con = DbConnection.getConnection(); String sql = \"SELECT * FROM registration\"; Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE); rs = st.executeQuery(sql); } if(rs.next()) { populateValue(); } }catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\", JOptionPane.ERROR_MESSAGE); } } private void populateValue() throws Exception { String FNmae = rs.getString(\"FName\"); String LName = rs.getString(\"LName\"); String Address = rs.getString(\"Address\"); String Roll = rs.getString(\"Roll\"); String College = rs.getString(\"College\"); String Qualification = rs.getString(\"Qualification\"); String Dob = rs.getString(\"Dob\"); String Email = rs.getString(\"Email\"); String Phone = rs.getString(\"Phone\"); int marks = rs.getInt(\"marks\"); lblFNameval.setText(FNmae); lblLNameval.setText(LName); lblAddressval.setText(Address); lblRollval.setText(Roll); lblCollegeval.setText(College); lblQualificationval.setText(Qualification); lblDobval.setText(Dob); lblEmailval.setText(Email); lblPhoneval.setText(Phone); lblmarksval.setDisplayedMnemonic(marks); } }"},{"file_path":"OOAD-Sample-Project-master/OOAD-Sample-Project-master/exam_registration/DbConnection.java","file_content":"package exam_registration; import java.sql.Connection; import java.sql.DriverManager; public class DbConnection { private static String url=\"jdbc:oracle:thin:@localhost:1522/orcl\"; public static Connection getConnection() throws Exception { Class.forName (\"oracle.jdbc.OracleDriver\"); Connection con=DriverManager.getConnection(url,\"system\",\"murali\"); return con; } }"},{"file_path":"OOAD-Sample-Project-master/OOAD-Sample-Project-master/exam_registration/Register.java","file_content":"package exam_registration; import javax.swing.*; import java.awt.*; import java.awt.event.*; import java.sql.*; public class Register implements ActionListener { JLabel lblFName,lblLname,lblAddress,lblRoll,lblCollege,lblQualification,lblDob,lblEmail,lblPhone,lblPassword; JTextField txtFName,txtLName,txtAddress,txtRoll,txtCollege,txtQualification,txtDob,txtEmail,txtPhone,txtPassword; JButton btnAdd,btnUpdate; ResultSet rs; JFrame frame; public static void main(String[] args) { Register obj = new Register(); obj.createUI(); } private void createUI() { frame = new JFrame(\"Regitration Form\"); JPanel pnlInput = new JPanel(new GridLayout(11,2)); lblFName = new JLabel(\" First Name : \"); txtFName = new JTextField(15); lblLname = new JLabel(\" Last Name : \"); txtLName = new JTextField(); lblAddress = new JLabel(\" Address : \"); txtAddress = new JTextField(); lblRoll = new JLabel(\" Roll No : \"); txtRoll = new JTextField(); lblCollege = new JLabel(\" College Name : \"); txtCollege = new JTextField(); lblQualification = new JLabel(\" Qualification : \"); txtQualification = new JTextField(); lblDob = new JLabel(\" Date Of Birth : \"); txtDob = new JTextField(); lblEmail = new JLabel(\" e-mail Id : \"); txtEmail = new JTextField(); lblPhone = new JLabel(\" Phone No : \"); txtPhone = new JTextField(); lblPassword = new JLabel(\" Enter new Password : \"); txtPassword = new JTextField(); pnlInput.add(lblFName); pnlInput.add(txtFName); pnlInput.add(lblLname); pnlInput.add(txtLName); pnlInput.add(lblPassword); pnlInput.add(txtPassword); pnlInput.add(lblAddress); pnlInput.add(txtAddress); pnlInput.add(lblRoll); pnlInput.add(txtRoll); pnlInput.add(lblCollege); pnlInput.add(txtCollege); pnlInput.add(lblQualification); pnlInput.add(txtQualification); pnlInput.add(lblDob); pnlInput.add(txtDob); pnlInput.add(lblEmail); pnlInput.add(txtEmail); pnlInput.add(lblPhone); pnlInput.add(txtPhone); JPanel pnlButton = new JPanel(new GridLayout(1,2)); btnAdd = new JButton(\"Add\"); btnAdd.addActionListener(this); btnUpdate = new JButton(\"Update\"); btnUpdate.addActionListener(this); pnlButton.add(btnAdd); pnlButton.add(btnUpdate); frame.getContentPane().setBackground(Color.CYAN); Container cn = frame.getContentPane(); cn.setLayout(new BoxLayout(cn,BoxLayout.Y_AXIS)); frame.add(pnlInput); frame.add(pnlButton); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.pack(); frame.setVisible(true); JOptionPane.showMessageDialog(null, \"First Name entered will be used as Username\",null, JOptionPane.INFORMATION_MESSAGE); } @Override public void actionPerformed(ActionEvent evt) { String action = evt.getActionCommand(); if(action.equals(\"Add\")) { addOperation(); } else if(action.equals(\"Update\")) { updateOperation(); } } private void addOperation() { try { Class.forName (\"oracle.jdbc.OracleDriver\"); Connection con = DriverManager.getConnection(\"jdbc:oracle:thin:@localhost:1522/orcl\",\"system\",\"murali\"); String sql = \"INSERT INTO Registration (FName,LName,Address,Roll,College,Qualification,Dob,Email,Phone,Password) \" + \"Values ('\"+txtFName.getText()+\"',\" + \"'\"+txtLName.getText()+\"',\"+\"'\"+txtAddress.getText()+\"',\"+\"'\"+txtRoll.getText()+\"',\"+\"'\"+txtCollege.getText()+\"',\"+\"'\"+txtQualification.getText()+\"',\"+\"'\"+txtDob.getText()+\"',\"+\"'\"+txtEmail.getText()+\"',\"+\"'\"+txtPhone.getText()+\"','\"+txtPassword.getText()+\"')\"; Statement st = con.createStatement(); st.execute(sql); JOptionPane.showMessageDialog(null, \"Record Added Succesfully.\",\"Record Added\", JOptionPane.INFORMATION_MESSAGE); String sql1 = \"insert into Login(username,password)\"+\"values('\"+txtFName.getText()+\"','\"+txtPassword.getText()+\"')\"; st.execute(sql1); JOptionPane.showMessageDialog(null, \"Login Created Succesfully.\",\"Login Created\", JOptionPane.INFORMATION_MESSAGE); frame.dispose(); LoginForm l=new LoginForm(); l.main(null); } catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\",JOptionPane.ERROR_MESSAGE); } } private void updateOperation() { try { Class.forName (\"oracle.jdbc.OracleDriver\"); Connection con = DriverManager.getConnection(\"jdbc:oracle:thin:@localhost:1522/orcl\",\"system\",\"murali\"); String sql = \"Update Registration \" + \"SET FName = '\"+txtFName.getText()+\"',LName = '\"+txtLName.getText()+\"',\" + \"Address = '\"+txtAddress.getText()+\"',\" + \"Roll = '\"+txtRoll.getText()+\"',\" + \"College = '\"+txtCollege.getText()+\"',\" + \"Qualification = '\"+txtQualification.getText()+\"',\" + \"Dob = '\"+txtDob.getText()+\"',\" + \"Email = '\"+txtEmail.getText()+\"',\" + \"Phone = '\"+txtPhone.getText()+\"',\" + \"Password = '\"+txtPassword.getText()+\"'\"+ \"Where FName = '\"+txtFName.getText()+\"'\"; JOptionPane.showMessageDialog(null, sql,\"Record Updated\", JOptionPane.INFORMATION_MESSAGE); Statement st = con.createStatement(); st.execute(sql); JOptionPane.showMessageDialog(null, \"Record Update Succesfully.\", \"Record Updated\",JOptionPane.INFORMATION_MESSAGE); String sql2 = \"update login \" + \"set username = '\"+txtFName.getText()+\"',\" + \"Password = '\"+txtPassword.getText()+\"' \"+ \"Where username = '\"+txtFName.getText()+\"'\"; st.execute(sql2); frame.dispose(); LoginForm l=new LoginForm(); l.main(null); } catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\", JOptionPane.ERROR_MESSAGE); } } }"},{"file_path":"OOAD-Sample-Project-master/OOAD-Sample-Project-master/exam_registration/Student.java","file_content":"package exam_registration; import java.awt.Container; import java.awt.GridLayout; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.sql.Connection; import java.sql.ResultSet; import java.sql.Statement; import javax.swing.BoxLayout; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JPanel; public class Student implements ActionListener { JLabel lblFName,lblLName,lblAddress,lblRoll,lblCollege,lblQualification,lblDob,lblEmail,lblPhone,lblmarks,lblFName1,lblLName1,lblRoll1; JLabel lblFNameval,lblLNameval,lblAddressval,lblRollval,lblCollegeval,lblQualificationval,lblDobval,lblEmailval,lblPhoneval,lblmarksval,lblFNameval1,lblLNameval1,lblRollval1; JButton btndetail,btntest,btnresult,btnback,btnlogout; String name,mark; JFrame frame = new JFrame(\"STUDENT DETAIL\"); JFrame f=new JFrame(\"EXAM RESULTS\"); ResultSet rs; Student(String value1) { name = value1; createUI(); } public static void main(String args[]) { } private void createUI() { JPanel pnlButton = new JPanel(new GridLayout(1,3)); JPanel detail = new JPanel(new GridLayout(9,2)); btndetail =new JButton(\"My Details\"); btndetail.addActionListener(this); btndetail.setBounds(100,150,100,20); btntest = new JButton (\"Write Test\"); btntest.addActionListener(this); btntest.setBounds(300,150,100,20); btnresult = new JButton(\"My Result\"); btnresult.addActionListener(this); btnresult.setBounds(500,150,100,20); btnback =new JButton(\"Back\"); btnback.addActionListener(this); btnback.setBounds(300,2000,100,20); btnlogout =new JButton(\"LOGOUT\"); btnlogout.addActionListener(this); btnlogout.setBounds(300,2000,100,20); pnlButton.add(btndetail); pnlButton.add(btntest); pnlButton.add(btnresult); pnlButton.add(btnresult); pnlButton.add(btnlogout); lblFName = new JLabel(\"First Nmae : \"); lblFNameval = new JLabel(\"val\"); lblLName = new JLabel(\" Last Name : \"); lblLNameval = new JLabel(\"val\"); lblAddress = new JLabel(\" Address : \"); lblAddressval = new JLabel(\"val\"); lblRoll = new JLabel(\" Roll No : \"); lblRollval = new JLabel(\"val\"); lblCollege = new JLabel(\" College Name : \"); lblCollegeval = new JLabel(\"val\"); lblQualification = new JLabel(\" Qualification : \"); lblQualificationval = new JLabel(\"val\"); lblDob = new JLabel(\" Date Of Birth : \"); lblDobval = new JLabel(\"val\"); lblEmail = new JLabel(\" e-mail Id : \"); lblEmailval = new JLabel(\"val\"); lblPhone = new JLabel(\" Phone No : \"); lblPhoneval = new JLabel(\"val\"); detail.add(lblFName); detail.add(lblFNameval); detail.add(lblLName); detail.add(lblLNameval); detail.add(lblAddress); detail.add(lblAddressval); detail.add(lblRoll); detail.add(lblRollval); detail.add(lblCollege); detail.add(lblCollegeval); detail.add(lblQualification); detail.add(lblQualificationval); detail.add(lblDob); detail.add(lblDobval); detail.add(lblEmail); detail.add(lblEmailval); detail.add(lblPhone); detail.add(lblPhoneval); JPanel results = new JPanel(new GridLayout(5,2)); lblFName1 = new JLabel(\"First Nmae : \"); lblFNameval1 = new JLabel(\"val\"); lblLName1 = new JLabel(\" Last Name : \"); lblLNameval1 = new JLabel(\"val\"); lblRoll1 = new JLabel(\" Roll No : \"); lblRollval1 = new JLabel(\"val\"); lblmarks = new JLabel(\"Total marks : \"); lblmarksval = new JLabel(\"val\"); results.add(lblFName1); results.add(lblFNameval1); results.add(lblLName1); results.add(lblLNameval1); results.add(lblRoll1); results.add(lblRollval1); results.add(lblmarks); results.add(lblmarksval); results.add(btnback); Container cn =frame.getContentPane(); cn.setLayout(new BoxLayout(cn,BoxLayout.Y_AXIS)); frame.add(pnlButton); frame.add(detail); f.add(results); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.pack(); frame.setVisible(true); frame.setSize(1024,768); } @Override public void actionPerformed(ActionEvent evt) { String action = evt.getActionCommand(); if(action.equals(\"My Details\")) { viewOperation(); } if(action.equals(\"Write Test\")) { writeOperation(); } if(action.equals(\"My Result\")) { resultOperation(); } if(action.equals(\"Back\")) { backpage(); } if(action.equals(\"LOGOUT\")) { frame.dispose(); LoginForm l=new LoginForm(); l.main(null); } } private void viewOperation() { try { Connection con = DbConnection.getConnection(); Statement st = con.createStatement(); String sql = \"Select * from Registration where Fname ='\" +name+\"'\"; rs = st.executeQuery(sql); if(rs.next()) { String FNmae = rs.getString(\"FName\"); String LName = rs.getString(\"LName\"); String Address = rs.getString(\"Address\"); String Roll = rs.getString(\"Roll\"); String College = rs.getString(\"College\"); String Qualification = rs.getString(\"Qualification\"); String Dob = rs.getString(\"Dob\"); String Email = rs.getString(\"Email\"); String Phone = rs.getString(\"Phone\"); lblFNameval.setText(FNmae); lblLNameval.setText(LName); lblAddressval.setText(Address); lblRollval.setText(Roll); lblCollegeval.setText(College); lblQualificationval.setText(Qualification); lblDobval.setText(Dob); lblEmailval.setText(Email); lblPhoneval.setText(Phone); } } catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\", JOptionPane.ERROR_MESSAGE); } } private void writeOperation() { frame.dispose(); Test t=new Test(name); t.main(null); } private void resultOperation() { try { Connection con = DbConnection.getConnection(); Statement st = con.createStatement(); String sql = \"Select * from Registration where Fname ='\" +name+\"'\"; rs = st.executeQuery(sql); if(rs.next()) { String FNmae = rs.getString(\"FName\"); String LName = rs.getString(\"LName\"); String Roll = rs.getString(\"Roll\"); mark = rs.getString(\"marks\"); lblFNameval1.setText(FNmae); lblLNameval1.setText(LName); lblRollval1.setText(Roll); lblmarksval.setText(mark); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f.pack(); frame.setVisible(false); f.setVisible(true); f.setSize(500,500); } } catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\", JOptionPane.ERROR_MESSAGE); } } private void backpage() { f.dispose(); frame.setVisible(true); } }"}]}}
{"project_id":283,"chunk_id":0,"content":{"main_file_path":"OOAD-Sample-Project-master/OOAD-Sample-Project-master/exam_registration/Student.java","main_file_content":"package exam_registration; import java.awt.Container; import java.awt.GridLayout; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.sql.Connection; import java.sql.ResultSet; import java.sql.Statement; import javax.swing.BoxLayout; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JPanel; public class Student implements ActionListener { JLabel lblFName,lblLName,lblAddress,lblRoll,lblCollege,lblQualification,lblDob,lblEmail,lblPhone,lblmarks,lblFName1,lblLName1,lblRoll1; JLabel lblFNameval,lblLNameval,lblAddressval,lblRollval,lblCollegeval,lblQualificationval,lblDobval,lblEmailval,lblPhoneval,lblmarksval,lblFNameval1,lblLNameval1,lblRollval1; JButton btndetail,btntest,btnresult,btnback,btnlogout; String name,mark; JFrame frame = new JFrame(\"STUDENT DETAIL\"); JFrame f=new JFrame(\"EXAM RESULTS\"); ResultSet rs; Student(String value1) { name = value1; createUI(); } public static void main(String args[]) { } private void createUI() { JPanel pnlButton = new JPanel(new GridLayout(1,3)); JPanel detail = new JPanel(new GridLayout(9,2)); btndetail =new JButton(\"My Details\"); btndetail.addActionListener(this); btndetail.setBounds(100,150,100,20); btntest = new JButton (\"Write Test\"); btntest.addActionListener(this); btntest.setBounds(300,150,100,20); btnresult = new JButton(\"My Result\"); btnresult.addActionListener(this); btnresult.setBounds(500,150,100,20); btnback =new JButton(\"Back\"); btnback.addActionListener(this); btnback.setBounds(300,2000,100,20); btnlogout =new JButton(\"LOGOUT\"); btnlogout.addActionListener(this); btnlogout.setBounds(300,2000,100,20); pnlButton.add(btndetail); pnlButton.add(btntest); pnlButton.add(btnresult); pnlButton.add(btnresult); pnlButton.add(btnlogout); lblFName = new JLabel(\"First Nmae : \"); lblFNameval = new JLabel(\"val\"); lblLName = new JLabel(\" Last Name : \"); lblLNameval = new JLabel(\"val\"); lblAddress = new JLabel(\" Address : \"); lblAddressval = new JLabel(\"val\"); lblRoll = new JLabel(\" Roll No : \"); lblRollval = new JLabel(\"val\"); lblCollege = new JLabel(\" College Name : \"); lblCollegeval = new JLabel(\"val\"); lblQualification = new JLabel(\" Qualification : \"); lblQualificationval = new JLabel(\"val\"); lblDob = new JLabel(\" Date Of Birth : \"); lblDobval = new JLabel(\"val\"); lblEmail = new JLabel(\" e-mail Id : \"); lblEmailval = new JLabel(\"val\"); lblPhone = new JLabel(\" Phone No : \"); lblPhoneval = new JLabel(\"val\"); detail.add(lblFName); detail.add(lblFNameval); detail.add(lblLName); detail.add(lblLNameval); detail.add(lblAddress); detail.add(lblAddressval); detail.add(lblRoll); detail.add(lblRollval); detail.add(lblCollege); detail.add(lblCollegeval); detail.add(lblQualification); detail.add(lblQualificationval); detail.add(lblDob); detail.add(lblDobval); detail.add(lblEmail); detail.add(lblEmailval); detail.add(lblPhone); detail.add(lblPhoneval); JPanel results = new JPanel(new GridLayout(5,2)); lblFName1 = new JLabel(\"First Nmae : \"); lblFNameval1 = new JLabel(\"val\"); lblLName1 = new JLabel(\" Last Name : \"); lblLNameval1 = new JLabel(\"val\"); lblRoll1 = new JLabel(\" Roll No : \"); lblRollval1 = new JLabel(\"val\"); lblmarks = new JLabel(\"Total marks : \"); lblmarksval = new JLabel(\"val\"); results.add(lblFName1); results.add(lblFNameval1); results.add(lblLName1); results.add(lblLNameval1); results.add(lblRoll1); results.add(lblRollval1); results.add(lblmarks); results.add(lblmarksval); results.add(btnback); Container cn =frame.getContentPane(); cn.setLayout(new BoxLayout(cn,BoxLayout.Y_AXIS)); frame.add(pnlButton); frame.add(detail); f.add(results); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.pack(); frame.setVisible(true); frame.setSize(1024,768); } @Override public void actionPerformed(ActionEvent evt) { String action = evt.getActionCommand(); if(action.equals(\"My Details\")) { viewOperation(); } if(action.equals(\"Write Test\")) { writeOperation(); } if(action.equals(\"My Result\")) { resultOperation(); } if(action.equals(\"Back\")) { backpage(); } if(action.equals(\"LOGOUT\")) { frame.dispose(); LoginForm l=new LoginForm(); l.main(null); } } private void viewOperation() { try { Connection con = DbConnection.getConnection(); Statement st = con.createStatement(); String sql = \"Select * from Registration where Fname ='\" +name+\"'\"; rs = st.executeQuery(sql); if(rs.next()) { String FNmae = rs.getString(\"FName\"); String LName = rs.getString(\"LName\"); String Address = rs.getString(\"Address\"); String Roll = rs.getString(\"Roll\"); String College = rs.getString(\"College\"); String Qualification = rs.getString(\"Qualification\"); String Dob = rs.getString(\"Dob\"); String Email = rs.getString(\"Email\"); String Phone = rs.getString(\"Phone\"); lblFNameval.setText(FNmae); lblLNameval.setText(LName); lblAddressval.setText(Address); lblRollval.setText(Roll); lblCollegeval.setText(College); lblQualificationval.setText(Qualification); lblDobval.setText(Dob); lblEmailval.setText(Email); lblPhoneval.setText(Phone); } } catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\", JOptionPane.ERROR_MESSAGE); } } private void writeOperation() { frame.dispose(); Test t=new Test(name); t.main(null); } private void resultOperation() { try { Connection con = DbConnection.getConnection(); Statement st = con.createStatement(); String sql = \"Select * from Registration where Fname ='\" +name+\"'\"; rs = st.executeQuery(sql); if(rs.next()) { String FNmae = rs.getString(\"FName\"); String LName = rs.getString(\"LName\"); String Roll = rs.getString(\"Roll\"); mark = rs.getString(\"marks\"); lblFNameval1.setText(FNmae); lblLNameval1.setText(LName); lblRollval1.setText(Roll); lblmarksval.setText(mark); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f.pack(); frame.setVisible(false); f.setVisible(true); f.setSize(500,500); } } catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\", JOptionPane.ERROR_MESSAGE); } } private void backpage() { f.dispose(); frame.setVisible(true); } }","dependencies":[{"file_path":"OOAD-Sample-Project-master/OOAD-Sample-Project-master/exam_registration/DbConnection.java","file_content":"package exam_registration; import java.sql.Connection; import java.sql.DriverManager; public class DbConnection { private static String url=\"jdbc:oracle:thin:@localhost:1522/orcl\"; public static Connection getConnection() throws Exception { Class.forName (\"oracle.jdbc.OracleDriver\"); Connection con=DriverManager.getConnection(url,\"system\",\"murali\"); return con; } }"},{"file_path":"OOAD-Sample-Project-master/OOAD-Sample-Project-master/exam_registration/LoginForm.java","file_content":"package exam_registration; import java.awt.Dimension; import java.awt.Toolkit; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.sql.Connection; import java.sql.ResultSet; import java.sql.Statement; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JPasswordField; import javax.swing.JTextField; public class LoginForm { JButton SUBMIT,REGISTER,EXIT; JFrame f; JLabel label1,label2; JTextField text1; JTextField text2;public String value1; LoginForm() { f=new JFrame(); f.getContentPane().setLayout(null); label1 = new JLabel(); label1.setText(\"UserName:\"); label1.setBounds(400,150,100,20); text1 = new JTextField(25); text1.setBounds(500,150,100,20); label2 = new JLabel(); label2.setText(\"Password:\"); label2.setBounds(400,180,100,20); text2 = new JPasswordField(25); text2.setBounds(500,180,100,20); SUBMIT=new JButton(\"Login\"); SUBMIT.setBounds(450,210,100,20); REGISTER = new JButton(\"Register\"); REGISTER.setBounds(450,80,100,20); EXIT= new JButton(\"EXIT\"); EXIT.setBounds(450,250,100,20); f.add(label1); f.add(text1); f.add(label2); f.add(text2); f.add(SUBMIT); f.add(REGISTER); f.add(EXIT); Dimension screensize=Toolkit.getDefaultToolkit().getScreenSize(); double width=screensize.getWidth(); double height=screensize.getHeight(); int w=(int)width; int h=(int)height; f.setSize(w,h); f.setTitle(\"Exam Registration System\"); f.setVisible(true); REGISTER.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { System.out.println(\"check\"); f.dispose(); Register.main(null); } }); EXIT.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { int ans = JOptionPane.showConfirmDialog(null,\"Do U want to EXIT\",\"confirmation\",JOptionPane.YES_NO_OPTION); if(ans==0) { f.setVisible(false); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f.pack(); } } }); SUBMIT.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { value1=text1.getText();System.out.println(\"Value 1\"+ value1); String value2=text2.getText(); String user1=\"\"; String pass1=\"\"; String user2=\"\"; String pass2=\"\"; String user3=\"admin\"; String pass3=\"admin\"; try { Connection con=DbConnection.getConnection(); Statement st = con.createStatement(); ResultSet res = st.executeQuery(\"SELECT * FROM login where USERNAME='\"+value1+\"' and PASSWORD='\"+value2+\"'\"); while (res.next()) { user1 = res.getString(\"USERNAME\"); pass1 = res.getString(\"PASSWORD\"); } if(value1.equals(\"admin\") && value1.equals(\"admin\")) { System.out.println(\"check\"); f.dispose(); Admin a=new Admin(); Admin.main(null); } else if(value1.equals(user2) && value2.equals(pass2)) { JOptionPane.showMessageDialog(null,\"Incorrect login or password\",\"Error\",JOptionPane.ERROR_MESSAGE); } else if(value1.equals(user1) && value2.equals(pass1)) { System.out.println(\"check\"); f.dispose(); Student s=new Student(value1); s.main(null); } else { JOptionPane.showMessageDialog(null,\"Incorrect login or password\",\"Error\",JOptionPane.ERROR_MESSAGE); } } catch(Exception e) { System.out.println(e.getMessage()); } } }); } public static void main(String[] args) { new LoginForm(); } }"},{"file_path":"OOAD-Sample-Project-master/OOAD-Sample-Project-master/exam_registration/Test.java","file_content":"package exam_registration; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.sql.Connection; import java.sql.ResultSet; import java.sql.Statement; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JTextField; public class Test { JLabel q1,q2,note; JTextField a1,a2; JFrame f; JButton Submit; ResultSet rs,rs1; String qu1,qu2,ans1,ans2; String evala1,evala2; int intmarks=0; String name; Test(String value1) { name = value1; f=new JFrame(); f.getContentPane().setLayout(null); q1 = new JLabel(); q2 = new JLabel(); note = new JLabel(); a1 = new JTextField(); a2 = new JTextField(); Submit = new JButton(\"Submit\"); note.setBounds(20, 50, 100, 20); q1.setBounds(20, 100, 500, 20); q2.setBounds(20, 150, 500, 20); a1.setBounds(800, 100, 100, 20); a2.setBounds(800, 150, 100, 20); Submit.setBounds(1000,500 ,100 ,20 ); f.add(note); f.add(q1); f.add(a1); f.add(q2); f.add(a2); f.add(Submit); f.setTitle(\"Exam\"); f.setVisible(true); f.setSize(2000, 2000); display(); } private void display() { try { Connection con = DbConnection.getConnection(); Statement st = con.createStatement(); String sql = \"SELECT * FROM QB \"; rs = st.executeQuery(sql); if(rs.next()) { qu1 = rs.getString(\"QUESTION\"); q1.setText(qu1); } if(rs.next()) { qu2 = rs.getString(\"QUESTION\"); q2.setText(qu2); } } catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\", JOptionPane.ERROR_MESSAGE); } Submit.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent ae) { try { Connection con = DbConnection.getConnection(); Statement st = con.createStatement(); String sql = \"SELECT * FROM QB \"; rs = st.executeQuery(sql); if(rs.next()) { ans1=a1.getText(); evala1=rs.getString(\"answer\"); if(ans1.equalsIgnoreCase(evala1)) { intmarks = intmarks+5; } } if (rs.next()) { ans2=a2.getText(); evala2=rs.getString(\"answer\"); if(ans2.equalsIgnoreCase(evala2)) { intmarks = intmarks+5; } } System.out.println(intmarks); } catch(Exception e) { } try { Connection con = DbConnection.getConnection(); Statement st = con.createStatement(); String sql1 = \"Select * from Registration where Fname ='\" +name+\"'\"; rs1 = st.executeQuery(sql1); if(rs1.next()) { String tFNmae = rs1.getString(\"FName\"); String tLName = rs1.getString(\"LName\"); String tAddress = rs1.getString(\"Address\"); String tRoll = rs1.getString(\"Roll\"); String tCollege = rs1.getString(\"College\"); String tQualification = rs1.getString(\"Qualification\"); String tDob = rs1.getString(\"Dob\"); String tEmail = rs1.getString(\"Email\"); String tPhone = rs1.getString(\"Phone\"); int tmarks=intmarks; String sql2 = \"Update Registration \" + \"SET LName = '\"+tLName+\"',\" + \"Address = '\"+tAddress+\"',\" + \"Roll = '\"+tRoll+\"',\" + \"College = '\"+tCollege+\"',\" + \"Qualification = '\"+tQualification+\"',\" + \"Dob = '\"+tDob+\"',\" + \"Email = '\"+tEmail+\"',\" + \"Phone = '\"+tPhone+\"',\"+\"marks= '\"+tmarks+\"'\"+ \"Where FName = '\"+name+\"'\"; st.execute(sql2); JOptionPane.showMessageDialog(null,\"Record Updated Successfully\",null, JOptionPane.INFORMATION_MESSAGE); } } catch(Exception e) { JOptionPane.showMessageDialog(null, e.getMessage(),\"Error\", JOptionPane.ERROR_MESSAGE); } f.dispose(); Student s=new Student(name); s.main(null); } }); } public static void main(String args[]) { } }"}]}}
